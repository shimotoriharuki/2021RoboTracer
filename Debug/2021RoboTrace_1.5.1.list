
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017660  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08017820  08017820  00027820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018324  08018324  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018324  08018324  00028324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801832c  0801832c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801832c  0801832c  0002832c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018334  08018334  00028334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018338  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037df8  200001e0  08018514  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fd8  08018514  00037fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037dda  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007909  00000000  00000000  00067fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021e0  00000000  00000000  0006f8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f20  00000000  00000000  00071ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f32  00000000  00000000  000739f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025750  00000000  00000000  000aa922  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001102d3  00000000  00000000  000d0072  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e0345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a108  00000000  00000000  001e03c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017808 	.word	0x08017808

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017808 	.word	0x08017808

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 f8b8 	bl	800914c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035acc 	.word	0x20035acc

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 f8a0 	bl	800914c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035acc 	.word	0x20035acc

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 ff41 	bl	8008ea8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fca8 	bl	800797c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fca2 	bl	800797c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fc9c 	bl	800797c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fc96 	bl	800797c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fc90 	bl	800797c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fc8a 	bl	800797c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fc84 	bl	800797c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fc7e 	bl	800797c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fc78 	bl	800797c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fc72 	bl	800797c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fc66 	bl	800797c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fc60 	bl	800797c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 ff41 	bl	8014fb0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00b fe60 	bl	800ce7c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00b fe5c 	bl	800ce7c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20035d20 	.word	0x20035d20
 80011e0:	20035a04 	.word	0x20035a04
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b65      	ldr	r3, [pc, #404]	; (8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8001394 <_ZN7Encoder6updateEv+0x1a4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001398 <_ZN7Encoder6updateEv+0x1a8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b60      	ldr	r3, [pc, #384]	; (800139c <_ZN7Encoder6updateEv+0x1ac>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001394 <_ZN7Encoder6updateEv+0x1a4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001398 <_ZN7Encoder6updateEv+0x1a8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a59      	ldr	r2, [pc, #356]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a34c      	add	r3, pc, #304	; (adr r3, 8001378 <_ZN7Encoder6updateEv+0x188>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <_ZN7Encoder6updateEv+0x1b4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a347      	add	r3, pc, #284	; (adr r3, 8001380 <_ZN7Encoder6updateEv+0x190>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a339      	add	r3, pc, #228	; (adr r3, 8001378 <_ZN7Encoder6updateEv+0x188>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b40      	ldr	r3, [pc, #256]	; (80013a8 <_ZN7Encoder6updateEv+0x1b8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a334      	add	r3, pc, #208	; (adr r3, 8001380 <_ZN7Encoder6updateEv+0x190>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a30      	ldr	r2, [pc, #192]	; (80013a4 <_ZN7Encoder6updateEv+0x1b4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a2f      	ldr	r2, [pc, #188]	; (80013a8 <_ZN7Encoder6updateEv+0x1b8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a320      	add	r3, pc, #128	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 8001368:	6013      	str	r3, [r2, #0]
}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bdb0      	pop	{r4, r5, r7, pc}
 8001372:	bf00      	nop
 8001374:	f3af 8000 	nop.w
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	ce73a049 	.word	0xce73a049
 800138c:	3f77a3f6 	.word	0x3f77a3f6
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f04f 0200 	mov.w	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <_ZN7Encoder5clearEv+0x3c>)
 80013ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013d2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <_ZN7Encoder5clearEv+0x40>)
 80013d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40010000 	.word	0x40010000
 80013f4:	40010400 	.word	0x40010400

080013f8 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	return distance_;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	ee07 3a90 	vmov	s15, r3
}
 8001430:	eeb0 0a67 	vmov.f32	s0, s15
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	ee07 3a90 	vmov	s15, r3
}
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	ee07 3a90 	vmov	s15, r3
}
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b084      	sub	sp, #16
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80014dc:	6839      	ldr	r1, [r7, #0]
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f978 	bl	80017d4 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80014e4:	f000 f98c 	bl	8001800 <fopen_folder_and_file>

	return ret;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <user_fclose+0x1c>)
 8001500:	f010 fa16 	bl	8011930 <f_close>

	return ret;
 8001504:	79fb      	ldrb	r3, [r7, #7]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20034910 	.word	0x20034910

08001514 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b087      	sub	sp, #28
 8001518:	af02      	add	r7, sp, #8
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	4613      	mov	r3, r2
 8001522:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001528:	2300      	movs	r3, #0
 800152a:	81fb      	strh	r3, [r7, #14]
 800152c:	e030      	b.n	8001590 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800152e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff f81c 	bl	8000578 <__aeabi_f2d>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	e9cd 3400 	strd	r3, r4, [sp]
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <sd_write_float+0x94>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	4817      	ldr	r0, [pc, #92]	; (80015ac <sd_write_float+0x98>)
 800154e:	f012 fde3 	bl	8014118 <sniprintf>

		if(state == ADD_WRITE){
 8001552:	797b      	ldrb	r3, [r7, #5]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <sd_write_float+0x9c>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4619      	mov	r1, r3
 800155e:	4814      	ldr	r0, [pc, #80]	; (80015b0 <sd_write_float+0x9c>)
 8001560:	f010 fa5a 	bl	8011a18 <f_lseek>
 8001564:	e003      	b.n	800156e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001566:	2100      	movs	r1, #0
 8001568:	4811      	ldr	r0, [pc, #68]	; (80015b0 <sd_write_float+0x9c>)
 800156a:	f010 fa55 	bl	8011a18 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800156e:	480f      	ldr	r0, [pc, #60]	; (80015ac <sd_write_float+0x98>)
 8001570:	f7fe fe46 	bl	8000200 <strlen>
 8001574:	4602      	mov	r2, r0
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <sd_write_float+0xa0>)
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <sd_write_float+0x98>)
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <sd_write_float+0x9c>)
 800157c:	f00f ffc3 	bl	8011506 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001580:	f000 f958 	bl	8001834 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001588:	b29b      	uxth	r3, r3
 800158a:	3301      	adds	r3, #1
 800158c:	b29b      	uxth	r3, r3
 800158e:	81fb      	strh	r3, [r7, #14]
 8001590:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbc8      	blt.n	800152e <sd_write_float+0x1a>
	}
	return ret;
 800159c:	7b7b      	ldrb	r3, [r7, #13]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08017820 	.word	0x08017820
 80015ac:	20034880 	.word	0x20034880
 80015b0:	20034910 	.word	0x20034910
 80015b4:	20034900 	.word	0x20034900

080015b8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f900 	bl	80017d4 <create_path>

	if(state == OVER_WRITE){
 80015d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80015dc:	4822      	ldr	r0, [pc, #136]	; (8001668 <sd_write_array_float+0xb0>)
 80015de:	f010 f9d1 	bl	8011984 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80015e2:	4822      	ldr	r0, [pc, #136]	; (800166c <sd_write_array_float+0xb4>)
 80015e4:	f010 fc3c 	bl	8011e60 <f_unlink>
		f_chdir("..");
 80015e8:	4821      	ldr	r0, [pc, #132]	; (8001670 <sd_write_array_float+0xb8>)
 80015ea:	f010 f9cb 	bl	8011984 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015ee:	f000 f907 	bl	8001800 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015f2:	2300      	movs	r3, #0
 80015f4:	82fb      	strh	r3, [r7, #22]
 80015f6:	e028      	b.n	800164a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffb7 	bl	8000578 <__aeabi_f2d>
 800160a:	4603      	mov	r3, r0
 800160c:	460c      	mov	r4, r1
 800160e:	e9cd 3400 	strd	r3, r4, [sp]
 8001612:	4a18      	ldr	r2, [pc, #96]	; (8001674 <sd_write_array_float+0xbc>)
 8001614:	2180      	movs	r1, #128	; 0x80
 8001616:	4818      	ldr	r0, [pc, #96]	; (8001678 <sd_write_array_float+0xc0>)
 8001618:	f012 fd7e 	bl	8014118 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <sd_write_array_float+0xc4>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4619      	mov	r1, r3
 8001622:	4816      	ldr	r0, [pc, #88]	; (800167c <sd_write_array_float+0xc4>)
 8001624:	f010 f9f8 	bl	8011a18 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <sd_write_array_float+0xc0>)
 800162a:	f7fe fde9 	bl	8000200 <strlen>
 800162e:	4602      	mov	r2, r0
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <sd_write_array_float+0xc8>)
 8001632:	4911      	ldr	r1, [pc, #68]	; (8001678 <sd_write_array_float+0xc0>)
 8001634:	4811      	ldr	r0, [pc, #68]	; (800167c <sd_write_array_float+0xc4>)
 8001636:	f00f ff66 	bl	8011506 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800163a:	f000 f8fb 	bl	8001834 <bufclear>
	for(short i = 0 ; i < size; i++){
 800163e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001642:	b29b      	uxth	r3, r3
 8001644:	3301      	adds	r3, #1
 8001646:	b29b      	uxth	r3, r3
 8001648:	82fb      	strh	r3, [r7, #22]
 800164a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800164e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbd0      	blt.n	80015f8 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001656:	4809      	ldr	r0, [pc, #36]	; (800167c <sd_write_array_float+0xc4>)
 8001658:	f010 f96a 	bl	8011930 <f_close>

	return ret;
 800165c:	7d7b      	ldrb	r3, [r7, #21]
}
 800165e:	4618      	mov	r0, r3
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}
 8001666:	bf00      	nop
 8001668:	20034780 	.word	0x20034780
 800166c:	20033640 	.word	0x20033640
 8001670:	0801783c 	.word	0x0801783c
 8001674:	08017820 	.word	0x08017820
 8001678:	20034880 	.word	0x20034880
 800167c:	20034910 	.word	0x20034910
 8001680:	20034900 	.word	0x20034900

08001684 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	4613      	mov	r3, r2
 8001692:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f000 f898 	bl	80017d4 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016a4:	f000 f8ac 	bl	8001800 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016a8:	e019      	b.n	80016de <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	461a      	mov	r2, r3
 80016b6:	4913      	ldr	r1, [pc, #76]	; (8001704 <sd_read_array_float+0x80>)
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <sd_read_array_float+0x84>)
 80016ba:	f012 fd81 	bl	80141c0 <siscanf>
		i++;
 80016be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3301      	adds	r3, #1
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	db03      	blt.n	80016de <sd_read_array_float+0x5a>
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <sd_read_array_float+0x88>)
 80016e0:	2180      	movs	r1, #128	; 0x80
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <sd_read_array_float+0x84>)
 80016e4:	f010 fd9a 	bl	801221c <f_gets>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1dd      	bne.n	80016aa <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016ee:	f000 f8a1 	bl	8001834 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016f2:	4806      	ldr	r0, [pc, #24]	; (800170c <sd_read_array_float+0x88>)
 80016f4:	f010 f91c 	bl	8011930 <f_close>

	return ret;
 80016f8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0801782c 	.word	0x0801782c
 8001708:	20034880 	.word	0x20034880
 800170c:	20034910 	.word	0x20034910

08001710 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	4613      	mov	r3, r2
 800171e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001728:	68b9      	ldr	r1, [r7, #8]
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f852 	bl	80017d4 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001730:	f000 f866 	bl	8001800 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001734:	e019      	b.n	800176a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001736:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4413      	add	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4913      	ldr	r1, [pc, #76]	; (8001790 <sd_read_array_double+0x80>)
 8001744:	4813      	ldr	r0, [pc, #76]	; (8001794 <sd_read_array_double+0x84>)
 8001746:	f012 fd3b 	bl	80141c0 <siscanf>
		i++;
 800174a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800174e:	b29b      	uxth	r3, r3
 8001750:	3301      	adds	r3, #1
 8001752:	b29b      	uxth	r3, r3
 8001754:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001756:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	429a      	cmp	r2, r3
 8001760:	db03      	blt.n	800176a <sd_read_array_double+0x5a>
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <sd_read_array_double+0x88>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <sd_read_array_double+0x84>)
 8001770:	f010 fd54 	bl	801221c <f_gets>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1dd      	bne.n	8001736 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800177a:	f000 f85b 	bl	8001834 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <sd_read_array_double+0x88>)
 8001780:	f010 f8d6 	bl	8011930 <f_close>

	return ret;
 8001784:	7d7b      	ldrb	r3, [r7, #21]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08017838 	.word	0x08017838
 8001794:	20034880 	.word	0x20034880
 8001798:	20034910 	.word	0x20034910

0800179c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017a6:	2201      	movs	r2, #1
 80017a8:	4908      	ldr	r1, [pc, #32]	; (80017cc <sd_mount+0x30>)
 80017aa:	4809      	ldr	r0, [pc, #36]	; (80017d0 <sd_mount+0x34>)
 80017ac:	f00f fb38 	bl	8010e20 <f_mount>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <sd_mount+0x20>
 80017b6:	2301      	movs	r3, #1
 80017b8:	71fb      	strb	r3, [r7, #7]
 80017ba:	e001      	b.n	80017c0 <sd_mount+0x24>
	else ret = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017c0:	79fb      	ldrb	r3, [r7, #7]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	08017848 	.word	0x08017848
 80017d0:	20033740 	.word	0x20033740

080017d4 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	4805      	ldr	r0, [pc, #20]	; (80017f8 <create_path+0x24>)
 80017e2:	f012 fd19 	bl	8014218 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	4804      	ldr	r0, [pc, #16]	; (80017fc <create_path+0x28>)
 80017ea:	f012 fd15 	bl	8014218 <strcpy>

}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20034780 	.word	0x20034780
 80017fc:	20033640 	.word	0x20033640

08001800 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <fopen_folder_and_file+0x24>)
 8001806:	f010 fbed 	bl	8011fe4 <f_mkdir>

	f_chdir(dirpath);
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <fopen_folder_and_file+0x24>)
 800180c:	f010 f8ba 	bl	8011984 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001810:	2213      	movs	r2, #19
 8001812:	4905      	ldr	r1, [pc, #20]	; (8001828 <fopen_folder_and_file+0x28>)
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <fopen_folder_and_file+0x2c>)
 8001816:	f00f fb49 	bl	8010eac <f_open>

	f_chdir("..");
 800181a:	4805      	ldr	r0, [pc, #20]	; (8001830 <fopen_folder_and_file+0x30>)
 800181c:	f010 f8b2 	bl	8011984 <f_chdir>


}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20034780 	.word	0x20034780
 8001828:	20033640 	.word	0x20033640
 800182c:	20034910 	.word	0x20034910
 8001830:	0801783c 	.word	0x0801783c

08001834 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e007      	b.n	8001850 <bufclear+0x1c>
		buffer[i] = '\0';
 8001840:	4a08      	ldr	r2, [pc, #32]	; (8001864 <bufclear+0x30>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3301      	adds	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b7f      	cmp	r3, #127	; 0x7f
 8001854:	ddf4      	ble.n	8001840 <bufclear+0xc>
	}
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20034880 	.word	0x20034880

08001868 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001878:	b2db      	uxtb	r3, r3
 800187a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001882:	480e      	ldr	r0, [pc, #56]	; (80018bc <read_byte+0x54>)
 8001884:	f007 fb10 	bl	8008ea8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001888:	f107 010f 	add.w	r1, r7, #15
 800188c:	2364      	movs	r3, #100	; 0x64
 800188e:	2201      	movs	r2, #1
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <read_byte+0x58>)
 8001892:	f00a fcb9 	bl	800c208 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001896:	f107 010e 	add.w	r1, r7, #14
 800189a:	2364      	movs	r3, #100	; 0x64
 800189c:	2201      	movs	r2, #1
 800189e:	4808      	ldr	r0, [pc, #32]	; (80018c0 <read_byte+0x58>)
 80018a0:	f00a fde6 	bl	800c470 <HAL_SPI_Receive>
	CS_SET;
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018aa:	4804      	ldr	r0, [pc, #16]	; (80018bc <read_byte+0x54>)
 80018ac:	f007 fafc 	bl	8008ea8 <HAL_GPIO_WritePin>

	return val;
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020400 	.word	0x40020400
 80018c0:	200359ac 	.word	0x200359ac

080018c4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	460a      	mov	r2, r1
 80018ce:	71fb      	strb	r3, [r7, #7]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018de:	2200      	movs	r2, #0
 80018e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <write_byte+0x54>)
 80018e6:	f007 fadf 	bl	8008ea8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018ea:	f107 010f 	add.w	r1, r7, #15
 80018ee:	2364      	movs	r3, #100	; 0x64
 80018f0:	2201      	movs	r2, #1
 80018f2:	480a      	ldr	r0, [pc, #40]	; (800191c <write_byte+0x58>)
 80018f4:	f00a fc88 	bl	800c208 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018f8:	1db9      	adds	r1, r7, #6
 80018fa:	2364      	movs	r3, #100	; 0x64
 80018fc:	2201      	movs	r2, #1
 80018fe:	4807      	ldr	r0, [pc, #28]	; (800191c <write_byte+0x58>)
 8001900:	f00a fc82 	bl	800c208 <HAL_SPI_Transmit>
	CS_SET;
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190a:	4803      	ldr	r0, [pc, #12]	; (8001918 <write_byte+0x54>)
 800190c:	f007 facc 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001910:	bf00      	nop
 8001912:	3710      	adds	r7, #16
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40020400 	.word	0x40020400
 800191c:	200359ac 	.word	0x200359ac

08001920 <IMU_init>:

uint16_t IMU_init() {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff ff9c 	bl	8001868 <read_byte>
 8001930:	4603      	mov	r3, r0
 8001932:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001934:	797b      	ldrb	r3, [r7, #5]
 8001936:	2be0      	cmp	r3, #224	; 0xe0
 8001938:	d119      	bne.n	800196e <IMU_init+0x4e>
		ret = 1;
 800193a:	2301      	movs	r3, #1
 800193c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800193e:	2101      	movs	r1, #1
 8001940:	2006      	movs	r0, #6
 8001942:	f7ff ffbf 	bl	80018c4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001946:	2110      	movs	r1, #16
 8001948:	2003      	movs	r0, #3
 800194a:	f7ff ffbb 	bl	80018c4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800194e:	2120      	movs	r1, #32
 8001950:	207f      	movs	r0, #127	; 0x7f
 8001952:	f7ff ffb7 	bl	80018c4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001956:	2106      	movs	r1, #6
 8001958:	2001      	movs	r0, #1
 800195a:	f7ff ffb3 	bl	80018c4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800195e:	2106      	movs	r1, #6
 8001960:	2014      	movs	r0, #20
 8001962:	f7ff ffaf 	bl	80018c4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001966:	2100      	movs	r1, #0
 8001968:	207f      	movs	r0, #127	; 0x7f
 800196a:	f7ff ffab 	bl	80018c4 <write_byte>
	}
	return ret;
 800196e:	88fb      	ldrh	r3, [r7, #6]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <read_gyro_data>:

void read_gyro_data() {
 8001978:	b598      	push	{r3, r4, r7, lr}
 800197a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800197c:	2033      	movs	r0, #51	; 0x33
 800197e:	f7ff ff73 	bl	8001868 <read_byte>
 8001982:	4603      	mov	r3, r0
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b21c      	sxth	r4, r3
 8001988:	2034      	movs	r0, #52	; 0x34
 800198a:	f7ff ff6d 	bl	8001868 <read_byte>
 800198e:	4603      	mov	r3, r0
 8001990:	b21b      	sxth	r3, r3
 8001992:	4323      	orrs	r3, r4
 8001994:	b21a      	sxth	r2, r3
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <read_gyro_data+0x64>)
 8001998:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800199a:	2035      	movs	r0, #53	; 0x35
 800199c:	f7ff ff64 	bl	8001868 <read_byte>
 80019a0:	4603      	mov	r3, r0
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	b21c      	sxth	r4, r3
 80019a6:	2036      	movs	r0, #54	; 0x36
 80019a8:	f7ff ff5e 	bl	8001868 <read_byte>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	4323      	orrs	r3, r4
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <read_gyro_data+0x68>)
 80019b6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019b8:	2037      	movs	r0, #55	; 0x37
 80019ba:	f7ff ff55 	bl	8001868 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b21c      	sxth	r4, r3
 80019c4:	2038      	movs	r0, #56	; 0x38
 80019c6:	f7ff ff4f 	bl	8001868 <read_byte>
 80019ca:	4603      	mov	r3, r0
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	4323      	orrs	r3, r4
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <read_gyro_data+0x6c>)
 80019d4:	801a      	strh	r2, [r3, #0]
}
 80019d6:	bf00      	nop
 80019d8:	bd98      	pop	{r3, r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	20035948 	.word	0x20035948
 80019e0:	20035946 	.word	0x20035946
 80019e4:	20035940 	.word	0x20035940

080019e8 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	801a      	strh	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	805a      	strh	r2, [r3, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	809a      	strh	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	80da      	strh	r2, [r3, #6]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	811a      	strh	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	815a      	strh	r2, [r3, #10]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
{

}
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a34:	f7ff ff74 	bl	8001920 <IMU_init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a3c:	f7ff fb30 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a40:	2100      	movs	r1, #0
 8001a42:	2000      	movs	r0, #0
 8001a44:	f7ff fb3c 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a48:	4809      	ldr	r0, [pc, #36]	; (8001a70 <_ZN3IMU4initEv+0x44>)
 8001a4a:	f7ff fb63 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a4e:	2101      	movs	r1, #1
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff fb35 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <_ZN3IMU4initEv+0x48>)
 8001a5c:	f7ff fb5a 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a64:	f005 ff8a 	bl	800797c <HAL_Delay>

}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	0801784c 	.word	0x0801784c
 8001a74:	08017858 	.word	0x08017858

08001a78 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a80:	f7ff ff7a 	bl	8001978 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b21a      	sxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <_ZN3IMU12updateValuesEv+0xa4>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a98:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd53 	bl	8000554 <__aeabi_i2d>
 8001aae:	a316      	add	r3, pc, #88	; (adr r3, 8001b08 <_ZN3IMU12updateValuesEv+0x90>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	f7fe fdb8 	bl	8000628 <__aeabi_dmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	460c      	mov	r4, r1
 8001abc:	4625      	mov	r5, r4
 8001abe:	461c      	mov	r4, r3
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <_ZN3IMU12updateValuesEv+0xac>)
 8001ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fd44 	bl	8000554 <__aeabi_i2d>
 8001acc:	a310      	add	r3, pc, #64	; (adr r3, 8001b10 <_ZN3IMU12updateValuesEv+0x98>)
 8001ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad2:	f7fe fda9 	bl	8000628 <__aeabi_dmul>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fbed 	bl	80002bc <__adddf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4621      	mov	r1, r4
 8001aea:	f7ff f84d 	bl	8000b88 <__aeabi_d2iz>
 8001aee:	4603      	mov	r3, r0
 8001af0:	b21a      	sxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <_ZN3IMU12updateValuesEv+0xac>)
 8001afe:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdb0      	pop	{r4, r5, r7, pc}
 8001b08:	eb851eb8 	.word	0xeb851eb8
 8001b0c:	3f9eb851 	.word	0x3f9eb851
 8001b10:	70a3d70a 	.word	0x70a3d70a
 8001b14:	3fef0a3d 	.word	0x3fef0a3d
 8001b18:	20035948 	.word	0x20035948
 8001b1c:	20035946 	.word	0x20035946
 8001b20:	20035940 	.word	0x20035940
 8001b24:	20000210 	.word	0x20000210

08001b28 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7fe fd13 	bl	8000578 <__aeabi_f2d>
 8001b52:	a316      	add	r3, pc, #88	; (adr r3, 8001bac <_ZN3IMU8getOmegaEv+0x84>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fe90 	bl	800087c <__aeabi_ddiv>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4614      	mov	r4, r2
 8001b62:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b66:	a313      	add	r3, pc, #76	; (adr r3, 8001bb4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fd5a 	bl	8000628 <__aeabi_dmul>
 8001b74:	4603      	mov	r3, r0
 8001b76:	460c      	mov	r4, r1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <_ZN3IMU8getOmegaEv+0x80>)
 8001b82:	f7fe fe7b 	bl	800087c <__aeabi_ddiv>
 8001b86:	4603      	mov	r3, r0
 8001b88:	460c      	mov	r4, r1
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4621      	mov	r1, r4
 8001b8e:	f7ff f843 	bl	8000c18 <__aeabi_d2f>
 8001b92:	4603      	mov	r3, r0
 8001b94:	ee07 3a90 	vmov	s15, r3
}
 8001b98:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	40668000 	.word	0x40668000
 8001bac:	66666666 	.word	0x66666666
 8001bb0:	40306666 	.word	0x40306666
 8001bb4:	54411744 	.word	0x54411744
 8001bb8:	400921fb 	.word	0x400921fb

08001bbc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbe:	b08b      	sub	sp, #44	; 0x2c
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bc4:	466b      	mov	r3, sp
 8001bc6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bcc:	f005 fed6 	bl	800797c <HAL_Delay>
	lcd_clear();
 8001bd0:	f7ff fa66 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f7ff fa72 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001bdc:	4840      	ldr	r0, [pc, #256]	; (8001ce0 <_ZN3IMU11calibrationEv+0x124>)
 8001bde:	f7ff fa99 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001be2:	2101      	movs	r1, #1
 8001be4:	2000      	movs	r0, #0
 8001be6:	f7ff fa6b 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bea:	483e      	ldr	r0, [pc, #248]	; (8001ce4 <_ZN3IMU11calibrationEv+0x128>)
 8001bec:	f7ff fa92 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bf0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bf4:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bf6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bfa:	1e5d      	subs	r5, r3, #1
 8001bfc:	61bd      	str	r5, [r7, #24]
 8001bfe:	462b      	mov	r3, r5
 8001c00:	3301      	adds	r3, #1
 8001c02:	4619      	mov	r1, r3
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	f04f 0400 	mov.w	r4, #0
 8001c10:	0154      	lsls	r4, r2, #5
 8001c12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c16:	014b      	lsls	r3, r1, #5
 8001c18:	462b      	mov	r3, r5
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	f04f 0400 	mov.w	r4, #0
 8001c2a:	0154      	lsls	r4, r2, #5
 8001c2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c30:	014b      	lsls	r3, r1, #5
 8001c32:	462b      	mov	r3, r5
 8001c34:	3301      	adds	r3, #1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	3303      	adds	r3, #3
 8001c3a:	3307      	adds	r3, #7
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	ebad 0d03 	sub.w	sp, sp, r3
 8001c44:	466b      	mov	r3, sp
 8001c46:	3303      	adds	r3, #3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	83fb      	strh	r3, [r7, #30]
 8001c52:	8bfa      	ldrh	r2, [r7, #30]
 8001c54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	da13      	bge.n	8001c84 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c62:	8bfb      	ldrh	r3, [r7, #30]
 8001c64:	ee07 2a90 	vmov	s15, r2
 8001c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4413      	add	r3, r2
 8001c72:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f005 fe80 	bl	800797c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c7c:	8bfb      	ldrh	r3, [r7, #30]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	83fb      	strh	r3, [r7, #30]
 8001c82:	e7e6      	b.n	8001c52 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	462b      	mov	r3, r5
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d00e      	beq.n	8001cba <_ZN3IMU11calibrationEv+0xfe>
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	edd3 7a00 	vldr	s15, [r3]
 8001ca6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	e7ec      	b.n	8001c94 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001cd4:	46b5      	mov	sp, r6
}
 8001cd6:	bf00      	nop
 8001cd8:	372c      	adds	r7, #44	; 0x2c
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	0801785c 	.word	0x0801785c
 8001ce4:	08017868 	.word	0x08017868

08001ce8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	71fb      	strb	r3, [r7, #7]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cf8:	79bb      	ldrb	r3, [r7, #6]
 8001cfa:	b299      	uxth	r1, r3
 8001cfc:	1dfa      	adds	r2, r7, #7
 8001cfe:	2364      	movs	r3, #100	; 0x64
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2301      	movs	r3, #1
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <INA260_read+0x50>)
 8001d06:	f007 fa21 	bl	800914c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	b299      	uxth	r1, r3
 8001d0e:	f107 020c 	add.w	r2, r7, #12
 8001d12:	2364      	movs	r3, #100	; 0x64
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2302      	movs	r3, #2
 8001d18:	4807      	ldr	r0, [pc, #28]	; (8001d38 <INA260_read+0x50>)
 8001d1a:	f007 fb15 	bl	8009348 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d1e:	7b3b      	ldrb	r3, [r7, #12]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	7b7b      	ldrb	r3, [r7, #13]
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b21b      	sxth	r3, r3
 8001d2c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d2e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20035b60 	.word	0x20035b60

08001d3c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	4604      	mov	r4, r0
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4623      	mov	r3, r4
 8001d4c:	71fb      	strb	r3, [r7, #7]
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71bb      	strb	r3, [r7, #6]
 8001d52:	460b      	mov	r3, r1
 8001d54:	717b      	strb	r3, [r7, #5]
 8001d56:	4613      	mov	r3, r2
 8001d58:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	733b      	strb	r3, [r7, #12]
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	737b      	strb	r3, [r7, #13]
 8001d62:	797b      	ldrb	r3, [r7, #5]
 8001d64:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d66:	793b      	ldrb	r3, [r7, #4]
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	f107 020c 	add.w	r2, r7, #12
 8001d6e:	2364      	movs	r3, #100	; 0x64
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2303      	movs	r3, #3
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <INA260_write+0x48>)
 8001d76:	f007 f9e9 	bl	800914c <HAL_I2C_Master_Transmit>
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd90      	pop	{r4, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20035b60 	.word	0x20035b60

08001d88 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	460b      	mov	r3, r1
 8001d94:	71bb      	strb	r3, [r7, #6]
 8001d96:	4613      	mov	r3, r2
 8001d98:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d9a:	797b      	ldrb	r3, [r7, #5]
 8001d9c:	79ba      	ldrb	r2, [r7, #6]
 8001d9e:	79f9      	ldrb	r1, [r7, #7]
 8001da0:	2000      	movs	r0, #0
 8001da2:	f7ff ffcb 	bl	8001d3c <INA260_write>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	21df      	movs	r1, #223	; 0xdf
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff ffe2 	bl	8001d88 <setConfig>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
{

}
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df4:	482a      	ldr	r0, [pc, #168]	; (8001ea0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001df6:	f007 f83f 	bl	8008e78 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf0c      	ite	eq
 8001e00:	2301      	moveq	r3, #1
 8001e02:	2300      	movne	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <_ZN8JoyStick8getValueEv+0x2e>
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e12:	2101      	movs	r1, #1
 8001e14:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e16:	f007 f82f 	bl	8008e78 <HAL_GPIO_ReadPin>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <_ZN8JoyStick8getValueEv+0x4e>
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e36:	481a      	ldr	r0, [pc, #104]	; (8001ea0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e38:	f007 f81e 	bl	8008e78 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf0c      	ite	eq
 8001e42:	2301      	moveq	r3, #1
 8001e44:	2300      	movne	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <_ZN8JoyStick8getValueEv+0x70>
 8001e4c:	89fb      	ldrh	r3, [r7, #14]
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e54:	2104      	movs	r1, #4
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e58:	f007 f80e 	bl	8008e78 <HAL_GPIO_ReadPin>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bf0c      	ite	eq
 8001e62:	2301      	moveq	r3, #1
 8001e64:	2300      	movne	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <_ZN8JoyStick8getValueEv+0x90>
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	f043 0308 	orr.w	r3, r3, #8
 8001e72:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	480a      	ldr	r0, [pc, #40]	; (8001ea0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e78:	f006 fffe 	bl	8008e78 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <_ZN8JoyStick8getValueEv+0xb0>
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f043 0310 	orr.w	r3, r3, #16
 8001e92:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e94:	89fb      	ldrh	r3, [r7, #14]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40020c00 	.word	0x40020c00
 8001ea8:	40020400 	.word	0x40020400

08001eac <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b52      	cmp	r3, #82	; 0x52
 8001ebc:	d112      	bne.n	8001ee4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec4:	4856      	ldr	r0, [pc, #344]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 ffef 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed0:	4853      	ldr	r0, [pc, #332]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001ed2:	f006 ffe9 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001edc:	4850      	ldr	r0, [pc, #320]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001ede:	f006 ffe3 	bl	8008ea8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001ee2:	e098      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	2b47      	cmp	r3, #71	; 0x47
 8001ee8:	d112      	bne.n	8001f10 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef0:	484b      	ldr	r0, [pc, #300]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 ffd9 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001efc:	4848      	ldr	r0, [pc, #288]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001efe:	f006 ffd3 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f02:	2201      	movs	r2, #1
 8001f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f08:	4845      	ldr	r0, [pc, #276]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f0a:	f006 ffcd 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001f0e:	e082      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	2b42      	cmp	r3, #66	; 0x42
 8001f14:	d112      	bne.n	8001f3c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f1c:	4840      	ldr	r0, [pc, #256]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 ffc3 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f28:	483d      	ldr	r0, [pc, #244]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f2a:	f006 ffbd 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f34:	483a      	ldr	r0, [pc, #232]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f36:	f006 ffb7 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001f3a:	e06c      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b43      	cmp	r3, #67	; 0x43
 8001f40:	d112      	bne.n	8001f68 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f48:	4835      	ldr	r0, [pc, #212]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 ffad 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f54:	4832      	ldr	r0, [pc, #200]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f56:	f006 ffa7 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f60:	482f      	ldr	r0, [pc, #188]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f62:	f006 ffa1 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001f66:	e056      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	2b4d      	cmp	r3, #77	; 0x4d
 8001f6c:	d112      	bne.n	8001f94 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f74:	482a      	ldr	r0, [pc, #168]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 ff97 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f80:	4827      	ldr	r0, [pc, #156]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f82:	f006 ff91 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f8c:	4824      	ldr	r0, [pc, #144]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001f8e:	f006 ff8b 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001f92:	e040      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	2b59      	cmp	r3, #89	; 0x59
 8001f98:	d112      	bne.n	8001fc0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa0:	481f      	ldr	r0, [pc, #124]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 ff81 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fac:	481c      	ldr	r0, [pc, #112]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001fae:	f006 ff7b 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb8:	4819      	ldr	r0, [pc, #100]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001fba:	f006 ff75 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001fbe:	e02a      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	2b57      	cmp	r3, #87	; 0x57
 8001fc4:	d112      	bne.n	8001fec <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fcc:	4814      	ldr	r0, [pc, #80]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 ff6b 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd8:	4811      	ldr	r0, [pc, #68]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f006 ff65 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe4:	480e      	ldr	r0, [pc, #56]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001fe6:	f006 ff5f 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8001fea:	e014      	b.n	8002016 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	2b7e      	cmp	r3, #126	; 0x7e
 8001ff0:	d111      	bne.n	8002016 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff8:	4809      	ldr	r0, [pc, #36]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 ff55 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8002006:	f006 ff4f 	bl	8008ea8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800200a:	2201      	movs	r2, #1
 800200c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002010:	4803      	ldr	r0, [pc, #12]	; (8002020 <_ZN3LED9fullColorEc+0x174>)
 8002012:	f006 ff49 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40020000 	.word	0x40020000

08002024 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
 8002030:	4613      	mov	r3, r2
 8002032:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002042:	4813      	ldr	r0, [pc, #76]	; (8002090 <_ZN3LED2LREaa+0x6c>)
 8002044:	f006 ff30 	bl	8008ea8 <HAL_GPIO_WritePin>
 8002048:	e009      	b.n	800205e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800204a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <_ZN3LED2LREaa+0x6c>)
 800205a:	f006 ff25 	bl	8008ea8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800205e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d106      	bne.n	8002074 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002066:	2201      	movs	r2, #1
 8002068:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206c:	4808      	ldr	r0, [pc, #32]	; (8002090 <_ZN3LED2LREaa+0x6c>)
 800206e:	f006 ff1b 	bl	8008ea8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002072:	e009      	b.n	8002088 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002074:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002082:	4803      	ldr	r0, [pc, #12]	; (8002090 <_ZN3LED2LREaa+0x6c>)
 8002084:	f006 ff10 	bl	8008ea8 <HAL_GPIO_WritePin>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40020000 	.word	0x40020000

08002094 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 8002094:	b580      	push	{r7, lr}
 8002096:	b092      	sub	sp, #72	; 0x48
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fe92 	bl	8001dcc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	637b      	str	r3, [r7, #52]	; 0x34
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
 80020b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020b2:	331c      	adds	r3, #28
 80020b4:	633b      	str	r3, [r7, #48]	; 0x30
 80020b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d008      	beq.n	80020d0 <_ZN10LineSensorC1Ev+0x3c>
 80020be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c4:	2200      	movs	r2, #0
 80020c6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	3302      	adds	r3, #2
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
 80020ce:	e7f2      	b.n	80020b6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	643b      	str	r3, [r7, #64]	; 0x40
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	3338      	adds	r3, #56	; 0x38
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d009      	beq.n	80020fe <_ZN10LineSensorC1Ev+0x6a>
 80020ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ec:	623b      	str	r3, [r7, #32]
		s = 0;
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f8:	3304      	adds	r3, #4
 80020fa:	643b      	str	r3, [r7, #64]	; 0x40
 80020fc:	e7f1      	b.n	80020e2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3338      	adds	r3, #56	; 0x38
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	429a      	cmp	r2, r3
 8002116:	d009      	beq.n	800212c <_ZN10LineSensorC1Ev+0x98>
 8002118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211a:	617b      	str	r3, [r7, #20]
		m = 0;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002126:	3304      	adds	r3, #4
 8002128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212a:	e7f1      	b.n	8002110 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	63bb      	str	r3, [r7, #56]	; 0x38
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3338      	adds	r3, #56	; 0x38
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d009      	beq.n	800215a <_ZN10LineSensorC1Ev+0xc6>
 8002146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002148:	60bb      	str	r3, [r7, #8]
		s = 1;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002150:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002154:	3304      	adds	r3, #4
 8002156:	63bb      	str	r3, [r7, #56]	; 0x38
 8002158:	e7f1      	b.n	800213e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4618      	mov	r0, r3
 800215e:	3748      	adds	r7, #72	; 0x48
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	220e      	movs	r2, #14
 8002170:	4619      	mov	r1, r3
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002174:	f005 fc68 	bl	8007a48 <HAL_ADC_Start_DMA>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20035a84 	.word	0x20035a84

08002184 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b0d      	cmp	r3, #13
 8002194:	dc2f      	bgt.n	80021f6 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3392      	adds	r3, #146	; 0x92
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3304      	adds	r3, #4
 80021a2:	ed93 7a00 	vldr	s14, [r3]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	33a0      	adds	r3, #160	; 0xa0
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3304      	adds	r3, #4
 80021c2:	edd3 7a00 	vldr	s15, [r3]
 80021c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	4619      	mov	r1, r3
 80021d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a5b      	subs	r3, r3, r1
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	68f9      	ldr	r1, [r7, #12]
 80021e0:	440b      	add	r3, r1
 80021e2:	3306      	adds	r3, #6
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3301      	adds	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e7cc      	b.n	8002190 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	3301      	adds	r3, #1
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002200:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b09      	cmp	r3, #9
 8002208:	d902      	bls.n	8002210 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]


}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	2000021c 	.word	0x2000021c

08002220 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b08e      	sub	sp, #56	; 0x38
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002228:	2300      	movs	r3, #0
 800222a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800222e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002232:	2b0d      	cmp	r3, #13
 8002234:	f200 80b8 	bhi.w	80023a8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800223e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002242:	2b09      	cmp	r3, #9
 8002244:	d81c      	bhi.n	8002280 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002246:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800224a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800224e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4423      	add	r3, r4
 800225e:	3306      	adds	r3, #6
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4403      	add	r3, r0
 8002264:	3304      	adds	r3, #4
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	008b      	lsls	r3, r1, #2
 800226a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800226e:	440b      	add	r3, r1
 8002270:	3b30      	subs	r3, #48	; 0x30
 8002272:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002274:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002278:	3301      	adds	r3, #1
 800227a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800227e:	e7de      	b.n	800223e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002280:	2300      	movs	r3, #0
 8002282:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002286:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228a:	2b09      	cmp	r3, #9
 800228c:	d84d      	bhi.n	800232a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800228e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002292:	3301      	adds	r3, #1
 8002294:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002298:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229c:	2b09      	cmp	r3, #9
 800229e:	d83e      	bhi.n	800231e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022aa:	4413      	add	r3, r2
 80022ac:	3b30      	subs	r3, #48	; 0x30
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022bc:	4413      	add	r3, r2
 80022be:	3b30      	subs	r3, #48	; 0x30
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022cc:	d521      	bpl.n	8002312 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022d8:	4413      	add	r3, r2
 80022da:	3b30      	subs	r3, #48	; 0x30
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022e0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022e8:	0092      	lsls	r2, r2, #2
 80022ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ee:	440a      	add	r2, r1
 80022f0:	3a30      	subs	r2, #48	; 0x30
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022fa:	440b      	add	r3, r1
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002300:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230a:	4413      	add	r3, r2
 800230c:	3b30      	subs	r3, #48	; 0x30
 800230e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002310:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002312:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002316:	3301      	adds	r3, #1
 8002318:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800231c:	e7bc      	b.n	8002298 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800231e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002322:	3301      	adds	r3, #1
 8002324:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002328:	e7ad      	b.n	8002286 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f923 	bl	8000578 <__aeabi_f2d>
 8002332:	a32a      	add	r3, pc, #168	; (adr r3, 80023dc <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe f976 	bl	8000628 <__aeabi_dmul>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	4625      	mov	r5, r4
 8002342:	461c      	mov	r4, r3
 8002344:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002348:	4a21      	ldr	r2, [pc, #132]	; (80023d0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f911 	bl	8000578 <__aeabi_f2d>
 8002356:	a31c      	add	r3, pc, #112	; (adr r3, 80023c8 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	f7fe f964 	bl	8000628 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4620      	mov	r0, r4
 8002366:	4629      	mov	r1, r5
 8002368:	f7fd ffa8 	bl	80002bc <__adddf3>
 800236c:	4603      	mov	r3, r0
 800236e:	460c      	mov	r4, r1
 8002370:	461a      	mov	r2, r3
 8002372:	4623      	mov	r3, r4
 8002374:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fc4c 	bl	8000c18 <__aeabi_d2f>
 8002380:	4601      	mov	r1, r0
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 800238e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	490e      	ldr	r1, [pc, #56]	; (80023d0 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800239c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023a0:	3301      	adds	r3, #1
 80023a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023a6:	e742      	b.n	800222e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023ae:	4a09      	ldr	r2, [pc, #36]	; (80023d4 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023b0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023b8:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	3738      	adds	r7, #56	; 0x38
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bdb0      	pop	{r4, r5, r7, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	66666666 	.word	0x66666666
 80023cc:	3fee6666 	.word	0x3fee6666
 80023d0:	20000220 	.word	0x20000220
 80023d4:	20000214 	.word	0x20000214
 80023d8:	20000218 	.word	0x20000218
 80023dc:	9999999a 	.word	0x9999999a
 80023e0:	3fa99999 	.word	0x3fa99999

080023e4 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b0a0      	sub	sp, #128	; 0x80
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f005 fac5 	bl	800797c <HAL_Delay>

	lcd_clear();
 80023f2:	f7fe fe55 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023f6:	2100      	movs	r1, #0
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7fe fe61 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023fe:	4886      	ldr	r0, [pc, #536]	; (8002618 <_ZN10LineSensor11calibrationEv+0x234>)
 8002400:	f7fe fe88 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002404:	2101      	movs	r1, #1
 8002406:	2000      	movs	r0, #0
 8002408:	f7fe fe5a 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800240c:	4883      	ldr	r0, [pc, #524]	; (800261c <_ZN10LineSensor11calibrationEv+0x238>)
 800240e:	f7fe fe81 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002412:	2300      	movs	r3, #0
 8002414:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002418:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800241c:	2b0d      	cmp	r3, #13
 800241e:	d823      	bhi.n	8002468 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002420:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002424:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	32b0      	adds	r2, #176	; 0xb0
 800242c:	0092      	lsls	r2, r2, #2
 800242e:	440a      	add	r2, r1
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002438:	440b      	add	r3, r1
 800243a:	3b40      	subs	r3, #64	; 0x40
 800243c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800243e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002442:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	32b0      	adds	r2, #176	; 0xb0
 800244a:	0092      	lsls	r2, r2, #2
 800244c:	440a      	add	r2, r1
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002456:	440b      	add	r3, r1
 8002458:	3b78      	subs	r3, #120	; 0x78
 800245a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800245c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002460:	3301      	adds	r3, #1
 8002462:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002466:	e7d7      	b.n	8002418 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fcb8 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8002474:	4603      	mov	r3, r0
 8002476:	2b02      	cmp	r3, #2
 8002478:	bf14      	ite	ne
 800247a:	2301      	movne	r3, #1
 800247c:	2300      	moveq	r3, #0
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d079      	beq.n	8002578 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002484:	2300      	movs	r3, #0
 8002486:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800248a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800248e:	2b0d      	cmp	r3, #13
 8002490:	d850      	bhi.n	8002534 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002492:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800249c:	4413      	add	r3, r2
 800249e:	3b40      	subs	r3, #64	; 0x40
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	33b0      	adds	r3, #176	; 0xb0
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024bc:	d50f      	bpl.n	80024de <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024be:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80024c2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	32b0      	adds	r2, #176	; 0xb0
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	440a      	add	r2, r1
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024d6:	440b      	add	r3, r1
 80024d8:	3b40      	subs	r3, #64	; 0x40
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e024      	b.n	8002528 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024de:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024e8:	4413      	add	r3, r2
 80024ea:	3b78      	subs	r3, #120	; 0x78
 80024ec:	ed93 7a00 	vldr	s14, [r3]
 80024f0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	33b0      	adds	r3, #176	; 0xb0
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	dd0e      	ble.n	8002528 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800250a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800250e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	32b0      	adds	r2, #176	; 0xb0
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	440a      	add	r2, r1
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002522:	440b      	add	r3, r1
 8002524:	3b78      	subs	r3, #120	; 0x78
 8002526:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002528:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800252c:	3301      	adds	r3, #1
 800252e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002532:	e7aa      	b.n	800248a <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fcb6 	bl	8003eac <_ZN12RotarySwitch8getValueEv>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf0c      	ite	eq
 8002546:	2301      	moveq	r3, #1
 8002548:	2300      	movne	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002556:	2201      	movs	r2, #1
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fd61 	bl	8002024 <_ZN3LED2LREaa>
 8002562:	e781      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800256a:	2200      	movs	r2, #0
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fd57 	bl	8002024 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 8002576:	e777      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	2300      	movs	r3, #0
 800257a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800257e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002582:	2b0d      	cmp	r3, #13
 8002584:	d826      	bhi.n	80025d4 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002586:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002590:	4413      	add	r3, r2
 8002592:	3b40      	subs	r3, #64	; 0x40
 8002594:	ed93 7a00 	vldr	s14, [r3]
 8002598:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025a2:	4413      	add	r3, r2
 80025a4:	3b78      	subs	r3, #120	; 0x78
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025b2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002620 <_ZN10LineSensor11calibrationEv+0x23c>
 80025b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	3392      	adds	r3, #146	; 0x92
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025cc:	3301      	adds	r3, #1
 80025ce:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025d2:	e7d4      	b.n	800257e <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80025da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025de:	2b0d      	cmp	r3, #13
 80025e0:	d815      	bhi.n	800260e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80025e2:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80025e6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80025ea:	0092      	lsls	r2, r2, #2
 80025ec:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80025f0:	440a      	add	r2, r1
 80025f2:	3a78      	subs	r2, #120	; 0x78
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	33a0      	adds	r3, #160	; 0xa0
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	3304      	adds	r3, #4
 8002600:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002602:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002606:	3301      	adds	r3, #1
 8002608:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800260c:	e7e5      	b.n	80025da <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800260e:	bf00      	nop
 8002610:	3780      	adds	r7, #128	; 0x80
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	08017874 	.word	0x08017874
 800261c:	08017880 	.word	0x08017880
 8002620:	447a0000 	.word	0x447a0000

08002624 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3338      	adds	r3, #56	; 0x38
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	429a      	cmp	r2, r3
 8002648:	d012      	beq.n	8002670 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	edd3 7a00 	vldr	s15, [r3]
 8002654:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80026c4 <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800265c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002660:	db02      	blt.n	8002668 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002662:	8bfb      	ldrh	r3, [r7, #30]
 8002664:	3301      	adds	r3, #1
 8002666:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	3304      	adds	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e7e8      	b.n	8002642 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002670:	8bfb      	ldrh	r3, [r7, #30]
 8002672:	2b0d      	cmp	r3, #13
 8002674:	d906      	bls.n	8002684 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 8002676:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	e002      	b.n	800268a <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 8002684:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002686:	2200      	movs	r2, #0
 8002688:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	2b31      	cmp	r3, #49	; 0x31
 8002690:	d903      	bls.n	800269a <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e002      	b.n	80026a0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d903      	bls.n	80026b4 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80026b2:	801a      	strh	r2, [r3, #0]

	return flag;
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026b6:	781b      	ldrb	r3, [r3, #0]

}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3724      	adds	r7, #36	; 0x24
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	442f0000 	.word	0x442f0000
 80026c8:	20000258 	.word	0x20000258
 80026cc:	2000025a 	.word	0x2000025a

080026d0 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026da:	edd7 7a01 	vldr	s15, [r7, #4]
 80026de:	eef0 7ae7 	vabs.f32	s15, s15
 80026e2:	eeb0 0a67 	vmov.f32	s0, s15
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

uint16_t mon_store_cnt;
float mon_pdis;
float mon_ave_l, mon_ave_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 80026f0:	b480      	push	{r7}
 80026f2:	b087      	sub	sp, #28
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false), velocity_play_flag_(false), velocity_table_idx_(0)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	621a      	str	r2, [r3, #32]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	; 0x28
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	675a      	str	r2, [r3, #116]	; 0x74
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800275c:	333c      	adds	r3, #60	; 0x3c
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002768:	333e      	adds	r3, #62	; 0x3e
 800276a:	2200      	movs	r2, #0
 800276c:	801a      	strh	r2, [r3, #0]
{
	motor_ = motor;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002790:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002796:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002798:	2300      	movs	r3, #0
 800279a:	82fb      	strh	r3, [r7, #22]
 800279c:	8afb      	ldrh	r3, [r7, #22]
 800279e:	f241 726f 	movw	r2, #5999	; 0x176f
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d80c      	bhi.n	80027c0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xd0>
		velocity_table_[i] = 0;
 80027a6:	8afb      	ldrh	r3, [r7, #22]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	331e      	adds	r3, #30
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	3301      	adds	r3, #1
 80027bc:	82fb      	strh	r3, [r7, #22]
 80027be:	e7ed      	b.n	800279c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xac>
	}
}
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4618      	mov	r0, r3
 80027c4:	371c      	adds	r7, #28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80027d0:	b5b0      	push	{r4, r5, r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80027e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80027f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800280c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002824:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002838:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002844:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002850:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800285c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002868:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002878:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800287c:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4a1f      	ldr	r2, [pc, #124]	; (8002900 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002884:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fe75 	bl	8000578 <__aeabi_f2d>
 800288e:	a318      	add	r3, pc, #96	; (adr r3, 80028f0 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002894:	f7fd fec8 	bl	8000628 <__aeabi_dmul>
 8002898:	4603      	mov	r3, r0
 800289a:	460c      	mov	r4, r1
 800289c:	4625      	mov	r5, r4
 800289e:	461c      	mov	r4, r3
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fd fe67 	bl	8000578 <__aeabi_f2d>
 80028aa:	a313      	add	r3, pc, #76	; (adr r3, 80028f8 <_ZN9LineTrace9calcErrorEv+0x128>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd feba 	bl	8000628 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd fcfe 	bl	80002bc <__adddf3>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	4618      	mov	r0, r3
 80028c6:	4621      	mov	r1, r4
 80028c8:	f7fe f9a6 	bl	8000c18 <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <_ZN9LineTrace9calcErrorEv+0x138>)
 80028d4:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <_ZN9LineTrace9calcErrorEv+0x134>)
 80028da:	6013      	str	r3, [r2, #0]

	return diff;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	ee07 3a90 	vmov	s15, r3

}
 80028e2:	eeb0 0a67 	vmov.f32	s0, s15
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdb0      	pop	{r4, r5, r7, pc}
 80028ec:	f3af 8000 	nop.w
 80028f0:	47ae147b 	.word	0x47ae147b
 80028f4:	3fb47ae1 	.word	0x3fb47ae1
 80028f8:	d70a3d71 	.word	0xd70a3d71
 80028fc:	3fed70a3 	.word	0x3fed70a3
 8002900:	2000025c 	.word	0x2000025c
 8002904:	20000270 	.word	0x20000270
 8002908:	20000260 	.word	0x20000260
 800290c:	00000000 	.word	0x00000000

08002910 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002910:	b5b0      	push	{r4, r5, r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff59 	bl	80027d0 <_ZN9LineTrace9calcErrorEv>
 800291e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 800292c:	4b3c      	ldr	r3, [pc, #240]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002942:	ed97 7a05 	vldr	s14, [r7, #20]
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	edd7 6a05 	vldr	s13, [r7, #20]
 800295e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002966:	ee17 0a90 	vmov	r0, s15
 800296a:	f7fd fe05 	bl	8000578 <__aeabi_f2d>
 800296e:	a32a      	add	r3, pc, #168	; (adr r3, 8002a18 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd ff82 	bl	800087c <__aeabi_ddiv>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	4618      	mov	r0, r3
 800297e:	4621      	mov	r1, r4
 8002980:	f7fe f94a 	bl	8000c18 <__aeabi_d2f>
 8002984:	4603      	mov	r3, r0
 8002986:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fdf3 	bl	8000578 <__aeabi_f2d>
 8002992:	4604      	mov	r4, r0
 8002994:	460d      	mov	r5, r1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800299c:	edd7 7a05 	vldr	s15, [r7, #20]
 80029a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	f7fd fde6 	bl	8000578 <__aeabi_f2d>
 80029ac:	a31a      	add	r3, pc, #104	; (adr r3, 8002a18 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe39 	bl	8000628 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4620      	mov	r0, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	f7fd fc7d 	bl	80002bc <__adddf3>
 80029c2:	4603      	mov	r3, r0
 80029c4:	460c      	mov	r4, r1
 80029c6:	4618      	mov	r0, r3
 80029c8:	4621      	mov	r1, r4
 80029ca:	f7fe f925 	bl	8000c18 <__aeabi_d2f>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029d2:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 80029d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80029d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80029dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ea:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80029f8:	edd7 0a02 	vldr	s1, [r7, #8]
 80029fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002a00:	4610      	mov	r0, r2
 8002a02:	f001 fe29 	bl	8004658 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a06:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	6013      	str	r3, [r2, #0]

}
 8002a0c:	bf00      	nop
 8002a0e:	3718      	adds	r7, #24
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bdb0      	pop	{r4, r5, r7, pc}
 8002a14:	f3af 8000 	nop.w
 8002a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a1c:	3f50624d 	.word	0x3f50624d
 8002a20:	20000278 	.word	0x20000278
 8002a24:	20000274 	.word	0x20000274

08002a28 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fe fd1f 	bl	8001478 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f886 	bl	8003b50 <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fe1d 	bl	80036a0 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002a90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002aa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aa8:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002ac8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002acc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad4:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	75fb      	strb	r3, [r7, #23]
	mon_ave_l = sensor_edge_val_l;
 8002adc:	4a17      	ldr	r2, [pc, #92]	; (8002b3c <_ZN9LineTrace11isCrossLineEv+0xc4>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002ae2:	4a17      	ldr	r2, [pc, #92]	; (8002b40 <_ZN9LineTrace11isCrossLineEv+0xc8>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6013      	str	r3, [r2, #0]

	if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aec:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002b44 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	d50f      	bpl.n	8002b1a <_ZN9LineTrace11isCrossLineEv+0xa2>
 8002afa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002afe:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002b44 <_ZN9LineTrace11isCrossLineEv+0xcc>
 8002b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0a:	d506      	bpl.n	8002b1a <_ZN9LineTrace11isCrossLineEv+0xa2>
		cnt++;
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e002      	b.n	8002b20 <_ZN9LineTrace11isCrossLineEv+0xa8>
	}
	else{
		cnt = 0;
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <_ZN9LineTrace11isCrossLineEv+0xd0>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <_ZN9LineTrace11isCrossLineEv+0xb4>
		flag = true;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	371c      	adds	r7, #28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000268 	.word	0x20000268
 8002b40:	2000026c 	.word	0x2000026c
 8002b44:	44160000 	.word	0x44160000
 8002b48:	2000027c 	.word	0x2000027c

08002b4c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(radius < 130) velocity = 1.0;
 8002b58:	edd7 7a00 	vldr	s15, [r7]
 8002b5c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002ba4 <_ZN9LineTrace15radius2VelocityEf+0x58>
 8002b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b68:	d503      	bpl.n	8002b72 <_ZN9LineTrace15radius2VelocityEf+0x26>
 8002b6a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e00e      	b.n	8002b90 <_ZN9LineTrace15radius2VelocityEf+0x44>
	else if(radius < 250) velocity = 1.3;
 8002b72:	edd7 7a00 	vldr	s15, [r7]
 8002b76:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002ba8 <_ZN9LineTrace15radius2VelocityEf+0x5c>
 8002b7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b82:	d502      	bpl.n	8002b8a <_ZN9LineTrace15radius2VelocityEf+0x3e>
 8002b84:	4b09      	ldr	r3, [pc, #36]	; (8002bac <_ZN9LineTrace15radius2VelocityEf+0x60>)
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	e002      	b.n	8002b90 <_ZN9LineTrace15radius2VelocityEf+0x44>
	else velocity = 1.5;
 8002b8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002b8e:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	ee07 3a90 	vmov	s15, r3
}
 8002b96:	eeb0 0a67 	vmov.f32	s0, s15
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	43020000 	.word	0x43020000
 8002ba8:	437a0000 	.word	0x437a0000
 8002bac:	3fa66666 	.word	0x3fa66666

08002bb0 <_ZN9LineTrace20createVelocityTabeleEv>:
void LineTrace::createVelocityTabele()
{
 8002bb0:	b590      	push	{r4, r7, lr}
 8002bb2:	b08b      	sub	sp, #44	; 0x2c
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69d8      	ldr	r0, [r3, #28]
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <_ZN9LineTrace20createVelocityTabeleEv+0xdc>)
 8002bbe:	4a34      	ldr	r2, [pc, #208]	; (8002c90 <_ZN9LineTrace20createVelocityTabeleEv+0xe0>)
 8002bc0:	4934      	ldr	r1, [pc, #208]	; (8002c94 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002bc2:	f000 fcc2 	bl	800354a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fc55 	bl	800347a <_ZN6Logger23getDistanceArrayPointerEv>
 8002bd0:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fc5d 	bl	8003496 <_ZN6Logger20getThetaArrayPointerEv>
 8002bdc:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bde:	2300      	movs	r3, #0
 8002be0:	837b      	strh	r3, [r7, #26]
 8002be2:	8b7b      	ldrh	r3, [r7, #26]
 8002be4:	f241 726f 	movw	r2, #5999	; 0x176f
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d83f      	bhi.n	8002c6c <_ZN9LineTrace20createVelocityTabeleEv+0xbc>
		temp_distance = p_distance[i];
 8002bec:	8b7b      	ldrh	r3, [r7, #26]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8002bf8:	8b7b      	ldrh	r3, [r7, #26]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8002c04:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d101      	bne.n	8002c16 <_ZN9LineTrace20createVelocityTabeleEv+0x66>
 8002c12:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <_ZN9LineTrace20createVelocityTabeleEv+0xe8>)
 8002c14:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8002c16:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c22:	eeb0 0a66 	vmov.f32	s0, s13
 8002c26:	f7ff fd53 	bl	80026d0 <_ZSt3absf>
 8002c2a:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8002c2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c32:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002c9c <_ZN9LineTrace20createVelocityTabeleEv+0xec>
 8002c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	db01      	blt.n	8002c44 <_ZN9LineTrace20createVelocityTabeleEv+0x94>
 8002c40:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <_ZN9LineTrace20createVelocityTabeleEv+0xf0>)
 8002c42:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8002c44:	8b7c      	ldrh	r4, [r7, #26]
 8002c46:	ed97 0a05 	vldr	s0, [r7, #20]
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ff7e 	bl	8002b4c <_ZN9LineTrace15radius2VelocityEf>
 8002c50:	eef0 7a40 	vmov.f32	s15, s0
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	f104 031e 	add.w	r3, r4, #30
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3304      	adds	r3, #4
 8002c60:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c64:	8b7b      	ldrh	r3, [r7, #26]
 8002c66:	3301      	adds	r3, #1
 8002c68:	837b      	strh	r3, [r7, #26]
 8002c6a:	e7ba      	b.n	8002be2 <_ZN9LineTrace20createVelocityTabeleEv+0x32>
		//velocity_table_[i] = radius;
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c7c:	4909      	ldr	r1, [pc, #36]	; (8002ca4 <_ZN9LineTrace20createVelocityTabeleEv+0xf4>)
 8002c7e:	4805      	ldr	r0, [pc, #20]	; (8002c94 <_ZN9LineTrace20createVelocityTabeleEv+0xe4>)
 8002c80:	f7fe fc9a 	bl	80015b8 <sd_write_array_float>

}
 8002c84:	bf00      	nop
 8002c86:	3724      	adds	r7, #36	; 0x24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	080178c4 	.word	0x080178c4
 8002c90:	080178d0 	.word	0x080178d0
 8002c94:	080178e0 	.word	0x080178e0
 8002c98:	3727c5ac 	.word	0x3727c5ac
 8002c9c:	459c4000 	.word	0x459c4000
 8002ca0:	459c4000 	.word	0x459c4000
 8002ca4:	080178ec 	.word	0x080178ec

08002ca8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002cb6:	333c      	adds	r3, #60	; 0x3c
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01c      	beq.n	8002cf8 <_ZN9LineTrace20updateTargetVelocityEv+0x50>
		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002cc4:	333e      	adds	r3, #62	; 0x3e
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	331e      	adds	r3, #30
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f899 	bl	8002e12 <_ZN9LineTrace17setTargetVelocityEf>

		velocity_table_idx_++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002ce6:	333e      	adds	r3, #62	; 0x3e
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	3301      	adds	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002cf4:	333e      	adds	r3, #62	; 0x3e
 8002cf6:	801a      	strh	r2, [r3, #0]
	}

}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	4912      	ldr	r1, [pc, #72]	; (8002d58 <_ZN9LineTrace4initEv+0x58>)
 8002d10:	4812      	ldr	r0, [pc, #72]	; (8002d5c <_ZN9LineTrace4initEv+0x5c>)
 8002d12:	f7fe fcb7 	bl	8001684 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4910      	ldr	r1, [pc, #64]	; (8002d60 <_ZN9LineTrace4initEv+0x60>)
 8002d1e:	480f      	ldr	r0, [pc, #60]	; (8002d5c <_ZN9LineTrace4initEv+0x5c>)
 8002d20:	f7fe fcb0 	bl	8001684 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	2201      	movs	r2, #1
 8002d2a:	490e      	ldr	r1, [pc, #56]	; (8002d64 <_ZN9LineTrace4initEv+0x64>)
 8002d2c:	480b      	ldr	r0, [pc, #44]	; (8002d5c <_ZN9LineTrace4initEv+0x5c>)
 8002d2e:	f7fe fca9 	bl	8001684 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002d32:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d36:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d3e:	eeb0 1a66 	vmov.f32	s2, s13
 8002d42:	eef0 0a47 	vmov.f32	s1, s14
 8002d46:	eeb0 0a67 	vmov.f32	s0, s15
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f80c 	bl	8002d68 <_ZN9LineTrace7setGainEfff>

}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	080178fc 	.word	0x080178fc
 8002d5c:	08017904 	.word	0x08017904
 8002d60:	0801790c 	.word	0x0801790c
 8002d64:	08017914 	.word	0x08017914

08002d68 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d74:	edc7 0a01 	vstr	s1, [r7, #4]
 8002d78:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
	return kp_;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	ee07 3a90 	vmov	s15, r3
}
 8002daa:	eeb0 0a67 	vmov.f32	s0, s15
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	return ki_;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	ee07 3a90 	vmov	s15, r3
}
 8002dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
	return kd_;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	ee07 3a90 	vmov	s15, r3
}
 8002de6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d06b      	beq.n	8002f1a <_ZN9LineTrace4flipEv+0xea>
		// ---- line following processing -----//
		pidTrace();
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff fd64 	bl	8002910 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 8002e48:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 f9bb 	bl	80031c8 <_ZN9LineTrace16isTargetDistanceEf>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00f      	beq.n	8002e78 <_ZN9LineTrace4flipEv+0x48>
			// ---- Target Velocity Updata ------//
			updateTargetVelocity();
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff25 	bl	8002ca8 <_ZN9LineTrace20updateTargetVelocityEv>

			// ---- Store Logs ------//
			storeLogs();
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f93c 	bl	80030dc <_ZN9LineTrace9storeLogsEv>

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fe fb05 	bl	8001478 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fe6c 	bl	8003b50 <_ZN8Odometry13clearPotitionEv>
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f7ff fdfd 	bl	8002a78 <_ZN9LineTrace11isCrossLineEv>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d011      	beq.n	8002ea8 <_ZN9LineTrace4flipEv+0x78>
			led_.LR(1, -1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	330c      	adds	r3, #12
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff f8c8 	bl	8002024 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 f973 	bl	8004184 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fb05 	bl	80014b2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 f983 	bl	80041b8 <_ZN10SideSensor13getIgnoreFlagEv>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00f      	beq.n	8002ed8 <_ZN9LineTrace4flipEv+0xa8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fae9 	bl	8001494 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002ec2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ec6:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002f24 <_ZN9LineTrace4flipEv+0xf4>
 8002eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed2:	db01      	blt.n	8002ed8 <_ZN9LineTrace4flipEv+0xa8>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <_ZN9LineTrace4flipEv+0xaa>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00c      	beq.n	8002ef8 <_ZN9LineTrace4flipEv+0xc8>
			side_sensor_->disableIgnore();
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 f95b 	bl	800419e <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	330c      	adds	r3, #12
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff f896 	bl	8002024 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff fb91 	bl	8002624 <_ZN10LineSensor13emergencyStopEv>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <_ZN9LineTrace4flipEv+0xea>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002f28 <_ZN9LineTrace4flipEv+0xf8>
 8002f10:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002f28 <_ZN9LineTrace4flipEv+0xf8>
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 fb9f 	bl	8004658 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	43480000 	.word	0x43480000
 8002f28:	00000000 	.word	0x00000000

08002f2c <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fbde 	bl	800470a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f906 	bl	8004164 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002f58:	bf00      	nop
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fbdb 	bl	8004730 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f04f 31ff 	mov.w	r1, #4294967295
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff f84d 	bl	8002024 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002f90:	3340      	adds	r3, #64	; 0x40
 8002f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d107      	bne.n	8002faa <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69d8      	ldr	r0, [r3, #28]
 8002f9e:	4b13      	ldr	r3, [pc, #76]	; (8002fec <_ZN9LineTrace4stopEv+0x8c>)
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <_ZN9LineTrace4stopEv+0x90>)
 8002fa2:	4914      	ldr	r1, [pc, #80]	; (8002ff4 <_ZN9LineTrace4stopEv+0x94>)
 8002fa4:	f000 faae 	bl	8003504 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8002fa8:	e00e      	b.n	8002fc8 <_ZN9LineTrace4stopEv+0x68>
	}
	else if(mode_selector_ == SECOND_RUNNING){//Secondary run
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002fb0:	3340      	adds	r3, #64	; 0x40
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d106      	bne.n	8002fc8 <_ZN9LineTrace4stopEv+0x68>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69d8      	ldr	r0, [r3, #28]
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <_ZN9LineTrace4stopEv+0x98>)
 8002fc0:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <_ZN9LineTrace4stopEv+0x9c>)
 8002fc2:	490c      	ldr	r1, [pc, #48]	; (8002ff4 <_ZN9LineTrace4stopEv+0x94>)
 8002fc4:	f000 fa9e 	bl	8003504 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	}
	led_.LR(-1, 0);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	330c      	adds	r3, #12
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f04f 31ff 	mov.w	r1, #4294967295
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f826 	bl	8002024 <_ZN3LED2LREaa>

	logger_->resetLogs();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fad2 	bl	8003586 <_ZN6Logger9resetLogsEv>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	080178c4 	.word	0x080178c4
 8002ff0:	080178d0 	.word	0x080178d0
 8002ff4:	080178e0 	.word	0x080178e0
 8002ff8:	0801791c 	.word	0x0801791c
 8002ffc:	08017928 	.word	0x08017928

08003000 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 800300c:	2300      	movs	r3, #0
 800300e:	737b      	strb	r3, [r7, #13]
	start();
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7ff ff8b 	bl	8002f2c <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8003016:	7b7b      	ldrb	r3, [r7, #13]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d156      	bne.n	80030ca <_ZN9LineTrace7runningEv+0xca>
		switch(stage){
 800301c:	89fb      	ldrh	r3, [r7, #14]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d002      	beq.n	8003028 <_ZN9LineTrace7runningEv+0x28>
 8003022:	2b0a      	cmp	r3, #10
 8003024:	d02b      	beq.n	800307e <_ZN9LineTrace7runningEv+0x7e>
 8003026:	e04f      	b.n	80030c8 <_ZN9LineTrace7runningEv+0xc8>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	4618      	mov	r0, r3
 800302e:	f001 f88d 	bl	800414c <_ZN10SideSensor16getWhiteLineCntREv>
 8003032:	4603      	mov	r3, r0
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf0c      	ite	eq
 8003038:	2301      	moveq	r3, #1
 800303a:	2300      	movne	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d03f      	beq.n	80030c2 <_ZN9LineTrace7runningEv+0xc2>
				}
				else if(mode_selector_ == SECOND_RUNNING)){ //Secondary run
					startVelocityPlay();
				}
				*/
				loggerStart();
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff fcf0 	bl	8002a28 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800304e:	3340      	adds	r3, #64	; 0x40
 8003050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f875 	bl	8003148 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fa25 	bl	80014b2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				led_.LR(1, -1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	330c      	adds	r3, #12
 800306c:	f04f 32ff 	mov.w	r2, #4294967295
 8003070:	2101      	movs	r1, #1
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe ffd6 	bl	8002024 <_ZN3LED2LREaa>
				stage = 10;
 8003078:	230a      	movs	r3, #10
 800307a:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800307c:	e021      	b.n	80030c2 <_ZN9LineTrace7runningEv+0xc2>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	4618      	mov	r0, r3
 8003084:	f001 f862 	bl	800414c <_ZN10SideSensor16getWhiteLineCntREv>
 8003088:	4603      	mov	r3, r0
 800308a:	2b02      	cmp	r3, #2
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d016      	beq.n	80030c6 <_ZN9LineTrace7runningEv+0xc6>
				loggerStop();
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff fcdb 	bl	8002a54 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f86a 	bl	8003178 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80030a4:	2064      	movs	r0, #100	; 0x64
 80030a6:	f004 fc69 	bl	800797c <HAL_Delay>

				setTargetVelocity(0);
 80030aa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80030d8 <_ZN9LineTrace7runningEv+0xd8>
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff feaf 	bl	8002e12 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80030b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030b8:	f004 fc60 	bl	800797c <HAL_Delay>

				goal_flag = true;
 80030bc:	2301      	movs	r3, #1
 80030be:	737b      	strb	r3, [r7, #13]

			}

			break;
 80030c0:	e001      	b.n	80030c6 <_ZN9LineTrace7runningEv+0xc6>
			break;
 80030c2:	bf00      	nop
 80030c4:	e7a7      	b.n	8003016 <_ZN9LineTrace7runningEv+0x16>
			break;
 80030c6:	bf00      	nop
	while(goal_flag == false){
 80030c8:	e7a5      	b.n	8003016 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff ff48 	bl	8002f60 <_ZN9LineTrace4stopEv>
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	00000000 	.word	0x00000000

080030dc <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 80030dc:	b590      	push	{r4, r7, lr}
 80030de:	ed2d 8b02 	vpush	{d8}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d021      	beq.n	8003136 <_ZN9LineTrace9storeLogsEv+0x5a>
		logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69dc      	ldr	r4, [r3, #28]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe f99f 	bl	800143e <_ZN7Encoder15getDistance10mmEv>
 8003100:	eeb0 8a40 	vmov.f32	s16, s0
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fd10 	bl	8003b2e <_ZN8Odometry8getThetaEv>
 800310e:	ec53 2b10 	vmov	r2, r3, d0
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f7fd fd7f 	bl	8000c18 <__aeabi_d2f>
 800311a:	4603      	mov	r3, r0
 800311c:	ee00 3a90 	vmov	s1, r3
 8003120:	eeb0 0a48 	vmov.f32	s0, s16
 8003124:	4620      	mov	r0, r4
 8003126:	f000 f960 	bl	80033ea <_ZN6Logger21storeDistanceAndThetaEff>

		mon_store_cnt++;
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <_ZN9LineTrace9storeLogsEv+0x68>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	3301      	adds	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b04      	ldr	r3, [pc, #16]	; (8003144 <_ZN9LineTrace9storeLogsEv+0x68>)
 8003134:	801a      	strh	r2, [r3, #0]
	}
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	ecbd 8b02 	vpop	{d8}
 8003140:	bd90      	pop	{r4, r7, pc}
 8003142:	bf00      	nop
 8003144:	20000264 	.word	0x20000264

08003148 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe f98f 	bl	8001478 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fcf6 	bl	8003b50 <_ZN8Odometry13clearPotitionEv>
	velocity_play_flag_ = true;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 800316a:	333c      	adds	r3, #60	; 0x3c
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003186:	333c      	adds	r3, #60	; 0x3c
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003192:	333e      	adds	r3, #62	; 0x3e
 8003194:	2200      	movs	r2, #0
 8003196:	801a      	strh	r2, [r3, #0]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031b6:	3340      	adds	r3, #64	; 0x40
 80031b8:	887a      	ldrh	r2, [r7, #2]
 80031ba:	801a      	strh	r2, [r3, #0]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe f92e 	bl	800143e <_ZN7Encoder15getDistance10mmEv>
 80031e2:	eeb0 7a40 	vmov.f32	s14, s0
 80031e6:	edd7 7a00 	vldr	s15, [r7]
 80031ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f2:	bf94      	ite	ls
 80031f4:	2301      	movls	r3, #1
 80031f6:	2300      	movhi	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003202:	7bfb      	ldrb	r3, [r7, #15]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800321a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003228:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800322c:	2200      	movs	r2, #0
 800322e:	801a      	strh	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003236:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800323a:	2200      	movs	r2, #0
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003244:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003248:	2200      	movs	r2, #0
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003268:	f7fe fa98 	bl	800179c <sd_mount>
 800326c:	4603      	mov	r3, r0
 800326e:	2b01      	cmp	r3, #1
 8003270:	bf0c      	ite	eq
 8003272:	2301      	moveq	r3, #1
 8003274:	2300      	movne	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800327c:	f7fd ff10 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003280:	2100      	movs	r1, #0
 8003282:	2000      	movs	r0, #0
 8003284:	f7fd ff1c 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003288:	4815      	ldr	r0, [pc, #84]	; (80032e0 <_ZN6Logger10sdCardInitEv+0x84>)
 800328a:	f7fd ff43 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800328e:	2101      	movs	r1, #1
 8003290:	2000      	movs	r0, #0
 8003292:	f7fd ff15 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003296:	4813      	ldr	r0, [pc, #76]	; (80032e4 <_ZN6Logger10sdCardInitEv+0x88>)
 8003298:	f7fd ff3c 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800329c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80032a0:	f004 fb6c 	bl	800797c <HAL_Delay>

	  ret = true;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e015      	b.n	80032d6 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80032aa:	f7fd fef9 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80032ae:	2100      	movs	r1, #0
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fd ff05 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80032b6:	480a      	ldr	r0, [pc, #40]	; (80032e0 <_ZN6Logger10sdCardInitEv+0x84>)
 80032b8:	f7fd ff2c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80032bc:	2101      	movs	r1, #1
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fd fefe 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80032c4:	4808      	ldr	r0, [pc, #32]	; (80032e8 <_ZN6Logger10sdCardInitEv+0x8c>)
 80032c6:	f7fd ff25 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80032ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80032ce:	f004 fb55 	bl	800797c <HAL_Delay>

	  ret = false;
 80032d2:	2300      	movs	r3, #0
 80032d4:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	08017938 	.word	0x08017938
 80032e4:	08017944 	.word	0x08017944
 80032e8:	0801794c 	.word	0x0801794c

080032ec <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d029      	beq.n	800335c <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800330e:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003324:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	3301      	adds	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003334:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003338:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003340:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	f241 3287 	movw	r2, #4999	; 0x1387
 800334a:	4293      	cmp	r3, r2
 800334c:	d906      	bls.n	800335c <_ZN6Logger8storeLogEf+0x70>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003354:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003358:	2200      	movs	r2, #0
 800335a:	801a      	strh	r2, [r3, #0]
	}
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800337a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02c      	beq.n	80033de <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800338a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003396:	3308      	adds	r3, #8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033a6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	3301      	adds	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033b6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033ba:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033c2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f241 3287 	movw	r2, #4999	; 0x1387
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d906      	bls.n	80033de <_ZN6Logger9storeLog2Ef+0x76>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033d6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80033da:	2200      	movs	r2, #0
 80033dc:	801a      	strh	r2, [r3, #0]
	}
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80033f6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003400:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800340c:	3310      	adds	r3, #16
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800341c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003436:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003446:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800344a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003452:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003456:	881b      	ldrh	r3, [r3, #0]
 8003458:	f241 726f 	movw	r2, #5999	; 0x176f
 800345c:	4293      	cmp	r3, r2
 800345e:	d906      	bls.n	800346e <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003466:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800346a:	2200      	movs	r2, #0
 800346c:	801a      	strh	r2, [r3, #0]
	//}
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <_ZN6Logger23getDistanceArrayPointerEv>:

const float *Logger::getDistanceArrayPointer()
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003488:	3340      	adds	r3, #64	; 0x40
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	2300      	movs	r3, #0
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	68b8      	ldr	r0, [r7, #8]
 80034cc:	f7fe f874 	bl	80015b8 <sd_write_array_float>
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80034ea:	3320      	adds	r3, #32
 80034ec:	2200      	movs	r2, #0
 80034ee:	9200      	str	r2, [sp, #0]
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	68b8      	ldr	r0, [r7, #8]
 80034f8:	f7fe f85e 	bl	80015b8 <sd_write_array_float>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	607a      	str	r2, [r7, #4]
 8003510:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003518:	3340      	adds	r3, #64	; 0x40
 800351a:	2200      	movs	r2, #0
 800351c:	9200      	str	r2, [sp, #0]
 800351e:	f241 7270 	movw	r2, #6000	; 0x1770
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	68b8      	ldr	r0, [r7, #8]
 8003526:	f7fe f847 	bl	80015b8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	f241 7270 	movw	r2, #6000	; 0x1770
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	68b8      	ldr	r0, [r7, #8]
 800353e:	f7fe f83b 	bl	80015b8 <sd_write_array_float>
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800355e:	3340      	adds	r3, #64	; 0x40
 8003560:	f241 7270 	movw	r2, #6000	; 0x1770
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f7fe f88c 	bl	8001684 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8003572:	f241 7270 	movw	r2, #6000	; 0x1770
 8003576:	6839      	ldr	r1, [r7, #0]
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f7fe f883 	bl	8001684 <sd_read_array_float>
}
 800357e:	bf00      	nop
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 8003586:	b480      	push	{r7}
 8003588:	b093      	sub	sp, #76	; 0x4c
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
 8003592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003594:	647b      	str	r3, [r7, #68]	; 0x44
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800359c:	3320      	adds	r3, #32
 800359e:	633b      	str	r3, [r7, #48]	; 0x30
 80035a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d009      	beq.n	80035bc <_ZN6Logger9resetLogsEv+0x36>
 80035a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035aa:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 80035ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	3304      	adds	r3, #4
 80035b8:	647b      	str	r3, [r7, #68]	; 0x44
 80035ba:	e7f1      	b.n	80035a0 <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80035c2:	3320      	adds	r3, #32
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80035d0:	3320      	adds	r3, #32
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
 80035d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	429a      	cmp	r2, r3
 80035da:	d009      	beq.n	80035f0 <_ZN6Logger9resetLogsEv+0x6a>
 80035dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035de:	623b      	str	r3, [r7, #32]
		log = 0;
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 80035e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ea:	3304      	adds	r3, #4
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
 80035ee:	e7f1      	b.n	80035d4 <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80035f6:	3340      	adds	r3, #64	; 0x40
 80035f8:	61fb      	str	r3, [r7, #28]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003604:	3340      	adds	r3, #64	; 0x40
 8003606:	61bb      	str	r3, [r7, #24]
 8003608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	429a      	cmp	r2, r3
 800360e:	d009      	beq.n	8003624 <_ZN6Logger9resetLogsEv+0x9e>
 8003610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003612:	617b      	str	r3, [r7, #20]
		log = 0;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 800361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361e:	3304      	adds	r3, #4
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003622:	e7f1      	b.n	8003608 <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003636:	3340      	adds	r3, #64	; 0x40
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	429a      	cmp	r2, r3
 8003640:	d009      	beq.n	8003656 <_ZN6Logger9resetLogsEv+0xd0>
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	60bb      	str	r3, [r7, #8]
		log = 0;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	3304      	adds	r3, #4
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
 8003654:	e7f1      	b.n	800363a <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800365c:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003660:	2200      	movs	r2, #0
 8003662:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800366a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800366e:	2200      	movs	r2, #0
 8003670:	801a      	strh	r2, [r3, #0]
}
 8003672:	bf00      	nop
 8003674:	374c      	adds	r7, #76	; 0x4c
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_ZN6Logger5startEv>:

void Logger::start()
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800368c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003690:	2201      	movs	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80036ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	805a      	strh	r2, [r3, #2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <_ZN5Motor4initEv>:

void Motor::init()
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80036ec:	2108      	movs	r1, #8
 80036ee:	4805      	ldr	r0, [pc, #20]	; (8003704 <_ZN5Motor4initEv+0x20>)
 80036f0:	f009 faf4 	bl	800ccdc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80036f4:	210c      	movs	r1, #12
 80036f6:	4803      	ldr	r0, [pc, #12]	; (8003704 <_ZN5Motor4initEv+0x20>)
 80036f8:	f009 faf0 	bl	800ccdc <HAL_TIM_PWM_Start>

}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20035a44 	.word	0x20035a44

08003708 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003716:	2b00      	cmp	r3, #0
 8003718:	da0d      	bge.n	8003736 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800371a:	2200      	movs	r2, #0
 800371c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003720:	481f      	ldr	r0, [pc, #124]	; (80037a0 <_ZN5Motor9motorCtrlEv+0x98>)
 8003722:	f005 fbc1 	bl	8008ea8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800372c:	b29b      	uxth	r3, r3
 800372e:	425b      	negs	r3, r3
 8003730:	b29b      	uxth	r3, r3
 8003732:	81fb      	strh	r3, [r7, #14]
 8003734:	e00a      	b.n	800374c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8003736:	2201      	movs	r2, #1
 8003738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800373c:	4818      	ldr	r0, [pc, #96]	; (80037a0 <_ZN5Motor9motorCtrlEv+0x98>)
 800373e:	f005 fbb3 	bl	8008ea8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003748:	b29b      	uxth	r3, r3
 800374a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da0d      	bge.n	8003772 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8003756:	2201      	movs	r2, #1
 8003758:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800375c:	4810      	ldr	r0, [pc, #64]	; (80037a0 <_ZN5Motor9motorCtrlEv+0x98>)
 800375e:	f005 fba3 	bl	8008ea8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003768:	b29b      	uxth	r3, r3
 800376a:	425b      	negs	r3, r3
 800376c:	b29b      	uxth	r3, r3
 800376e:	81bb      	strh	r3, [r7, #12]
 8003770:	e00a      	b.n	8003788 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8003772:	2200      	movs	r2, #0
 8003774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003778:	4809      	ldr	r0, [pc, #36]	; (80037a0 <_ZN5Motor9motorCtrlEv+0x98>)
 800377a:	f005 fb95 	bl	8008ea8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003784:	b29b      	uxth	r3, r3
 8003786:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8003788:	89fa      	ldrh	r2, [r7, #14]
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <_ZN5Motor9motorCtrlEv+0x9c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8003790:	89ba      	ldrh	r2, [r7, #12]
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003798:	bf00      	nop
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40020c00 	.word	0x40020c00
 80037a4:	20035a44 	.word	0x20035a44

080037a8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80037a8:	b590      	push	{r4, r7, lr}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6178      	str	r0, [r7, #20]
 80037b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80037b4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	4b30      	ldr	r3, [pc, #192]	; (8003880 <_ZN5Motor8setRatioEdd+0xd8>)
 80037be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037c2:	f7fd f9c1 	bl	8000b48 <__aeabi_dcmpgt>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <_ZN5Motor8setRatioEdd+0x30>
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	4c2b      	ldr	r4, [pc, #172]	; (8003880 <_ZN5Motor8setRatioEdd+0xd8>)
 80037d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80037d6:	e00e      	b.n	80037f6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	4b29      	ldr	r3, [pc, #164]	; (8003884 <_ZN5Motor8setRatioEdd+0xdc>)
 80037de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037e2:	f7fd f993 	bl	8000b0c <__aeabi_dcmplt>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <_ZN5Motor8setRatioEdd+0x4e>
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	4c24      	ldr	r4, [pc, #144]	; (8003884 <_ZN5Motor8setRatioEdd+0xdc>)
 80037f2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	4b21      	ldr	r3, [pc, #132]	; (8003880 <_ZN5Motor8setRatioEdd+0xd8>)
 80037fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003800:	f7fd f9a2 	bl	8000b48 <__aeabi_dcmpgt>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <_ZN5Motor8setRatioEdd+0x6e>
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	4c1c      	ldr	r4, [pc, #112]	; (8003880 <_ZN5Motor8setRatioEdd+0xd8>)
 8003810:	e9c7 3400 	strd	r3, r4, [r7]
 8003814:	e00e      	b.n	8003834 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <_ZN5Motor8setRatioEdd+0xdc>)
 800381c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003820:	f7fd f974 	bl	8000b0c <__aeabi_dcmplt>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <_ZN5Motor8setRatioEdd+0x8c>
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	4c15      	ldr	r4, [pc, #84]	; (8003884 <_ZN5Motor8setRatioEdd+0xdc>)
 8003830:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	4b13      	ldr	r3, [pc, #76]	; (8003888 <_ZN5Motor8setRatioEdd+0xe0>)
 800383a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800383e:	f7fc fef3 	bl	8000628 <__aeabi_dmul>
 8003842:	4603      	mov	r3, r0
 8003844:	460c      	mov	r4, r1
 8003846:	4618      	mov	r0, r3
 8003848:	4621      	mov	r1, r4
 800384a:	f7fd f99d 	bl	8000b88 <__aeabi_d2iz>
 800384e:	4603      	mov	r3, r0
 8003850:	b21a      	sxth	r2, r3
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <_ZN5Motor8setRatioEdd+0xe0>)
 800385c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003860:	f7fc fee2 	bl	8000628 <__aeabi_dmul>
 8003864:	4603      	mov	r3, r0
 8003866:	460c      	mov	r4, r1
 8003868:	4618      	mov	r0, r3
 800386a:	4621      	mov	r1, r4
 800386c:	f7fd f98c 	bl	8000b88 <__aeabi_d2iz>
 8003870:	4603      	mov	r3, r0
 8003872:	b21a      	sxth	r2, r3
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	805a      	strh	r2, [r3, #2]

}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	3ff00000 	.word	0x3ff00000
 8003884:	bff00000 	.word	0xbff00000
 8003888:	409c2000 	.word	0x409c2000

0800388c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 800388c:	b490      	push	{r4, r7}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	f04f 0400 	mov.w	r4, #0
 80038a4:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	f04f 0300 	mov.w	r3, #0
 80038bc:	f04f 0400 	mov.w	r4, #0
 80038c0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	f04f 0400 	mov.w	r4, #0
 80038ce:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	609a      	str	r2, [r3, #8]
}
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc90      	pop	{r4, r7}
 80038fc:	4770      	bx	lr
	...

08003900 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b086      	sub	sp, #24
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fe f90a 	bl	8001b28 <_ZN3IMU8getOmegaEv>
 8003914:	ee10 3a10 	vmov	r3, s0
 8003918:	4618      	mov	r0, r3
 800391a:	f7fc fe2d 	bl	8000578 <__aeabi_f2d>
 800391e:	4603      	mov	r3, r0
 8003920:	460c      	mov	r4, r1
 8003922:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fd fd78 	bl	8001420 <_ZN7Encoder11getDistanceEv>
 8003930:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8003934:	a376      	add	r3, pc, #472	; (adr r3, 8003b10 <_ZN8Odometry12calcPotitionEv+0x210>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800393e:	f7fc fe73 	bl	8000628 <__aeabi_dmul>
 8003942:	4603      	mov	r3, r0
 8003944:	460c      	mov	r4, r1
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7fc fe10 	bl	8000578 <__aeabi_f2d>
 8003958:	4682      	mov	sl, r0
 800395a:	468b      	mov	fp, r1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003970:	f7fc ff84 	bl	800087c <__aeabi_ddiv>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4640      	mov	r0, r8
 800397a:	4649      	mov	r1, r9
 800397c:	f7fc fc9e 	bl	80002bc <__adddf3>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	ec43 2b17 	vmov	d7, r2, r3
 8003988:	eeb0 0a47 	vmov.f32	s0, s14
 800398c:	eef0 0a67 	vmov.f32	s1, s15
 8003990:	f00e fcea 	bl	8012368 <cos>
 8003994:	ec53 2b10 	vmov	r2, r3, d0
 8003998:	4650      	mov	r0, sl
 800399a:	4659      	mov	r1, fp
 800399c:	f7fc fe44 	bl	8000628 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4620      	mov	r0, r4
 80039a6:	4629      	mov	r1, r5
 80039a8:	f7fc fc88 	bl	80002bc <__adddf3>
 80039ac:	4603      	mov	r3, r0
 80039ae:	460c      	mov	r4, r1
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7fc fddb 	bl	8000578 <__aeabi_f2d>
 80039c2:	4682      	mov	sl, r0
 80039c4:	468b      	mov	fp, r1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80039da:	f7fc ff4f 	bl	800087c <__aeabi_ddiv>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4640      	mov	r0, r8
 80039e4:	4649      	mov	r1, r9
 80039e6:	f7fc fc69 	bl	80002bc <__adddf3>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	ec43 2b17 	vmov	d7, r2, r3
 80039f2:	eeb0 0a47 	vmov.f32	s0, s14
 80039f6:	eef0 0a67 	vmov.f32	s1, s15
 80039fa:	f00e fcf9 	bl	80123f0 <sin>
 80039fe:	ec53 2b10 	vmov	r2, r3, d0
 8003a02:	4650      	mov	r0, sl
 8003a04:	4659      	mov	r1, fp
 8003a06:	f7fc fe0f 	bl	8000628 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7fc fc53 	bl	80002bc <__adddf3>
 8003a16:	4603      	mov	r3, r0
 8003a18:	460c      	mov	r4, r1
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	f7fc fc44 	bl	80002bc <__adddf3>
 8003a34:	4603      	mov	r3, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	ed93 7b08 	vldr	d7, [r3, #32]
 8003a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a4e:	eef0 0a67 	vmov.f32	s1, s15
 8003a52:	f00e fc89 	bl	8012368 <cos>
 8003a56:	ec51 0b10 	vmov	r0, r1, d0
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003a60:	f7fc fde2 	bl	8000628 <__aeabi_dmul>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4620      	mov	r0, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f7fc fc26 	bl	80002bc <__adddf3>
 8003a70:	4603      	mov	r3, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	ed93 7b08 	vldr	d7, [r3, #32]
 8003a86:	eeb0 0a47 	vmov.f32	s0, s14
 8003a8a:	eef0 0a67 	vmov.f32	s1, s15
 8003a8e:	f00e fcaf 	bl	80123f0 <sin>
 8003a92:	ec51 0b10 	vmov	r0, r1, d0
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <_ZN8Odometry12calcPotitionEv+0x200>)
 8003a9c:	f7fc fdc4 	bl	8000628 <__aeabi_dmul>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	f7fc fc08 	bl	80002bc <__adddf3>
 8003aac:	4603      	mov	r3, r0
 8003aae:	460c      	mov	r4, r1
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003abc:	4618      	mov	r0, r3
 8003abe:	4621      	mov	r1, r4
 8003ac0:	f7fd f8aa 	bl	8000c18 <__aeabi_d2f>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <_ZN8Odometry12calcPotitionEv+0x204>)
 8003ac8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	f7fd f8a0 	bl	8000c18 <__aeabi_d2f>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <_ZN8Odometry12calcPotitionEv+0x208>)
 8003adc:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	f7fd f896 	bl	8000c18 <__aeabi_d2f>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afc:	f3af 8000 	nop.w
 8003b00:	405b8000 	.word	0x405b8000
 8003b04:	20000280 	.word	0x20000280
 8003b08:	20000284 	.word	0x20000284
 8003b0c:	20000288 	.word	0x20000288
 8003b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8003b14:	3f50624d 	.word	0x3f50624d

08003b18 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff feed 	bl	8003900 <_ZN8Odometry12calcPotitionEv>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8003b2e:	b490      	push	{r4, r7}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
	return theta_;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003b3c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003b40:	eeb0 0a47 	vmov.f32	s0, s14
 8003b44:	eef0 0a67 	vmov.f32	s1, s15
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc90      	pop	{r4, r7}
 8003b4e:	4770      	bx	lr

08003b50 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8003b50:	b490      	push	{r4, r7}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	f04f 0400 	mov.w	r4, #0
 8003b62:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc90      	pop	{r4, r7}
 8003b8a:	4770      	bx	lr

08003b8c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003b8c:	b490      	push	{r4, r7}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	f04f 0400 	mov.w	r4, #0
 8003ba4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003bca:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003bce:	2200      	movs	r2, #0
 8003bd0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8003bd2:	4a29      	ldr	r2, [pc, #164]	; (8003c78 <_ZN13PathFollowingC1Ev+0xec>)
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f04f 0400 	mov.w	r4, #0
 8003bdc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <_ZN13PathFollowingC1Ev+0xec>)
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f04f 0400 	mov.w	r4, #0
 8003bea:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003bee:	4a22      	ldr	r2, [pc, #136]	; (8003c78 <_ZN13PathFollowingC1Ev+0xec>)
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003bfc:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <_ZN13PathFollowingC1Ev+0xf0>)
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	f04f 0400 	mov.w	r4, #0
 8003c06:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003c0a:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	f04f 0400 	mov.w	r4, #0
 8003c14:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003c18:	4a18      	ldr	r2, [pc, #96]	; (8003c7c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f04f 0400 	mov.w	r4, #0
 8003c22:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003c26:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	f04f 0400 	mov.w	r4, #0
 8003c30:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003c34:	4a11      	ldr	r2, [pc, #68]	; (8003c7c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	f04f 0400 	mov.w	r4, #0
 8003c3e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003c42:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <_ZN13PathFollowingC1Ev+0xf0>)
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <_ZN13PathFollowingC1Ev+0xf4>)
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	f04f 0400 	mov.w	r4, #0
 8003c5a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003c5e:	4a08      	ldr	r2, [pc, #32]	; (8003c80 <_ZN13PathFollowingC1Ev+0xf4>)
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f04f 0400 	mov.w	r4, #0
 8003c68:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc90      	pop	{r4, r7}
 8003c76:	4770      	bx	lr
 8003c78:	20035f48 	.word	0x20035f48
 8003c7c:	20035ed8 	.word	0x20035ed8
 8003c80:	20035f38 	.word	0x20035f38

08003c84 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003c8c:	f001 fce6 	bl	800565c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8003c90:	f107 0318 	add.w	r3, r7, #24
 8003c94:	2201      	movs	r2, #1
 8003c96:	4915      	ldr	r1, [pc, #84]	; (8003cec <_ZN13PathFollowing4initEv+0x68>)
 8003c98:	4815      	ldr	r0, [pc, #84]	; (8003cf0 <_ZN13PathFollowing4initEv+0x6c>)
 8003c9a:	f7fd fd39 	bl	8001710 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4913      	ldr	r1, [pc, #76]	; (8003cf4 <_ZN13PathFollowing4initEv+0x70>)
 8003ca6:	4812      	ldr	r0, [pc, #72]	; (8003cf0 <_ZN13PathFollowing4initEv+0x6c>)
 8003ca8:	f7fd fd32 	bl	8001710 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003cac:	f107 0308 	add.w	r3, r7, #8
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4911      	ldr	r1, [pc, #68]	; (8003cf8 <_ZN13PathFollowing4initEv+0x74>)
 8003cb4:	480e      	ldr	r0, [pc, #56]	; (8003cf0 <_ZN13PathFollowing4initEv+0x6c>)
 8003cb6:	f7fd fd2b 	bl	8001710 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003cba:	ed97 7b06 	vldr	d7, [r7, #24]
 8003cbe:	ed97 6b04 	vldr	d6, [r7, #16]
 8003cc2:	ed97 5b02 	vldr	d5, [r7, #8]
 8003cc6:	eeb0 2a45 	vmov.f32	s4, s10
 8003cca:	eef0 2a65 	vmov.f32	s5, s11
 8003cce:	eeb0 1a46 	vmov.f32	s2, s12
 8003cd2:	eef0 1a66 	vmov.f32	s3, s13
 8003cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8003cda:	eef0 0a67 	vmov.f32	s1, s15
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f80c 	bl	8003cfc <_ZN13PathFollowing7setGainEddd>
}
 8003ce4:	bf00      	nop
 8003ce6:	3720      	adds	r7, #32
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	08017954 	.word	0x08017954
 8003cf0:	0801795c 	.word	0x0801795c
 8003cf4:	08017964 	.word	0x08017964
 8003cf8:	0801796c 	.word	0x0801796c

08003cfc <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003cfc:	b490      	push	{r4, r7}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	61f8      	str	r0, [r7, #28]
 8003d04:	ed87 0b04 	vstr	d0, [r7, #16]
 8003d08:	ed87 1b02 	vstr	d1, [r7, #8]
 8003d0c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8003d10:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003d12:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d16:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003d1c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003d20:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003d26:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003d2a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003d2e:	bf00      	nop
 8003d30:	3720      	adds	r7, #32
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc90      	pop	{r4, r7}
 8003d36:	4770      	bx	lr
 8003d38:	20035f48 	.word	0x20035f48

08003d3c <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003d3c:	b490      	push	{r4, r7}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <_ZN13PathFollowing8getKxValEv+0x24>)
 8003d46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d4a:	ec44 3b17 	vmov	d7, r3, r4
}
 8003d4e:	eeb0 0a47 	vmov.f32	s0, s14
 8003d52:	eef0 0a67 	vmov.f32	s1, s15
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc90      	pop	{r4, r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20035f48 	.word	0x20035f48

08003d64 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003d64:	b490      	push	{r4, r7}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003d6c:	4b06      	ldr	r3, [pc, #24]	; (8003d88 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003d6e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003d72:	ec44 3b17 	vmov	d7, r3, r4
}
 8003d76:	eeb0 0a47 	vmov.f32	s0, s14
 8003d7a:	eef0 0a67 	vmov.f32	s1, s15
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc90      	pop	{r4, r7}
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20035f48 	.word	0x20035f48

08003d8c <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003d8c:	b490      	push	{r4, r7}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <_ZN13PathFollowing8getKtValEv+0x24>)
 8003d96:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003d9a:	ec44 3b17 	vmov	d7, r3, r4
}
 8003d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8003da2:	eef0 0a67 	vmov.f32	s1, s15
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bc90      	pop	{r4, r7}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20035f48 	.word	0x20035f48

08003db4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003dbc:	2088      	movs	r0, #136	; 0x88
 8003dbe:	f7fd fff6 	bl	8001dae <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003dc2:	2080      	movs	r0, #128	; 0x80
 8003dc4:	f7fd fff3 	bl	8001dae <INA260_init>
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003dd0:	b590      	push	{r4, r7, lr}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003dd8:	2188      	movs	r1, #136	; 0x88
 8003dda:	2002      	movs	r0, #2
 8003ddc:	f7fd ff84 	bl	8001ce8 <INA260_read>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fbb6 	bl	8000554 <__aeabi_i2d>
 8003de8:	a30c      	add	r3, pc, #48	; (adr r3, 8003e1c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	f7fc fc1b 	bl	8000628 <__aeabi_dmul>
 8003df2:	4603      	mov	r3, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	4618      	mov	r0, r3
 8003df8:	4621      	mov	r1, r4
 8003dfa:	f7fc ff0d 	bl	8000c18 <__aeabi_d2f>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	4a03      	ldr	r2, [pc, #12]	; (8003e18 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003e0a:	6013      	str	r3, [r2, #0]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd90      	pop	{r4, r7, pc}
 8003e14:	f3af 8000 	nop.w
 8003e18:	2000028c 	.word	0x2000028c
 8003e1c:	47ae147b 	.word	0x47ae147b
 8003e20:	3f547ae1 	.word	0x3f547ae1

08003e24 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	ee07 3a90 	vmov	s15, r3

}
 8003e34:	eeb0 0a67 	vmov.f32	s0, s15
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	0000      	movs	r0, r0
 8003e44:	0000      	movs	r0, r0
	...

08003e48 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fc fb8d 	bl	8000578 <__aeabi_f2d>
 8003e5e:	a311      	add	r3, pc, #68	; (adr r3, 8003ea4 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	f7fc fe52 	bl	8000b0c <__aeabi_dcmplt>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e002      	b.n	8003e82 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003e7c:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d004      	beq.n	8003e94 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003e8e:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000290 	.word	0x20000290
 8003ea4:	9999999a 	.word	0x9999999a
 8003ea8:	401d9999 	.word	0x401d9999

08003eac <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003eb8:	2102      	movs	r1, #2
 8003eba:	4822      	ldr	r0, [pc, #136]	; (8003f44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003ebc:	f004 ffdc 	bl	8008e78 <HAL_GPIO_ReadPin>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf0c      	ite	eq
 8003ec6:	2301      	moveq	r3, #1
 8003ec8:	2300      	movne	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d003      	beq.n	8003ed8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003ed0:	89fb      	ldrh	r3, [r7, #14]
 8003ed2:	f043 0301 	orr.w	r3, r3, #1
 8003ed6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003ed8:	2108      	movs	r1, #8
 8003eda:	481a      	ldr	r0, [pc, #104]	; (8003f44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003edc:	f004 ffcc 	bl	8008e78 <HAL_GPIO_ReadPin>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	bf0c      	ite	eq
 8003ee6:	2301      	moveq	r3, #1
 8003ee8:	2300      	movne	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003ef0:	89fb      	ldrh	r3, [r7, #14]
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003ef8:	2110      	movs	r1, #16
 8003efa:	4812      	ldr	r0, [pc, #72]	; (8003f44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003efc:	f004 ffbc 	bl	8008e78 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	bf0c      	ite	eq
 8003f06:	2301      	moveq	r3, #1
 8003f08:	2300      	movne	r3, #0
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003f10:	89fb      	ldrh	r3, [r7, #14]
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	480a      	ldr	r0, [pc, #40]	; (8003f44 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003f1c:	f004 ffac 	bl	8008e78 <HAL_GPIO_ReadPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003f30:	89fb      	ldrh	r3, [r7, #14]
 8003f32:	f043 0308 	orr.w	r3, r3, #8
 8003f36:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003f38:	89fb      	ldrh	r3, [r7, #14]

}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40020c00 	.word	0x40020c00

08003f48 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	805a      	strh	r2, [r3, #2]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	809a      	strh	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	719a      	strb	r2, [r3, #6]
{

}
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	799b      	ldrb	r3, [r3, #6]
 8003f84:	f083 0301 	eor.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 80c7 	beq.w	800411e <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8003f90:	4b65      	ldr	r3, [pc, #404]	; (8004128 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	f083 0301 	eor.w	r3, r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d027      	beq.n	8003fee <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8003f9e:	2104      	movs	r1, #4
 8003fa0:	4862      	ldr	r0, [pc, #392]	; (800412c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8003fa2:	f004 ff69 	bl	8008e78 <HAL_GPIO_ReadPin>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	bf0c      	ite	eq
 8003fac:	2301      	moveq	r3, #1
 8003fae:	2300      	movne	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d006      	beq.n	8003fc4 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8003fb6:	4b5e      	ldr	r3, [pc, #376]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8003fc0:	801a      	strh	r2, [r3, #0]
 8003fc2:	e002      	b.n	8003fca <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8003fc4:	4b5a      	ldr	r3, [pc, #360]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d93f      	bls.n	8004052 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8003fe0:	4b51      	ldr	r3, [pc, #324]	; (8004128 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	801a      	strh	r2, [r3, #0]
 8003fec:	e031      	b.n	8004052 <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8003fee:	4b4e      	ldr	r3, [pc, #312]	; (8004128 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02d      	beq.n	8004052 <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	484c      	ldr	r0, [pc, #304]	; (800412c <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8003ffa:	f004 ff3d 	bl	8008e78 <HAL_GPIO_ReadPin>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d006      	beq.n	800401c <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	3301      	adds	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	4b46      	ldr	r3, [pc, #280]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	e002      	b.n	8004022 <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 800401c:	4b44      	ldr	r3, [pc, #272]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800401e:	2200      	movs	r2, #0
 8004020:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004022:	4b43      	ldr	r3, [pc, #268]	; (8004130 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d913      	bls.n	8004052 <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f083 0301 	eor.w	r3, r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004038:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	889b      	ldrh	r3, [r3, #4]
 8004042:	3301      	adds	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	889a      	ldrh	r2, [r3, #4]
 800404e:	4b39      	ldr	r3, [pc, #228]	; (8004134 <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004050:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004052:	4b39      	ldr	r3, [pc, #228]	; (8004138 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	f083 0301 	eor.w	r3, r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d027      	beq.n	80040b0 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004064:	4835      	ldr	r0, [pc, #212]	; (800413c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004066:	f004 ff07 	bl	8008e78 <HAL_GPIO_ReadPin>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d006      	beq.n	8004088 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	3301      	adds	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	4b2f      	ldr	r3, [pc, #188]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e002      	b.n	800408e <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004088:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800408a:	2200      	movs	r2, #0
 800408c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d90c      	bls.n	80040b0 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	b29a      	uxth	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 80040a4:	4b24      	ldr	r3, [pc, #144]	; (8004138 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80040aa:	4b25      	ldr	r3, [pc, #148]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80040b0:	4b21      	ldr	r3, [pc, #132]	; (8004138 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d02e      	beq.n	8004116 <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80040b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040bc:	481f      	ldr	r0, [pc, #124]	; (800413c <_ZN10SideSensor12updateStatusEv+0x1c4>)
 80040be:	f004 fedb 	bl	8008e78 <HAL_GPIO_ReadPin>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	3301      	adds	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	4b19      	ldr	r3, [pc, #100]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80040dc:	801a      	strh	r2, [r3, #0]
 80040de:	e002      	b.n	80040e6 <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80040e6:	4b16      	ldr	r3, [pc, #88]	; (8004140 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d913      	bls.n	8004116 <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	f083 0302 	eor.w	r3, r3, #2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	885b      	ldrh	r3, [r3, #2]
 8004106:	3301      	adds	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	885a      	ldrh	r2, [r3, #2]
 8004112:	4b0c      	ldr	r3, [pc, #48]	; (8004144 <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8004114:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 800411c:	801a      	strh	r2, [r3, #0]
	}

}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000298 	.word	0x20000298
 800412c:	40021000 	.word	0x40021000
 8004130:	2000029c 	.word	0x2000029c
 8004134:	20000296 	.word	0x20000296
 8004138:	20000299 	.word	0x20000299
 800413c:	40020c00 	.word	0x40020c00
 8004140:	2000029a 	.word	0x2000029a
 8004144:	20000294 	.word	0x20000294
 8004148:	20000292 	.word	0x20000292

0800414c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	889b      	ldrh	r3, [r3, #4]
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	809a      	strh	r2, [r3, #4]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	719a      	strb	r2, [r3, #6]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	719a      	strb	r2, [r3, #6]
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	799b      	ldrb	r3, [r3, #6]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a10      	ldr	r2, [pc, #64]	; (8004220 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80041e0:	3308      	adds	r3, #8
 80041e2:	4611      	mov	r1, r2
 80041e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f00f f93d 	bl	8013468 <memcpy>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	08017990 	.word	0x08017990

08004224 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004236:	2b00      	cmp	r3, #0
 8004238:	d010      	beq.n	800425c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	ed97 0a00 	vldr	s0, [r7]
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff f852 	bl	80032ec <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004252:	eeb0 0a67 	vmov.f32	s0, s15
 8004256:	4610      	mov	r0, r2
 8004258:	f7ff f886 	bl	8003368 <_ZN6Logger9storeLog2Ef>
	}

}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a07      	ldr	r2, [pc, #28]	; (8004290 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8004272:	4908      	ldr	r1, [pc, #32]	; (8004294 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff f91b 	bl	80034b0 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a06      	ldr	r2, [pc, #24]	; (8004298 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f928 	bl	80034d8 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	08017b84 	.word	0x08017b84
 8004294:	08017b90 	.word	0x08017b90
 8004298:	08017b9c 	.word	0x08017b9c

0800429c <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d046      	beq.n	800433c <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3204      	adds	r2, #4
 80042c0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80042c4:	ee07 3a90 	vmov	s15, r3
 80042c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042dc:	3301      	adds	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80042ee:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80042f6:	2bf9      	cmp	r3, #249	; 0xf9
 80042f8:	d903      	bls.n	8004302 <_ZN20SystemIdentification10updateMsigEv+0x66>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	22fa      	movs	r2, #250	; 0xfa
 80042fe:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685c      	ldr	r4, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800430c:	4618      	mov	r0, r3
 800430e:	f7fc f933 	bl	8000578 <__aeabi_f2d>
 8004312:	4605      	mov	r5, r0
 8004314:	460e      	mov	r6, r1
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800431c:	eef1 7a67 	vneg.f32	s15, s15
 8004320:	ee17 3a90 	vmov	r3, s15
 8004324:	4618      	mov	r0, r3
 8004326:	f7fc f927 	bl	8000578 <__aeabi_f2d>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	ec43 2b11 	vmov	d1, r2, r3
 8004332:	ec46 5b10 	vmov	d0, r5, r6
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff fa36 	bl	80037a8 <_ZN5Motor8setRatioEdd>

	}

}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004344:	200002a0 	.word	0x200002a0

08004348 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff f982 	bl	800367e <_ZN6Logger5startEv>
	processing_flag_ = true;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	0000      	movs	r0, r0
 800438c:	0000      	movs	r0, r0
	...

08004390 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f97f 	bl	80036a0 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80043d0 <_ZN20SystemIdentification4stopEv+0x40>
 80043ba:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80043d0 <_ZN20SystemIdentification4stopEv+0x40>
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff f9f2 	bl	80037a8 <_ZN5Motor8setRatioEdd>
}
 80043c4:	bf00      	nop
 80043c6:	3708      	adds	r7, #8
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	f3af 8000 	nop.w
	...

080043d8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f04f 0200 	mov.w	r2, #0
 800440c:	611a      	str	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	615a      	str	r2, [r3, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	619a      	str	r2, [r3, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	61da      	str	r2, [r3, #28]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	621a      	str	r2, [r3, #32]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4618      	mov	r0, r3
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	f107 020c 	add.w	r2, r7, #12
 8004480:	f107 0110 	add.w	r1, r7, #16
 8004484:	4618      	mov	r0, r3
 8004486:	f7fc ffb7 	bl	80013f8 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800448a:	ed97 7a04 	vldr	s14, [r7, #16]
 800448e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004496:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800449a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800449e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7fc f868 	bl	8000578 <__aeabi_f2d>
 80044a8:	a30b      	add	r3, pc, #44	; (adr r3, 80044d8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc f8bb 	bl	8000628 <__aeabi_dmul>
 80044b2:	4603      	mov	r3, r0
 80044b4:	460c      	mov	r4, r1
 80044b6:	4618      	mov	r0, r3
 80044b8:	4621      	mov	r1, r4
 80044ba:	f7fc fbad 	bl	8000c18 <__aeabi_d2f>
 80044be:	4602      	mov	r2, r0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	ee07 3a90 	vmov	s15, r3
}
 80044cc:	eeb0 0a67 	vmov.f32	s0, s15
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd90      	pop	{r4, r7, pc}
 80044d6:	bf00      	nop
 80044d8:	1ab1d998 	.word	0x1ab1d998
 80044dc:	3f7830b5 	.word	0x3f7830b5

080044e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80044e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	ed93 7a00 	vldr	s14, [r3]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80044f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8004506:	4b48      	ldr	r3, [pc, #288]	; (8004628 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	edd3 7a04 	vldr	s15, [r3, #16]
 800451c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004524:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8004528:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4618      	mov	r0, r3
 800452e:	f7fc f823 	bl	8000578 <__aeabi_f2d>
 8004532:	4604      	mov	r4, r0
 8004534:	460d      	mov	r5, r1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	ed93 7a06 	vldr	s14, [r3, #24]
 800453c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	ee17 0a90 	vmov	r0, s15
 8004548:	f7fc f816 	bl	8000578 <__aeabi_f2d>
 800454c:	a334      	add	r3, pc, #208	; (adr r3, 8004620 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fc f869 	bl	8000628 <__aeabi_dmul>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	f7fb fead 	bl	80002bc <__adddf3>
 8004562:	4603      	mov	r3, r0
 8004564:	460c      	mov	r4, r1
 8004566:	4618      	mov	r0, r3
 8004568:	4621      	mov	r1, r4
 800456a:	f7fc fb55 	bl	8000c18 <__aeabi_d2f>
 800456e:	4602      	mov	r2, r0
 8004570:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004572:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	ed93 7a05 	vldr	s14, [r3, #20]
 800457a:	4b2c      	ldr	r3, [pc, #176]	; (800462c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	edd7 6a05 	vldr	s13, [r7, #20]
 8004584:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458c:	ee17 0a90 	vmov	r0, s15
 8004590:	f7fb fff2 	bl	8000578 <__aeabi_f2d>
 8004594:	a322      	add	r3, pc, #136	; (adr r3, 8004620 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f7fc f96f 	bl	800087c <__aeabi_ddiv>
 800459e:	4603      	mov	r3, r0
 80045a0:	460c      	mov	r4, r1
 80045a2:	4618      	mov	r0, r3
 80045a4:	4621      	mov	r1, r4
 80045a6:	f7fc fb37 	bl	8000c18 <__aeabi_d2f>
 80045aa:	4603      	mov	r3, r0
 80045ac:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80045ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80045b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80045b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ba:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80045bc:	edd3 7a00 	vldr	s15, [r3]
 80045c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80045d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80045d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045da:	ee17 0a90 	vmov	r0, s15
 80045de:	f7fb ffcb 	bl	8000578 <__aeabi_f2d>
 80045e2:	4605      	mov	r5, r0
 80045e4:	460e      	mov	r6, r1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80045ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80045f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045f4:	ee17 0a90 	vmov	r0, s15
 80045f8:	f7fb ffbe 	bl	8000578 <__aeabi_f2d>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	ec43 2b11 	vmov	d1, r2, r3
 8004604:	ec46 5b10 	vmov	d0, r5, r6
 8004608:	4620      	mov	r0, r4
 800460a:	f7ff f8cd 	bl	80037a8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800460e:	4a07      	ldr	r2, [pc, #28]	; (800462c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	6013      	str	r3, [r2, #0]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800461c:	f3af 8000 	nop.w
 8004620:	d2f1a9fc 	.word	0xd2f1a9fc
 8004624:	3f50624d 	.word	0x3f50624d
 8004628:	200002a8 	.word	0x200002a8
 800462c:	200002a4 	.word	0x200002a4

08004630 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	ed87 0a02 	vstr	s0, [r7, #8]
 800463c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	605a      	str	r2, [r3, #4]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004658:	b480      	push	{r7}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	ed87 0a02 	vstr	s0, [r7, #8]
 8004664:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	ed87 0a02 	vstr	s0, [r7, #8]
 800468c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004690:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	615a      	str	r2, [r3, #20]
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	ed87 0a02 	vstr	s0, [r7, #8]
 80046be:	edc7 0a01 	vstr	s1, [r7, #4]
 80046c2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	621a      	str	r2, [r3, #32]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f7ff febf 	bl	8004470 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff feef 	bl	80044e0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004760 <_ZN12VelocityCtrl4stopEv+0x30>
 8004748:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004760 <_ZN12VelocityCtrl4stopEv+0x30>
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff f82b 	bl	80037a8 <_ZN5Motor8setRatioEdd>

}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w
	...

08004768 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d10e      	bne.n	8004798 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 800477a:	f001 fe6b 	bl	8006454 <cppFlip100ns>

		tim7_timer++;
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3301      	adds	r3, #1
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004786:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004788:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d902      	bls.n	8004798 <HAL_TIM_PeriodElapsedCallback+0x30>
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a17      	ldr	r2, [pc, #92]	; (80047fc <HAL_TIM_PeriodElapsedCallback+0x94>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d10e      	bne.n	80047c0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80047a2:	f001 fe0d 	bl	80063c0 <cppFlip1ms>

		tim6_timer++;
 80047a6:	4b16      	ldr	r3, [pc, #88]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80047ae:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80047b0:	4b13      	ldr	r3, [pc, #76]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a10      	ldr	r2, [pc, #64]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d902      	bls.n	80047c0 <HAL_TIM_PeriodElapsedCallback+0x58>
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10e      	bne.n	80047e8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80047ca:	f001 fe4d 	bl	8006468 <cppFlip10ms>

		tim13_timer++;
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3301      	adds	r3, #1
 80047d4:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047d6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a06      	ldr	r2, [pc, #24]	; (80047f8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d902      	bls.n	80047e8 <HAL_TIM_PeriodElapsedCallback+0x80>
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
	}

}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40001400 	.word	0x40001400
 80047f4:	20035bf8 	.word	0x20035bf8
 80047f8:	0001869f 	.word	0x0001869f
 80047fc:	40001000 	.word	0x40001000
 8004800:	20035bb4 	.word	0x20035bb4
 8004804:	40001c00 	.word	0x40001c00
 8004808:	20035bfc 	.word	0x20035bfc

0800480c <init>:

void init()
{
 800480c:	b580      	push	{r7, lr}
 800480e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004810:	2201      	movs	r2, #1
 8004812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004816:	4808      	ldr	r0, [pc, #32]	; (8004838 <init+0x2c>)
 8004818:	f004 fb46 	bl	8008ea8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800481c:	4807      	ldr	r0, [pc, #28]	; (800483c <init+0x30>)
 800481e:	f008 fa0e 	bl	800cc3e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004822:	4807      	ldr	r0, [pc, #28]	; (8004840 <init+0x34>)
 8004824:	f008 fa0b 	bl	800cc3e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004828:	4806      	ldr	r0, [pc, #24]	; (8004844 <init+0x38>)
 800482a:	f008 fa08 	bl	800cc3e <HAL_TIM_Base_Start_IT>

	cppInit();
 800482e:	f001 fd1d 	bl	800626c <cppInit>

	//path_following_initialize();

}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40021000 	.word	0x40021000
 800483c:	20035ce0 	.word	0x20035ce0
 8004840:	20035e84 	.word	0x20035e84
 8004844:	20035c00 	.word	0x20035c00

08004848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800484c:	f003 f824 	bl	8007898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004850:	f000 f82a 	bl	80048a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004854:	f000 fdbc 	bl	80053d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004858:	f000 fd8a 	bl	8005370 <MX_DMA_Init>
  MX_I2C2_Init();
 800485c:	f000 f9e8 	bl	8004c30 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8004860:	f000 fa14 	bl	8004c8c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8004864:	f000 fa32 	bl	8004ccc <MX_SPI2_Init>
  MX_TIM1_Init();
 8004868:	f000 fa66 	bl	8004d38 <MX_TIM1_Init>
  MX_TIM4_Init();
 800486c:	f000 fb70 	bl	8004f50 <MX_TIM4_Init>
  MX_TIM8_Init();
 8004870:	f000 fc3c 	bl	80050ec <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8004874:	f000 fd52 	bl	800531c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004878:	f00a f9b4 	bl	800ebe4 <MX_FATFS_Init>
  MX_TIM6_Init();
 800487c:	f000 fbcc 	bl	8005018 <MX_TIM6_Init>
  MX_I2C1_Init();
 8004880:	f000 f9a8 	bl	8004bd4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8004884:	f000 fb00 	bl	8004e88 <MX_TIM3_Init>
  MX_TIM10_Init();
 8004888:	f000 fc88 	bl	800519c <MX_TIM10_Init>
  MX_TIM11_Init();
 800488c:	f000 fcd4 	bl	8005238 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004890:	f000 f898 	bl	80049c4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8004894:	f000 fbf6 	bl	8005084 <MX_TIM7_Init>
  MX_TIM13_Init();
 8004898:	f000 fd1c 	bl	80052d4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800489c:	f7ff ffb6 	bl	800480c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80048a0:	f001 fe02 	bl	80064a8 <cppLoop>
 80048a4:	e7fc      	b.n	80048a0 <main+0x58>
	...

080048a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b0a4      	sub	sp, #144	; 0x90
 80048ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048b2:	2234      	movs	r2, #52	; 0x34
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f00e fde1 	bl	801347e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048cc:	f107 030c 	add.w	r3, r7, #12
 80048d0:	223c      	movs	r2, #60	; 0x3c
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f00e fdd2 	bl	801347e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80048da:	2300      	movs	r3, #0
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	4b37      	ldr	r3, [pc, #220]	; (80049bc <SystemClock_Config+0x114>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	4a36      	ldr	r2, [pc, #216]	; (80049bc <SystemClock_Config+0x114>)
 80048e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ea:	4b34      	ldr	r3, [pc, #208]	; (80049bc <SystemClock_Config+0x114>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f2:	60bb      	str	r3, [r7, #8]
 80048f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	4b31      	ldr	r3, [pc, #196]	; (80049c0 <SystemClock_Config+0x118>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a30      	ldr	r2, [pc, #192]	; (80049c0 <SystemClock_Config+0x118>)
 8004900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b2e      	ldr	r3, [pc, #184]	; (80049c0 <SystemClock_Config+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004912:	2301      	movs	r3, #1
 8004914:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800491a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800491c:	2302      	movs	r3, #2
 800491e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004920:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004924:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004926:	2308      	movs	r3, #8
 8004928:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800492a:	23b4      	movs	r3, #180	; 0xb4
 800492c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004930:	2302      	movs	r3, #2
 8004932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004936:	2308      	movs	r3, #8
 8004938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800493c:	2302      	movs	r3, #2
 800493e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004942:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004946:	4618      	mov	r0, r3
 8004948:	f005 fed0 	bl	800a6ec <HAL_RCC_OscConfig>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004952:	f000 fe7f 	bl	8005654 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004956:	f005 fa4b 	bl	8009df0 <HAL_PWREx_EnableOverDrive>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004960:	f000 fe78 	bl	8005654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004964:	230f      	movs	r3, #15
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004968:	2302      	movs	r3, #2
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800496c:	2300      	movs	r3, #0
 800496e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004974:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800497c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004980:	2105      	movs	r1, #5
 8004982:	4618      	mov	r0, r3
 8004984:	f005 fa84 	bl	8009e90 <HAL_RCC_ClockConfig>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800498e:	f000 fe61 	bl	8005654 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004992:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004996:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004998:	2300      	movs	r3, #0
 800499a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800499c:	2300      	movs	r3, #0
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4618      	mov	r0, r3
 80049a6:	f005 fc63 	bl	800a270 <HAL_RCCEx_PeriphCLKConfig>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80049b0:	f000 fe50 	bl	8005654 <Error_Handler>
  }
}
 80049b4:	bf00      	nop
 80049b6:	3790      	adds	r7, #144	; 0x90
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40007000 	.word	0x40007000

080049c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80049ca:	463b      	mov	r3, r7
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80049d6:	4b7c      	ldr	r3, [pc, #496]	; (8004bc8 <MX_ADC2_Init+0x204>)
 80049d8:	4a7c      	ldr	r2, [pc, #496]	; (8004bcc <MX_ADC2_Init+0x208>)
 80049da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80049dc:	4b7a      	ldr	r3, [pc, #488]	; (8004bc8 <MX_ADC2_Init+0x204>)
 80049de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80049e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80049e4:	4b78      	ldr	r3, [pc, #480]	; (8004bc8 <MX_ADC2_Init+0x204>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80049ea:	4b77      	ldr	r3, [pc, #476]	; (8004bc8 <MX_ADC2_Init+0x204>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80049f0:	4b75      	ldr	r3, [pc, #468]	; (8004bc8 <MX_ADC2_Init+0x204>)
 80049f2:	2201      	movs	r2, #1
 80049f4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80049f6:	4b74      	ldr	r3, [pc, #464]	; (8004bc8 <MX_ADC2_Init+0x204>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80049fe:	4b72      	ldr	r3, [pc, #456]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a04:	4b70      	ldr	r3, [pc, #448]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a06:	4a72      	ldr	r2, [pc, #456]	; (8004bd0 <MX_ADC2_Init+0x20c>)
 8004a08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004a0a:	4b6f      	ldr	r3, [pc, #444]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004a10:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a12:	220e      	movs	r2, #14
 8004a14:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004a16:	4b6c      	ldr	r3, [pc, #432]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a1e:	4b6a      	ldr	r3, [pc, #424]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004a24:	4868      	ldr	r0, [pc, #416]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a26:	f002 ffcb 	bl	80079c0 <HAL_ADC_Init>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8004a30:	f000 fe10 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004a34:	230a      	movs	r3, #10
 8004a36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8004a3c:	2306      	movs	r3, #6
 8004a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a40:	463b      	mov	r3, r7
 8004a42:	4619      	mov	r1, r3
 8004a44:	4860      	ldr	r0, [pc, #384]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a46:	f003 f90f 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8004a50:	f000 fe00 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004a54:	230b      	movs	r3, #11
 8004a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004a58:	2302      	movs	r3, #2
 8004a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a5c:	463b      	mov	r3, r7
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4859      	ldr	r0, [pc, #356]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a62:	f003 f901 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8004a6c:	f000 fdf2 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004a70:	230c      	movs	r3, #12
 8004a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004a74:	2303      	movs	r3, #3
 8004a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4852      	ldr	r0, [pc, #328]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a7e:	f003 f8f3 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8004a88:	f000 fde4 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004a8c:	230d      	movs	r3, #13
 8004a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004a90:	2304      	movs	r3, #4
 8004a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004a94:	463b      	mov	r3, r7
 8004a96:	4619      	mov	r1, r3
 8004a98:	484b      	ldr	r0, [pc, #300]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004a9a:	f003 f8e5 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004aa4:	f000 fdd6 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8004aac:	2305      	movs	r3, #5
 8004aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ab0:	463b      	mov	r3, r7
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4844      	ldr	r0, [pc, #272]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004ab6:	f003 f8d7 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004ac0:	f000 fdc8 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004ac8:	2306      	movs	r3, #6
 8004aca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004acc:	463b      	mov	r3, r7
 8004ace:	4619      	mov	r1, r3
 8004ad0:	483d      	ldr	r0, [pc, #244]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004ad2:	f003 f8c9 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8004adc:	f000 fdba 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004ae4:	2307      	movs	r3, #7
 8004ae6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ae8:	463b      	mov	r3, r7
 8004aea:	4619      	mov	r1, r3
 8004aec:	4836      	ldr	r0, [pc, #216]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004aee:	f003 f8bb 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004af8:	f000 fdac 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004afc:	2303      	movs	r3, #3
 8004afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004b00:	2308      	movs	r3, #8
 8004b02:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b04:	463b      	mov	r3, r7
 8004b06:	4619      	mov	r1, r3
 8004b08:	482f      	ldr	r0, [pc, #188]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004b0a:	f003 f8ad 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004b14:	f000 fd9e 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004b18:	2304      	movs	r3, #4
 8004b1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8004b1c:	2309      	movs	r3, #9
 8004b1e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b20:	463b      	mov	r3, r7
 8004b22:	4619      	mov	r1, r3
 8004b24:	4828      	ldr	r0, [pc, #160]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004b26:	f003 f89f 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8004b30:	f000 fd90 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004b34:	2305      	movs	r3, #5
 8004b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8004b38:	230a      	movs	r3, #10
 8004b3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4821      	ldr	r0, [pc, #132]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004b42:	f003 f891 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8004b4c:	f000 fd82 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004b50:	2306      	movs	r3, #6
 8004b52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8004b54:	230b      	movs	r3, #11
 8004b56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b58:	463b      	mov	r3, r7
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	481a      	ldr	r0, [pc, #104]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004b5e:	f003 f883 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8004b68:	f000 fd74 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8004b70:	230c      	movs	r3, #12
 8004b72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b74:	463b      	mov	r3, r7
 8004b76:	4619      	mov	r1, r3
 8004b78:	4813      	ldr	r0, [pc, #76]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004b7a:	f003 f875 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8004b84:	f000 fd66 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004b88:	2308      	movs	r3, #8
 8004b8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8004b8c:	230d      	movs	r3, #13
 8004b8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004b90:	463b      	mov	r3, r7
 8004b92:	4619      	mov	r1, r3
 8004b94:	480c      	ldr	r0, [pc, #48]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004b96:	f003 f867 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004ba0:	f000 fd58 	bl	8005654 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004ba4:	2309      	movs	r3, #9
 8004ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004ba8:	230e      	movs	r3, #14
 8004baa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004bac:	463b      	mov	r3, r7
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <MX_ADC2_Init+0x204>)
 8004bb2:	f003 f859 	bl	8007c68 <HAL_ADC_ConfigChannel>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8004bbc:	f000 fd4a 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20035a84 	.word	0x20035a84
 8004bcc:	40012100 	.word	0x40012100
 8004bd0:	0f000001 	.word	0x0f000001

08004bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <MX_I2C1_Init+0x54>)
 8004bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004be0:	4a12      	ldr	r2, [pc, #72]	; (8004c2c <MX_I2C1_Init+0x58>)
 8004be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004c0c:	2280      	movs	r2, #128	; 0x80
 8004c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c10:	4804      	ldr	r0, [pc, #16]	; (8004c24 <MX_I2C1_Init+0x50>)
 8004c12:	f004 f963 	bl	8008edc <HAL_I2C_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004c1c:	f000 fd1a 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20035acc 	.word	0x20035acc
 8004c28:	40005400 	.word	0x40005400
 8004c2c:	000186a0 	.word	0x000186a0

08004c30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c36:	4a13      	ldr	r2, [pc, #76]	; (8004c84 <MX_I2C2_Init+0x54>)
 8004c38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004c3a:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c3c:	4a12      	ldr	r2, [pc, #72]	; (8004c88 <MX_I2C2_Init+0x58>)
 8004c3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004c40:	4b0f      	ldr	r3, [pc, #60]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8004c46:	4b0e      	ldr	r3, [pc, #56]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c4c:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004c6c:	4804      	ldr	r0, [pc, #16]	; (8004c80 <MX_I2C2_Init+0x50>)
 8004c6e:	f004 f935 	bl	8008edc <HAL_I2C_Init>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004c78:	f000 fcec 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004c7c:	bf00      	nop
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20035b60 	.word	0x20035b60
 8004c84:	40005800 	.word	0x40005800
 8004c88:	000186a0 	.word	0x000186a0

08004c8c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004c92:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <MX_SDIO_SD_Init+0x3c>)
 8004c94:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004ca8:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <MX_SDIO_SD_Init+0x38>)
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004cba:	bf00      	nop
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr
 8004cc4:	20035d60 	.word	0x20035d60
 8004cc8:	40012c00 	.word	0x40012c00

08004ccc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004cd0:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004cd2:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <MX_SPI2_Init+0x68>)
 8004cd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004cd6:	4b16      	ldr	r3, [pc, #88]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004cde:	4b14      	ldr	r3, [pc, #80]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ce4:	4b12      	ldr	r3, [pc, #72]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004cec:	2202      	movs	r2, #2
 8004cee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004d00:	2228      	movs	r2, #40	; 0x28
 8004d02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d04:	4b0a      	ldr	r3, [pc, #40]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d0a:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004d16:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004d18:	220a      	movs	r2, #10
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004d1c:	4804      	ldr	r0, [pc, #16]	; (8004d30 <MX_SPI2_Init+0x64>)
 8004d1e:	f007 fa0f 	bl	800c140 <HAL_SPI_Init>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004d28:	f000 fc94 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004d2c:	bf00      	nop
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	200359ac 	.word	0x200359ac
 8004d34:	40003800 	.word	0x40003800

08004d38 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b09a      	sub	sp, #104	; 0x68
 8004d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d42:	2224      	movs	r2, #36	; 0x24
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f00e fb99 	bl	801347e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d56:	f107 0320 	add.w	r3, r7, #32
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	605a      	str	r2, [r3, #4]
 8004d60:	609a      	str	r2, [r3, #8]
 8004d62:	60da      	str	r2, [r3, #12]
 8004d64:	611a      	str	r2, [r3, #16]
 8004d66:	615a      	str	r2, [r3, #20]
 8004d68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f00e fb84 	bl	801347e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004d76:	4b42      	ldr	r3, [pc, #264]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d78:	4a42      	ldr	r2, [pc, #264]	; (8004e84 <MX_TIM1_Init+0x14c>)
 8004d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004d7c:	4b40      	ldr	r3, [pc, #256]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d82:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004d88:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d90:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004d96:	4b3a      	ldr	r3, [pc, #232]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9c:	4b38      	ldr	r3, [pc, #224]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004da2:	4837      	ldr	r0, [pc, #220]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004da4:	f007 ff6f 	bl	800cc86 <HAL_TIM_PWM_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004dae:	f000 fc51 	bl	8005654 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004db2:	2303      	movs	r3, #3
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004db6:	2300      	movs	r3, #0
 8004db8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004dd6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4828      	ldr	r0, [pc, #160]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004dde:	f007 ffbb 	bl	800cd58 <HAL_TIM_Encoder_Init>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004de8:	f000 fc34 	bl	8005654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dec:	2300      	movs	r3, #0
 8004dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004df4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4821      	ldr	r0, [pc, #132]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004dfc:	f008 fce2 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004e06:	f000 fc25 	bl	8005654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e0a:	2360      	movs	r3, #96	; 0x60
 8004e0c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e12:	2300      	movs	r3, #0
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004e16:	2300      	movs	r3, #0
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004e26:	f107 0320 	add.w	r3, r7, #32
 8004e2a:	2208      	movs	r2, #8
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4814      	ldr	r0, [pc, #80]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004e30:	f008 f964 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004e3a:	f000 fc0b 	bl	8005654 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004e52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4807      	ldr	r0, [pc, #28]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004e62:	f008 fd2b 	bl	800d8bc <HAL_TIMEx_ConfigBreakDeadTime>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004e6c:	f000 fbf2 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004e70:	4803      	ldr	r0, [pc, #12]	; (8004e80 <MX_TIM1_Init+0x148>)
 8004e72:	f000 ffdf 	bl	8005e34 <HAL_TIM_MspPostInit>

}
 8004e76:	bf00      	nop
 8004e78:	3768      	adds	r7, #104	; 0x68
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20035d20 	.word	0x20035d20
 8004e84:	40010000 	.word	0x40010000

08004e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e8e:	f107 0320 	add.w	r3, r7, #32
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e98:	1d3b      	adds	r3, r7, #4
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	60da      	str	r2, [r3, #12]
 8004ea4:	611a      	str	r2, [r3, #16]
 8004ea6:	615a      	str	r2, [r3, #20]
 8004ea8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004eaa:	4b27      	ldr	r3, [pc, #156]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004eac:	4a27      	ldr	r2, [pc, #156]	; (8004f4c <MX_TIM3_Init+0xc4>)
 8004eae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004eb0:	4b25      	ldr	r3, [pc, #148]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004eb6:	4b24      	ldr	r3, [pc, #144]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ebc:	4b22      	ldr	r3, [pc, #136]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ec4:	4b20      	ldr	r3, [pc, #128]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eca:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004ed0:	481d      	ldr	r0, [pc, #116]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004ed2:	f007 fed8 	bl	800cc86 <HAL_TIM_PWM_Init>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004edc:	f000 fbba 	bl	8005654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ee8:	f107 0320 	add.w	r3, r7, #32
 8004eec:	4619      	mov	r1, r3
 8004eee:	4816      	ldr	r0, [pc, #88]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004ef0:	f008 fc68 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004efa:	f000 fbab 	bl	8005654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004efe:	2360      	movs	r3, #96	; 0x60
 8004f00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f0e:	1d3b      	adds	r3, r7, #4
 8004f10:	2200      	movs	r2, #0
 8004f12:	4619      	mov	r1, r3
 8004f14:	480c      	ldr	r0, [pc, #48]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004f16:	f008 f8f1 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004f20:	f000 fb98 	bl	8005654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f24:	1d3b      	adds	r3, r7, #4
 8004f26:	2204      	movs	r2, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4807      	ldr	r0, [pc, #28]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004f2c:	f008 f8e6 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004f36:	f000 fb8d 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004f3a:	4803      	ldr	r0, [pc, #12]	; (8004f48 <MX_TIM3_Init+0xc0>)
 8004f3c:	f000 ff7a 	bl	8005e34 <HAL_TIM_MspPostInit>

}
 8004f40:	bf00      	nop
 8004f42:	3728      	adds	r7, #40	; 0x28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20035bb8 	.word	0x20035bb8
 8004f4c:	40000400 	.word	0x40000400

08004f50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f56:	f107 0320 	add.w	r3, r7, #32
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f60:	1d3b      	adds	r3, r7, #4
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	605a      	str	r2, [r3, #4]
 8004f68:	609a      	str	r2, [r3, #8]
 8004f6a:	60da      	str	r2, [r3, #12]
 8004f6c:	611a      	str	r2, [r3, #16]
 8004f6e:	615a      	str	r2, [r3, #20]
 8004f70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f72:	4b27      	ldr	r3, [pc, #156]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f74:	4a27      	ldr	r2, [pc, #156]	; (8005014 <MX_TIM4_Init+0xc4>)
 8004f76:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004f78:	4b25      	ldr	r3, [pc, #148]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f86:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004f8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f8e:	2200      	movs	r2, #0
 8004f90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f92:	4b1f      	ldr	r3, [pc, #124]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004f98:	481d      	ldr	r0, [pc, #116]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004f9a:	f007 fe74 	bl	800cc86 <HAL_TIM_PWM_Init>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004fa4:	f000 fb56 	bl	8005654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004fb0:	f107 0320 	add.w	r3, r7, #32
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4816      	ldr	r0, [pc, #88]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004fb8:	f008 fc04 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004fc2:	f000 fb47 	bl	8005654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fc6:	2360      	movs	r3, #96	; 0x60
 8004fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004fd6:	1d3b      	adds	r3, r7, #4
 8004fd8:	2208      	movs	r2, #8
 8004fda:	4619      	mov	r1, r3
 8004fdc:	480c      	ldr	r0, [pc, #48]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004fde:	f008 f88d 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004fe8:	f000 fb34 	bl	8005654 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fec:	1d3b      	adds	r3, r7, #4
 8004fee:	220c      	movs	r2, #12
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4807      	ldr	r0, [pc, #28]	; (8005010 <MX_TIM4_Init+0xc0>)
 8004ff4:	f008 f882 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004ffe:	f000 fb29 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005002:	4803      	ldr	r0, [pc, #12]	; (8005010 <MX_TIM4_Init+0xc0>)
 8005004:	f000 ff16 	bl	8005e34 <HAL_TIM_MspPostInit>

}
 8005008:	bf00      	nop
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20035a44 	.word	0x20035a44
 8005014:	40000800 	.word	0x40000800

08005018 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800501e:	463b      	mov	r3, r7
 8005020:	2200      	movs	r2, #0
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <MX_TIM6_Init+0x64>)
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <MX_TIM6_Init+0x68>)
 800502a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <MX_TIM6_Init+0x64>)
 800502e:	2259      	movs	r2, #89	; 0x59
 8005030:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005032:	4b12      	ldr	r3, [pc, #72]	; (800507c <MX_TIM6_Init+0x64>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005038:	4b10      	ldr	r3, [pc, #64]	; (800507c <MX_TIM6_Init+0x64>)
 800503a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800503e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005040:	4b0e      	ldr	r3, [pc, #56]	; (800507c <MX_TIM6_Init+0x64>)
 8005042:	2280      	movs	r2, #128	; 0x80
 8005044:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005046:	480d      	ldr	r0, [pc, #52]	; (800507c <MX_TIM6_Init+0x64>)
 8005048:	f007 fdce 	bl	800cbe8 <HAL_TIM_Base_Init>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005052:	f000 faff 	bl	8005654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005056:	2300      	movs	r3, #0
 8005058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800505a:	2300      	movs	r3, #0
 800505c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800505e:	463b      	mov	r3, r7
 8005060:	4619      	mov	r1, r3
 8005062:	4806      	ldr	r0, [pc, #24]	; (800507c <MX_TIM6_Init+0x64>)
 8005064:	f008 fbae 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800506e:	f000 faf1 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20035ce0 	.word	0x20035ce0
 8005080:	40001000 	.word	0x40001000

08005084 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800508a:	463b      	mov	r3, r7
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <MX_TIM7_Init+0x60>)
 8005094:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <MX_TIM7_Init+0x64>)
 8005096:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005098:	4b12      	ldr	r3, [pc, #72]	; (80050e4 <MX_TIM7_Init+0x60>)
 800509a:	22b3      	movs	r2, #179	; 0xb3
 800509c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800509e:	4b11      	ldr	r3, [pc, #68]	; (80050e4 <MX_TIM7_Init+0x60>)
 80050a0:	2200      	movs	r2, #0
 80050a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80050a4:	4b0f      	ldr	r3, [pc, #60]	; (80050e4 <MX_TIM7_Init+0x60>)
 80050a6:	2231      	movs	r2, #49	; 0x31
 80050a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <MX_TIM7_Init+0x60>)
 80050ac:	2280      	movs	r2, #128	; 0x80
 80050ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80050b0:	480c      	ldr	r0, [pc, #48]	; (80050e4 <MX_TIM7_Init+0x60>)
 80050b2:	f007 fd99 	bl	800cbe8 <HAL_TIM_Base_Init>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80050bc:	f000 faca 	bl	8005654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050c0:	2300      	movs	r3, #0
 80050c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80050c8:	463b      	mov	r3, r7
 80050ca:	4619      	mov	r1, r3
 80050cc:	4805      	ldr	r0, [pc, #20]	; (80050e4 <MX_TIM7_Init+0x60>)
 80050ce:	f008 fb79 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80050d8:	f000 fabc 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20035e84 	.word	0x20035e84
 80050e8:	40001400 	.word	0x40001400

080050ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	; 0x30
 80050f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80050f2:	f107 030c 	add.w	r3, r7, #12
 80050f6:	2224      	movs	r2, #36	; 0x24
 80050f8:	2100      	movs	r1, #0
 80050fa:	4618      	mov	r0, r3
 80050fc:	f00e f9bf 	bl	801347e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <MX_TIM8_Init+0xa8>)
 800510a:	4a23      	ldr	r2, [pc, #140]	; (8005198 <MX_TIM8_Init+0xac>)
 800510c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800510e:	4b21      	ldr	r3, [pc, #132]	; (8005194 <MX_TIM8_Init+0xa8>)
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <MX_TIM8_Init+0xa8>)
 8005116:	2210      	movs	r2, #16
 8005118:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800511a:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <MX_TIM8_Init+0xa8>)
 800511c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005120:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005122:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <MX_TIM8_Init+0xa8>)
 8005124:	2200      	movs	r2, #0
 8005126:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005128:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <MX_TIM8_Init+0xa8>)
 800512a:	2200      	movs	r2, #0
 800512c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800512e:	4b19      	ldr	r3, [pc, #100]	; (8005194 <MX_TIM8_Init+0xa8>)
 8005130:	2200      	movs	r2, #0
 8005132:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005134:	2303      	movs	r3, #3
 8005136:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800513c:	2301      	movs	r3, #1
 800513e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005148:	2300      	movs	r3, #0
 800514a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800514c:	2301      	movs	r3, #1
 800514e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005150:	2300      	movs	r3, #0
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	4619      	mov	r1, r3
 800515e:	480d      	ldr	r0, [pc, #52]	; (8005194 <MX_TIM8_Init+0xa8>)
 8005160:	f007 fdfa 	bl	800cd58 <HAL_TIM_Encoder_Init>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800516a:	f000 fa73 	bl	8005654 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800516e:	2300      	movs	r3, #0
 8005170:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005172:	2300      	movs	r3, #0
 8005174:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	4619      	mov	r1, r3
 800517a:	4806      	ldr	r0, [pc, #24]	; (8005194 <MX_TIM8_Init+0xa8>)
 800517c:	f008 fb22 	bl	800d7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005186:	f000 fa65 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800518a:	bf00      	nop
 800518c:	3730      	adds	r7, #48	; 0x30
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20035a04 	.word	0x20035a04
 8005198:	40010400 	.word	0x40010400

0800519c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	605a      	str	r2, [r3, #4]
 80051aa:	609a      	str	r2, [r3, #8]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	611a      	str	r2, [r3, #16]
 80051b0:	615a      	str	r2, [r3, #20]
 80051b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80051b4:	4b1e      	ldr	r3, [pc, #120]	; (8005230 <MX_TIM10_Init+0x94>)
 80051b6:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <MX_TIM10_Init+0x98>)
 80051b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80051ba:	4b1d      	ldr	r3, [pc, #116]	; (8005230 <MX_TIM10_Init+0x94>)
 80051bc:	2200      	movs	r2, #0
 80051be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <MX_TIM10_Init+0x94>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <MX_TIM10_Init+0x94>)
 80051c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051ce:	4b18      	ldr	r3, [pc, #96]	; (8005230 <MX_TIM10_Init+0x94>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <MX_TIM10_Init+0x94>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80051da:	4815      	ldr	r0, [pc, #84]	; (8005230 <MX_TIM10_Init+0x94>)
 80051dc:	f007 fd04 	bl	800cbe8 <HAL_TIM_Base_Init>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80051e6:	f000 fa35 	bl	8005654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80051ea:	4811      	ldr	r0, [pc, #68]	; (8005230 <MX_TIM10_Init+0x94>)
 80051ec:	f007 fd4b 	bl	800cc86 <HAL_TIM_PWM_Init>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80051f6:	f000 fa2d 	bl	8005654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051fa:	2360      	movs	r3, #96	; 0x60
 80051fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005202:	2300      	movs	r3, #0
 8005204:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	2200      	movs	r2, #0
 800520e:	4619      	mov	r1, r3
 8005210:	4807      	ldr	r0, [pc, #28]	; (8005230 <MX_TIM10_Init+0x94>)
 8005212:	f007 ff73 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800521c:	f000 fa1a 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005220:	4803      	ldr	r0, [pc, #12]	; (8005230 <MX_TIM10_Init+0x94>)
 8005222:	f000 fe07 	bl	8005e34 <HAL_TIM_MspPostInit>

}
 8005226:	bf00      	nop
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20035b20 	.word	0x20035b20
 8005234:	40014400 	.word	0x40014400

08005238 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800523e:	1d3b      	adds	r3, r7, #4
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	611a      	str	r2, [r3, #16]
 800524c:	615a      	str	r2, [r3, #20]
 800524e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005250:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <MX_TIM11_Init+0x94>)
 8005252:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <MX_TIM11_Init+0x98>)
 8005254:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8005256:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <MX_TIM11_Init+0x94>)
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800525c:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <MX_TIM11_Init+0x94>)
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8005262:	4b1a      	ldr	r3, [pc, #104]	; (80052cc <MX_TIM11_Init+0x94>)
 8005264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005268:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <MX_TIM11_Init+0x94>)
 800526c:	2200      	movs	r2, #0
 800526e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <MX_TIM11_Init+0x94>)
 8005272:	2200      	movs	r2, #0
 8005274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005276:	4815      	ldr	r0, [pc, #84]	; (80052cc <MX_TIM11_Init+0x94>)
 8005278:	f007 fcb6 	bl	800cbe8 <HAL_TIM_Base_Init>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005282:	f000 f9e7 	bl	8005654 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005286:	4811      	ldr	r0, [pc, #68]	; (80052cc <MX_TIM11_Init+0x94>)
 8005288:	f007 fcfd 	bl	800cc86 <HAL_TIM_PWM_Init>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005292:	f000 f9df 	bl	8005654 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005296:	2360      	movs	r3, #96	; 0x60
 8005298:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80052a6:	1d3b      	adds	r3, r7, #4
 80052a8:	2200      	movs	r2, #0
 80052aa:	4619      	mov	r1, r3
 80052ac:	4807      	ldr	r0, [pc, #28]	; (80052cc <MX_TIM11_Init+0x94>)
 80052ae:	f007 ff25 	bl	800d0fc <HAL_TIM_PWM_ConfigChannel>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80052b8:	f000 f9cc 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80052bc:	4803      	ldr	r0, [pc, #12]	; (80052cc <MX_TIM11_Init+0x94>)
 80052be:	f000 fdb9 	bl	8005e34 <HAL_TIM_MspPostInit>

}
 80052c2:	bf00      	nop
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20035c40 	.word	0x20035c40
 80052d0:	40014800 	.word	0x40014800

080052d4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <MX_TIM13_Init+0x40>)
 80052da:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <MX_TIM13_Init+0x44>)
 80052dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80052de:	4b0d      	ldr	r3, [pc, #52]	; (8005314 <MX_TIM13_Init+0x40>)
 80052e0:	2259      	movs	r2, #89	; 0x59
 80052e2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e4:	4b0b      	ldr	r3, [pc, #44]	; (8005314 <MX_TIM13_Init+0x40>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <MX_TIM13_Init+0x40>)
 80052ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80052f0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052f2:	4b08      	ldr	r3, [pc, #32]	; (8005314 <MX_TIM13_Init+0x40>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052f8:	4b06      	ldr	r3, [pc, #24]	; (8005314 <MX_TIM13_Init+0x40>)
 80052fa:	2280      	movs	r2, #128	; 0x80
 80052fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80052fe:	4805      	ldr	r0, [pc, #20]	; (8005314 <MX_TIM13_Init+0x40>)
 8005300:	f007 fc72 	bl	800cbe8 <HAL_TIM_Base_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800530a:	f000 f9a3 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20035c00 	.word	0x20035c00
 8005318:	40001c00 	.word	0x40001c00

0800531c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005320:	4b11      	ldr	r3, [pc, #68]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005322:	4a12      	ldr	r2, [pc, #72]	; (800536c <MX_USART2_UART_Init+0x50>)
 8005324:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005326:	4b10      	ldr	r3, [pc, #64]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005328:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800532c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800532e:	4b0e      	ldr	r3, [pc, #56]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005336:	2200      	movs	r2, #0
 8005338:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005342:	220c      	movs	r2, #12
 8005344:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005348:	2200      	movs	r2, #0
 800534a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800534c:	4b06      	ldr	r3, [pc, #24]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 800534e:	2200      	movs	r2, #0
 8005350:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005352:	4805      	ldr	r0, [pc, #20]	; (8005368 <MX_USART2_UART_Init+0x4c>)
 8005354:	f008 fb18 	bl	800d988 <HAL_UART_Init>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800535e:	f000 f979 	bl	8005654 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20035de4 	.word	0x20035de4
 800536c:	40004400 	.word	0x40004400

08005370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	607b      	str	r3, [r7, #4]
 800537a:	4b14      	ldr	r3, [pc, #80]	; (80053cc <MX_DMA_Init+0x5c>)
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	4a13      	ldr	r2, [pc, #76]	; (80053cc <MX_DMA_Init+0x5c>)
 8005380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005384:	6313      	str	r3, [r2, #48]	; 0x30
 8005386:	4b11      	ldr	r3, [pc, #68]	; (80053cc <MX_DMA_Init+0x5c>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538e:	607b      	str	r3, [r7, #4]
 8005390:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005392:	2200      	movs	r2, #0
 8005394:	2100      	movs	r1, #0
 8005396:	203a      	movs	r0, #58	; 0x3a
 8005398:	f002 fff1 	bl	800837e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800539c:	203a      	movs	r0, #58	; 0x3a
 800539e:	f003 f80a 	bl	80083b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	203b      	movs	r0, #59	; 0x3b
 80053a8:	f002 ffe9 	bl	800837e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80053ac:	203b      	movs	r0, #59	; 0x3b
 80053ae:	f003 f802 	bl	80083b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80053b2:	2200      	movs	r2, #0
 80053b4:	2100      	movs	r1, #0
 80053b6:	2045      	movs	r0, #69	; 0x45
 80053b8:	f002 ffe1 	bl	800837e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80053bc:	2045      	movs	r0, #69	; 0x45
 80053be:	f002 fffa 	bl	80083b6 <HAL_NVIC_EnableIRQ>

}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800

080053d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08c      	sub	sp, #48	; 0x30
 80053d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053d6:	f107 031c 	add.w	r3, r7, #28
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
 80053ea:	4b94      	ldr	r3, [pc, #592]	; (800563c <MX_GPIO_Init+0x26c>)
 80053ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ee:	4a93      	ldr	r2, [pc, #588]	; (800563c <MX_GPIO_Init+0x26c>)
 80053f0:	f043 0310 	orr.w	r3, r3, #16
 80053f4:	6313      	str	r3, [r2, #48]	; 0x30
 80053f6:	4b91      	ldr	r3, [pc, #580]	; (800563c <MX_GPIO_Init+0x26c>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	4b8d      	ldr	r3, [pc, #564]	; (800563c <MX_GPIO_Init+0x26c>)
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	4a8c      	ldr	r2, [pc, #560]	; (800563c <MX_GPIO_Init+0x26c>)
 800540c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005410:	6313      	str	r3, [r2, #48]	; 0x30
 8005412:	4b8a      	ldr	r3, [pc, #552]	; (800563c <MX_GPIO_Init+0x26c>)
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	4b86      	ldr	r3, [pc, #536]	; (800563c <MX_GPIO_Init+0x26c>)
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	4a85      	ldr	r2, [pc, #532]	; (800563c <MX_GPIO_Init+0x26c>)
 8005428:	f043 0304 	orr.w	r3, r3, #4
 800542c:	6313      	str	r3, [r2, #48]	; 0x30
 800542e:	4b83      	ldr	r3, [pc, #524]	; (800563c <MX_GPIO_Init+0x26c>)
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	f003 0304 	and.w	r3, r3, #4
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	4b7f      	ldr	r3, [pc, #508]	; (800563c <MX_GPIO_Init+0x26c>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a7e      	ldr	r2, [pc, #504]	; (800563c <MX_GPIO_Init+0x26c>)
 8005444:	f043 0301 	orr.w	r3, r3, #1
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b7c      	ldr	r3, [pc, #496]	; (800563c <MX_GPIO_Init+0x26c>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	4b78      	ldr	r3, [pc, #480]	; (800563c <MX_GPIO_Init+0x26c>)
 800545c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545e:	4a77      	ldr	r2, [pc, #476]	; (800563c <MX_GPIO_Init+0x26c>)
 8005460:	f043 0302 	orr.w	r3, r3, #2
 8005464:	6313      	str	r3, [r2, #48]	; 0x30
 8005466:	4b75      	ldr	r3, [pc, #468]	; (800563c <MX_GPIO_Init+0x26c>)
 8005468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	60bb      	str	r3, [r7, #8]
 8005470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	4b71      	ldr	r3, [pc, #452]	; (800563c <MX_GPIO_Init+0x26c>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a70      	ldr	r2, [pc, #448]	; (800563c <MX_GPIO_Init+0x26c>)
 800547c:	f043 0308 	orr.w	r3, r3, #8
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b6e      	ldr	r3, [pc, #440]	; (800563c <MX_GPIO_Init+0x26c>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800548e:	2200      	movs	r2, #0
 8005490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005494:	486a      	ldr	r0, [pc, #424]	; (8005640 <MX_GPIO_Init+0x270>)
 8005496:	f003 fd07 	bl	8008ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800549a:	2200      	movs	r2, #0
 800549c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054a0:	4868      	ldr	r0, [pc, #416]	; (8005644 <MX_GPIO_Init+0x274>)
 80054a2:	f003 fd01 	bl	8008ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80054a6:	2200      	movs	r2, #0
 80054a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054ac:	4866      	ldr	r0, [pc, #408]	; (8005648 <MX_GPIO_Init+0x278>)
 80054ae:	f003 fcfb 	bl	8008ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80054b2:	2200      	movs	r2, #0
 80054b4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80054b8:	4864      	ldr	r0, [pc, #400]	; (800564c <MX_GPIO_Init+0x27c>)
 80054ba:	f003 fcf5 	bl	8008ea8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054be:	2304      	movs	r3, #4
 80054c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054c2:	2300      	movs	r3, #0
 80054c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c6:	2300      	movs	r3, #0
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054ca:	f107 031c 	add.w	r3, r7, #28
 80054ce:	4619      	mov	r1, r3
 80054d0:	485b      	ldr	r0, [pc, #364]	; (8005640 <MX_GPIO_Init+0x270>)
 80054d2:	f003 fb27 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80054d6:	230f      	movs	r3, #15
 80054d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054da:	2303      	movs	r3, #3
 80054dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054e2:	f107 031c 	add.w	r3, r7, #28
 80054e6:	4619      	mov	r1, r3
 80054e8:	4859      	ldr	r0, [pc, #356]	; (8005650 <MX_GPIO_Init+0x280>)
 80054ea:	f003 fb1b 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80054ee:	23e1      	movs	r3, #225	; 0xe1
 80054f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80054f2:	2303      	movs	r3, #3
 80054f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054fa:	f107 031c 	add.w	r3, r7, #28
 80054fe:	4619      	mov	r1, r3
 8005500:	4852      	ldr	r0, [pc, #328]	; (800564c <MX_GPIO_Init+0x27c>)
 8005502:	f003 fb0f 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005506:	2303      	movs	r3, #3
 8005508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800550a:	2303      	movs	r3, #3
 800550c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005512:	f107 031c 	add.w	r3, r7, #28
 8005516:	4619      	mov	r1, r3
 8005518:	484a      	ldr	r0, [pc, #296]	; (8005644 <MX_GPIO_Init+0x274>)
 800551a:	f003 fb03 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800551e:	2304      	movs	r3, #4
 8005520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005522:	2300      	movs	r3, #0
 8005524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005526:	2301      	movs	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800552a:	f107 031c 	add.w	r3, r7, #28
 800552e:	4619      	mov	r1, r3
 8005530:	4844      	ldr	r0, [pc, #272]	; (8005644 <MX_GPIO_Init+0x274>)
 8005532:	f003 faf7 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8005536:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800553a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800553c:	2300      	movs	r3, #0
 800553e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005540:	2301      	movs	r3, #1
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	4619      	mov	r1, r3
 800554a:	483d      	ldr	r0, [pc, #244]	; (8005640 <MX_GPIO_Init+0x270>)
 800554c:	f003 faea 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005550:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005556:	2301      	movs	r3, #1
 8005558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555e:	2300      	movs	r3, #0
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005562:	f107 031c 	add.w	r3, r7, #28
 8005566:	4619      	mov	r1, r3
 8005568:	4835      	ldr	r0, [pc, #212]	; (8005640 <MX_GPIO_Init+0x270>)
 800556a:	f003 fadb 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800556e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005574:	2301      	movs	r3, #1
 8005576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557c:	2300      	movs	r3, #0
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005580:	f107 031c 	add.w	r3, r7, #28
 8005584:	4619      	mov	r1, r3
 8005586:	482f      	ldr	r0, [pc, #188]	; (8005644 <MX_GPIO_Init+0x274>)
 8005588:	f003 facc 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800558c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005592:	2300      	movs	r3, #0
 8005594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005596:	2300      	movs	r3, #0
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800559a:	f107 031c 	add.w	r3, r7, #28
 800559e:	4619      	mov	r1, r3
 80055a0:	4829      	ldr	r0, [pc, #164]	; (8005648 <MX_GPIO_Init+0x278>)
 80055a2:	f003 fabf 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ac:	2301      	movs	r3, #1
 80055ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055b8:	f107 031c 	add.w	r3, r7, #28
 80055bc:	4619      	mov	r1, r3
 80055be:	4822      	ldr	r0, [pc, #136]	; (8005648 <MX_GPIO_Init+0x278>)
 80055c0:	f003 fab0 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80055c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055ca:	2301      	movs	r3, #1
 80055cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055ce:	2301      	movs	r3, #1
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d2:	2300      	movs	r3, #0
 80055d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055d6:	f107 031c 	add.w	r3, r7, #28
 80055da:	4619      	mov	r1, r3
 80055dc:	481a      	ldr	r0, [pc, #104]	; (8005648 <MX_GPIO_Init+0x278>)
 80055de:	f003 faa1 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80055e2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80055e6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e8:	2301      	movs	r3, #1
 80055ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f0:	2300      	movs	r3, #0
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f4:	f107 031c 	add.w	r3, r7, #28
 80055f8:	4619      	mov	r1, r3
 80055fa:	4814      	ldr	r0, [pc, #80]	; (800564c <MX_GPIO_Init+0x27c>)
 80055fc:	f003 fa92 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005606:	2300      	movs	r3, #0
 8005608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800560e:	f107 031c 	add.w	r3, r7, #28
 8005612:	4619      	mov	r1, r3
 8005614:	480d      	ldr	r0, [pc, #52]	; (800564c <MX_GPIO_Init+0x27c>)
 8005616:	f003 fa85 	bl	8008b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800561a:	239b      	movs	r3, #155	; 0x9b
 800561c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800561e:	2300      	movs	r3, #0
 8005620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005622:	2301      	movs	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005626:	f107 031c 	add.w	r3, r7, #28
 800562a:	4619      	mov	r1, r3
 800562c:	4806      	ldr	r0, [pc, #24]	; (8005648 <MX_GPIO_Init+0x278>)
 800562e:	f003 fa79 	bl	8008b24 <HAL_GPIO_Init>

}
 8005632:	bf00      	nop
 8005634:	3730      	adds	r7, #48	; 0x30
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800
 8005640:	40021000 	.word	0x40021000
 8005644:	40020400 	.word	0x40020400
 8005648:	40020c00 	.word	0x40020c00
 800564c:	40020000 	.word	0x40020000
 8005650:	40020800 	.word	0x40020800

08005654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005658:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800565a:	e7fe      	b.n	800565a <Error_Handler+0x6>

0800565c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8005660:	bf00      	nop
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
	...

0800566c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
 8005676:	4b10      	ldr	r3, [pc, #64]	; (80056b8 <HAL_MspInit+0x4c>)
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	4a0f      	ldr	r2, [pc, #60]	; (80056b8 <HAL_MspInit+0x4c>)
 800567c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005680:	6453      	str	r3, [r2, #68]	; 0x44
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <HAL_MspInit+0x4c>)
 8005684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800568a:	607b      	str	r3, [r7, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_MspInit+0x4c>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <HAL_MspInit+0x4c>)
 8005698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569c:	6413      	str	r3, [r2, #64]	; 0x40
 800569e:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <HAL_MspInit+0x4c>)
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40023800 	.word	0x40023800

080056bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08c      	sub	sp, #48	; 0x30
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	f107 031c 	add.w	r3, r7, #28
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a4a      	ldr	r2, [pc, #296]	; (8005804 <HAL_ADC_MspInit+0x148>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f040 808e 	bne.w	80057fc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
 80056e4:	4b48      	ldr	r3, [pc, #288]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	4a47      	ldr	r2, [pc, #284]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 80056ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ee:	6453      	str	r3, [r2, #68]	; 0x44
 80056f0:	4b45      	ldr	r3, [pc, #276]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 80056f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056f8:	61bb      	str	r3, [r7, #24]
 80056fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	4a40      	ldr	r2, [pc, #256]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 8005706:	f043 0304 	orr.w	r3, r3, #4
 800570a:	6313      	str	r3, [r2, #48]	; 0x30
 800570c:	4b3e      	ldr	r3, [pc, #248]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
 800571c:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	4a39      	ldr	r2, [pc, #228]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 8005722:	f043 0301 	orr.w	r3, r3, #1
 8005726:	6313      	str	r3, [r2, #48]	; 0x30
 8005728:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	613b      	str	r3, [r7, #16]
 8005732:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	4b33      	ldr	r3, [pc, #204]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 800573a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573c:	4a32      	ldr	r2, [pc, #200]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 800573e:	f043 0302 	orr.w	r3, r3, #2
 8005742:	6313      	str	r3, [r2, #48]	; 0x30
 8005744:	4b30      	ldr	r3, [pc, #192]	; (8005808 <HAL_ADC_MspInit+0x14c>)
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005750:	230f      	movs	r3, #15
 8005752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005754:	2303      	movs	r3, #3
 8005756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800575c:	f107 031c 	add.w	r3, r7, #28
 8005760:	4619      	mov	r1, r3
 8005762:	482a      	ldr	r0, [pc, #168]	; (800580c <HAL_ADC_MspInit+0x150>)
 8005764:	f003 f9de 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005768:	23ff      	movs	r3, #255	; 0xff
 800576a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800576c:	2303      	movs	r3, #3
 800576e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005770:	2300      	movs	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005774:	f107 031c 	add.w	r3, r7, #28
 8005778:	4619      	mov	r1, r3
 800577a:	4825      	ldr	r0, [pc, #148]	; (8005810 <HAL_ADC_MspInit+0x154>)
 800577c:	f003 f9d2 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005780:	2303      	movs	r3, #3
 8005782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005784:	2303      	movs	r3, #3
 8005786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578c:	f107 031c 	add.w	r3, r7, #28
 8005790:	4619      	mov	r1, r3
 8005792:	4820      	ldr	r0, [pc, #128]	; (8005814 <HAL_ADC_MspInit+0x158>)
 8005794:	f003 f9c6 	bl	8008b24 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8005798:	4b1f      	ldr	r3, [pc, #124]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 800579a:	4a20      	ldr	r2, [pc, #128]	; (800581c <HAL_ADC_MspInit+0x160>)
 800579c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800579e:	4b1e      	ldr	r3, [pc, #120]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80057a4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ac:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057b8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80057ba:	4b17      	ldr	r3, [pc, #92]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057c0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057c8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80057ca:	4b13      	ldr	r3, [pc, #76]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057d0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057d8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057da:	4b0f      	ldr	r3, [pc, #60]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80057e0:	480d      	ldr	r0, [pc, #52]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057e2:	f002 fe03 	bl	80083ec <HAL_DMA_Init>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80057ec:	f7ff ff32 	bl	8005654 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a09      	ldr	r2, [pc, #36]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057f4:	639a      	str	r2, [r3, #56]	; 0x38
 80057f6:	4a08      	ldr	r2, [pc, #32]	; (8005818 <HAL_ADC_MspInit+0x15c>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80057fc:	bf00      	nop
 80057fe:	3730      	adds	r7, #48	; 0x30
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40012100 	.word	0x40012100
 8005808:	40023800 	.word	0x40023800
 800580c:	40020800 	.word	0x40020800
 8005810:	40020000 	.word	0x40020000
 8005814:	40020400 	.word	0x40020400
 8005818:	20035e24 	.word	0x20035e24
 800581c:	40026440 	.word	0x40026440

08005820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 031c 	add.w	r3, r7, #28
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a32      	ldr	r2, [pc, #200]	; (8005908 <HAL_I2C_MspInit+0xe8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d12c      	bne.n	800589c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	4b31      	ldr	r3, [pc, #196]	; (800590c <HAL_I2C_MspInit+0xec>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	4a30      	ldr	r2, [pc, #192]	; (800590c <HAL_I2C_MspInit+0xec>)
 800584c:	f043 0302 	orr.w	r3, r3, #2
 8005850:	6313      	str	r3, [r2, #48]	; 0x30
 8005852:	4b2e      	ldr	r3, [pc, #184]	; (800590c <HAL_I2C_MspInit+0xec>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800585e:	23c0      	movs	r3, #192	; 0xc0
 8005860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005862:	2312      	movs	r3, #18
 8005864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005866:	2301      	movs	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800586a:	2303      	movs	r3, #3
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800586e:	2304      	movs	r3, #4
 8005870:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005872:	f107 031c 	add.w	r3, r7, #28
 8005876:	4619      	mov	r1, r3
 8005878:	4825      	ldr	r0, [pc, #148]	; (8005910 <HAL_I2C_MspInit+0xf0>)
 800587a:	f003 f953 	bl	8008b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	4b22      	ldr	r3, [pc, #136]	; (800590c <HAL_I2C_MspInit+0xec>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a21      	ldr	r2, [pc, #132]	; (800590c <HAL_I2C_MspInit+0xec>)
 8005888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_I2C_MspInit+0xec>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800589a:	e031      	b.n	8005900 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_I2C_MspInit+0xf4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d12c      	bne.n	8005900 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	4b18      	ldr	r3, [pc, #96]	; (800590c <HAL_I2C_MspInit+0xec>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_I2C_MspInit+0xec>)
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6313      	str	r3, [r2, #48]	; 0x30
 80058b6:	4b15      	ldr	r3, [pc, #84]	; (800590c <HAL_I2C_MspInit+0xec>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80058c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80058c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058c8:	2312      	movs	r3, #18
 80058ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058cc:	2301      	movs	r3, #1
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d0:	2303      	movs	r3, #3
 80058d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80058d4:	2304      	movs	r3, #4
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d8:	f107 031c 	add.w	r3, r7, #28
 80058dc:	4619      	mov	r1, r3
 80058de:	480c      	ldr	r0, [pc, #48]	; (8005910 <HAL_I2C_MspInit+0xf0>)
 80058e0:	f003 f920 	bl	8008b24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	4b08      	ldr	r3, [pc, #32]	; (800590c <HAL_I2C_MspInit+0xec>)
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	4a07      	ldr	r2, [pc, #28]	; (800590c <HAL_I2C_MspInit+0xec>)
 80058ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80058f2:	6413      	str	r3, [r2, #64]	; 0x40
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_I2C_MspInit+0xec>)
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fc:	60fb      	str	r3, [r7, #12]
 80058fe:	68fb      	ldr	r3, [r7, #12]
}
 8005900:	bf00      	nop
 8005902:	3730      	adds	r7, #48	; 0x30
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40005400 	.word	0x40005400
 800590c:	40023800 	.word	0x40023800
 8005910:	40020400 	.word	0x40020400
 8005914:	40005800 	.word	0x40005800

08005918 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	2200      	movs	r2, #0
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	609a      	str	r2, [r3, #8]
 800592c:	60da      	str	r2, [r3, #12]
 800592e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a69      	ldr	r2, [pc, #420]	; (8005adc <HAL_SD_MspInit+0x1c4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	f040 80cb 	bne.w	8005ad2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800593c:	2300      	movs	r3, #0
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	4b67      	ldr	r3, [pc, #412]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	4a66      	ldr	r2, [pc, #408]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 8005946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800594a:	6453      	str	r3, [r2, #68]	; 0x44
 800594c:	4b64      	ldr	r3, [pc, #400]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 800594e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	4b60      	ldr	r3, [pc, #384]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	4a5f      	ldr	r2, [pc, #380]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 8005962:	f043 0304 	orr.w	r3, r3, #4
 8005966:	6313      	str	r3, [r2, #48]	; 0x30
 8005968:	4b5d      	ldr	r3, [pc, #372]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 800596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005974:	2300      	movs	r3, #0
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	4b59      	ldr	r3, [pc, #356]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 800597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597c:	4a58      	ldr	r2, [pc, #352]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 800597e:	f043 0308 	orr.w	r3, r3, #8
 8005982:	6313      	str	r3, [r2, #48]	; 0x30
 8005984:	4b56      	ldr	r3, [pc, #344]	; (8005ae0 <HAL_SD_MspInit+0x1c8>)
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	f003 0308 	and.w	r3, r3, #8
 800598c:	60bb      	str	r3, [r7, #8]
 800598e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005990:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005994:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005996:	2302      	movs	r3, #2
 8005998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800599e:	2303      	movs	r3, #3
 80059a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059a2:	230c      	movs	r3, #12
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	4619      	mov	r1, r3
 80059ac:	484d      	ldr	r0, [pc, #308]	; (8005ae4 <HAL_SD_MspInit+0x1cc>)
 80059ae:	f003 f8b9 	bl	8008b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80059b2:	2304      	movs	r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b6:	2302      	movs	r3, #2
 80059b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ba:	2300      	movs	r3, #0
 80059bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059be:	2303      	movs	r3, #3
 80059c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80059c2:	230c      	movs	r3, #12
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059c6:	f107 0314 	add.w	r3, r7, #20
 80059ca:	4619      	mov	r1, r3
 80059cc:	4846      	ldr	r0, [pc, #280]	; (8005ae8 <HAL_SD_MspInit+0x1d0>)
 80059ce:	f003 f8a9 	bl	8008b24 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80059d2:	4b46      	ldr	r3, [pc, #280]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059d4:	4a46      	ldr	r2, [pc, #280]	; (8005af0 <HAL_SD_MspInit+0x1d8>)
 80059d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80059d8:	4b44      	ldr	r3, [pc, #272]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059de:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059e0:	4b42      	ldr	r3, [pc, #264]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059e6:	4b41      	ldr	r3, [pc, #260]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80059ec:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80059f4:	4b3d      	ldr	r3, [pc, #244]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80059fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80059fc:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 80059fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a02:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005a04:	4b39      	ldr	r3, [pc, #228]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a06:	2220      	movs	r2, #32
 8005a08:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a0a:	4b38      	ldr	r3, [pc, #224]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a0c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a10:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a12:	4b36      	ldr	r3, [pc, #216]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a14:	2204      	movs	r2, #4
 8005a16:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a18:	4b34      	ldr	r3, [pc, #208]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005a1e:	4b33      	ldr	r3, [pc, #204]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a24:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005a26:	4b31      	ldr	r3, [pc, #196]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005a2e:	482f      	ldr	r0, [pc, #188]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a30:	f002 fcdc 	bl	80083ec <HAL_DMA_Init>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005a3a:	f7ff fe0b 	bl	8005654 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a42:	641a      	str	r2, [r3, #64]	; 0x40
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <HAL_SD_MspInit+0x1d4>)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005a4a:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a4c:	4a2a      	ldr	r2, [pc, #168]	; (8005af8 <HAL_SD_MspInit+0x1e0>)
 8005a4e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005a50:	4b28      	ldr	r3, [pc, #160]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005a56:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a58:	4b26      	ldr	r3, [pc, #152]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a5a:	2240      	movs	r2, #64	; 0x40
 8005a5c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a64:	4b23      	ldr	r3, [pc, #140]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a6a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005a6c:	4b21      	ldr	r3, [pc, #132]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a72:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005a74:	4b1f      	ldr	r3, [pc, #124]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005a7a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005a7c:	4b1d      	ldr	r3, [pc, #116]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a7e:	2220      	movs	r2, #32
 8005a80:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005a82:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005a88:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005a90:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a92:	2203      	movs	r2, #3
 8005a94:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005a96:	4b17      	ldr	r3, [pc, #92]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005a98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005a9e:	4b15      	ldr	r3, [pc, #84]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005aa0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005aa4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005aa6:	4813      	ldr	r0, [pc, #76]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005aa8:	f002 fca0 	bl	80083ec <HAL_DMA_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005ab2:	f7ff fdcf 	bl	8005654 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005aba:	63da      	str	r2, [r3, #60]	; 0x3c
 8005abc:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <HAL_SD_MspInit+0x1dc>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	2031      	movs	r0, #49	; 0x31
 8005ac8:	f002 fc59 	bl	800837e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005acc:	2031      	movs	r0, #49	; 0x31
 8005ace:	f002 fc72 	bl	80083b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005ad2:	bf00      	nop
 8005ad4:	3728      	adds	r7, #40	; 0x28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40012c00 	.word	0x40012c00
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	40020800 	.word	0x40020800
 8005ae8:	40020c00 	.word	0x40020c00
 8005aec:	2003594c 	.word	0x2003594c
 8005af0:	40026458 	.word	0x40026458
 8005af4:	20035c80 	.word	0x20035c80
 8005af8:	400264a0 	.word	0x400264a0

08005afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b04:	f107 0314 	add.w	r3, r7, #20
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <HAL_SPI_MspInit+0x84>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d12c      	bne.n	8005b78 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	4b18      	ldr	r3, [pc, #96]	; (8005b84 <HAL_SPI_MspInit+0x88>)
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <HAL_SPI_MspInit+0x88>)
 8005b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <HAL_SPI_MspInit+0x88>)
 8005b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <HAL_SPI_MspInit+0x88>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	4a10      	ldr	r2, [pc, #64]	; (8005b84 <HAL_SPI_MspInit+0x88>)
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	6313      	str	r3, [r2, #48]	; 0x30
 8005b4a:	4b0e      	ldr	r3, [pc, #56]	; (8005b84 <HAL_SPI_MspInit+0x88>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005b56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b64:	2303      	movs	r3, #3
 8005b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005b68:	2305      	movs	r3, #5
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b6c:	f107 0314 	add.w	r3, r7, #20
 8005b70:	4619      	mov	r1, r3
 8005b72:	4805      	ldr	r0, [pc, #20]	; (8005b88 <HAL_SPI_MspInit+0x8c>)
 8005b74:	f002 ffd6 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005b78:	bf00      	nop
 8005b7a:	3728      	adds	r7, #40	; 0x28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	40003800 	.word	0x40003800
 8005b84:	40023800 	.word	0x40023800
 8005b88:	40020400 	.word	0x40020400

08005b8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08c      	sub	sp, #48	; 0x30
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b94:	f107 031c 	add.w	r3, r7, #28
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	605a      	str	r2, [r3, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a2d      	ldr	r2, [pc, #180]	; (8005c60 <HAL_TIM_PWM_MspInit+0xd4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d12d      	bne.n	8005c0a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005bae:	2300      	movs	r3, #0
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	4b2c      	ldr	r3, [pc, #176]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	4a2b      	ldr	r2, [pc, #172]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005bb8:	f043 0301 	orr.w	r3, r3, #1
 8005bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8005bbe:	4b29      	ldr	r3, [pc, #164]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	61bb      	str	r3, [r7, #24]
 8005bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	4a24      	ldr	r2, [pc, #144]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005bd4:	f043 0310 	orr.w	r3, r3, #16
 8005bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005be6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bec:	2302      	movs	r3, #2
 8005bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005bfc:	f107 031c 	add.w	r3, r7, #28
 8005c00:	4619      	mov	r1, r3
 8005c02:	4819      	ldr	r0, [pc, #100]	; (8005c68 <HAL_TIM_PWM_MspInit+0xdc>)
 8005c04:	f002 ff8e 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005c08:	e026      	b.n	8005c58 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	; (8005c6c <HAL_TIM_PWM_MspInit+0xe0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d10e      	bne.n	8005c32 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1c:	4a11      	ldr	r2, [pc, #68]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c1e:	f043 0302 	orr.w	r3, r3, #2
 8005c22:	6413      	str	r3, [r2, #64]	; 0x40
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	693b      	ldr	r3, [r7, #16]
}
 8005c30:	e012      	b.n	8005c58 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a0e      	ldr	r2, [pc, #56]	; (8005c70 <HAL_TIM_PWM_MspInit+0xe4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10d      	bne.n	8005c58 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c44:	4a07      	ldr	r2, [pc, #28]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c46:	f043 0304 	orr.w	r3, r3, #4
 8005c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_TIM_PWM_MspInit+0xd8>)
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c50:	f003 0304 	and.w	r3, r3, #4
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	3730      	adds	r7, #48	; 0x30
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800

08005c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a3e      	ldr	r2, [pc, #248]	; (8005d7c <HAL_TIM_Base_MspInit+0x108>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d116      	bne.n	8005cb4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
 8005c8a:	4b3d      	ldr	r3, [pc, #244]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	4a3c      	ldr	r2, [pc, #240]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005c90:	f043 0310 	orr.w	r3, r3, #16
 8005c94:	6413      	str	r3, [r2, #64]	; 0x40
 8005c96:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	61fb      	str	r3, [r7, #28]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	2036      	movs	r0, #54	; 0x36
 8005ca8:	f002 fb69 	bl	800837e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005cac:	2036      	movs	r0, #54	; 0x36
 8005cae:	f002 fb82 	bl	80083b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005cb2:	e05e      	b.n	8005d72 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a32      	ldr	r2, [pc, #200]	; (8005d84 <HAL_TIM_Base_MspInit+0x110>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d116      	bne.n	8005cec <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	4a2e      	ldr	r2, [pc, #184]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005cc8:	f043 0320 	orr.w	r3, r3, #32
 8005ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cce:	4b2c      	ldr	r3, [pc, #176]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	61bb      	str	r3, [r7, #24]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005cda:	2200      	movs	r2, #0
 8005cdc:	2100      	movs	r1, #0
 8005cde:	2037      	movs	r0, #55	; 0x37
 8005ce0:	f002 fb4d 	bl	800837e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005ce4:	2037      	movs	r0, #55	; 0x37
 8005ce6:	f002 fb66 	bl	80083b6 <HAL_NVIC_EnableIRQ>
}
 8005cea:	e042      	b.n	8005d72 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a25      	ldr	r2, [pc, #148]	; (8005d88 <HAL_TIM_Base_MspInit+0x114>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d10e      	bne.n	8005d14 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	4a20      	ldr	r2, [pc, #128]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d04:	6453      	str	r3, [r2, #68]	; 0x44
 8005d06:	4b1e      	ldr	r3, [pc, #120]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	697b      	ldr	r3, [r7, #20]
}
 8005d12:	e02e      	b.n	8005d72 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1c      	ldr	r2, [pc, #112]	; (8005d8c <HAL_TIM_Base_MspInit+0x118>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d10e      	bne.n	8005d3c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d2e:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d36:	613b      	str	r3, [r7, #16]
 8005d38:	693b      	ldr	r3, [r7, #16]
}
 8005d3a:	e01a      	b.n	8005d72 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a13      	ldr	r2, [pc, #76]	; (8005d90 <HAL_TIM_Base_MspInit+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d115      	bne.n	8005d72 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	6413      	str	r3, [r2, #64]	; 0x40
 8005d56:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_TIM_Base_MspInit+0x10c>)
 8005d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005d62:	2200      	movs	r2, #0
 8005d64:	2100      	movs	r1, #0
 8005d66:	202c      	movs	r0, #44	; 0x2c
 8005d68:	f002 fb09 	bl	800837e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005d6c:	202c      	movs	r0, #44	; 0x2c
 8005d6e:	f002 fb22 	bl	80083b6 <HAL_NVIC_EnableIRQ>
}
 8005d72:	bf00      	nop
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40001000 	.word	0x40001000
 8005d80:	40023800 	.word	0x40023800
 8005d84:	40001400 	.word	0x40001400
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40001c00 	.word	0x40001c00

08005d94 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9c:	f107 0314 	add.w	r3, r7, #20
 8005da0:	2200      	movs	r2, #0
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	609a      	str	r2, [r3, #8]
 8005da8:	60da      	str	r2, [r3, #12]
 8005daa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <HAL_TIM_Encoder_MspInit+0x94>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d133      	bne.n	8005e1e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	4b1c      	ldr	r3, [pc, #112]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x98>)
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x98>)
 8005dc0:	f043 0302 	orr.w	r3, r3, #2
 8005dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8005dc6:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x98>)
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	613b      	str	r3, [r7, #16]
 8005dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x98>)
 8005dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dda:	4a14      	ldr	r2, [pc, #80]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x98>)
 8005ddc:	f043 0304 	orr.w	r3, r3, #4
 8005de0:	6313      	str	r3, [r2, #48]	; 0x30
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_TIM_Encoder_MspInit+0x98>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dee:	23c0      	movs	r3, #192	; 0xc0
 8005df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df2:	2302      	movs	r3, #2
 8005df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e02:	f107 0314 	add.w	r3, r7, #20
 8005e06:	4619      	mov	r1, r3
 8005e08:	4809      	ldr	r0, [pc, #36]	; (8005e30 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005e0a:	f002 fe8b 	bl	8008b24 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005e0e:	2200      	movs	r2, #0
 8005e10:	2100      	movs	r1, #0
 8005e12:	202c      	movs	r0, #44	; 0x2c
 8005e14:	f002 fab3 	bl	800837e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005e18:	202c      	movs	r0, #44	; 0x2c
 8005e1a:	f002 facc 	bl	80083b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005e1e:	bf00      	nop
 8005e20:	3728      	adds	r7, #40	; 0x28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40010400 	.word	0x40010400
 8005e2c:	40023800 	.word	0x40023800
 8005e30:	40020800 	.word	0x40020800

08005e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08c      	sub	sp, #48	; 0x30
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e3c:	f107 031c 	add.w	r3, r7, #28
 8005e40:	2200      	movs	r2, #0
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	605a      	str	r2, [r3, #4]
 8005e46:	609a      	str	r2, [r3, #8]
 8005e48:	60da      	str	r2, [r3, #12]
 8005e4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a5c      	ldr	r2, [pc, #368]	; (8005fc4 <HAL_TIM_MspPostInit+0x190>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d11f      	bne.n	8005e96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e56:	2300      	movs	r3, #0
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	4b5b      	ldr	r3, [pc, #364]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	4a5a      	ldr	r2, [pc, #360]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005e60:	f043 0310 	orr.w	r3, r3, #16
 8005e64:	6313      	str	r3, [r2, #48]	; 0x30
 8005e66:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f003 0310 	and.w	r3, r3, #16
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e80:	2300      	movs	r3, #0
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e84:	2301      	movs	r3, #1
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e88:	f107 031c 	add.w	r3, r7, #28
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	484f      	ldr	r0, [pc, #316]	; (8005fcc <HAL_TIM_MspPostInit+0x198>)
 8005e90:	f002 fe48 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005e94:	e091      	b.n	8005fba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a4d      	ldr	r2, [pc, #308]	; (8005fd0 <HAL_TIM_MspPostInit+0x19c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d11e      	bne.n	8005ede <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	4b48      	ldr	r3, [pc, #288]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	4a47      	ldr	r2, [pc, #284]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	6313      	str	r3, [r2, #48]	; 0x30
 8005eb0:	4b45      	ldr	r3, [pc, #276]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ebc:	2330      	movs	r3, #48	; 0x30
 8005ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed0:	f107 031c 	add.w	r3, r7, #28
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	483f      	ldr	r0, [pc, #252]	; (8005fd4 <HAL_TIM_MspPostInit+0x1a0>)
 8005ed8:	f002 fe24 	bl	8008b24 <HAL_GPIO_Init>
}
 8005edc:	e06d      	b.n	8005fba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3d      	ldr	r2, [pc, #244]	; (8005fd8 <HAL_TIM_MspPostInit+0x1a4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d11f      	bne.n	8005f28 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	4b36      	ldr	r3, [pc, #216]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	4a35      	ldr	r2, [pc, #212]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005ef2:	f043 0308 	orr.w	r3, r3, #8
 8005ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef8:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005f04:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f12:	2300      	movs	r3, #0
 8005f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005f16:	2302      	movs	r3, #2
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f1a:	f107 031c 	add.w	r3, r7, #28
 8005f1e:	4619      	mov	r1, r3
 8005f20:	482e      	ldr	r0, [pc, #184]	; (8005fdc <HAL_TIM_MspPostInit+0x1a8>)
 8005f22:	f002 fdff 	bl	8008b24 <HAL_GPIO_Init>
}
 8005f26:	e048      	b.n	8005fba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a2c      	ldr	r2, [pc, #176]	; (8005fe0 <HAL_TIM_MspPostInit+0x1ac>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d11f      	bne.n	8005f72 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005f3c:	f043 0302 	orr.w	r3, r3, #2
 8005f40:	6313      	str	r3, [r2, #48]	; 0x30
 8005f42:	4b21      	ldr	r3, [pc, #132]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f54:	2302      	movs	r3, #2
 8005f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005f60:	2303      	movs	r3, #3
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f64:	f107 031c 	add.w	r3, r7, #28
 8005f68:	4619      	mov	r1, r3
 8005f6a:	481a      	ldr	r0, [pc, #104]	; (8005fd4 <HAL_TIM_MspPostInit+0x1a0>)
 8005f6c:	f002 fdda 	bl	8008b24 <HAL_GPIO_Init>
}
 8005f70:	e023      	b.n	8005fba <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_TIM_MspPostInit+0x1b0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d11e      	bne.n	8005fba <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005f86:	f043 0302 	orr.w	r3, r3, #2
 8005f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8c:	4b0e      	ldr	r3, [pc, #56]	; (8005fc8 <HAL_TIM_MspPostInit+0x194>)
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	60bb      	str	r3, [r7, #8]
 8005f96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005faa:	2303      	movs	r3, #3
 8005fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fae:	f107 031c 	add.w	r3, r7, #28
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4807      	ldr	r0, [pc, #28]	; (8005fd4 <HAL_TIM_MspPostInit+0x1a0>)
 8005fb6:	f002 fdb5 	bl	8008b24 <HAL_GPIO_Init>
}
 8005fba:	bf00      	nop
 8005fbc:	3730      	adds	r7, #48	; 0x30
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40010000 	.word	0x40010000
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	40021000 	.word	0x40021000
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40020400 	.word	0x40020400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40020c00 	.word	0x40020c00
 8005fe0:	40014400 	.word	0x40014400
 8005fe4:	40014800 	.word	0x40014800

08005fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff0:	f107 0314 	add.w	r3, r7, #20
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	609a      	str	r2, [r3, #8]
 8005ffc:	60da      	str	r2, [r3, #12]
 8005ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a19      	ldr	r2, [pc, #100]	; (800606c <HAL_UART_MspInit+0x84>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d12b      	bne.n	8006062 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	4b18      	ldr	r3, [pc, #96]	; (8006070 <HAL_UART_MspInit+0x88>)
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	4a17      	ldr	r2, [pc, #92]	; (8006070 <HAL_UART_MspInit+0x88>)
 8006014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006018:	6413      	str	r3, [r2, #64]	; 0x40
 800601a:	4b15      	ldr	r3, [pc, #84]	; (8006070 <HAL_UART_MspInit+0x88>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006026:	2300      	movs	r3, #0
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_UART_MspInit+0x88>)
 800602c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602e:	4a10      	ldr	r2, [pc, #64]	; (8006070 <HAL_UART_MspInit+0x88>)
 8006030:	f043 0308 	orr.w	r3, r3, #8
 8006034:	6313      	str	r3, [r2, #48]	; 0x30
 8006036:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <HAL_UART_MspInit+0x88>)
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006042:	2360      	movs	r3, #96	; 0x60
 8006044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006046:	2302      	movs	r3, #2
 8006048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604a:	2300      	movs	r3, #0
 800604c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800604e:	2303      	movs	r3, #3
 8006050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006052:	2307      	movs	r3, #7
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	4619      	mov	r1, r3
 800605c:	4805      	ldr	r0, [pc, #20]	; (8006074 <HAL_UART_MspInit+0x8c>)
 800605e:	f002 fd61 	bl	8008b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006062:	bf00      	nop
 8006064:	3728      	adds	r7, #40	; 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40004400 	.word	0x40004400
 8006070:	40023800 	.word	0x40023800
 8006074:	40020c00 	.word	0x40020c00

08006078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006078:	b480      	push	{r7}
 800607a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800607c:	e7fe      	b.n	800607c <NMI_Handler+0x4>

0800607e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800607e:	b480      	push	{r7}
 8006080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006082:	e7fe      	b.n	8006082 <HardFault_Handler+0x4>

08006084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006088:	e7fe      	b.n	8006088 <MemManage_Handler+0x4>

0800608a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800608a:	b480      	push	{r7}
 800608c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800608e:	e7fe      	b.n	800608e <BusFault_Handler+0x4>

08006090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006090:	b480      	push	{r7}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006094:	e7fe      	b.n	8006094 <UsageFault_Handler+0x4>

08006096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006096:	b480      	push	{r7}
 8006098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800609a:	bf00      	nop
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060a8:	bf00      	nop
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060b2:	b480      	push	{r7}
 80060b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060b6:	bf00      	nop
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80060c4:	f001 fc3a 	bl	800793c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80060c8:	bf00      	nop
 80060ca:	bd80      	pop	{r7, pc}

080060cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80060d0:	4803      	ldr	r0, [pc, #12]	; (80060e0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80060d2:	f006 ff0a 	bl	800ceea <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80060d6:	4803      	ldr	r0, [pc, #12]	; (80060e4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80060d8:	f006 ff07 	bl	800ceea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80060dc:	bf00      	nop
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20035a04 	.word	0x20035a04
 80060e4:	20035c00 	.word	0x20035c00

080060e8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80060ec:	4802      	ldr	r0, [pc, #8]	; (80060f8 <SDIO_IRQHandler+0x10>)
 80060ee:	f004 ffa3 	bl	800b038 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20035d60 	.word	0x20035d60

080060fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006100:	4802      	ldr	r0, [pc, #8]	; (800610c <TIM6_DAC_IRQHandler+0x10>)
 8006102:	f006 fef2 	bl	800ceea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20035ce0 	.word	0x20035ce0

08006110 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006114:	4802      	ldr	r0, [pc, #8]	; (8006120 <TIM7_IRQHandler+0x10>)
 8006116:	f006 fee8 	bl	800ceea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20035e84 	.word	0x20035e84

08006124 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006128:	4802      	ldr	r0, [pc, #8]	; (8006134 <DMA2_Stream2_IRQHandler+0x10>)
 800612a:	f002 fa87 	bl	800863c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800612e:	bf00      	nop
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20035e24 	.word	0x20035e24

08006138 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800613c:	4802      	ldr	r0, [pc, #8]	; (8006148 <DMA2_Stream3_IRQHandler+0x10>)
 800613e:	f002 fa7d 	bl	800863c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2003594c 	.word	0x2003594c

0800614c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006150:	4802      	ldr	r0, [pc, #8]	; (800615c <DMA2_Stream6_IRQHandler+0x10>)
 8006152:	f002 fa73 	bl	800863c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20035c80 	.word	0x20035c80

08006160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006168:	4a14      	ldr	r2, [pc, #80]	; (80061bc <_sbrk+0x5c>)
 800616a:	4b15      	ldr	r3, [pc, #84]	; (80061c0 <_sbrk+0x60>)
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006174:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <_sbrk+0x64>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <_sbrk+0x64>)
 800617e:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <_sbrk+0x68>)
 8006180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <_sbrk+0x64>)
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4413      	add	r3, r2
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	429a      	cmp	r2, r3
 800618e:	d207      	bcs.n	80061a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006190:	f00d f940 	bl	8013414 <__errno>
 8006194:	4602      	mov	r2, r0
 8006196:	230c      	movs	r3, #12
 8006198:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800619a:	f04f 33ff 	mov.w	r3, #4294967295
 800619e:	e009      	b.n	80061b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <_sbrk+0x64>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <_sbrk+0x64>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <_sbrk+0x64>)
 80061b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3718      	adds	r7, #24
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	20050000 	.word	0x20050000
 80061c0:	00000800 	.word	0x00000800
 80061c4:	200002ac 	.word	0x200002ac
 80061c8:	20037fd8 	.word	0x20037fd8

080061cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061d0:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <SystemInit+0x28>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	4a07      	ldr	r2, [pc, #28]	; (80061f4 <SystemInit+0x28>)
 80061d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <SystemInit+0x28>)
 80061e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061e6:	609a      	str	r2, [r3, #8]
#endif
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	e000ed00 	.word	0xe000ed00

080061f8 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	af00      	add	r7, sp, #0
	lcd_clear();
 80061fc:	f7fa ff50 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006200:	2100      	movs	r1, #0
 8006202:	2000      	movs	r0, #0
 8006204:	f7fa ff5c 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8006208:	4814      	ldr	r0, [pc, #80]	; (800625c <batteryLowMode+0x64>)
 800620a:	f7fa ff83 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800620e:	2101      	movs	r1, #1
 8006210:	2000      	movs	r0, #0
 8006212:	f7fa ff55 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8006216:	4812      	ldr	r0, [pc, #72]	; (8006260 <batteryLowMode+0x68>)
 8006218:	f7fa ff7c 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 800621c:	2152      	movs	r1, #82	; 0x52
 800621e:	4811      	ldr	r0, [pc, #68]	; (8006264 <batteryLowMode+0x6c>)
 8006220:	f7fb fe44 	bl	8001eac <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006224:	2064      	movs	r0, #100	; 0x64
 8006226:	f001 fba9 	bl	800797c <HAL_Delay>
		led.fullColor('Y');
 800622a:	2159      	movs	r1, #89	; 0x59
 800622c:	480d      	ldr	r0, [pc, #52]	; (8006264 <batteryLowMode+0x6c>)
 800622e:	f7fb fe3d 	bl	8001eac <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006232:	2064      	movs	r0, #100	; 0x64
 8006234:	f001 fba2 	bl	800797c <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8006238:	480b      	ldr	r0, [pc, #44]	; (8006268 <batteryLowMode+0x70>)
 800623a:	f7fb fdd3 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 800623e:	4603      	mov	r3, r0
 8006240:	2b02      	cmp	r3, #2
 8006242:	bf0c      	ite	eq
 8006244:	2301      	moveq	r3, #1
 8006246:	2300      	movne	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0e6      	beq.n	800621c <batteryLowMode+0x24>
			HAL_Delay(500);
 800624e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006252:	f001 fb93 	bl	800797c <HAL_Delay>
			break;
 8006256:	bf00      	nop
		}
	}
}
 8006258:	bf00      	nop
 800625a:	bd80      	pop	{r7, pc}
 800625c:	08017ba8 	.word	0x08017ba8
 8006260:	08017bb0 	.word	0x08017bb0
 8006264:	200005bc 	.word	0x200005bc
 8006268:	200005b0 	.word	0x200005b0

0800626c <cppInit>:

void cppInit(void)
{
 800626c:	b598      	push	{r3, r4, r7, lr}
 800626e:	af00      	add	r7, sp, #0
	lcd_init();
 8006270:	f7fa fed2 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006274:	483f      	ldr	r0, [pc, #252]	; (8006374 <cppInit+0x108>)
 8006276:	f7fd fd9d 	bl	8003db4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800627a:	2064      	movs	r0, #100	; 0x64
 800627c:	f001 fb7e 	bl	800797c <HAL_Delay>
	power_sensor.updateValues();
 8006280:	483c      	ldr	r0, [pc, #240]	; (8006374 <cppInit+0x108>)
 8006282:	f7fd fda5 	bl	8003dd0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8006286:	f7fa ff0b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800628a:	2100      	movs	r1, #0
 800628c:	2000      	movs	r0, #0
 800628e:	f7fa ff17 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006292:	4839      	ldr	r0, [pc, #228]	; (8006378 <cppInit+0x10c>)
 8006294:	f7fa ff3e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006298:	2101      	movs	r1, #1
 800629a:	2000      	movs	r0, #0
 800629c:	f7fa ff10 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80062a0:	4834      	ldr	r0, [pc, #208]	; (8006374 <cppInit+0x108>)
 80062a2:	f7fd fdbf 	bl	8003e24 <_ZN11PowerSensor17getButteryVoltageEv>
 80062a6:	ee10 3a10 	vmov	r3, s0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa f964 	bl	8000578 <__aeabi_f2d>
 80062b0:	4603      	mov	r3, r0
 80062b2:	460c      	mov	r4, r1
 80062b4:	461a      	mov	r2, r3
 80062b6:	4623      	mov	r3, r4
 80062b8:	4830      	ldr	r0, [pc, #192]	; (800637c <cppInit+0x110>)
 80062ba:	f7fa ff2b 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80062be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062c2:	f001 fb5b 	bl	800797c <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80062c6:	482b      	ldr	r0, [pc, #172]	; (8006374 <cppInit+0x108>)
 80062c8:	f7fd fdbe 	bl	8003e48 <_ZN11PowerSensor12butteryCheckEv>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <cppInit+0x6a>
 80062d2:	f7ff ff91 	bl	80061f8 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80062d6:	482a      	ldr	r0, [pc, #168]	; (8006380 <cppInit+0x114>)
 80062d8:	f7fc ffc0 	bl	800325c <_ZN6Logger10sdCardInitEv>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <cppInit+0x86>
		led.fullColor('G');
 80062e2:	2147      	movs	r1, #71	; 0x47
 80062e4:	4827      	ldr	r0, [pc, #156]	; (8006384 <cppInit+0x118>)
 80062e6:	f7fb fde1 	bl	8001eac <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80062ea:	2064      	movs	r0, #100	; 0x64
 80062ec:	f001 fb46 	bl	800797c <HAL_Delay>
 80062f0:	e006      	b.n	8006300 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80062f2:	2152      	movs	r1, #82	; 0x52
 80062f4:	4823      	ldr	r0, [pc, #140]	; (8006384 <cppInit+0x118>)
 80062f6:	f7fb fdd9 	bl	8001eac <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80062fa:	2064      	movs	r0, #100	; 0x64
 80062fc:	f001 fb3e 	bl	800797c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006300:	4821      	ldr	r0, [pc, #132]	; (8006388 <cppInit+0x11c>)
 8006302:	f7fb ff2f 	bl	8002164 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006306:	4821      	ldr	r0, [pc, #132]	; (800638c <cppInit+0x120>)
 8006308:	f7fd f9ec 	bl	80036e4 <_ZN5Motor4initEv>
	encoder.init();
 800630c:	4820      	ldr	r0, [pc, #128]	; (8006390 <cppInit+0x124>)
 800630e:	f7fa ff4d 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8006312:	4820      	ldr	r0, [pc, #128]	; (8006394 <cppInit+0x128>)
 8006314:	f7fb fb8a 	bl	8001a2c <_ZN3IMU4initEv>
	line_trace.init();
 8006318:	481f      	ldr	r0, [pc, #124]	; (8006398 <cppInit+0x12c>)
 800631a:	f7fc fcf1 	bl	8002d00 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 800631e:	481a      	ldr	r0, [pc, #104]	; (8006388 <cppInit+0x11c>)
 8006320:	f7fc f860 	bl	80023e4 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8006324:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006328:	f001 fb28 	bl	800797c <HAL_Delay>

	led.fullColor('M');
 800632c:	214d      	movs	r1, #77	; 0x4d
 800632e:	4815      	ldr	r0, [pc, #84]	; (8006384 <cppInit+0x118>)
 8006330:	f7fb fdbc 	bl	8001eac <_ZN3LED9fullColorEc>
	imu.calibration();
 8006334:	4817      	ldr	r0, [pc, #92]	; (8006394 <cppInit+0x128>)
 8006336:	f7fb fc41 	bl	8001bbc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 800633a:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800639c <cppInit+0x130>
 800633e:	eddf 0a18 	vldr	s1, [pc, #96]	; 80063a0 <cppInit+0x134>
 8006342:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80063a4 <cppInit+0x138>
 8006346:	4818      	ldr	r0, [pc, #96]	; (80063a8 <cppInit+0x13c>)
 8006348:	f7fe f99a 	bl	8004680 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 800634c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80063ac <cppInit+0x140>
 8006350:	eddf 0a17 	vldr	s1, [pc, #92]	; 80063b0 <cppInit+0x144>
 8006354:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80063b4 <cppInit+0x148>
 8006358:	4813      	ldr	r0, [pc, #76]	; (80063a8 <cppInit+0x13c>)
 800635a:	f7fe f9aa 	bl	80046b2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 800635e:	480c      	ldr	r0, [pc, #48]	; (8006390 <cppInit+0x124>)
 8006360:	f7fb f87c 	bl	800145c <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8006364:	4814      	ldr	r0, [pc, #80]	; (80063b8 <cppInit+0x14c>)
 8006366:	f7fd fbf3 	bl	8003b50 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 800636a:	4814      	ldr	r0, [pc, #80]	; (80063bc <cppInit+0x150>)
 800636c:	f7fd fc8a 	bl	8003c84 <_ZN13PathFollowing4initEv>

}
 8006370:	bf00      	nop
 8006372:	bd98      	pop	{r3, r4, r7, pc}
 8006374:	200005c0 	.word	0x200005c0
 8006378:	08017bb4 	.word	0x08017bb4
 800637c:	08017bbc 	.word	0x08017bbc
 8006380:	200005e0 	.word	0x200005e0
 8006384:	200005bc 	.word	0x200005bc
 8006388:	200002b0 	.word	0x200002b0
 800638c:	200005b8 	.word	0x200005b8
 8006390:	20015da8 	.word	0x20015da8
 8006394:	200005cc 	.word	0x200005cc
 8006398:	20015e48 	.word	0x20015e48
 800639c:	3cceca68 	.word	0x3cceca68
 80063a0:	4180f06f 	.word	0x4180f06f
 80063a4:	3fea2d0e 	.word	0x3fea2d0e
 80063a8:	20015dc8 	.word	0x20015dc8
 80063ac:	3ab7dacd 	.word	0x3ab7dacd
 80063b0:	3f5e3fbc 	.word	0x3f5e3fbc
 80063b4:	3d8eefa2 	.word	0x3d8eefa2
 80063b8:	20015e08 	.word	0x20015e08
 80063bc:	2001be98 	.word	0x2001be98

080063c0 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80063c4:	4819      	ldr	r0, [pc, #100]	; (800642c <cppFlip1ms+0x6c>)
 80063c6:	f7fb ff2b 	bl	8002220 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80063ca:	4819      	ldr	r0, [pc, #100]	; (8006430 <cppFlip1ms+0x70>)
 80063cc:	f7fb fb54 	bl	8001a78 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80063d0:	4818      	ldr	r0, [pc, #96]	; (8006434 <cppFlip1ms+0x74>)
 80063d2:	f7fa ff0d 	bl	80011f0 <_ZN7Encoder6updateEv>

	line_trace.flip();
 80063d6:	4818      	ldr	r0, [pc, #96]	; (8006438 <cppFlip1ms+0x78>)
 80063d8:	f7fc fd2a 	bl	8002e30 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80063dc:	4817      	ldr	r0, [pc, #92]	; (800643c <cppFlip1ms+0x7c>)
 80063de:	f7fe f981 	bl	80046e4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80063e2:	4817      	ldr	r0, [pc, #92]	; (8006440 <cppFlip1ms+0x80>)
 80063e4:	f7fd fb98 	bl	8003b18 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80063e8:	4816      	ldr	r0, [pc, #88]	; (8006444 <cppFlip1ms+0x84>)
 80063ea:	f7fd fdc5 	bl	8003f78 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80063ee:	4816      	ldr	r0, [pc, #88]	; (8006448 <cppFlip1ms+0x88>)
 80063f0:	f7fd f98a 	bl	8003708 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80063f4:	4b15      	ldr	r3, [pc, #84]	; (800644c <cppFlip1ms+0x8c>)
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	3301      	adds	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	4b13      	ldr	r3, [pc, #76]	; (800644c <cppFlip1ms+0x8c>)
 80063fe:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006400:	4b12      	ldr	r3, [pc, #72]	; (800644c <cppFlip1ms+0x8c>)
 8006402:	881b      	ldrh	r3, [r3, #0]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d90c      	bls.n	8006422 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8006408:	4809      	ldr	r0, [pc, #36]	; (8006430 <cppFlip1ms+0x70>)
 800640a:	f7fb fb8d 	bl	8001b28 <_ZN3IMU8getOmegaEv>
 800640e:	eef0 7a40 	vmov.f32	s15, s0
 8006412:	eeb0 0a67 	vmov.f32	s0, s15
 8006416:	480e      	ldr	r0, [pc, #56]	; (8006450 <cppFlip1ms+0x90>)
 8006418:	f7fd ff04 	bl	8004224 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800641c:	4b0b      	ldr	r3, [pc, #44]	; (800644c <cppFlip1ms+0x8c>)
 800641e:	2200      	movs	r2, #0
 8006420:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8006422:	4804      	ldr	r0, [pc, #16]	; (8006434 <cppFlip1ms+0x74>)
 8006424:	f7fa ffc6 	bl	80013b4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006428:	bf00      	nop
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200002b0 	.word	0x200002b0
 8006430:	200005cc 	.word	0x200005cc
 8006434:	20015da8 	.word	0x20015da8
 8006438:	20015e48 	.word	0x20015e48
 800643c:	20015dc8 	.word	0x20015dc8
 8006440:	20015e08 	.word	0x20015e08
 8006444:	200005a8 	.word	0x200005a8
 8006448:	200005b8 	.word	0x200005b8
 800644c:	200335c2 	.word	0x200335c2
 8006450:	2001bc8c 	.word	0x2001bc8c

08006454 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8006458:	4802      	ldr	r0, [pc, #8]	; (8006464 <cppFlip100ns+0x10>)
 800645a:	f7fb fe93 	bl	8002184 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	200002b0 	.word	0x200002b0

08006468 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <cppFlip10ms+0x30>)
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	3301      	adds	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	4b08      	ldr	r3, [pc, #32]	; (8006498 <cppFlip10ms+0x30>)
 8006476:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006478:	4b07      	ldr	r3, [pc, #28]	; (8006498 <cppFlip10ms+0x30>)
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	2b06      	cmp	r3, #6
 800647e:	d905      	bls.n	800648c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8006480:	4806      	ldr	r0, [pc, #24]	; (800649c <cppFlip10ms+0x34>)
 8006482:	f7fd ff0b 	bl	800429c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8006486:	4b04      	ldr	r3, [pc, #16]	; (8006498 <cppFlip10ms+0x30>)
 8006488:	2200      	movs	r2, #0
 800648a:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <cppFlip10ms+0x30>)
 800648e:	881a      	ldrh	r2, [r3, #0]
 8006490:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <cppFlip10ms+0x38>)
 8006492:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}
 8006498:	200335c4 	.word	0x200335c4
 800649c:	2001bc8c 	.word	0x2001bc8c
 80064a0:	200335c0 	.word	0x200335c0
 80064a4:	00000000 	.word	0x00000000

080064a8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 80064a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064ac:	b08b      	sub	sp, #44	; 0x2c
 80064ae:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 80064b0:	48bf      	ldr	r0, [pc, #764]	; (80067b0 <cppLoop+0x308>)
 80064b2:	f7fd fcfb 	bl	8003eac <_ZN12RotarySwitch8getValueEv>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b0f      	cmp	r3, #15
 80064ba:	f201 80fb 	bhi.w	80076b4 <cppLoop+0x120c>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <cppLoop+0x1c>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	08006505 	.word	0x08006505
 80064c8:	080069df 	.word	0x080069df
 80064cc:	08006a5b 	.word	0x08006a5b
 80064d0:	08006b29 	.word	0x08006b29
 80064d4:	08006bd9 	.word	0x08006bd9
 80064d8:	08006c67 	.word	0x08006c67
 80064dc:	08006d2d 	.word	0x08006d2d
 80064e0:	08006e41 	.word	0x08006e41
 80064e4:	08006ee1 	.word	0x08006ee1
 80064e8:	08007415 	.word	0x08007415
 80064ec:	080074b1 	.word	0x080074b1
 80064f0:	0800754b 	.word	0x0800754b
 80064f4:	080075b3 	.word	0x080075b3
 80064f8:	08007637 	.word	0x08007637
 80064fc:	08007661 	.word	0x08007661
 8006500:	0800768b 	.word	0x0800768b
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8006504:	2152      	movs	r1, #82	; 0x52
 8006506:	48ab      	ldr	r0, [pc, #684]	; (80067b4 <cppLoop+0x30c>)
 8006508:	f7fb fcd0 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 800650c:	f7fa fdc8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006510:	2100      	movs	r1, #0
 8006512:	2000      	movs	r0, #0
 8006514:	f7fa fdd4 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006518:	48a7      	ldr	r0, [pc, #668]	; (80067b8 <cppLoop+0x310>)
 800651a:	f7fc fc3e 	bl	8002d9a <_ZN9LineTrace5getKpEv>
 800651e:	eeb0 7a40 	vmov.f32	s14, s0
 8006522:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80067bc <cppLoop+0x314>
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	ee17 0a90 	vmov	r0, s15
 800652e:	f7fa f823 	bl	8000578 <__aeabi_f2d>
 8006532:	4603      	mov	r3, r0
 8006534:	460c      	mov	r4, r1
 8006536:	461a      	mov	r2, r3
 8006538:	4623      	mov	r3, r4
 800653a:	48a1      	ldr	r0, [pc, #644]	; (80067c0 <cppLoop+0x318>)
 800653c:	f7fa fdea 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006540:	2101      	movs	r1, #1
 8006542:	2000      	movs	r0, #0
 8006544:	f7fa fdbc 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8006548:	489b      	ldr	r0, [pc, #620]	; (80067b8 <cppLoop+0x310>)
 800654a:	f7fc fc35 	bl	8002db8 <_ZN9LineTrace5getKiEv>
 800654e:	eeb0 7a40 	vmov.f32	s14, s0
 8006552:	eddf 7a9c 	vldr	s15, [pc, #624]	; 80067c4 <cppLoop+0x31c>
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	ee17 0a90 	vmov	r0, s15
 800655e:	f7fa f80b 	bl	8000578 <__aeabi_f2d>
 8006562:	4605      	mov	r5, r0
 8006564:	460e      	mov	r6, r1
 8006566:	4894      	ldr	r0, [pc, #592]	; (80067b8 <cppLoop+0x310>)
 8006568:	f7fc fc35 	bl	8002dd6 <_ZN9LineTrace5getKdEv>
 800656c:	eeb0 7a40 	vmov.f32	s14, s0
 8006570:	eddf 7a95 	vldr	s15, [pc, #596]	; 80067c8 <cppLoop+0x320>
 8006574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006578:	ee17 0a90 	vmov	r0, s15
 800657c:	f7f9 fffc 	bl	8000578 <__aeabi_f2d>
 8006580:	4603      	mov	r3, r0
 8006582:	460c      	mov	r4, r1
 8006584:	e9cd 3400 	strd	r3, r4, [sp]
 8006588:	462a      	mov	r2, r5
 800658a:	4633      	mov	r3, r6
 800658c:	488f      	ldr	r0, [pc, #572]	; (80067cc <cppLoop+0x324>)
 800658e:	f7fa fdc1 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8006592:	4b8f      	ldr	r3, [pc, #572]	; (80067d0 <cppLoop+0x328>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f3bf 8f5b 	dmb	ish
 800659a:	b2db      	uxtb	r3, r3
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bf0c      	ite	eq
 80065a4:	2301      	moveq	r3, #1
 80065a6:	2300      	movne	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d015      	beq.n	80065da <cppLoop+0x132>
 80065ae:	4888      	ldr	r0, [pc, #544]	; (80067d0 <cppLoop+0x328>)
 80065b0:	f00b fec9 	bl	8012346 <__cxa_guard_acquire>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <cppLoop+0x132>
 80065c4:	487c      	ldr	r0, [pc, #496]	; (80067b8 <cppLoop+0x310>)
 80065c6:	f7fc fbe8 	bl	8002d9a <_ZN9LineTrace5getKpEv>
 80065ca:	eef0 7a40 	vmov.f32	s15, s0
 80065ce:	4b81      	ldr	r3, [pc, #516]	; (80067d4 <cppLoop+0x32c>)
 80065d0:	edc3 7a00 	vstr	s15, [r3]
 80065d4:	487e      	ldr	r0, [pc, #504]	; (80067d0 <cppLoop+0x328>)
 80065d6:	f00b fec2 	bl	801235e <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 80065da:	4b7f      	ldr	r3, [pc, #508]	; (80067d8 <cppLoop+0x330>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f3bf 8f5b 	dmb	ish
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	bf0c      	ite	eq
 80065ec:	2301      	moveq	r3, #1
 80065ee:	2300      	movne	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d015      	beq.n	8006622 <cppLoop+0x17a>
 80065f6:	4878      	ldr	r0, [pc, #480]	; (80067d8 <cppLoop+0x330>)
 80065f8:	f00b fea5 	bl	8012346 <__cxa_guard_acquire>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	bf14      	ite	ne
 8006602:	2301      	movne	r3, #1
 8006604:	2300      	moveq	r3, #0
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <cppLoop+0x17a>
 800660c:	486a      	ldr	r0, [pc, #424]	; (80067b8 <cppLoop+0x310>)
 800660e:	f7fc fbd3 	bl	8002db8 <_ZN9LineTrace5getKiEv>
 8006612:	eef0 7a40 	vmov.f32	s15, s0
 8006616:	4b71      	ldr	r3, [pc, #452]	; (80067dc <cppLoop+0x334>)
 8006618:	edc3 7a00 	vstr	s15, [r3]
 800661c:	486e      	ldr	r0, [pc, #440]	; (80067d8 <cppLoop+0x330>)
 800661e:	f00b fe9e 	bl	801235e <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8006622:	4b6f      	ldr	r3, [pc, #444]	; (80067e0 <cppLoop+0x338>)
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f3bf 8f5b 	dmb	ish
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf0c      	ite	eq
 8006634:	2301      	moveq	r3, #1
 8006636:	2300      	movne	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d015      	beq.n	800666a <cppLoop+0x1c2>
 800663e:	4868      	ldr	r0, [pc, #416]	; (80067e0 <cppLoop+0x338>)
 8006640:	f00b fe81 	bl	8012346 <__cxa_guard_acquire>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	bf14      	ite	ne
 800664a:	2301      	movne	r3, #1
 800664c:	2300      	moveq	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <cppLoop+0x1c2>
 8006654:	4858      	ldr	r0, [pc, #352]	; (80067b8 <cppLoop+0x310>)
 8006656:	f7fc fbbe 	bl	8002dd6 <_ZN9LineTrace5getKdEv>
 800665a:	eef0 7a40 	vmov.f32	s15, s0
 800665e:	4b61      	ldr	r3, [pc, #388]	; (80067e4 <cppLoop+0x33c>)
 8006660:	edc3 7a00 	vstr	s15, [r3]
 8006664:	485e      	ldr	r0, [pc, #376]	; (80067e0 <cppLoop+0x338>)
 8006666:	f00b fe7a 	bl	801235e <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 800666a:	485f      	ldr	r0, [pc, #380]	; (80067e8 <cppLoop+0x340>)
 800666c:	f7fb fbba 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006670:	4603      	mov	r3, r0
 8006672:	2b08      	cmp	r3, #8
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d022      	beq.n	80066c6 <cppLoop+0x21e>
			led.LR(-1, 1);
 8006680:	2201      	movs	r2, #1
 8006682:	f04f 31ff 	mov.w	r1, #4294967295
 8006686:	484b      	ldr	r0, [pc, #300]	; (80067b4 <cppLoop+0x30c>)
 8006688:	f7fb fccc 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800668c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006690:	f001 f974 	bl	800797c <HAL_Delay>

			selector++;
 8006694:	4b55      	ldr	r3, [pc, #340]	; (80067ec <cppLoop+0x344>)
 8006696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800669a:	b29b      	uxth	r3, r3
 800669c:	3301      	adds	r3, #1
 800669e:	b29b      	uxth	r3, r3
 80066a0:	b21a      	sxth	r2, r3
 80066a2:	4b52      	ldr	r3, [pc, #328]	; (80067ec <cppLoop+0x344>)
 80066a4:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80066a6:	4b51      	ldr	r3, [pc, #324]	; (80067ec <cppLoop+0x344>)
 80066a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	dd02      	ble.n	80066b6 <cppLoop+0x20e>
 80066b0:	4b4e      	ldr	r3, [pc, #312]	; (80067ec <cppLoop+0x344>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80066b6:	2200      	movs	r2, #0
 80066b8:	f04f 31ff 	mov.w	r1, #4294967295
 80066bc:	483d      	ldr	r0, [pc, #244]	; (80067b4 <cppLoop+0x30c>)
 80066be:	f7fb fcb1 	bl	8002024 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80066c2:	f000 bff9 	b.w	80076b8 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_R){
 80066c6:	4848      	ldr	r0, [pc, #288]	; (80067e8 <cppLoop+0x340>)
 80066c8:	f7fb fb8c 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 8089 	beq.w	80067f0 <cppLoop+0x348>
			led.LR(-1, 1);
 80066de:	2201      	movs	r2, #1
 80066e0:	f04f 31ff 	mov.w	r1, #4294967295
 80066e4:	4833      	ldr	r0, [pc, #204]	; (80067b4 <cppLoop+0x30c>)
 80066e6:	f7fb fc9d 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80066ea:	2064      	movs	r0, #100	; 0x64
 80066ec:	f001 f946 	bl	800797c <HAL_Delay>
			if(selector == 0){
 80066f0:	4b3e      	ldr	r3, [pc, #248]	; (80067ec <cppLoop+0x344>)
 80066f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d113      	bne.n	8006722 <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 80066fa:	4b36      	ldr	r3, [pc, #216]	; (80067d4 <cppLoop+0x32c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7f9 ff3a 	bl	8000578 <__aeabi_f2d>
 8006704:	a324      	add	r3, pc, #144	; (adr r3, 8006798 <cppLoop+0x2f0>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f7f9 fdd7 	bl	80002bc <__adddf3>
 800670e:	4603      	mov	r3, r0
 8006710:	460c      	mov	r4, r1
 8006712:	4618      	mov	r0, r3
 8006714:	4621      	mov	r1, r4
 8006716:	f7fa fa7f 	bl	8000c18 <__aeabi_d2f>
 800671a:	4602      	mov	r2, r0
 800671c:	4b2d      	ldr	r3, [pc, #180]	; (80067d4 <cppLoop+0x32c>)
 800671e:	601a      	str	r2, [r3, #0]
 8006720:	e02b      	b.n	800677a <cppLoop+0x2d2>
			else if(selector == 1){
 8006722:	4b32      	ldr	r3, [pc, #200]	; (80067ec <cppLoop+0x344>)
 8006724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d113      	bne.n	8006754 <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 800672c:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <cppLoop+0x334>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4618      	mov	r0, r3
 8006732:	f7f9 ff21 	bl	8000578 <__aeabi_f2d>
 8006736:	a31a      	add	r3, pc, #104	; (adr r3, 80067a0 <cppLoop+0x2f8>)
 8006738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673c:	f7f9 fdbe 	bl	80002bc <__adddf3>
 8006740:	4603      	mov	r3, r0
 8006742:	460c      	mov	r4, r1
 8006744:	4618      	mov	r0, r3
 8006746:	4621      	mov	r1, r4
 8006748:	f7fa fa66 	bl	8000c18 <__aeabi_d2f>
 800674c:	4602      	mov	r2, r0
 800674e:	4b23      	ldr	r3, [pc, #140]	; (80067dc <cppLoop+0x334>)
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	e012      	b.n	800677a <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 8006754:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <cppLoop+0x33c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f7f9 ff0d 	bl	8000578 <__aeabi_f2d>
 800675e:	a312      	add	r3, pc, #72	; (adr r3, 80067a8 <cppLoop+0x300>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f7f9 fdaa 	bl	80002bc <__adddf3>
 8006768:	4603      	mov	r3, r0
 800676a:	460c      	mov	r4, r1
 800676c:	4618      	mov	r0, r3
 800676e:	4621      	mov	r1, r4
 8006770:	f7fa fa52 	bl	8000c18 <__aeabi_d2f>
 8006774:	4602      	mov	r2, r0
 8006776:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <cppLoop+0x33c>)
 8006778:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800677a:	2152      	movs	r1, #82	; 0x52
 800677c:	480d      	ldr	r0, [pc, #52]	; (80067b4 <cppLoop+0x30c>)
 800677e:	f7fb fb95 	bl	8001eac <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006782:	2200      	movs	r2, #0
 8006784:	f04f 31ff 	mov.w	r1, #4294967295
 8006788:	480a      	ldr	r0, [pc, #40]	; (80067b4 <cppLoop+0x30c>)
 800678a:	f7fb fc4b 	bl	8002024 <_ZN3LED2LREaa>
		break;
 800678e:	f000 bf93 	b.w	80076b8 <cppLoop+0x1210>
 8006792:	bf00      	nop
 8006794:	f3af 8000 	nop.w
 8006798:	88e368f1 	.word	0x88e368f1
 800679c:	3ee4f8b5 	.word	0x3ee4f8b5
 80067a0:	eb1c432d 	.word	0xeb1c432d
 80067a4:	3f1a36e2 	.word	0x3f1a36e2
 80067a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80067ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80067b0:	200005b4 	.word	0x200005b4
 80067b4:	200005bc 	.word	0x200005bc
 80067b8:	20015e48 	.word	0x20015e48
 80067bc:	447a0000 	.word	0x447a0000
 80067c0:	08017bc0 	.word	0x08017bc0
 80067c4:	42c80000 	.word	0x42c80000
 80067c8:	461c4000 	.word	0x461c4000
 80067cc:	08017bcc 	.word	0x08017bcc
 80067d0:	200335cc 	.word	0x200335cc
 80067d4:	200335c8 	.word	0x200335c8
 80067d8:	200335d4 	.word	0x200335d4
 80067dc:	200335d0 	.word	0x200335d0
 80067e0:	200335dc 	.word	0x200335dc
 80067e4:	200335d8 	.word	0x200335d8
 80067e8:	200005b0 	.word	0x200005b0
 80067ec:	200335c6 	.word	0x200335c6
		else if(joy_stick.getValue() == JOY_L){
 80067f0:	48bf      	ldr	r0, [pc, #764]	; (8006af0 <cppLoop+0x648>)
 80067f2:	f7fb faf7 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	bf0c      	ite	eq
 80067fc:	2301      	moveq	r3, #1
 80067fe:	2300      	movne	r3, #0
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d059      	beq.n	80068ba <cppLoop+0x412>
			led.LR(-1, 1);
 8006806:	2201      	movs	r2, #1
 8006808:	f04f 31ff 	mov.w	r1, #4294967295
 800680c:	48b9      	ldr	r0, [pc, #740]	; (8006af4 <cppLoop+0x64c>)
 800680e:	f7fb fc09 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006812:	2064      	movs	r0, #100	; 0x64
 8006814:	f001 f8b2 	bl	800797c <HAL_Delay>
			if(selector == 0){
 8006818:	4bb7      	ldr	r3, [pc, #732]	; (8006af8 <cppLoop+0x650>)
 800681a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d113      	bne.n	800684a <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8006822:	4bb6      	ldr	r3, [pc, #728]	; (8006afc <cppLoop+0x654>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f7f9 fea6 	bl	8000578 <__aeabi_f2d>
 800682c:	a3aa      	add	r3, pc, #680	; (adr r3, 8006ad8 <cppLoop+0x630>)
 800682e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006832:	f7f9 fd41 	bl	80002b8 <__aeabi_dsub>
 8006836:	4603      	mov	r3, r0
 8006838:	460c      	mov	r4, r1
 800683a:	4618      	mov	r0, r3
 800683c:	4621      	mov	r1, r4
 800683e:	f7fa f9eb 	bl	8000c18 <__aeabi_d2f>
 8006842:	4602      	mov	r2, r0
 8006844:	4bad      	ldr	r3, [pc, #692]	; (8006afc <cppLoop+0x654>)
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	e02b      	b.n	80068a2 <cppLoop+0x3fa>
			else if(selector == 1){
 800684a:	4bab      	ldr	r3, [pc, #684]	; (8006af8 <cppLoop+0x650>)
 800684c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d113      	bne.n	800687c <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 8006854:	4baa      	ldr	r3, [pc, #680]	; (8006b00 <cppLoop+0x658>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fe8d 	bl	8000578 <__aeabi_f2d>
 800685e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ae0 <cppLoop+0x638>)
 8006860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006864:	f7f9 fd28 	bl	80002b8 <__aeabi_dsub>
 8006868:	4603      	mov	r3, r0
 800686a:	460c      	mov	r4, r1
 800686c:	4618      	mov	r0, r3
 800686e:	4621      	mov	r1, r4
 8006870:	f7fa f9d2 	bl	8000c18 <__aeabi_d2f>
 8006874:	4602      	mov	r2, r0
 8006876:	4ba2      	ldr	r3, [pc, #648]	; (8006b00 <cppLoop+0x658>)
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e012      	b.n	80068a2 <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 800687c:	4ba1      	ldr	r3, [pc, #644]	; (8006b04 <cppLoop+0x65c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7f9 fe79 	bl	8000578 <__aeabi_f2d>
 8006886:	a398      	add	r3, pc, #608	; (adr r3, 8006ae8 <cppLoop+0x640>)
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	f7f9 fd14 	bl	80002b8 <__aeabi_dsub>
 8006890:	4603      	mov	r3, r0
 8006892:	460c      	mov	r4, r1
 8006894:	4618      	mov	r0, r3
 8006896:	4621      	mov	r1, r4
 8006898:	f7fa f9be 	bl	8000c18 <__aeabi_d2f>
 800689c:	4602      	mov	r2, r0
 800689e:	4b99      	ldr	r3, [pc, #612]	; (8006b04 <cppLoop+0x65c>)
 80068a0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80068a2:	2152      	movs	r1, #82	; 0x52
 80068a4:	4893      	ldr	r0, [pc, #588]	; (8006af4 <cppLoop+0x64c>)
 80068a6:	f7fb fb01 	bl	8001eac <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80068aa:	2200      	movs	r2, #0
 80068ac:	f04f 31ff 	mov.w	r1, #4294967295
 80068b0:	4890      	ldr	r0, [pc, #576]	; (8006af4 <cppLoop+0x64c>)
 80068b2:	f7fb fbb7 	bl	8002024 <_ZN3LED2LREaa>
		break;
 80068b6:	f000 beff 	b.w	80076b8 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_D){
 80068ba:	488d      	ldr	r0, [pc, #564]	; (8006af0 <cppLoop+0x648>)
 80068bc:	f7fb fa92 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b04      	cmp	r3, #4
 80068c4:	bf0c      	ite	eq
 80068c6:	2301      	moveq	r3, #1
 80068c8:	2300      	movne	r3, #0
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d03e      	beq.n	800694e <cppLoop+0x4a6>
			led.LR(-1, 1);
 80068d0:	2201      	movs	r2, #1
 80068d2:	f04f 31ff 	mov.w	r1, #4294967295
 80068d6:	4887      	ldr	r0, [pc, #540]	; (8006af4 <cppLoop+0x64c>)
 80068d8:	f7fb fba4 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80068dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80068e0:	f001 f84c 	bl	800797c <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80068e4:	f107 031c 	add.w	r3, r7, #28
 80068e8:	2201      	movs	r2, #1
 80068ea:	4987      	ldr	r1, [pc, #540]	; (8006b08 <cppLoop+0x660>)
 80068ec:	4887      	ldr	r0, [pc, #540]	; (8006b0c <cppLoop+0x664>)
 80068ee:	f7fa fec9 	bl	8001684 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80068f2:	f107 0318 	add.w	r3, r7, #24
 80068f6:	2201      	movs	r2, #1
 80068f8:	4985      	ldr	r1, [pc, #532]	; (8006b10 <cppLoop+0x668>)
 80068fa:	4884      	ldr	r0, [pc, #528]	; (8006b0c <cppLoop+0x664>)
 80068fc:	f7fa fec2 	bl	8001684 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006900:	f107 0314 	add.w	r3, r7, #20
 8006904:	2201      	movs	r2, #1
 8006906:	4983      	ldr	r1, [pc, #524]	; (8006b14 <cppLoop+0x66c>)
 8006908:	4880      	ldr	r0, [pc, #512]	; (8006b0c <cppLoop+0x664>)
 800690a:	f7fa febb 	bl	8001684 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800690e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006912:	ed97 7a06 	vldr	s14, [r7, #24]
 8006916:	edd7 6a05 	vldr	s13, [r7, #20]
 800691a:	eeb0 1a66 	vmov.f32	s2, s13
 800691e:	eef0 0a47 	vmov.f32	s1, s14
 8006922:	eeb0 0a67 	vmov.f32	s0, s15
 8006926:	487c      	ldr	r0, [pc, #496]	; (8006b18 <cppLoop+0x670>)
 8006928:	f7fc fa1e 	bl	8002d68 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4a73      	ldr	r2, [pc, #460]	; (8006afc <cppLoop+0x654>)
 8006930:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	4a72      	ldr	r2, [pc, #456]	; (8006b00 <cppLoop+0x658>)
 8006936:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4a72      	ldr	r2, [pc, #456]	; (8006b04 <cppLoop+0x65c>)
 800693c:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 800693e:	2200      	movs	r2, #0
 8006940:	f04f 31ff 	mov.w	r1, #4294967295
 8006944:	486b      	ldr	r0, [pc, #428]	; (8006af4 <cppLoop+0x64c>)
 8006946:	f7fb fb6d 	bl	8002024 <_ZN3LED2LREaa>
		break;
 800694a:	f000 beb5 	b.w	80076b8 <cppLoop+0x1210>
		else if(joy_stick.getValue() == JOY_C){
 800694e:	4868      	ldr	r0, [pc, #416]	; (8006af0 <cppLoop+0x648>)
 8006950:	f7fb fa48 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006954:	4603      	mov	r3, r0
 8006956:	2b02      	cmp	r3, #2
 8006958:	bf0c      	ite	eq
 800695a:	2301      	moveq	r3, #1
 800695c:	2300      	movne	r3, #0
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 86a9 	beq.w	80076b8 <cppLoop+0x1210>
			led.LR(-1, 1);
 8006966:	2201      	movs	r2, #1
 8006968:	f04f 31ff 	mov.w	r1, #4294967295
 800696c:	4861      	ldr	r0, [pc, #388]	; (8006af4 <cppLoop+0x64c>)
 800696e:	f7fb fb59 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006972:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006976:	f001 f801 	bl	800797c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 800697a:	2300      	movs	r3, #0
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4b5f      	ldr	r3, [pc, #380]	; (8006afc <cppLoop+0x654>)
 8006980:	2201      	movs	r2, #1
 8006982:	4961      	ldr	r1, [pc, #388]	; (8006b08 <cppLoop+0x660>)
 8006984:	4861      	ldr	r0, [pc, #388]	; (8006b0c <cppLoop+0x664>)
 8006986:	f7fa fe17 	bl	80015b8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 800698a:	2300      	movs	r3, #0
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <cppLoop+0x658>)
 8006990:	2201      	movs	r2, #1
 8006992:	495f      	ldr	r1, [pc, #380]	; (8006b10 <cppLoop+0x668>)
 8006994:	485d      	ldr	r0, [pc, #372]	; (8006b0c <cppLoop+0x664>)
 8006996:	f7fa fe0f 	bl	80015b8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800699a:	2300      	movs	r3, #0
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	4b59      	ldr	r3, [pc, #356]	; (8006b04 <cppLoop+0x65c>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	495c      	ldr	r1, [pc, #368]	; (8006b14 <cppLoop+0x66c>)
 80069a4:	4859      	ldr	r0, [pc, #356]	; (8006b0c <cppLoop+0x664>)
 80069a6:	f7fa fe07 	bl	80015b8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80069aa:	4b54      	ldr	r3, [pc, #336]	; (8006afc <cppLoop+0x654>)
 80069ac:	edd3 7a00 	vldr	s15, [r3]
 80069b0:	4b53      	ldr	r3, [pc, #332]	; (8006b00 <cppLoop+0x658>)
 80069b2:	ed93 7a00 	vldr	s14, [r3]
 80069b6:	4b53      	ldr	r3, [pc, #332]	; (8006b04 <cppLoop+0x65c>)
 80069b8:	edd3 6a00 	vldr	s13, [r3]
 80069bc:	eeb0 1a66 	vmov.f32	s2, s13
 80069c0:	eef0 0a47 	vmov.f32	s1, s14
 80069c4:	eeb0 0a67 	vmov.f32	s0, s15
 80069c8:	4853      	ldr	r0, [pc, #332]	; (8006b18 <cppLoop+0x670>)
 80069ca:	f7fc f9cd 	bl	8002d68 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80069ce:	2200      	movs	r2, #0
 80069d0:	f04f 31ff 	mov.w	r1, #4294967295
 80069d4:	4847      	ldr	r0, [pc, #284]	; (8006af4 <cppLoop+0x64c>)
 80069d6:	f7fb fb25 	bl	8002024 <_ZN3LED2LREaa>
		break;
 80069da:	f000 be6d 	b.w	80076b8 <cppLoop+0x1210>

	case 1:
		led.fullColor('B');
 80069de:	2142      	movs	r1, #66	; 0x42
 80069e0:	4844      	ldr	r0, [pc, #272]	; (8006af4 <cppLoop+0x64c>)
 80069e2:	f7fb fa63 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 80069e6:	f7fa fb5b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80069ea:	2100      	movs	r1, #0
 80069ec:	2000      	movs	r0, #0
 80069ee:	f7fa fb67 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 80069f2:	484a      	ldr	r0, [pc, #296]	; (8006b1c <cppLoop+0x674>)
 80069f4:	f7fa fb8e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80069f8:	2101      	movs	r1, #1
 80069fa:	2000      	movs	r0, #0
 80069fc:	f7fa fb60 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006a00:	4847      	ldr	r0, [pc, #284]	; (8006b20 <cppLoop+0x678>)
 8006a02:	f7fa fb87 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a06:	483a      	ldr	r0, [pc, #232]	; (8006af0 <cppLoop+0x648>)
 8006a08:	f7fb f9ec 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 864f 	beq.w	80076bc <cppLoop+0x1214>
			HAL_Delay(500);
 8006a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a22:	f000 ffab 	bl	800797c <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006a26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006a2a:	483b      	ldr	r0, [pc, #236]	; (8006b18 <cppLoop+0x670>)
 8006a2c:	f7fc f9f1 	bl	8002e12 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006a30:	f04f 32ff 	mov.w	r2, #4294967295
 8006a34:	2101      	movs	r1, #1
 8006a36:	482f      	ldr	r0, [pc, #188]	; (8006af4 <cppLoop+0x64c>)
 8006a38:	f7fb faf4 	bl	8002024 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4836      	ldr	r0, [pc, #216]	; (8006b18 <cppLoop+0x670>)
 8006a40:	f7fc fbb0 	bl	80031a4 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006a44:	4834      	ldr	r0, [pc, #208]	; (8006b18 <cppLoop+0x670>)
 8006a46:	f7fc fadb 	bl	8003000 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4828      	ldr	r0, [pc, #160]	; (8006af4 <cppLoop+0x64c>)
 8006a52:	f7fb fae7 	bl	8002024 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 8006a56:	f000 be31 	b.w	80076bc <cppLoop+0x1214>

	case 2:
		led.fullColor('M');
 8006a5a:	214d      	movs	r1, #77	; 0x4d
 8006a5c:	4825      	ldr	r0, [pc, #148]	; (8006af4 <cppLoop+0x64c>)
 8006a5e:	f7fb fa25 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006a62:	f7fa fb1d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006a66:	2100      	movs	r1, #0
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f7fa fb29 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006a6e:	482b      	ldr	r0, [pc, #172]	; (8006b1c <cppLoop+0x674>)
 8006a70:	f7fa fb50 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a74:	2101      	movs	r1, #1
 8006a76:	2000      	movs	r0, #0
 8006a78:	f7fa fb22 	bl	80010c0 <lcd_locate>
		lcd_printf("update");
 8006a7c:	4829      	ldr	r0, [pc, #164]	; (8006b24 <cppLoop+0x67c>)
 8006a7e:	f7fa fb49 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a82:	481b      	ldr	r0, [pc, #108]	; (8006af0 <cppLoop+0x648>)
 8006a84:	f7fb f9ae 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8613 	beq.w	80076c0 <cppLoop+0x1218>
			HAL_Delay(500);
 8006a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a9e:	f000 ff6d 	bl	800797c <HAL_Delay>

			line_trace.setTargetVelocity(1.0);
 8006aa2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006aa6:	481c      	ldr	r0, [pc, #112]	; (8006b18 <cppLoop+0x670>)
 8006aa8:	f7fc f9b3 	bl	8002e12 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8006aac:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	4810      	ldr	r0, [pc, #64]	; (8006af4 <cppLoop+0x64c>)
 8006ab4:	f7fb fab6 	bl	8002024 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8006ab8:	2101      	movs	r1, #1
 8006aba:	4817      	ldr	r0, [pc, #92]	; (8006b18 <cppLoop+0x670>)
 8006abc:	f7fc fb72 	bl	80031a4 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8006ac0:	4815      	ldr	r0, [pc, #84]	; (8006b18 <cppLoop+0x670>)
 8006ac2:	f7fc fa9d 	bl	8003000 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 8006ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aca:	2100      	movs	r1, #0
 8006acc:	4809      	ldr	r0, [pc, #36]	; (8006af4 <cppLoop+0x64c>)
 8006ace:	f7fb faa9 	bl	8002024 <_ZN3LED2LREaa>

			//logger.stop();
		}
		break;
 8006ad2:	f000 bdf5 	b.w	80076c0 <cppLoop+0x1218>
 8006ad6:	bf00      	nop
 8006ad8:	88e368f1 	.word	0x88e368f1
 8006adc:	3ee4f8b5 	.word	0x3ee4f8b5
 8006ae0:	eb1c432d 	.word	0xeb1c432d
 8006ae4:	3f1a36e2 	.word	0x3f1a36e2
 8006ae8:	a0b5ed8d 	.word	0xa0b5ed8d
 8006aec:	3eb0c6f7 	.word	0x3eb0c6f7
 8006af0:	200005b0 	.word	0x200005b0
 8006af4:	200005bc 	.word	0x200005bc
 8006af8:	200335c6 	.word	0x200335c6
 8006afc:	200335c8 	.word	0x200335c8
 8006b00:	200335d0 	.word	0x200335d0
 8006b04:	200335d8 	.word	0x200335d8
 8006b08:	08017bdc 	.word	0x08017bdc
 8006b0c:	08017be4 	.word	0x08017be4
 8006b10:	08017bec 	.word	0x08017bec
 8006b14:	08017bf4 	.word	0x08017bf4
 8006b18:	20015e48 	.word	0x20015e48
 8006b1c:	08017bfc 	.word	0x08017bfc
 8006b20:	08017c08 	.word	0x08017c08
 8006b24:	08017c10 	.word	0x08017c10

	case 3:
		led.fullColor('G');
 8006b28:	2147      	movs	r1, #71	; 0x47
 8006b2a:	48af      	ldr	r0, [pc, #700]	; (8006de8 <cppLoop+0x940>)
 8006b2c:	f7fb f9be 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b30:	f7fa fab6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b34:	2100      	movs	r1, #0
 8006b36:	2000      	movs	r0, #0
 8006b38:	f7fa fac2 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8006b3c:	48ab      	ldr	r0, [pc, #684]	; (8006dec <cppLoop+0x944>)
 8006b3e:	f7fa fae9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b42:	2101      	movs	r1, #1
 8006b44:	2000      	movs	r0, #0
 8006b46:	f7fa fabb 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006b4a:	48a9      	ldr	r0, [pc, #676]	; (8006df0 <cppLoop+0x948>)
 8006b4c:	f7fa fae2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006b50:	48a8      	ldr	r0, [pc, #672]	; (8006df4 <cppLoop+0x94c>)
 8006b52:	f7fb f947 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	bf0c      	ite	eq
 8006b5c:	2301      	moveq	r3, #1
 8006b5e:	2300      	movne	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 85ae 	beq.w	80076c4 <cppLoop+0x121c>
			led.LR(-1, 1);
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b6e:	489e      	ldr	r0, [pc, #632]	; (8006de8 <cppLoop+0x940>)
 8006b70:	f7fb fa58 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b78:	f000 ff00 	bl	800797c <HAL_Delay>

			logger.start();
 8006b7c:	489e      	ldr	r0, [pc, #632]	; (8006df8 <cppLoop+0x950>)
 8006b7e:	f7fc fd7e 	bl	800367e <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8006b82:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006dfc <cppLoop+0x954>
 8006b86:	489e      	ldr	r0, [pc, #632]	; (8006e00 <cppLoop+0x958>)
 8006b88:	f7fc f934 	bl	8002df4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006b8c:	489c      	ldr	r0, [pc, #624]	; (8006e00 <cppLoop+0x958>)
 8006b8e:	f7fc f9cd 	bl	8002f2c <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8006b92:	f241 3088 	movw	r0, #5000	; 0x1388
 8006b96:	f000 fef1 	bl	800797c <HAL_Delay>

			logger.stop();
 8006b9a:	4897      	ldr	r0, [pc, #604]	; (8006df8 <cppLoop+0x950>)
 8006b9c:	f7fc fd80 	bl	80036a0 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006ba0:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006dfc <cppLoop+0x954>
 8006ba4:	4896      	ldr	r0, [pc, #600]	; (8006e00 <cppLoop+0x958>)
 8006ba6:	f7fc f925 	bl	8002df4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006baa:	4895      	ldr	r0, [pc, #596]	; (8006e00 <cppLoop+0x958>)
 8006bac:	f7fc f9d8 	bl	8002f60 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	488c      	ldr	r0, [pc, #560]	; (8006de8 <cppLoop+0x940>)
 8006bb8:	f7fb fa34 	bl	8002024 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	4889      	ldr	r0, [pc, #548]	; (8006de8 <cppLoop+0x940>)
 8006bc4:	f7fb fa2e 	bl	8002024 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f04f 31ff 	mov.w	r1, #4294967295
 8006bce:	4886      	ldr	r0, [pc, #536]	; (8006de8 <cppLoop+0x940>)
 8006bd0:	f7fb fa28 	bl	8002024 <_ZN3LED2LREaa>
		}

		break;
 8006bd4:	f000 bd76 	b.w	80076c4 <cppLoop+0x121c>

	case 4:
		led.fullColor('Y');
 8006bd8:	2159      	movs	r1, #89	; 0x59
 8006bda:	4883      	ldr	r0, [pc, #524]	; (8006de8 <cppLoop+0x940>)
 8006bdc:	f7fb f966 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006be0:	f7fa fa5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006be4:	2100      	movs	r1, #0
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7fa fa6a 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006bec:	4885      	ldr	r0, [pc, #532]	; (8006e04 <cppLoop+0x95c>)
 8006bee:	f7fa fa91 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	f7fa fa63 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006bfa:	487d      	ldr	r0, [pc, #500]	; (8006df0 <cppLoop+0x948>)
 8006bfc:	f7fa fa8a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c00:	487c      	ldr	r0, [pc, #496]	; (8006df4 <cppLoop+0x94c>)
 8006c02:	f7fb f8ef 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	bf0c      	ite	eq
 8006c0c:	2301      	moveq	r3, #1
 8006c0e:	2300      	movne	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8558 	beq.w	80076c8 <cppLoop+0x1220>
			led.LR(-1, 1);
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c1e:	4872      	ldr	r0, [pc, #456]	; (8006de8 <cppLoop+0x940>)
 8006c20:	f7fb fa00 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006c24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c28:	f000 fea8 	bl	800797c <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8006c2c:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006dfc <cppLoop+0x954>
 8006c30:	4873      	ldr	r0, [pc, #460]	; (8006e00 <cppLoop+0x958>)
 8006c32:	f7fc f8ee 	bl	8002e12 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006c36:	4874      	ldr	r0, [pc, #464]	; (8006e08 <cppLoop+0x960>)
 8006c38:	f7fd fd67 	bl	800470a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006c3c:	4870      	ldr	r0, [pc, #448]	; (8006e00 <cppLoop+0x958>)
 8006c3e:	f7fc f975 	bl	8002f2c <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8006c42:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c46:	f000 fe99 	bl	800797c <HAL_Delay>

			line_trace.stop();
 8006c4a:	486d      	ldr	r0, [pc, #436]	; (8006e00 <cppLoop+0x958>)
 8006c4c:	f7fc f988 	bl	8002f60 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8006c50:	486d      	ldr	r0, [pc, #436]	; (8006e08 <cppLoop+0x960>)
 8006c52:	f7fd fd6d 	bl	8004730 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006c56:	2200      	movs	r2, #0
 8006c58:	f04f 31ff 	mov.w	r1, #4294967295
 8006c5c:	4862      	ldr	r0, [pc, #392]	; (8006de8 <cppLoop+0x940>)
 8006c5e:	f7fb f9e1 	bl	8002024 <_ZN3LED2LREaa>
		}
		break;
 8006c62:	f000 bd31 	b.w	80076c8 <cppLoop+0x1220>

	case 5:
		led.fullColor('C');
 8006c66:	2143      	movs	r1, #67	; 0x43
 8006c68:	485f      	ldr	r0, [pc, #380]	; (8006de8 <cppLoop+0x940>)
 8006c6a:	f7fb f91f 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c6e:	f7fa fa17 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c72:	2100      	movs	r1, #0
 8006c74:	2000      	movs	r0, #0
 8006c76:	f7fa fa23 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006c7a:	4864      	ldr	r0, [pc, #400]	; (8006e0c <cppLoop+0x964>)
 8006c7c:	f7fa fa4a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c80:	2101      	movs	r1, #1
 8006c82:	2000      	movs	r0, #0
 8006c84:	f7fa fa1c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006c88:	4861      	ldr	r0, [pc, #388]	; (8006e10 <cppLoop+0x968>)
 8006c8a:	f7fa fa43 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006c8e:	4859      	ldr	r0, [pc, #356]	; (8006df4 <cppLoop+0x94c>)
 8006c90:	f7fb f8a8 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	bf0c      	ite	eq
 8006c9a:	2301      	moveq	r3, #1
 8006c9c:	2300      	movne	r3, #0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8513 	beq.w	80076cc <cppLoop+0x1224>
			led.LR(-1, 1);
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8006cac:	484e      	ldr	r0, [pc, #312]	; (8006de8 <cppLoop+0x940>)
 8006cae:	f7fb f9b9 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006cb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cb6:	f000 fe61 	bl	800797c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006cba:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006e14 <cppLoop+0x96c>
 8006cbe:	4850      	ldr	r0, [pc, #320]	; (8006e00 <cppLoop+0x958>)
 8006cc0:	f7fc f898 	bl	8002df4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006cc4:	484e      	ldr	r0, [pc, #312]	; (8006e00 <cppLoop+0x958>)
 8006cc6:	f7fc f931 	bl	8002f2c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006cca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cce:	f000 fe55 	bl	800797c <HAL_Delay>

			led.fullColor('R');
 8006cd2:	2152      	movs	r1, #82	; 0x52
 8006cd4:	4844      	ldr	r0, [pc, #272]	; (8006de8 <cppLoop+0x940>)
 8006cd6:	f7fb f8e9 	bl	8001eac <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8006cda:	484f      	ldr	r0, [pc, #316]	; (8006e18 <cppLoop+0x970>)
 8006cdc:	f7fa fbcc 	bl	8001478 <_ZN7Encoder17clearDistance10mmEv>
			encoder.clearDistance();
 8006ce0:	484d      	ldr	r0, [pc, #308]	; (8006e18 <cppLoop+0x970>)
 8006ce2:	f7fa fbbb 	bl	800145c <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006ce6:	f242 7010 	movw	r0, #10000	; 0x2710
 8006cea:	f000 fe47 	bl	800797c <HAL_Delay>

			line_trace.stop();
 8006cee:	4844      	ldr	r0, [pc, #272]	; (8006e00 <cppLoop+0x958>)
 8006cf0:	f7fc f936 	bl	8002f60 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006cf4:	4949      	ldr	r1, [pc, #292]	; (8006e1c <cppLoop+0x974>)
 8006cf6:	484a      	ldr	r0, [pc, #296]	; (8006e20 <cppLoop+0x978>)
 8006cf8:	f7fa fbe9 	bl	80014ce <user_fopen>
			float d = encoder.getDistance();
 8006cfc:	4846      	ldr	r0, [pc, #280]	; (8006e18 <cppLoop+0x970>)
 8006cfe:	f7fa fb8f 	bl	8001420 <_ZN7Encoder11getDistanceEv>
 8006d02:	eef0 7a40 	vmov.f32	s15, s0
 8006d06:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006d0a:	f107 0310 	add.w	r3, r7, #16
 8006d0e:	2201      	movs	r2, #1
 8006d10:	4619      	mov	r1, r3
 8006d12:	2001      	movs	r0, #1
 8006d14:	f7fa fbfe 	bl	8001514 <sd_write_float>
			user_fclose();
 8006d18:	f7fa fbec 	bl	80014f4 <user_fclose>

			led.LR(-1, 0);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006d22:	4831      	ldr	r0, [pc, #196]	; (8006de8 <cppLoop+0x940>)
 8006d24:	f7fb f97e 	bl	8002024 <_ZN3LED2LREaa>
		}

		break;
 8006d28:	f000 bcd0 	b.w	80076cc <cppLoop+0x1224>

	case 6:
		led.fullColor('R');
 8006d2c:	2152      	movs	r1, #82	; 0x52
 8006d2e:	482e      	ldr	r0, [pc, #184]	; (8006de8 <cppLoop+0x940>)
 8006d30:	f7fb f8bc 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006d34:	f7fa f9b4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006d38:	2100      	movs	r1, #0
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f7fa f9c0 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006d40:	4838      	ldr	r0, [pc, #224]	; (8006e24 <cppLoop+0x97c>)
 8006d42:	f7fa f9e7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006d46:	2101      	movs	r1, #1
 8006d48:	2000      	movs	r0, #0
 8006d4a:	f7fa f9b9 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006d4e:	4836      	ldr	r0, [pc, #216]	; (8006e28 <cppLoop+0x980>)
 8006d50:	f7fa f9e0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006d54:	4827      	ldr	r0, [pc, #156]	; (8006df4 <cppLoop+0x94c>)
 8006d56:	f7fb f845 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 84b2 	beq.w	80076d0 <cppLoop+0x1228>
			HAL_Delay(500);
 8006d6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d70:	f000 fe04 	bl	800797c <HAL_Delay>
			led.LR(-1, 1);
 8006d74:	2201      	movs	r2, #1
 8006d76:	f04f 31ff 	mov.w	r1, #4294967295
 8006d7a:	481b      	ldr	r0, [pc, #108]	; (8006de8 <cppLoop+0x940>)
 8006d7c:	f7fb f952 	bl	8002024 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006d80:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006e2c <cppLoop+0x984>
 8006d84:	481e      	ldr	r0, [pc, #120]	; (8006e00 <cppLoop+0x958>)
 8006d86:	f7fc f835 	bl	8002df4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006d8a:	481d      	ldr	r0, [pc, #116]	; (8006e00 <cppLoop+0x958>)
 8006d8c:	f7fc f8ce 	bl	8002f2c <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006d94:	f000 fdf2 	bl	800797c <HAL_Delay>

			led.fullColor('R');
 8006d98:	2152      	movs	r1, #82	; 0x52
 8006d9a:	4813      	ldr	r0, [pc, #76]	; (8006de8 <cppLoop+0x940>)
 8006d9c:	f7fb f886 	bl	8001eac <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8006da0:	481d      	ldr	r0, [pc, #116]	; (8006e18 <cppLoop+0x970>)
 8006da2:	f7fa fb69 	bl	8001478 <_ZN7Encoder17clearDistance10mmEv>
			encoder.clearDistance();
 8006da6:	481c      	ldr	r0, [pc, #112]	; (8006e18 <cppLoop+0x970>)
 8006da8:	f7fa fb58 	bl	800145c <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006dac:	4820      	ldr	r0, [pc, #128]	; (8006e30 <cppLoop+0x988>)
 8006dae:	f7fc fecf 	bl	8003b50 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006db2:	4811      	ldr	r0, [pc, #68]	; (8006df8 <cppLoop+0x950>)
 8006db4:	f7fc fc63 	bl	800367e <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006db8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006dbc:	f000 fdde 	bl	800797c <HAL_Delay>

			line_trace.stop();
 8006dc0:	480f      	ldr	r0, [pc, #60]	; (8006e00 <cppLoop+0x958>)
 8006dc2:	f7fc f8cd 	bl	8002f60 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006dc6:	480c      	ldr	r0, [pc, #48]	; (8006df8 <cppLoop+0x950>)
 8006dc8:	f7fc fc6a 	bl	80036a0 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <cppLoop+0x98c>)
 8006dce:	4a1a      	ldr	r2, [pc, #104]	; (8006e38 <cppLoop+0x990>)
 8006dd0:	491a      	ldr	r1, [pc, #104]	; (8006e3c <cppLoop+0x994>)
 8006dd2:	4809      	ldr	r0, [pc, #36]	; (8006df8 <cppLoop+0x950>)
 8006dd4:	f7fc fb96 	bl	8003504 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f04f 31ff 	mov.w	r1, #4294967295
 8006dde:	4802      	ldr	r0, [pc, #8]	; (8006de8 <cppLoop+0x940>)
 8006de0:	f7fb f920 	bl	8002024 <_ZN3LED2LREaa>
		}

		break;
 8006de4:	f000 bc74 	b.w	80076d0 <cppLoop+0x1228>
 8006de8:	200005bc 	.word	0x200005bc
 8006dec:	08017c18 	.word	0x08017c18
 8006df0:	08017c20 	.word	0x08017c20
 8006df4:	200005b0 	.word	0x200005b0
 8006df8:	200005e0 	.word	0x200005e0
 8006dfc:	3dcccccd 	.word	0x3dcccccd
 8006e00:	20015e48 	.word	0x20015e48
 8006e04:	08017c28 	.word	0x08017c28
 8006e08:	20015dc8 	.word	0x20015dc8
 8006e0c:	08017c34 	.word	0x08017c34
 8006e10:	08017c3c 	.word	0x08017c3c
 8006e14:	00000000 	.word	0x00000000
 8006e18:	20015da8 	.word	0x20015da8
 8006e1c:	08017c48 	.word	0x08017c48
 8006e20:	08017c50 	.word	0x08017c50
 8006e24:	08017c5c 	.word	0x08017c5c
 8006e28:	08017c68 	.word	0x08017c68
 8006e2c:	3d8f5c29 	.word	0x3d8f5c29
 8006e30:	20015e08 	.word	0x20015e08
 8006e34:	08017c70 	.word	0x08017c70
 8006e38:	08017c7c 	.word	0x08017c7c
 8006e3c:	08017c88 	.word	0x08017c88

	case 7:
		led.fullColor('G');
 8006e40:	2147      	movs	r1, #71	; 0x47
 8006e42:	48b3      	ldr	r0, [pc, #716]	; (8007110 <cppLoop+0xc68>)
 8006e44:	f7fb f832 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006e48:	f7fa f92a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f7fa f936 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006e54:	48af      	ldr	r0, [pc, #700]	; (8007114 <cppLoop+0xc6c>)
 8006e56:	f7fa f95d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7fa f92f 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006e62:	48ad      	ldr	r0, [pc, #692]	; (8007118 <cppLoop+0xc70>)
 8006e64:	f7fa f956 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006e68:	48ac      	ldr	r0, [pc, #688]	; (800711c <cppLoop+0xc74>)
 8006e6a:	f7fa ffbb 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	bf0c      	ite	eq
 8006e74:	2301      	moveq	r3, #1
 8006e76:	2300      	movne	r3, #0
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 842a 	beq.w	80076d4 <cppLoop+0x122c>
			led.LR(-1, 1);
 8006e80:	2201      	movs	r2, #1
 8006e82:	f04f 31ff 	mov.w	r1, #4294967295
 8006e86:	48a2      	ldr	r0, [pc, #648]	; (8007110 <cppLoop+0xc68>)
 8006e88:	f7fb f8cc 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006e8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e90:	f000 fd74 	bl	800797c <HAL_Delay>

			led.fullColor('R');
 8006e94:	2152      	movs	r1, #82	; 0x52
 8006e96:	489e      	ldr	r0, [pc, #632]	; (8007110 <cppLoop+0xc68>)
 8006e98:	f7fb f808 	bl	8001eac <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006e9c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8007120 <cppLoop+0xc78>
 8006ea0:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8007124 <cppLoop+0xc7c>
 8006ea4:	48a0      	ldr	r0, [pc, #640]	; (8007128 <cppLoop+0xc80>)
 8006ea6:	f7fd fbc3 	bl	8004630 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006eaa:	489f      	ldr	r0, [pc, #636]	; (8007128 <cppLoop+0xc80>)
 8006eac:	f7fd fc2d 	bl	800470a <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006eb4:	f000 fd62 	bl	800797c <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006eb8:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8007124 <cppLoop+0xc7c>
 8006ebc:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8007124 <cppLoop+0xc7c>
 8006ec0:	4899      	ldr	r0, [pc, #612]	; (8007128 <cppLoop+0xc80>)
 8006ec2:	f7fd fbb5 	bl	8004630 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006ec6:	2064      	movs	r0, #100	; 0x64
 8006ec8:	f000 fd58 	bl	800797c <HAL_Delay>
			velocity_ctrl.stop();
 8006ecc:	4896      	ldr	r0, [pc, #600]	; (8007128 <cppLoop+0xc80>)
 8006ece:	f7fd fc2f 	bl	8004730 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ed8:	488d      	ldr	r0, [pc, #564]	; (8007110 <cppLoop+0xc68>)
 8006eda:	f7fb f8a3 	bl	8002024 <_ZN3LED2LREaa>
		}
		break;
 8006ede:	e3f9      	b.n	80076d4 <cppLoop+0x122c>

	case 8:
		led.fullColor('B');
 8006ee0:	2142      	movs	r1, #66	; 0x42
 8006ee2:	488b      	ldr	r0, [pc, #556]	; (8007110 <cppLoop+0xc68>)
 8006ee4:	f7fa ffe2 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ee8:	f7fa f8da 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006eec:	2100      	movs	r1, #0
 8006eee:	2000      	movs	r0, #0
 8006ef0:	f7fa f8e6 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006ef4:	488d      	ldr	r0, [pc, #564]	; (800712c <cppLoop+0xc84>)
 8006ef6:	f7fc ff21 	bl	8003d3c <_ZN13PathFollowing8getKxValEv>
 8006efa:	ec51 0b10 	vmov	r0, r1, d0
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	4b8b      	ldr	r3, [pc, #556]	; (8007130 <cppLoop+0xc88>)
 8006f04:	f7f9 fb90 	bl	8000628 <__aeabi_dmul>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4623      	mov	r3, r4
 8006f10:	4888      	ldr	r0, [pc, #544]	; (8007134 <cppLoop+0xc8c>)
 8006f12:	f7fa f8ff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006f16:	2101      	movs	r1, #1
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f7fa f8d1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006f1e:	4883      	ldr	r0, [pc, #524]	; (800712c <cppLoop+0xc84>)
 8006f20:	f7fc ff20 	bl	8003d64 <_ZN13PathFollowing8getKyValEv>
 8006f24:	ec51 0b10 	vmov	r0, r1, d0
 8006f28:	f04f 0200 	mov.w	r2, #0
 8006f2c:	4b80      	ldr	r3, [pc, #512]	; (8007130 <cppLoop+0xc88>)
 8006f2e:	f7f9 fb7b 	bl	8000628 <__aeabi_dmul>
 8006f32:	4603      	mov	r3, r0
 8006f34:	460c      	mov	r4, r1
 8006f36:	461d      	mov	r5, r3
 8006f38:	4626      	mov	r6, r4
 8006f3a:	487c      	ldr	r0, [pc, #496]	; (800712c <cppLoop+0xc84>)
 8006f3c:	f7fc ff26 	bl	8003d8c <_ZN13PathFollowing8getKtValEv>
 8006f40:	ec51 0b10 	vmov	r0, r1, d0
 8006f44:	f04f 0200 	mov.w	r2, #0
 8006f48:	4b79      	ldr	r3, [pc, #484]	; (8007130 <cppLoop+0xc88>)
 8006f4a:	f7f9 fb6d 	bl	8000628 <__aeabi_dmul>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	460c      	mov	r4, r1
 8006f52:	e9cd 3400 	strd	r3, r4, [sp]
 8006f56:	462a      	mov	r2, r5
 8006f58:	4633      	mov	r3, r6
 8006f5a:	4877      	ldr	r0, [pc, #476]	; (8007138 <cppLoop+0xc90>)
 8006f5c:	f7fa f8da 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006f60:	4b76      	ldr	r3, [pc, #472]	; (800713c <cppLoop+0xc94>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f3bf 8f5b 	dmb	ish
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bf0c      	ite	eq
 8006f72:	2301      	moveq	r3, #1
 8006f74:	2300      	movne	r3, #0
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d019      	beq.n	8006fb0 <cppLoop+0xb08>
 8006f7c:	486f      	ldr	r0, [pc, #444]	; (800713c <cppLoop+0xc94>)
 8006f7e:	f00b f9e2 	bl	8012346 <__cxa_guard_acquire>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00e      	beq.n	8006fb0 <cppLoop+0xb08>
 8006f92:	4866      	ldr	r0, [pc, #408]	; (800712c <cppLoop+0xc84>)
 8006f94:	f7fc fed2 	bl	8003d3c <_ZN13PathFollowing8getKxValEv>
 8006f98:	ec54 3b10 	vmov	r3, r4, d0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	f7f9 fe3a 	bl	8000c18 <__aeabi_d2f>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	4b66      	ldr	r3, [pc, #408]	; (8007140 <cppLoop+0xc98>)
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	4864      	ldr	r0, [pc, #400]	; (800713c <cppLoop+0xc94>)
 8006fac:	f00b f9d7 	bl	801235e <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006fb0:	4b64      	ldr	r3, [pc, #400]	; (8007144 <cppLoop+0xc9c>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f3bf 8f5b 	dmb	ish
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bf0c      	ite	eq
 8006fc2:	2301      	moveq	r3, #1
 8006fc4:	2300      	movne	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d019      	beq.n	8007000 <cppLoop+0xb58>
 8006fcc:	485d      	ldr	r0, [pc, #372]	; (8007144 <cppLoop+0xc9c>)
 8006fce:	f00b f9ba 	bl	8012346 <__cxa_guard_acquire>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00e      	beq.n	8007000 <cppLoop+0xb58>
 8006fe2:	4852      	ldr	r0, [pc, #328]	; (800712c <cppLoop+0xc84>)
 8006fe4:	f7fc febe 	bl	8003d64 <_ZN13PathFollowing8getKyValEv>
 8006fe8:	ec54 3b10 	vmov	r3, r4, d0
 8006fec:	4618      	mov	r0, r3
 8006fee:	4621      	mov	r1, r4
 8006ff0:	f7f9 fe12 	bl	8000c18 <__aeabi_d2f>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	4b54      	ldr	r3, [pc, #336]	; (8007148 <cppLoop+0xca0>)
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	4852      	ldr	r0, [pc, #328]	; (8007144 <cppLoop+0xc9c>)
 8006ffc:	f00b f9af 	bl	801235e <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8007000:	4b52      	ldr	r3, [pc, #328]	; (800714c <cppLoop+0xca4>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f3bf 8f5b 	dmb	ish
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	bf0c      	ite	eq
 8007012:	2301      	moveq	r3, #1
 8007014:	2300      	movne	r3, #0
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d019      	beq.n	8007050 <cppLoop+0xba8>
 800701c:	484b      	ldr	r0, [pc, #300]	; (800714c <cppLoop+0xca4>)
 800701e:	f00b f992 	bl	8012346 <__cxa_guard_acquire>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00e      	beq.n	8007050 <cppLoop+0xba8>
 8007032:	483e      	ldr	r0, [pc, #248]	; (800712c <cppLoop+0xc84>)
 8007034:	f7fc feaa 	bl	8003d8c <_ZN13PathFollowing8getKtValEv>
 8007038:	ec54 3b10 	vmov	r3, r4, d0
 800703c:	4618      	mov	r0, r3
 800703e:	4621      	mov	r1, r4
 8007040:	f7f9 fdea 	bl	8000c18 <__aeabi_d2f>
 8007044:	4602      	mov	r2, r0
 8007046:	4b42      	ldr	r3, [pc, #264]	; (8007150 <cppLoop+0xca8>)
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	4840      	ldr	r0, [pc, #256]	; (800714c <cppLoop+0xca4>)
 800704c:	f00b f987 	bl	801235e <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8007050:	4832      	ldr	r0, [pc, #200]	; (800711c <cppLoop+0xc74>)
 8007052:	f7fa fec7 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8007056:	4603      	mov	r3, r0
 8007058:	2b08      	cmp	r3, #8
 800705a:	bf0c      	ite	eq
 800705c:	2301      	moveq	r3, #1
 800705e:	2300      	movne	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d021      	beq.n	80070aa <cppLoop+0xc02>
			led.LR(-1, 1);
 8007066:	2201      	movs	r2, #1
 8007068:	f04f 31ff 	mov.w	r1, #4294967295
 800706c:	4828      	ldr	r0, [pc, #160]	; (8007110 <cppLoop+0xc68>)
 800706e:	f7fa ffd9 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007072:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007076:	f000 fc81 	bl	800797c <HAL_Delay>

			selector++;
 800707a:	4b36      	ldr	r3, [pc, #216]	; (8007154 <cppLoop+0xcac>)
 800707c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007080:	b29b      	uxth	r3, r3
 8007082:	3301      	adds	r3, #1
 8007084:	b29b      	uxth	r3, r3
 8007086:	b21a      	sxth	r2, r3
 8007088:	4b32      	ldr	r3, [pc, #200]	; (8007154 <cppLoop+0xcac>)
 800708a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800708c:	4b31      	ldr	r3, [pc, #196]	; (8007154 <cppLoop+0xcac>)
 800708e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007092:	2b02      	cmp	r3, #2
 8007094:	dd02      	ble.n	800709c <cppLoop+0xbf4>
 8007096:	4b2f      	ldr	r3, [pc, #188]	; (8007154 <cppLoop+0xcac>)
 8007098:	2200      	movs	r2, #0
 800709a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800709c:	2200      	movs	r2, #0
 800709e:	f04f 31ff 	mov.w	r1, #4294967295
 80070a2:	481b      	ldr	r0, [pc, #108]	; (8007110 <cppLoop+0xc68>)
 80070a4:	f7fa ffbe 	bl	8002024 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 80070a8:	e316      	b.n	80076d8 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_R){
 80070aa:	481c      	ldr	r0, [pc, #112]	; (800711c <cppLoop+0xc74>)
 80070ac:	f7fa fe9a 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	bf0c      	ite	eq
 80070b6:	2301      	moveq	r3, #1
 80070b8:	2300      	movne	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8082 	beq.w	80071c6 <cppLoop+0xd1e>
			led.LR(-1, 1);
 80070c2:	2201      	movs	r2, #1
 80070c4:	f04f 31ff 	mov.w	r1, #4294967295
 80070c8:	4811      	ldr	r0, [pc, #68]	; (8007110 <cppLoop+0xc68>)
 80070ca:	f7fa ffab 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80070ce:	2064      	movs	r0, #100	; 0x64
 80070d0:	f000 fc54 	bl	800797c <HAL_Delay>
			if(selector == 0){
 80070d4:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <cppLoop+0xcac>)
 80070d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d13c      	bne.n	8007158 <cppLoop+0xcb0>
				adj_kx = adj_kx + 0.00001;
 80070de:	4b18      	ldr	r3, [pc, #96]	; (8007140 <cppLoop+0xc98>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7f9 fa48 	bl	8000578 <__aeabi_f2d>
 80070e8:	a307      	add	r3, pc, #28	; (adr r3, 8007108 <cppLoop+0xc60>)
 80070ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ee:	f7f9 f8e5 	bl	80002bc <__adddf3>
 80070f2:	4603      	mov	r3, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	4618      	mov	r0, r3
 80070f8:	4621      	mov	r1, r4
 80070fa:	f7f9 fd8d 	bl	8000c18 <__aeabi_d2f>
 80070fe:	4602      	mov	r2, r0
 8007100:	4b0f      	ldr	r3, [pc, #60]	; (8007140 <cppLoop+0xc98>)
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e054      	b.n	80071b0 <cppLoop+0xd08>
 8007106:	bf00      	nop
 8007108:	88e368f1 	.word	0x88e368f1
 800710c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007110:	200005bc 	.word	0x200005bc
 8007114:	08017c8c 	.word	0x08017c8c
 8007118:	08017c98 	.word	0x08017c98
 800711c:	200005b0 	.word	0x200005b0
 8007120:	3fc8f5c3 	.word	0x3fc8f5c3
 8007124:	00000000 	.word	0x00000000
 8007128:	20015dc8 	.word	0x20015dc8
 800712c:	2001be98 	.word	0x2001be98
 8007130:	408f4000 	.word	0x408f4000
 8007134:	08017bc0 	.word	0x08017bc0
 8007138:	08017bcc 	.word	0x08017bcc
 800713c:	200335e4 	.word	0x200335e4
 8007140:	200335e0 	.word	0x200335e0
 8007144:	200335ec 	.word	0x200335ec
 8007148:	200335e8 	.word	0x200335e8
 800714c:	200335f4 	.word	0x200335f4
 8007150:	200335f0 	.word	0x200335f0
 8007154:	200335c6 	.word	0x200335c6
			else if(selector == 1){
 8007158:	4ba3      	ldr	r3, [pc, #652]	; (80073e8 <cppLoop+0xf40>)
 800715a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d113      	bne.n	800718a <cppLoop+0xce2>
				adj_ky = adj_ky + 0.00001;
 8007162:	4ba2      	ldr	r3, [pc, #648]	; (80073ec <cppLoop+0xf44>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7f9 fa06 	bl	8000578 <__aeabi_f2d>
 800716c:	a39c      	add	r3, pc, #624	; (adr r3, 80073e0 <cppLoop+0xf38>)
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f7f9 f8a3 	bl	80002bc <__adddf3>
 8007176:	4603      	mov	r3, r0
 8007178:	460c      	mov	r4, r1
 800717a:	4618      	mov	r0, r3
 800717c:	4621      	mov	r1, r4
 800717e:	f7f9 fd4b 	bl	8000c18 <__aeabi_d2f>
 8007182:	4602      	mov	r2, r0
 8007184:	4b99      	ldr	r3, [pc, #612]	; (80073ec <cppLoop+0xf44>)
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	e012      	b.n	80071b0 <cppLoop+0xd08>
				adj_kt = adj_kt + 0.00001;
 800718a:	4b99      	ldr	r3, [pc, #612]	; (80073f0 <cppLoop+0xf48>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f7f9 f9f2 	bl	8000578 <__aeabi_f2d>
 8007194:	a392      	add	r3, pc, #584	; (adr r3, 80073e0 <cppLoop+0xf38>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f88f 	bl	80002bc <__adddf3>
 800719e:	4603      	mov	r3, r0
 80071a0:	460c      	mov	r4, r1
 80071a2:	4618      	mov	r0, r3
 80071a4:	4621      	mov	r1, r4
 80071a6:	f7f9 fd37 	bl	8000c18 <__aeabi_d2f>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b90      	ldr	r3, [pc, #576]	; (80073f0 <cppLoop+0xf48>)
 80071ae:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80071b0:	2152      	movs	r1, #82	; 0x52
 80071b2:	4890      	ldr	r0, [pc, #576]	; (80073f4 <cppLoop+0xf4c>)
 80071b4:	f7fa fe7a 	bl	8001eac <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80071b8:	2200      	movs	r2, #0
 80071ba:	f04f 31ff 	mov.w	r1, #4294967295
 80071be:	488d      	ldr	r0, [pc, #564]	; (80073f4 <cppLoop+0xf4c>)
 80071c0:	f7fa ff30 	bl	8002024 <_ZN3LED2LREaa>
		break;
 80071c4:	e288      	b.n	80076d8 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_L){
 80071c6:	488c      	ldr	r0, [pc, #560]	; (80073f8 <cppLoop+0xf50>)
 80071c8:	f7fa fe0c 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d058      	beq.n	800728e <cppLoop+0xde6>
			led.LR(-1, 1);
 80071dc:	2201      	movs	r2, #1
 80071de:	f04f 31ff 	mov.w	r1, #4294967295
 80071e2:	4884      	ldr	r0, [pc, #528]	; (80073f4 <cppLoop+0xf4c>)
 80071e4:	f7fa ff1e 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80071e8:	2064      	movs	r0, #100	; 0x64
 80071ea:	f000 fbc7 	bl	800797c <HAL_Delay>
			if(selector == 0){
 80071ee:	4b7e      	ldr	r3, [pc, #504]	; (80073e8 <cppLoop+0xf40>)
 80071f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d113      	bne.n	8007220 <cppLoop+0xd78>
				adj_kx = adj_kx - 0.00001;
 80071f8:	4b80      	ldr	r3, [pc, #512]	; (80073fc <cppLoop+0xf54>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7f9 f9bb 	bl	8000578 <__aeabi_f2d>
 8007202:	a377      	add	r3, pc, #476	; (adr r3, 80073e0 <cppLoop+0xf38>)
 8007204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007208:	f7f9 f856 	bl	80002b8 <__aeabi_dsub>
 800720c:	4603      	mov	r3, r0
 800720e:	460c      	mov	r4, r1
 8007210:	4618      	mov	r0, r3
 8007212:	4621      	mov	r1, r4
 8007214:	f7f9 fd00 	bl	8000c18 <__aeabi_d2f>
 8007218:	4602      	mov	r2, r0
 800721a:	4b78      	ldr	r3, [pc, #480]	; (80073fc <cppLoop+0xf54>)
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e02b      	b.n	8007278 <cppLoop+0xdd0>
			else if(selector == 1){
 8007220:	4b71      	ldr	r3, [pc, #452]	; (80073e8 <cppLoop+0xf40>)
 8007222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d113      	bne.n	8007252 <cppLoop+0xdaa>
				adj_ky = adj_ky - 0.00001;
 800722a:	4b70      	ldr	r3, [pc, #448]	; (80073ec <cppLoop+0xf44>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7f9 f9a2 	bl	8000578 <__aeabi_f2d>
 8007234:	a36a      	add	r3, pc, #424	; (adr r3, 80073e0 <cppLoop+0xf38>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f9 f83d 	bl	80002b8 <__aeabi_dsub>
 800723e:	4603      	mov	r3, r0
 8007240:	460c      	mov	r4, r1
 8007242:	4618      	mov	r0, r3
 8007244:	4621      	mov	r1, r4
 8007246:	f7f9 fce7 	bl	8000c18 <__aeabi_d2f>
 800724a:	4602      	mov	r2, r0
 800724c:	4b67      	ldr	r3, [pc, #412]	; (80073ec <cppLoop+0xf44>)
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e012      	b.n	8007278 <cppLoop+0xdd0>
				adj_kt = adj_kt - 0.00001;
 8007252:	4b67      	ldr	r3, [pc, #412]	; (80073f0 <cppLoop+0xf48>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4618      	mov	r0, r3
 8007258:	f7f9 f98e 	bl	8000578 <__aeabi_f2d>
 800725c:	a360      	add	r3, pc, #384	; (adr r3, 80073e0 <cppLoop+0xf38>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f829 	bl	80002b8 <__aeabi_dsub>
 8007266:	4603      	mov	r3, r0
 8007268:	460c      	mov	r4, r1
 800726a:	4618      	mov	r0, r3
 800726c:	4621      	mov	r1, r4
 800726e:	f7f9 fcd3 	bl	8000c18 <__aeabi_d2f>
 8007272:	4602      	mov	r2, r0
 8007274:	4b5e      	ldr	r3, [pc, #376]	; (80073f0 <cppLoop+0xf48>)
 8007276:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007278:	2152      	movs	r1, #82	; 0x52
 800727a:	485e      	ldr	r0, [pc, #376]	; (80073f4 <cppLoop+0xf4c>)
 800727c:	f7fa fe16 	bl	8001eac <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007280:	2200      	movs	r2, #0
 8007282:	f04f 31ff 	mov.w	r1, #4294967295
 8007286:	485b      	ldr	r0, [pc, #364]	; (80073f4 <cppLoop+0xf4c>)
 8007288:	f7fa fecc 	bl	8002024 <_ZN3LED2LREaa>
		break;
 800728c:	e224      	b.n	80076d8 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_D){
 800728e:	485a      	ldr	r0, [pc, #360]	; (80073f8 <cppLoop+0xf50>)
 8007290:	f7fa fda8 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8007294:	4603      	mov	r3, r0
 8007296:	2b04      	cmp	r3, #4
 8007298:	bf0c      	ite	eq
 800729a:	2301      	moveq	r3, #1
 800729c:	2300      	movne	r3, #0
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d048      	beq.n	8007336 <cppLoop+0xe8e>
			led.LR(-1, 1);
 80072a4:	2201      	movs	r2, #1
 80072a6:	f04f 31ff 	mov.w	r1, #4294967295
 80072aa:	4852      	ldr	r0, [pc, #328]	; (80073f4 <cppLoop+0xf4c>)
 80072ac:	f7fa feba 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80072b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80072b4:	f000 fb62 	bl	800797c <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 80072b8:	f107 030c 	add.w	r3, r7, #12
 80072bc:	2201      	movs	r2, #1
 80072be:	4950      	ldr	r1, [pc, #320]	; (8007400 <cppLoop+0xf58>)
 80072c0:	4850      	ldr	r0, [pc, #320]	; (8007404 <cppLoop+0xf5c>)
 80072c2:	f7fa f9df 	bl	8001684 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	2201      	movs	r2, #1
 80072cc:	494e      	ldr	r1, [pc, #312]	; (8007408 <cppLoop+0xf60>)
 80072ce:	484d      	ldr	r0, [pc, #308]	; (8007404 <cppLoop+0xf5c>)
 80072d0:	f7fa f9d8 	bl	8001684 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 80072d4:	1d3b      	adds	r3, r7, #4
 80072d6:	2201      	movs	r2, #1
 80072d8:	494c      	ldr	r1, [pc, #304]	; (800740c <cppLoop+0xf64>)
 80072da:	484a      	ldr	r0, [pc, #296]	; (8007404 <cppLoop+0xf5c>)
 80072dc:	f7fa f9d2 	bl	8001684 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7f9 f948 	bl	8000578 <__aeabi_f2d>
 80072e8:	4604      	mov	r4, r0
 80072ea:	460d      	mov	r5, r1
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f9 f942 	bl	8000578 <__aeabi_f2d>
 80072f4:	4680      	mov	r8, r0
 80072f6:	4689      	mov	r9, r1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7f9 f93c 	bl	8000578 <__aeabi_f2d>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	ec43 2b12 	vmov	d2, r2, r3
 8007308:	ec49 8b11 	vmov	d1, r8, r9
 800730c:	ec45 4b10 	vmov	d0, r4, r5
 8007310:	483f      	ldr	r0, [pc, #252]	; (8007410 <cppLoop+0xf68>)
 8007312:	f7fc fcf3 	bl	8003cfc <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4a38      	ldr	r2, [pc, #224]	; (80073fc <cppLoop+0xf54>)
 800731a:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	4a33      	ldr	r2, [pc, #204]	; (80073ec <cppLoop+0xf44>)
 8007320:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a32      	ldr	r2, [pc, #200]	; (80073f0 <cppLoop+0xf48>)
 8007326:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8007328:	2200      	movs	r2, #0
 800732a:	f04f 31ff 	mov.w	r1, #4294967295
 800732e:	4831      	ldr	r0, [pc, #196]	; (80073f4 <cppLoop+0xf4c>)
 8007330:	f7fa fe78 	bl	8002024 <_ZN3LED2LREaa>
		break;
 8007334:	e1d0      	b.n	80076d8 <cppLoop+0x1230>
		else if(joy_stick.getValue() == JOY_C){
 8007336:	4830      	ldr	r0, [pc, #192]	; (80073f8 <cppLoop+0xf50>)
 8007338:	f7fa fd54 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 800733c:	4603      	mov	r3, r0
 800733e:	2b02      	cmp	r3, #2
 8007340:	bf0c      	ite	eq
 8007342:	2301      	moveq	r3, #1
 8007344:	2300      	movne	r3, #0
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 81c5 	beq.w	80076d8 <cppLoop+0x1230>
			led.LR(-1, 1);
 800734e:	2201      	movs	r2, #1
 8007350:	f04f 31ff 	mov.w	r1, #4294967295
 8007354:	4827      	ldr	r0, [pc, #156]	; (80073f4 <cppLoop+0xf4c>)
 8007356:	f7fa fe65 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800735a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800735e:	f000 fb0d 	bl	800797c <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8007362:	2300      	movs	r3, #0
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	4b25      	ldr	r3, [pc, #148]	; (80073fc <cppLoop+0xf54>)
 8007368:	2201      	movs	r2, #1
 800736a:	4925      	ldr	r1, [pc, #148]	; (8007400 <cppLoop+0xf58>)
 800736c:	4825      	ldr	r0, [pc, #148]	; (8007404 <cppLoop+0xf5c>)
 800736e:	f7fa f923 	bl	80015b8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8007372:	2300      	movs	r3, #0
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <cppLoop+0xf44>)
 8007378:	2201      	movs	r2, #1
 800737a:	4923      	ldr	r1, [pc, #140]	; (8007408 <cppLoop+0xf60>)
 800737c:	4821      	ldr	r0, [pc, #132]	; (8007404 <cppLoop+0xf5c>)
 800737e:	f7fa f91b 	bl	80015b8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 8007382:	2300      	movs	r3, #0
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4b1a      	ldr	r3, [pc, #104]	; (80073f0 <cppLoop+0xf48>)
 8007388:	2201      	movs	r2, #1
 800738a:	4920      	ldr	r1, [pc, #128]	; (800740c <cppLoop+0xf64>)
 800738c:	481d      	ldr	r0, [pc, #116]	; (8007404 <cppLoop+0xf5c>)
 800738e:	f7fa f913 	bl	80015b8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 8007392:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <cppLoop+0xf54>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4618      	mov	r0, r3
 8007398:	f7f9 f8ee 	bl	8000578 <__aeabi_f2d>
 800739c:	4604      	mov	r4, r0
 800739e:	460d      	mov	r5, r1
 80073a0:	4b12      	ldr	r3, [pc, #72]	; (80073ec <cppLoop+0xf44>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7f9 f8e7 	bl	8000578 <__aeabi_f2d>
 80073aa:	4680      	mov	r8, r0
 80073ac:	4689      	mov	r9, r1
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <cppLoop+0xf48>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7f9 f8e0 	bl	8000578 <__aeabi_f2d>
 80073b8:	4602      	mov	r2, r0
 80073ba:	460b      	mov	r3, r1
 80073bc:	ec43 2b12 	vmov	d2, r2, r3
 80073c0:	ec49 8b11 	vmov	d1, r8, r9
 80073c4:	ec45 4b10 	vmov	d0, r4, r5
 80073c8:	4811      	ldr	r0, [pc, #68]	; (8007410 <cppLoop+0xf68>)
 80073ca:	f7fc fc97 	bl	8003cfc <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 80073ce:	2200      	movs	r2, #0
 80073d0:	f04f 31ff 	mov.w	r1, #4294967295
 80073d4:	4807      	ldr	r0, [pc, #28]	; (80073f4 <cppLoop+0xf4c>)
 80073d6:	f7fa fe25 	bl	8002024 <_ZN3LED2LREaa>
		break;
 80073da:	e17d      	b.n	80076d8 <cppLoop+0x1230>
 80073dc:	f3af 8000 	nop.w
 80073e0:	88e368f1 	.word	0x88e368f1
 80073e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80073e8:	200335c6 	.word	0x200335c6
 80073ec:	200335e8 	.word	0x200335e8
 80073f0:	200335f0 	.word	0x200335f0
 80073f4:	200005bc 	.word	0x200005bc
 80073f8:	200005b0 	.word	0x200005b0
 80073fc:	200335e0 	.word	0x200335e0
 8007400:	08017ca0 	.word	0x08017ca0
 8007404:	08017be4 	.word	0x08017be4
 8007408:	08017ca8 	.word	0x08017ca8
 800740c:	08017cb0 	.word	0x08017cb0
 8007410:	2001be98 	.word	0x2001be98

	case 9:
		led.fullColor('M');
 8007414:	214d      	movs	r1, #77	; 0x4d
 8007416:	48c0      	ldr	r0, [pc, #768]	; (8007718 <cppLoop+0x1270>)
 8007418:	f7fa fd48 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 800741c:	f7f9 fe40 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007420:	2100      	movs	r1, #0
 8007422:	2000      	movs	r0, #0
 8007424:	f7f9 fe4c 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007428:	48bc      	ldr	r0, [pc, #752]	; (800771c <cppLoop+0x1274>)
 800742a:	f7f9 fe73 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800742e:	2101      	movs	r1, #1
 8007430:	2000      	movs	r0, #0
 8007432:	f7f9 fe45 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007436:	48ba      	ldr	r0, [pc, #744]	; (8007720 <cppLoop+0x1278>)
 8007438:	f7f9 fe6c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800743c:	48b9      	ldr	r0, [pc, #740]	; (8007724 <cppLoop+0x127c>)
 800743e:	f7fa fcd1 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8007442:	4603      	mov	r3, r0
 8007444:	2b02      	cmp	r3, #2
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 8144 	beq.w	80076dc <cppLoop+0x1234>
			HAL_Delay(1500);
 8007454:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007458:	f000 fa90 	bl	800797c <HAL_Delay>
			led.LR(-1, 1);
 800745c:	2201      	movs	r2, #1
 800745e:	f04f 31ff 	mov.w	r1, #4294967295
 8007462:	48ad      	ldr	r0, [pc, #692]	; (8007718 <cppLoop+0x1270>)
 8007464:	f7fa fdde 	bl	8002024 <_ZN3LED2LREaa>

			logger.start();
 8007468:	48af      	ldr	r0, [pc, #700]	; (8007728 <cppLoop+0x1280>)
 800746a:	f7fc f908 	bl	800367e <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 800746e:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8007700 <cppLoop+0x1258>
 8007472:	ed9f 0ba5 	vldr	d0, [pc, #660]	; 8007708 <cppLoop+0x1260>
 8007476:	48ad      	ldr	r0, [pc, #692]	; (800772c <cppLoop+0x1284>)
 8007478:	f7fc f996 	bl	80037a8 <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 800747c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007480:	f000 fa7c 	bl	800797c <HAL_Delay>

			logger.stop();
 8007484:	48a8      	ldr	r0, [pc, #672]	; (8007728 <cppLoop+0x1280>)
 8007486:	f7fc f90b 	bl	80036a0 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800748a:	ed9f 1ba1 	vldr	d1, [pc, #644]	; 8007710 <cppLoop+0x1268>
 800748e:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8007710 <cppLoop+0x1268>
 8007492:	48a6      	ldr	r0, [pc, #664]	; (800772c <cppLoop+0x1284>)
 8007494:	f7fc f988 	bl	80037a8 <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007498:	4aa5      	ldr	r2, [pc, #660]	; (8007730 <cppLoop+0x1288>)
 800749a:	49a6      	ldr	r1, [pc, #664]	; (8007734 <cppLoop+0x128c>)
 800749c:	48a2      	ldr	r0, [pc, #648]	; (8007728 <cppLoop+0x1280>)
 800749e:	f7fc f807 	bl	80034b0 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80074a2:	2200      	movs	r2, #0
 80074a4:	f04f 31ff 	mov.w	r1, #4294967295
 80074a8:	489b      	ldr	r0, [pc, #620]	; (8007718 <cppLoop+0x1270>)
 80074aa:	f7fa fdbb 	bl	8002024 <_ZN3LED2LREaa>
		}
		break;
 80074ae:	e115      	b.n	80076dc <cppLoop+0x1234>

	case 10:
		led.fullColor('Y');
 80074b0:	2159      	movs	r1, #89	; 0x59
 80074b2:	4899      	ldr	r0, [pc, #612]	; (8007718 <cppLoop+0x1270>)
 80074b4:	f7fa fcfa 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 80074b8:	f7f9 fdf2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80074bc:	2100      	movs	r1, #0
 80074be:	2000      	movs	r0, #0
 80074c0:	f7f9 fdfe 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80074c4:	489c      	ldr	r0, [pc, #624]	; (8007738 <cppLoop+0x1290>)
 80074c6:	f7f9 fe25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80074ca:	2101      	movs	r1, #1
 80074cc:	2000      	movs	r0, #0
 80074ce:	f7f9 fdf7 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80074d2:	489a      	ldr	r0, [pc, #616]	; (800773c <cppLoop+0x1294>)
 80074d4:	f7f9 fe1e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80074d8:	4892      	ldr	r0, [pc, #584]	; (8007724 <cppLoop+0x127c>)
 80074da:	f7fa fc83 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	bf0c      	ite	eq
 80074e4:	2301      	moveq	r3, #1
 80074e6:	2300      	movne	r3, #0
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	f000 80f8 	beq.w	80076e0 <cppLoop+0x1238>
			HAL_Delay(1500);
 80074f0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80074f4:	f000 fa42 	bl	800797c <HAL_Delay>
			led.LR(-1, 1);
 80074f8:	2201      	movs	r2, #1
 80074fa:	f04f 31ff 	mov.w	r1, #4294967295
 80074fe:	4886      	ldr	r0, [pc, #536]	; (8007718 <cppLoop+0x1270>)
 8007500:	f7fa fd90 	bl	8002024 <_ZN3LED2LREaa>

			logger.start();
 8007504:	4888      	ldr	r0, [pc, #544]	; (8007728 <cppLoop+0x1280>)
 8007506:	f7fc f8ba 	bl	800367e <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800750a:	488d      	ldr	r0, [pc, #564]	; (8007740 <cppLoop+0x1298>)
 800750c:	f7fd f8fd 	bl	800470a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007510:	eddf 0a8c 	vldr	s1, [pc, #560]	; 8007744 <cppLoop+0x129c>
 8007514:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007518:	4889      	ldr	r0, [pc, #548]	; (8007740 <cppLoop+0x1298>)
 800751a:	f7fd f889 	bl	8004630 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 800751e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007522:	f000 fa2b 	bl	800797c <HAL_Delay>

			logger.stop();
 8007526:	4880      	ldr	r0, [pc, #512]	; (8007728 <cppLoop+0x1280>)
 8007528:	f7fc f8ba 	bl	80036a0 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 800752c:	4884      	ldr	r0, [pc, #528]	; (8007740 <cppLoop+0x1298>)
 800752e:	f7fd f8ff 	bl	8004730 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8007532:	4a85      	ldr	r2, [pc, #532]	; (8007748 <cppLoop+0x12a0>)
 8007534:	497f      	ldr	r1, [pc, #508]	; (8007734 <cppLoop+0x128c>)
 8007536:	487c      	ldr	r0, [pc, #496]	; (8007728 <cppLoop+0x1280>)
 8007538:	f7fb ffba 	bl	80034b0 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800753c:	2200      	movs	r2, #0
 800753e:	f04f 31ff 	mov.w	r1, #4294967295
 8007542:	4875      	ldr	r0, [pc, #468]	; (8007718 <cppLoop+0x1270>)
 8007544:	f7fa fd6e 	bl	8002024 <_ZN3LED2LREaa>
		}

		break;
 8007548:	e0ca      	b.n	80076e0 <cppLoop+0x1238>

	case 11:
		led.fullColor('C');
 800754a:	2143      	movs	r1, #67	; 0x43
 800754c:	4872      	ldr	r0, [pc, #456]	; (8007718 <cppLoop+0x1270>)
 800754e:	f7fa fcad 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8007552:	f7f9 fda5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007556:	2100      	movs	r1, #0
 8007558:	2000      	movs	r0, #0
 800755a:	f7f9 fdb1 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800755e:	487b      	ldr	r0, [pc, #492]	; (800774c <cppLoop+0x12a4>)
 8007560:	f7f9 fdd8 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007564:	2101      	movs	r1, #1
 8007566:	2000      	movs	r0, #0
 8007568:	f7f9 fdaa 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800756c:	4878      	ldr	r0, [pc, #480]	; (8007750 <cppLoop+0x12a8>)
 800756e:	f7f9 fdd1 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8007572:	486c      	ldr	r0, [pc, #432]	; (8007724 <cppLoop+0x127c>)
 8007574:	f7fa fc36 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 8007578:	4603      	mov	r3, r0
 800757a:	2b02      	cmp	r3, #2
 800757c:	bf0c      	ite	eq
 800757e:	2301      	moveq	r3, #1
 8007580:	2300      	movne	r3, #0
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80ad 	beq.w	80076e4 <cppLoop+0x123c>
			HAL_Delay(500);
 800758a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800758e:	f000 f9f5 	bl	800797c <HAL_Delay>
			led.LR(-1, 1);
 8007592:	2201      	movs	r2, #1
 8007594:	f04f 31ff 	mov.w	r1, #4294967295
 8007598:	485f      	ldr	r0, [pc, #380]	; (8007718 <cppLoop+0x1270>)
 800759a:	f7fa fd43 	bl	8002024 <_ZN3LED2LREaa>

			line_trace.createVelocityTabele();
 800759e:	486d      	ldr	r0, [pc, #436]	; (8007754 <cppLoop+0x12ac>)
 80075a0:	f7fb fb06 	bl	8002bb0 <_ZN9LineTrace20createVelocityTabeleEv>

			led.LR(-1, 0);
 80075a4:	2200      	movs	r2, #0
 80075a6:	f04f 31ff 	mov.w	r1, #4294967295
 80075aa:	485b      	ldr	r0, [pc, #364]	; (8007718 <cppLoop+0x1270>)
 80075ac:	f7fa fd3a 	bl	8002024 <_ZN3LED2LREaa>
		}

		break;
 80075b0:	e098      	b.n	80076e4 <cppLoop+0x123c>

	case 12:
		led.fullColor('R');
 80075b2:	2152      	movs	r1, #82	; 0x52
 80075b4:	4858      	ldr	r0, [pc, #352]	; (8007718 <cppLoop+0x1270>)
 80075b6:	f7fa fc79 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 80075ba:	f7f9 fd71 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075be:	2100      	movs	r1, #0
 80075c0:	2000      	movs	r0, #0
 80075c2:	f7f9 fd7d 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80075c6:	4864      	ldr	r0, [pc, #400]	; (8007758 <cppLoop+0x12b0>)
 80075c8:	f7f9 fda4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075cc:	2101      	movs	r1, #1
 80075ce:	2000      	movs	r0, #0
 80075d0:	f7f9 fd76 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80075d4:	4852      	ldr	r0, [pc, #328]	; (8007720 <cppLoop+0x1278>)
 80075d6:	f7f9 fd9d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80075da:	4852      	ldr	r0, [pc, #328]	; (8007724 <cppLoop+0x127c>)
 80075dc:	f7fa fc02 	bl	8001de4 <_ZN8JoyStick8getValueEv>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	bf0c      	ite	eq
 80075e6:	2301      	moveq	r3, #1
 80075e8:	2300      	movne	r3, #0
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d07b      	beq.n	80076e8 <cppLoop+0x1240>
			led.LR(-1, 1);
 80075f0:	2201      	movs	r2, #1
 80075f2:	f04f 31ff 	mov.w	r1, #4294967295
 80075f6:	4848      	ldr	r0, [pc, #288]	; (8007718 <cppLoop+0x1270>)
 80075f8:	f7fa fd14 	bl	8002024 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 80075fc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007600:	f000 f9bc 	bl	800797c <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8007604:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800775c <cppLoop+0x12b4>
 8007608:	4855      	ldr	r0, [pc, #340]	; (8007760 <cppLoop+0x12b8>)
 800760a:	f7fc fe9d 	bl	8004348 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 800760e:	4854      	ldr	r0, [pc, #336]	; (8007760 <cppLoop+0x12b8>)
 8007610:	f7fc feaa 	bl	8004368 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8007614:	f244 405c 	movw	r0, #17500	; 0x445c
 8007618:	f000 f9b0 	bl	800797c <HAL_Delay>
			sys_ident.stop();
 800761c:	4850      	ldr	r0, [pc, #320]	; (8007760 <cppLoop+0x12b8>)
 800761e:	f7fc feb7 	bl	8004390 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8007622:	484f      	ldr	r0, [pc, #316]	; (8007760 <cppLoop+0x12b8>)
 8007624:	f7fc fe1e 	bl	8004264 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007628:	2200      	movs	r2, #0
 800762a:	f04f 31ff 	mov.w	r1, #4294967295
 800762e:	483a      	ldr	r0, [pc, #232]	; (8007718 <cppLoop+0x1270>)
 8007630:	f7fa fcf8 	bl	8002024 <_ZN3LED2LREaa>
		}

		break;
 8007634:	e058      	b.n	80076e8 <cppLoop+0x1240>

	case 13:
		led.fullColor('G');
 8007636:	2147      	movs	r1, #71	; 0x47
 8007638:	4837      	ldr	r0, [pc, #220]	; (8007718 <cppLoop+0x1270>)
 800763a:	f7fa fc37 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 800763e:	f7f9 fd2f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007642:	2100      	movs	r1, #0
 8007644:	2000      	movs	r0, #0
 8007646:	f7f9 fd3b 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 800764a:	4846      	ldr	r0, [pc, #280]	; (8007764 <cppLoop+0x12bc>)
 800764c:	f7f9 fd62 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007650:	2101      	movs	r1, #1
 8007652:	2000      	movs	r0, #0
 8007654:	f7f9 fd34 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007658:	4843      	ldr	r0, [pc, #268]	; (8007768 <cppLoop+0x12c0>)
 800765a:	f7f9 fd5b 	bl	8001114 <lcd_printf>

		break;
 800765e:	e044      	b.n	80076ea <cppLoop+0x1242>

	case 14:
		led.fullColor('B');
 8007660:	2142      	movs	r1, #66	; 0x42
 8007662:	482d      	ldr	r0, [pc, #180]	; (8007718 <cppLoop+0x1270>)
 8007664:	f7fa fc22 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8007668:	f7f9 fd1a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800766c:	2100      	movs	r1, #0
 800766e:	2000      	movs	r0, #0
 8007670:	f7f9 fd26 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8007674:	483d      	ldr	r0, [pc, #244]	; (800776c <cppLoop+0x12c4>)
 8007676:	f7f9 fd4d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800767a:	2101      	movs	r1, #1
 800767c:	2000      	movs	r0, #0
 800767e:	f7f9 fd1f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007682:	4839      	ldr	r0, [pc, #228]	; (8007768 <cppLoop+0x12c0>)
 8007684:	f7f9 fd46 	bl	8001114 <lcd_printf>

		break;
 8007688:	e02f      	b.n	80076ea <cppLoop+0x1242>

	case 15:
		led.fullColor('M');
 800768a:	214d      	movs	r1, #77	; 0x4d
 800768c:	4822      	ldr	r0, [pc, #136]	; (8007718 <cppLoop+0x1270>)
 800768e:	f7fa fc0d 	bl	8001eac <_ZN3LED9fullColorEc>

		lcd_clear();
 8007692:	f7f9 fd05 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007696:	2100      	movs	r1, #0
 8007698:	2000      	movs	r0, #0
 800769a:	f7f9 fd11 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 800769e:	4834      	ldr	r0, [pc, #208]	; (8007770 <cppLoop+0x12c8>)
 80076a0:	f7f9 fd38 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80076a4:	2101      	movs	r1, #1
 80076a6:	2000      	movs	r0, #0
 80076a8:	f7f9 fd0a 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80076ac:	482e      	ldr	r0, [pc, #184]	; (8007768 <cppLoop+0x12c0>)
 80076ae:	f7f9 fd31 	bl	8001114 <lcd_printf>

		break;
 80076b2:	e01a      	b.n	80076ea <cppLoop+0x1242>

	default:
		break;
 80076b4:	bf00      	nop
 80076b6:	e018      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076b8:	bf00      	nop
 80076ba:	e016      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076bc:	bf00      	nop
 80076be:	e014      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076c0:	bf00      	nop
 80076c2:	e012      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076c4:	bf00      	nop
 80076c6:	e010      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076c8:	bf00      	nop
 80076ca:	e00e      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076cc:	bf00      	nop
 80076ce:	e00c      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076d0:	bf00      	nop
 80076d2:	e00a      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076d4:	bf00      	nop
 80076d6:	e008      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076d8:	bf00      	nop
 80076da:	e006      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076dc:	bf00      	nop
 80076de:	e004      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076e0:	bf00      	nop
 80076e2:	e002      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076e4:	bf00      	nop
 80076e6:	e000      	b.n	80076ea <cppLoop+0x1242>
		break;
 80076e8:	bf00      	nop

	}

	HAL_Delay(30);
 80076ea:	201e      	movs	r0, #30
 80076ec:	f000 f946 	bl	800797c <HAL_Delay>

}
 80076f0:	bf00      	nop
 80076f2:	3724      	adds	r7, #36	; 0x24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	33333333 	.word	0x33333333
 8007704:	bfd33333 	.word	0xbfd33333
 8007708:	33333333 	.word	0x33333333
 800770c:	3fd33333 	.word	0x3fd33333
	...
 8007718:	200005bc 	.word	0x200005bc
 800771c:	08017cb8 	.word	0x08017cb8
 8007720:	08017c68 	.word	0x08017c68
 8007724:	200005b0 	.word	0x200005b0
 8007728:	200005e0 	.word	0x200005e0
 800772c:	200005b8 	.word	0x200005b8
 8007730:	08017cc0 	.word	0x08017cc0
 8007734:	08017ccc 	.word	0x08017ccc
 8007738:	08017cd8 	.word	0x08017cd8
 800773c:	08017cdc 	.word	0x08017cdc
 8007740:	20015dc8 	.word	0x20015dc8
 8007744:	00000000 	.word	0x00000000
 8007748:	08017ce8 	.word	0x08017ce8
 800774c:	08017cf4 	.word	0x08017cf4
 8007750:	08017d00 	.word	0x08017d00
 8007754:	20015e48 	.word	0x20015e48
 8007758:	08017d0c 	.word	0x08017d0c
 800775c:	3e99999a 	.word	0x3e99999a
 8007760:	2001bc8c 	.word	0x2001bc8c
 8007764:	08017d14 	.word	0x08017d14
 8007768:	08017d20 	.word	0x08017d20
 800776c:	08017d2c 	.word	0x08017d2c
 8007770:	08017d38 	.word	0x08017d38

08007774 <_Z41__static_initialization_and_destruction_0ii>:
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af04      	add	r7, sp, #16
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d13b      	bne.n	80077fc <_Z41__static_initialization_and_destruction_0ii+0x88>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800778a:	4293      	cmp	r3, r2
 800778c:	d136      	bne.n	80077fc <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 800778e:	481d      	ldr	r0, [pc, #116]	; (8007804 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007790:	f7fa fc80 	bl	8002094 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8007794:	481c      	ldr	r0, [pc, #112]	; (8007808 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007796:	f7fc fbd7 	bl	8003f48 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800779a:	481c      	ldr	r0, [pc, #112]	; (800780c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800779c:	f7fa fb16 	bl	8001dcc <_ZN8JoyStickC1Ev>
Motor motor;
 80077a0:	481b      	ldr	r0, [pc, #108]	; (8007810 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80077a2:	f7fb ff8e 	bl	80036c2 <_ZN5MotorC1Ev>
IMU imu;
 80077a6:	481b      	ldr	r0, [pc, #108]	; (8007814 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80077a8:	f7fa f91e 	bl	80019e8 <_ZN3IMUC1Ev>
Logger logger;
 80077ac:	481a      	ldr	r0, [pc, #104]	; (8007818 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80077ae:	f7fb fd2d 	bl	800320c <_ZN6LoggerC1Ev>
Encoder encoder;
 80077b2:	481a      	ldr	r0, [pc, #104]	; (800781c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80077b4:	f7f9 fcce 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80077b8:	4b16      	ldr	r3, [pc, #88]	; (8007814 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80077ba:	4a18      	ldr	r2, [pc, #96]	; (800781c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80077bc:	4914      	ldr	r1, [pc, #80]	; (8007810 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80077be:	4818      	ldr	r0, [pc, #96]	; (8007820 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80077c0:	f7fc fe0a 	bl	80043d8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80077c4:	4b16      	ldr	r3, [pc, #88]	; (8007820 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80077c6:	4a13      	ldr	r2, [pc, #76]	; (8007814 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80077c8:	4914      	ldr	r1, [pc, #80]	; (800781c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80077ca:	4816      	ldr	r0, [pc, #88]	; (8007824 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80077cc:	f7fc f85e 	bl	800388c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 80077d0:	4b11      	ldr	r3, [pc, #68]	; (8007818 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80077d2:	9303      	str	r3, [sp, #12]
 80077d4:	4b13      	ldr	r3, [pc, #76]	; (8007824 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80077d6:	9302      	str	r3, [sp, #8]
 80077d8:	4b10      	ldr	r3, [pc, #64]	; (800781c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80077da:	9301      	str	r3, [sp, #4]
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80077e2:	4a08      	ldr	r2, [pc, #32]	; (8007804 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80077e4:	490a      	ldr	r1, [pc, #40]	; (8007810 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80077e6:	4810      	ldr	r0, [pc, #64]	; (8007828 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80077e8:	f7fa ff82 	bl	80026f0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 80077ec:	4a08      	ldr	r2, [pc, #32]	; (8007810 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80077ee:	490a      	ldr	r1, [pc, #40]	; (8007818 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80077f0:	480e      	ldr	r0, [pc, #56]	; (800782c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80077f2:	f7fc fced 	bl	80041d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80077f6:	480e      	ldr	r0, [pc, #56]	; (8007830 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80077f8:	f7fc f9c8 	bl	8003b8c <_ZN13PathFollowingC1Ev>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	200002b0 	.word	0x200002b0
 8007808:	200005a8 	.word	0x200005a8
 800780c:	200005b0 	.word	0x200005b0
 8007810:	200005b8 	.word	0x200005b8
 8007814:	200005cc 	.word	0x200005cc
 8007818:	200005e0 	.word	0x200005e0
 800781c:	20015da8 	.word	0x20015da8
 8007820:	20015dc8 	.word	0x20015dc8
 8007824:	20015e08 	.word	0x20015e08
 8007828:	20015e48 	.word	0x20015e48
 800782c:	2001bc8c 	.word	0x2001bc8c
 8007830:	2001be98 	.word	0x2001be98

08007834 <_GLOBAL__sub_I_line_sensor>:
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0
 8007838:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800783c:	2001      	movs	r0, #1
 800783e:	f7ff ff99 	bl	8007774 <_Z41__static_initialization_and_destruction_0ii>
 8007842:	bd80      	pop	{r7, pc}

08007844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800787c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800784a:	e003      	b.n	8007854 <LoopCopyDataInit>

0800784c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800784c:	4b0c      	ldr	r3, [pc, #48]	; (8007880 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800784e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007852:	3104      	adds	r1, #4

08007854 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007854:	480b      	ldr	r0, [pc, #44]	; (8007884 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800785a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800785c:	d3f6      	bcc.n	800784c <CopyDataInit>
  ldr  r2, =_sbss
 800785e:	4a0b      	ldr	r2, [pc, #44]	; (800788c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007860:	e002      	b.n	8007868 <LoopFillZerobss>

08007862 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007862:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007864:	f842 3b04 	str.w	r3, [r2], #4

08007868 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007868:	4b09      	ldr	r3, [pc, #36]	; (8007890 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800786a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800786c:	d3f9      	bcc.n	8007862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800786e:	f7fe fcad 	bl	80061cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007872:	f00b fdd5 	bl	8013420 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007876:	f7fc ffe7 	bl	8004848 <main>
  bx  lr    
 800787a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800787c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007880:	08018338 	.word	0x08018338
  ldr  r0, =_sdata
 8007884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007888:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800788c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007890:	20037fd8 	.word	0x20037fd8

08007894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007894:	e7fe      	b.n	8007894 <ADC_IRQHandler>
	...

08007898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800789c:	4b0e      	ldr	r3, [pc, #56]	; (80078d8 <HAL_Init+0x40>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a0d      	ldr	r2, [pc, #52]	; (80078d8 <HAL_Init+0x40>)
 80078a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80078a8:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <HAL_Init+0x40>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <HAL_Init+0x40>)
 80078ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <HAL_Init+0x40>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a07      	ldr	r2, [pc, #28]	; (80078d8 <HAL_Init+0x40>)
 80078ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80078c0:	2003      	movs	r0, #3
 80078c2:	f000 fd51 	bl	8008368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80078c6:	2000      	movs	r0, #0
 80078c8:	f000 f808 	bl	80078dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80078cc:	f7fd fece 	bl	800566c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40023c00 	.word	0x40023c00

080078dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80078e4:	4b12      	ldr	r3, [pc, #72]	; (8007930 <HAL_InitTick+0x54>)
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4b12      	ldr	r3, [pc, #72]	; (8007934 <HAL_InitTick+0x58>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	4619      	mov	r1, r3
 80078ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80078f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fd69 	bl	80083d2 <HAL_SYSTICK_Config>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e00e      	b.n	8007928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b0f      	cmp	r3, #15
 800790e:	d80a      	bhi.n	8007926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007910:	2200      	movs	r2, #0
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	f000 fd31 	bl	800837e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800791c:	4a06      	ldr	r2, [pc, #24]	; (8007938 <HAL_InitTick+0x5c>)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	e000      	b.n	8007928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
}
 8007928:	4618      	mov	r0, r3
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20000000 	.word	0x20000000
 8007934:	20000008 	.word	0x20000008
 8007938:	20000004 	.word	0x20000004

0800793c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800793c:	b480      	push	{r7}
 800793e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007940:	4b06      	ldr	r3, [pc, #24]	; (800795c <HAL_IncTick+0x20>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	461a      	mov	r2, r3
 8007946:	4b06      	ldr	r3, [pc, #24]	; (8007960 <HAL_IncTick+0x24>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4413      	add	r3, r2
 800794c:	4a04      	ldr	r2, [pc, #16]	; (8007960 <HAL_IncTick+0x24>)
 800794e:	6013      	str	r3, [r2, #0]
}
 8007950:	bf00      	nop
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	20000008 	.word	0x20000008
 8007960:	20035f60 	.word	0x20035f60

08007964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  return uwTick;
 8007968:	4b03      	ldr	r3, [pc, #12]	; (8007978 <HAL_GetTick+0x14>)
 800796a:	681b      	ldr	r3, [r3, #0]
}
 800796c:	4618      	mov	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20035f60 	.word	0x20035f60

0800797c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b084      	sub	sp, #16
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007984:	f7ff ffee 	bl	8007964 <HAL_GetTick>
 8007988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d005      	beq.n	80079a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <HAL_Delay+0x40>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80079a2:	bf00      	nop
 80079a4:	f7ff ffde 	bl	8007964 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d8f7      	bhi.n	80079a4 <HAL_Delay+0x28>
  {
  }
}
 80079b4:	bf00      	nop
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	20000008 	.word	0x20000008

080079c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e033      	b.n	8007a3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7fd fe6c 	bl	80056bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d118      	bne.n	8007a30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a06:	f023 0302 	bic.w	r3, r3, #2
 8007a0a:	f043 0202 	orr.w	r2, r3, #2
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa5a 	bl	8007ecc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	f023 0303 	bic.w	r3, r3, #3
 8007a26:	f043 0201 	orr.w	r2, r3, #1
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	641a      	str	r2, [r3, #64]	; 0x40
 8007a2e:	e001      	b.n	8007a34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_ADC_Start_DMA+0x1e>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e0cc      	b.n	8007c00 <HAL_ADC_Start_DMA+0x1b8>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d018      	beq.n	8007aae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689a      	ldr	r2, [r3, #8]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007a8c:	4b5e      	ldr	r3, [pc, #376]	; (8007c08 <HAL_ADC_Start_DMA+0x1c0>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a5e      	ldr	r2, [pc, #376]	; (8007c0c <HAL_ADC_Start_DMA+0x1c4>)
 8007a92:	fba2 2303 	umull	r2, r3, r2, r3
 8007a96:	0c9a      	lsrs	r2, r3, #18
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007aa0:	e002      	b.n	8007aa8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	3b01      	subs	r3, #1
 8007aa6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f9      	bne.n	8007aa2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	f040 80a0 	bne.w	8007bfe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007ac6:	f023 0301 	bic.w	r3, r3, #1
 8007aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d007      	beq.n	8007af0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ae8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afc:	d106      	bne.n	8007b0c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	f023 0206 	bic.w	r2, r3, #6
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	645a      	str	r2, [r3, #68]	; 0x44
 8007b0a:	e002      	b.n	8007b12 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b1a:	4b3d      	ldr	r3, [pc, #244]	; (8007c10 <HAL_ADC_Start_DMA+0x1c8>)
 8007b1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b22:	4a3c      	ldr	r2, [pc, #240]	; (8007c14 <HAL_ADC_Start_DMA+0x1cc>)
 8007b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	4a3b      	ldr	r2, [pc, #236]	; (8007c18 <HAL_ADC_Start_DMA+0x1d0>)
 8007b2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b32:	4a3a      	ldr	r2, [pc, #232]	; (8007c1c <HAL_ADC_Start_DMA+0x1d4>)
 8007b34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007b4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	334c      	adds	r3, #76	; 0x4c
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f000 fcea 	bl	8008548 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f003 031f 	and.w	r3, r3, #31
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d12a      	bne.n	8007bd6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <HAL_ADC_Start_DMA+0x1d8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d015      	beq.n	8007bb6 <HAL_ADC_Start_DMA+0x16e>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a25      	ldr	r2, [pc, #148]	; (8007c24 <HAL_ADC_Start_DMA+0x1dc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d105      	bne.n	8007ba0 <HAL_ADC_Start_DMA+0x158>
 8007b94:	4b1e      	ldr	r3, [pc, #120]	; (8007c10 <HAL_ADC_Start_DMA+0x1c8>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f003 031f 	and.w	r3, r3, #31
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a20      	ldr	r2, [pc, #128]	; (8007c28 <HAL_ADC_Start_DMA+0x1e0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d129      	bne.n	8007bfe <HAL_ADC_Start_DMA+0x1b6>
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <HAL_ADC_Start_DMA+0x1c8>)
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f003 031f 	and.w	r3, r3, #31
 8007bb2:	2b0f      	cmp	r3, #15
 8007bb4:	d823      	bhi.n	8007bfe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d11c      	bne.n	8007bfe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007bd2:	609a      	str	r2, [r3, #8]
 8007bd4:	e013      	b.n	8007bfe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a11      	ldr	r2, [pc, #68]	; (8007c20 <HAL_ADC_Start_DMA+0x1d8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10e      	bne.n	8007bfe <HAL_ADC_Start_DMA+0x1b6>
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d107      	bne.n	8007bfe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007bfc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	20000000 	.word	0x20000000
 8007c0c:	431bde83 	.word	0x431bde83
 8007c10:	40012300 	.word	0x40012300
 8007c14:	080080c5 	.word	0x080080c5
 8007c18:	0800817f 	.word	0x0800817f
 8007c1c:	0800819b 	.word	0x0800819b
 8007c20:	40012000 	.word	0x40012000
 8007c24:	40012100 	.word	0x40012100
 8007c28:	40012200 	.word	0x40012200

08007c2c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d101      	bne.n	8007c84 <HAL_ADC_ConfigChannel+0x1c>
 8007c80:	2302      	movs	r3, #2
 8007c82:	e113      	b.n	8007eac <HAL_ADC_ConfigChannel+0x244>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b09      	cmp	r3, #9
 8007c92:	d925      	bls.n	8007ce0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68d9      	ldr	r1, [r3, #12]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3b1e      	subs	r3, #30
 8007caa:	2207      	movs	r2, #7
 8007cac:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb0:	43da      	mvns	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	400a      	ands	r2, r1
 8007cb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68d9      	ldr	r1, [r3, #12]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	4618      	mov	r0, r3
 8007ccc:	4603      	mov	r3, r0
 8007cce:	005b      	lsls	r3, r3, #1
 8007cd0:	4403      	add	r3, r0
 8007cd2:	3b1e      	subs	r3, #30
 8007cd4:	409a      	lsls	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	430a      	orrs	r2, r1
 8007cdc:	60da      	str	r2, [r3, #12]
 8007cde:	e022      	b.n	8007d26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6919      	ldr	r1, [r3, #16]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	4613      	mov	r3, r2
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	4413      	add	r3, r2
 8007cf4:	2207      	movs	r2, #7
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	43da      	mvns	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	400a      	ands	r2, r1
 8007d02:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6919      	ldr	r1, [r3, #16]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	689a      	ldr	r2, [r3, #8]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4618      	mov	r0, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	005b      	lsls	r3, r3, #1
 8007d1a:	4403      	add	r3, r0
 8007d1c:	409a      	lsls	r2, r3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	2b06      	cmp	r3, #6
 8007d2c:	d824      	bhi.n	8007d78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	4413      	add	r3, r2
 8007d3e:	3b05      	subs	r3, #5
 8007d40:	221f      	movs	r2, #31
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	43da      	mvns	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	400a      	ands	r2, r1
 8007d4e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	3b05      	subs	r3, #5
 8007d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	635a      	str	r2, [r3, #52]	; 0x34
 8007d76:	e04c      	b.n	8007e12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	2b0c      	cmp	r3, #12
 8007d7e:	d824      	bhi.n	8007dca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	3b23      	subs	r3, #35	; 0x23
 8007d92:	221f      	movs	r2, #31
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	43da      	mvns	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	400a      	ands	r2, r1
 8007da0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	4618      	mov	r0, r3
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	3b23      	subs	r3, #35	; 0x23
 8007dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8007dc8:	e023      	b.n	8007e12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685a      	ldr	r2, [r3, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	3b41      	subs	r3, #65	; 0x41
 8007ddc:	221f      	movs	r2, #31
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	43da      	mvns	r2, r3
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	400a      	ands	r2, r1
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	4618      	mov	r0, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	3b41      	subs	r3, #65	; 0x41
 8007e06:	fa00 f203 	lsl.w	r2, r0, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e12:	4b29      	ldr	r3, [pc, #164]	; (8007eb8 <HAL_ADC_ConfigChannel+0x250>)
 8007e14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a28      	ldr	r2, [pc, #160]	; (8007ebc <HAL_ADC_ConfigChannel+0x254>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10f      	bne.n	8007e40 <HAL_ADC_ConfigChannel+0x1d8>
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b12      	cmp	r3, #18
 8007e26:	d10b      	bne.n	8007e40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a1d      	ldr	r2, [pc, #116]	; (8007ebc <HAL_ADC_ConfigChannel+0x254>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d12b      	bne.n	8007ea2 <HAL_ADC_ConfigChannel+0x23a>
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a1c      	ldr	r2, [pc, #112]	; (8007ec0 <HAL_ADC_ConfigChannel+0x258>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <HAL_ADC_ConfigChannel+0x1f4>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b11      	cmp	r3, #17
 8007e5a:	d122      	bne.n	8007ea2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a11      	ldr	r2, [pc, #68]	; (8007ec0 <HAL_ADC_ConfigChannel+0x258>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d111      	bne.n	8007ea2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007e7e:	4b11      	ldr	r3, [pc, #68]	; (8007ec4 <HAL_ADC_ConfigChannel+0x25c>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <HAL_ADC_ConfigChannel+0x260>)
 8007e84:	fba2 2303 	umull	r2, r3, r2, r3
 8007e88:	0c9a      	lsrs	r2, r3, #18
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007e94:	e002      	b.n	8007e9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f9      	bne.n	8007e96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	40012300 	.word	0x40012300
 8007ebc:	40012000 	.word	0x40012000
 8007ec0:	10000012 	.word	0x10000012
 8007ec4:	20000000 	.word	0x20000000
 8007ec8:	431bde83 	.word	0x431bde83

08007ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ed4:	4b79      	ldr	r3, [pc, #484]	; (80080bc <ADC_Init+0x1f0>)
 8007ed6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	431a      	orrs	r2, r3
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	6859      	ldr	r1, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	021a      	lsls	r2, r3, #8
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6859      	ldr	r1, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6899      	ldr	r1, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	4a58      	ldr	r2, [pc, #352]	; (80080c0 <ADC_Init+0x1f4>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d022      	beq.n	8007faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6899      	ldr	r1, [r3, #8]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	430a      	orrs	r2, r1
 8007f84:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6899      	ldr	r1, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	e00f      	b.n	8007fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007fc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0202 	bic.w	r2, r2, #2
 8007fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	6899      	ldr	r1, [r3, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7e1b      	ldrb	r3, [r3, #24]
 8007fe4:	005a      	lsls	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d01b      	beq.n	8008030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008006:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6859      	ldr	r1, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	3b01      	subs	r3, #1
 8008024:	035a      	lsls	r2, r3, #13
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	605a      	str	r2, [r3, #4]
 800802e:	e007      	b.n	8008040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800803e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800804e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	3b01      	subs	r3, #1
 800805c:	051a      	lsls	r2, r3, #20
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689a      	ldr	r2, [r3, #8]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6899      	ldr	r1, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008082:	025a      	lsls	r2, r3, #9
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800809a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6899      	ldr	r1, [r3, #8]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	029a      	lsls	r2, r3, #10
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	609a      	str	r2, [r3, #8]
}
 80080b0:	bf00      	nop
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	40012300 	.word	0x40012300
 80080c0:	0f000001 	.word	0x0f000001

080080c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d13c      	bne.n	8008158 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d12b      	bne.n	8008150 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d127      	bne.n	8008150 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800810a:	2b00      	cmp	r3, #0
 800810c:	d006      	beq.n	800811c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008118:	2b00      	cmp	r3, #0
 800811a:	d119      	bne.n	8008150 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0220 	bic.w	r2, r2, #32
 800812a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	f043 0201 	orr.w	r2, r3, #1
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f7ff fd6b 	bl	8007c2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008156:	e00e      	b.n	8008176 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	f003 0310 	and.w	r3, r3, #16
 8008160:	2b00      	cmp	r3, #0
 8008162:	d003      	beq.n	800816c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff fd75 	bl	8007c54 <HAL_ADC_ErrorCallback>
}
 800816a:	e004      	b.n	8008176 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f7ff fd57 	bl	8007c40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008192:	bf00      	nop
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b084      	sub	sp, #16
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2240      	movs	r2, #64	; 0x40
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b2:	f043 0204 	orr.w	r2, r3, #4
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f7ff fd4a 	bl	8007c54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f003 0307 	and.w	r3, r3, #7
 80081d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80081d8:	4b0c      	ldr	r3, [pc, #48]	; (800820c <__NVIC_SetPriorityGrouping+0x44>)
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80081e4:	4013      	ands	r3, r2
 80081e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80081f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80081f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80081fa:	4a04      	ldr	r2, [pc, #16]	; (800820c <__NVIC_SetPriorityGrouping+0x44>)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	60d3      	str	r3, [r2, #12]
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	e000ed00 	.word	0xe000ed00

08008210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008214:	4b04      	ldr	r3, [pc, #16]	; (8008228 <__NVIC_GetPriorityGrouping+0x18>)
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	0a1b      	lsrs	r3, r3, #8
 800821a:	f003 0307 	and.w	r3, r3, #7
}
 800821e:	4618      	mov	r0, r3
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	e000ed00 	.word	0xe000ed00

0800822c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	4603      	mov	r3, r0
 8008234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823a:	2b00      	cmp	r3, #0
 800823c:	db0b      	blt.n	8008256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	f003 021f 	and.w	r2, r3, #31
 8008244:	4907      	ldr	r1, [pc, #28]	; (8008264 <__NVIC_EnableIRQ+0x38>)
 8008246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800824a:	095b      	lsrs	r3, r3, #5
 800824c:	2001      	movs	r0, #1
 800824e:	fa00 f202 	lsl.w	r2, r0, r2
 8008252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	e000e100 	.word	0xe000e100

08008268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	6039      	str	r1, [r7, #0]
 8008272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db0a      	blt.n	8008292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	b2da      	uxtb	r2, r3
 8008280:	490c      	ldr	r1, [pc, #48]	; (80082b4 <__NVIC_SetPriority+0x4c>)
 8008282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008286:	0112      	lsls	r2, r2, #4
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	440b      	add	r3, r1
 800828c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008290:	e00a      	b.n	80082a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	b2da      	uxtb	r2, r3
 8008296:	4908      	ldr	r1, [pc, #32]	; (80082b8 <__NVIC_SetPriority+0x50>)
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	f003 030f 	and.w	r3, r3, #15
 800829e:	3b04      	subs	r3, #4
 80082a0:	0112      	lsls	r2, r2, #4
 80082a2:	b2d2      	uxtb	r2, r2
 80082a4:	440b      	add	r3, r1
 80082a6:	761a      	strb	r2, [r3, #24]
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	e000e100 	.word	0xe000e100
 80082b8:	e000ed00 	.word	0xe000ed00

080082bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082bc:	b480      	push	{r7}
 80082be:	b089      	sub	sp, #36	; 0x24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0307 	and.w	r3, r3, #7
 80082ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80082d0:	69fb      	ldr	r3, [r7, #28]
 80082d2:	f1c3 0307 	rsb	r3, r3, #7
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	bf28      	it	cs
 80082da:	2304      	movcs	r3, #4
 80082dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80082de:	69fb      	ldr	r3, [r7, #28]
 80082e0:	3304      	adds	r3, #4
 80082e2:	2b06      	cmp	r3, #6
 80082e4:	d902      	bls.n	80082ec <NVIC_EncodePriority+0x30>
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	3b03      	subs	r3, #3
 80082ea:	e000      	b.n	80082ee <NVIC_EncodePriority+0x32>
 80082ec:	2300      	movs	r3, #0
 80082ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	43da      	mvns	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	401a      	ands	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008304:	f04f 31ff 	mov.w	r1, #4294967295
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	fa01 f303 	lsl.w	r3, r1, r3
 800830e:	43d9      	mvns	r1, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008314:	4313      	orrs	r3, r2
         );
}
 8008316:	4618      	mov	r0, r3
 8008318:	3724      	adds	r7, #36	; 0x24
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	3b01      	subs	r3, #1
 8008330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008334:	d301      	bcc.n	800833a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008336:	2301      	movs	r3, #1
 8008338:	e00f      	b.n	800835a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800833a:	4a0a      	ldr	r2, [pc, #40]	; (8008364 <SysTick_Config+0x40>)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	3b01      	subs	r3, #1
 8008340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008342:	210f      	movs	r1, #15
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	f7ff ff8e 	bl	8008268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <SysTick_Config+0x40>)
 800834e:	2200      	movs	r2, #0
 8008350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008352:	4b04      	ldr	r3, [pc, #16]	; (8008364 <SysTick_Config+0x40>)
 8008354:	2207      	movs	r2, #7
 8008356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	e000e010 	.word	0xe000e010

08008368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f7ff ff29 	bl	80081c8 <__NVIC_SetPriorityGrouping>
}
 8008376:	bf00      	nop
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800837e:	b580      	push	{r7, lr}
 8008380:	b086      	sub	sp, #24
 8008382:	af00      	add	r7, sp, #0
 8008384:	4603      	mov	r3, r0
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	607a      	str	r2, [r7, #4]
 800838a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800838c:	2300      	movs	r3, #0
 800838e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008390:	f7ff ff3e 	bl	8008210 <__NVIC_GetPriorityGrouping>
 8008394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	6978      	ldr	r0, [r7, #20]
 800839c:	f7ff ff8e 	bl	80082bc <NVIC_EncodePriority>
 80083a0:	4602      	mov	r2, r0
 80083a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a6:	4611      	mov	r1, r2
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7ff ff5d 	bl	8008268 <__NVIC_SetPriority>
}
 80083ae:	bf00      	nop
 80083b0:	3718      	adds	r7, #24
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b082      	sub	sp, #8
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	4603      	mov	r3, r0
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7ff ff31 	bl	800822c <__NVIC_EnableIRQ>
}
 80083ca:	bf00      	nop
 80083cc:	3708      	adds	r7, #8
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b082      	sub	sp, #8
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff ffa2 	bl	8008324 <SysTick_Config>
 80083e0:	4603      	mov	r3, r0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80083f8:	f7ff fab4 	bl	8007964 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e099      	b.n	800853c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 0201 	bic.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008428:	e00f      	b.n	800844a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800842a:	f7ff fa9b 	bl	8007964 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b05      	cmp	r3, #5
 8008436:	d908      	bls.n	800844a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2203      	movs	r2, #3
 8008442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e078      	b.n	800853c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e8      	bne.n	800842a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4b38      	ldr	r3, [pc, #224]	; (8008544 <HAL_DMA_Init+0x158>)
 8008464:	4013      	ands	r3, r2
 8008466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685a      	ldr	r2, [r3, #4]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800848e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d107      	bne.n	80084b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ac:	4313      	orrs	r3, r2
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695b      	ldr	r3, [r3, #20]
 80084c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	f023 0307 	bic.w	r3, r3, #7
 80084ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	2b04      	cmp	r3, #4
 80084dc:	d117      	bne.n	800850e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00e      	beq.n	800850e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fa9d 	bl	8008a30 <DMA_CheckFifoParam>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d008      	beq.n	800850e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2240      	movs	r2, #64	; 0x40
 8008500:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800850a:	2301      	movs	r3, #1
 800850c:	e016      	b.n	800853c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa54 	bl	80089c4 <DMA_CalcBaseAndBitshift>
 800851c:	4603      	mov	r3, r0
 800851e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008524:	223f      	movs	r2, #63	; 0x3f
 8008526:	409a      	lsls	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	f010803f 	.word	0xf010803f

08008548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_DMA_Start_IT+0x26>
 800856a:	2302      	movs	r3, #2
 800856c:	e040      	b.n	80085f0 <HAL_DMA_Start_IT+0xa8>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b01      	cmp	r3, #1
 8008580:	d12f      	bne.n	80085e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	68b9      	ldr	r1, [r7, #8]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 f9e6 	bl	8008968 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a0:	223f      	movs	r2, #63	; 0x3f
 80085a2:	409a      	lsls	r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0216 	orr.w	r2, r2, #22
 80085b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d007      	beq.n	80085d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f042 0208 	orr.w	r2, r2, #8
 80085ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]
 80085e0:	e005      	b.n	80085ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80085ea:	2302      	movs	r3, #2
 80085ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3718      	adds	r7, #24
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b02      	cmp	r3, #2
 800860a:	d004      	beq.n	8008616 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2280      	movs	r2, #128	; 0x80
 8008610:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e00c      	b.n	8008630 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2205      	movs	r2, #5
 800861a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0201 	bic.w	r2, r2, #1
 800862c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008644:	2300      	movs	r3, #0
 8008646:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008648:	4b92      	ldr	r3, [pc, #584]	; (8008894 <HAL_DMA_IRQHandler+0x258>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a92      	ldr	r2, [pc, #584]	; (8008898 <HAL_DMA_IRQHandler+0x25c>)
 800864e:	fba2 2303 	umull	r2, r3, r2, r3
 8008652:	0a9b      	lsrs	r3, r3, #10
 8008654:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800865a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008666:	2208      	movs	r2, #8
 8008668:	409a      	lsls	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	4013      	ands	r3, r2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d01a      	beq.n	80086a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d013      	beq.n	80086a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 0204 	bic.w	r2, r2, #4
 800868e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008694:	2208      	movs	r2, #8
 8008696:	409a      	lsls	r2, r3
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a0:	f043 0201 	orr.w	r2, r3, #1
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ac:	2201      	movs	r2, #1
 80086ae:	409a      	lsls	r2, r3
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d012      	beq.n	80086de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00b      	beq.n	80086de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ca:	2201      	movs	r2, #1
 80086cc:	409a      	lsls	r2, r3
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f043 0202 	orr.w	r2, r3, #2
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e2:	2204      	movs	r2, #4
 80086e4:	409a      	lsls	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4013      	ands	r3, r2
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d012      	beq.n	8008714 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008700:	2204      	movs	r2, #4
 8008702:	409a      	lsls	r2, r3
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870c:	f043 0204 	orr.w	r2, r3, #4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008718:	2210      	movs	r2, #16
 800871a:	409a      	lsls	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4013      	ands	r3, r2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d043      	beq.n	80087ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0308 	and.w	r3, r3, #8
 800872e:	2b00      	cmp	r3, #0
 8008730:	d03c      	beq.n	80087ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008736:	2210      	movs	r2, #16
 8008738:	409a      	lsls	r2, r3
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d018      	beq.n	800877e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d108      	bne.n	800876c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	2b00      	cmp	r3, #0
 8008760:	d024      	beq.n	80087ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	4798      	blx	r3
 800876a:	e01f      	b.n	80087ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	4798      	blx	r3
 800877c:	e016      	b.n	80087ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008788:	2b00      	cmp	r3, #0
 800878a:	d107      	bne.n	800879c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0208 	bic.w	r2, r2, #8
 800879a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087b0:	2220      	movs	r2, #32
 80087b2:	409a      	lsls	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f000 808e 	beq.w	80088da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 8086 	beq.w	80088da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d2:	2220      	movs	r2, #32
 80087d4:	409a      	lsls	r2, r3
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b05      	cmp	r3, #5
 80087e4:	d136      	bne.n	8008854 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f022 0216 	bic.w	r2, r2, #22
 80087f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	695a      	ldr	r2, [r3, #20]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008804:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <HAL_DMA_IRQHandler+0x1da>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f022 0208 	bic.w	r2, r2, #8
 8008824:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882a:	223f      	movs	r2, #63	; 0x3f
 800882c:	409a      	lsls	r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008846:	2b00      	cmp	r3, #0
 8008848:	d07d      	beq.n	8008946 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
        }
        return;
 8008852:	e078      	b.n	8008946 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d01c      	beq.n	800889c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d108      	bne.n	8008882 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008874:	2b00      	cmp	r3, #0
 8008876:	d030      	beq.n	80088da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	4798      	blx	r3
 8008880:	e02b      	b.n	80088da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008886:	2b00      	cmp	r3, #0
 8008888:	d027      	beq.n	80088da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
 8008892:	e022      	b.n	80088da <HAL_DMA_IRQHandler+0x29e>
 8008894:	20000000 	.word	0x20000000
 8008898:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10f      	bne.n	80088ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f022 0210 	bic.w	r2, r2, #16
 80088b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d032      	beq.n	8008948 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d022      	beq.n	8008934 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2205      	movs	r2, #5
 80088f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f022 0201 	bic.w	r2, r2, #1
 8008904:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	3301      	adds	r3, #1
 800890a:	60bb      	str	r3, [r7, #8]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	429a      	cmp	r2, r3
 8008910:	d307      	bcc.n	8008922 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1f2      	bne.n	8008906 <HAL_DMA_IRQHandler+0x2ca>
 8008920:	e000      	b.n	8008924 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008922:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	4798      	blx	r3
 8008944:	e000      	b.n	8008948 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008946:	bf00      	nop
    }
  }
}
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop

08008950 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	607a      	str	r2, [r7, #4]
 8008974:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008984:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	2b40      	cmp	r3, #64	; 0x40
 8008994:	d108      	bne.n	80089a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80089a6:	e007      	b.n	80089b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	60da      	str	r2, [r3, #12]
}
 80089b8:	bf00      	nop
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	3b10      	subs	r3, #16
 80089d4:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <DMA_CalcBaseAndBitshift+0x64>)
 80089d6:	fba2 2303 	umull	r2, r3, r2, r3
 80089da:	091b      	lsrs	r3, r3, #4
 80089dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089de:	4a13      	ldr	r2, [pc, #76]	; (8008a2c <DMA_CalcBaseAndBitshift+0x68>)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4413      	add	r3, r2
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d909      	bls.n	8008a06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089fa:	f023 0303 	bic.w	r3, r3, #3
 80089fe:	1d1a      	adds	r2, r3, #4
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	659a      	str	r2, [r3, #88]	; 0x58
 8008a04:	e007      	b.n	8008a16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	aaaaaaab 	.word	0xaaaaaaab
 8008a2c:	08017d78 	.word	0x08017d78

08008a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d11f      	bne.n	8008a8a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d855      	bhi.n	8008afc <DMA_CheckFifoParam+0xcc>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <DMA_CheckFifoParam+0x28>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a69 	.word	0x08008a69
 8008a5c:	08008a7b 	.word	0x08008a7b
 8008a60:	08008a69 	.word	0x08008a69
 8008a64:	08008afd 	.word	0x08008afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d045      	beq.n	8008b00 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a78:	e042      	b.n	8008b00 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a82:	d13f      	bne.n	8008b04 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a88:	e03c      	b.n	8008b04 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a92:	d121      	bne.n	8008ad8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d836      	bhi.n	8008b08 <DMA_CheckFifoParam+0xd8>
 8008a9a:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <DMA_CheckFifoParam+0x70>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008ab1 	.word	0x08008ab1
 8008aa4:	08008ab7 	.word	0x08008ab7
 8008aa8:	08008ab1 	.word	0x08008ab1
 8008aac:	08008ac9 	.word	0x08008ac9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab4:	e02f      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d024      	beq.n	8008b0c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ac6:	e021      	b.n	8008b0c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ad0:	d11e      	bne.n	8008b10 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008ad6:	e01b      	b.n	8008b10 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d902      	bls.n	8008ae4 <DMA_CheckFifoParam+0xb4>
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d003      	beq.n	8008aea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008ae2:	e018      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ae8:	e015      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00e      	beq.n	8008b14 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	73fb      	strb	r3, [r7, #15]
      break;
 8008afa:	e00b      	b.n	8008b14 <DMA_CheckFifoParam+0xe4>
      break;
 8008afc:	bf00      	nop
 8008afe:	e00a      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      break;
 8008b00:	bf00      	nop
 8008b02:	e008      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      break;
 8008b04:	bf00      	nop
 8008b06:	e006      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e004      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      break;
 8008b0c:	bf00      	nop
 8008b0e:	e002      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      break;   
 8008b10:	bf00      	nop
 8008b12:	e000      	b.n	8008b16 <DMA_CheckFifoParam+0xe6>
      break;
 8008b14:	bf00      	nop
    }
  } 
  
  return status; 
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b089      	sub	sp, #36	; 0x24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61fb      	str	r3, [r7, #28]
 8008b3e:	e177      	b.n	8008e30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b40:	2201      	movs	r2, #1
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	697a      	ldr	r2, [r7, #20]
 8008b50:	4013      	ands	r3, r2
 8008b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b54:	693a      	ldr	r2, [r7, #16]
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	f040 8166 	bne.w	8008e2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d00b      	beq.n	8008b7e <HAL_GPIO_Init+0x5a>
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d007      	beq.n	8008b7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008b72:	2b11      	cmp	r3, #17
 8008b74:	d003      	beq.n	8008b7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	2b12      	cmp	r3, #18
 8008b7c:	d130      	bne.n	8008be0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	2203      	movs	r2, #3
 8008b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b8e:	43db      	mvns	r3, r3
 8008b90:	69ba      	ldr	r2, [r7, #24]
 8008b92:	4013      	ands	r3, r2
 8008b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	005b      	lsls	r3, r3, #1
 8008b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba2:	69ba      	ldr	r2, [r7, #24]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	091b      	lsrs	r3, r3, #4
 8008bca:	f003 0201 	and.w	r2, r3, #1
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	69ba      	ldr	r2, [r7, #24]
 8008bde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	2203      	movs	r2, #3
 8008bec:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689a      	ldr	r2, [r3, #8]
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	005b      	lsls	r3, r3, #1
 8008c00:	fa02 f303 	lsl.w	r3, r2, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d003      	beq.n	8008c20 <HAL_GPIO_Init+0xfc>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b12      	cmp	r3, #18
 8008c1e:	d123      	bne.n	8008c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	08da      	lsrs	r2, r3, #3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	3208      	adds	r2, #8
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	220f      	movs	r2, #15
 8008c38:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3c:	43db      	mvns	r3, r3
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	4013      	ands	r3, r2
 8008c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	691a      	ldr	r2, [r3, #16]
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f003 0307 	and.w	r3, r3, #7
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	08da      	lsrs	r2, r3, #3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3208      	adds	r2, #8
 8008c62:	69b9      	ldr	r1, [r7, #24]
 8008c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	2203      	movs	r2, #3
 8008c74:	fa02 f303 	lsl.w	r3, r2, r3
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f003 0203 	and.w	r2, r3, #3
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 80c0 	beq.w	8008e2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
 8008cae:	4b65      	ldr	r3, [pc, #404]	; (8008e44 <HAL_GPIO_Init+0x320>)
 8008cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb2:	4a64      	ldr	r2, [pc, #400]	; (8008e44 <HAL_GPIO_Init+0x320>)
 8008cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8008cba:	4b62      	ldr	r3, [pc, #392]	; (8008e44 <HAL_GPIO_Init+0x320>)
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008cc6:	4a60      	ldr	r2, [pc, #384]	; (8008e48 <HAL_GPIO_Init+0x324>)
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	089b      	lsrs	r3, r3, #2
 8008ccc:	3302      	adds	r3, #2
 8008cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	220f      	movs	r2, #15
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a57      	ldr	r2, [pc, #348]	; (8008e4c <HAL_GPIO_Init+0x328>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d037      	beq.n	8008d62 <HAL_GPIO_Init+0x23e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a56      	ldr	r2, [pc, #344]	; (8008e50 <HAL_GPIO_Init+0x32c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d031      	beq.n	8008d5e <HAL_GPIO_Init+0x23a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a55      	ldr	r2, [pc, #340]	; (8008e54 <HAL_GPIO_Init+0x330>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d02b      	beq.n	8008d5a <HAL_GPIO_Init+0x236>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a54      	ldr	r2, [pc, #336]	; (8008e58 <HAL_GPIO_Init+0x334>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d025      	beq.n	8008d56 <HAL_GPIO_Init+0x232>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a53      	ldr	r2, [pc, #332]	; (8008e5c <HAL_GPIO_Init+0x338>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d01f      	beq.n	8008d52 <HAL_GPIO_Init+0x22e>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a52      	ldr	r2, [pc, #328]	; (8008e60 <HAL_GPIO_Init+0x33c>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d019      	beq.n	8008d4e <HAL_GPIO_Init+0x22a>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a51      	ldr	r2, [pc, #324]	; (8008e64 <HAL_GPIO_Init+0x340>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d013      	beq.n	8008d4a <HAL_GPIO_Init+0x226>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a50      	ldr	r2, [pc, #320]	; (8008e68 <HAL_GPIO_Init+0x344>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00d      	beq.n	8008d46 <HAL_GPIO_Init+0x222>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a4f      	ldr	r2, [pc, #316]	; (8008e6c <HAL_GPIO_Init+0x348>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d007      	beq.n	8008d42 <HAL_GPIO_Init+0x21e>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a4e      	ldr	r2, [pc, #312]	; (8008e70 <HAL_GPIO_Init+0x34c>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d101      	bne.n	8008d3e <HAL_GPIO_Init+0x21a>
 8008d3a:	2309      	movs	r3, #9
 8008d3c:	e012      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d3e:	230a      	movs	r3, #10
 8008d40:	e010      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d42:	2308      	movs	r3, #8
 8008d44:	e00e      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d46:	2307      	movs	r3, #7
 8008d48:	e00c      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d4a:	2306      	movs	r3, #6
 8008d4c:	e00a      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d4e:	2305      	movs	r3, #5
 8008d50:	e008      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d52:	2304      	movs	r3, #4
 8008d54:	e006      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d56:	2303      	movs	r3, #3
 8008d58:	e004      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e002      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e000      	b.n	8008d64 <HAL_GPIO_Init+0x240>
 8008d62:	2300      	movs	r3, #0
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	f002 0203 	and.w	r2, r2, #3
 8008d6a:	0092      	lsls	r2, r2, #2
 8008d6c:	4093      	lsls	r3, r2
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d74:	4934      	ldr	r1, [pc, #208]	; (8008e48 <HAL_GPIO_Init+0x324>)
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	089b      	lsrs	r3, r3, #2
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	69ba      	ldr	r2, [r7, #24]
 8008d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d82:	4b3c      	ldr	r3, [pc, #240]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	43db      	mvns	r3, r3
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	4013      	ands	r3, r2
 8008d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008da6:	4a33      	ldr	r2, [pc, #204]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008dac:	4b31      	ldr	r3, [pc, #196]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	43db      	mvns	r3, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	4013      	ands	r3, r2
 8008dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008dc8:	69ba      	ldr	r2, [r7, #24]
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008dd0:	4a28      	ldr	r2, [pc, #160]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008dd6:	4b27      	ldr	r3, [pc, #156]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	43db      	mvns	r3, r3
 8008de0:	69ba      	ldr	r2, [r7, #24]
 8008de2:	4013      	ands	r3, r2
 8008de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008dfa:	4a1e      	ldr	r2, [pc, #120]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e00:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	43db      	mvns	r3, r3
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <HAL_GPIO_Init+0x350>)
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61fb      	str	r3, [r7, #28]
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	2b0f      	cmp	r3, #15
 8008e34:	f67f ae84 	bls.w	8008b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008e38:	bf00      	nop
 8008e3a:	3724      	adds	r7, #36	; 0x24
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40023800 	.word	0x40023800
 8008e48:	40013800 	.word	0x40013800
 8008e4c:	40020000 	.word	0x40020000
 8008e50:	40020400 	.word	0x40020400
 8008e54:	40020800 	.word	0x40020800
 8008e58:	40020c00 	.word	0x40020c00
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	40021400 	.word	0x40021400
 8008e64:	40021800 	.word	0x40021800
 8008e68:	40021c00 	.word	0x40021c00
 8008e6c:	40022000 	.word	0x40022000
 8008e70:	40022400 	.word	0x40022400
 8008e74:	40013c00 	.word	0x40013c00

08008e78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691a      	ldr	r2, [r3, #16]
 8008e88:	887b      	ldrh	r3, [r7, #2]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e90:	2301      	movs	r3, #1
 8008e92:	73fb      	strb	r3, [r7, #15]
 8008e94:	e001      	b.n	8008e9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	807b      	strh	r3, [r7, #2]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008eb8:	787b      	ldrb	r3, [r7, #1]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ebe:	887a      	ldrh	r2, [r7, #2]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ec4:	e003      	b.n	8008ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008ec6:	887b      	ldrh	r3, [r7, #2]
 8008ec8:	041a      	lsls	r2, r3, #16
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	619a      	str	r2, [r3, #24]
}
 8008ece:	bf00      	nop
 8008ed0:	370c      	adds	r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e11f      	b.n	800912e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7fc fc8c 	bl	8005820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2224      	movs	r2, #36	; 0x24
 8008f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f022 0201 	bic.w	r2, r2, #1
 8008f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f40:	f001 f96e 	bl	800a220 <HAL_RCC_GetPCLK1Freq>
 8008f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	4a7b      	ldr	r2, [pc, #492]	; (8009138 <HAL_I2C_Init+0x25c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d807      	bhi.n	8008f60 <HAL_I2C_Init+0x84>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a7a      	ldr	r2, [pc, #488]	; (800913c <HAL_I2C_Init+0x260>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	bf94      	ite	ls
 8008f58:	2301      	movls	r3, #1
 8008f5a:	2300      	movhi	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	e006      	b.n	8008f6e <HAL_I2C_Init+0x92>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a77      	ldr	r2, [pc, #476]	; (8009140 <HAL_I2C_Init+0x264>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	bf94      	ite	ls
 8008f68:	2301      	movls	r3, #1
 8008f6a:	2300      	movhi	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e0db      	b.n	800912e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4a72      	ldr	r2, [pc, #456]	; (8009144 <HAL_I2C_Init+0x268>)
 8008f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7e:	0c9b      	lsrs	r3, r3, #18
 8008f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	6a1b      	ldr	r3, [r3, #32]
 8008f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4a64      	ldr	r2, [pc, #400]	; (8009138 <HAL_I2C_Init+0x25c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d802      	bhi.n	8008fb0 <HAL_I2C_Init+0xd4>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3301      	adds	r3, #1
 8008fae:	e009      	b.n	8008fc4 <HAL_I2C_Init+0xe8>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fb6:	fb02 f303 	mul.w	r3, r2, r3
 8008fba:	4a63      	ldr	r2, [pc, #396]	; (8009148 <HAL_I2C_Init+0x26c>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	099b      	lsrs	r3, r3, #6
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6812      	ldr	r2, [r2, #0]
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008fd6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	4956      	ldr	r1, [pc, #344]	; (8009138 <HAL_I2C_Init+0x25c>)
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	d80d      	bhi.n	8009000 <HAL_I2C_Init+0x124>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	1e59      	subs	r1, r3, #1
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	005b      	lsls	r3, r3, #1
 8008fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff8:	2b04      	cmp	r3, #4
 8008ffa:	bf38      	it	cc
 8008ffc:	2304      	movcc	r3, #4
 8008ffe:	e04f      	b.n	80090a0 <HAL_I2C_Init+0x1c4>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d111      	bne.n	800902c <HAL_I2C_Init+0x150>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	1e58      	subs	r0, r3, #1
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6859      	ldr	r1, [r3, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	440b      	add	r3, r1
 8009016:	fbb0 f3f3 	udiv	r3, r0, r3
 800901a:	3301      	adds	r3, #1
 800901c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009020:	2b00      	cmp	r3, #0
 8009022:	bf0c      	ite	eq
 8009024:	2301      	moveq	r3, #1
 8009026:	2300      	movne	r3, #0
 8009028:	b2db      	uxtb	r3, r3
 800902a:	e012      	b.n	8009052 <HAL_I2C_Init+0x176>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	1e58      	subs	r0, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6859      	ldr	r1, [r3, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	0099      	lsls	r1, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009042:	3301      	adds	r3, #1
 8009044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009048:	2b00      	cmp	r3, #0
 800904a:	bf0c      	ite	eq
 800904c:	2301      	moveq	r3, #1
 800904e:	2300      	movne	r3, #0
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <HAL_I2C_Init+0x17e>
 8009056:	2301      	movs	r3, #1
 8009058:	e022      	b.n	80090a0 <HAL_I2C_Init+0x1c4>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10e      	bne.n	8009080 <HAL_I2C_Init+0x1a4>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	1e58      	subs	r0, r3, #1
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6859      	ldr	r1, [r3, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	440b      	add	r3, r1
 8009070:	fbb0 f3f3 	udiv	r3, r0, r3
 8009074:	3301      	adds	r3, #1
 8009076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800907a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800907e:	e00f      	b.n	80090a0 <HAL_I2C_Init+0x1c4>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	1e58      	subs	r0, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6859      	ldr	r1, [r3, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	440b      	add	r3, r1
 800908e:	0099      	lsls	r1, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	fbb0 f3f3 	udiv	r3, r0, r3
 8009096:	3301      	adds	r3, #1
 8009098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800909c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	6809      	ldr	r1, [r1, #0]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	69da      	ldr	r2, [r3, #28]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	431a      	orrs	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80090ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6911      	ldr	r1, [r2, #16]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68d2      	ldr	r2, [r2, #12]
 80090da:	4311      	orrs	r1, r2
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	6812      	ldr	r2, [r2, #0]
 80090e0:	430b      	orrs	r3, r1
 80090e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68db      	ldr	r3, [r3, #12]
 80090ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	431a      	orrs	r2, r3
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	430a      	orrs	r2, r1
 80090fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0201 	orr.w	r2, r2, #1
 800910e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	000186a0 	.word	0x000186a0
 800913c:	001e847f 	.word	0x001e847f
 8009140:	003d08ff 	.word	0x003d08ff
 8009144:	431bde83 	.word	0x431bde83
 8009148:	10624dd3 	.word	0x10624dd3

0800914c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b088      	sub	sp, #32
 8009150:	af02      	add	r7, sp, #8
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	607a      	str	r2, [r7, #4]
 8009156:	461a      	mov	r2, r3
 8009158:	460b      	mov	r3, r1
 800915a:	817b      	strh	r3, [r7, #10]
 800915c:	4613      	mov	r3, r2
 800915e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009160:	f7fe fc00 	bl	8007964 <HAL_GetTick>
 8009164:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800916c:	b2db      	uxtb	r3, r3
 800916e:	2b20      	cmp	r3, #32
 8009170:	f040 80e0 	bne.w	8009334 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	2319      	movs	r3, #25
 800917a:	2201      	movs	r2, #1
 800917c:	4970      	ldr	r1, [pc, #448]	; (8009340 <HAL_I2C_Master_Transmit+0x1f4>)
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fc58 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800918a:	2302      	movs	r3, #2
 800918c:	e0d3      	b.n	8009336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009194:	2b01      	cmp	r3, #1
 8009196:	d101      	bne.n	800919c <HAL_I2C_Master_Transmit+0x50>
 8009198:	2302      	movs	r3, #2
 800919a:	e0cc      	b.n	8009336 <HAL_I2C_Master_Transmit+0x1ea>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d007      	beq.n	80091c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f042 0201 	orr.w	r2, r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2221      	movs	r2, #33	; 0x21
 80091d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2210      	movs	r2, #16
 80091de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	893a      	ldrh	r2, [r7, #8]
 80091f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4a50      	ldr	r2, [pc, #320]	; (8009344 <HAL_I2C_Master_Transmit+0x1f8>)
 8009202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009204:	8979      	ldrh	r1, [r7, #10]
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a3a      	ldr	r2, [r7, #32]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fac2 	bl	8009794 <I2C_MasterRequestWrite>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e08d      	b.n	8009336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800921a:	2300      	movs	r3, #0
 800921c:	613b      	str	r3, [r7, #16]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009230:	e066      	b.n	8009300 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	6a39      	ldr	r1, [r7, #32]
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f000 fcd2 	bl	8009be0 <I2C_WaitOnTXEFlagUntilTimeout>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00d      	beq.n	800925e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	2b04      	cmp	r3, #4
 8009248:	d107      	bne.n	800925a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e06b      	b.n	8009336 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009262:	781a      	ldrb	r2, [r3, #0]
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009278:	b29b      	uxth	r3, r3
 800927a:	3b01      	subs	r3, #1
 800927c:	b29a      	uxth	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b04      	cmp	r3, #4
 800929a:	d11b      	bne.n	80092d4 <HAL_I2C_Master_Transmit+0x188>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d017      	beq.n	80092d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b4:	1c5a      	adds	r2, r3, #1
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092be:	b29b      	uxth	r3, r3
 80092c0:	3b01      	subs	r3, #1
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092cc:	3b01      	subs	r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092d4:	697a      	ldr	r2, [r7, #20]
 80092d6:	6a39      	ldr	r1, [r7, #32]
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fcc2 	bl	8009c62 <I2C_WaitOnBTFFlagUntilTimeout>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00d      	beq.n	8009300 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	d107      	bne.n	80092fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	e01a      	b.n	8009336 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009304:	2b00      	cmp	r3, #0
 8009306:	d194      	bne.n	8009232 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2220      	movs	r2, #32
 800931c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	e000      	b.n	8009336 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009334:	2302      	movs	r3, #2
  }
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	00100002 	.word	0x00100002
 8009344:	ffff0000 	.word	0xffff0000

08009348 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b08c      	sub	sp, #48	; 0x30
 800934c:	af02      	add	r7, sp, #8
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	607a      	str	r2, [r7, #4]
 8009352:	461a      	mov	r2, r3
 8009354:	460b      	mov	r3, r1
 8009356:	817b      	strh	r3, [r7, #10]
 8009358:	4613      	mov	r3, r2
 800935a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800935c:	f7fe fb02 	bl	8007964 <HAL_GetTick>
 8009360:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b20      	cmp	r3, #32
 800936c:	f040 820b 	bne.w	8009786 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	2319      	movs	r3, #25
 8009376:	2201      	movs	r2, #1
 8009378:	497c      	ldr	r1, [pc, #496]	; (800956c <HAL_I2C_Master_Receive+0x224>)
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fb5a 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009386:	2302      	movs	r3, #2
 8009388:	e1fe      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <HAL_I2C_Master_Receive+0x50>
 8009394:	2302      	movs	r3, #2
 8009396:	e1f7      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d007      	beq.n	80093be <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0201 	orr.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2222      	movs	r2, #34	; 0x22
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2210      	movs	r2, #16
 80093da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	893a      	ldrh	r2, [r7, #8]
 80093ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f4:	b29a      	uxth	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	4a5c      	ldr	r2, [pc, #368]	; (8009570 <HAL_I2C_Master_Receive+0x228>)
 80093fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009400:	8979      	ldrh	r1, [r7, #10]
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f000 fa46 	bl	8009898 <I2C_MasterRequestRead>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e1b8      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941a:	2b00      	cmp	r3, #0
 800941c:	d113      	bne.n	8009446 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800941e:	2300      	movs	r3, #0
 8009420:	623b      	str	r3, [r7, #32]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	e18c      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944a:	2b01      	cmp	r3, #1
 800944c:	d11b      	bne.n	8009486 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800945c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800945e:	2300      	movs	r3, #0
 8009460:	61fb      	str	r3, [r7, #28]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	61fb      	str	r3, [r7, #28]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e16c      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800948a:	2b02      	cmp	r3, #2
 800948c:	d11b      	bne.n	80094c6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800949c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094ae:	2300      	movs	r3, #0
 80094b0:	61bb      	str	r3, [r7, #24]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	61bb      	str	r3, [r7, #24]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	e14c      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80094ec:	e138      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	f200 80f1 	bhi.w	80096da <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d123      	bne.n	8009548 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009502:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fbed 	bl	8009ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e139      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	691a      	ldr	r2, [r3, #16]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953c:	b29b      	uxth	r3, r3
 800953e:	3b01      	subs	r3, #1
 8009540:	b29a      	uxth	r2, r3
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009546:	e10b      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800954c:	2b02      	cmp	r3, #2
 800954e:	d14e      	bne.n	80095ee <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009556:	2200      	movs	r2, #0
 8009558:	4906      	ldr	r1, [pc, #24]	; (8009574 <HAL_I2C_Master_Receive+0x22c>)
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f000 fa6a 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d008      	beq.n	8009578 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e10e      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
 800956a:	bf00      	nop
 800956c:	00100002 	.word	0x00100002
 8009570:	ffff0000 	.word	0xffff0000
 8009574:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691a      	ldr	r2, [r3, #16]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	b2d2      	uxtb	r2, r2
 8009594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095a4:	3b01      	subs	r3, #1
 80095a6:	b29a      	uxth	r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	3b01      	subs	r3, #1
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	b2d2      	uxtb	r2, r2
 80095c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	1c5a      	adds	r2, r3, #1
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d6:	3b01      	subs	r3, #1
 80095d8:	b29a      	uxth	r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095ec:	e0b8      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	2200      	movs	r2, #0
 80095f6:	4966      	ldr	r1, [pc, #408]	; (8009790 <HAL_I2C_Master_Receive+0x448>)
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fa1b 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d001      	beq.n	8009608 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	e0bf      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	691a      	ldr	r2, [r3, #16]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	b2d2      	uxtb	r2, r2
 8009624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	1c5a      	adds	r2, r3, #1
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009634:	3b01      	subs	r3, #1
 8009636:	b29a      	uxth	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009640:	b29b      	uxth	r3, r3
 8009642:	3b01      	subs	r3, #1
 8009644:	b29a      	uxth	r2, r3
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800964a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964c:	9300      	str	r3, [sp, #0]
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	2200      	movs	r2, #0
 8009652:	494f      	ldr	r1, [pc, #316]	; (8009790 <HAL_I2C_Master_Receive+0x448>)
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 f9ed 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 800965a:	4603      	mov	r3, r0
 800965c:	2b00      	cmp	r3, #0
 800965e:	d001      	beq.n	8009664 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e091      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009672:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	b2d2      	uxtb	r2, r2
 8009680:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009690:	3b01      	subs	r3, #1
 8009692:	b29a      	uxth	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800969c:	b29b      	uxth	r3, r3
 800969e:	3b01      	subs	r3, #1
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	691a      	ldr	r2, [r3, #16]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c2:	3b01      	subs	r3, #1
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	3b01      	subs	r3, #1
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096d8:	e042      	b.n	8009760 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 fb00 	bl	8009ce4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e04c      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	691a      	ldr	r2, [r3, #16]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f8:	b2d2      	uxtb	r2, r2
 80096fa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	1c5a      	adds	r2, r3, #1
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800970a:	3b01      	subs	r3, #1
 800970c:	b29a      	uxth	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	f003 0304 	and.w	r3, r3, #4
 800972a:	2b04      	cmp	r3, #4
 800972c:	d118      	bne.n	8009760 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	691a      	ldr	r2, [r3, #16]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009738:	b2d2      	uxtb	r2, r2
 800973a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009756:	b29b      	uxth	r3, r3
 8009758:	3b01      	subs	r3, #1
 800975a:	b29a      	uxth	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009764:	2b00      	cmp	r3, #0
 8009766:	f47f aec2 	bne.w	80094ee <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e000      	b.n	8009788 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009786:	2302      	movs	r3, #2
  }
}
 8009788:	4618      	mov	r0, r3
 800978a:	3728      	adds	r7, #40	; 0x28
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	00010004 	.word	0x00010004

08009794 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b088      	sub	sp, #32
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	607a      	str	r2, [r7, #4]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	460b      	mov	r3, r1
 80097a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d006      	beq.n	80097be <I2C_MasterRequestWrite+0x2a>
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d003      	beq.n	80097be <I2C_MasterRequestWrite+0x2a>
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097bc:	d108      	bne.n	80097d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	e00b      	b.n	80097e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d4:	2b12      	cmp	r3, #18
 80097d6:	d107      	bne.n	80097e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	f000 f91d 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00d      	beq.n	800981c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980e:	d103      	bne.n	8009818 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e035      	b.n	8009888 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009824:	d108      	bne.n	8009838 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009826:	897b      	ldrh	r3, [r7, #10]
 8009828:	b2db      	uxtb	r3, r3
 800982a:	461a      	mov	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009834:	611a      	str	r2, [r3, #16]
 8009836:	e01b      	b.n	8009870 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009838:	897b      	ldrh	r3, [r7, #10]
 800983a:	11db      	asrs	r3, r3, #7
 800983c:	b2db      	uxtb	r3, r3
 800983e:	f003 0306 	and.w	r3, r3, #6
 8009842:	b2db      	uxtb	r3, r3
 8009844:	f063 030f 	orn	r3, r3, #15
 8009848:	b2da      	uxtb	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	490e      	ldr	r1, [pc, #56]	; (8009890 <I2C_MasterRequestWrite+0xfc>)
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f000 f943 	bl	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e010      	b.n	8009888 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009866:	897b      	ldrh	r3, [r7, #10]
 8009868:	b2da      	uxtb	r2, r3
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	4907      	ldr	r1, [pc, #28]	; (8009894 <I2C_MasterRequestWrite+0x100>)
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 f933 	bl	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d001      	beq.n	8009886 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e000      	b.n	8009888 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	00010008 	.word	0x00010008
 8009894:	00010002 	.word	0x00010002

08009898 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af02      	add	r7, sp, #8
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	607a      	str	r2, [r7, #4]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	460b      	mov	r3, r1
 80098a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	d006      	beq.n	80098d2 <I2C_MasterRequestRead+0x3a>
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d003      	beq.n	80098d2 <I2C_MasterRequestRead+0x3a>
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098d0:	d108      	bne.n	80098e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	e00b      	b.n	80098fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	2b11      	cmp	r3, #17
 80098ea:	d107      	bne.n	80098fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 f893 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d00d      	beq.n	8009930 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009922:	d103      	bne.n	800992c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800992a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e079      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009938:	d108      	bne.n	800994c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800993a:	897b      	ldrh	r3, [r7, #10]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	611a      	str	r2, [r3, #16]
 800994a:	e05f      	b.n	8009a0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800994c:	897b      	ldrh	r3, [r7, #10]
 800994e:	11db      	asrs	r3, r3, #7
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 0306 	and.w	r3, r3, #6
 8009956:	b2db      	uxtb	r3, r3
 8009958:	f063 030f 	orn	r3, r3, #15
 800995c:	b2da      	uxtb	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4930      	ldr	r1, [pc, #192]	; (8009a2c <I2C_MasterRequestRead+0x194>)
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f8b9 	bl	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e054      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800997a:	897b      	ldrh	r3, [r7, #10]
 800997c:	b2da      	uxtb	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	4929      	ldr	r1, [pc, #164]	; (8009a30 <I2C_MasterRequestRead+0x198>)
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 f8a9 	bl	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d001      	beq.n	800999a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e044      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f831 	bl	8009a34 <I2C_WaitOnFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00d      	beq.n	80099f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e6:	d103      	bne.n	80099f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e017      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099f4:	897b      	ldrh	r3, [r7, #10]
 80099f6:	11db      	asrs	r3, r3, #7
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	f003 0306 	and.w	r3, r3, #6
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f063 030e 	orn	r3, r3, #14
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	4907      	ldr	r1, [pc, #28]	; (8009a30 <I2C_MasterRequestRead+0x198>)
 8009a12:	68f8      	ldr	r0, [r7, #12]
 8009a14:	f000 f865 	bl	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d001      	beq.n	8009a22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	e000      	b.n	8009a24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}
 8009a2c:	00010008 	.word	0x00010008
 8009a30:	00010002 	.word	0x00010002

08009a34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	4613      	mov	r3, r2
 8009a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a44:	e025      	b.n	8009a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4c:	d021      	beq.n	8009a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a4e:	f7fd ff89 	bl	8007964 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	683a      	ldr	r2, [r7, #0]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d302      	bcc.n	8009a64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d116      	bne.n	8009a92 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a7e:	f043 0220 	orr.w	r2, r3, #32
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e023      	b.n	8009ada <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	0c1b      	lsrs	r3, r3, #16
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d10d      	bne.n	8009ab8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	43da      	mvns	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bf0c      	ite	eq
 8009aae:	2301      	moveq	r3, #1
 8009ab0:	2300      	movne	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	e00c      	b.n	8009ad2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	43da      	mvns	r2, r3
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	bf0c      	ite	eq
 8009aca:	2301      	moveq	r3, #1
 8009acc:	2300      	movne	r3, #0
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	79fb      	ldrb	r3, [r7, #7]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d0b6      	beq.n	8009a46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b084      	sub	sp, #16
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009af0:	e051      	b.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b00:	d123      	bne.n	8009b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b10:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b1a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	f043 0204 	orr.w	r2, r3, #4
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e046      	b.n	8009bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b50:	d021      	beq.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b52:	f7fd ff07 	bl	8007964 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d302      	bcc.n	8009b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d116      	bne.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f043 0220 	orr.w	r2, r3, #32
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e020      	b.n	8009bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	0c1b      	lsrs	r3, r3, #16
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d10c      	bne.n	8009bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	43da      	mvns	r2, r3
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	4013      	ands	r3, r2
 8009bac:	b29b      	uxth	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bf14      	ite	ne
 8009bb2:	2301      	movne	r3, #1
 8009bb4:	2300      	moveq	r3, #0
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	e00b      	b.n	8009bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	43da      	mvns	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	bf14      	ite	ne
 8009bcc:	2301      	movne	r3, #1
 8009bce:	2300      	moveq	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d18d      	bne.n	8009af2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bec:	e02d      	b.n	8009c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f8ce 	bl	8009d90 <I2C_IsAcknowledgeFailed>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e02d      	b.n	8009c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c04:	d021      	beq.n	8009c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c06:	f7fd fead 	bl	8007964 <HAL_GetTick>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d302      	bcc.n	8009c1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d116      	bne.n	8009c4a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	f043 0220 	orr.w	r2, r3, #32
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e007      	b.n	8009c5a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c54:	2b80      	cmp	r3, #128	; 0x80
 8009c56:	d1ca      	bne.n	8009bee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c6e:	e02d      	b.n	8009ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f000 f88d 	bl	8009d90 <I2C_IsAcknowledgeFailed>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e02d      	b.n	8009cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d021      	beq.n	8009ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c88:	f7fd fe6c 	bl	8007964 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d302      	bcc.n	8009c9e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d116      	bne.n	8009ccc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2220      	movs	r2, #32
 8009ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb8:	f043 0220 	orr.w	r2, r3, #32
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e007      	b.n	8009cdc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	f003 0304 	and.w	r3, r3, #4
 8009cd6:	2b04      	cmp	r3, #4
 8009cd8:	d1ca      	bne.n	8009c70 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3710      	adds	r7, #16
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}

08009ce4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cf0:	e042      	b.n	8009d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b10      	cmp	r3, #16
 8009cfe:	d119      	bne.n	8009d34 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f06f 0210 	mvn.w	r2, #16
 8009d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e029      	b.n	8009d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d34:	f7fd fe16 	bl	8007964 <HAL_GetTick>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	1ad3      	subs	r3, r2, r3
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d302      	bcc.n	8009d4a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d116      	bne.n	8009d78 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2220      	movs	r2, #32
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d64:	f043 0220 	orr.w	r2, r3, #32
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e007      	b.n	8009d88 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	695b      	ldr	r3, [r3, #20]
 8009d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d82:	2b40      	cmp	r3, #64	; 0x40
 8009d84:	d1b5      	bne.n	8009cf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009da6:	d11b      	bne.n	8009de0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009db0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	f043 0204 	orr.w	r2, r3, #4
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e000      	b.n	8009de2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b082      	sub	sp, #8
 8009df4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	603b      	str	r3, [r7, #0]
 8009dfe:	4b20      	ldr	r3, [pc, #128]	; (8009e80 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	4a1f      	ldr	r2, [pc, #124]	; (8009e80 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e08:	6413      	str	r3, [r2, #64]	; 0x40
 8009e0a:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <HAL_PWREx_EnableOverDrive+0x90>)
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009e16:	4b1b      	ldr	r3, [pc, #108]	; (8009e84 <HAL_PWREx_EnableOverDrive+0x94>)
 8009e18:	2201      	movs	r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e1c:	f7fd fda2 	bl	8007964 <HAL_GetTick>
 8009e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e22:	e009      	b.n	8009e38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e24:	f7fd fd9e 	bl	8007964 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e32:	d901      	bls.n	8009e38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009e34:	2303      	movs	r3, #3
 8009e36:	e01f      	b.n	8009e78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009e38:	4b13      	ldr	r3, [pc, #76]	; (8009e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e44:	d1ee      	bne.n	8009e24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009e46:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009e48:	2201      	movs	r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e4c:	f7fd fd8a 	bl	8007964 <HAL_GetTick>
 8009e50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e52:	e009      	b.n	8009e68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009e54:	f7fd fd86 	bl	8007964 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e62:	d901      	bls.n	8009e68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e007      	b.n	8009e78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009e68:	4b07      	ldr	r3, [pc, #28]	; (8009e88 <HAL_PWREx_EnableOverDrive+0x98>)
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e74:	d1ee      	bne.n	8009e54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	40023800 	.word	0x40023800
 8009e84:	420e0040 	.word	0x420e0040
 8009e88:	40007000 	.word	0x40007000
 8009e8c:	420e0044 	.word	0x420e0044

08009e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e0cc      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009ea4:	4b68      	ldr	r3, [pc, #416]	; (800a048 <HAL_RCC_ClockConfig+0x1b8>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 030f 	and.w	r3, r3, #15
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d90c      	bls.n	8009ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009eb2:	4b65      	ldr	r3, [pc, #404]	; (800a048 <HAL_RCC_ClockConfig+0x1b8>)
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eba:	4b63      	ldr	r3, [pc, #396]	; (800a048 <HAL_RCC_ClockConfig+0x1b8>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 030f 	and.w	r3, r3, #15
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d001      	beq.n	8009ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e0b8      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d020      	beq.n	8009f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009ee4:	4b59      	ldr	r3, [pc, #356]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	4a58      	ldr	r2, [pc, #352]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0308 	and.w	r3, r3, #8
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009efc:	4b53      	ldr	r3, [pc, #332]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	4a52      	ldr	r2, [pc, #328]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f08:	4b50      	ldr	r3, [pc, #320]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	494d      	ldr	r1, [pc, #308]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d044      	beq.n	8009fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d107      	bne.n	8009f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f2e:	4b47      	ldr	r3, [pc, #284]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d119      	bne.n	8009f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e07f      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d003      	beq.n	8009f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d107      	bne.n	8009f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009f4e:	4b3f      	ldr	r3, [pc, #252]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e06f      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f5e:	4b3b      	ldr	r3, [pc, #236]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f003 0302 	and.w	r3, r3, #2
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d101      	bne.n	8009f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e067      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f6e:	4b37      	ldr	r3, [pc, #220]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	f023 0203 	bic.w	r2, r3, #3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	4934      	ldr	r1, [pc, #208]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f80:	f7fd fcf0 	bl	8007964 <HAL_GetTick>
 8009f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f86:	e00a      	b.n	8009f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f88:	f7fd fcec 	bl	8007964 <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e04f      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f9e:	4b2b      	ldr	r3, [pc, #172]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	f003 020c 	and.w	r2, r3, #12
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d1eb      	bne.n	8009f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009fb0:	4b25      	ldr	r3, [pc, #148]	; (800a048 <HAL_RCC_ClockConfig+0x1b8>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f003 030f 	and.w	r3, r3, #15
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d20c      	bcs.n	8009fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fbe:	4b22      	ldr	r3, [pc, #136]	; (800a048 <HAL_RCC_ClockConfig+0x1b8>)
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	b2d2      	uxtb	r2, r2
 8009fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fc6:	4b20      	ldr	r3, [pc, #128]	; (800a048 <HAL_RCC_ClockConfig+0x1b8>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 030f 	and.w	r3, r3, #15
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d001      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e032      	b.n	800a03e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0304 	and.w	r3, r3, #4
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d008      	beq.n	8009ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009fe4:	4b19      	ldr	r3, [pc, #100]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	4916      	ldr	r1, [pc, #88]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 0308 	and.w	r3, r3, #8
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d009      	beq.n	800a016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a002:	4b12      	ldr	r3, [pc, #72]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	490e      	ldr	r1, [pc, #56]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 800a012:	4313      	orrs	r3, r2
 800a014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a016:	f000 f821 	bl	800a05c <HAL_RCC_GetSysClockFreq>
 800a01a:	4601      	mov	r1, r0
 800a01c:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <HAL_RCC_ClockConfig+0x1bc>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	091b      	lsrs	r3, r3, #4
 800a022:	f003 030f 	and.w	r3, r3, #15
 800a026:	4a0a      	ldr	r2, [pc, #40]	; (800a050 <HAL_RCC_ClockConfig+0x1c0>)
 800a028:	5cd3      	ldrb	r3, [r2, r3]
 800a02a:	fa21 f303 	lsr.w	r3, r1, r3
 800a02e:	4a09      	ldr	r2, [pc, #36]	; (800a054 <HAL_RCC_ClockConfig+0x1c4>)
 800a030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a032:	4b09      	ldr	r3, [pc, #36]	; (800a058 <HAL_RCC_ClockConfig+0x1c8>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4618      	mov	r0, r3
 800a038:	f7fd fc50 	bl	80078dc <HAL_InitTick>

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	40023c00 	.word	0x40023c00
 800a04c:	40023800 	.word	0x40023800
 800a050:	08017d60 	.word	0x08017d60
 800a054:	20000000 	.word	0x20000000
 800a058:	20000004 	.word	0x20000004

0800a05c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a05c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05e:	b085      	sub	sp, #20
 800a060:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a062:	2300      	movs	r3, #0
 800a064:	607b      	str	r3, [r7, #4]
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
 800a06a:	2300      	movs	r3, #0
 800a06c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a072:	4b63      	ldr	r3, [pc, #396]	; (800a200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f003 030c 	and.w	r3, r3, #12
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d007      	beq.n	800a08e <HAL_RCC_GetSysClockFreq+0x32>
 800a07e:	2b08      	cmp	r3, #8
 800a080:	d008      	beq.n	800a094 <HAL_RCC_GetSysClockFreq+0x38>
 800a082:	2b00      	cmp	r3, #0
 800a084:	f040 80b4 	bne.w	800a1f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a088:	4b5e      	ldr	r3, [pc, #376]	; (800a204 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a08a:	60bb      	str	r3, [r7, #8]
       break;
 800a08c:	e0b3      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a08e:	4b5d      	ldr	r3, [pc, #372]	; (800a204 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a090:	60bb      	str	r3, [r7, #8]
      break;
 800a092:	e0b0      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a094:	4b5a      	ldr	r3, [pc, #360]	; (800a200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a09c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a09e:	4b58      	ldr	r3, [pc, #352]	; (800a200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d04a      	beq.n	800a140 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0aa:	4b55      	ldr	r3, [pc, #340]	; (800a200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	099b      	lsrs	r3, r3, #6
 800a0b0:	f04f 0400 	mov.w	r4, #0
 800a0b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a0b8:	f04f 0200 	mov.w	r2, #0
 800a0bc:	ea03 0501 	and.w	r5, r3, r1
 800a0c0:	ea04 0602 	and.w	r6, r4, r2
 800a0c4:	4629      	mov	r1, r5
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	f04f 0300 	mov.w	r3, #0
 800a0cc:	f04f 0400 	mov.w	r4, #0
 800a0d0:	0154      	lsls	r4, r2, #5
 800a0d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a0d6:	014b      	lsls	r3, r1, #5
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4622      	mov	r2, r4
 800a0dc:	1b49      	subs	r1, r1, r5
 800a0de:	eb62 0206 	sbc.w	r2, r2, r6
 800a0e2:	f04f 0300 	mov.w	r3, #0
 800a0e6:	f04f 0400 	mov.w	r4, #0
 800a0ea:	0194      	lsls	r4, r2, #6
 800a0ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a0f0:	018b      	lsls	r3, r1, #6
 800a0f2:	1a5b      	subs	r3, r3, r1
 800a0f4:	eb64 0402 	sbc.w	r4, r4, r2
 800a0f8:	f04f 0100 	mov.w	r1, #0
 800a0fc:	f04f 0200 	mov.w	r2, #0
 800a100:	00e2      	lsls	r2, r4, #3
 800a102:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a106:	00d9      	lsls	r1, r3, #3
 800a108:	460b      	mov	r3, r1
 800a10a:	4614      	mov	r4, r2
 800a10c:	195b      	adds	r3, r3, r5
 800a10e:	eb44 0406 	adc.w	r4, r4, r6
 800a112:	f04f 0100 	mov.w	r1, #0
 800a116:	f04f 0200 	mov.w	r2, #0
 800a11a:	02a2      	lsls	r2, r4, #10
 800a11c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a120:	0299      	lsls	r1, r3, #10
 800a122:	460b      	mov	r3, r1
 800a124:	4614      	mov	r4, r2
 800a126:	4618      	mov	r0, r3
 800a128:	4621      	mov	r1, r4
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f04f 0400 	mov.w	r4, #0
 800a130:	461a      	mov	r2, r3
 800a132:	4623      	mov	r3, r4
 800a134:	f7f6 fdc0 	bl	8000cb8 <__aeabi_uldivmod>
 800a138:	4603      	mov	r3, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	e049      	b.n	800a1d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a140:	4b2f      	ldr	r3, [pc, #188]	; (800a200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	099b      	lsrs	r3, r3, #6
 800a146:	f04f 0400 	mov.w	r4, #0
 800a14a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	ea03 0501 	and.w	r5, r3, r1
 800a156:	ea04 0602 	and.w	r6, r4, r2
 800a15a:	4629      	mov	r1, r5
 800a15c:	4632      	mov	r2, r6
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f04f 0400 	mov.w	r4, #0
 800a166:	0154      	lsls	r4, r2, #5
 800a168:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a16c:	014b      	lsls	r3, r1, #5
 800a16e:	4619      	mov	r1, r3
 800a170:	4622      	mov	r2, r4
 800a172:	1b49      	subs	r1, r1, r5
 800a174:	eb62 0206 	sbc.w	r2, r2, r6
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	f04f 0400 	mov.w	r4, #0
 800a180:	0194      	lsls	r4, r2, #6
 800a182:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a186:	018b      	lsls	r3, r1, #6
 800a188:	1a5b      	subs	r3, r3, r1
 800a18a:	eb64 0402 	sbc.w	r4, r4, r2
 800a18e:	f04f 0100 	mov.w	r1, #0
 800a192:	f04f 0200 	mov.w	r2, #0
 800a196:	00e2      	lsls	r2, r4, #3
 800a198:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a19c:	00d9      	lsls	r1, r3, #3
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	195b      	adds	r3, r3, r5
 800a1a4:	eb44 0406 	adc.w	r4, r4, r6
 800a1a8:	f04f 0100 	mov.w	r1, #0
 800a1ac:	f04f 0200 	mov.w	r2, #0
 800a1b0:	02a2      	lsls	r2, r4, #10
 800a1b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a1b6:	0299      	lsls	r1, r3, #10
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4614      	mov	r4, r2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	4621      	mov	r1, r4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f04f 0400 	mov.w	r4, #0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	f7f6 fd75 	bl	8000cb8 <__aeabi_uldivmod>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a1d4:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	0c1b      	lsrs	r3, r3, #16
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	3301      	adds	r3, #1
 800a1e0:	005b      	lsls	r3, r3, #1
 800a1e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ec:	60bb      	str	r3, [r7, #8]
      break;
 800a1ee:	e002      	b.n	800a1f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1f0:	4b04      	ldr	r3, [pc, #16]	; (800a204 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a1f2:	60bb      	str	r3, [r7, #8]
      break;
 800a1f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3714      	adds	r7, #20
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a200:	40023800 	.word	0x40023800
 800a204:	00f42400 	.word	0x00f42400

0800a208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a20c:	4b03      	ldr	r3, [pc, #12]	; (800a21c <HAL_RCC_GetHCLKFreq+0x14>)
 800a20e:	681b      	ldr	r3, [r3, #0]
}
 800a210:	4618      	mov	r0, r3
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20000000 	.word	0x20000000

0800a220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a224:	f7ff fff0 	bl	800a208 <HAL_RCC_GetHCLKFreq>
 800a228:	4601      	mov	r1, r0
 800a22a:	4b05      	ldr	r3, [pc, #20]	; (800a240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	0a9b      	lsrs	r3, r3, #10
 800a230:	f003 0307 	and.w	r3, r3, #7
 800a234:	4a03      	ldr	r2, [pc, #12]	; (800a244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a236:	5cd3      	ldrb	r3, [r2, r3]
 800a238:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40023800 	.word	0x40023800
 800a244:	08017d70 	.word	0x08017d70

0800a248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a24c:	f7ff ffdc 	bl	800a208 <HAL_RCC_GetHCLKFreq>
 800a250:	4601      	mov	r1, r0
 800a252:	4b05      	ldr	r3, [pc, #20]	; (800a268 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	0b5b      	lsrs	r3, r3, #13
 800a258:	f003 0307 	and.w	r3, r3, #7
 800a25c:	4a03      	ldr	r2, [pc, #12]	; (800a26c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a25e:	5cd3      	ldrb	r3, [r2, r3]
 800a260:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a264:	4618      	mov	r0, r3
 800a266:	bd80      	pop	{r7, pc}
 800a268:	40023800 	.word	0x40023800
 800a26c:	08017d70 	.word	0x08017d70

0800a270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800a298:	4b66      	ldr	r3, [pc, #408]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a29a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a29e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a6:	4963      	ldr	r1, [pc, #396]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800a2ba:	4b5e      	ldr	r3, [pc, #376]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c8:	495a      	ldr	r1, [pc, #360]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d10b      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d105      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d075      	beq.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a2f4:	4b50      	ldr	r3, [pc, #320]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a2fa:	f7fd fb33 	bl	8007964 <HAL_GetTick>
 800a2fe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a300:	e008      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a302:	f7fd fb2f 	bl	8007964 <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	2b02      	cmp	r3, #2
 800a30e:	d901      	bls.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a310:	2303      	movs	r3, #3
 800a312:	e1dc      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a314:	4b47      	ldr	r3, [pc, #284]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1f0      	bne.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0301 	and.w	r3, r3, #1
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d009      	beq.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	019a      	lsls	r2, r3, #6
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	071b      	lsls	r3, r3, #28
 800a338:	493e      	ldr	r1, [pc, #248]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a33a:	4313      	orrs	r3, r2
 800a33c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0302 	and.w	r3, r3, #2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d01f      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a34c:	4b39      	ldr	r3, [pc, #228]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a34e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a352:	0f1b      	lsrs	r3, r3, #28
 800a354:	f003 0307 	and.w	r3, r3, #7
 800a358:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	019a      	lsls	r2, r3, #6
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	061b      	lsls	r3, r3, #24
 800a366:	431a      	orrs	r2, r3
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	071b      	lsls	r3, r3, #28
 800a36c:	4931      	ldr	r1, [pc, #196]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a374:	4b2f      	ldr	r3, [pc, #188]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a376:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a37a:	f023 021f 	bic.w	r2, r3, #31
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6a1b      	ldr	r3, [r3, #32]
 800a382:	3b01      	subs	r3, #1
 800a384:	492b      	ldr	r1, [pc, #172]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a386:	4313      	orrs	r3, r2
 800a388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00d      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	019a      	lsls	r2, r3, #6
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	061b      	lsls	r3, r3, #24
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	071b      	lsls	r3, r3, #28
 800a3ac:	4921      	ldr	r1, [pc, #132]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3b4:	4b20      	ldr	r3, [pc, #128]	; (800a438 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3ba:	f7fd fad3 	bl	8007964 <HAL_GetTick>
 800a3be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3c0:	e008      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3c2:	f7fd facf 	bl	8007964 <HAL_GetTick>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	1ad3      	subs	r3, r2, r3
 800a3cc:	2b02      	cmp	r3, #2
 800a3ce:	d901      	bls.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e17c      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a3d4:	4b17      	ldr	r3, [pc, #92]	; (800a434 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d0f0      	beq.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d112      	bne.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10c      	bne.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 80ce 	beq.w	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a40a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a40e:	f040 80c8 	bne.w	800a5a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a412:	4b0a      	ldr	r3, [pc, #40]	; (800a43c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a414:	2200      	movs	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a418:	f7fd faa4 	bl	8007964 <HAL_GetTick>
 800a41c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a41e:	e00f      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a420:	f7fd faa0 	bl	8007964 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d908      	bls.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e14d      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a432:	bf00      	nop
 800a434:	40023800 	.word	0x40023800
 800a438:	42470068 	.word	0x42470068
 800a43c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a440:	4ba5      	ldr	r3, [pc, #660]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a44c:	d0e8      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02e      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a45a:	4b9f      	ldr	r3, [pc, #636]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a460:	0c1b      	lsrs	r3, r3, #16
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	3301      	adds	r3, #1
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a46c:	4b9a      	ldr	r3, [pc, #616]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a46e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a472:	0f1b      	lsrs	r3, r3, #28
 800a474:	f003 0307 	and.w	r3, r3, #7
 800a478:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	019a      	lsls	r2, r3, #6
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	085b      	lsrs	r3, r3, #1
 800a484:	3b01      	subs	r3, #1
 800a486:	041b      	lsls	r3, r3, #16
 800a488:	431a      	orrs	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	699b      	ldr	r3, [r3, #24]
 800a48e:	061b      	lsls	r3, r3, #24
 800a490:	431a      	orrs	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	071b      	lsls	r3, r3, #28
 800a496:	4990      	ldr	r1, [pc, #576]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a49e:	4b8e      	ldr	r3, [pc, #568]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	021b      	lsls	r3, r3, #8
 800a4b0:	4989      	ldr	r1, [pc, #548]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0308 	and.w	r3, r3, #8
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d02c      	beq.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a4c4:	4b84      	ldr	r3, [pc, #528]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ca:	0c1b      	lsrs	r3, r3, #16
 800a4cc:	f003 0303 	and.w	r3, r3, #3
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a4d6:	4b80      	ldr	r3, [pc, #512]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a4d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4dc:	0e1b      	lsrs	r3, r3, #24
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	019a      	lsls	r2, r3, #6
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	085b      	lsrs	r3, r3, #1
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	041b      	lsls	r3, r3, #16
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	061b      	lsls	r3, r3, #24
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	69db      	ldr	r3, [r3, #28]
 800a4fe:	071b      	lsls	r3, r3, #28
 800a500:	4975      	ldr	r1, [pc, #468]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a502:	4313      	orrs	r3, r2
 800a504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a508:	4b73      	ldr	r3, [pc, #460]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a50a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a50e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a516:	4970      	ldr	r1, [pc, #448]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a526:	2b00      	cmp	r3, #0
 800a528:	d024      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a52e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a532:	d11f      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a534:	4b68      	ldr	r3, [pc, #416]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a53a:	0e1b      	lsrs	r3, r3, #24
 800a53c:	f003 030f 	and.w	r3, r3, #15
 800a540:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a542:	4b65      	ldr	r3, [pc, #404]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a548:	0f1b      	lsrs	r3, r3, #28
 800a54a:	f003 0307 	and.w	r3, r3, #7
 800a54e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	019a      	lsls	r2, r3, #6
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	3b01      	subs	r3, #1
 800a55e:	041b      	lsls	r3, r3, #16
 800a560:	431a      	orrs	r2, r3
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	061b      	lsls	r3, r3, #24
 800a566:	431a      	orrs	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	071b      	lsls	r3, r3, #28
 800a56c:	495a      	ldr	r1, [pc, #360]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a574:	4b59      	ldr	r3, [pc, #356]	; (800a6dc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a576:	2201      	movs	r2, #1
 800a578:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a57a:	f7fd f9f3 	bl	8007964 <HAL_GetTick>
 800a57e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a580:	e008      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a582:	f7fd f9ef 	bl	8007964 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d901      	bls.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e09c      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a594:	4b50      	ldr	r3, [pc, #320]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a59c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5a0:	d1ef      	bne.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f003 0320 	and.w	r3, r3, #32
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f000 8083 	beq.w	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60bb      	str	r3, [r7, #8]
 800a5b4:	4b48      	ldr	r3, [pc, #288]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b8:	4a47      	ldr	r2, [pc, #284]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5be:	6413      	str	r3, [r2, #64]	; 0x40
 800a5c0:	4b45      	ldr	r3, [pc, #276]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5c8:	60bb      	str	r3, [r7, #8]
 800a5ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a5cc:	4b44      	ldr	r3, [pc, #272]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a43      	ldr	r2, [pc, #268]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a5d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5d6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5d8:	f7fd f9c4 	bl	8007964 <HAL_GetTick>
 800a5dc:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a5e0:	f7fd f9c0 	bl	8007964 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e06d      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a5f2:	4b3b      	ldr	r3, [pc, #236]	; (800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0f0      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a5fe:	4b36      	ldr	r3, [pc, #216]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a606:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d02f      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d028      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a61c:	4b2e      	ldr	r3, [pc, #184]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a624:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a626:	4b2f      	ldr	r3, [pc, #188]	; (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a628:	2201      	movs	r2, #1
 800a62a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a62c:	4b2d      	ldr	r3, [pc, #180]	; (800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a62e:	2200      	movs	r2, #0
 800a630:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a632:	4a29      	ldr	r2, [pc, #164]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a638:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a63a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a63c:	f003 0301 	and.w	r3, r3, #1
 800a640:	2b01      	cmp	r3, #1
 800a642:	d114      	bne.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a644:	f7fd f98e 	bl	8007964 <HAL_GetTick>
 800a648:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a64a:	e00a      	b.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a64c:	f7fd f98a 	bl	8007964 <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	f241 3288 	movw	r2, #5000	; 0x1388
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d901      	bls.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a65e:	2303      	movs	r3, #3
 800a660:	e035      	b.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a662:	4b1d      	ldr	r3, [pc, #116]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a666:	f003 0302 	and.w	r3, r3, #2
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d0ee      	beq.n	800a64c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a67a:	d10d      	bne.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a67c:	4b16      	ldr	r3, [pc, #88]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a68c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a690:	4911      	ldr	r1, [pc, #68]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a692:	4313      	orrs	r3, r2
 800a694:	608b      	str	r3, [r1, #8]
 800a696:	e005      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a698:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	4a0e      	ldr	r2, [pc, #56]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a69e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a6a2:	6093      	str	r3, [r2, #8]
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a6b0:	4909      	ldr	r1, [pc, #36]	; (800a6d8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f003 0310 	and.w	r3, r3, #16
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d004      	beq.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a6c8:	4b07      	ldr	r3, [pc, #28]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a6ca:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3720      	adds	r7, #32
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	40023800 	.word	0x40023800
 800a6dc:	42470070 	.word	0x42470070
 800a6e0:	40007000 	.word	0x40007000
 800a6e4:	42470e40 	.word	0x42470e40
 800a6e8:	424711e0 	.word	0x424711e0

0800a6ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0301 	and.w	r3, r3, #1
 800a700:	2b00      	cmp	r3, #0
 800a702:	d075      	beq.n	800a7f0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a704:	4ba2      	ldr	r3, [pc, #648]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f003 030c 	and.w	r3, r3, #12
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d00c      	beq.n	800a72a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a710:	4b9f      	ldr	r3, [pc, #636]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d112      	bne.n	800a742 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a71c:	4b9c      	ldr	r3, [pc, #624]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a724:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a728:	d10b      	bne.n	800a742 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a72a:	4b99      	ldr	r3, [pc, #612]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d05b      	beq.n	800a7ee <HAL_RCC_OscConfig+0x102>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d157      	bne.n	800a7ee <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e20b      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a74a:	d106      	bne.n	800a75a <HAL_RCC_OscConfig+0x6e>
 800a74c:	4b90      	ldr	r3, [pc, #576]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a8f      	ldr	r2, [pc, #572]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	e01d      	b.n	800a796 <HAL_RCC_OscConfig+0xaa>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a762:	d10c      	bne.n	800a77e <HAL_RCC_OscConfig+0x92>
 800a764:	4b8a      	ldr	r3, [pc, #552]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a89      	ldr	r2, [pc, #548]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a76a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	4b87      	ldr	r3, [pc, #540]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a86      	ldr	r2, [pc, #536]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	e00b      	b.n	800a796 <HAL_RCC_OscConfig+0xaa>
 800a77e:	4b84      	ldr	r3, [pc, #528]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a83      	ldr	r2, [pc, #524]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	4b81      	ldr	r3, [pc, #516]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a80      	ldr	r2, [pc, #512]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a790:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a794:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d013      	beq.n	800a7c6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79e:	f7fd f8e1 	bl	8007964 <HAL_GetTick>
 800a7a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7a4:	e008      	b.n	800a7b8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7a6:	f7fd f8dd 	bl	8007964 <HAL_GetTick>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	1ad3      	subs	r3, r2, r3
 800a7b0:	2b64      	cmp	r3, #100	; 0x64
 800a7b2:	d901      	bls.n	800a7b8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	e1d0      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7b8:	4b75      	ldr	r3, [pc, #468]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0f0      	beq.n	800a7a6 <HAL_RCC_OscConfig+0xba>
 800a7c4:	e014      	b.n	800a7f0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c6:	f7fd f8cd 	bl	8007964 <HAL_GetTick>
 800a7ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7cc:	e008      	b.n	800a7e0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a7ce:	f7fd f8c9 	bl	8007964 <HAL_GetTick>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	2b64      	cmp	r3, #100	; 0x64
 800a7da:	d901      	bls.n	800a7e0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e1bc      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a7e0:	4b6b      	ldr	r3, [pc, #428]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1f0      	bne.n	800a7ce <HAL_RCC_OscConfig+0xe2>
 800a7ec:	e000      	b.n	800a7f0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7ee:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d063      	beq.n	800a8c4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a7fc:	4b64      	ldr	r3, [pc, #400]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f003 030c 	and.w	r3, r3, #12
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00b      	beq.n	800a820 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a808:	4b61      	ldr	r3, [pc, #388]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a810:	2b08      	cmp	r3, #8
 800a812:	d11c      	bne.n	800a84e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a814:	4b5e      	ldr	r3, [pc, #376]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d116      	bne.n	800a84e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a820:	4b5b      	ldr	r3, [pc, #364]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0302 	and.w	r3, r3, #2
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <HAL_RCC_OscConfig+0x14c>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d001      	beq.n	800a838 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e190      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a838:	4b55      	ldr	r3, [pc, #340]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	00db      	lsls	r3, r3, #3
 800a846:	4952      	ldr	r1, [pc, #328]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a848:	4313      	orrs	r3, r2
 800a84a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a84c:	e03a      	b.n	800a8c4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d020      	beq.n	800a898 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a856:	4b4f      	ldr	r3, [pc, #316]	; (800a994 <HAL_RCC_OscConfig+0x2a8>)
 800a858:	2201      	movs	r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a85c:	f7fd f882 	bl	8007964 <HAL_GetTick>
 800a860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a862:	e008      	b.n	800a876 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a864:	f7fd f87e 	bl	8007964 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d901      	bls.n	800a876 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e171      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a876:	4b46      	ldr	r3, [pc, #280]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0f0      	beq.n	800a864 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a882:	4b43      	ldr	r3, [pc, #268]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	00db      	lsls	r3, r3, #3
 800a890:	493f      	ldr	r1, [pc, #252]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a892:	4313      	orrs	r3, r2
 800a894:	600b      	str	r3, [r1, #0]
 800a896:	e015      	b.n	800a8c4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a898:	4b3e      	ldr	r3, [pc, #248]	; (800a994 <HAL_RCC_OscConfig+0x2a8>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a89e:	f7fd f861 	bl	8007964 <HAL_GetTick>
 800a8a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a8a6:	f7fd f85d 	bl	8007964 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d901      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e150      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a8b8:	4b35      	ldr	r3, [pc, #212]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0302 	and.w	r3, r3, #2
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f0      	bne.n	800a8a6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0308 	and.w	r3, r3, #8
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d030      	beq.n	800a932 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d016      	beq.n	800a906 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8d8:	4b2f      	ldr	r3, [pc, #188]	; (800a998 <HAL_RCC_OscConfig+0x2ac>)
 800a8da:	2201      	movs	r2, #1
 800a8dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8de:	f7fd f841 	bl	8007964 <HAL_GetTick>
 800a8e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8e4:	e008      	b.n	800a8f8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a8e6:	f7fd f83d 	bl	8007964 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d901      	bls.n	800a8f8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a8f4:	2303      	movs	r3, #3
 800a8f6:	e130      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a8f8:	4b25      	ldr	r3, [pc, #148]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a8fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8fc:	f003 0302 	and.w	r3, r3, #2
 800a900:	2b00      	cmp	r3, #0
 800a902:	d0f0      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x1fa>
 800a904:	e015      	b.n	800a932 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a906:	4b24      	ldr	r3, [pc, #144]	; (800a998 <HAL_RCC_OscConfig+0x2ac>)
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a90c:	f7fd f82a 	bl	8007964 <HAL_GetTick>
 800a910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a912:	e008      	b.n	800a926 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a914:	f7fd f826 	bl	8007964 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d901      	bls.n	800a926 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
 800a924:	e119      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a926:	4b1a      	ldr	r3, [pc, #104]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a92a:	f003 0302 	and.w	r3, r3, #2
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1f0      	bne.n	800a914 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f003 0304 	and.w	r3, r3, #4
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 809f 	beq.w	800aa7e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a940:	2300      	movs	r3, #0
 800a942:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a944:	4b12      	ldr	r3, [pc, #72]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d10f      	bne.n	800a970 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	4b0e      	ldr	r3, [pc, #56]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a958:	4a0d      	ldr	r2, [pc, #52]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a95a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a95e:	6413      	str	r3, [r2, #64]	; 0x40
 800a960:	4b0b      	ldr	r3, [pc, #44]	; (800a990 <HAL_RCC_OscConfig+0x2a4>)
 800a962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a96c:	2301      	movs	r3, #1
 800a96e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a970:	4b0a      	ldr	r3, [pc, #40]	; (800a99c <HAL_RCC_OscConfig+0x2b0>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d120      	bne.n	800a9be <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a97c:	4b07      	ldr	r3, [pc, #28]	; (800a99c <HAL_RCC_OscConfig+0x2b0>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a06      	ldr	r2, [pc, #24]	; (800a99c <HAL_RCC_OscConfig+0x2b0>)
 800a982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a988:	f7fc ffec 	bl	8007964 <HAL_GetTick>
 800a98c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a98e:	e010      	b.n	800a9b2 <HAL_RCC_OscConfig+0x2c6>
 800a990:	40023800 	.word	0x40023800
 800a994:	42470000 	.word	0x42470000
 800a998:	42470e80 	.word	0x42470e80
 800a99c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9a0:	f7fc ffe0 	bl	8007964 <HAL_GetTick>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	1ad3      	subs	r3, r2, r3
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d901      	bls.n	800a9b2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e0d3      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a9b2:	4b6c      	ldr	r3, [pc, #432]	; (800ab64 <HAL_RCC_OscConfig+0x478>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d0f0      	beq.n	800a9a0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	2b01      	cmp	r3, #1
 800a9c4:	d106      	bne.n	800a9d4 <HAL_RCC_OscConfig+0x2e8>
 800a9c6:	4b68      	ldr	r3, [pc, #416]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ca:	4a67      	ldr	r2, [pc, #412]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9cc:	f043 0301 	orr.w	r3, r3, #1
 800a9d0:	6713      	str	r3, [r2, #112]	; 0x70
 800a9d2:	e01c      	b.n	800aa0e <HAL_RCC_OscConfig+0x322>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	d10c      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x30a>
 800a9dc:	4b62      	ldr	r3, [pc, #392]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e0:	4a61      	ldr	r2, [pc, #388]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9e2:	f043 0304 	orr.w	r3, r3, #4
 800a9e6:	6713      	str	r3, [r2, #112]	; 0x70
 800a9e8:	4b5f      	ldr	r3, [pc, #380]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ec:	4a5e      	ldr	r2, [pc, #376]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9ee:	f043 0301 	orr.w	r3, r3, #1
 800a9f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a9f4:	e00b      	b.n	800aa0e <HAL_RCC_OscConfig+0x322>
 800a9f6:	4b5c      	ldr	r3, [pc, #368]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9fa:	4a5b      	ldr	r2, [pc, #364]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800a9fc:	f023 0301 	bic.w	r3, r3, #1
 800aa00:	6713      	str	r3, [r2, #112]	; 0x70
 800aa02:	4b59      	ldr	r3, [pc, #356]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa06:	4a58      	ldr	r2, [pc, #352]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa08:	f023 0304 	bic.w	r3, r3, #4
 800aa0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d015      	beq.n	800aa42 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa16:	f7fc ffa5 	bl	8007964 <HAL_GetTick>
 800aa1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa1c:	e00a      	b.n	800aa34 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa1e:	f7fc ffa1 	bl	8007964 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d901      	bls.n	800aa34 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e092      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa34:	4b4c      	ldr	r3, [pc, #304]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d0ee      	beq.n	800aa1e <HAL_RCC_OscConfig+0x332>
 800aa40:	e014      	b.n	800aa6c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa42:	f7fc ff8f 	bl	8007964 <HAL_GetTick>
 800aa46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa48:	e00a      	b.n	800aa60 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa4a:	f7fc ff8b 	bl	8007964 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d901      	bls.n	800aa60 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e07c      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aa60:	4b41      	ldr	r3, [pc, #260]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d1ee      	bne.n	800aa4a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800aa6c:	7dfb      	ldrb	r3, [r7, #23]
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d105      	bne.n	800aa7e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa72:	4b3d      	ldr	r3, [pc, #244]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	4a3c      	ldr	r2, [pc, #240]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d068      	beq.n	800ab58 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800aa86:	4b38      	ldr	r3, [pc, #224]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	f003 030c 	and.w	r3, r3, #12
 800aa8e:	2b08      	cmp	r3, #8
 800aa90:	d060      	beq.n	800ab54 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d145      	bne.n	800ab26 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa9a:	4b34      	ldr	r3, [pc, #208]	; (800ab6c <HAL_RCC_OscConfig+0x480>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaa0:	f7fc ff60 	bl	8007964 <HAL_GetTick>
 800aaa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaa6:	e008      	b.n	800aaba <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aaa8:	f7fc ff5c 	bl	8007964 <HAL_GetTick>
 800aaac:	4602      	mov	r2, r0
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	1ad3      	subs	r3, r2, r3
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d901      	bls.n	800aaba <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e04f      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aaba:	4b2b      	ldr	r3, [pc, #172]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1f0      	bne.n	800aaa8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	69da      	ldr	r2, [r3, #28]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad4:	019b      	lsls	r3, r3, #6
 800aad6:	431a      	orrs	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aadc:	085b      	lsrs	r3, r3, #1
 800aade:	3b01      	subs	r3, #1
 800aae0:	041b      	lsls	r3, r3, #16
 800aae2:	431a      	orrs	r2, r3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae8:	061b      	lsls	r3, r3, #24
 800aaea:	431a      	orrs	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf0:	071b      	lsls	r3, r3, #28
 800aaf2:	491d      	ldr	r1, [pc, #116]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aaf8:	4b1c      	ldr	r3, [pc, #112]	; (800ab6c <HAL_RCC_OscConfig+0x480>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aafe:	f7fc ff31 	bl	8007964 <HAL_GetTick>
 800ab02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab04:	e008      	b.n	800ab18 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab06:	f7fc ff2d 	bl	8007964 <HAL_GetTick>
 800ab0a:	4602      	mov	r2, r0
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	1ad3      	subs	r3, r2, r3
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d901      	bls.n	800ab18 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e020      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ab18:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d0f0      	beq.n	800ab06 <HAL_RCC_OscConfig+0x41a>
 800ab24:	e018      	b.n	800ab58 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab26:	4b11      	ldr	r3, [pc, #68]	; (800ab6c <HAL_RCC_OscConfig+0x480>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab2c:	f7fc ff1a 	bl	8007964 <HAL_GetTick>
 800ab30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab32:	e008      	b.n	800ab46 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ab34:	f7fc ff16 	bl	8007964 <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d901      	bls.n	800ab46 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e009      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ab46:	4b08      	ldr	r3, [pc, #32]	; (800ab68 <HAL_RCC_OscConfig+0x47c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d1f0      	bne.n	800ab34 <HAL_RCC_OscConfig+0x448>
 800ab52:	e001      	b.n	800ab58 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e000      	b.n	800ab5a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	40007000 	.word	0x40007000
 800ab68:	40023800 	.word	0x40023800
 800ab6c:	42470060 	.word	0x42470060

0800ab70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d101      	bne.n	800ab82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e022      	b.n	800abc8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d105      	bne.n	800ab9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7fa febf 	bl	8005918 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2203      	movs	r2, #3
 800ab9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f814 	bl	800abd0 <HAL_SD_InitCard>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e00a      	b.n	800abc8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800abd0:	b5b0      	push	{r4, r5, r7, lr}
 800abd2:	b08e      	sub	sp, #56	; 0x38
 800abd4:	af04      	add	r7, sp, #16
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800abd8:	2300      	movs	r3, #0
 800abda:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800abe0:	2300      	movs	r3, #0
 800abe2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800abe4:	2300      	movs	r3, #0
 800abe6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800abe8:	2300      	movs	r3, #0
 800abea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800abec:	2376      	movs	r3, #118	; 0x76
 800abee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681d      	ldr	r5, [r3, #0]
 800abf4:	466c      	mov	r4, sp
 800abf6:	f107 0314 	add.w	r3, r7, #20
 800abfa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac02:	f107 0308 	add.w	r3, r7, #8
 800ac06:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f003 fa87 	bl	800e11c <SDIO_Init>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ac14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d001      	beq.n	800ac20 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	e031      	b.n	800ac84 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <HAL_SD_InitCard+0xbc>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f003 fabf 	bl	800e1ae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ac30:	4b16      	ldr	r3, [pc, #88]	; (800ac8c <HAL_SD_InitCard+0xbc>)
 800ac32:	2201      	movs	r2, #1
 800ac34:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 ffc6 	bl	800bbc8 <SD_PowerON>
 800ac3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac3e:	6a3b      	ldr	r3, [r7, #32]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac50:	6a3b      	ldr	r3, [r7, #32]
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e013      	b.n	800ac84 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 fee5 	bl	800ba2c <SD_InitCard>
 800ac62:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac64:	6a3b      	ldr	r3, [r7, #32]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00b      	beq.n	800ac82 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac76:	6a3b      	ldr	r3, [r7, #32]
 800ac78:	431a      	orrs	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3728      	adds	r7, #40	; 0x28
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bdb0      	pop	{r4, r5, r7, pc}
 800ac8c:	422580a0 	.word	0x422580a0

0800ac90 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b08c      	sub	sp, #48	; 0x30
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d107      	bne.n	800acb8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e0c7      	b.n	800ae48 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	f040 80c0 	bne.w	800ae46 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800accc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	441a      	add	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d907      	bls.n	800acea <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e0ae      	b.n	800ae48 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2203      	movs	r2, #3
 800acee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	2200      	movs	r2, #0
 800acf8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ad08:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0e:	4a50      	ldr	r2, [pc, #320]	; (800ae50 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800ad10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad16:	4a4f      	ldr	r2, [pc, #316]	; (800ae54 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800ad18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1e:	2200      	movs	r2, #0
 800ad20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3380      	adds	r3, #128	; 0x80
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	025b      	lsls	r3, r3, #9
 800ad34:	089b      	lsrs	r3, r3, #2
 800ad36:	f7fd fc07 	bl	8008548 <HAL_DMA_Start_IT>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d017      	beq.n	800ad70 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ad4e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a40      	ldr	r2, [pc, #256]	; (800ae58 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e06b      	b.n	800ae48 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ad70:	4b3a      	ldr	r3, [pc, #232]	; (800ae5c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800ad72:	2201      	movs	r2, #1
 800ad74:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d002      	beq.n	800ad84 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800ad7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad80:	025b      	lsls	r3, r3, #9
 800ad82:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f003 faa1 	bl	800e2d4 <SDMMC_CmdBlockLength>
 800ad92:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800ad94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d00f      	beq.n	800adba <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a2e      	ldr	r2, [pc, #184]	; (800ae58 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	431a      	orrs	r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2201      	movs	r2, #1
 800adb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e046      	b.n	800ae48 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800adba:	f04f 33ff 	mov.w	r3, #4294967295
 800adbe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	025b      	lsls	r3, r3, #9
 800adc4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800adc6:	2390      	movs	r3, #144	; 0x90
 800adc8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800adca:	2302      	movs	r3, #2
 800adcc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800adce:	2300      	movs	r3, #0
 800add0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800add2:	2301      	movs	r3, #1
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f107 0210 	add.w	r2, r7, #16
 800adde:	4611      	mov	r1, r2
 800ade0:	4618      	mov	r0, r3
 800ade2:	f003 fa4b 	bl	800e27c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d90a      	bls.n	800ae02 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2282      	movs	r2, #130	; 0x82
 800adf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adf8:	4618      	mov	r0, r3
 800adfa:	f003 faaf 	bl	800e35c <SDMMC_CmdReadMultiBlock>
 800adfe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ae00:	e009      	b.n	800ae16 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2281      	movs	r2, #129	; 0x81
 800ae06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f003 fa82 	bl	800e318 <SDMMC_CmdReadSingleBlock>
 800ae14:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ae16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d012      	beq.n	800ae42 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a0d      	ldr	r2, [pc, #52]	; (800ae58 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ae22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e002      	b.n	800ae48 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	e000      	b.n	800ae48 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ae46:	2302      	movs	r3, #2
  }
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3730      	adds	r7, #48	; 0x30
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	0800b83b 	.word	0x0800b83b
 800ae54:	0800b8ad 	.word	0x0800b8ad
 800ae58:	004005ff 	.word	0x004005ff
 800ae5c:	4225858c 	.word	0x4225858c

0800ae60 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08c      	sub	sp, #48	; 0x30
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
 800ae6c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d107      	bne.n	800ae88 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e0ca      	b.n	800b01e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	f040 80c3 	bne.w	800b01c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ae9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	441a      	add	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d907      	bls.n	800aeba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e0b1      	b.n	800b01e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2203      	movs	r2, #3
 800aebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2200      	movs	r2, #0
 800aec8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f042 021a 	orr.w	r2, r2, #26
 800aed8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aede:	4a52      	ldr	r2, [pc, #328]	; (800b028 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800aee0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee6:	4a51      	ldr	r2, [pc, #324]	; (800b02c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800aee8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	2200      	movs	r2, #0
 800aef0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d002      	beq.n	800af00 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	025b      	lsls	r3, r3, #9
 800aefe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800af08:	4618      	mov	r0, r3
 800af0a:	f003 f9e3 	bl	800e2d4 <SDMMC_CmdBlockLength>
 800af0e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800af10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00f      	beq.n	800af36 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a45      	ldr	r2, [pc, #276]	; (800b030 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800af1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af24:	431a      	orrs	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800af32:	2301      	movs	r3, #1
 800af34:	e073      	b.n	800b01e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d90a      	bls.n	800af52 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	22a0      	movs	r2, #160	; 0xa0
 800af40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af48:	4618      	mov	r0, r3
 800af4a:	f003 fa4b 	bl	800e3e4 <SDMMC_CmdWriteMultiBlock>
 800af4e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800af50:	e009      	b.n	800af66 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	2290      	movs	r2, #144	; 0x90
 800af56:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af5e:	4618      	mov	r0, r3
 800af60:	f003 fa1e 	bl	800e3a0 <SDMMC_CmdWriteSingleBlock>
 800af64:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800af66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d012      	beq.n	800af92 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a2f      	ldr	r2, [pc, #188]	; (800b030 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800af72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7a:	431a      	orrs	r2, r3
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e045      	b.n	800b01e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800af92:	4b28      	ldr	r3, [pc, #160]	; (800b034 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800af94:	2201      	movs	r2, #1
 800af96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800af9c:	68b9      	ldr	r1, [r7, #8]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	3380      	adds	r3, #128	; 0x80
 800afa4:	461a      	mov	r2, r3
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	025b      	lsls	r3, r3, #9
 800afaa:	089b      	lsrs	r3, r3, #2
 800afac:	f7fd facc 	bl	8008548 <HAL_DMA_Start_IT>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d01a      	beq.n	800afec <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f022 021a 	bic.w	r2, r2, #26
 800afc4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a19      	ldr	r2, [pc, #100]	; (800b030 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e018      	b.n	800b01e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800afec:	f04f 33ff 	mov.w	r3, #4294967295
 800aff0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	025b      	lsls	r3, r3, #9
 800aff6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aff8:	2390      	movs	r3, #144	; 0x90
 800affa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800affc:	2300      	movs	r3, #0
 800affe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b000:	2300      	movs	r3, #0
 800b002:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b004:	2301      	movs	r3, #1
 800b006:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f107 0210 	add.w	r2, r7, #16
 800b010:	4611      	mov	r1, r2
 800b012:	4618      	mov	r0, r3
 800b014:	f003 f932 	bl	800e27c <SDIO_ConfigData>

      return HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	e000      	b.n	800b01e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800b01c:	2302      	movs	r3, #2
  }
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3730      	adds	r7, #48	; 0x30
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	0800b811 	.word	0x0800b811
 800b02c:	0800b8ad 	.word	0x0800b8ad
 800b030:	004005ff 	.word	0x004005ff
 800b034:	4225858c 	.word	0x4225858c

0800b038 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b044:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b04c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d008      	beq.n	800b066 <HAL_SD_IRQHandler+0x2e>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f003 0308 	and.w	r3, r3, #8
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d003      	beq.n	800b066 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f000 ffc8 	bl	800bff4 <SD_Read_IT>
 800b064:	e155      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 808f 	beq.w	800b194 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b07e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	6812      	ldr	r2, [r2, #0]
 800b08a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800b08e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b092:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 0201 	bic.w	r2, r2, #1
 800b0a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	f003 0308 	and.w	r3, r3, #8
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d039      	beq.n	800b122 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d104      	bne.n	800b0c2 <HAL_SD_IRQHandler+0x8a>
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f003 0320 	and.w	r3, r3, #32
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d011      	beq.n	800b0e6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f003 f9ae 	bl	800e428 <SDMMC_CmdStopTransfer>
 800b0cc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d008      	beq.n	800b0e6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	431a      	orrs	r2, r3
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f91f 	bl	800b324 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f240 523a 	movw	r2, #1338	; 0x53a
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <HAL_SD_IRQHandler+0xda>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d003      	beq.n	800b11a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f003 fe04 	bl	800ed20 <HAL_SD_RxCpltCallback>
 800b118:	e0fb      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f003 fdf6 	bl	800ed0c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b120:	e0f7      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f000 80f2 	beq.w	800b312 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f003 0320 	and.w	r3, r3, #32
 800b134:	2b00      	cmp	r3, #0
 800b136:	d011      	beq.n	800b15c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f003 f973 	bl	800e428 <SDMMC_CmdStopTransfer>
 800b142:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d008      	beq.n	800b15c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	431a      	orrs	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f8e4 	bl	800b324 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b00      	cmp	r3, #0
 800b164:	f040 80d5 	bne.w	800b312 <HAL_SD_IRQHandler+0x2da>
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f040 80cf 	bne.w	800b312 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f022 0208 	bic.w	r2, r2, #8
 800b182:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f003 fdbd 	bl	800ed0c <HAL_SD_TxCpltCallback>
}
 800b192:	e0be      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d008      	beq.n	800b1b4 <HAL_SD_IRQHandler+0x17c>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f003 0308 	and.w	r3, r3, #8
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f000 ff72 	bl	800c096 <SD_Write_IT>
 800b1b2:	e0ae      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ba:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 80a7 	beq.w	800b312 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d005      	beq.n	800b1de <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	f043 0202 	orr.w	r2, r3, #2
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e4:	f003 0308 	and.w	r3, r3, #8
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d005      	beq.n	800b1f8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f0:	f043 0208 	orr.w	r2, r3, #8
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	d005      	beq.n	800b212 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	f043 0220 	orr.w	r2, r3, #32
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b218:	f003 0310 	and.w	r3, r3, #16
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b224:	f043 0210 	orr.w	r2, r3, #16
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f240 523a 	movw	r2, #1338	; 0x53a
 800b234:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b244:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4618      	mov	r0, r3
 800b24c:	f003 f8ec 	bl	800e428 <SDMMC_CmdStopTransfer>
 800b250:	4602      	mov	r2, r0
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b256:	431a      	orrs	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f003 0308 	and.w	r3, r3, #8
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00a      	beq.n	800b27c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b274:	6878      	ldr	r0, [r7, #4]
 800b276:	f000 f855 	bl	800b324 <HAL_SD_ErrorCallback>
}
 800b27a:	e04a      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b282:	2b00      	cmp	r3, #0
 800b284:	d045      	beq.n	800b312 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f003 0310 	and.w	r3, r3, #16
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d104      	bne.n	800b29a <HAL_SD_IRQHandler+0x262>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f003 0320 	and.w	r3, r3, #32
 800b296:	2b00      	cmp	r3, #0
 800b298:	d011      	beq.n	800b2be <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b29e:	4a1f      	ldr	r2, [pc, #124]	; (800b31c <HAL_SD_IRQHandler+0x2e4>)
 800b2a0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fd f9a6 	bl	80085f8 <HAL_DMA_Abort_IT>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d02f      	beq.n	800b312 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 fb4a 	bl	800b950 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b2bc:	e029      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d104      	bne.n	800b2d2 <HAL_SD_IRQHandler+0x29a>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f003 0302 	and.w	r3, r3, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d011      	beq.n	800b2f6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	4a12      	ldr	r2, [pc, #72]	; (800b320 <HAL_SD_IRQHandler+0x2e8>)
 800b2d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fd f98a 	bl	80085f8 <HAL_DMA_Abort_IT>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d013      	beq.n	800b312 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fb65 	bl	800b9be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b2f4:	e00d      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f003 fcf4 	bl	800ecf8 <HAL_SD_AbortCallback>
}
 800b310:	e7ff      	b.n	800b312 <HAL_SD_IRQHandler+0x2da>
 800b312:	bf00      	nop
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	0800b951 	.word	0x0800b951
 800b320:	0800b9bf 	.word	0x0800b9bf

0800b324 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b346:	0f9b      	lsrs	r3, r3, #30
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b352:	0e9b      	lsrs	r3, r3, #26
 800b354:	b2db      	uxtb	r3, r3
 800b356:	f003 030f 	and.w	r3, r3, #15
 800b35a:	b2da      	uxtb	r2, r3
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b364:	0e1b      	lsrs	r3, r3, #24
 800b366:	b2db      	uxtb	r3, r3
 800b368:	f003 0303 	and.w	r3, r3, #3
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b376:	0c1b      	lsrs	r3, r3, #16
 800b378:	b2da      	uxtb	r2, r3
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b382:	0a1b      	lsrs	r3, r3, #8
 800b384:	b2da      	uxtb	r2, r3
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b38e:	b2da      	uxtb	r2, r3
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b398:	0d1b      	lsrs	r3, r3, #20
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3a4:	0c1b      	lsrs	r3, r3, #16
 800b3a6:	b2db      	uxtb	r3, r3
 800b3a8:	f003 030f 	and.w	r3, r3, #15
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3b6:	0bdb      	lsrs	r3, r3, #15
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	b2da      	uxtb	r2, r3
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3c8:	0b9b      	lsrs	r3, r3, #14
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	f003 0301 	and.w	r3, r3, #1
 800b3d0:	b2da      	uxtb	r2, r3
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3da:	0b5b      	lsrs	r3, r3, #13
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	b2da      	uxtb	r2, r3
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3ec:	0b1b      	lsrs	r3, r3, #12
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	f003 0301 	and.w	r3, r3, #1
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b404:	2b00      	cmp	r3, #0
 800b406:	d163      	bne.n	800b4d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b40c:	009a      	lsls	r2, r3, #2
 800b40e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b412:	4013      	ands	r3, r2
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b418:	0f92      	lsrs	r2, r2, #30
 800b41a:	431a      	orrs	r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b424:	0edb      	lsrs	r3, r3, #27
 800b426:	b2db      	uxtb	r3, r3
 800b428:	f003 0307 	and.w	r3, r3, #7
 800b42c:	b2da      	uxtb	r2, r3
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b436:	0e1b      	lsrs	r3, r3, #24
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	f003 0307 	and.w	r3, r3, #7
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b448:	0d5b      	lsrs	r3, r3, #21
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	f003 0307 	and.w	r3, r3, #7
 800b450:	b2da      	uxtb	r2, r3
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b45a:	0c9b      	lsrs	r3, r3, #18
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	f003 0307 	and.w	r3, r3, #7
 800b462:	b2da      	uxtb	r2, r3
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	0bdb      	lsrs	r3, r3, #15
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	f003 0307 	and.w	r3, r3, #7
 800b474:	b2da      	uxtb	r2, r3
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	7e1b      	ldrb	r3, [r3, #24]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	f003 0307 	and.w	r3, r3, #7
 800b48e:	3302      	adds	r3, #2
 800b490:	2201      	movs	r2, #1
 800b492:	fa02 f303 	lsl.w	r3, r2, r3
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b49a:	fb02 f203 	mul.w	r2, r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	7a1b      	ldrb	r3, [r3, #8]
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f003 030f 	and.w	r3, r3, #15
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	409a      	lsls	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b4bc:	0a52      	lsrs	r2, r2, #9
 800b4be:	fb02 f203 	mul.w	r2, r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4cc:	661a      	str	r2, [r3, #96]	; 0x60
 800b4ce:	e031      	b.n	800b534 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d11d      	bne.n	800b514 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4dc:	041b      	lsls	r3, r3, #16
 800b4de:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4e6:	0c1b      	lsrs	r3, r3, #16
 800b4e8:	431a      	orrs	r2, r3
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	029a      	lsls	r2, r3, #10
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b508:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	661a      	str	r2, [r3, #96]	; 0x60
 800b512:	e00f      	b.n	800b534 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a58      	ldr	r2, [pc, #352]	; (800b67c <HAL_SD_GetCardCSD+0x344>)
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b520:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e09d      	b.n	800b670 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b538:	0b9b      	lsrs	r3, r3, #14
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	b2da      	uxtb	r2, r3
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b54a:	09db      	lsrs	r3, r3, #7
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b552:	b2da      	uxtb	r2, r3
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b562:	b2da      	uxtb	r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b56c:	0fdb      	lsrs	r3, r3, #31
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b578:	0f5b      	lsrs	r3, r3, #29
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 0303 	and.w	r3, r3, #3
 800b580:	b2da      	uxtb	r2, r3
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b58a:	0e9b      	lsrs	r3, r3, #26
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	f003 0307 	and.w	r3, r3, #7
 800b592:	b2da      	uxtb	r2, r3
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b59c:	0d9b      	lsrs	r3, r3, #22
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	f003 030f 	and.w	r3, r3, #15
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ae:	0d5b      	lsrs	r3, r3, #21
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ca:	0c1b      	lsrs	r3, r3, #16
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5de:	0bdb      	lsrs	r3, r3, #15
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	f003 0301 	and.w	r3, r3, #1
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f2:	0b9b      	lsrs	r3, r3, #14
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	f003 0301 	and.w	r3, r3, #1
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b606:	0b5b      	lsrs	r3, r3, #13
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61a:	0b1b      	lsrs	r3, r3, #12
 800b61c:	b2db      	uxtb	r3, r3
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	b2da      	uxtb	r2, r3
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b62e:	0a9b      	lsrs	r3, r3, #10
 800b630:	b2db      	uxtb	r3, r3
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	b2da      	uxtb	r2, r3
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b642:	0a1b      	lsrs	r3, r3, #8
 800b644:	b2db      	uxtb	r3, r3
 800b646:	f003 0303 	and.w	r3, r3, #3
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b656:	085b      	lsrs	r3, r3, #1
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b65e:	b2da      	uxtb	r2, r3
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	004005ff 	.word	0x004005ff

0800b680 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b6d8:	b5b0      	push	{r4, r5, r7, lr}
 800b6da:	b08e      	sub	sp, #56	; 0x38
 800b6dc:	af04      	add	r7, sp, #16
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2203      	movs	r2, #3
 800b6e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d02e      	beq.n	800b750 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f8:	d106      	bne.n	800b708 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	639a      	str	r2, [r3, #56]	; 0x38
 800b706:	e029      	b.n	800b75c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70e:	d10a      	bne.n	800b726 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 fb0f 	bl	800bd34 <SD_WideBus_Enable>
 800b716:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	431a      	orrs	r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	639a      	str	r2, [r3, #56]	; 0x38
 800b724:	e01a      	b.n	800b75c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fb4c 	bl	800bdca <SD_WideBus_Disable>
 800b732:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	431a      	orrs	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	639a      	str	r2, [r3, #56]	; 0x38
 800b740:	e00c      	b.n	800b75c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b746:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38
 800b74e:	e005      	b.n	800b75c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b760:	2b00      	cmp	r3, #0
 800b762:	d009      	beq.n	800b778 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a18      	ldr	r2, [pc, #96]	; (800b7cc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b76a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	e024      	b.n	800b7c2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68db      	ldr	r3, [r3, #12]
 800b788:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	695b      	ldr	r3, [r3, #20]
 800b792:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	699b      	ldr	r3, [r3, #24]
 800b798:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681d      	ldr	r5, [r3, #0]
 800b79e:	466c      	mov	r4, sp
 800b7a0:	f107 0318 	add.w	r3, r7, #24
 800b7a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7ac:	f107 030c 	add.w	r3, r7, #12
 800b7b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f002 fcb2 	bl	800e11c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3728      	adds	r7, #40	; 0x28
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	004005ff 	.word	0x004005ff

0800b7d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b7dc:	f107 030c 	add.w	r3, r7, #12
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	f000 fa7e 	bl	800bce4 <SD_SendStatus>
 800b7e8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d005      	beq.n	800b7fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	431a      	orrs	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0a5b      	lsrs	r3, r3, #9
 800b800:	f003 030f 	and.w	r3, r3, #15
 800b804:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b806:	693b      	ldr	r3, [r7, #16]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b82c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b82e:	bf00      	nop
 800b830:	3714      	adds	r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b846:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b84c:	2b82      	cmp	r3, #130	; 0x82
 800b84e:	d111      	bne.n	800b874 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4618      	mov	r0, r3
 800b856:	f002 fde7 	bl	800e428 <SDMMC_CmdStopTransfer>
 800b85a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d008      	beq.n	800b874 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	431a      	orrs	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b86e:	68f8      	ldr	r0, [r7, #12]
 800b870:	f7ff fd58 	bl	800b324 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f022 0208 	bic.w	r2, r2, #8
 800b882:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f240 523a 	movw	r2, #1338	; 0x53a
 800b88c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2200      	movs	r2, #0
 800b89a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f003 fa3f 	bl	800ed20 <HAL_SD_RxCpltCallback>
#endif
}
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
	...

0800b8ac <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7fd f848 	bl	8008950 <HAL_DMA_GetError>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d03e      	beq.n	800b944 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8cc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d002      	beq.n	800b8e2 <SD_DMAError+0x36>
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d12d      	bne.n	800b93e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a19      	ldr	r2, [pc, #100]	; (800b94c <SD_DMAError+0xa0>)
 800b8e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b8f8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b906:	6978      	ldr	r0, [r7, #20]
 800b908:	f7ff ff62 	bl	800b7d0 <HAL_SD_GetCardState>
 800b90c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b06      	cmp	r3, #6
 800b912:	d002      	beq.n	800b91a <SD_DMAError+0x6e>
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	2b05      	cmp	r3, #5
 800b918:	d10a      	bne.n	800b930 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4618      	mov	r0, r3
 800b920:	f002 fd82 	bl	800e428 <SDMMC_CmdStopTransfer>
 800b924:	4602      	mov	r2, r0
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92a:	431a      	orrs	r2, r3
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2200      	movs	r2, #0
 800b93c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b93e:	6978      	ldr	r0, [r7, #20]
 800b940:	f7ff fcf0 	bl	800b324 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b944:	bf00      	nop
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	004005ff 	.word	0x004005ff

0800b950 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f240 523a 	movw	r2, #1338	; 0x53a
 800b966:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff ff31 	bl	800b7d0 <HAL_SD_GetCardState>
 800b96e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2200      	movs	r2, #0
 800b97c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b06      	cmp	r3, #6
 800b982:	d002      	beq.n	800b98a <SD_DMATxAbort+0x3a>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b05      	cmp	r3, #5
 800b988:	d10a      	bne.n	800b9a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4618      	mov	r0, r3
 800b990:	f002 fd4a 	bl	800e428 <SDMMC_CmdStopTransfer>
 800b994:	4602      	mov	r2, r0
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99a:	431a      	orrs	r2, r3
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d103      	bne.n	800b9b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f003 f9a5 	bl	800ecf8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b9ae:	e002      	b.n	800b9b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f7ff fcb7 	bl	800b324 <HAL_SD_ErrorCallback>
}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b9d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff fefa 	bl	800b7d0 <HAL_SD_GetCardState>
 800b9dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2b06      	cmp	r3, #6
 800b9f0:	d002      	beq.n	800b9f8 <SD_DMARxAbort+0x3a>
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	2b05      	cmp	r3, #5
 800b9f6:	d10a      	bne.n	800ba0e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f002 fd13 	bl	800e428 <SDMMC_CmdStopTransfer>
 800ba02:	4602      	mov	r2, r0
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba08:	431a      	orrs	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d103      	bne.n	800ba1e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f003 f96e 	bl	800ecf8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ba1c:	e002      	b.n	800ba24 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f7ff fc80 	bl	800b324 <HAL_SD_ErrorCallback>
}
 800ba24:	bf00      	nop
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ba2c:	b5b0      	push	{r4, r5, r7, lr}
 800ba2e:	b094      	sub	sp, #80	; 0x50
 800ba30:	af04      	add	r7, sp, #16
 800ba32:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ba34:	2301      	movs	r3, #1
 800ba36:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f002 fbc5 	bl	800e1cc <SDIO_GetPowerState>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d102      	bne.n	800ba4e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ba4c:	e0b7      	b.n	800bbbe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d02f      	beq.n	800bab6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f002 fdee 	bl	800e63c <SDMMC_CmdSendCID>
 800ba60:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <SD_InitCard+0x40>
    {
      return errorstate;
 800ba68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba6a:	e0a8      	b.n	800bbbe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f002 fbef 	bl	800e256 <SDIO_GetResponse>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2104      	movs	r1, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f002 fbe6 	bl	800e256 <SDIO_GetResponse>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2108      	movs	r1, #8
 800ba96:	4618      	mov	r0, r3
 800ba98:	f002 fbdd 	bl	800e256 <SDIO_GetResponse>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	210c      	movs	r1, #12
 800baa8:	4618      	mov	r0, r3
 800baaa:	f002 fbd4 	bl	800e256 <SDIO_GetResponse>
 800baae:	4602      	mov	r2, r0
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baba:	2b03      	cmp	r3, #3
 800babc:	d00d      	beq.n	800bada <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f107 020e 	add.w	r2, r7, #14
 800bac6:	4611      	mov	r1, r2
 800bac8:	4618      	mov	r0, r3
 800baca:	f002 fdf4 	bl	800e6b6 <SDMMC_CmdSetRelAdd>
 800bace:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d001      	beq.n	800bada <SD_InitCard+0xae>
    {
      return errorstate;
 800bad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bad8:	e071      	b.n	800bbbe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d036      	beq.n	800bb50 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bae2:	89fb      	ldrh	r3, [r7, #14]
 800bae4:	461a      	mov	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baf2:	041b      	lsls	r3, r3, #16
 800baf4:	4619      	mov	r1, r3
 800baf6:	4610      	mov	r0, r2
 800baf8:	f002 fdbe 	bl	800e678 <SDMMC_CmdSendCSD>
 800bafc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bafe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d001      	beq.n	800bb08 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb06:	e05a      	b.n	800bbbe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f002 fba1 	bl	800e256 <SDIO_GetResponse>
 800bb14:	4602      	mov	r2, r0
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2104      	movs	r1, #4
 800bb20:	4618      	mov	r0, r3
 800bb22:	f002 fb98 	bl	800e256 <SDIO_GetResponse>
 800bb26:	4602      	mov	r2, r0
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2108      	movs	r1, #8
 800bb32:	4618      	mov	r0, r3
 800bb34:	f002 fb8f 	bl	800e256 <SDIO_GetResponse>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	210c      	movs	r1, #12
 800bb44:	4618      	mov	r0, r3
 800bb46:	f002 fb86 	bl	800e256 <SDIO_GetResponse>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2104      	movs	r1, #4
 800bb56:	4618      	mov	r0, r3
 800bb58:	f002 fb7d 	bl	800e256 <SDIO_GetResponse>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	0d1a      	lsrs	r2, r3, #20
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bb64:	f107 0310 	add.w	r3, r7, #16
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fbe4 	bl	800b338 <HAL_SD_GetCardCSD>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d002      	beq.n	800bb7c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bb76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb7a:	e020      	b.n	800bbbe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6819      	ldr	r1, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb84:	041b      	lsls	r3, r3, #16
 800bb86:	f04f 0400 	mov.w	r4, #0
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	4608      	mov	r0, r1
 800bb90:	f002 fc6c 	bl	800e46c <SDMMC_CmdSelDesel>
 800bb94:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <SD_InitCard+0x174>
  {
    return errorstate;
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9e:	e00e      	b.n	800bbbe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681d      	ldr	r5, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	466c      	mov	r4, sp
 800bba8:	f103 0210 	add.w	r2, r3, #16
 800bbac:	ca07      	ldmia	r2, {r0, r1, r2}
 800bbae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bbb2:	3304      	adds	r3, #4
 800bbb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	f002 fab0 	bl	800e11c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3740      	adds	r7, #64	; 0x40
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bbc8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	617b      	str	r3, [r7, #20]
 800bbd8:	2300      	movs	r3, #0
 800bbda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f002 fc66 	bl	800e4b2 <SDMMC_CmdGoIdleState>
 800bbe6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	e072      	b.n	800bcd8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f002 fc79 	bl	800e4ee <SDMMC_CmdOperCond>
 800bbfc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00d      	beq.n	800bc20 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f002 fc4f 	bl	800e4b2 <SDMMC_CmdGoIdleState>
 800bc14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d004      	beq.n	800bc26 <SD_PowerON+0x5e>
    {
      return errorstate;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	e05b      	b.n	800bcd8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2201      	movs	r2, #1
 800bc24:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d137      	bne.n	800bc9e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f002 fc79 	bl	800e52c <SDMMC_CmdAppCommand>
 800bc3a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d02d      	beq.n	800bc9e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc46:	e047      	b.n	800bcd8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f002 fc6c 	bl	800e52c <SDMMC_CmdAppCommand>
 800bc54:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d001      	beq.n	800bc60 <SD_PowerON+0x98>
    {
      return errorstate;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	e03b      	b.n	800bcd8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	491e      	ldr	r1, [pc, #120]	; (800bce0 <SD_PowerON+0x118>)
 800bc66:	4618      	mov	r0, r3
 800bc68:	f002 fc82 	bl	800e570 <SDMMC_CmdAppOperCommand>
 800bc6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d002      	beq.n	800bc7a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc78:	e02e      	b.n	800bcd8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2100      	movs	r1, #0
 800bc80:	4618      	mov	r0, r3
 800bc82:	f002 fae8 	bl	800e256 <SDIO_GetResponse>
 800bc86:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	0fdb      	lsrs	r3, r3, #31
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d101      	bne.n	800bc94 <SD_PowerON+0xcc>
 800bc90:	2301      	movs	r3, #1
 800bc92:	e000      	b.n	800bc96 <SD_PowerON+0xce>
 800bc94:	2300      	movs	r3, #0
 800bc96:	613b      	str	r3, [r7, #16]

    count++;
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d802      	bhi.n	800bcae <SD_PowerON+0xe6>
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0cc      	beq.n	800bc48 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d902      	bls.n	800bcbe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800bcb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcbc:	e00c      	b.n	800bcd8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d003      	beq.n	800bcd0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	645a      	str	r2, [r3, #68]	; 0x44
 800bcce:	e002      	b.n	800bcd6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	c1100000 	.word	0xc1100000

0800bce4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d102      	bne.n	800bcfa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800bcf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bcf8:	e018      	b.n	800bd2c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	4619      	mov	r1, r3
 800bd06:	4610      	mov	r0, r2
 800bd08:	f002 fcf6 	bl	800e6f8 <SDMMC_CmdSendStatus>
 800bd0c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d001      	beq.n	800bd18 <SD_SendStatus+0x34>
  {
    return errorstate;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	e009      	b.n	800bd2c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f002 fa99 	bl	800e256 <SDIO_GetResponse>
 800bd24:	4602      	mov	r2, r0
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	2300      	movs	r3, #0
 800bd42:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2100      	movs	r1, #0
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f002 fa83 	bl	800e256 <SDIO_GetResponse>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd5a:	d102      	bne.n	800bd62 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bd5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bd60:	e02f      	b.n	800bdc2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bd62:	f107 030c 	add.w	r3, r7, #12
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f879 	bl	800be60 <SD_FindSCR>
 800bd6e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	e023      	b.n	800bdc2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01c      	beq.n	800bdbe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd8c:	041b      	lsls	r3, r3, #16
 800bd8e:	4619      	mov	r1, r3
 800bd90:	4610      	mov	r0, r2
 800bd92:	f002 fbcb 	bl	800e52c <SDMMC_CmdAppCommand>
 800bd96:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	e00f      	b.n	800bdc2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2102      	movs	r1, #2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f002 fc04 	bl	800e5b6 <SDMMC_CmdBusWidth>
 800bdae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	e003      	b.n	800bdc2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e001      	b.n	800bdc2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bdbe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3718      	adds	r7, #24
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b086      	sub	sp, #24
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	60fb      	str	r3, [r7, #12]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2100      	movs	r1, #0
 800bde0:	4618      	mov	r0, r3
 800bde2:	f002 fa38 	bl	800e256 <SDIO_GetResponse>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdf0:	d102      	bne.n	800bdf8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bdf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdf6:	e02f      	b.n	800be58 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bdf8:	f107 030c 	add.w	r3, r7, #12
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f82e 	bl	800be60 <SD_FindSCR>
 800be04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	e023      	b.n	800be58 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be16:	2b00      	cmp	r3, #0
 800be18:	d01c      	beq.n	800be54 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be22:	041b      	lsls	r3, r3, #16
 800be24:	4619      	mov	r1, r3
 800be26:	4610      	mov	r0, r2
 800be28:	f002 fb80 	bl	800e52c <SDMMC_CmdAppCommand>
 800be2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d001      	beq.n	800be38 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	e00f      	b.n	800be58 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	2100      	movs	r1, #0
 800be3e:	4618      	mov	r0, r3
 800be40:	f002 fbb9 	bl	800e5b6 <SDMMC_CmdBusWidth>
 800be44:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	e003      	b.n	800be58 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800be50:	2300      	movs	r3, #0
 800be52:	e001      	b.n	800be58 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800be54:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b08f      	sub	sp, #60	; 0x3c
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800be6a:	f7fb fd7b 	bl	8007964 <HAL_GetTick>
 800be6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800be70:	2300      	movs	r3, #0
 800be72:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800be74:	2300      	movs	r3, #0
 800be76:	60bb      	str	r3, [r7, #8]
 800be78:	2300      	movs	r3, #0
 800be7a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2108      	movs	r1, #8
 800be86:	4618      	mov	r0, r3
 800be88:	f002 fa24 	bl	800e2d4 <SDMMC_CmdBlockLength>
 800be8c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800be8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <SD_FindSCR+0x38>
  {
    return errorstate;
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	e0a9      	b.n	800bfec <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bea0:	041b      	lsls	r3, r3, #16
 800bea2:	4619      	mov	r1, r3
 800bea4:	4610      	mov	r0, r2
 800bea6:	f002 fb41 	bl	800e52c <SDMMC_CmdAppCommand>
 800beaa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800beb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb4:	e09a      	b.n	800bfec <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800beb6:	f04f 33ff 	mov.w	r3, #4294967295
 800beba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bebc:	2308      	movs	r3, #8
 800bebe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bec0:	2330      	movs	r3, #48	; 0x30
 800bec2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bec4:	2302      	movs	r3, #2
 800bec6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bec8:	2300      	movs	r3, #0
 800beca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800becc:	2301      	movs	r3, #1
 800bece:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f107 0210 	add.w	r2, r7, #16
 800bed8:	4611      	mov	r1, r2
 800beda:	4618      	mov	r0, r3
 800bedc:	f002 f9ce 	bl	800e27c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f002 fb88 	bl	800e5fa <SDMMC_CmdSendSCR>
 800beea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d022      	beq.n	800bf38 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef4:	e07a      	b.n	800bfec <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800befc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00e      	beq.n	800bf22 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6819      	ldr	r1, [r3, #0]
 800bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	f107 0208 	add.w	r2, r7, #8
 800bf10:	18d4      	adds	r4, r2, r3
 800bf12:	4608      	mov	r0, r1
 800bf14:	f002 f92d 	bl	800e172 <SDIO_ReadFIFO>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	6023      	str	r3, [r4, #0]
      index++;
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1e:	3301      	adds	r3, #1
 800bf20:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bf22:	f7fb fd1f 	bl	8007964 <HAL_GetTick>
 800bf26:	4602      	mov	r2, r0
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf30:	d102      	bne.n	800bf38 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bf32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf36:	e059      	b.n	800bfec <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf3e:	f240 432a 	movw	r3, #1066	; 0x42a
 800bf42:	4013      	ands	r3, r2
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d0d6      	beq.n	800bef6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf4e:	f003 0308 	and.w	r3, r3, #8
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d005      	beq.n	800bf62 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bf5e:	2308      	movs	r3, #8
 800bf60:	e044      	b.n	800bfec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d005      	beq.n	800bf7c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	2202      	movs	r2, #2
 800bf76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bf78:	2302      	movs	r3, #2
 800bf7a:	e037      	b.n	800bfec <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d005      	beq.n	800bf96 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bf92:	2320      	movs	r3, #32
 800bf94:	e02a      	b.n	800bfec <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf9e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	061a      	lsls	r2, r3, #24
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	021b      	lsls	r3, r3, #8
 800bfa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	0a1b      	lsrs	r3, r3, #8
 800bfb2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bfb6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	0e1b      	lsrs	r3, r3, #24
 800bfbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	601a      	str	r2, [r3, #0]
    scr++;
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	061a      	lsls	r2, r3, #24
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	021b      	lsls	r3, r3, #8
 800bfd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bfd4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	0a1b      	lsrs	r3, r3, #8
 800bfda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bfde:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	0e1b      	lsrs	r3, r3, #24
 800bfe4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfe8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bfea:	2300      	movs	r3, #0
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	373c      	adds	r7, #60	; 0x3c
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd90      	pop	{r4, r7, pc}

0800bff4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b086      	sub	sp, #24
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c000:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c006:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d03f      	beq.n	800c08e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c00e:	2300      	movs	r3, #0
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	e033      	b.n	800c07c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4618      	mov	r0, r3
 800c01a:	f002 f8aa 	bl	800e172 <SDIO_ReadFIFO>
 800c01e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	b2da      	uxtb	r2, r3
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3301      	adds	r3, #1
 800c02c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	3b01      	subs	r3, #1
 800c032:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	0a1b      	lsrs	r3, r3, #8
 800c038:	b2da      	uxtb	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3301      	adds	r3, #1
 800c042:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	3b01      	subs	r3, #1
 800c048:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	0c1b      	lsrs	r3, r3, #16
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3301      	adds	r3, #1
 800c058:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	0e1b      	lsrs	r3, r3, #24
 800c064:	b2da      	uxtb	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	3301      	adds	r3, #1
 800c06e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	3b01      	subs	r3, #1
 800c074:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	3301      	adds	r3, #1
 800c07a:	617b      	str	r3, [r7, #20]
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	2b07      	cmp	r3, #7
 800c080:	d9c8      	bls.n	800c014 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	693a      	ldr	r2, [r7, #16]
 800c08c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c08e:	bf00      	nop
 800c090:	3718      	adds	r7, #24
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}

0800c096 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b086      	sub	sp, #24
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d043      	beq.n	800c138 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	617b      	str	r3, [r7, #20]
 800c0b4:	e037      	b.n	800c126 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	021a      	lsls	r2, r3, #8
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	041a      	lsls	r2, r3, #16
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	061a      	lsls	r2, r3, #24
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	4313      	orrs	r3, r2
 800c102:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3301      	adds	r3, #1
 800c108:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f107 0208 	add.w	r2, r7, #8
 800c118:	4611      	mov	r1, r2
 800c11a:	4618      	mov	r0, r3
 800c11c:	f002 f836 	bl	800e18c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3301      	adds	r3, #1
 800c124:	617b      	str	r3, [r7, #20]
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	2b07      	cmp	r3, #7
 800c12a:	d9c4      	bls.n	800c0b6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68fa      	ldr	r2, [r7, #12]
 800c130:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c138:	bf00      	nop
 800c13a:	3718      	adds	r7, #24
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e056      	b.n	800c200 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d106      	bne.n	800c172 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7f9 fcc5 	bl	8005afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2202      	movs	r2, #2
 800c176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c188:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	685a      	ldr	r2, [r3, #4]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	431a      	orrs	r2, r3
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	431a      	orrs	r2, r3
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	431a      	orrs	r2, r3
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6a1b      	ldr	r3, [r3, #32]
 800c1ba:	ea42 0103 	orr.w	r1, r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	430a      	orrs	r2, r1
 800c1c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	0c1b      	lsrs	r3, r3, #16
 800c1d0:	f003 0104 	and.w	r1, r3, #4
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	69da      	ldr	r2, [r3, #28]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2201      	movs	r2, #1
 800c1fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	60f8      	str	r0, [r7, #12]
 800c210:	60b9      	str	r1, [r7, #8]
 800c212:	603b      	str	r3, [r7, #0]
 800c214:	4613      	mov	r3, r2
 800c216:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c222:	2b01      	cmp	r3, #1
 800c224:	d101      	bne.n	800c22a <HAL_SPI_Transmit+0x22>
 800c226:	2302      	movs	r3, #2
 800c228:	e11e      	b.n	800c468 <HAL_SPI_Transmit+0x260>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c232:	f7fb fb97 	bl	8007964 <HAL_GetTick>
 800c236:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c238:	88fb      	ldrh	r3, [r7, #6]
 800c23a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b01      	cmp	r3, #1
 800c246:	d002      	beq.n	800c24e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c248:	2302      	movs	r3, #2
 800c24a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c24c:	e103      	b.n	800c456 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <HAL_SPI_Transmit+0x52>
 800c254:	88fb      	ldrh	r3, [r7, #6]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d102      	bne.n	800c260 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c25a:	2301      	movs	r3, #1
 800c25c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c25e:	e0fa      	b.n	800c456 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2203      	movs	r2, #3
 800c264:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2200      	movs	r2, #0
 800c26c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	68ba      	ldr	r2, [r7, #8]
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	88fa      	ldrh	r2, [r7, #6]
 800c278:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	88fa      	ldrh	r2, [r7, #6]
 800c27e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2200      	movs	r2, #0
 800c284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2a6:	d107      	bne.n	800c2b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2c2:	2b40      	cmp	r3, #64	; 0x40
 800c2c4:	d007      	beq.n	800c2d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2de:	d14b      	bne.n	800c378 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d002      	beq.n	800c2ee <HAL_SPI_Transmit+0xe6>
 800c2e8:	8afb      	ldrh	r3, [r7, #22]
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d13e      	bne.n	800c36c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f2:	881a      	ldrh	r2, [r3, #0]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2fe:	1c9a      	adds	r2, r3, #2
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c308:	b29b      	uxth	r3, r3
 800c30a:	3b01      	subs	r3, #1
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c312:	e02b      	b.n	800c36c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f003 0302 	and.w	r3, r3, #2
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d112      	bne.n	800c348 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	881a      	ldrh	r2, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c332:	1c9a      	adds	r2, r3, #2
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	3b01      	subs	r3, #1
 800c340:	b29a      	uxth	r2, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	86da      	strh	r2, [r3, #54]	; 0x36
 800c346:	e011      	b.n	800c36c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c348:	f7fb fb0c 	bl	8007964 <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	69bb      	ldr	r3, [r7, #24]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	429a      	cmp	r2, r3
 800c356:	d803      	bhi.n	800c360 <HAL_SPI_Transmit+0x158>
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c35e:	d102      	bne.n	800c366 <HAL_SPI_Transmit+0x15e>
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d102      	bne.n	800c36c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c36a:	e074      	b.n	800c456 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c370:	b29b      	uxth	r3, r3
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1ce      	bne.n	800c314 <HAL_SPI_Transmit+0x10c>
 800c376:	e04c      	b.n	800c412 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <HAL_SPI_Transmit+0x17e>
 800c380:	8afb      	ldrh	r3, [r7, #22]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d140      	bne.n	800c408 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	330c      	adds	r3, #12
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c3ac:	e02c      	b.n	800c408 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	f003 0302 	and.w	r3, r3, #2
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d113      	bne.n	800c3e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	330c      	adds	r3, #12
 800c3c6:	7812      	ldrb	r2, [r2, #0]
 800c3c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	b29a      	uxth	r2, r3
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	86da      	strh	r2, [r3, #54]	; 0x36
 800c3e2:	e011      	b.n	800c408 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3e4:	f7fb fabe 	bl	8007964 <HAL_GetTick>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	683a      	ldr	r2, [r7, #0]
 800c3f0:	429a      	cmp	r2, r3
 800c3f2:	d803      	bhi.n	800c3fc <HAL_SPI_Transmit+0x1f4>
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fa:	d102      	bne.n	800c402 <HAL_SPI_Transmit+0x1fa>
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c406:	e026      	b.n	800c456 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c40c:	b29b      	uxth	r3, r3
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d1cd      	bne.n	800c3ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f000 fba4 	bl	800cb64 <SPI_EndRxTxTransaction>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d002      	beq.n	800c428 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2220      	movs	r2, #32
 800c426:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d10a      	bne.n	800c446 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c430:	2300      	movs	r3, #0
 800c432:	613b      	str	r3, [r7, #16]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	613b      	str	r3, [r7, #16]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	613b      	str	r3, [r7, #16]
 800c444:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d002      	beq.n	800c454 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	77fb      	strb	r3, [r7, #31]
 800c452:	e000      	b.n	800c456 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c454:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c466:	7ffb      	ldrb	r3, [r7, #31]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3720      	adds	r7, #32
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b088      	sub	sp, #32
 800c474:	af02      	add	r7, sp, #8
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	60b9      	str	r1, [r7, #8]
 800c47a:	603b      	str	r3, [r7, #0]
 800c47c:	4613      	mov	r3, r2
 800c47e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c48c:	d112      	bne.n	800c4b4 <HAL_SPI_Receive+0x44>
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10e      	bne.n	800c4b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2204      	movs	r2, #4
 800c49a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c49e:	88fa      	ldrh	r2, [r7, #6]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	9300      	str	r3, [sp, #0]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 f8e9 	bl	800c682 <HAL_SPI_TransmitReceive>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	e0e2      	b.n	800c67a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d101      	bne.n	800c4c2 <HAL_SPI_Receive+0x52>
 800c4be:	2302      	movs	r3, #2
 800c4c0:	e0db      	b.n	800c67a <HAL_SPI_Receive+0x20a>
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4ca:	f7fb fa4b 	bl	8007964 <HAL_GetTick>
 800c4ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d002      	beq.n	800c4e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c4e0:	e0c2      	b.n	800c668 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d002      	beq.n	800c4ee <HAL_SPI_Receive+0x7e>
 800c4e8:	88fb      	ldrh	r3, [r7, #6]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c4f2:	e0b9      	b.n	800c668 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2204      	movs	r2, #4
 800c4f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2200      	movs	r2, #0
 800c500:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	88fa      	ldrh	r2, [r7, #6]
 800c50c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	88fa      	ldrh	r2, [r7, #6]
 800c512:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2200      	movs	r2, #0
 800c52a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2200      	movs	r2, #0
 800c530:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	689b      	ldr	r3, [r3, #8]
 800c536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c53a:	d107      	bne.n	800c54c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	681a      	ldr	r2, [r3, #0]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c54a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c556:	2b40      	cmp	r3, #64	; 0x40
 800c558:	d007      	beq.n	800c56a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c568:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	68db      	ldr	r3, [r3, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d162      	bne.n	800c638 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c572:	e02e      	b.n	800c5d2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d115      	bne.n	800c5ae <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f103 020c 	add.w	r2, r3, #12
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c58e:	7812      	ldrb	r2, [r2, #0]
 800c590:	b2d2      	uxtb	r2, r2
 800c592:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c5ac:	e011      	b.n	800c5d2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5ae:	f7fb f9d9 	bl	8007964 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	683a      	ldr	r2, [r7, #0]
 800c5ba:	429a      	cmp	r2, r3
 800c5bc:	d803      	bhi.n	800c5c6 <HAL_SPI_Receive+0x156>
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5c4:	d102      	bne.n	800c5cc <HAL_SPI_Receive+0x15c>
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d102      	bne.n	800c5d2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c5cc:	2303      	movs	r3, #3
 800c5ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c5d0:	e04a      	b.n	800c668 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1cb      	bne.n	800c574 <HAL_SPI_Receive+0x104>
 800c5dc:	e031      	b.n	800c642 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	689b      	ldr	r3, [r3, #8]
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d113      	bne.n	800c614 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68da      	ldr	r2, [r3, #12]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f6:	b292      	uxth	r2, r2
 800c5f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fe:	1c9a      	adds	r2, r3, #2
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c608:	b29b      	uxth	r3, r3
 800c60a:	3b01      	subs	r3, #1
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c612:	e011      	b.n	800c638 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c614:	f7fb f9a6 	bl	8007964 <HAL_GetTick>
 800c618:	4602      	mov	r2, r0
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	429a      	cmp	r2, r3
 800c622:	d803      	bhi.n	800c62c <HAL_SPI_Receive+0x1bc>
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62a:	d102      	bne.n	800c632 <HAL_SPI_Receive+0x1c2>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d102      	bne.n	800c638 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c632:	2303      	movs	r3, #3
 800c634:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c636:	e017      	b.n	800c668 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1cd      	bne.n	800c5de <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	6839      	ldr	r1, [r7, #0]
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f000 fa27 	bl	800ca9a <SPI_EndRxTransaction>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d002      	beq.n	800c658 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2220      	movs	r2, #32
 800c656:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	75fb      	strb	r3, [r7, #23]
 800c664:	e000      	b.n	800c668 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c666:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2200      	movs	r2, #0
 800c674:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c678:	7dfb      	ldrb	r3, [r7, #23]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b08c      	sub	sp, #48	; 0x30
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	60b9      	str	r1, [r7, #8]
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c690:	2301      	movs	r3, #1
 800c692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c694:	2300      	movs	r3, #0
 800c696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d101      	bne.n	800c6a8 <HAL_SPI_TransmitReceive+0x26>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	e18a      	b.n	800c9be <HAL_SPI_TransmitReceive+0x33c>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c6b0:	f7fb f958 	bl	8007964 <HAL_GetTick>
 800c6b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c6c6:	887b      	ldrh	r3, [r7, #2]
 800c6c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c6ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d00f      	beq.n	800c6f2 <HAL_SPI_TransmitReceive+0x70>
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6d8:	d107      	bne.n	800c6ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d103      	bne.n	800c6ea <HAL_SPI_TransmitReceive+0x68>
 800c6e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c6e6:	2b04      	cmp	r3, #4
 800c6e8:	d003      	beq.n	800c6f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c6ea:	2302      	movs	r3, #2
 800c6ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c6f0:	e15b      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d005      	beq.n	800c704 <HAL_SPI_TransmitReceive+0x82>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d002      	beq.n	800c704 <HAL_SPI_TransmitReceive+0x82>
 800c6fe:	887b      	ldrh	r3, [r7, #2]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d103      	bne.n	800c70c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c70a:	e14e      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c712:	b2db      	uxtb	r3, r3
 800c714:	2b04      	cmp	r3, #4
 800c716:	d003      	beq.n	800c720 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2205      	movs	r2, #5
 800c71c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2200      	movs	r2, #0
 800c724:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	887a      	ldrh	r2, [r7, #2]
 800c730:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	887a      	ldrh	r2, [r7, #2]
 800c736:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	887a      	ldrh	r2, [r7, #2]
 800c742:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	887a      	ldrh	r2, [r7, #2]
 800c748:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2200      	movs	r2, #0
 800c74e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c760:	2b40      	cmp	r3, #64	; 0x40
 800c762:	d007      	beq.n	800c774 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c77c:	d178      	bne.n	800c870 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d002      	beq.n	800c78c <HAL_SPI_TransmitReceive+0x10a>
 800c786:	8b7b      	ldrh	r3, [r7, #26]
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d166      	bne.n	800c85a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c790:	881a      	ldrh	r2, [r3, #0]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79c:	1c9a      	adds	r2, r3, #2
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c7b0:	e053      	b.n	800c85a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b02      	cmp	r3, #2
 800c7be:	d11b      	bne.n	800c7f8 <HAL_SPI_TransmitReceive+0x176>
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d016      	beq.n	800c7f8 <HAL_SPI_TransmitReceive+0x176>
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d113      	bne.n	800c7f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d4:	881a      	ldrh	r2, [r3, #0]
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7e0:	1c9a      	adds	r2, r3, #2
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b01      	cmp	r3, #1
 800c804:	d119      	bne.n	800c83a <HAL_SPI_TransmitReceive+0x1b8>
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c80a:	b29b      	uxth	r3, r3
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d014      	beq.n	800c83a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68da      	ldr	r2, [r3, #12]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81a:	b292      	uxth	r2, r2
 800c81c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c822:	1c9a      	adds	r2, r3, #2
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	3b01      	subs	r3, #1
 800c830:	b29a      	uxth	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c836:	2301      	movs	r3, #1
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c83a:	f7fb f893 	bl	8007964 <HAL_GetTick>
 800c83e:	4602      	mov	r2, r0
 800c840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c846:	429a      	cmp	r2, r3
 800c848:	d807      	bhi.n	800c85a <HAL_SPI_TransmitReceive+0x1d8>
 800c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c850:	d003      	beq.n	800c85a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c858:	e0a7      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c85e:	b29b      	uxth	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d1a6      	bne.n	800c7b2 <HAL_SPI_TransmitReceive+0x130>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c868:	b29b      	uxth	r3, r3
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d1a1      	bne.n	800c7b2 <HAL_SPI_TransmitReceive+0x130>
 800c86e:	e07c      	b.n	800c96a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <HAL_SPI_TransmitReceive+0x1fc>
 800c878:	8b7b      	ldrh	r3, [r7, #26]
 800c87a:	2b01      	cmp	r3, #1
 800c87c:	d16b      	bne.n	800c956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	330c      	adds	r3, #12
 800c888:	7812      	ldrb	r2, [r2, #0]
 800c88a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c890:	1c5a      	adds	r2, r3, #1
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	3b01      	subs	r3, #1
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c8a4:	e057      	b.n	800c956 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	689b      	ldr	r3, [r3, #8]
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d11c      	bne.n	800c8ee <HAL_SPI_TransmitReceive+0x26c>
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d017      	beq.n	800c8ee <HAL_SPI_TransmitReceive+0x26c>
 800c8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d114      	bne.n	800c8ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	330c      	adds	r3, #12
 800c8ce:	7812      	ldrb	r2, [r2, #0]
 800c8d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	b29a      	uxth	r2, r3
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	f003 0301 	and.w	r3, r3, #1
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d119      	bne.n	800c930 <HAL_SPI_TransmitReceive+0x2ae>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c900:	b29b      	uxth	r3, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	d014      	beq.n	800c930 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	68da      	ldr	r2, [r3, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	b2d2      	uxtb	r2, r2
 800c912:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c922:	b29b      	uxth	r3, r3
 800c924:	3b01      	subs	r3, #1
 800c926:	b29a      	uxth	r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c92c:	2301      	movs	r3, #1
 800c92e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c930:	f7fb f818 	bl	8007964 <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d803      	bhi.n	800c948 <HAL_SPI_TransmitReceive+0x2c6>
 800c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c946:	d102      	bne.n	800c94e <HAL_SPI_TransmitReceive+0x2cc>
 800c948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d103      	bne.n	800c956 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c954:	e029      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d1a2      	bne.n	800c8a6 <HAL_SPI_TransmitReceive+0x224>
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c964:	b29b      	uxth	r3, r3
 800c966:	2b00      	cmp	r3, #0
 800c968:	d19d      	bne.n	800c8a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c96a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c96c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f000 f8f8 	bl	800cb64 <SPI_EndRxTxTransaction>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d006      	beq.n	800c988 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2220      	movs	r2, #32
 800c984:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c986:	e010      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10b      	bne.n	800c9a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c990:	2300      	movs	r3, #0
 800c992:	617b      	str	r3, [r7, #20]
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	617b      	str	r3, [r7, #20]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	617b      	str	r3, [r7, #20]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	e000      	b.n	800c9aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c9a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c9ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3730      	adds	r7, #48	; 0x30
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b084      	sub	sp, #16
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	60f8      	str	r0, [r7, #12]
 800c9ce:	60b9      	str	r1, [r7, #8]
 800c9d0:	603b      	str	r3, [r7, #0]
 800c9d2:	4613      	mov	r3, r2
 800c9d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c9d6:	e04c      	b.n	800ca72 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9de:	d048      	beq.n	800ca72 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c9e0:	f7fa ffc0 	bl	8007964 <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	683a      	ldr	r2, [r7, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d902      	bls.n	800c9f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d13d      	bne.n	800ca72 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ca04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca0e:	d111      	bne.n	800ca34 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca18:	d004      	beq.n	800ca24 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca22:	d107      	bne.n	800ca34 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca3c:	d10f      	bne.n	800ca5e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2201      	movs	r2, #1
 800ca62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ca6e:	2303      	movs	r3, #3
 800ca70:	e00f      	b.n	800ca92 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	689a      	ldr	r2, [r3, #8]
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	4013      	ands	r3, r2
 800ca7c:	68ba      	ldr	r2, [r7, #8]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	bf0c      	ite	eq
 800ca82:	2301      	moveq	r3, #1
 800ca84:	2300      	movne	r3, #0
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	461a      	mov	r2, r3
 800ca8a:	79fb      	ldrb	r3, [r7, #7]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d1a3      	bne.n	800c9d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b086      	sub	sp, #24
 800ca9e:	af02      	add	r7, sp, #8
 800caa0:	60f8      	str	r0, [r7, #12]
 800caa2:	60b9      	str	r1, [r7, #8]
 800caa4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800caae:	d111      	bne.n	800cad4 <SPI_EndRxTransaction+0x3a>
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	689b      	ldr	r3, [r3, #8]
 800cab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cab8:	d004      	beq.n	800cac4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	689b      	ldr	r3, [r3, #8]
 800cabe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cac2:	d107      	bne.n	800cad4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cad2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cadc:	d12a      	bne.n	800cb34 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cae6:	d012      	beq.n	800cb0e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	9300      	str	r3, [sp, #0]
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	2200      	movs	r2, #0
 800caf0:	2180      	movs	r1, #128	; 0x80
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f7ff ff67 	bl	800c9c6 <SPI_WaitFlagStateUntilTimeout>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d02d      	beq.n	800cb5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb02:	f043 0220 	orr.w	r2, r3, #32
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e026      	b.n	800cb5c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	9300      	str	r3, [sp, #0]
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2200      	movs	r2, #0
 800cb16:	2101      	movs	r1, #1
 800cb18:	68f8      	ldr	r0, [r7, #12]
 800cb1a:	f7ff ff54 	bl	800c9c6 <SPI_WaitFlagStateUntilTimeout>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d01a      	beq.n	800cb5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb28:	f043 0220 	orr.w	r2, r3, #32
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cb30:	2303      	movs	r3, #3
 800cb32:	e013      	b.n	800cb5c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	2101      	movs	r1, #1
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f7ff ff41 	bl	800c9c6 <SPI_WaitFlagStateUntilTimeout>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d007      	beq.n	800cb5a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb4e:	f043 0220 	orr.w	r2, r3, #32
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cb56:	2303      	movs	r3, #3
 800cb58:	e000      	b.n	800cb5c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cb5a:	2300      	movs	r3, #0
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af02      	add	r7, sp, #8
 800cb6a:	60f8      	str	r0, [r7, #12]
 800cb6c:	60b9      	str	r1, [r7, #8]
 800cb6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cb70:	4b1b      	ldr	r3, [pc, #108]	; (800cbe0 <SPI_EndRxTxTransaction+0x7c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a1b      	ldr	r2, [pc, #108]	; (800cbe4 <SPI_EndRxTxTransaction+0x80>)
 800cb76:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7a:	0d5b      	lsrs	r3, r3, #21
 800cb7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cb80:	fb02 f303 	mul.w	r3, r2, r3
 800cb84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb8e:	d112      	bne.n	800cbb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	2200      	movs	r2, #0
 800cb98:	2180      	movs	r1, #128	; 0x80
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7ff ff13 	bl	800c9c6 <SPI_WaitFlagStateUntilTimeout>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d016      	beq.n	800cbd4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbaa:	f043 0220 	orr.w	r2, r3, #32
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e00f      	b.n	800cbd6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d00a      	beq.n	800cbd2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	689b      	ldr	r3, [r3, #8]
 800cbc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cbcc:	2b80      	cmp	r3, #128	; 0x80
 800cbce:	d0f2      	beq.n	800cbb6 <SPI_EndRxTxTransaction+0x52>
 800cbd0:	e000      	b.n	800cbd4 <SPI_EndRxTxTransaction+0x70>
        break;
 800cbd2:	bf00      	nop
  }

  return HAL_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20000000 	.word	0x20000000
 800cbe4:	165e9f81 	.word	0x165e9f81

0800cbe8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d101      	bne.n	800cbfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e01d      	b.n	800cc36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d106      	bne.n	800cc14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f7f9 f830 	bl	8005c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2202      	movs	r2, #2
 800cc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	3304      	adds	r3, #4
 800cc24:	4619      	mov	r1, r3
 800cc26:	4610      	mov	r0, r2
 800cc28:	f000 fb56 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b085      	sub	sp, #20
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	68da      	ldr	r2, [r3, #12]
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f042 0201 	orr.w	r2, r2, #1
 800cc54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	689b      	ldr	r3, [r3, #8]
 800cc5c:	f003 0307 	and.w	r3, r3, #7
 800cc60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b06      	cmp	r3, #6
 800cc66:	d007      	beq.n	800cc78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f042 0201 	orr.w	r2, r2, #1
 800cc76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3714      	adds	r7, #20
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b082      	sub	sp, #8
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d101      	bne.n	800cc98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	e01d      	b.n	800ccd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d106      	bne.n	800ccb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7f8 ff6d 	bl	8005b8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2202      	movs	r2, #2
 800ccb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	3304      	adds	r3, #4
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	4610      	mov	r0, r2
 800ccc6:	f000 fb07 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2201      	movs	r2, #1
 800ccce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2201      	movs	r2, #1
 800ccec:	6839      	ldr	r1, [r7, #0]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fd42 	bl	800d778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a15      	ldr	r2, [pc, #84]	; (800cd50 <HAL_TIM_PWM_Start+0x74>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d004      	beq.n	800cd08 <HAL_TIM_PWM_Start+0x2c>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a14      	ldr	r2, [pc, #80]	; (800cd54 <HAL_TIM_PWM_Start+0x78>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d101      	bne.n	800cd0c <HAL_TIM_PWM_Start+0x30>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <HAL_TIM_PWM_Start+0x32>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d007      	beq.n	800cd22 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cd20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f003 0307 	and.w	r3, r3, #7
 800cd2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2b06      	cmp	r3, #6
 800cd32:	d007      	beq.n	800cd44 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f042 0201 	orr.w	r2, r2, #1
 800cd42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd44:	2300      	movs	r3, #0
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3710      	adds	r7, #16
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	40010000 	.word	0x40010000
 800cd54:	40010400 	.word	0x40010400

0800cd58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d101      	bne.n	800cd6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e083      	b.n	800ce74 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d106      	bne.n	800cd86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7f9 f807 	bl	8005d94 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2202      	movs	r2, #2
 800cd8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	6812      	ldr	r2, [r2, #0]
 800cd98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cd9c:	f023 0307 	bic.w	r3, r3, #7
 800cda0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	3304      	adds	r3, #4
 800cdaa:	4619      	mov	r1, r3
 800cdac:	4610      	mov	r0, r2
 800cdae:	f000 fa93 	bl	800d2d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	6a1b      	ldr	r3, [r3, #32]
 800cdc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	697a      	ldr	r2, [r7, #20]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdda:	f023 0303 	bic.w	r3, r3, #3
 800cdde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	021b      	lsls	r3, r3, #8
 800cdea:	4313      	orrs	r3, r2
 800cdec:	693a      	ldr	r2, [r7, #16]
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cdf8:	f023 030c 	bic.w	r3, r3, #12
 800cdfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ce04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	68da      	ldr	r2, [r3, #12]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	69db      	ldr	r3, [r3, #28]
 800ce12:	021b      	lsls	r3, r3, #8
 800ce14:	4313      	orrs	r3, r2
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	691b      	ldr	r3, [r3, #16]
 800ce20:	011a      	lsls	r2, r3, #4
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	031b      	lsls	r3, r3, #12
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ce36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ce3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	685a      	ldr	r2, [r3, #4]
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	695b      	ldr	r3, [r3, #20]
 800ce48:	011b      	lsls	r3, r3, #4
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <HAL_TIM_Encoder_Start+0x16>
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d008      	beq.n	800cea2 <HAL_TIM_Encoder_Start+0x26>
 800ce90:	e00f      	b.n	800ceb2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2201      	movs	r2, #1
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fc6c 	bl	800d778 <TIM_CCxChannelCmd>
      break;
 800cea0:	e016      	b.n	800ced0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	2201      	movs	r2, #1
 800cea8:	2104      	movs	r1, #4
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 fc64 	bl	800d778 <TIM_CCxChannelCmd>
      break;
 800ceb0:	e00e      	b.n	800ced0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	2201      	movs	r2, #1
 800ceb8:	2100      	movs	r1, #0
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 fc5c 	bl	800d778 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2201      	movs	r2, #1
 800cec6:	2104      	movs	r1, #4
 800cec8:	4618      	mov	r0, r3
 800ceca:	f000 fc55 	bl	800d778 <TIM_CCxChannelCmd>
      break;
 800cece:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f042 0201 	orr.w	r2, r2, #1
 800cede:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}

0800ceea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b082      	sub	sp, #8
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	d122      	bne.n	800cf46 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f003 0302 	and.w	r3, r3, #2
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d11b      	bne.n	800cf46 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f06f 0202 	mvn.w	r2, #2
 800cf16:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	699b      	ldr	r3, [r3, #24]
 800cf24:	f003 0303 	and.w	r3, r3, #3
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d003      	beq.n	800cf34 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f000 f9b5 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cf32:	e005      	b.n	800cf40 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f9a7 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f9b8 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2200      	movs	r2, #0
 800cf44:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	f003 0304 	and.w	r3, r3, #4
 800cf50:	2b04      	cmp	r3, #4
 800cf52:	d122      	bne.n	800cf9a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	f003 0304 	and.w	r3, r3, #4
 800cf5e:	2b04      	cmp	r3, #4
 800cf60:	d11b      	bne.n	800cf9a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f06f 0204 	mvn.w	r2, #4
 800cf6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2202      	movs	r2, #2
 800cf70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	699b      	ldr	r3, [r3, #24]
 800cf78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d003      	beq.n	800cf88 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f98b 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cf86:	e005      	b.n	800cf94 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 f97d 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f000 f98e 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	691b      	ldr	r3, [r3, #16]
 800cfa0:	f003 0308 	and.w	r3, r3, #8
 800cfa4:	2b08      	cmp	r3, #8
 800cfa6:	d122      	bne.n	800cfee <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	f003 0308 	and.w	r3, r3, #8
 800cfb2:	2b08      	cmp	r3, #8
 800cfb4:	d11b      	bne.n	800cfee <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	f06f 0208 	mvn.w	r2, #8
 800cfbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2204      	movs	r2, #4
 800cfc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 f961 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800cfda:	e005      	b.n	800cfe8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f953 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f964 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	f003 0310 	and.w	r3, r3, #16
 800cff8:	2b10      	cmp	r3, #16
 800cffa:	d122      	bne.n	800d042 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	f003 0310 	and.w	r3, r3, #16
 800d006:	2b10      	cmp	r3, #16
 800d008:	d11b      	bne.n	800d042 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f06f 0210 	mvn.w	r2, #16
 800d012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2208      	movs	r2, #8
 800d018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	69db      	ldr	r3, [r3, #28]
 800d020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 f937 	bl	800d29c <HAL_TIM_IC_CaptureCallback>
 800d02e:	e005      	b.n	800d03c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f929 	bl	800d288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f93a 	bl	800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	691b      	ldr	r3, [r3, #16]
 800d048:	f003 0301 	and.w	r3, r3, #1
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d10e      	bne.n	800d06e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68db      	ldr	r3, [r3, #12]
 800d056:	f003 0301 	and.w	r3, r3, #1
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d107      	bne.n	800d06e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f06f 0201 	mvn.w	r2, #1
 800d066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f7f7 fb7d 	bl	8004768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d078:	2b80      	cmp	r3, #128	; 0x80
 800d07a:	d10e      	bne.n	800d09a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d086:	2b80      	cmp	r3, #128	; 0x80
 800d088:	d107      	bne.n	800d09a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fc6d 	bl	800d974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	691b      	ldr	r3, [r3, #16]
 800d0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a4:	2b40      	cmp	r3, #64	; 0x40
 800d0a6:	d10e      	bne.n	800d0c6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b2:	2b40      	cmp	r3, #64	; 0x40
 800d0b4:	d107      	bne.n	800d0c6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f8ff 	bl	800d2c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	f003 0320 	and.w	r3, r3, #32
 800d0d0:	2b20      	cmp	r3, #32
 800d0d2:	d10e      	bne.n	800d0f2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	f003 0320 	and.w	r3, r3, #32
 800d0de:	2b20      	cmp	r3, #32
 800d0e0:	d107      	bne.n	800d0f2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f06f 0220 	mvn.w	r2, #32
 800d0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fc37 	bl	800d960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d0f2:	bf00      	nop
 800d0f4:	3708      	adds	r7, #8
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
	...

0800d0fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d101      	bne.n	800d116 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d112:	2302      	movs	r3, #2
 800d114:	e0b4      	b.n	800d280 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	2201      	movs	r2, #1
 800d11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	2202      	movs	r2, #2
 800d122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b0c      	cmp	r3, #12
 800d12a:	f200 809f 	bhi.w	800d26c <HAL_TIM_PWM_ConfigChannel+0x170>
 800d12e:	a201      	add	r2, pc, #4	; (adr r2, 800d134 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d134:	0800d169 	.word	0x0800d169
 800d138:	0800d26d 	.word	0x0800d26d
 800d13c:	0800d26d 	.word	0x0800d26d
 800d140:	0800d26d 	.word	0x0800d26d
 800d144:	0800d1a9 	.word	0x0800d1a9
 800d148:	0800d26d 	.word	0x0800d26d
 800d14c:	0800d26d 	.word	0x0800d26d
 800d150:	0800d26d 	.word	0x0800d26d
 800d154:	0800d1eb 	.word	0x0800d1eb
 800d158:	0800d26d 	.word	0x0800d26d
 800d15c:	0800d26d 	.word	0x0800d26d
 800d160:	0800d26d 	.word	0x0800d26d
 800d164:	0800d22b 	.word	0x0800d22b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	68b9      	ldr	r1, [r7, #8]
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 f952 	bl	800d418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	699a      	ldr	r2, [r3, #24]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0208 	orr.w	r2, r2, #8
 800d182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	699a      	ldr	r2, [r3, #24]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f022 0204 	bic.w	r2, r2, #4
 800d192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	6999      	ldr	r1, [r3, #24]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	691a      	ldr	r2, [r3, #16]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	619a      	str	r2, [r3, #24]
      break;
 800d1a6:	e062      	b.n	800d26e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 f9a2 	bl	800d4f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	699a      	ldr	r2, [r3, #24]
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	699a      	ldr	r2, [r3, #24]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6999      	ldr	r1, [r3, #24]
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	691b      	ldr	r3, [r3, #16]
 800d1de:	021a      	lsls	r2, r3, #8
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	430a      	orrs	r2, r1
 800d1e6:	619a      	str	r2, [r3, #24]
      break;
 800d1e8:	e041      	b.n	800d26e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f000 f9f7 	bl	800d5e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	69da      	ldr	r2, [r3, #28]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f042 0208 	orr.w	r2, r2, #8
 800d204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	69da      	ldr	r2, [r3, #28]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f022 0204 	bic.w	r2, r2, #4
 800d214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	69d9      	ldr	r1, [r3, #28]
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	691a      	ldr	r2, [r3, #16]
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	430a      	orrs	r2, r1
 800d226:	61da      	str	r2, [r3, #28]
      break;
 800d228:	e021      	b.n	800d26e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	4618      	mov	r0, r3
 800d232:	f000 fa4b 	bl	800d6cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	69da      	ldr	r2, [r3, #28]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	69da      	ldr	r2, [r3, #28]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	69d9      	ldr	r1, [r3, #28]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	021a      	lsls	r2, r3, #8
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	430a      	orrs	r2, r1
 800d268:	61da      	str	r2, [r3, #28]
      break;
 800d26a:	e000      	b.n	800d26e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d26c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d290:	bf00      	nop
 800d292:	370c      	adds	r7, #12
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr

0800d2c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	4a40      	ldr	r2, [pc, #256]	; (800d3ec <TIM_Base_SetConfig+0x114>)
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d013      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2f6:	d00f      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a3d      	ldr	r2, [pc, #244]	; (800d3f0 <TIM_Base_SetConfig+0x118>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d00b      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a3c      	ldr	r2, [pc, #240]	; (800d3f4 <TIM_Base_SetConfig+0x11c>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d007      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a3b      	ldr	r2, [pc, #236]	; (800d3f8 <TIM_Base_SetConfig+0x120>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d003      	beq.n	800d318 <TIM_Base_SetConfig+0x40>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a3a      	ldr	r2, [pc, #232]	; (800d3fc <TIM_Base_SetConfig+0x124>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d108      	bne.n	800d32a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d31e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	68fa      	ldr	r2, [r7, #12]
 800d326:	4313      	orrs	r3, r2
 800d328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4a2f      	ldr	r2, [pc, #188]	; (800d3ec <TIM_Base_SetConfig+0x114>)
 800d32e:	4293      	cmp	r3, r2
 800d330:	d02b      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d338:	d027      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	4a2c      	ldr	r2, [pc, #176]	; (800d3f0 <TIM_Base_SetConfig+0x118>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d023      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a2b      	ldr	r2, [pc, #172]	; (800d3f4 <TIM_Base_SetConfig+0x11c>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d01f      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a2a      	ldr	r2, [pc, #168]	; (800d3f8 <TIM_Base_SetConfig+0x120>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d01b      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	4a29      	ldr	r2, [pc, #164]	; (800d3fc <TIM_Base_SetConfig+0x124>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d017      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4a28      	ldr	r2, [pc, #160]	; (800d400 <TIM_Base_SetConfig+0x128>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d013      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4a27      	ldr	r2, [pc, #156]	; (800d404 <TIM_Base_SetConfig+0x12c>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d00f      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	4a26      	ldr	r2, [pc, #152]	; (800d408 <TIM_Base_SetConfig+0x130>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d00b      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	4a25      	ldr	r2, [pc, #148]	; (800d40c <TIM_Base_SetConfig+0x134>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d007      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	4a24      	ldr	r2, [pc, #144]	; (800d410 <TIM_Base_SetConfig+0x138>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d003      	beq.n	800d38a <TIM_Base_SetConfig+0xb2>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4a23      	ldr	r2, [pc, #140]	; (800d414 <TIM_Base_SetConfig+0x13c>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d108      	bne.n	800d39c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	68fa      	ldr	r2, [r7, #12]
 800d398:	4313      	orrs	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68fa      	ldr	r2, [r7, #12]
 800d3ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	689a      	ldr	r2, [r3, #8]
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	681a      	ldr	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4a0a      	ldr	r2, [pc, #40]	; (800d3ec <TIM_Base_SetConfig+0x114>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	d003      	beq.n	800d3d0 <TIM_Base_SetConfig+0xf8>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	4a0c      	ldr	r2, [pc, #48]	; (800d3fc <TIM_Base_SetConfig+0x124>)
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d103      	bne.n	800d3d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	691a      	ldr	r2, [r3, #16]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	615a      	str	r2, [r3, #20]
}
 800d3de:	bf00      	nop
 800d3e0:	3714      	adds	r7, #20
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	40010000 	.word	0x40010000
 800d3f0:	40000400 	.word	0x40000400
 800d3f4:	40000800 	.word	0x40000800
 800d3f8:	40000c00 	.word	0x40000c00
 800d3fc:	40010400 	.word	0x40010400
 800d400:	40014000 	.word	0x40014000
 800d404:	40014400 	.word	0x40014400
 800d408:	40014800 	.word	0x40014800
 800d40c:	40001800 	.word	0x40001800
 800d410:	40001c00 	.word	0x40001c00
 800d414:	40002000 	.word	0x40002000

0800d418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d418:	b480      	push	{r7}
 800d41a:	b087      	sub	sp, #28
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	6a1b      	ldr	r3, [r3, #32]
 800d426:	f023 0201 	bic.w	r2, r3, #1
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a1b      	ldr	r3, [r3, #32]
 800d432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f023 0303 	bic.w	r3, r3, #3
 800d44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	4313      	orrs	r3, r2
 800d458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f023 0302 	bic.w	r3, r3, #2
 800d460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	689b      	ldr	r3, [r3, #8]
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4313      	orrs	r3, r2
 800d46a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	4a20      	ldr	r2, [pc, #128]	; (800d4f0 <TIM_OC1_SetConfig+0xd8>)
 800d470:	4293      	cmp	r3, r2
 800d472:	d003      	beq.n	800d47c <TIM_OC1_SetConfig+0x64>
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a1f      	ldr	r2, [pc, #124]	; (800d4f4 <TIM_OC1_SetConfig+0xdc>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d10c      	bne.n	800d496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	f023 0308 	bic.w	r3, r3, #8
 800d482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	68db      	ldr	r3, [r3, #12]
 800d488:	697a      	ldr	r2, [r7, #20]
 800d48a:	4313      	orrs	r3, r2
 800d48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	f023 0304 	bic.w	r3, r3, #4
 800d494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a15      	ldr	r2, [pc, #84]	; (800d4f0 <TIM_OC1_SetConfig+0xd8>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d003      	beq.n	800d4a6 <TIM_OC1_SetConfig+0x8e>
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4a14      	ldr	r2, [pc, #80]	; (800d4f4 <TIM_OC1_SetConfig+0xdc>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d111      	bne.n	800d4ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	693a      	ldr	r2, [r7, #16]
 800d4ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	685a      	ldr	r2, [r3, #4]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	621a      	str	r2, [r3, #32]
}
 800d4e4:	bf00      	nop
 800d4e6:	371c      	adds	r7, #28
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	40010000 	.word	0x40010000
 800d4f4:	40010400 	.word	0x40010400

0800d4f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	f023 0210 	bic.w	r2, r3, #16
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a1b      	ldr	r3, [r3, #32]
 800d512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	699b      	ldr	r3, [r3, #24]
 800d51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d52e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	021b      	lsls	r3, r3, #8
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	4313      	orrs	r3, r2
 800d53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	f023 0320 	bic.w	r3, r3, #32
 800d542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	689b      	ldr	r3, [r3, #8]
 800d548:	011b      	lsls	r3, r3, #4
 800d54a:	697a      	ldr	r2, [r7, #20]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a22      	ldr	r2, [pc, #136]	; (800d5dc <TIM_OC2_SetConfig+0xe4>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d003      	beq.n	800d560 <TIM_OC2_SetConfig+0x68>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a21      	ldr	r2, [pc, #132]	; (800d5e0 <TIM_OC2_SetConfig+0xe8>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d10d      	bne.n	800d57c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	011b      	lsls	r3, r3, #4
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d57a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4a17      	ldr	r2, [pc, #92]	; (800d5dc <TIM_OC2_SetConfig+0xe4>)
 800d580:	4293      	cmp	r3, r2
 800d582:	d003      	beq.n	800d58c <TIM_OC2_SetConfig+0x94>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	4a16      	ldr	r2, [pc, #88]	; (800d5e0 <TIM_OC2_SetConfig+0xe8>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d113      	bne.n	800d5b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d59a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	693a      	ldr	r2, [r7, #16]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	693a      	ldr	r2, [r7, #16]
 800d5b0:	4313      	orrs	r3, r2
 800d5b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	693a      	ldr	r2, [r7, #16]
 800d5b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	697a      	ldr	r2, [r7, #20]
 800d5cc:	621a      	str	r2, [r3, #32]
}
 800d5ce:	bf00      	nop
 800d5d0:	371c      	adds	r7, #28
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d8:	4770      	bx	lr
 800d5da:	bf00      	nop
 800d5dc:	40010000 	.word	0x40010000
 800d5e0:	40010400 	.word	0x40010400

0800d5e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f023 0303 	bic.w	r3, r3, #3
 800d61a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	68fa      	ldr	r2, [r7, #12]
 800d622:	4313      	orrs	r3, r2
 800d624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d62c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	689b      	ldr	r3, [r3, #8]
 800d632:	021b      	lsls	r3, r3, #8
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	4313      	orrs	r3, r2
 800d638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a21      	ldr	r2, [pc, #132]	; (800d6c4 <TIM_OC3_SetConfig+0xe0>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d003      	beq.n	800d64a <TIM_OC3_SetConfig+0x66>
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	4a20      	ldr	r2, [pc, #128]	; (800d6c8 <TIM_OC3_SetConfig+0xe4>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d10d      	bne.n	800d666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	021b      	lsls	r3, r3, #8
 800d658:	697a      	ldr	r2, [r7, #20]
 800d65a:	4313      	orrs	r3, r2
 800d65c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4a16      	ldr	r2, [pc, #88]	; (800d6c4 <TIM_OC3_SetConfig+0xe0>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d003      	beq.n	800d676 <TIM_OC3_SetConfig+0x92>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a15      	ldr	r2, [pc, #84]	; (800d6c8 <TIM_OC3_SetConfig+0xe4>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d113      	bne.n	800d69e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d67c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	695b      	ldr	r3, [r3, #20]
 800d68a:	011b      	lsls	r3, r3, #4
 800d68c:	693a      	ldr	r2, [r7, #16]
 800d68e:	4313      	orrs	r3, r2
 800d690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	699b      	ldr	r3, [r3, #24]
 800d696:	011b      	lsls	r3, r3, #4
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	685a      	ldr	r2, [r3, #4]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	621a      	str	r2, [r3, #32]
}
 800d6b8:	bf00      	nop
 800d6ba:	371c      	adds	r7, #28
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	40010000 	.word	0x40010000
 800d6c8:	40010400 	.word	0x40010400

0800d6cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6a1b      	ldr	r3, [r3, #32]
 800d6da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d6fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	021b      	lsls	r3, r3, #8
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	4313      	orrs	r3, r2
 800d70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d718:	683b      	ldr	r3, [r7, #0]
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	031b      	lsls	r3, r3, #12
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	4313      	orrs	r3, r2
 800d722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4a12      	ldr	r2, [pc, #72]	; (800d770 <TIM_OC4_SetConfig+0xa4>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d003      	beq.n	800d734 <TIM_OC4_SetConfig+0x68>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	4a11      	ldr	r2, [pc, #68]	; (800d774 <TIM_OC4_SetConfig+0xa8>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d109      	bne.n	800d748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d73a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	019b      	lsls	r3, r3, #6
 800d742:	697a      	ldr	r2, [r7, #20]
 800d744:	4313      	orrs	r3, r2
 800d746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	697a      	ldr	r2, [r7, #20]
 800d74c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	693a      	ldr	r2, [r7, #16]
 800d760:	621a      	str	r2, [r3, #32]
}
 800d762:	bf00      	nop
 800d764:	371c      	adds	r7, #28
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr
 800d76e:	bf00      	nop
 800d770:	40010000 	.word	0x40010000
 800d774:	40010400 	.word	0x40010400

0800d778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	f003 031f 	and.w	r3, r3, #31
 800d78a:	2201      	movs	r2, #1
 800d78c:	fa02 f303 	lsl.w	r3, r2, r3
 800d790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6a1a      	ldr	r2, [r3, #32]
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	43db      	mvns	r3, r3
 800d79a:	401a      	ands	r2, r3
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6a1a      	ldr	r2, [r3, #32]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	f003 031f 	and.w	r3, r3, #31
 800d7aa:	6879      	ldr	r1, [r7, #4]
 800d7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d7b0:	431a      	orrs	r2, r3
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	621a      	str	r2, [r3, #32]
}
 800d7b6:	bf00      	nop
 800d7b8:	371c      	adds	r7, #28
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
	...

0800d7c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b085      	sub	sp, #20
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d101      	bne.n	800d7dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7d8:	2302      	movs	r3, #2
 800d7da:	e05a      	b.n	800d892 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a21      	ldr	r2, [pc, #132]	; (800d8a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d022      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d828:	d01d      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4a1d      	ldr	r2, [pc, #116]	; (800d8a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d830:	4293      	cmp	r3, r2
 800d832:	d018      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a1b      	ldr	r2, [pc, #108]	; (800d8a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d013      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	4a1a      	ldr	r2, [pc, #104]	; (800d8ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d00e      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a18      	ldr	r2, [pc, #96]	; (800d8b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d009      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4a17      	ldr	r2, [pc, #92]	; (800d8b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d858:	4293      	cmp	r3, r2
 800d85a:	d004      	beq.n	800d866 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a15      	ldr	r2, [pc, #84]	; (800d8b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d10c      	bne.n	800d880 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d86c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	4313      	orrs	r3, r2
 800d876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2200      	movs	r2, #0
 800d88c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3714      	adds	r7, #20
 800d896:	46bd      	mov	sp, r7
 800d898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89c:	4770      	bx	lr
 800d89e:	bf00      	nop
 800d8a0:	40010000 	.word	0x40010000
 800d8a4:	40000400 	.word	0x40000400
 800d8a8:	40000800 	.word	0x40000800
 800d8ac:	40000c00 	.word	0x40000c00
 800d8b0:	40010400 	.word	0x40010400
 800d8b4:	40014000 	.word	0x40014000
 800d8b8:	40001800 	.word	0x40001800

0800d8bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b085      	sub	sp, #20
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d101      	bne.n	800d8d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	e03d      	b.n	800d954 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2201      	movs	r2, #1
 800d8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	68db      	ldr	r3, [r3, #12]
 800d8ea:	4313      	orrs	r3, r2
 800d8ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	4313      	orrs	r3, r2
 800d8fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	4313      	orrs	r3, r2
 800d908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4313      	orrs	r3, r2
 800d916:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	691b      	ldr	r3, [r3, #16]
 800d922:	4313      	orrs	r3, r2
 800d924:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	695b      	ldr	r3, [r3, #20]
 800d930:	4313      	orrs	r3, r2
 800d932:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	4313      	orrs	r3, r2
 800d940:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	68fa      	ldr	r2, [r7, #12]
 800d948:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr

0800d960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d101      	bne.n	800d99a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	e03f      	b.n	800da1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d106      	bne.n	800d9b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f7f8 fb1a 	bl	8005fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2224      	movs	r2, #36	; 0x24
 800d9b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68da      	ldr	r2, [r3, #12]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d9ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f829 	bl	800da24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	691a      	ldr	r2, [r3, #16]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d9e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	695a      	ldr	r2, [r3, #20]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d9f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	68da      	ldr	r2, [r3, #12]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800da00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2220      	movs	r2, #32
 800da0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2220      	movs	r2, #32
 800da14:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800da18:	2300      	movs	r3, #0
}
 800da1a:	4618      	mov	r0, r3
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
	...

0800da24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	b085      	sub	sp, #20
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	430a      	orrs	r2, r1
 800da42:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	689a      	ldr	r2, [r3, #8]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	691b      	ldr	r3, [r3, #16]
 800da4c:	431a      	orrs	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	695b      	ldr	r3, [r3, #20]
 800da52:	431a      	orrs	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800da66:	f023 030c 	bic.w	r3, r3, #12
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	6812      	ldr	r2, [r2, #0]
 800da6e:	68f9      	ldr	r1, [r7, #12]
 800da70:	430b      	orrs	r3, r1
 800da72:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	695b      	ldr	r3, [r3, #20]
 800da7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	699a      	ldr	r2, [r3, #24]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	430a      	orrs	r2, r1
 800da88:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800da92:	f040 818b 	bne.w	800ddac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4ac1      	ldr	r2, [pc, #772]	; (800dda0 <UART_SetConfig+0x37c>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d005      	beq.n	800daac <UART_SetConfig+0x88>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4abf      	ldr	r2, [pc, #764]	; (800dda4 <UART_SetConfig+0x380>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	f040 80bd 	bne.w	800dc26 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800daac:	f7fc fbcc 	bl	800a248 <HAL_RCC_GetPCLK2Freq>
 800dab0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	461d      	mov	r5, r3
 800dab6:	f04f 0600 	mov.w	r6, #0
 800daba:	46a8      	mov	r8, r5
 800dabc:	46b1      	mov	r9, r6
 800dabe:	eb18 0308 	adds.w	r3, r8, r8
 800dac2:	eb49 0409 	adc.w	r4, r9, r9
 800dac6:	4698      	mov	r8, r3
 800dac8:	46a1      	mov	r9, r4
 800daca:	eb18 0805 	adds.w	r8, r8, r5
 800dace:	eb49 0906 	adc.w	r9, r9, r6
 800dad2:	f04f 0100 	mov.w	r1, #0
 800dad6:	f04f 0200 	mov.w	r2, #0
 800dada:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dade:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dae2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dae6:	4688      	mov	r8, r1
 800dae8:	4691      	mov	r9, r2
 800daea:	eb18 0005 	adds.w	r0, r8, r5
 800daee:	eb49 0106 	adc.w	r1, r9, r6
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	461d      	mov	r5, r3
 800daf8:	f04f 0600 	mov.w	r6, #0
 800dafc:	196b      	adds	r3, r5, r5
 800dafe:	eb46 0406 	adc.w	r4, r6, r6
 800db02:	461a      	mov	r2, r3
 800db04:	4623      	mov	r3, r4
 800db06:	f7f3 f8d7 	bl	8000cb8 <__aeabi_uldivmod>
 800db0a:	4603      	mov	r3, r0
 800db0c:	460c      	mov	r4, r1
 800db0e:	461a      	mov	r2, r3
 800db10:	4ba5      	ldr	r3, [pc, #660]	; (800dda8 <UART_SetConfig+0x384>)
 800db12:	fba3 2302 	umull	r2, r3, r3, r2
 800db16:	095b      	lsrs	r3, r3, #5
 800db18:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	461d      	mov	r5, r3
 800db20:	f04f 0600 	mov.w	r6, #0
 800db24:	46a9      	mov	r9, r5
 800db26:	46b2      	mov	sl, r6
 800db28:	eb19 0309 	adds.w	r3, r9, r9
 800db2c:	eb4a 040a 	adc.w	r4, sl, sl
 800db30:	4699      	mov	r9, r3
 800db32:	46a2      	mov	sl, r4
 800db34:	eb19 0905 	adds.w	r9, r9, r5
 800db38:	eb4a 0a06 	adc.w	sl, sl, r6
 800db3c:	f04f 0100 	mov.w	r1, #0
 800db40:	f04f 0200 	mov.w	r2, #0
 800db44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db48:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800db4c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800db50:	4689      	mov	r9, r1
 800db52:	4692      	mov	sl, r2
 800db54:	eb19 0005 	adds.w	r0, r9, r5
 800db58:	eb4a 0106 	adc.w	r1, sl, r6
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	685b      	ldr	r3, [r3, #4]
 800db60:	461d      	mov	r5, r3
 800db62:	f04f 0600 	mov.w	r6, #0
 800db66:	196b      	adds	r3, r5, r5
 800db68:	eb46 0406 	adc.w	r4, r6, r6
 800db6c:	461a      	mov	r2, r3
 800db6e:	4623      	mov	r3, r4
 800db70:	f7f3 f8a2 	bl	8000cb8 <__aeabi_uldivmod>
 800db74:	4603      	mov	r3, r0
 800db76:	460c      	mov	r4, r1
 800db78:	461a      	mov	r2, r3
 800db7a:	4b8b      	ldr	r3, [pc, #556]	; (800dda8 <UART_SetConfig+0x384>)
 800db7c:	fba3 1302 	umull	r1, r3, r3, r2
 800db80:	095b      	lsrs	r3, r3, #5
 800db82:	2164      	movs	r1, #100	; 0x64
 800db84:	fb01 f303 	mul.w	r3, r1, r3
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	00db      	lsls	r3, r3, #3
 800db8c:	3332      	adds	r3, #50	; 0x32
 800db8e:	4a86      	ldr	r2, [pc, #536]	; (800dda8 <UART_SetConfig+0x384>)
 800db90:	fba2 2303 	umull	r2, r3, r2, r3
 800db94:	095b      	lsrs	r3, r3, #5
 800db96:	005b      	lsls	r3, r3, #1
 800db98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800db9c:	4498      	add	r8, r3
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	461d      	mov	r5, r3
 800dba2:	f04f 0600 	mov.w	r6, #0
 800dba6:	46a9      	mov	r9, r5
 800dba8:	46b2      	mov	sl, r6
 800dbaa:	eb19 0309 	adds.w	r3, r9, r9
 800dbae:	eb4a 040a 	adc.w	r4, sl, sl
 800dbb2:	4699      	mov	r9, r3
 800dbb4:	46a2      	mov	sl, r4
 800dbb6:	eb19 0905 	adds.w	r9, r9, r5
 800dbba:	eb4a 0a06 	adc.w	sl, sl, r6
 800dbbe:	f04f 0100 	mov.w	r1, #0
 800dbc2:	f04f 0200 	mov.w	r2, #0
 800dbc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dbca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dbce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dbd2:	4689      	mov	r9, r1
 800dbd4:	4692      	mov	sl, r2
 800dbd6:	eb19 0005 	adds.w	r0, r9, r5
 800dbda:	eb4a 0106 	adc.w	r1, sl, r6
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	461d      	mov	r5, r3
 800dbe4:	f04f 0600 	mov.w	r6, #0
 800dbe8:	196b      	adds	r3, r5, r5
 800dbea:	eb46 0406 	adc.w	r4, r6, r6
 800dbee:	461a      	mov	r2, r3
 800dbf0:	4623      	mov	r3, r4
 800dbf2:	f7f3 f861 	bl	8000cb8 <__aeabi_uldivmod>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	4b6a      	ldr	r3, [pc, #424]	; (800dda8 <UART_SetConfig+0x384>)
 800dbfe:	fba3 1302 	umull	r1, r3, r3, r2
 800dc02:	095b      	lsrs	r3, r3, #5
 800dc04:	2164      	movs	r1, #100	; 0x64
 800dc06:	fb01 f303 	mul.w	r3, r1, r3
 800dc0a:	1ad3      	subs	r3, r2, r3
 800dc0c:	00db      	lsls	r3, r3, #3
 800dc0e:	3332      	adds	r3, #50	; 0x32
 800dc10:	4a65      	ldr	r2, [pc, #404]	; (800dda8 <UART_SetConfig+0x384>)
 800dc12:	fba2 2303 	umull	r2, r3, r2, r3
 800dc16:	095b      	lsrs	r3, r3, #5
 800dc18:	f003 0207 	and.w	r2, r3, #7
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4442      	add	r2, r8
 800dc22:	609a      	str	r2, [r3, #8]
 800dc24:	e26f      	b.n	800e106 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dc26:	f7fc fafb 	bl	800a220 <HAL_RCC_GetPCLK1Freq>
 800dc2a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	461d      	mov	r5, r3
 800dc30:	f04f 0600 	mov.w	r6, #0
 800dc34:	46a8      	mov	r8, r5
 800dc36:	46b1      	mov	r9, r6
 800dc38:	eb18 0308 	adds.w	r3, r8, r8
 800dc3c:	eb49 0409 	adc.w	r4, r9, r9
 800dc40:	4698      	mov	r8, r3
 800dc42:	46a1      	mov	r9, r4
 800dc44:	eb18 0805 	adds.w	r8, r8, r5
 800dc48:	eb49 0906 	adc.w	r9, r9, r6
 800dc4c:	f04f 0100 	mov.w	r1, #0
 800dc50:	f04f 0200 	mov.w	r2, #0
 800dc54:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dc58:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dc5c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dc60:	4688      	mov	r8, r1
 800dc62:	4691      	mov	r9, r2
 800dc64:	eb18 0005 	adds.w	r0, r8, r5
 800dc68:	eb49 0106 	adc.w	r1, r9, r6
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	461d      	mov	r5, r3
 800dc72:	f04f 0600 	mov.w	r6, #0
 800dc76:	196b      	adds	r3, r5, r5
 800dc78:	eb46 0406 	adc.w	r4, r6, r6
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	4623      	mov	r3, r4
 800dc80:	f7f3 f81a 	bl	8000cb8 <__aeabi_uldivmod>
 800dc84:	4603      	mov	r3, r0
 800dc86:	460c      	mov	r4, r1
 800dc88:	461a      	mov	r2, r3
 800dc8a:	4b47      	ldr	r3, [pc, #284]	; (800dda8 <UART_SetConfig+0x384>)
 800dc8c:	fba3 2302 	umull	r2, r3, r3, r2
 800dc90:	095b      	lsrs	r3, r3, #5
 800dc92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	461d      	mov	r5, r3
 800dc9a:	f04f 0600 	mov.w	r6, #0
 800dc9e:	46a9      	mov	r9, r5
 800dca0:	46b2      	mov	sl, r6
 800dca2:	eb19 0309 	adds.w	r3, r9, r9
 800dca6:	eb4a 040a 	adc.w	r4, sl, sl
 800dcaa:	4699      	mov	r9, r3
 800dcac:	46a2      	mov	sl, r4
 800dcae:	eb19 0905 	adds.w	r9, r9, r5
 800dcb2:	eb4a 0a06 	adc.w	sl, sl, r6
 800dcb6:	f04f 0100 	mov.w	r1, #0
 800dcba:	f04f 0200 	mov.w	r2, #0
 800dcbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dcc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dcc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dcca:	4689      	mov	r9, r1
 800dccc:	4692      	mov	sl, r2
 800dcce:	eb19 0005 	adds.w	r0, r9, r5
 800dcd2:	eb4a 0106 	adc.w	r1, sl, r6
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	685b      	ldr	r3, [r3, #4]
 800dcda:	461d      	mov	r5, r3
 800dcdc:	f04f 0600 	mov.w	r6, #0
 800dce0:	196b      	adds	r3, r5, r5
 800dce2:	eb46 0406 	adc.w	r4, r6, r6
 800dce6:	461a      	mov	r2, r3
 800dce8:	4623      	mov	r3, r4
 800dcea:	f7f2 ffe5 	bl	8000cb8 <__aeabi_uldivmod>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4b2c      	ldr	r3, [pc, #176]	; (800dda8 <UART_SetConfig+0x384>)
 800dcf6:	fba3 1302 	umull	r1, r3, r3, r2
 800dcfa:	095b      	lsrs	r3, r3, #5
 800dcfc:	2164      	movs	r1, #100	; 0x64
 800dcfe:	fb01 f303 	mul.w	r3, r1, r3
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	00db      	lsls	r3, r3, #3
 800dd06:	3332      	adds	r3, #50	; 0x32
 800dd08:	4a27      	ldr	r2, [pc, #156]	; (800dda8 <UART_SetConfig+0x384>)
 800dd0a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd0e:	095b      	lsrs	r3, r3, #5
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800dd16:	4498      	add	r8, r3
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	461d      	mov	r5, r3
 800dd1c:	f04f 0600 	mov.w	r6, #0
 800dd20:	46a9      	mov	r9, r5
 800dd22:	46b2      	mov	sl, r6
 800dd24:	eb19 0309 	adds.w	r3, r9, r9
 800dd28:	eb4a 040a 	adc.w	r4, sl, sl
 800dd2c:	4699      	mov	r9, r3
 800dd2e:	46a2      	mov	sl, r4
 800dd30:	eb19 0905 	adds.w	r9, r9, r5
 800dd34:	eb4a 0a06 	adc.w	sl, sl, r6
 800dd38:	f04f 0100 	mov.w	r1, #0
 800dd3c:	f04f 0200 	mov.w	r2, #0
 800dd40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd4c:	4689      	mov	r9, r1
 800dd4e:	4692      	mov	sl, r2
 800dd50:	eb19 0005 	adds.w	r0, r9, r5
 800dd54:	eb4a 0106 	adc.w	r1, sl, r6
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	461d      	mov	r5, r3
 800dd5e:	f04f 0600 	mov.w	r6, #0
 800dd62:	196b      	adds	r3, r5, r5
 800dd64:	eb46 0406 	adc.w	r4, r6, r6
 800dd68:	461a      	mov	r2, r3
 800dd6a:	4623      	mov	r3, r4
 800dd6c:	f7f2 ffa4 	bl	8000cb8 <__aeabi_uldivmod>
 800dd70:	4603      	mov	r3, r0
 800dd72:	460c      	mov	r4, r1
 800dd74:	461a      	mov	r2, r3
 800dd76:	4b0c      	ldr	r3, [pc, #48]	; (800dda8 <UART_SetConfig+0x384>)
 800dd78:	fba3 1302 	umull	r1, r3, r3, r2
 800dd7c:	095b      	lsrs	r3, r3, #5
 800dd7e:	2164      	movs	r1, #100	; 0x64
 800dd80:	fb01 f303 	mul.w	r3, r1, r3
 800dd84:	1ad3      	subs	r3, r2, r3
 800dd86:	00db      	lsls	r3, r3, #3
 800dd88:	3332      	adds	r3, #50	; 0x32
 800dd8a:	4a07      	ldr	r2, [pc, #28]	; (800dda8 <UART_SetConfig+0x384>)
 800dd8c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd90:	095b      	lsrs	r3, r3, #5
 800dd92:	f003 0207 	and.w	r2, r3, #7
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4442      	add	r2, r8
 800dd9c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800dd9e:	e1b2      	b.n	800e106 <UART_SetConfig+0x6e2>
 800dda0:	40011000 	.word	0x40011000
 800dda4:	40011400 	.word	0x40011400
 800dda8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4ad7      	ldr	r2, [pc, #860]	; (800e110 <UART_SetConfig+0x6ec>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d005      	beq.n	800ddc2 <UART_SetConfig+0x39e>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4ad6      	ldr	r2, [pc, #856]	; (800e114 <UART_SetConfig+0x6f0>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	f040 80d1 	bne.w	800df64 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ddc2:	f7fc fa41 	bl	800a248 <HAL_RCC_GetPCLK2Freq>
 800ddc6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	469a      	mov	sl, r3
 800ddcc:	f04f 0b00 	mov.w	fp, #0
 800ddd0:	46d0      	mov	r8, sl
 800ddd2:	46d9      	mov	r9, fp
 800ddd4:	eb18 0308 	adds.w	r3, r8, r8
 800ddd8:	eb49 0409 	adc.w	r4, r9, r9
 800dddc:	4698      	mov	r8, r3
 800ddde:	46a1      	mov	r9, r4
 800dde0:	eb18 080a 	adds.w	r8, r8, sl
 800dde4:	eb49 090b 	adc.w	r9, r9, fp
 800dde8:	f04f 0100 	mov.w	r1, #0
 800ddec:	f04f 0200 	mov.w	r2, #0
 800ddf0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ddf4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ddf8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ddfc:	4688      	mov	r8, r1
 800ddfe:	4691      	mov	r9, r2
 800de00:	eb1a 0508 	adds.w	r5, sl, r8
 800de04:	eb4b 0609 	adc.w	r6, fp, r9
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	685b      	ldr	r3, [r3, #4]
 800de0c:	4619      	mov	r1, r3
 800de0e:	f04f 0200 	mov.w	r2, #0
 800de12:	f04f 0300 	mov.w	r3, #0
 800de16:	f04f 0400 	mov.w	r4, #0
 800de1a:	0094      	lsls	r4, r2, #2
 800de1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800de20:	008b      	lsls	r3, r1, #2
 800de22:	461a      	mov	r2, r3
 800de24:	4623      	mov	r3, r4
 800de26:	4628      	mov	r0, r5
 800de28:	4631      	mov	r1, r6
 800de2a:	f7f2 ff45 	bl	8000cb8 <__aeabi_uldivmod>
 800de2e:	4603      	mov	r3, r0
 800de30:	460c      	mov	r4, r1
 800de32:	461a      	mov	r2, r3
 800de34:	4bb8      	ldr	r3, [pc, #736]	; (800e118 <UART_SetConfig+0x6f4>)
 800de36:	fba3 2302 	umull	r2, r3, r3, r2
 800de3a:	095b      	lsrs	r3, r3, #5
 800de3c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	469b      	mov	fp, r3
 800de44:	f04f 0c00 	mov.w	ip, #0
 800de48:	46d9      	mov	r9, fp
 800de4a:	46e2      	mov	sl, ip
 800de4c:	eb19 0309 	adds.w	r3, r9, r9
 800de50:	eb4a 040a 	adc.w	r4, sl, sl
 800de54:	4699      	mov	r9, r3
 800de56:	46a2      	mov	sl, r4
 800de58:	eb19 090b 	adds.w	r9, r9, fp
 800de5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800de60:	f04f 0100 	mov.w	r1, #0
 800de64:	f04f 0200 	mov.w	r2, #0
 800de68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800de70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800de74:	4689      	mov	r9, r1
 800de76:	4692      	mov	sl, r2
 800de78:	eb1b 0509 	adds.w	r5, fp, r9
 800de7c:	eb4c 060a 	adc.w	r6, ip, sl
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	4619      	mov	r1, r3
 800de86:	f04f 0200 	mov.w	r2, #0
 800de8a:	f04f 0300 	mov.w	r3, #0
 800de8e:	f04f 0400 	mov.w	r4, #0
 800de92:	0094      	lsls	r4, r2, #2
 800de94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800de98:	008b      	lsls	r3, r1, #2
 800de9a:	461a      	mov	r2, r3
 800de9c:	4623      	mov	r3, r4
 800de9e:	4628      	mov	r0, r5
 800dea0:	4631      	mov	r1, r6
 800dea2:	f7f2 ff09 	bl	8000cb8 <__aeabi_uldivmod>
 800dea6:	4603      	mov	r3, r0
 800dea8:	460c      	mov	r4, r1
 800deaa:	461a      	mov	r2, r3
 800deac:	4b9a      	ldr	r3, [pc, #616]	; (800e118 <UART_SetConfig+0x6f4>)
 800deae:	fba3 1302 	umull	r1, r3, r3, r2
 800deb2:	095b      	lsrs	r3, r3, #5
 800deb4:	2164      	movs	r1, #100	; 0x64
 800deb6:	fb01 f303 	mul.w	r3, r1, r3
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	011b      	lsls	r3, r3, #4
 800debe:	3332      	adds	r3, #50	; 0x32
 800dec0:	4a95      	ldr	r2, [pc, #596]	; (800e118 <UART_SetConfig+0x6f4>)
 800dec2:	fba2 2303 	umull	r2, r3, r2, r3
 800dec6:	095b      	lsrs	r3, r3, #5
 800dec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800decc:	4498      	add	r8, r3
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	469b      	mov	fp, r3
 800ded2:	f04f 0c00 	mov.w	ip, #0
 800ded6:	46d9      	mov	r9, fp
 800ded8:	46e2      	mov	sl, ip
 800deda:	eb19 0309 	adds.w	r3, r9, r9
 800dede:	eb4a 040a 	adc.w	r4, sl, sl
 800dee2:	4699      	mov	r9, r3
 800dee4:	46a2      	mov	sl, r4
 800dee6:	eb19 090b 	adds.w	r9, r9, fp
 800deea:	eb4a 0a0c 	adc.w	sl, sl, ip
 800deee:	f04f 0100 	mov.w	r1, #0
 800def2:	f04f 0200 	mov.w	r2, #0
 800def6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800defa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800defe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800df02:	4689      	mov	r9, r1
 800df04:	4692      	mov	sl, r2
 800df06:	eb1b 0509 	adds.w	r5, fp, r9
 800df0a:	eb4c 060a 	adc.w	r6, ip, sl
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	4619      	mov	r1, r3
 800df14:	f04f 0200 	mov.w	r2, #0
 800df18:	f04f 0300 	mov.w	r3, #0
 800df1c:	f04f 0400 	mov.w	r4, #0
 800df20:	0094      	lsls	r4, r2, #2
 800df22:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800df26:	008b      	lsls	r3, r1, #2
 800df28:	461a      	mov	r2, r3
 800df2a:	4623      	mov	r3, r4
 800df2c:	4628      	mov	r0, r5
 800df2e:	4631      	mov	r1, r6
 800df30:	f7f2 fec2 	bl	8000cb8 <__aeabi_uldivmod>
 800df34:	4603      	mov	r3, r0
 800df36:	460c      	mov	r4, r1
 800df38:	461a      	mov	r2, r3
 800df3a:	4b77      	ldr	r3, [pc, #476]	; (800e118 <UART_SetConfig+0x6f4>)
 800df3c:	fba3 1302 	umull	r1, r3, r3, r2
 800df40:	095b      	lsrs	r3, r3, #5
 800df42:	2164      	movs	r1, #100	; 0x64
 800df44:	fb01 f303 	mul.w	r3, r1, r3
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	011b      	lsls	r3, r3, #4
 800df4c:	3332      	adds	r3, #50	; 0x32
 800df4e:	4a72      	ldr	r2, [pc, #456]	; (800e118 <UART_SetConfig+0x6f4>)
 800df50:	fba2 2303 	umull	r2, r3, r2, r3
 800df54:	095b      	lsrs	r3, r3, #5
 800df56:	f003 020f 	and.w	r2, r3, #15
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4442      	add	r2, r8
 800df60:	609a      	str	r2, [r3, #8]
 800df62:	e0d0      	b.n	800e106 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800df64:	f7fc f95c 	bl	800a220 <HAL_RCC_GetPCLK1Freq>
 800df68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df6a:	68bb      	ldr	r3, [r7, #8]
 800df6c:	469a      	mov	sl, r3
 800df6e:	f04f 0b00 	mov.w	fp, #0
 800df72:	46d0      	mov	r8, sl
 800df74:	46d9      	mov	r9, fp
 800df76:	eb18 0308 	adds.w	r3, r8, r8
 800df7a:	eb49 0409 	adc.w	r4, r9, r9
 800df7e:	4698      	mov	r8, r3
 800df80:	46a1      	mov	r9, r4
 800df82:	eb18 080a 	adds.w	r8, r8, sl
 800df86:	eb49 090b 	adc.w	r9, r9, fp
 800df8a:	f04f 0100 	mov.w	r1, #0
 800df8e:	f04f 0200 	mov.w	r2, #0
 800df92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800df96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800df9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800df9e:	4688      	mov	r8, r1
 800dfa0:	4691      	mov	r9, r2
 800dfa2:	eb1a 0508 	adds.w	r5, sl, r8
 800dfa6:	eb4b 0609 	adc.w	r6, fp, r9
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	4619      	mov	r1, r3
 800dfb0:	f04f 0200 	mov.w	r2, #0
 800dfb4:	f04f 0300 	mov.w	r3, #0
 800dfb8:	f04f 0400 	mov.w	r4, #0
 800dfbc:	0094      	lsls	r4, r2, #2
 800dfbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dfc2:	008b      	lsls	r3, r1, #2
 800dfc4:	461a      	mov	r2, r3
 800dfc6:	4623      	mov	r3, r4
 800dfc8:	4628      	mov	r0, r5
 800dfca:	4631      	mov	r1, r6
 800dfcc:	f7f2 fe74 	bl	8000cb8 <__aeabi_uldivmod>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	460c      	mov	r4, r1
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	4b50      	ldr	r3, [pc, #320]	; (800e118 <UART_SetConfig+0x6f4>)
 800dfd8:	fba3 2302 	umull	r2, r3, r3, r2
 800dfdc:	095b      	lsrs	r3, r3, #5
 800dfde:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	469b      	mov	fp, r3
 800dfe6:	f04f 0c00 	mov.w	ip, #0
 800dfea:	46d9      	mov	r9, fp
 800dfec:	46e2      	mov	sl, ip
 800dfee:	eb19 0309 	adds.w	r3, r9, r9
 800dff2:	eb4a 040a 	adc.w	r4, sl, sl
 800dff6:	4699      	mov	r9, r3
 800dff8:	46a2      	mov	sl, r4
 800dffa:	eb19 090b 	adds.w	r9, r9, fp
 800dffe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e002:	f04f 0100 	mov.w	r1, #0
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e00e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e012:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e016:	4689      	mov	r9, r1
 800e018:	4692      	mov	sl, r2
 800e01a:	eb1b 0509 	adds.w	r5, fp, r9
 800e01e:	eb4c 060a 	adc.w	r6, ip, sl
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	4619      	mov	r1, r3
 800e028:	f04f 0200 	mov.w	r2, #0
 800e02c:	f04f 0300 	mov.w	r3, #0
 800e030:	f04f 0400 	mov.w	r4, #0
 800e034:	0094      	lsls	r4, r2, #2
 800e036:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e03a:	008b      	lsls	r3, r1, #2
 800e03c:	461a      	mov	r2, r3
 800e03e:	4623      	mov	r3, r4
 800e040:	4628      	mov	r0, r5
 800e042:	4631      	mov	r1, r6
 800e044:	f7f2 fe38 	bl	8000cb8 <__aeabi_uldivmod>
 800e048:	4603      	mov	r3, r0
 800e04a:	460c      	mov	r4, r1
 800e04c:	461a      	mov	r2, r3
 800e04e:	4b32      	ldr	r3, [pc, #200]	; (800e118 <UART_SetConfig+0x6f4>)
 800e050:	fba3 1302 	umull	r1, r3, r3, r2
 800e054:	095b      	lsrs	r3, r3, #5
 800e056:	2164      	movs	r1, #100	; 0x64
 800e058:	fb01 f303 	mul.w	r3, r1, r3
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	011b      	lsls	r3, r3, #4
 800e060:	3332      	adds	r3, #50	; 0x32
 800e062:	4a2d      	ldr	r2, [pc, #180]	; (800e118 <UART_SetConfig+0x6f4>)
 800e064:	fba2 2303 	umull	r2, r3, r2, r3
 800e068:	095b      	lsrs	r3, r3, #5
 800e06a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e06e:	4498      	add	r8, r3
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	469b      	mov	fp, r3
 800e074:	f04f 0c00 	mov.w	ip, #0
 800e078:	46d9      	mov	r9, fp
 800e07a:	46e2      	mov	sl, ip
 800e07c:	eb19 0309 	adds.w	r3, r9, r9
 800e080:	eb4a 040a 	adc.w	r4, sl, sl
 800e084:	4699      	mov	r9, r3
 800e086:	46a2      	mov	sl, r4
 800e088:	eb19 090b 	adds.w	r9, r9, fp
 800e08c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e090:	f04f 0100 	mov.w	r1, #0
 800e094:	f04f 0200 	mov.w	r2, #0
 800e098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e09c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e0a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e0a4:	4689      	mov	r9, r1
 800e0a6:	4692      	mov	sl, r2
 800e0a8:	eb1b 0509 	adds.w	r5, fp, r9
 800e0ac:	eb4c 060a 	adc.w	r6, ip, sl
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	f04f 0200 	mov.w	r2, #0
 800e0ba:	f04f 0300 	mov.w	r3, #0
 800e0be:	f04f 0400 	mov.w	r4, #0
 800e0c2:	0094      	lsls	r4, r2, #2
 800e0c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e0c8:	008b      	lsls	r3, r1, #2
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4623      	mov	r3, r4
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	f7f2 fdf1 	bl	8000cb8 <__aeabi_uldivmod>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	460c      	mov	r4, r1
 800e0da:	461a      	mov	r2, r3
 800e0dc:	4b0e      	ldr	r3, [pc, #56]	; (800e118 <UART_SetConfig+0x6f4>)
 800e0de:	fba3 1302 	umull	r1, r3, r3, r2
 800e0e2:	095b      	lsrs	r3, r3, #5
 800e0e4:	2164      	movs	r1, #100	; 0x64
 800e0e6:	fb01 f303 	mul.w	r3, r1, r3
 800e0ea:	1ad3      	subs	r3, r2, r3
 800e0ec:	011b      	lsls	r3, r3, #4
 800e0ee:	3332      	adds	r3, #50	; 0x32
 800e0f0:	4a09      	ldr	r2, [pc, #36]	; (800e118 <UART_SetConfig+0x6f4>)
 800e0f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0f6:	095b      	lsrs	r3, r3, #5
 800e0f8:	f003 020f 	and.w	r2, r3, #15
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4442      	add	r2, r8
 800e102:	609a      	str	r2, [r3, #8]
}
 800e104:	e7ff      	b.n	800e106 <UART_SetConfig+0x6e2>
 800e106:	bf00      	nop
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e110:	40011000 	.word	0x40011000
 800e114:	40011400 	.word	0x40011400
 800e118:	51eb851f 	.word	0x51eb851f

0800e11c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e11c:	b084      	sub	sp, #16
 800e11e:	b480      	push	{r7}
 800e120:	b085      	sub	sp, #20
 800e122:	af00      	add	r7, sp, #0
 800e124:	6078      	str	r0, [r7, #4]
 800e126:	f107 001c 	add.w	r0, r7, #28
 800e12a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e12e:	2300      	movs	r3, #0
 800e130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e132:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e134:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e136:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e13a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e13e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e142:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e146:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e156:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e15a:	68fa      	ldr	r2, [r7, #12]
 800e15c:	431a      	orrs	r2, r3
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	b004      	add	sp, #16
 800e170:	4770      	bx	lr

0800e172 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e172:	b480      	push	{r7}
 800e174:	b083      	sub	sp, #12
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	370c      	adds	r7, #12
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e1ae:	b580      	push	{r7, lr}
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2203      	movs	r2, #3
 800e1ba:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e1bc:	2002      	movs	r0, #2
 800e1be:	f7f9 fbdd 	bl	800797c <HAL_Delay>
  
  return HAL_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	f003 0303 	and.w	r3, r3, #3
}
 800e1dc:	4618      	mov	r0, r3
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b085      	sub	sp, #20
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e206:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e20c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e214:	68fa      	ldr	r2, [r7, #12]
 800e216:	4313      	orrs	r3, r2
 800e218:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	68db      	ldr	r3, [r3, #12]
 800e21e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e222:	f023 030f 	bic.w	r3, r3, #15
 800e226:	68fa      	ldr	r2, [r7, #12]
 800e228:	431a      	orrs	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	691b      	ldr	r3, [r3, #16]
 800e248:	b2db      	uxtb	r3, r3
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr

0800e256 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e256:	b480      	push	{r7}
 800e258:	b085      	sub	sp, #20
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3314      	adds	r3, #20
 800e264:	461a      	mov	r2, r3
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	4413      	add	r3, r2
 800e26a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
}  
 800e270:	4618      	mov	r0, r3
 800e272:	3714      	adds	r7, #20
 800e274:	46bd      	mov	sp, r7
 800e276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27a:	4770      	bx	lr

0800e27c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
 800e284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e286:	2300      	movs	r3, #0
 800e288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	685a      	ldr	r2, [r3, #4]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e2a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e2a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e2ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	431a      	orrs	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e2c6:	2300      	movs	r3, #0

}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3714      	adds	r7, #20
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b088      	sub	sp, #32
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e2e2:	2310      	movs	r3, #16
 800e2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2e6:	2340      	movs	r3, #64	; 0x40
 800e2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2f4:	f107 0308 	add.w	r3, r7, #8
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff ff74 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e300:	f241 3288 	movw	r2, #5000	; 0x1388
 800e304:	2110      	movs	r1, #16
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 fa40 	bl	800e78c <SDMMC_GetCmdResp1>
 800e30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e30e:	69fb      	ldr	r3, [r7, #28]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e326:	2311      	movs	r3, #17
 800e328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e32a:	2340      	movs	r3, #64	; 0x40
 800e32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e32e:	2300      	movs	r3, #0
 800e330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e336:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e338:	f107 0308 	add.w	r3, r7, #8
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f7ff ff52 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e344:	f241 3288 	movw	r2, #5000	; 0x1388
 800e348:	2111      	movs	r1, #17
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa1e 	bl	800e78c <SDMMC_GetCmdResp1>
 800e350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e352:	69fb      	ldr	r3, [r7, #28]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e36a:	2312      	movs	r3, #18
 800e36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e36e:	2340      	movs	r3, #64	; 0x40
 800e370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e37a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff ff30 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e388:	f241 3288 	movw	r2, #5000	; 0x1388
 800e38c:	2112      	movs	r1, #18
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f9fc 	bl	800e78c <SDMMC_GetCmdResp1>
 800e394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e396:	69fb      	ldr	r3, [r7, #28]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3720      	adds	r7, #32
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b088      	sub	sp, #32
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e3ae:	2318      	movs	r3, #24
 800e3b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3b2:	2340      	movs	r3, #64	; 0x40
 800e3b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3c0:	f107 0308 	add.w	r3, r7, #8
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6878      	ldr	r0, [r7, #4]
 800e3c8:	f7ff ff0e 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e3cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3d0:	2118      	movs	r1, #24
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f9da 	bl	800e78c <SDMMC_GetCmdResp1>
 800e3d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3da:	69fb      	ldr	r3, [r7, #28]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3720      	adds	r7, #32
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b088      	sub	sp, #32
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e3f2:	2319      	movs	r3, #25
 800e3f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3f6:	2340      	movs	r3, #64	; 0x40
 800e3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e402:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e404:	f107 0308 	add.w	r3, r7, #8
 800e408:	4619      	mov	r1, r3
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f7ff feec 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e410:	f241 3288 	movw	r2, #5000	; 0x1388
 800e414:	2119      	movs	r1, #25
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f9b8 	bl	800e78c <SDMMC_GetCmdResp1>
 800e41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e41e:	69fb      	ldr	r3, [r7, #28]
}
 800e420:	4618      	mov	r0, r3
 800e422:	3720      	adds	r7, #32
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}

0800e428 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b088      	sub	sp, #32
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e430:	2300      	movs	r3, #0
 800e432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e434:	230c      	movs	r3, #12
 800e436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e438:	2340      	movs	r3, #64	; 0x40
 800e43a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e43c:	2300      	movs	r3, #0
 800e43e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e444:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e446:	f107 0308 	add.w	r3, r7, #8
 800e44a:	4619      	mov	r1, r3
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f7ff fecb 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e452:	4a05      	ldr	r2, [pc, #20]	; (800e468 <SDMMC_CmdStopTransfer+0x40>)
 800e454:	210c      	movs	r1, #12
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f000 f998 	bl	800e78c <SDMMC_GetCmdResp1>
 800e45c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e45e:	69fb      	ldr	r3, [r7, #28]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3720      	adds	r7, #32
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	05f5e100 	.word	0x05f5e100

0800e46c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08a      	sub	sp, #40	; 0x28
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e47c:	2307      	movs	r3, #7
 800e47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e480:	2340      	movs	r3, #64	; 0x40
 800e482:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e484:	2300      	movs	r3, #0
 800e486:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e48c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e48e:	f107 0310 	add.w	r3, r7, #16
 800e492:	4619      	mov	r1, r3
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff fea7 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e49e:	2107      	movs	r1, #7
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f000 f973 	bl	800e78c <SDMMC_GetCmdResp1>
 800e4a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3728      	adds	r7, #40	; 0x28
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b088      	sub	sp, #32
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e4ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e4d0:	f107 0308 	add.w	r3, r7, #8
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7ff fe86 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f92d 	bl	800e73c <SDMMC_GetCmdError>
 800e4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e4e4:	69fb      	ldr	r3, [r7, #28]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3720      	adds	r7, #32
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b088      	sub	sp, #32
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e4f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e4fc:	2308      	movs	r3, #8
 800e4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e500:	2340      	movs	r3, #64	; 0x40
 800e502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e504:	2300      	movs	r3, #0
 800e506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e50c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e50e:	f107 0308 	add.w	r3, r7, #8
 800e512:	4619      	mov	r1, r3
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff fe67 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fb16 	bl	800eb4c <SDMMC_GetCmdResp7>
 800e520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e522:	69fb      	ldr	r3, [r7, #28]
}
 800e524:	4618      	mov	r0, r3
 800e526:	3720      	adds	r7, #32
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}

0800e52c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b088      	sub	sp, #32
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e53a:	2337      	movs	r3, #55	; 0x37
 800e53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e53e:	2340      	movs	r3, #64	; 0x40
 800e540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e542:	2300      	movs	r3, #0
 800e544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e54a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e54c:	f107 0308 	add.w	r3, r7, #8
 800e550:	4619      	mov	r1, r3
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fe48 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e558:	f241 3288 	movw	r2, #5000	; 0x1388
 800e55c:	2137      	movs	r1, #55	; 0x37
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 f914 	bl	800e78c <SDMMC_GetCmdResp1>
 800e564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e566:	69fb      	ldr	r3, [r7, #28]
}
 800e568:	4618      	mov	r0, r3
 800e56a:	3720      	adds	r7, #32
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}

0800e570 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b088      	sub	sp, #32
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e586:	2329      	movs	r3, #41	; 0x29
 800e588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e58a:	2340      	movs	r3, #64	; 0x40
 800e58c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e58e:	2300      	movs	r3, #0
 800e590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e598:	f107 0308 	add.w	r3, r7, #8
 800e59c:	4619      	mov	r1, r3
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fe22 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 fa23 	bl	800e9f0 <SDMMC_GetCmdResp3>
 800e5aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5ac:	69fb      	ldr	r3, [r7, #28]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3720      	adds	r7, #32
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b088      	sub	sp, #32
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e5c4:	2306      	movs	r3, #6
 800e5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e5c8:	2340      	movs	r3, #64	; 0x40
 800e5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e5d6:	f107 0308 	add.w	r3, r7, #8
 800e5da:	4619      	mov	r1, r3
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f7ff fe03 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5e6:	2106      	movs	r1, #6
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f000 f8cf 	bl	800e78c <SDMMC_GetCmdResp1>
 800e5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e5f0:	69fb      	ldr	r3, [r7, #28]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	3720      	adds	r7, #32
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	bd80      	pop	{r7, pc}

0800e5fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e5fa:	b580      	push	{r7, lr}
 800e5fc:	b088      	sub	sp, #32
 800e5fe:	af00      	add	r7, sp, #0
 800e600:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e602:	2300      	movs	r3, #0
 800e604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e606:	2333      	movs	r3, #51	; 0x33
 800e608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e60a:	2340      	movs	r3, #64	; 0x40
 800e60c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e60e:	2300      	movs	r3, #0
 800e610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e616:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e618:	f107 0308 	add.w	r3, r7, #8
 800e61c:	4619      	mov	r1, r3
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff fde2 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e624:	f241 3288 	movw	r2, #5000	; 0x1388
 800e628:	2133      	movs	r1, #51	; 0x33
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 f8ae 	bl	800e78c <SDMMC_GetCmdResp1>
 800e630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e632:	69fb      	ldr	r3, [r7, #28]
}
 800e634:	4618      	mov	r0, r3
 800e636:	3720      	adds	r7, #32
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e63c:	b580      	push	{r7, lr}
 800e63e:	b088      	sub	sp, #32
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e644:	2300      	movs	r3, #0
 800e646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e648:	2302      	movs	r3, #2
 800e64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e64c:	23c0      	movs	r3, #192	; 0xc0
 800e64e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e650:	2300      	movs	r3, #0
 800e652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e658:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e65a:	f107 0308 	add.w	r3, r7, #8
 800e65e:	4619      	mov	r1, r3
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f7ff fdc1 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f97c 	bl	800e964 <SDMMC_GetCmdResp2>
 800e66c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e66e:	69fb      	ldr	r3, [r7, #28]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3720      	adds	r7, #32
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b088      	sub	sp, #32
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e686:	2309      	movs	r3, #9
 800e688:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e68a:	23c0      	movs	r3, #192	; 0xc0
 800e68c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e68e:	2300      	movs	r3, #0
 800e690:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e696:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e698:	f107 0308 	add.w	r3, r7, #8
 800e69c:	4619      	mov	r1, r3
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fda2 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f95d 	bl	800e964 <SDMMC_GetCmdResp2>
 800e6aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ac:	69fb      	ldr	r3, [r7, #28]
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3720      	adds	r7, #32
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}

0800e6b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b088      	sub	sp, #32
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e6c4:	2303      	movs	r3, #3
 800e6c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e6c8:	2340      	movs	r3, #64	; 0x40
 800e6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e6d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e6d6:	f107 0308 	add.w	r3, r7, #8
 800e6da:	4619      	mov	r1, r3
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f7ff fd83 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e6e2:	683a      	ldr	r2, [r7, #0]
 800e6e4:	2103      	movs	r1, #3
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f9bc 	bl	800ea64 <SDMMC_GetCmdResp6>
 800e6ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e6ee:	69fb      	ldr	r3, [r7, #28]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3720      	adds	r7, #32
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b088      	sub	sp, #32
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e706:	230d      	movs	r3, #13
 800e708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e70a:	2340      	movs	r3, #64	; 0x40
 800e70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e70e:	2300      	movs	r3, #0
 800e710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e716:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e718:	f107 0308 	add.w	r3, r7, #8
 800e71c:	4619      	mov	r1, r3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff fd62 	bl	800e1e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e724:	f241 3288 	movw	r2, #5000	; 0x1388
 800e728:	210d      	movs	r1, #13
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f000 f82e 	bl	800e78c <SDMMC_GetCmdResp1>
 800e730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e732:	69fb      	ldr	r3, [r7, #28]
}
 800e734:	4618      	mov	r0, r3
 800e736:	3720      	adds	r7, #32
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd80      	pop	{r7, pc}

0800e73c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e73c:	b490      	push	{r4, r7}
 800e73e:	b082      	sub	sp, #8
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <SDMMC_GetCmdError+0x48>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a0f      	ldr	r2, [pc, #60]	; (800e788 <SDMMC_GetCmdError+0x4c>)
 800e74a:	fba2 2303 	umull	r2, r3, r2, r3
 800e74e:	0a5b      	lsrs	r3, r3, #9
 800e750:	f241 3288 	movw	r2, #5000	; 0x1388
 800e754:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e758:	4623      	mov	r3, r4
 800e75a:	1e5c      	subs	r4, r3, #1
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d102      	bne.n	800e766 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e760:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e764:	e009      	b.n	800e77a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d0f2      	beq.n	800e758 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	22c5      	movs	r2, #197	; 0xc5
 800e776:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bc90      	pop	{r4, r7}
 800e782:	4770      	bx	lr
 800e784:	20000000 	.word	0x20000000
 800e788:	10624dd3 	.word	0x10624dd3

0800e78c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e78c:	b590      	push	{r4, r7, lr}
 800e78e:	b087      	sub	sp, #28
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	460b      	mov	r3, r1
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e79a:	4b6f      	ldr	r3, [pc, #444]	; (800e958 <SDMMC_GetCmdResp1+0x1cc>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a6f      	ldr	r2, [pc, #444]	; (800e95c <SDMMC_GetCmdResp1+0x1d0>)
 800e7a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a4:	0a5b      	lsrs	r3, r3, #9
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e7ac:	4623      	mov	r3, r4
 800e7ae:	1e5c      	subs	r4, r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d102      	bne.n	800e7ba <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e7b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7b8:	e0c9      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7be:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d0f0      	beq.n	800e7ac <SDMMC_GetCmdResp1+0x20>
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1eb      	bne.n	800e7ac <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d8:	f003 0304 	and.w	r3, r3, #4
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d004      	beq.n	800e7ea <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2204      	movs	r2, #4
 800e7e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7e6:	2304      	movs	r3, #4
 800e7e8:	e0b1      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d004      	beq.n	800e800 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e0a6      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	22c5      	movs	r2, #197	; 0xc5
 800e804:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff fd18 	bl	800e23c <SDIO_GetCommandResponse>
 800e80c:	4603      	mov	r3, r0
 800e80e:	461a      	mov	r2, r3
 800e810:	7afb      	ldrb	r3, [r7, #11]
 800e812:	4293      	cmp	r3, r2
 800e814:	d001      	beq.n	800e81a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e816:	2301      	movs	r3, #1
 800e818:	e099      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e81a:	2100      	movs	r1, #0
 800e81c:	68f8      	ldr	r0, [r7, #12]
 800e81e:	f7ff fd1a 	bl	800e256 <SDIO_GetResponse>
 800e822:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e824:	693a      	ldr	r2, [r7, #16]
 800e826:	4b4e      	ldr	r3, [pc, #312]	; (800e960 <SDMMC_GetCmdResp1+0x1d4>)
 800e828:	4013      	ands	r3, r2
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d101      	bne.n	800e832 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e82e:	2300      	movs	r3, #0
 800e830:	e08d      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	da02      	bge.n	800e83e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e83c:	e087      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e844:	2b00      	cmp	r3, #0
 800e846:	d001      	beq.n	800e84c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e848:	2340      	movs	r3, #64	; 0x40
 800e84a:	e080      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e852:	2b00      	cmp	r3, #0
 800e854:	d001      	beq.n	800e85a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e856:	2380      	movs	r3, #128	; 0x80
 800e858:	e079      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e860:	2b00      	cmp	r3, #0
 800e862:	d002      	beq.n	800e86a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e864:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e868:	e071      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e874:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e878:	e069      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e880:	2b00      	cmp	r3, #0
 800e882:	d002      	beq.n	800e88a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e888:	e061      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e894:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e898:	e059      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d002      	beq.n	800e8aa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e8a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e8a8:	e051      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d002      	beq.n	800e8ba <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e8b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8b8:	e049      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e8c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8c8:	e041      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d002      	beq.n	800e8da <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e8d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8d8:	e039      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e8e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e8e8:	e031      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d002      	beq.n	800e8fa <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e8f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e8f8:	e029      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e904:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e908:	e021      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e914:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e918:	e019      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e920:	2b00      	cmp	r3, #0
 800e922:	d002      	beq.n	800e92a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e928:	e011      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e930:	2b00      	cmp	r3, #0
 800e932:	d002      	beq.n	800e93a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e934:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e938:	e009      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	f003 0308 	and.w	r3, r3, #8
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e944:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e948:	e001      	b.n	800e94e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e94a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e94e:	4618      	mov	r0, r3
 800e950:	371c      	adds	r7, #28
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}
 800e956:	bf00      	nop
 800e958:	20000000 	.word	0x20000000
 800e95c:	10624dd3 	.word	0x10624dd3
 800e960:	fdffe008 	.word	0xfdffe008

0800e964 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e964:	b490      	push	{r4, r7}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e96c:	4b1e      	ldr	r3, [pc, #120]	; (800e9e8 <SDMMC_GetCmdResp2+0x84>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a1e      	ldr	r2, [pc, #120]	; (800e9ec <SDMMC_GetCmdResp2+0x88>)
 800e972:	fba2 2303 	umull	r2, r3, r2, r3
 800e976:	0a5b      	lsrs	r3, r3, #9
 800e978:	f241 3288 	movw	r2, #5000	; 0x1388
 800e97c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e980:	4623      	mov	r3, r4
 800e982:	1e5c      	subs	r4, r3, #1
 800e984:	2b00      	cmp	r3, #0
 800e986:	d102      	bne.n	800e98e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e98c:	e026      	b.n	800e9dc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e992:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d0f0      	beq.n	800e980 <SDMMC_GetCmdResp2+0x1c>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1eb      	bne.n	800e980 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ac:	f003 0304 	and.w	r3, r3, #4
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d004      	beq.n	800e9be <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2204      	movs	r2, #4
 800e9b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e9ba:	2304      	movs	r3, #4
 800e9bc:	e00e      	b.n	800e9dc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d004      	beq.n	800e9d4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e003      	b.n	800e9dc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	22c5      	movs	r2, #197	; 0xc5
 800e9d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3710      	adds	r7, #16
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bc90      	pop	{r4, r7}
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	20000000 	.word	0x20000000
 800e9ec:	10624dd3 	.word	0x10624dd3

0800e9f0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e9f0:	b490      	push	{r4, r7}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e9f8:	4b18      	ldr	r3, [pc, #96]	; (800ea5c <SDMMC_GetCmdResp3+0x6c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4a18      	ldr	r2, [pc, #96]	; (800ea60 <SDMMC_GetCmdResp3+0x70>)
 800e9fe:	fba2 2303 	umull	r2, r3, r2, r3
 800ea02:	0a5b      	lsrs	r3, r3, #9
 800ea04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ea0c:	4623      	mov	r3, r4
 800ea0e:	1e5c      	subs	r4, r3, #1
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d102      	bne.n	800ea1a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea18:	e01b      	b.n	800ea52 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea1e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0f0      	beq.n	800ea0c <SDMMC_GetCmdResp3+0x1c>
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d1eb      	bne.n	800ea0c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea38:	f003 0304 	and.w	r3, r3, #4
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d004      	beq.n	800ea4a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2204      	movs	r2, #4
 800ea44:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea46:	2304      	movs	r3, #4
 800ea48:	e003      	b.n	800ea52 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	22c5      	movs	r2, #197	; 0xc5
 800ea4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ea50:	2300      	movs	r3, #0
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bc90      	pop	{r4, r7}
 800ea5a:	4770      	bx	lr
 800ea5c:	20000000 	.word	0x20000000
 800ea60:	10624dd3 	.word	0x10624dd3

0800ea64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b087      	sub	sp, #28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ea72:	4b34      	ldr	r3, [pc, #208]	; (800eb44 <SDMMC_GetCmdResp6+0xe0>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	4a34      	ldr	r2, [pc, #208]	; (800eb48 <SDMMC_GetCmdResp6+0xe4>)
 800ea78:	fba2 2303 	umull	r2, r3, r2, r3
 800ea7c:	0a5b      	lsrs	r3, r3, #9
 800ea7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea82:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ea86:	4623      	mov	r3, r4
 800ea88:	1e5c      	subs	r4, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d102      	bne.n	800ea94 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ea8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea92:	e052      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea98:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d0f0      	beq.n	800ea86 <SDMMC_GetCmdResp6+0x22>
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1eb      	bne.n	800ea86 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab2:	f003 0304 	and.w	r3, r3, #4
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d004      	beq.n	800eac4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	2204      	movs	r2, #4
 800eabe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eac0:	2304      	movs	r3, #4
 800eac2:	e03a      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d004      	beq.n	800eada <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2201      	movs	r2, #1
 800ead4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ead6:	2301      	movs	r3, #1
 800ead8:	e02f      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f7ff fbae 	bl	800e23c <SDIO_GetCommandResponse>
 800eae0:	4603      	mov	r3, r0
 800eae2:	461a      	mov	r2, r3
 800eae4:	7afb      	ldrb	r3, [r7, #11]
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d001      	beq.n	800eaee <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eaea:	2301      	movs	r3, #1
 800eaec:	e025      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	22c5      	movs	r2, #197	; 0xc5
 800eaf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff fbad 	bl	800e256 <SDIO_GetResponse>
 800eafc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d106      	bne.n	800eb16 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	0c1b      	lsrs	r3, r3, #16
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800eb12:	2300      	movs	r3, #0
 800eb14:	e011      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d002      	beq.n	800eb26 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eb20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800eb24:	e009      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eb30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb34:	e001      	b.n	800eb3a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd90      	pop	{r4, r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20000000 	.word	0x20000000
 800eb48:	10624dd3 	.word	0x10624dd3

0800eb4c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800eb4c:	b490      	push	{r4, r7}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eb54:	4b21      	ldr	r3, [pc, #132]	; (800ebdc <SDMMC_GetCmdResp7+0x90>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a21      	ldr	r2, [pc, #132]	; (800ebe0 <SDMMC_GetCmdResp7+0x94>)
 800eb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800eb5e:	0a5b      	lsrs	r3, r3, #9
 800eb60:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800eb68:	4623      	mov	r3, r4
 800eb6a:	1e5c      	subs	r4, r3, #1
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d102      	bne.n	800eb76 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eb70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb74:	e02c      	b.n	800ebd0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb7a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d0f0      	beq.n	800eb68 <SDMMC_GetCmdResp7+0x1c>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d1eb      	bne.n	800eb68 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d004      	beq.n	800eba6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2204      	movs	r2, #4
 800eba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eba2:	2304      	movs	r3, #4
 800eba4:	e014      	b.n	800ebd0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebaa:	f003 0301 	and.w	r3, r3, #1
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d004      	beq.n	800ebbc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e009      	b.n	800ebd0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d002      	beq.n	800ebce <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2240      	movs	r2, #64	; 0x40
 800ebcc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ebce:	2300      	movs	r3, #0
  
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3710      	adds	r7, #16
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bc90      	pop	{r4, r7}
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	20000000 	.word	0x20000000
 800ebe0:	10624dd3 	.word	0x10624dd3

0800ebe4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ebe8:	4904      	ldr	r1, [pc, #16]	; (800ebfc <MX_FATFS_Init+0x18>)
 800ebea:	4805      	ldr	r0, [pc, #20]	; (800ec00 <MX_FATFS_Init+0x1c>)
 800ebec:	f003 fb9c 	bl	8012328 <FATFS_LinkDriver>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	461a      	mov	r2, r3
 800ebf4:	4b03      	ldr	r3, [pc, #12]	; (800ec04 <MX_FATFS_Init+0x20>)
 800ebf6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ebf8:	bf00      	nop
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	20035f68 	.word	0x20035f68
 800ec00:	08017d80 	.word	0x08017d80
 800ec04:	20035f64 	.word	0x20035f64

0800ec08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ec12:	f000 f896 	bl	800ed42 <BSP_SD_IsDetected>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b01      	cmp	r3, #1
 800ec1a:	d001      	beq.n	800ec20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e012      	b.n	800ec46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ec20:	480b      	ldr	r0, [pc, #44]	; (800ec50 <BSP_SD_Init+0x48>)
 800ec22:	f7fb ffa5 	bl	800ab70 <HAL_SD_Init>
 800ec26:	4603      	mov	r3, r0
 800ec28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ec2a:	79fb      	ldrb	r3, [r7, #7]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d109      	bne.n	800ec44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ec30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ec34:	4806      	ldr	r0, [pc, #24]	; (800ec50 <BSP_SD_Init+0x48>)
 800ec36:	f7fc fd4f 	bl	800b6d8 <HAL_SD_ConfigWideBusOperation>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d001      	beq.n	800ec44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ec44:	79fb      	ldrb	r3, [r7, #7]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20035d60 	.word	0x20035d60

0800ec54 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b086      	sub	sp, #24
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ec60:	2300      	movs	r3, #0
 800ec62:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	68f9      	ldr	r1, [r7, #12]
 800ec6a:	4806      	ldr	r0, [pc, #24]	; (800ec84 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ec6c:	f7fc f810 	bl	800ac90 <HAL_SD_ReadBlocks_DMA>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d001      	beq.n	800ec7a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ec7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3718      	adds	r7, #24
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}
 800ec84:	20035d60 	.word	0x20035d60

0800ec88 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b086      	sub	sp, #24
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	68f9      	ldr	r1, [r7, #12]
 800ec9e:	4806      	ldr	r0, [pc, #24]	; (800ecb8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800eca0:	f7fc f8de 	bl	800ae60 <HAL_SD_WriteBlocks_DMA>
 800eca4:	4603      	mov	r3, r0
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d001      	beq.n	800ecae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ecae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3718      	adds	r7, #24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	20035d60 	.word	0x20035d60

0800ecbc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ecc0:	4805      	ldr	r0, [pc, #20]	; (800ecd8 <BSP_SD_GetCardState+0x1c>)
 800ecc2:	f7fc fd85 	bl	800b7d0 <HAL_SD_GetCardState>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b04      	cmp	r3, #4
 800ecca:	bf14      	ite	ne
 800eccc:	2301      	movne	r3, #1
 800ecce:	2300      	moveq	r3, #0
 800ecd0:	b2db      	uxtb	r3, r3
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20035d60 	.word	0x20035d60

0800ecdc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ece4:	6879      	ldr	r1, [r7, #4]
 800ece6:	4803      	ldr	r0, [pc, #12]	; (800ecf4 <BSP_SD_GetCardInfo+0x18>)
 800ece8:	f7fc fcca 	bl	800b680 <HAL_SD_GetCardInfo>
}
 800ecec:	bf00      	nop
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	20035d60 	.word	0x20035d60

0800ecf8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b082      	sub	sp, #8
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ed00:	f000 f818 	bl	800ed34 <BSP_SD_AbortCallback>
}
 800ed04:	bf00      	nop
 800ed06:	3708      	adds	r7, #8
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ed14:	f000 f9a8 	bl	800f068 <BSP_SD_WriteCpltCallback>
}
 800ed18:	bf00      	nop
 800ed1a:	3708      	adds	r7, #8
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ed28:	f000 f9aa 	bl	800f080 <BSP_SD_ReadCpltCallback>
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ed34:	b480      	push	{r7}
 800ed36:	af00      	add	r7, sp, #0

}
 800ed38:	bf00      	nop
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b082      	sub	sp, #8
 800ed46:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ed48:	2301      	movs	r3, #1
 800ed4a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ed4c:	f000 f80c 	bl	800ed68 <BSP_PlatformIsDetected>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d101      	bne.n	800ed5a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ed56:	2300      	movs	r3, #0
 800ed58:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ed5a:	79fb      	ldrb	r3, [r7, #7]
 800ed5c:	b2db      	uxtb	r3, r3
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3708      	adds	r7, #8
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ed72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ed76:	4806      	ldr	r0, [pc, #24]	; (800ed90 <BSP_PlatformIsDetected+0x28>)
 800ed78:	f7fa f87e 	bl	8008e78 <HAL_GPIO_ReadPin>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d001      	beq.n	800ed86 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ed82:	2300      	movs	r3, #0
 800ed84:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ed86:	79fb      	ldrb	r3, [r7, #7]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}
 800ed90:	40020000 	.word	0x40020000

0800ed94 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ed9c:	f7f8 fde2 	bl	8007964 <HAL_GetTick>
 800eda0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eda2:	e006      	b.n	800edb2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eda4:	f7ff ff8a 	bl	800ecbc <BSP_SD_GetCardState>
 800eda8:	4603      	mov	r3, r0
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d101      	bne.n	800edb2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	e009      	b.n	800edc6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800edb2:	f7f8 fdd7 	bl	8007964 <HAL_GetTick>
 800edb6:	4602      	mov	r2, r0
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	1ad3      	subs	r3, r2, r3
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d8f0      	bhi.n	800eda4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800edc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b082      	sub	sp, #8
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	4603      	mov	r3, r0
 800edd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800edda:	4b0b      	ldr	r3, [pc, #44]	; (800ee08 <SD_CheckStatus+0x38>)
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ede0:	f7ff ff6c 	bl	800ecbc <BSP_SD_GetCardState>
 800ede4:	4603      	mov	r3, r0
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d107      	bne.n	800edfa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800edea:	4b07      	ldr	r3, [pc, #28]	; (800ee08 <SD_CheckStatus+0x38>)
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	b2db      	uxtb	r3, r3
 800edf0:	f023 0301 	bic.w	r3, r3, #1
 800edf4:	b2da      	uxtb	r2, r3
 800edf6:	4b04      	ldr	r3, [pc, #16]	; (800ee08 <SD_CheckStatus+0x38>)
 800edf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800edfa:	4b03      	ldr	r3, [pc, #12]	; (800ee08 <SD_CheckStatus+0x38>)
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	b2db      	uxtb	r3, r3
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	20000009 	.word	0x20000009

0800ee0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	4603      	mov	r3, r0
 800ee14:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ee16:	f7ff fef7 	bl	800ec08 <BSP_SD_Init>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d107      	bne.n	800ee30 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ee20:	79fb      	ldrb	r3, [r7, #7]
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7ff ffd4 	bl	800edd0 <SD_CheckStatus>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	4b04      	ldr	r3, [pc, #16]	; (800ee40 <SD_initialize+0x34>)
 800ee2e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ee30:	4b03      	ldr	r3, [pc, #12]	; (800ee40 <SD_initialize+0x34>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	b2db      	uxtb	r3, r3
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3708      	adds	r7, #8
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20000009 	.word	0x20000009

0800ee44 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b082      	sub	sp, #8
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ee4e:	79fb      	ldrb	r3, [r7, #7]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff ffbd 	bl	800edd0 <SD_CheckStatus>
 800ee56:	4603      	mov	r3, r0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
 800ee6a:	603b      	str	r3, [r7, #0]
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ee70:	2301      	movs	r3, #1
 800ee72:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ee74:	f247 5030 	movw	r0, #30000	; 0x7530
 800ee78:	f7ff ff8c 	bl	800ed94 <SD_CheckStatusWithTimeout>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	da01      	bge.n	800ee86 <SD_read+0x26>
  {
    return res;
 800ee82:	7dfb      	ldrb	r3, [r7, #23]
 800ee84:	e03b      	b.n	800eefe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ee86:	683a      	ldr	r2, [r7, #0]
 800ee88:	6879      	ldr	r1, [r7, #4]
 800ee8a:	68b8      	ldr	r0, [r7, #8]
 800ee8c:	f7ff fee2 	bl	800ec54 <BSP_SD_ReadBlocks_DMA>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d132      	bne.n	800eefc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ee96:	4b1c      	ldr	r3, [pc, #112]	; (800ef08 <SD_read+0xa8>)
 800ee98:	2200      	movs	r2, #0
 800ee9a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800ee9c:	f7f8 fd62 	bl	8007964 <HAL_GetTick>
 800eea0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800eea2:	bf00      	nop
 800eea4:	4b18      	ldr	r3, [pc, #96]	; (800ef08 <SD_read+0xa8>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d108      	bne.n	800eebe <SD_read+0x5e>
 800eeac:	f7f8 fd5a 	bl	8007964 <HAL_GetTick>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	1ad3      	subs	r3, r2, r3
 800eeb6:	f247 522f 	movw	r2, #29999	; 0x752f
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d9f2      	bls.n	800eea4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800eebe:	4b12      	ldr	r3, [pc, #72]	; (800ef08 <SD_read+0xa8>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d102      	bne.n	800eecc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800eec6:	2301      	movs	r3, #1
 800eec8:	75fb      	strb	r3, [r7, #23]
 800eeca:	e017      	b.n	800eefc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800eecc:	4b0e      	ldr	r3, [pc, #56]	; (800ef08 <SD_read+0xa8>)
 800eece:	2200      	movs	r2, #0
 800eed0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800eed2:	f7f8 fd47 	bl	8007964 <HAL_GetTick>
 800eed6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eed8:	e007      	b.n	800eeea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eeda:	f7ff feef 	bl	800ecbc <BSP_SD_GetCardState>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d102      	bne.n	800eeea <SD_read+0x8a>
          {
            res = RES_OK;
 800eee4:	2300      	movs	r3, #0
 800eee6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800eee8:	e008      	b.n	800eefc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eeea:	f7f8 fd3b 	bl	8007964 <HAL_GetTick>
 800eeee:	4602      	mov	r2, r0
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	1ad3      	subs	r3, r2, r3
 800eef4:	f247 522f 	movw	r2, #29999	; 0x752f
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d9ee      	bls.n	800eeda <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800eefc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3718      	adds	r7, #24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	200335fc 	.word	0x200335fc

0800ef0c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b086      	sub	sp, #24
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
 800ef16:	603b      	str	r3, [r7, #0]
 800ef18:	4603      	mov	r3, r0
 800ef1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ef20:	4b24      	ldr	r3, [pc, #144]	; (800efb4 <SD_write+0xa8>)
 800ef22:	2200      	movs	r2, #0
 800ef24:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ef26:	f247 5030 	movw	r0, #30000	; 0x7530
 800ef2a:	f7ff ff33 	bl	800ed94 <SD_CheckStatusWithTimeout>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	da01      	bge.n	800ef38 <SD_write+0x2c>
  {
    return res;
 800ef34:	7dfb      	ldrb	r3, [r7, #23]
 800ef36:	e038      	b.n	800efaa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ef38:	683a      	ldr	r2, [r7, #0]
 800ef3a:	6879      	ldr	r1, [r7, #4]
 800ef3c:	68b8      	ldr	r0, [r7, #8]
 800ef3e:	f7ff fea3 	bl	800ec88 <BSP_SD_WriteBlocks_DMA>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d12f      	bne.n	800efa8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ef48:	f7f8 fd0c 	bl	8007964 <HAL_GetTick>
 800ef4c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ef4e:	bf00      	nop
 800ef50:	4b18      	ldr	r3, [pc, #96]	; (800efb4 <SD_write+0xa8>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d108      	bne.n	800ef6a <SD_write+0x5e>
 800ef58:	f7f8 fd04 	bl	8007964 <HAL_GetTick>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	1ad3      	subs	r3, r2, r3
 800ef62:	f247 522f 	movw	r2, #29999	; 0x752f
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d9f2      	bls.n	800ef50 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ef6a:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <SD_write+0xa8>)
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d102      	bne.n	800ef78 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	75fb      	strb	r3, [r7, #23]
 800ef76:	e017      	b.n	800efa8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ef78:	4b0e      	ldr	r3, [pc, #56]	; (800efb4 <SD_write+0xa8>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ef7e:	f7f8 fcf1 	bl	8007964 <HAL_GetTick>
 800ef82:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef84:	e007      	b.n	800ef96 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ef86:	f7ff fe99 	bl	800ecbc <BSP_SD_GetCardState>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d102      	bne.n	800ef96 <SD_write+0x8a>
          {
            res = RES_OK;
 800ef90:	2300      	movs	r3, #0
 800ef92:	75fb      	strb	r3, [r7, #23]
            break;
 800ef94:	e008      	b.n	800efa8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ef96:	f7f8 fce5 	bl	8007964 <HAL_GetTick>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	1ad3      	subs	r3, r2, r3
 800efa0:	f247 522f 	movw	r2, #29999	; 0x752f
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d9ee      	bls.n	800ef86 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800efa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3718      	adds	r7, #24
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	200335f8 	.word	0x200335f8

0800efb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b08c      	sub	sp, #48	; 0x30
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	4603      	mov	r3, r0
 800efc0:	603a      	str	r2, [r7, #0]
 800efc2:	71fb      	strb	r3, [r7, #7]
 800efc4:	460b      	mov	r3, r1
 800efc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800efce:	4b25      	ldr	r3, [pc, #148]	; (800f064 <SD_ioctl+0xac>)
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0301 	and.w	r3, r3, #1
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d001      	beq.n	800efe0 <SD_ioctl+0x28>
 800efdc:	2303      	movs	r3, #3
 800efde:	e03c      	b.n	800f05a <SD_ioctl+0xa2>

  switch (cmd)
 800efe0:	79bb      	ldrb	r3, [r7, #6]
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d834      	bhi.n	800f050 <SD_ioctl+0x98>
 800efe6:	a201      	add	r2, pc, #4	; (adr r2, 800efec <SD_ioctl+0x34>)
 800efe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efec:	0800effd 	.word	0x0800effd
 800eff0:	0800f005 	.word	0x0800f005
 800eff4:	0800f01d 	.word	0x0800f01d
 800eff8:	0800f037 	.word	0x0800f037
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f002:	e028      	b.n	800f056 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f004:	f107 030c 	add.w	r3, r7, #12
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff fe67 	bl	800ecdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f01a:	e01c      	b.n	800f056 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f01c:	f107 030c 	add.w	r3, r7, #12
 800f020:	4618      	mov	r0, r3
 800f022:	f7ff fe5b 	bl	800ecdc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f028:	b29a      	uxth	r2, r3
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f02e:	2300      	movs	r3, #0
 800f030:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f034:	e00f      	b.n	800f056 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f036:	f107 030c 	add.w	r3, r7, #12
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7ff fe4e 	bl	800ecdc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f042:	0a5a      	lsrs	r2, r3, #9
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f04e:	e002      	b.n	800f056 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f050:	2304      	movs	r3, #4
 800f052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3730      	adds	r7, #48	; 0x30
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	20000009 	.word	0x20000009

0800f068 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f068:	b480      	push	{r7}
 800f06a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800f06c:	4b03      	ldr	r3, [pc, #12]	; (800f07c <BSP_SD_WriteCpltCallback+0x14>)
 800f06e:	2201      	movs	r2, #1
 800f070:	601a      	str	r2, [r3, #0]
}
 800f072:	bf00      	nop
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	200335f8 	.word	0x200335f8

0800f080 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f080:	b480      	push	{r7}
 800f082:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800f084:	4b03      	ldr	r3, [pc, #12]	; (800f094 <BSP_SD_ReadCpltCallback+0x14>)
 800f086:	2201      	movs	r2, #1
 800f088:	601a      	str	r2, [r3, #0]
}
 800f08a:	bf00      	nop
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr
 800f094:	200335fc 	.word	0x200335fc

0800f098 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	4603      	mov	r3, r0
 800f0a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f0a2:	79fb      	ldrb	r3, [r7, #7]
 800f0a4:	4a08      	ldr	r2, [pc, #32]	; (800f0c8 <disk_status+0x30>)
 800f0a6:	009b      	lsls	r3, r3, #2
 800f0a8:	4413      	add	r3, r2
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	79fa      	ldrb	r2, [r7, #7]
 800f0b0:	4905      	ldr	r1, [pc, #20]	; (800f0c8 <disk_status+0x30>)
 800f0b2:	440a      	add	r2, r1
 800f0b4:	7a12      	ldrb	r2, [r2, #8]
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	4798      	blx	r3
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3710      	adds	r7, #16
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	20033628 	.word	0x20033628

0800f0cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f0da:	79fb      	ldrb	r3, [r7, #7]
 800f0dc:	4a0d      	ldr	r2, [pc, #52]	; (800f114 <disk_initialize+0x48>)
 800f0de:	5cd3      	ldrb	r3, [r2, r3]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d111      	bne.n	800f108 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f0e4:	79fb      	ldrb	r3, [r7, #7]
 800f0e6:	4a0b      	ldr	r2, [pc, #44]	; (800f114 <disk_initialize+0x48>)
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	4a09      	ldr	r2, [pc, #36]	; (800f114 <disk_initialize+0x48>)
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	4413      	add	r3, r2
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	79fa      	ldrb	r2, [r7, #7]
 800f0fa:	4906      	ldr	r1, [pc, #24]	; (800f114 <disk_initialize+0x48>)
 800f0fc:	440a      	add	r2, r1
 800f0fe:	7a12      	ldrb	r2, [r2, #8]
 800f100:	4610      	mov	r0, r2
 800f102:	4798      	blx	r3
 800f104:	4603      	mov	r3, r0
 800f106:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f108:	7bfb      	ldrb	r3, [r7, #15]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	20033628 	.word	0x20033628

0800f118 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f118:	b590      	push	{r4, r7, lr}
 800f11a:	b087      	sub	sp, #28
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60b9      	str	r1, [r7, #8]
 800f120:	607a      	str	r2, [r7, #4]
 800f122:	603b      	str	r3, [r7, #0]
 800f124:	4603      	mov	r3, r0
 800f126:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f128:	7bfb      	ldrb	r3, [r7, #15]
 800f12a:	4a0a      	ldr	r2, [pc, #40]	; (800f154 <disk_read+0x3c>)
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	4413      	add	r3, r2
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	689c      	ldr	r4, [r3, #8]
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	4a07      	ldr	r2, [pc, #28]	; (800f154 <disk_read+0x3c>)
 800f138:	4413      	add	r3, r2
 800f13a:	7a18      	ldrb	r0, [r3, #8]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	68b9      	ldr	r1, [r7, #8]
 800f142:	47a0      	blx	r4
 800f144:	4603      	mov	r3, r0
 800f146:	75fb      	strb	r3, [r7, #23]
  return res;
 800f148:	7dfb      	ldrb	r3, [r7, #23]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	371c      	adds	r7, #28
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd90      	pop	{r4, r7, pc}
 800f152:	bf00      	nop
 800f154:	20033628 	.word	0x20033628

0800f158 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f158:	b590      	push	{r4, r7, lr}
 800f15a:	b087      	sub	sp, #28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60b9      	str	r1, [r7, #8]
 800f160:	607a      	str	r2, [r7, #4]
 800f162:	603b      	str	r3, [r7, #0]
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f168:	7bfb      	ldrb	r3, [r7, #15]
 800f16a:	4a0a      	ldr	r2, [pc, #40]	; (800f194 <disk_write+0x3c>)
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	68dc      	ldr	r4, [r3, #12]
 800f174:	7bfb      	ldrb	r3, [r7, #15]
 800f176:	4a07      	ldr	r2, [pc, #28]	; (800f194 <disk_write+0x3c>)
 800f178:	4413      	add	r3, r2
 800f17a:	7a18      	ldrb	r0, [r3, #8]
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	687a      	ldr	r2, [r7, #4]
 800f180:	68b9      	ldr	r1, [r7, #8]
 800f182:	47a0      	blx	r4
 800f184:	4603      	mov	r3, r0
 800f186:	75fb      	strb	r3, [r7, #23]
  return res;
 800f188:	7dfb      	ldrb	r3, [r7, #23]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	371c      	adds	r7, #28
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd90      	pop	{r4, r7, pc}
 800f192:	bf00      	nop
 800f194:	20033628 	.word	0x20033628

0800f198 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	4603      	mov	r3, r0
 800f1a0:	603a      	str	r2, [r7, #0]
 800f1a2:	71fb      	strb	r3, [r7, #7]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f1a8:	79fb      	ldrb	r3, [r7, #7]
 800f1aa:	4a09      	ldr	r2, [pc, #36]	; (800f1d0 <disk_ioctl+0x38>)
 800f1ac:	009b      	lsls	r3, r3, #2
 800f1ae:	4413      	add	r3, r2
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	691b      	ldr	r3, [r3, #16]
 800f1b4:	79fa      	ldrb	r2, [r7, #7]
 800f1b6:	4906      	ldr	r1, [pc, #24]	; (800f1d0 <disk_ioctl+0x38>)
 800f1b8:	440a      	add	r2, r1
 800f1ba:	7a10      	ldrb	r0, [r2, #8]
 800f1bc:	79b9      	ldrb	r1, [r7, #6]
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	4798      	blx	r3
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	73fb      	strb	r3, [r7, #15]
  return res;
 800f1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3710      	adds	r7, #16
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	20033628 	.word	0x20033628

0800f1d4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f1e4:	89fb      	ldrh	r3, [r7, #14]
 800f1e6:	021b      	lsls	r3, r3, #8
 800f1e8:	b21a      	sxth	r2, r3
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	b21b      	sxth	r3, r3
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	b21b      	sxth	r3, r3
 800f1f4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f1f6:	89fb      	ldrh	r3, [r7, #14]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	3714      	adds	r7, #20
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	3303      	adds	r3, #3
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	021b      	lsls	r3, r3, #8
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	3202      	adds	r2, #2
 800f21c:	7812      	ldrb	r2, [r2, #0]
 800f21e:	4313      	orrs	r3, r2
 800f220:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	021b      	lsls	r3, r3, #8
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	3201      	adds	r2, #1
 800f22a:	7812      	ldrb	r2, [r2, #0]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	021b      	lsls	r3, r3, #8
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	7812      	ldrb	r2, [r2, #0]
 800f238:	4313      	orrs	r3, r2
 800f23a:	60fb      	str	r3, [r7, #12]
	return rv;
 800f23c:	68fb      	ldr	r3, [r7, #12]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3714      	adds	r7, #20
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f24a:	b480      	push	{r7}
 800f24c:	b083      	sub	sp, #12
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	460b      	mov	r3, r1
 800f254:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	1c5a      	adds	r2, r3, #1
 800f25a:	607a      	str	r2, [r7, #4]
 800f25c:	887a      	ldrh	r2, [r7, #2]
 800f25e:	b2d2      	uxtb	r2, r2
 800f260:	701a      	strb	r2, [r3, #0]
 800f262:	887b      	ldrh	r3, [r7, #2]
 800f264:	0a1b      	lsrs	r3, r3, #8
 800f266:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	1c5a      	adds	r2, r3, #1
 800f26c:	607a      	str	r2, [r7, #4]
 800f26e:	887a      	ldrh	r2, [r7, #2]
 800f270:	b2d2      	uxtb	r2, r2
 800f272:	701a      	strb	r2, [r3, #0]
}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	1c5a      	adds	r2, r3, #1
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	683a      	ldr	r2, [r7, #0]
 800f292:	b2d2      	uxtb	r2, r2
 800f294:	701a      	strb	r2, [r3, #0]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	0a1b      	lsrs	r3, r3, #8
 800f29a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	1c5a      	adds	r2, r3, #1
 800f2a0:	607a      	str	r2, [r7, #4]
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	b2d2      	uxtb	r2, r2
 800f2a6:	701a      	strb	r2, [r3, #0]
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	0a1b      	lsrs	r3, r3, #8
 800f2ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	1c5a      	adds	r2, r3, #1
 800f2b2:	607a      	str	r2, [r7, #4]
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	b2d2      	uxtb	r2, r2
 800f2b8:	701a      	strb	r2, [r3, #0]
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	0a1b      	lsrs	r3, r3, #8
 800f2be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	1c5a      	adds	r2, r3, #1
 800f2c4:	607a      	str	r2, [r7, #4]
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	b2d2      	uxtb	r2, r2
 800f2ca:	701a      	strb	r2, [r3, #0]
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f2d8:	b480      	push	{r7}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00d      	beq.n	800f30e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	1c53      	adds	r3, r2, #1
 800f2f6:	613b      	str	r3, [r7, #16]
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	1c59      	adds	r1, r3, #1
 800f2fc:	6179      	str	r1, [r7, #20]
 800f2fe:	7812      	ldrb	r2, [r2, #0]
 800f300:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	3b01      	subs	r3, #1
 800f306:	607b      	str	r3, [r7, #4]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d1f1      	bne.n	800f2f2 <mem_cpy+0x1a>
	}
}
 800f30e:	bf00      	nop
 800f310:	371c      	adds	r7, #28
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr

0800f31a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f31a:	b480      	push	{r7}
 800f31c:	b087      	sub	sp, #28
 800f31e:	af00      	add	r7, sp, #0
 800f320:	60f8      	str	r0, [r7, #12]
 800f322:	60b9      	str	r1, [r7, #8]
 800f324:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	617a      	str	r2, [r7, #20]
 800f330:	68ba      	ldr	r2, [r7, #8]
 800f332:	b2d2      	uxtb	r2, r2
 800f334:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	3b01      	subs	r3, #1
 800f33a:	607b      	str	r3, [r7, #4]
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d1f3      	bne.n	800f32a <mem_set+0x10>
}
 800f342:	bf00      	nop
 800f344:	371c      	adds	r7, #28
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f34e:	b480      	push	{r7}
 800f350:	b089      	sub	sp, #36	; 0x24
 800f352:	af00      	add	r7, sp, #0
 800f354:	60f8      	str	r0, [r7, #12]
 800f356:	60b9      	str	r1, [r7, #8]
 800f358:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	61fb      	str	r3, [r7, #28]
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	1c5a      	adds	r2, r3, #1
 800f36a:	61fa      	str	r2, [r7, #28]
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	4619      	mov	r1, r3
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	1c5a      	adds	r2, r3, #1
 800f374:	61ba      	str	r2, [r7, #24]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	1acb      	subs	r3, r1, r3
 800f37a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	3b01      	subs	r3, #1
 800f380:	607b      	str	r3, [r7, #4]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d002      	beq.n	800f38e <mem_cmp+0x40>
 800f388:	697b      	ldr	r3, [r7, #20]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d0eb      	beq.n	800f366 <mem_cmp+0x18>

	return r;
 800f38e:	697b      	ldr	r3, [r7, #20]
}
 800f390:	4618      	mov	r0, r3
 800f392:	3724      	adds	r7, #36	; 0x24
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f3a6:	e002      	b.n	800f3ae <chk_chr+0x12>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	607b      	str	r3, [r7, #4]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d005      	beq.n	800f3c2 <chk_chr+0x26>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d1f2      	bne.n	800f3a8 <chk_chr+0xc>
	return *str;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	781b      	ldrb	r3, [r3, #0]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f3de:	2300      	movs	r3, #0
 800f3e0:	60bb      	str	r3, [r7, #8]
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	60fb      	str	r3, [r7, #12]
 800f3e6:	e029      	b.n	800f43c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f3e8:	4a27      	ldr	r2, [pc, #156]	; (800f488 <chk_lock+0xb4>)
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	011b      	lsls	r3, r3, #4
 800f3ee:	4413      	add	r3, r2
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d01d      	beq.n	800f432 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f3f6:	4a24      	ldr	r2, [pc, #144]	; (800f488 <chk_lock+0xb4>)
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	011b      	lsls	r3, r3, #4
 800f3fc:	4413      	add	r3, r2
 800f3fe:	681a      	ldr	r2, [r3, #0]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	429a      	cmp	r2, r3
 800f406:	d116      	bne.n	800f436 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f408:	4a1f      	ldr	r2, [pc, #124]	; (800f488 <chk_lock+0xb4>)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	011b      	lsls	r3, r3, #4
 800f40e:	4413      	add	r3, r2
 800f410:	3304      	adds	r3, #4
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f418:	429a      	cmp	r2, r3
 800f41a:	d10c      	bne.n	800f436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f41c:	4a1a      	ldr	r2, [pc, #104]	; (800f488 <chk_lock+0xb4>)
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	011b      	lsls	r3, r3, #4
 800f422:	4413      	add	r3, r2
 800f424:	3308      	adds	r3, #8
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d102      	bne.n	800f436 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f430:	e007      	b.n	800f442 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f432:	2301      	movs	r3, #1
 800f434:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2b01      	cmp	r3, #1
 800f440:	d9d2      	bls.n	800f3e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	2b02      	cmp	r3, #2
 800f446:	d109      	bne.n	800f45c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d102      	bne.n	800f454 <chk_lock+0x80>
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	2b02      	cmp	r3, #2
 800f452:	d101      	bne.n	800f458 <chk_lock+0x84>
 800f454:	2300      	movs	r3, #0
 800f456:	e010      	b.n	800f47a <chk_lock+0xa6>
 800f458:	2312      	movs	r3, #18
 800f45a:	e00e      	b.n	800f47a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d108      	bne.n	800f474 <chk_lock+0xa0>
 800f462:	4a09      	ldr	r2, [pc, #36]	; (800f488 <chk_lock+0xb4>)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	011b      	lsls	r3, r3, #4
 800f468:	4413      	add	r3, r2
 800f46a:	330c      	adds	r3, #12
 800f46c:	881b      	ldrh	r3, [r3, #0]
 800f46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f472:	d101      	bne.n	800f478 <chk_lock+0xa4>
 800f474:	2310      	movs	r3, #16
 800f476:	e000      	b.n	800f47a <chk_lock+0xa6>
 800f478:	2300      	movs	r3, #0
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	20033608 	.word	0x20033608

0800f48c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f492:	2300      	movs	r3, #0
 800f494:	607b      	str	r3, [r7, #4]
 800f496:	e002      	b.n	800f49e <enq_lock+0x12>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	3301      	adds	r3, #1
 800f49c:	607b      	str	r3, [r7, #4]
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d806      	bhi.n	800f4b2 <enq_lock+0x26>
 800f4a4:	4a09      	ldr	r2, [pc, #36]	; (800f4cc <enq_lock+0x40>)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	011b      	lsls	r3, r3, #4
 800f4aa:	4413      	add	r3, r2
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1f2      	bne.n	800f498 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	bf14      	ite	ne
 800f4b8:	2301      	movne	r3, #1
 800f4ba:	2300      	moveq	r3, #0
 800f4bc:	b2db      	uxtb	r3, r3
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	20033608 	.word	0x20033608

0800f4d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f4da:	2300      	movs	r3, #0
 800f4dc:	60fb      	str	r3, [r7, #12]
 800f4de:	e01f      	b.n	800f520 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f4e0:	4a41      	ldr	r2, [pc, #260]	; (800f5e8 <inc_lock+0x118>)
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	011b      	lsls	r3, r3, #4
 800f4e6:	4413      	add	r3, r2
 800f4e8:	681a      	ldr	r2, [r3, #0]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d113      	bne.n	800f51a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f4f2:	4a3d      	ldr	r2, [pc, #244]	; (800f5e8 <inc_lock+0x118>)
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	011b      	lsls	r3, r3, #4
 800f4f8:	4413      	add	r3, r2
 800f4fa:	3304      	adds	r3, #4
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f502:	429a      	cmp	r2, r3
 800f504:	d109      	bne.n	800f51a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f506:	4a38      	ldr	r2, [pc, #224]	; (800f5e8 <inc_lock+0x118>)
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	011b      	lsls	r3, r3, #4
 800f50c:	4413      	add	r3, r2
 800f50e:	3308      	adds	r3, #8
 800f510:	681a      	ldr	r2, [r3, #0]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f516:	429a      	cmp	r2, r3
 800f518:	d006      	beq.n	800f528 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	3301      	adds	r3, #1
 800f51e:	60fb      	str	r3, [r7, #12]
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d9dc      	bls.n	800f4e0 <inc_lock+0x10>
 800f526:	e000      	b.n	800f52a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f528:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2b02      	cmp	r3, #2
 800f52e:	d132      	bne.n	800f596 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f530:	2300      	movs	r3, #0
 800f532:	60fb      	str	r3, [r7, #12]
 800f534:	e002      	b.n	800f53c <inc_lock+0x6c>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	3301      	adds	r3, #1
 800f53a:	60fb      	str	r3, [r7, #12]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d806      	bhi.n	800f550 <inc_lock+0x80>
 800f542:	4a29      	ldr	r2, [pc, #164]	; (800f5e8 <inc_lock+0x118>)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	011b      	lsls	r3, r3, #4
 800f548:	4413      	add	r3, r2
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1f2      	bne.n	800f536 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2b02      	cmp	r3, #2
 800f554:	d101      	bne.n	800f55a <inc_lock+0x8a>
 800f556:	2300      	movs	r3, #0
 800f558:	e040      	b.n	800f5dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	4922      	ldr	r1, [pc, #136]	; (800f5e8 <inc_lock+0x118>)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	011b      	lsls	r3, r3, #4
 800f564:	440b      	add	r3, r1
 800f566:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	689a      	ldr	r2, [r3, #8]
 800f56c:	491e      	ldr	r1, [pc, #120]	; (800f5e8 <inc_lock+0x118>)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	011b      	lsls	r3, r3, #4
 800f572:	440b      	add	r3, r1
 800f574:	3304      	adds	r3, #4
 800f576:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	695a      	ldr	r2, [r3, #20]
 800f57c:	491a      	ldr	r1, [pc, #104]	; (800f5e8 <inc_lock+0x118>)
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	011b      	lsls	r3, r3, #4
 800f582:	440b      	add	r3, r1
 800f584:	3308      	adds	r3, #8
 800f586:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f588:	4a17      	ldr	r2, [pc, #92]	; (800f5e8 <inc_lock+0x118>)
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	4413      	add	r3, r2
 800f590:	330c      	adds	r3, #12
 800f592:	2200      	movs	r2, #0
 800f594:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d009      	beq.n	800f5b0 <inc_lock+0xe0>
 800f59c:	4a12      	ldr	r2, [pc, #72]	; (800f5e8 <inc_lock+0x118>)
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	011b      	lsls	r3, r3, #4
 800f5a2:	4413      	add	r3, r2
 800f5a4:	330c      	adds	r3, #12
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d001      	beq.n	800f5b0 <inc_lock+0xe0>
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	e015      	b.n	800f5dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d108      	bne.n	800f5c8 <inc_lock+0xf8>
 800f5b6:	4a0c      	ldr	r2, [pc, #48]	; (800f5e8 <inc_lock+0x118>)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	011b      	lsls	r3, r3, #4
 800f5bc:	4413      	add	r3, r2
 800f5be:	330c      	adds	r3, #12
 800f5c0:	881b      	ldrh	r3, [r3, #0]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	e001      	b.n	800f5cc <inc_lock+0xfc>
 800f5c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5cc:	4906      	ldr	r1, [pc, #24]	; (800f5e8 <inc_lock+0x118>)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	011b      	lsls	r3, r3, #4
 800f5d2:	440b      	add	r3, r1
 800f5d4:	330c      	adds	r3, #12
 800f5d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	3301      	adds	r3, #1
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	20033608 	.word	0x20033608

0800f5ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	607b      	str	r3, [r7, #4]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d825      	bhi.n	800f64c <dec_lock+0x60>
		n = Files[i].ctr;
 800f600:	4a17      	ldr	r2, [pc, #92]	; (800f660 <dec_lock+0x74>)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	011b      	lsls	r3, r3, #4
 800f606:	4413      	add	r3, r2
 800f608:	330c      	adds	r3, #12
 800f60a:	881b      	ldrh	r3, [r3, #0]
 800f60c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f60e:	89fb      	ldrh	r3, [r7, #14]
 800f610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f614:	d101      	bne.n	800f61a <dec_lock+0x2e>
 800f616:	2300      	movs	r3, #0
 800f618:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f61a:	89fb      	ldrh	r3, [r7, #14]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d002      	beq.n	800f626 <dec_lock+0x3a>
 800f620:	89fb      	ldrh	r3, [r7, #14]
 800f622:	3b01      	subs	r3, #1
 800f624:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f626:	4a0e      	ldr	r2, [pc, #56]	; (800f660 <dec_lock+0x74>)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	011b      	lsls	r3, r3, #4
 800f62c:	4413      	add	r3, r2
 800f62e:	330c      	adds	r3, #12
 800f630:	89fa      	ldrh	r2, [r7, #14]
 800f632:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f634:	89fb      	ldrh	r3, [r7, #14]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d105      	bne.n	800f646 <dec_lock+0x5a>
 800f63a:	4a09      	ldr	r2, [pc, #36]	; (800f660 <dec_lock+0x74>)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	011b      	lsls	r3, r3, #4
 800f640:	4413      	add	r3, r2
 800f642:	2200      	movs	r2, #0
 800f644:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f646:	2300      	movs	r3, #0
 800f648:	737b      	strb	r3, [r7, #13]
 800f64a:	e001      	b.n	800f650 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f64c:	2302      	movs	r3, #2
 800f64e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f650:	7b7b      	ldrb	r3, [r7, #13]
}
 800f652:	4618      	mov	r0, r3
 800f654:	3714      	adds	r7, #20
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	20033608 	.word	0x20033608

0800f664 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f66c:	2300      	movs	r3, #0
 800f66e:	60fb      	str	r3, [r7, #12]
 800f670:	e010      	b.n	800f694 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f672:	4a0d      	ldr	r2, [pc, #52]	; (800f6a8 <clear_lock+0x44>)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	011b      	lsls	r3, r3, #4
 800f678:	4413      	add	r3, r2
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	429a      	cmp	r2, r3
 800f680:	d105      	bne.n	800f68e <clear_lock+0x2a>
 800f682:	4a09      	ldr	r2, [pc, #36]	; (800f6a8 <clear_lock+0x44>)
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	011b      	lsls	r3, r3, #4
 800f688:	4413      	add	r3, r2
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	3301      	adds	r3, #1
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d9eb      	bls.n	800f672 <clear_lock+0xe>
	}
}
 800f69a:	bf00      	nop
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	20033608 	.word	0x20033608

0800f6ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b086      	sub	sp, #24
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	78db      	ldrb	r3, [r3, #3]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d034      	beq.n	800f72a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	7858      	ldrb	r0, [r3, #1]
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	697a      	ldr	r2, [r7, #20]
 800f6d4:	f7ff fd40 	bl	800f158 <disk_write>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d002      	beq.n	800f6e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f6de:	2301      	movs	r3, #1
 800f6e0:	73fb      	strb	r3, [r7, #15]
 800f6e2:	e022      	b.n	800f72a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	1ad2      	subs	r2, r2, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6a1b      	ldr	r3, [r3, #32]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d217      	bcs.n	800f72a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	789b      	ldrb	r3, [r3, #2]
 800f6fe:	613b      	str	r3, [r7, #16]
 800f700:	e010      	b.n	800f724 <sync_window+0x78>
					wsect += fs->fsize;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	697a      	ldr	r2, [r7, #20]
 800f708:	4413      	add	r3, r2
 800f70a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7858      	ldrb	r0, [r3, #1]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f716:	2301      	movs	r3, #1
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	f7ff fd1d 	bl	800f158 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	3b01      	subs	r3, #1
 800f722:	613b      	str	r3, [r7, #16]
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	2b01      	cmp	r3, #1
 800f728:	d8eb      	bhi.n	800f702 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3718      	adds	r7, #24
 800f730:	46bd      	mov	sp, r7
 800f732:	bd80      	pop	{r7, pc}

0800f734 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b084      	sub	sp, #16
 800f738:	af00      	add	r7, sp, #0
 800f73a:	6078      	str	r0, [r7, #4]
 800f73c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f73e:	2300      	movs	r3, #0
 800f740:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d01b      	beq.n	800f784 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7ff ffad 	bl	800f6ac <sync_window>
 800f752:	4603      	mov	r3, r0
 800f754:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f756:	7bfb      	ldrb	r3, [r7, #15]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d113      	bne.n	800f784 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	7858      	ldrb	r0, [r3, #1]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f766:	2301      	movs	r3, #1
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	f7ff fcd5 	bl	800f118 <disk_read>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d004      	beq.n	800f77e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f774:	f04f 33ff 	mov.w	r3, #4294967295
 800f778:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f77a:	2301      	movs	r3, #1
 800f77c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f784:	7bfb      	ldrb	r3, [r7, #15]
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}
	...

0800f790 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f7ff ff87 	bl	800f6ac <sync_window>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f7a2:	7bfb      	ldrb	r3, [r7, #15]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d159      	bne.n	800f85c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2b03      	cmp	r3, #3
 800f7ae:	d149      	bne.n	800f844 <sync_fs+0xb4>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	791b      	ldrb	r3, [r3, #4]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d145      	bne.n	800f844 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	899b      	ldrh	r3, [r3, #12]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	2100      	movs	r1, #0
 800f7c6:	f7ff fda8 	bl	800f31a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	3338      	adds	r3, #56	; 0x38
 800f7ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f7d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	f7ff fd37 	bl	800f24a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	3338      	adds	r3, #56	; 0x38
 800f7e0:	4921      	ldr	r1, [pc, #132]	; (800f868 <sync_fs+0xd8>)
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7ff fd4c 	bl	800f280 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	3338      	adds	r3, #56	; 0x38
 800f7ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f7f0:	491e      	ldr	r1, [pc, #120]	; (800f86c <sync_fs+0xdc>)
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	f7ff fd44 	bl	800f280 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3338      	adds	r3, #56	; 0x38
 800f7fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	695b      	ldr	r3, [r3, #20]
 800f804:	4619      	mov	r1, r3
 800f806:	4610      	mov	r0, r2
 800f808:	f7ff fd3a 	bl	800f280 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3338      	adds	r3, #56	; 0x38
 800f810:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	4619      	mov	r1, r3
 800f81a:	4610      	mov	r0, r2
 800f81c:	f7ff fd30 	bl	800f280 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f824:	1c5a      	adds	r2, r3, #1
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	7858      	ldrb	r0, [r3, #1]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f838:	2301      	movs	r3, #1
 800f83a:	f7ff fc8d 	bl	800f158 <disk_write>
			fs->fsi_flag = 0;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2200      	movs	r2, #0
 800f842:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	785b      	ldrb	r3, [r3, #1]
 800f848:	2200      	movs	r2, #0
 800f84a:	2100      	movs	r1, #0
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7ff fca3 	bl	800f198 <disk_ioctl>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <sync_fs+0xcc>
 800f858:	2301      	movs	r3, #1
 800f85a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	41615252 	.word	0x41615252
 800f86c:	61417272 	.word	0x61417272

0800f870 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	3b02      	subs	r3, #2
 800f87e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	69db      	ldr	r3, [r3, #28]
 800f884:	3b02      	subs	r3, #2
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d301      	bcc.n	800f890 <clust2sect+0x20>
 800f88c:	2300      	movs	r3, #0
 800f88e:	e008      	b.n	800f8a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	895b      	ldrh	r3, [r3, #10]
 800f894:	461a      	mov	r2, r3
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	fb03 f202 	mul.w	r2, r3, r2
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a0:	4413      	add	r3, r2
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	370c      	adds	r7, #12
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr

0800f8ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b086      	sub	sp, #24
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
 800f8b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d904      	bls.n	800f8ce <get_fat+0x20>
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	69db      	ldr	r3, [r3, #28]
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d302      	bcc.n	800f8d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	617b      	str	r3, [r7, #20]
 800f8d2:	e0b7      	b.n	800fa44 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d05a      	beq.n	800f998 <get_fat+0xea>
 800f8e2:	2b03      	cmp	r3, #3
 800f8e4:	d07d      	beq.n	800f9e2 <get_fat+0x134>
 800f8e6:	2b01      	cmp	r3, #1
 800f8e8:	f040 80a2 	bne.w	800fa30 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	60fb      	str	r3, [r7, #12]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	085b      	lsrs	r3, r3, #1
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4413      	add	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	899b      	ldrh	r3, [r3, #12]
 800f902:	4619      	mov	r1, r3
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	fbb3 f3f1 	udiv	r3, r3, r1
 800f90a:	4413      	add	r3, r2
 800f90c:	4619      	mov	r1, r3
 800f90e:	6938      	ldr	r0, [r7, #16]
 800f910:	f7ff ff10 	bl	800f734 <move_window>
 800f914:	4603      	mov	r3, r0
 800f916:	2b00      	cmp	r3, #0
 800f918:	f040 808d 	bne.w	800fa36 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	60fa      	str	r2, [r7, #12]
 800f922:	693a      	ldr	r2, [r7, #16]
 800f924:	8992      	ldrh	r2, [r2, #12]
 800f926:	fbb3 f1f2 	udiv	r1, r3, r2
 800f92a:	fb02 f201 	mul.w	r2, r2, r1
 800f92e:	1a9b      	subs	r3, r3, r2
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	4413      	add	r3, r2
 800f934:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f938:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	899b      	ldrh	r3, [r3, #12]
 800f942:	4619      	mov	r1, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	fbb3 f3f1 	udiv	r3, r3, r1
 800f94a:	4413      	add	r3, r2
 800f94c:	4619      	mov	r1, r3
 800f94e:	6938      	ldr	r0, [r7, #16]
 800f950:	f7ff fef0 	bl	800f734 <move_window>
 800f954:	4603      	mov	r3, r0
 800f956:	2b00      	cmp	r3, #0
 800f958:	d16f      	bne.n	800fa3a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f95a:	693b      	ldr	r3, [r7, #16]
 800f95c:	899b      	ldrh	r3, [r3, #12]
 800f95e:	461a      	mov	r2, r3
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	fbb3 f1f2 	udiv	r1, r3, r2
 800f966:	fb02 f201 	mul.w	r2, r2, r1
 800f96a:	1a9b      	subs	r3, r3, r2
 800f96c:	693a      	ldr	r2, [r7, #16]
 800f96e:	4413      	add	r3, r2
 800f970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f974:	021b      	lsls	r3, r3, #8
 800f976:	461a      	mov	r2, r3
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	4313      	orrs	r3, r2
 800f97c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	f003 0301 	and.w	r3, r3, #1
 800f984:	2b00      	cmp	r3, #0
 800f986:	d002      	beq.n	800f98e <get_fat+0xe0>
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	091b      	lsrs	r3, r3, #4
 800f98c:	e002      	b.n	800f994 <get_fat+0xe6>
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f994:	617b      	str	r3, [r7, #20]
			break;
 800f996:	e055      	b.n	800fa44 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f998:	693b      	ldr	r3, [r7, #16]
 800f99a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	899b      	ldrh	r3, [r3, #12]
 800f9a0:	085b      	lsrs	r3, r3, #1
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	4619      	mov	r1, r3
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9ac:	4413      	add	r3, r2
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	6938      	ldr	r0, [r7, #16]
 800f9b2:	f7ff febf 	bl	800f734 <move_window>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d140      	bne.n	800fa3e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	005b      	lsls	r3, r3, #1
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	8992      	ldrh	r2, [r2, #12]
 800f9ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9ce:	fb02 f200 	mul.w	r2, r2, r0
 800f9d2:	1a9b      	subs	r3, r3, r2
 800f9d4:	440b      	add	r3, r1
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff fbfc 	bl	800f1d4 <ld_word>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	617b      	str	r3, [r7, #20]
			break;
 800f9e0:	e030      	b.n	800fa44 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	899b      	ldrh	r3, [r3, #12]
 800f9ea:	089b      	lsrs	r3, r3, #2
 800f9ec:	b29b      	uxth	r3, r3
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9f6:	4413      	add	r3, r2
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	6938      	ldr	r0, [r7, #16]
 800f9fc:	f7ff fe9a 	bl	800f734 <move_window>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d11d      	bne.n	800fa42 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	693a      	ldr	r2, [r7, #16]
 800fa12:	8992      	ldrh	r2, [r2, #12]
 800fa14:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa18:	fb02 f200 	mul.w	r2, r2, r0
 800fa1c:	1a9b      	subs	r3, r3, r2
 800fa1e:	440b      	add	r3, r1
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7ff fbef 	bl	800f204 <ld_dword>
 800fa26:	4603      	mov	r3, r0
 800fa28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fa2c:	617b      	str	r3, [r7, #20]
			break;
 800fa2e:	e009      	b.n	800fa44 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fa30:	2301      	movs	r3, #1
 800fa32:	617b      	str	r3, [r7, #20]
 800fa34:	e006      	b.n	800fa44 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa36:	bf00      	nop
 800fa38:	e004      	b.n	800fa44 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fa3a:	bf00      	nop
 800fa3c:	e002      	b.n	800fa44 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fa3e:	bf00      	nop
 800fa40:	e000      	b.n	800fa44 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fa42:	bf00      	nop
		}
	}

	return val;
 800fa44:	697b      	ldr	r3, [r7, #20]
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3718      	adds	r7, #24
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fa4e:	b590      	push	{r4, r7, lr}
 800fa50:	b089      	sub	sp, #36	; 0x24
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	60f8      	str	r0, [r7, #12]
 800fa56:	60b9      	str	r1, [r7, #8]
 800fa58:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	f240 8106 	bls.w	800fc72 <put_fat+0x224>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	69db      	ldr	r3, [r3, #28]
 800fa6a:	68ba      	ldr	r2, [r7, #8]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	f080 8100 	bcs.w	800fc72 <put_fat+0x224>
		switch (fs->fs_type) {
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	2b02      	cmp	r3, #2
 800fa78:	f000 8088 	beq.w	800fb8c <put_fat+0x13e>
 800fa7c:	2b03      	cmp	r3, #3
 800fa7e:	f000 80b0 	beq.w	800fbe2 <put_fat+0x194>
 800fa82:	2b01      	cmp	r3, #1
 800fa84:	f040 80f5 	bne.w	800fc72 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	61bb      	str	r3, [r7, #24]
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	085b      	lsrs	r3, r3, #1
 800fa90:	69ba      	ldr	r2, [r7, #24]
 800fa92:	4413      	add	r3, r2
 800fa94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	899b      	ldrh	r3, [r3, #12]
 800fa9e:	4619      	mov	r1, r3
 800faa0:	69bb      	ldr	r3, [r7, #24]
 800faa2:	fbb3 f3f1 	udiv	r3, r3, r1
 800faa6:	4413      	add	r3, r2
 800faa8:	4619      	mov	r1, r3
 800faaa:	68f8      	ldr	r0, [r7, #12]
 800faac:	f7ff fe42 	bl	800f734 <move_window>
 800fab0:	4603      	mov	r3, r0
 800fab2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fab4:	7ffb      	ldrb	r3, [r7, #31]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f040 80d4 	bne.w	800fc64 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	1c5a      	adds	r2, r3, #1
 800fac6:	61ba      	str	r2, [r7, #24]
 800fac8:	68fa      	ldr	r2, [r7, #12]
 800faca:	8992      	ldrh	r2, [r2, #12]
 800facc:	fbb3 f0f2 	udiv	r0, r3, r2
 800fad0:	fb02 f200 	mul.w	r2, r2, r0
 800fad4:	1a9b      	subs	r3, r3, r2
 800fad6:	440b      	add	r3, r1
 800fad8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	f003 0301 	and.w	r3, r3, #1
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00d      	beq.n	800fb00 <put_fat+0xb2>
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	b25b      	sxtb	r3, r3
 800faea:	f003 030f 	and.w	r3, r3, #15
 800faee:	b25a      	sxtb	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	b2db      	uxtb	r3, r3
 800faf4:	011b      	lsls	r3, r3, #4
 800faf6:	b25b      	sxtb	r3, r3
 800faf8:	4313      	orrs	r3, r2
 800fafa:	b25b      	sxtb	r3, r3
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	e001      	b.n	800fb04 <put_fat+0xb6>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	899b      	ldrh	r3, [r3, #12]
 800fb16:	4619      	mov	r1, r3
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb1e:	4413      	add	r3, r2
 800fb20:	4619      	mov	r1, r3
 800fb22:	68f8      	ldr	r0, [r7, #12]
 800fb24:	f7ff fe06 	bl	800f734 <move_window>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fb2c:	7ffb      	ldrb	r3, [r7, #31]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f040 809a 	bne.w	800fc68 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	899b      	ldrh	r3, [r3, #12]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb46:	fb02 f200 	mul.w	r2, r2, r0
 800fb4a:	1a9b      	subs	r3, r3, r2
 800fb4c:	440b      	add	r3, r1
 800fb4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fb50:	68bb      	ldr	r3, [r7, #8]
 800fb52:	f003 0301 	and.w	r3, r3, #1
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d003      	beq.n	800fb62 <put_fat+0x114>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	091b      	lsrs	r3, r3, #4
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	e00e      	b.n	800fb80 <put_fat+0x132>
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	b25b      	sxtb	r3, r3
 800fb68:	f023 030f 	bic.w	r3, r3, #15
 800fb6c:	b25a      	sxtb	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	0a1b      	lsrs	r3, r3, #8
 800fb72:	b25b      	sxtb	r3, r3
 800fb74:	f003 030f 	and.w	r3, r3, #15
 800fb78:	b25b      	sxtb	r3, r3
 800fb7a:	4313      	orrs	r3, r2
 800fb7c:	b25b      	sxtb	r3, r3
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2201      	movs	r2, #1
 800fb88:	70da      	strb	r2, [r3, #3]
			break;
 800fb8a:	e072      	b.n	800fc72 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	899b      	ldrh	r3, [r3, #12]
 800fb94:	085b      	lsrs	r3, r3, #1
 800fb96:	b29b      	uxth	r3, r3
 800fb98:	4619      	mov	r1, r3
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	fbb3 f3f1 	udiv	r3, r3, r1
 800fba0:	4413      	add	r3, r2
 800fba2:	4619      	mov	r1, r3
 800fba4:	68f8      	ldr	r0, [r7, #12]
 800fba6:	f7ff fdc5 	bl	800f734 <move_window>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fbae:	7ffb      	ldrb	r3, [r7, #31]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d15b      	bne.n	800fc6c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	005b      	lsls	r3, r3, #1
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	8992      	ldrh	r2, [r2, #12]
 800fbc2:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbc6:	fb02 f200 	mul.w	r2, r2, r0
 800fbca:	1a9b      	subs	r3, r3, r2
 800fbcc:	440b      	add	r3, r1
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	b292      	uxth	r2, r2
 800fbd2:	4611      	mov	r1, r2
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7ff fb38 	bl	800f24a <st_word>
			fs->wflag = 1;
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2201      	movs	r2, #1
 800fbde:	70da      	strb	r2, [r3, #3]
			break;
 800fbe0:	e047      	b.n	800fc72 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	899b      	ldrh	r3, [r3, #12]
 800fbea:	089b      	lsrs	r3, r3, #2
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	4619      	mov	r1, r3
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbf6:	4413      	add	r3, r2
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff fd9a 	bl	800f734 <move_window>
 800fc00:	4603      	mov	r3, r0
 800fc02:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fc04:	7ffb      	ldrb	r3, [r7, #31]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d132      	bne.n	800fc70 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	68fa      	ldr	r2, [r7, #12]
 800fc1c:	8992      	ldrh	r2, [r2, #12]
 800fc1e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc22:	fb02 f200 	mul.w	r2, r2, r0
 800fc26:	1a9b      	subs	r3, r3, r2
 800fc28:	440b      	add	r3, r1
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7ff faea 	bl	800f204 <ld_dword>
 800fc30:	4603      	mov	r3, r0
 800fc32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fc36:	4323      	orrs	r3, r4
 800fc38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	8992      	ldrh	r2, [r2, #12]
 800fc48:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc4c:	fb02 f200 	mul.w	r2, r2, r0
 800fc50:	1a9b      	subs	r3, r3, r2
 800fc52:	440b      	add	r3, r1
 800fc54:	6879      	ldr	r1, [r7, #4]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7ff fb12 	bl	800f280 <st_dword>
			fs->wflag = 1;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2201      	movs	r2, #1
 800fc60:	70da      	strb	r2, [r3, #3]
			break;
 800fc62:	e006      	b.n	800fc72 <put_fat+0x224>
			if (res != FR_OK) break;
 800fc64:	bf00      	nop
 800fc66:	e004      	b.n	800fc72 <put_fat+0x224>
			if (res != FR_OK) break;
 800fc68:	bf00      	nop
 800fc6a:	e002      	b.n	800fc72 <put_fat+0x224>
			if (res != FR_OK) break;
 800fc6c:	bf00      	nop
 800fc6e:	e000      	b.n	800fc72 <put_fat+0x224>
			if (res != FR_OK) break;
 800fc70:	bf00      	nop
		}
	}
	return res;
 800fc72:	7ffb      	ldrb	r3, [r7, #31]
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3724      	adds	r7, #36	; 0x24
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd90      	pop	{r4, r7, pc}

0800fc7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b088      	sub	sp, #32
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60f8      	str	r0, [r7, #12]
 800fc84:	60b9      	str	r1, [r7, #8]
 800fc86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d904      	bls.n	800fca2 <remove_chain+0x26>
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	69db      	ldr	r3, [r3, #28]
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d301      	bcc.n	800fca6 <remove_chain+0x2a>
 800fca2:	2302      	movs	r3, #2
 800fca4:	e04b      	b.n	800fd3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00c      	beq.n	800fcc6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fcac:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb0:	6879      	ldr	r1, [r7, #4]
 800fcb2:	69b8      	ldr	r0, [r7, #24]
 800fcb4:	f7ff fecb 	bl	800fa4e <put_fat>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fcbc:	7ffb      	ldrb	r3, [r7, #31]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <remove_chain+0x4a>
 800fcc2:	7ffb      	ldrb	r3, [r7, #31]
 800fcc4:	e03b      	b.n	800fd3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fcc6:	68b9      	ldr	r1, [r7, #8]
 800fcc8:	68f8      	ldr	r0, [r7, #12]
 800fcca:	f7ff fdf0 	bl	800f8ae <get_fat>
 800fcce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d031      	beq.n	800fd3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d101      	bne.n	800fce0 <remove_chain+0x64>
 800fcdc:	2302      	movs	r3, #2
 800fcde:	e02e      	b.n	800fd3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fce6:	d101      	bne.n	800fcec <remove_chain+0x70>
 800fce8:	2301      	movs	r3, #1
 800fcea:	e028      	b.n	800fd3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fcec:	2200      	movs	r2, #0
 800fcee:	68b9      	ldr	r1, [r7, #8]
 800fcf0:	69b8      	ldr	r0, [r7, #24]
 800fcf2:	f7ff feac 	bl	800fa4e <put_fat>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fcfa:	7ffb      	ldrb	r3, [r7, #31]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d001      	beq.n	800fd04 <remove_chain+0x88>
 800fd00:	7ffb      	ldrb	r3, [r7, #31]
 800fd02:	e01c      	b.n	800fd3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	695a      	ldr	r2, [r3, #20]
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	69db      	ldr	r3, [r3, #28]
 800fd0c:	3b02      	subs	r3, #2
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d20b      	bcs.n	800fd2a <remove_chain+0xae>
			fs->free_clst++;
 800fd12:	69bb      	ldr	r3, [r7, #24]
 800fd14:	695b      	ldr	r3, [r3, #20]
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fd1c:	69bb      	ldr	r3, [r7, #24]
 800fd1e:	791b      	ldrb	r3, [r3, #4]
 800fd20:	f043 0301 	orr.w	r3, r3, #1
 800fd24:	b2da      	uxtb	r2, r3
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	69db      	ldr	r3, [r3, #28]
 800fd32:	68ba      	ldr	r2, [r7, #8]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d3c6      	bcc.n	800fcc6 <remove_chain+0x4a>
 800fd38:	e000      	b.n	800fd3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fd3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fd3c:	2300      	movs	r3, #0
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3720      	adds	r7, #32
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}

0800fd46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	b088      	sub	sp, #32
 800fd4a:	af00      	add	r7, sp, #0
 800fd4c:	6078      	str	r0, [r7, #4]
 800fd4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10d      	bne.n	800fd78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	691b      	ldr	r3, [r3, #16]
 800fd60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d004      	beq.n	800fd72 <create_chain+0x2c>
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	69db      	ldr	r3, [r3, #28]
 800fd6c:	69ba      	ldr	r2, [r7, #24]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d31b      	bcc.n	800fdaa <create_chain+0x64>
 800fd72:	2301      	movs	r3, #1
 800fd74:	61bb      	str	r3, [r7, #24]
 800fd76:	e018      	b.n	800fdaa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fd78:	6839      	ldr	r1, [r7, #0]
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f7ff fd97 	bl	800f8ae <get_fat>
 800fd80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d801      	bhi.n	800fd8c <create_chain+0x46>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e070      	b.n	800fe6e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd92:	d101      	bne.n	800fd98 <create_chain+0x52>
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	e06a      	b.n	800fe6e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	429a      	cmp	r2, r3
 800fda0:	d201      	bcs.n	800fda6 <create_chain+0x60>
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	e063      	b.n	800fe6e <create_chain+0x128>
		scl = clst;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fdaa:	69bb      	ldr	r3, [r7, #24]
 800fdac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	69db      	ldr	r3, [r3, #28]
 800fdb8:	69fa      	ldr	r2, [r7, #28]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d307      	bcc.n	800fdce <create_chain+0x88>
				ncl = 2;
 800fdbe:	2302      	movs	r3, #2
 800fdc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fdc2:	69fa      	ldr	r2, [r7, #28]
 800fdc4:	69bb      	ldr	r3, [r7, #24]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d901      	bls.n	800fdce <create_chain+0x88>
 800fdca:	2300      	movs	r3, #0
 800fdcc:	e04f      	b.n	800fe6e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fdce:	69f9      	ldr	r1, [r7, #28]
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f7ff fd6c 	bl	800f8ae <get_fat>
 800fdd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d00e      	beq.n	800fdfc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d003      	beq.n	800fdec <create_chain+0xa6>
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdea:	d101      	bne.n	800fdf0 <create_chain+0xaa>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	e03e      	b.n	800fe6e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fdf0:	69fa      	ldr	r2, [r7, #28]
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d1da      	bne.n	800fdae <create_chain+0x68>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	e038      	b.n	800fe6e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fdfc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800fe02:	69f9      	ldr	r1, [r7, #28]
 800fe04:	6938      	ldr	r0, [r7, #16]
 800fe06:	f7ff fe22 	bl	800fa4e <put_fat>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fe0e:	7dfb      	ldrb	r3, [r7, #23]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d109      	bne.n	800fe28 <create_chain+0xe2>
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d006      	beq.n	800fe28 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fe1a:	69fa      	ldr	r2, [r7, #28]
 800fe1c:	6839      	ldr	r1, [r7, #0]
 800fe1e:	6938      	ldr	r0, [r7, #16]
 800fe20:	f7ff fe15 	bl	800fa4e <put_fat>
 800fe24:	4603      	mov	r3, r0
 800fe26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fe28:	7dfb      	ldrb	r3, [r7, #23]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d116      	bne.n	800fe5c <create_chain+0x116>
		fs->last_clst = ncl;
 800fe2e:	693b      	ldr	r3, [r7, #16]
 800fe30:	69fa      	ldr	r2, [r7, #28]
 800fe32:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	695a      	ldr	r2, [r3, #20]
 800fe38:	693b      	ldr	r3, [r7, #16]
 800fe3a:	69db      	ldr	r3, [r3, #28]
 800fe3c:	3b02      	subs	r3, #2
 800fe3e:	429a      	cmp	r2, r3
 800fe40:	d804      	bhi.n	800fe4c <create_chain+0x106>
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	695b      	ldr	r3, [r3, #20]
 800fe46:	1e5a      	subs	r2, r3, #1
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	791b      	ldrb	r3, [r3, #4]
 800fe50:	f043 0301 	orr.w	r3, r3, #1
 800fe54:	b2da      	uxtb	r2, r3
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	711a      	strb	r2, [r3, #4]
 800fe5a:	e007      	b.n	800fe6c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fe5c:	7dfb      	ldrb	r3, [r7, #23]
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d102      	bne.n	800fe68 <create_chain+0x122>
 800fe62:	f04f 33ff 	mov.w	r3, #4294967295
 800fe66:	e000      	b.n	800fe6a <create_chain+0x124>
 800fe68:	2301      	movs	r3, #1
 800fe6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fe6c:	69fb      	ldr	r3, [r7, #28]
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3720      	adds	r7, #32
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}

0800fe76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fe76:	b480      	push	{r7}
 800fe78:	b087      	sub	sp, #28
 800fe7a:	af00      	add	r7, sp, #0
 800fe7c:	6078      	str	r0, [r7, #4]
 800fe7e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe8a:	3304      	adds	r3, #4
 800fe8c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	899b      	ldrh	r3, [r3, #12]
 800fe92:	461a      	mov	r2, r3
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	8952      	ldrh	r2, [r2, #10]
 800fe9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fea2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	1d1a      	adds	r2, r3, #4
 800fea8:	613a      	str	r2, [r7, #16]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <clmt_clust+0x42>
 800feb4:	2300      	movs	r3, #0
 800feb6:	e010      	b.n	800feda <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800feb8:	697a      	ldr	r2, [r7, #20]
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	429a      	cmp	r2, r3
 800febe:	d307      	bcc.n	800fed0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fec0:	697a      	ldr	r2, [r7, #20]
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	1ad3      	subs	r3, r2, r3
 800fec6:	617b      	str	r3, [r7, #20]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	3304      	adds	r3, #4
 800fecc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fece:	e7e9      	b.n	800fea4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fed0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fed2:	693b      	ldr	r3, [r7, #16]
 800fed4:	681a      	ldr	r2, [r3, #0]
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	4413      	add	r3, r2
}
 800feda:	4618      	mov	r0, r3
 800fedc:	371c      	adds	r7, #28
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr

0800fee6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b086      	sub	sp, #24
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fefc:	d204      	bcs.n	800ff08 <dir_sdi+0x22>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	f003 031f 	and.w	r3, r3, #31
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d001      	beq.n	800ff0c <dir_sdi+0x26>
		return FR_INT_ERR;
 800ff08:	2302      	movs	r3, #2
 800ff0a:	e071      	b.n	800fff0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	683a      	ldr	r2, [r7, #0]
 800ff10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d106      	bne.n	800ff2c <dir_sdi+0x46>
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	2b02      	cmp	r3, #2
 800ff24:	d902      	bls.n	800ff2c <dir_sdi+0x46>
		clst = fs->dirbase;
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d10c      	bne.n	800ff4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	095b      	lsrs	r3, r3, #5
 800ff36:	693a      	ldr	r2, [r7, #16]
 800ff38:	8912      	ldrh	r2, [r2, #8]
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	d301      	bcc.n	800ff42 <dir_sdi+0x5c>
 800ff3e:	2302      	movs	r3, #2
 800ff40:	e056      	b.n	800fff0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	61da      	str	r2, [r3, #28]
 800ff4a:	e02d      	b.n	800ffa8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	895b      	ldrh	r3, [r3, #10]
 800ff50:	461a      	mov	r2, r3
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	899b      	ldrh	r3, [r3, #12]
 800ff56:	fb03 f302 	mul.w	r3, r3, r2
 800ff5a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff5c:	e019      	b.n	800ff92 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6979      	ldr	r1, [r7, #20]
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7ff fca3 	bl	800f8ae <get_fat>
 800ff68:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff70:	d101      	bne.n	800ff76 <dir_sdi+0x90>
 800ff72:	2301      	movs	r3, #1
 800ff74:	e03c      	b.n	800fff0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2b01      	cmp	r3, #1
 800ff7a:	d904      	bls.n	800ff86 <dir_sdi+0xa0>
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	69db      	ldr	r3, [r3, #28]
 800ff80:	697a      	ldr	r2, [r7, #20]
 800ff82:	429a      	cmp	r2, r3
 800ff84:	d301      	bcc.n	800ff8a <dir_sdi+0xa4>
 800ff86:	2302      	movs	r3, #2
 800ff88:	e032      	b.n	800fff0 <dir_sdi+0x10a>
			ofs -= csz;
 800ff8a:	683a      	ldr	r2, [r7, #0]
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	1ad3      	subs	r3, r2, r3
 800ff90:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ff92:	683a      	ldr	r2, [r7, #0]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d2e1      	bcs.n	800ff5e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ff9a:	6979      	ldr	r1, [r7, #20]
 800ff9c:	6938      	ldr	r0, [r7, #16]
 800ff9e:	f7ff fc67 	bl	800f870 <clust2sect>
 800ffa2:	4602      	mov	r2, r0
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	697a      	ldr	r2, [r7, #20]
 800ffac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	69db      	ldr	r3, [r3, #28]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <dir_sdi+0xd4>
 800ffb6:	2302      	movs	r3, #2
 800ffb8:	e01a      	b.n	800fff0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	69da      	ldr	r2, [r3, #28]
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	899b      	ldrh	r3, [r3, #12]
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffca:	441a      	add	r2, r3
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	899b      	ldrh	r3, [r3, #12]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	fbb3 f0f2 	udiv	r0, r3, r2
 800ffe2:	fb02 f200 	mul.w	r2, r2, r0
 800ffe6:	1a9b      	subs	r3, r3, r2
 800ffe8:	18ca      	adds	r2, r1, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3718      	adds	r7, #24
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b086      	sub	sp, #24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	695b      	ldr	r3, [r3, #20]
 801000c:	3320      	adds	r3, #32
 801000e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	69db      	ldr	r3, [r3, #28]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d003      	beq.n	8010020 <dir_next+0x28>
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801001e:	d301      	bcc.n	8010024 <dir_next+0x2c>
 8010020:	2304      	movs	r3, #4
 8010022:	e0bb      	b.n	801019c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	899b      	ldrh	r3, [r3, #12]
 8010028:	461a      	mov	r2, r3
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010030:	fb02 f201 	mul.w	r2, r2, r1
 8010034:	1a9b      	subs	r3, r3, r2
 8010036:	2b00      	cmp	r3, #0
 8010038:	f040 809d 	bne.w	8010176 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	69db      	ldr	r3, [r3, #28]
 8010040:	1c5a      	adds	r2, r3, #1
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	699b      	ldr	r3, [r3, #24]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d10b      	bne.n	8010066 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	095b      	lsrs	r3, r3, #5
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	8912      	ldrh	r2, [r2, #8]
 8010056:	4293      	cmp	r3, r2
 8010058:	f0c0 808d 	bcc.w	8010176 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	2200      	movs	r2, #0
 8010060:	61da      	str	r2, [r3, #28]
 8010062:	2304      	movs	r3, #4
 8010064:	e09a      	b.n	801019c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	899b      	ldrh	r3, [r3, #12]
 801006a:	461a      	mov	r2, r3
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	8952      	ldrh	r2, [r2, #10]
 8010076:	3a01      	subs	r2, #1
 8010078:	4013      	ands	r3, r2
 801007a:	2b00      	cmp	r3, #0
 801007c:	d17b      	bne.n	8010176 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801007e:	687a      	ldr	r2, [r7, #4]
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	4619      	mov	r1, r3
 8010086:	4610      	mov	r0, r2
 8010088:	f7ff fc11 	bl	800f8ae <get_fat>
 801008c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d801      	bhi.n	8010098 <dir_next+0xa0>
 8010094:	2302      	movs	r3, #2
 8010096:	e081      	b.n	801019c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801009e:	d101      	bne.n	80100a4 <dir_next+0xac>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e07b      	b.n	801019c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	69db      	ldr	r3, [r3, #28]
 80100a8:	697a      	ldr	r2, [r7, #20]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d359      	bcc.n	8010162 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d104      	bne.n	80100be <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	61da      	str	r2, [r3, #28]
 80100ba:	2304      	movs	r3, #4
 80100bc:	e06e      	b.n	801019c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	699b      	ldr	r3, [r3, #24]
 80100c4:	4619      	mov	r1, r3
 80100c6:	4610      	mov	r0, r2
 80100c8:	f7ff fe3d 	bl	800fd46 <create_chain>
 80100cc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d101      	bne.n	80100d8 <dir_next+0xe0>
 80100d4:	2307      	movs	r3, #7
 80100d6:	e061      	b.n	801019c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d101      	bne.n	80100e2 <dir_next+0xea>
 80100de:	2302      	movs	r3, #2
 80100e0:	e05c      	b.n	801019c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80100e2:	697b      	ldr	r3, [r7, #20]
 80100e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100e8:	d101      	bne.n	80100ee <dir_next+0xf6>
 80100ea:	2301      	movs	r3, #1
 80100ec:	e056      	b.n	801019c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80100ee:	68f8      	ldr	r0, [r7, #12]
 80100f0:	f7ff fadc 	bl	800f6ac <sync_window>
 80100f4:	4603      	mov	r3, r0
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d001      	beq.n	80100fe <dir_next+0x106>
 80100fa:	2301      	movs	r3, #1
 80100fc:	e04e      	b.n	801019c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	461a      	mov	r2, r3
 801010a:	2100      	movs	r1, #0
 801010c:	f7ff f905 	bl	800f31a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010110:	2300      	movs	r3, #0
 8010112:	613b      	str	r3, [r7, #16]
 8010114:	6979      	ldr	r1, [r7, #20]
 8010116:	68f8      	ldr	r0, [r7, #12]
 8010118:	f7ff fbaa 	bl	800f870 <clust2sect>
 801011c:	4602      	mov	r2, r0
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	635a      	str	r2, [r3, #52]	; 0x34
 8010122:	e012      	b.n	801014a <dir_next+0x152>
						fs->wflag = 1;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2201      	movs	r2, #1
 8010128:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801012a:	68f8      	ldr	r0, [r7, #12]
 801012c:	f7ff fabe 	bl	800f6ac <sync_window>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	d001      	beq.n	801013a <dir_next+0x142>
 8010136:	2301      	movs	r3, #1
 8010138:	e030      	b.n	801019c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	3301      	adds	r3, #1
 801013e:	613b      	str	r3, [r7, #16]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	635a      	str	r2, [r3, #52]	; 0x34
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	895b      	ldrh	r3, [r3, #10]
 801014e:	461a      	mov	r2, r3
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	4293      	cmp	r3, r2
 8010154:	d3e6      	bcc.n	8010124 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	1ad2      	subs	r2, r2, r3
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	697a      	ldr	r2, [r7, #20]
 8010166:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010168:	6979      	ldr	r1, [r7, #20]
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	f7ff fb80 	bl	800f870 <clust2sect>
 8010170:	4602      	mov	r2, r0
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	899b      	ldrh	r3, [r3, #12]
 8010186:	461a      	mov	r2, r3
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	fbb3 f0f2 	udiv	r0, r3, r2
 801018e:	fb02 f200 	mul.w	r2, r2, r0
 8010192:	1a9b      	subs	r3, r3, r2
 8010194:	18ca      	adds	r2, r1, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3718      	adds	r7, #24
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}

080101a4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b086      	sub	sp, #24
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80101b4:	2100      	movs	r1, #0
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f7ff fe95 	bl	800fee6 <dir_sdi>
 80101bc:	4603      	mov	r3, r0
 80101be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d12b      	bne.n	801021e <dir_alloc+0x7a>
		n = 0;
 80101c6:	2300      	movs	r3, #0
 80101c8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	69db      	ldr	r3, [r3, #28]
 80101ce:	4619      	mov	r1, r3
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f7ff faaf 	bl	800f734 <move_window>
 80101d6:	4603      	mov	r3, r0
 80101d8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80101da:	7dfb      	ldrb	r3, [r7, #23]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d11d      	bne.n	801021c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6a1b      	ldr	r3, [r3, #32]
 80101e4:	781b      	ldrb	r3, [r3, #0]
 80101e6:	2be5      	cmp	r3, #229	; 0xe5
 80101e8:	d004      	beq.n	80101f4 <dir_alloc+0x50>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6a1b      	ldr	r3, [r3, #32]
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d107      	bne.n	8010204 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	3301      	adds	r3, #1
 80101f8:	613b      	str	r3, [r7, #16]
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	429a      	cmp	r2, r3
 8010200:	d102      	bne.n	8010208 <dir_alloc+0x64>
 8010202:	e00c      	b.n	801021e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010204:	2300      	movs	r3, #0
 8010206:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010208:	2101      	movs	r1, #1
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7ff fef4 	bl	800fff8 <dir_next>
 8010210:	4603      	mov	r3, r0
 8010212:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010214:	7dfb      	ldrb	r3, [r7, #23]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d0d7      	beq.n	80101ca <dir_alloc+0x26>
 801021a:	e000      	b.n	801021e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801021c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801021e:	7dfb      	ldrb	r3, [r7, #23]
 8010220:	2b04      	cmp	r3, #4
 8010222:	d101      	bne.n	8010228 <dir_alloc+0x84>
 8010224:	2307      	movs	r3, #7
 8010226:	75fb      	strb	r3, [r7, #23]
	return res;
 8010228:	7dfb      	ldrb	r3, [r7, #23]
}
 801022a:	4618      	mov	r0, r3
 801022c:	3718      	adds	r7, #24
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010232:	b580      	push	{r7, lr}
 8010234:	b084      	sub	sp, #16
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
 801023a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	331a      	adds	r3, #26
 8010240:	4618      	mov	r0, r3
 8010242:	f7fe ffc7 	bl	800f1d4 <ld_word>
 8010246:	4603      	mov	r3, r0
 8010248:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	2b03      	cmp	r3, #3
 8010250:	d109      	bne.n	8010266 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	3314      	adds	r3, #20
 8010256:	4618      	mov	r0, r3
 8010258:	f7fe ffbc 	bl	800f1d4 <ld_word>
 801025c:	4603      	mov	r3, r0
 801025e:	041b      	lsls	r3, r3, #16
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	4313      	orrs	r3, r2
 8010264:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010266:	68fb      	ldr	r3, [r7, #12]
}
 8010268:	4618      	mov	r0, r3
 801026a:	3710      	adds	r7, #16
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}

08010270 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	60b9      	str	r1, [r7, #8]
 801027a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	331a      	adds	r3, #26
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	b292      	uxth	r2, r2
 8010284:	4611      	mov	r1, r2
 8010286:	4618      	mov	r0, r3
 8010288:	f7fe ffdf 	bl	800f24a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b03      	cmp	r3, #3
 8010292:	d109      	bne.n	80102a8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	f103 0214 	add.w	r2, r3, #20
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	0c1b      	lsrs	r3, r3, #16
 801029e:	b29b      	uxth	r3, r3
 80102a0:	4619      	mov	r1, r3
 80102a2:	4610      	mov	r0, r2
 80102a4:	f7fe ffd1 	bl	800f24a <st_word>
	}
}
 80102a8:	bf00      	nop
 80102aa:	3710      	adds	r7, #16
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b086      	sub	sp, #24
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80102ba:	2304      	movs	r3, #4
 80102bc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80102c4:	e03c      	b.n	8010340 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	69db      	ldr	r3, [r3, #28]
 80102ca:	4619      	mov	r1, r3
 80102cc:	6938      	ldr	r0, [r7, #16]
 80102ce:	f7ff fa31 	bl	800f734 <move_window>
 80102d2:	4603      	mov	r3, r0
 80102d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d136      	bne.n	801034a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6a1b      	ldr	r3, [r3, #32]
 80102e0:	781b      	ldrb	r3, [r3, #0]
 80102e2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80102e4:	7bfb      	ldrb	r3, [r7, #15]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d102      	bne.n	80102f0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80102ea:	2304      	movs	r3, #4
 80102ec:	75fb      	strb	r3, [r7, #23]
 80102ee:	e031      	b.n	8010354 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6a1b      	ldr	r3, [r3, #32]
 80102f4:	330b      	adds	r3, #11
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102fc:	73bb      	strb	r3, [r7, #14]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	7bba      	ldrb	r2, [r7, #14]
 8010302:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010304:	7bfb      	ldrb	r3, [r7, #15]
 8010306:	2be5      	cmp	r3, #229	; 0xe5
 8010308:	d011      	beq.n	801032e <dir_read+0x7e>
 801030a:	7bfb      	ldrb	r3, [r7, #15]
 801030c:	2b2e      	cmp	r3, #46	; 0x2e
 801030e:	d00e      	beq.n	801032e <dir_read+0x7e>
 8010310:	7bbb      	ldrb	r3, [r7, #14]
 8010312:	2b0f      	cmp	r3, #15
 8010314:	d00b      	beq.n	801032e <dir_read+0x7e>
 8010316:	7bbb      	ldrb	r3, [r7, #14]
 8010318:	f023 0320 	bic.w	r3, r3, #32
 801031c:	2b08      	cmp	r3, #8
 801031e:	bf0c      	ite	eq
 8010320:	2301      	moveq	r3, #1
 8010322:	2300      	movne	r3, #0
 8010324:	b2db      	uxtb	r3, r3
 8010326:	461a      	mov	r2, r3
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	4293      	cmp	r3, r2
 801032c:	d00f      	beq.n	801034e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801032e:	2100      	movs	r1, #0
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f7ff fe61 	bl	800fff8 <dir_next>
 8010336:	4603      	mov	r3, r0
 8010338:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801033a:	7dfb      	ldrb	r3, [r7, #23]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d108      	bne.n	8010352 <dir_read+0xa2>
	while (dp->sect) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	69db      	ldr	r3, [r3, #28]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d1be      	bne.n	80102c6 <dir_read+0x16>
 8010348:	e004      	b.n	8010354 <dir_read+0xa4>
		if (res != FR_OK) break;
 801034a:	bf00      	nop
 801034c:	e002      	b.n	8010354 <dir_read+0xa4>
				break;
 801034e:	bf00      	nop
 8010350:	e000      	b.n	8010354 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010352:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010354:	7dfb      	ldrb	r3, [r7, #23]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <dir_read+0xb0>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	61da      	str	r2, [r3, #28]
	return res;
 8010360:	7dfb      	ldrb	r3, [r7, #23]
}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b086      	sub	sp, #24
 801036e:	af00      	add	r7, sp, #0
 8010370:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010378:	2100      	movs	r1, #0
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7ff fdb3 	bl	800fee6 <dir_sdi>
 8010380:	4603      	mov	r3, r0
 8010382:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010384:	7dfb      	ldrb	r3, [r7, #23]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <dir_find+0x24>
 801038a:	7dfb      	ldrb	r3, [r7, #23]
 801038c:	e03e      	b.n	801040c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	69db      	ldr	r3, [r3, #28]
 8010392:	4619      	mov	r1, r3
 8010394:	6938      	ldr	r0, [r7, #16]
 8010396:	f7ff f9cd 	bl	800f734 <move_window>
 801039a:	4603      	mov	r3, r0
 801039c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801039e:	7dfb      	ldrb	r3, [r7, #23]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d12f      	bne.n	8010404 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6a1b      	ldr	r3, [r3, #32]
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80103ac:	7bfb      	ldrb	r3, [r7, #15]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d102      	bne.n	80103b8 <dir_find+0x4e>
 80103b2:	2304      	movs	r3, #4
 80103b4:	75fb      	strb	r3, [r7, #23]
 80103b6:	e028      	b.n	801040a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6a1b      	ldr	r3, [r3, #32]
 80103bc:	330b      	adds	r3, #11
 80103be:	781b      	ldrb	r3, [r3, #0]
 80103c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	330b      	adds	r3, #11
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	f003 0308 	and.w	r3, r3, #8
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10a      	bne.n	80103f0 <dir_find+0x86>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a18      	ldr	r0, [r3, #32]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	3324      	adds	r3, #36	; 0x24
 80103e2:	220b      	movs	r2, #11
 80103e4:	4619      	mov	r1, r3
 80103e6:	f7fe ffb2 	bl	800f34e <mem_cmp>
 80103ea:	4603      	mov	r3, r0
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00b      	beq.n	8010408 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80103f0:	2100      	movs	r1, #0
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7ff fe00 	bl	800fff8 <dir_next>
 80103f8:	4603      	mov	r3, r0
 80103fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80103fc:	7dfb      	ldrb	r3, [r7, #23]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d0c5      	beq.n	801038e <dir_find+0x24>
 8010402:	e002      	b.n	801040a <dir_find+0xa0>
		if (res != FR_OK) break;
 8010404:	bf00      	nop
 8010406:	e000      	b.n	801040a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010408:	bf00      	nop

	return res;
 801040a:	7dfb      	ldrb	r3, [r7, #23]
}
 801040c:	4618      	mov	r0, r3
 801040e:	3718      	adds	r7, #24
 8010410:	46bd      	mov	sp, r7
 8010412:	bd80      	pop	{r7, pc}

08010414 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010422:	2101      	movs	r1, #1
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff febd 	bl	80101a4 <dir_alloc>
 801042a:	4603      	mov	r3, r0
 801042c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801042e:	7bfb      	ldrb	r3, [r7, #15]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d11c      	bne.n	801046e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	69db      	ldr	r3, [r3, #28]
 8010438:	4619      	mov	r1, r3
 801043a:	68b8      	ldr	r0, [r7, #8]
 801043c:	f7ff f97a 	bl	800f734 <move_window>
 8010440:	4603      	mov	r3, r0
 8010442:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010444:	7bfb      	ldrb	r3, [r7, #15]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d111      	bne.n	801046e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6a1b      	ldr	r3, [r3, #32]
 801044e:	2220      	movs	r2, #32
 8010450:	2100      	movs	r1, #0
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe ff61 	bl	800f31a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6a18      	ldr	r0, [r3, #32]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	3324      	adds	r3, #36	; 0x24
 8010460:	220b      	movs	r2, #11
 8010462:	4619      	mov	r1, r3
 8010464:	f7fe ff38 	bl	800f2d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	2201      	movs	r2, #1
 801046c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801046e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010470:	4618      	mov	r0, r3
 8010472:	3710      	adds	r7, #16
 8010474:	46bd      	mov	sp, r7
 8010476:	bd80      	pop	{r7, pc}

08010478 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	69db      	ldr	r3, [r3, #28]
 801048a:	4619      	mov	r1, r3
 801048c:	68f8      	ldr	r0, [r7, #12]
 801048e:	f7ff f951 	bl	800f734 <move_window>
 8010492:	4603      	mov	r3, r0
 8010494:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010496:	7afb      	ldrb	r3, [r7, #11]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d106      	bne.n	80104aa <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a1b      	ldr	r3, [r3, #32]
 80104a0:	22e5      	movs	r2, #229	; 0xe5
 80104a2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2201      	movs	r2, #1
 80104a8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80104aa:	7afb      	ldrb	r3, [r7, #11]
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3710      	adds	r7, #16
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}

080104b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b088      	sub	sp, #32
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	3324      	adds	r3, #36	; 0x24
 80104c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80104ca:	220b      	movs	r2, #11
 80104cc:	2120      	movs	r1, #32
 80104ce:	68b8      	ldr	r0, [r7, #8]
 80104d0:	f7fe ff23 	bl	800f31a <mem_set>
	si = i = 0; ni = 8;
 80104d4:	2300      	movs	r3, #0
 80104d6:	613b      	str	r3, [r7, #16]
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	617b      	str	r3, [r7, #20]
 80104dc:	2308      	movs	r3, #8
 80104de:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80104e0:	68fa      	ldr	r2, [r7, #12]
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	4413      	add	r3, r2
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b2e      	cmp	r3, #46	; 0x2e
 80104ea:	d12f      	bne.n	801054c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	1c5a      	adds	r2, r3, #1
 80104f0:	617a      	str	r2, [r7, #20]
 80104f2:	68fa      	ldr	r2, [r7, #12]
 80104f4:	4413      	add	r3, r2
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80104fa:	7ffb      	ldrb	r3, [r7, #31]
 80104fc:	2b2e      	cmp	r3, #46	; 0x2e
 80104fe:	d10a      	bne.n	8010516 <create_name+0x62>
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2b02      	cmp	r3, #2
 8010504:	d807      	bhi.n	8010516 <create_name+0x62>
			sfn[i++] = c;
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	1c5a      	adds	r2, r3, #1
 801050a:	613a      	str	r2, [r7, #16]
 801050c:	68ba      	ldr	r2, [r7, #8]
 801050e:	4413      	add	r3, r2
 8010510:	7ffa      	ldrb	r2, [r7, #31]
 8010512:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010514:	e7ea      	b.n	80104ec <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010516:	7ffb      	ldrb	r3, [r7, #31]
 8010518:	2b2f      	cmp	r3, #47	; 0x2f
 801051a:	d007      	beq.n	801052c <create_name+0x78>
 801051c:	7ffb      	ldrb	r3, [r7, #31]
 801051e:	2b5c      	cmp	r3, #92	; 0x5c
 8010520:	d004      	beq.n	801052c <create_name+0x78>
 8010522:	7ffb      	ldrb	r3, [r7, #31]
 8010524:	2b20      	cmp	r3, #32
 8010526:	d901      	bls.n	801052c <create_name+0x78>
 8010528:	2306      	movs	r3, #6
 801052a:	e084      	b.n	8010636 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801052c:	68fa      	ldr	r2, [r7, #12]
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	441a      	add	r2, r3
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8010536:	7ffb      	ldrb	r3, [r7, #31]
 8010538:	2b20      	cmp	r3, #32
 801053a:	d801      	bhi.n	8010540 <create_name+0x8c>
 801053c:	2224      	movs	r2, #36	; 0x24
 801053e:	e000      	b.n	8010542 <create_name+0x8e>
 8010540:	2220      	movs	r2, #32
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	330b      	adds	r3, #11
 8010546:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	e074      	b.n	8010636 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	1c5a      	adds	r2, r3, #1
 8010550:	617a      	str	r2, [r7, #20]
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	4413      	add	r3, r2
 8010556:	781b      	ldrb	r3, [r3, #0]
 8010558:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801055a:	7ffb      	ldrb	r3, [r7, #31]
 801055c:	2b20      	cmp	r3, #32
 801055e:	d94e      	bls.n	80105fe <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010560:	7ffb      	ldrb	r3, [r7, #31]
 8010562:	2b2f      	cmp	r3, #47	; 0x2f
 8010564:	d006      	beq.n	8010574 <create_name+0xc0>
 8010566:	7ffb      	ldrb	r3, [r7, #31]
 8010568:	2b5c      	cmp	r3, #92	; 0x5c
 801056a:	d110      	bne.n	801058e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801056c:	e002      	b.n	8010574 <create_name+0xc0>
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	3301      	adds	r3, #1
 8010572:	617b      	str	r3, [r7, #20]
 8010574:	68fa      	ldr	r2, [r7, #12]
 8010576:	697b      	ldr	r3, [r7, #20]
 8010578:	4413      	add	r3, r2
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	2b2f      	cmp	r3, #47	; 0x2f
 801057e:	d0f6      	beq.n	801056e <create_name+0xba>
 8010580:	68fa      	ldr	r2, [r7, #12]
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	4413      	add	r3, r2
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	2b5c      	cmp	r3, #92	; 0x5c
 801058a:	d0f0      	beq.n	801056e <create_name+0xba>
			break;
 801058c:	e038      	b.n	8010600 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801058e:	7ffb      	ldrb	r3, [r7, #31]
 8010590:	2b2e      	cmp	r3, #46	; 0x2e
 8010592:	d003      	beq.n	801059c <create_name+0xe8>
 8010594:	693a      	ldr	r2, [r7, #16]
 8010596:	69bb      	ldr	r3, [r7, #24]
 8010598:	429a      	cmp	r2, r3
 801059a:	d30c      	bcc.n	80105b6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	2b0b      	cmp	r3, #11
 80105a0:	d002      	beq.n	80105a8 <create_name+0xf4>
 80105a2:	7ffb      	ldrb	r3, [r7, #31]
 80105a4:	2b2e      	cmp	r3, #46	; 0x2e
 80105a6:	d001      	beq.n	80105ac <create_name+0xf8>
 80105a8:	2306      	movs	r3, #6
 80105aa:	e044      	b.n	8010636 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80105ac:	2308      	movs	r3, #8
 80105ae:	613b      	str	r3, [r7, #16]
 80105b0:	230b      	movs	r3, #11
 80105b2:	61bb      	str	r3, [r7, #24]
			continue;
 80105b4:	e022      	b.n	80105fc <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80105b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	da04      	bge.n	80105c8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80105be:	7ffb      	ldrb	r3, [r7, #31]
 80105c0:	3b80      	subs	r3, #128	; 0x80
 80105c2:	4a1f      	ldr	r2, [pc, #124]	; (8010640 <create_name+0x18c>)
 80105c4:	5cd3      	ldrb	r3, [r2, r3]
 80105c6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80105c8:	7ffb      	ldrb	r3, [r7, #31]
 80105ca:	4619      	mov	r1, r3
 80105cc:	481d      	ldr	r0, [pc, #116]	; (8010644 <create_name+0x190>)
 80105ce:	f7fe fee5 	bl	800f39c <chk_chr>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <create_name+0x128>
 80105d8:	2306      	movs	r3, #6
 80105da:	e02c      	b.n	8010636 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80105dc:	7ffb      	ldrb	r3, [r7, #31]
 80105de:	2b60      	cmp	r3, #96	; 0x60
 80105e0:	d905      	bls.n	80105ee <create_name+0x13a>
 80105e2:	7ffb      	ldrb	r3, [r7, #31]
 80105e4:	2b7a      	cmp	r3, #122	; 0x7a
 80105e6:	d802      	bhi.n	80105ee <create_name+0x13a>
 80105e8:	7ffb      	ldrb	r3, [r7, #31]
 80105ea:	3b20      	subs	r3, #32
 80105ec:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	1c5a      	adds	r2, r3, #1
 80105f2:	613a      	str	r2, [r7, #16]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	4413      	add	r3, r2
 80105f8:	7ffa      	ldrb	r2, [r7, #31]
 80105fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80105fc:	e7a6      	b.n	801054c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80105fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010600:	68fa      	ldr	r2, [r7, #12]
 8010602:	697b      	ldr	r3, [r7, #20]
 8010604:	441a      	add	r2, r3
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801060a:	693b      	ldr	r3, [r7, #16]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d101      	bne.n	8010614 <create_name+0x160>
 8010610:	2306      	movs	r3, #6
 8010612:	e010      	b.n	8010636 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2be5      	cmp	r3, #229	; 0xe5
 801061a:	d102      	bne.n	8010622 <create_name+0x16e>
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2205      	movs	r2, #5
 8010620:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010622:	7ffb      	ldrb	r3, [r7, #31]
 8010624:	2b20      	cmp	r3, #32
 8010626:	d801      	bhi.n	801062c <create_name+0x178>
 8010628:	2204      	movs	r2, #4
 801062a:	e000      	b.n	801062e <create_name+0x17a>
 801062c:	2200      	movs	r2, #0
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	330b      	adds	r3, #11
 8010632:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010634:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010636:	4618      	mov	r0, r3
 8010638:	3720      	adds	r7, #32
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	08017d94 	.word	0x08017d94
 8010644:	08017d44 	.word	0x08017d44

08010648 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b086      	sub	sp, #24
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	781b      	ldrb	r3, [r3, #0]
 8010660:	2b2f      	cmp	r3, #47	; 0x2f
 8010662:	d00b      	beq.n	801067c <follow_path+0x34>
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	2b5c      	cmp	r3, #92	; 0x5c
 801066a:	d007      	beq.n	801067c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	699a      	ldr	r2, [r3, #24]
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	609a      	str	r2, [r3, #8]
 8010674:	e00d      	b.n	8010692 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	3301      	adds	r3, #1
 801067a:	603b      	str	r3, [r7, #0]
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b2f      	cmp	r3, #47	; 0x2f
 8010682:	d0f8      	beq.n	8010676 <follow_path+0x2e>
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2b5c      	cmp	r3, #92	; 0x5c
 801068a:	d0f4      	beq.n	8010676 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	2200      	movs	r2, #0
 8010690:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	781b      	ldrb	r3, [r3, #0]
 8010696:	2b1f      	cmp	r3, #31
 8010698:	d80a      	bhi.n	80106b0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2280      	movs	r2, #128	; 0x80
 801069e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80106a2:	2100      	movs	r1, #0
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7ff fc1e 	bl	800fee6 <dir_sdi>
 80106aa:	4603      	mov	r3, r0
 80106ac:	75fb      	strb	r3, [r7, #23]
 80106ae:	e05b      	b.n	8010768 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80106b0:	463b      	mov	r3, r7
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f7ff fefd 	bl	80104b4 <create_name>
 80106ba:	4603      	mov	r3, r0
 80106bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80106be:	7dfb      	ldrb	r3, [r7, #23]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d14c      	bne.n	801075e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7ff fe50 	bl	801036a <dir_find>
 80106ca:	4603      	mov	r3, r0
 80106cc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80106d4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80106d6:	7dfb      	ldrb	r3, [r7, #23]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d01b      	beq.n	8010714 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80106dc:	7dfb      	ldrb	r3, [r7, #23]
 80106de:	2b04      	cmp	r3, #4
 80106e0:	d13f      	bne.n	8010762 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80106e2:	7afb      	ldrb	r3, [r7, #11]
 80106e4:	f003 0320 	and.w	r3, r3, #32
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00b      	beq.n	8010704 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80106ec:	7afb      	ldrb	r3, [r7, #11]
 80106ee:	f003 0304 	and.w	r3, r3, #4
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d031      	beq.n	801075a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2280      	movs	r2, #128	; 0x80
 80106fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80106fe:	2300      	movs	r3, #0
 8010700:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8010702:	e02e      	b.n	8010762 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010704:	7afb      	ldrb	r3, [r7, #11]
 8010706:	f003 0304 	and.w	r3, r3, #4
 801070a:	2b00      	cmp	r3, #0
 801070c:	d129      	bne.n	8010762 <follow_path+0x11a>
 801070e:	2305      	movs	r3, #5
 8010710:	75fb      	strb	r3, [r7, #23]
				break;
 8010712:	e026      	b.n	8010762 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010714:	7afb      	ldrb	r3, [r7, #11]
 8010716:	f003 0304 	and.w	r3, r3, #4
 801071a:	2b00      	cmp	r3, #0
 801071c:	d123      	bne.n	8010766 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801071e:	693b      	ldr	r3, [r7, #16]
 8010720:	799b      	ldrb	r3, [r3, #6]
 8010722:	f003 0310 	and.w	r3, r3, #16
 8010726:	2b00      	cmp	r3, #0
 8010728:	d102      	bne.n	8010730 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801072a:	2305      	movs	r3, #5
 801072c:	75fb      	strb	r3, [r7, #23]
 801072e:	e01b      	b.n	8010768 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	695b      	ldr	r3, [r3, #20]
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	8992      	ldrh	r2, [r2, #12]
 801073e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010742:	fb02 f200 	mul.w	r2, r2, r0
 8010746:	1a9b      	subs	r3, r3, r2
 8010748:	440b      	add	r3, r1
 801074a:	4619      	mov	r1, r3
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f7ff fd70 	bl	8010232 <ld_clust>
 8010752:	4602      	mov	r2, r0
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	609a      	str	r2, [r3, #8]
 8010758:	e7aa      	b.n	80106b0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801075a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801075c:	e7a8      	b.n	80106b0 <follow_path+0x68>
			if (res != FR_OK) break;
 801075e:	bf00      	nop
 8010760:	e002      	b.n	8010768 <follow_path+0x120>
				break;
 8010762:	bf00      	nop
 8010764:	e000      	b.n	8010768 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010766:	bf00      	nop
			}
		}
	}

	return res;
 8010768:	7dfb      	ldrb	r3, [r7, #23]
}
 801076a:	4618      	mov	r0, r3
 801076c:	3718      	adds	r7, #24
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}

08010772 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010772:	b480      	push	{r7}
 8010774:	b087      	sub	sp, #28
 8010776:	af00      	add	r7, sp, #0
 8010778:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801077a:	f04f 33ff 	mov.w	r3, #4294967295
 801077e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d031      	beq.n	80107ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	617b      	str	r3, [r7, #20]
 801078e:	e002      	b.n	8010796 <get_ldnumber+0x24>
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	3301      	adds	r3, #1
 8010794:	617b      	str	r3, [r7, #20]
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	2b20      	cmp	r3, #32
 801079c:	d903      	bls.n	80107a6 <get_ldnumber+0x34>
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	2b3a      	cmp	r3, #58	; 0x3a
 80107a4:	d1f4      	bne.n	8010790 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	2b3a      	cmp	r3, #58	; 0x3a
 80107ac:	d11c      	bne.n	80107e8 <get_ldnumber+0x76>
			tp = *path;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	1c5a      	adds	r2, r3, #1
 80107b8:	60fa      	str	r2, [r7, #12]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	3b30      	subs	r3, #48	; 0x30
 80107be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b09      	cmp	r3, #9
 80107c4:	d80e      	bhi.n	80107e4 <get_ldnumber+0x72>
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d10a      	bne.n	80107e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d107      	bne.n	80107e4 <get_ldnumber+0x72>
					vol = (int)i;
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	3301      	adds	r3, #1
 80107dc:	617b      	str	r3, [r7, #20]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	697a      	ldr	r2, [r7, #20]
 80107e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	e002      	b.n	80107ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80107e8:	2300      	movs	r3, #0
 80107ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80107ec:	693b      	ldr	r3, [r7, #16]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	371c      	adds	r7, #28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f8:	4770      	bx	lr
	...

080107fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b082      	sub	sp, #8
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	70da      	strb	r2, [r3, #3]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f04f 32ff 	mov.w	r2, #4294967295
 8010812:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010814:	6839      	ldr	r1, [r7, #0]
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7fe ff8c 	bl	800f734 <move_window>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d001      	beq.n	8010826 <check_fs+0x2a>
 8010822:	2304      	movs	r3, #4
 8010824:	e038      	b.n	8010898 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	3338      	adds	r3, #56	; 0x38
 801082a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe fcd0 	bl	800f1d4 <ld_word>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801083c:	429a      	cmp	r2, r3
 801083e:	d001      	beq.n	8010844 <check_fs+0x48>
 8010840:	2303      	movs	r3, #3
 8010842:	e029      	b.n	8010898 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801084a:	2be9      	cmp	r3, #233	; 0xe9
 801084c:	d009      	beq.n	8010862 <check_fs+0x66>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010854:	2beb      	cmp	r3, #235	; 0xeb
 8010856:	d11e      	bne.n	8010896 <check_fs+0x9a>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801085e:	2b90      	cmp	r3, #144	; 0x90
 8010860:	d119      	bne.n	8010896 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	3338      	adds	r3, #56	; 0x38
 8010866:	3336      	adds	r3, #54	; 0x36
 8010868:	4618      	mov	r0, r3
 801086a:	f7fe fccb 	bl	800f204 <ld_dword>
 801086e:	4603      	mov	r3, r0
 8010870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010874:	4a0a      	ldr	r2, [pc, #40]	; (80108a0 <check_fs+0xa4>)
 8010876:	4293      	cmp	r3, r2
 8010878:	d101      	bne.n	801087e <check_fs+0x82>
 801087a:	2300      	movs	r3, #0
 801087c:	e00c      	b.n	8010898 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	3338      	adds	r3, #56	; 0x38
 8010882:	3352      	adds	r3, #82	; 0x52
 8010884:	4618      	mov	r0, r3
 8010886:	f7fe fcbd 	bl	800f204 <ld_dword>
 801088a:	4602      	mov	r2, r0
 801088c:	4b05      	ldr	r3, [pc, #20]	; (80108a4 <check_fs+0xa8>)
 801088e:	429a      	cmp	r2, r3
 8010890:	d101      	bne.n	8010896 <check_fs+0x9a>
 8010892:	2300      	movs	r3, #0
 8010894:	e000      	b.n	8010898 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010896:	2302      	movs	r3, #2
}
 8010898:	4618      	mov	r0, r3
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	00544146 	.word	0x00544146
 80108a4:	33544146 	.word	0x33544146

080108a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b096      	sub	sp, #88	; 0x58
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	4613      	mov	r3, r2
 80108b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	2200      	movs	r2, #0
 80108ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff ff58 	bl	8010772 <get_ldnumber>
 80108c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80108c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	da01      	bge.n	80108ce <find_volume+0x26>
 80108ca:	230b      	movs	r3, #11
 80108cc:	e268      	b.n	8010da0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80108ce:	4ab0      	ldr	r2, [pc, #704]	; (8010b90 <find_volume+0x2e8>)
 80108d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80108d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d101      	bne.n	80108e2 <find_volume+0x3a>
 80108de:	230c      	movs	r3, #12
 80108e0:	e25e      	b.n	8010da0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	f023 0301 	bic.w	r3, r3, #1
 80108ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80108f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d01a      	beq.n	801092e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80108f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fa:	785b      	ldrb	r3, [r3, #1]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fe fbcb 	bl	800f098 <disk_status>
 8010902:	4603      	mov	r3, r0
 8010904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801090c:	f003 0301 	and.w	r3, r3, #1
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10c      	bne.n	801092e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010914:	79fb      	ldrb	r3, [r7, #7]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d007      	beq.n	801092a <find_volume+0x82>
 801091a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801091e:	f003 0304 	and.w	r3, r3, #4
 8010922:	2b00      	cmp	r3, #0
 8010924:	d001      	beq.n	801092a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010926:	230a      	movs	r3, #10
 8010928:	e23a      	b.n	8010da0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801092a:	2300      	movs	r3, #0
 801092c:	e238      	b.n	8010da0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	2200      	movs	r2, #0
 8010932:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010936:	b2da      	uxtb	r2, r3
 8010938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801093c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093e:	785b      	ldrb	r3, [r3, #1]
 8010940:	4618      	mov	r0, r3
 8010942:	f7fe fbc3 	bl	800f0cc <disk_initialize>
 8010946:	4603      	mov	r3, r0
 8010948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801094c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010950:	f003 0301 	and.w	r3, r3, #1
 8010954:	2b00      	cmp	r3, #0
 8010956:	d001      	beq.n	801095c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010958:	2303      	movs	r3, #3
 801095a:	e221      	b.n	8010da0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801095c:	79fb      	ldrb	r3, [r7, #7]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d007      	beq.n	8010972 <find_volume+0xca>
 8010962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010966:	f003 0304 	and.w	r3, r3, #4
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801096e:	230a      	movs	r3, #10
 8010970:	e216      	b.n	8010da0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	7858      	ldrb	r0, [r3, #1]
 8010976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010978:	330c      	adds	r3, #12
 801097a:	461a      	mov	r2, r3
 801097c:	2102      	movs	r1, #2
 801097e:	f7fe fc0b 	bl	800f198 <disk_ioctl>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d001      	beq.n	801098c <find_volume+0xe4>
 8010988:	2301      	movs	r3, #1
 801098a:	e209      	b.n	8010da0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	899b      	ldrh	r3, [r3, #12]
 8010990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010994:	d80d      	bhi.n	80109b2 <find_volume+0x10a>
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	899b      	ldrh	r3, [r3, #12]
 801099a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801099e:	d308      	bcc.n	80109b2 <find_volume+0x10a>
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	899b      	ldrh	r3, [r3, #12]
 80109a4:	461a      	mov	r2, r3
 80109a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a8:	899b      	ldrh	r3, [r3, #12]
 80109aa:	3b01      	subs	r3, #1
 80109ac:	4013      	ands	r3, r2
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <find_volume+0x10e>
 80109b2:	2301      	movs	r3, #1
 80109b4:	e1f4      	b.n	8010da0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80109b6:	2300      	movs	r3, #0
 80109b8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80109ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80109bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109be:	f7ff ff1d 	bl	80107fc <check_fs>
 80109c2:	4603      	mov	r3, r0
 80109c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80109c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109cc:	2b02      	cmp	r3, #2
 80109ce:	d14b      	bne.n	8010a68 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80109d0:	2300      	movs	r3, #0
 80109d2:	643b      	str	r3, [r7, #64]	; 0x40
 80109d4:	e01f      	b.n	8010a16 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80109d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80109dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109de:	011b      	lsls	r3, r3, #4
 80109e0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80109e4:	4413      	add	r3, r2
 80109e6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80109e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ea:	3304      	adds	r3, #4
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d006      	beq.n	8010a00 <find_volume+0x158>
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	3308      	adds	r3, #8
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fe fc04 	bl	800f204 <ld_dword>
 80109fc:	4602      	mov	r2, r0
 80109fe:	e000      	b.n	8010a02 <find_volume+0x15a>
 8010a00:	2200      	movs	r2, #0
 8010a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010a0a:	440b      	add	r3, r1
 8010a0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a12:	3301      	adds	r3, #1
 8010a14:	643b      	str	r3, [r7, #64]	; 0x40
 8010a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a18:	2b03      	cmp	r3, #3
 8010a1a:	d9dc      	bls.n	80109d6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d002      	beq.n	8010a2c <find_volume+0x184>
 8010a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010a34:	4413      	add	r3, r2
 8010a36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010a3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d005      	beq.n	8010a4e <find_volume+0x1a6>
 8010a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a46:	f7ff fed9 	bl	80107fc <check_fs>
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	e000      	b.n	8010a50 <find_volume+0x1a8>
 8010a4e:	2303      	movs	r3, #3
 8010a50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d905      	bls.n	8010a68 <find_volume+0x1c0>
 8010a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a5e:	3301      	adds	r3, #1
 8010a60:	643b      	str	r3, [r7, #64]	; 0x40
 8010a62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a64:	2b03      	cmp	r3, #3
 8010a66:	d9e1      	bls.n	8010a2c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a6c:	2b04      	cmp	r3, #4
 8010a6e:	d101      	bne.n	8010a74 <find_volume+0x1cc>
 8010a70:	2301      	movs	r3, #1
 8010a72:	e195      	b.n	8010da0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d901      	bls.n	8010a80 <find_volume+0x1d8>
 8010a7c:	230d      	movs	r3, #13
 8010a7e:	e18f      	b.n	8010da0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a82:	3338      	adds	r3, #56	; 0x38
 8010a84:	330b      	adds	r3, #11
 8010a86:	4618      	mov	r0, r3
 8010a88:	f7fe fba4 	bl	800f1d4 <ld_word>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	461a      	mov	r2, r3
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	899b      	ldrh	r3, [r3, #12]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d001      	beq.n	8010a9c <find_volume+0x1f4>
 8010a98:	230d      	movs	r3, #13
 8010a9a:	e181      	b.n	8010da0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9e:	3338      	adds	r3, #56	; 0x38
 8010aa0:	3316      	adds	r3, #22
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fe fb96 	bl	800f1d4 <ld_word>
 8010aa8:	4603      	mov	r3, r0
 8010aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d106      	bne.n	8010ac0 <find_volume+0x218>
 8010ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab4:	3338      	adds	r3, #56	; 0x38
 8010ab6:	3324      	adds	r3, #36	; 0x24
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7fe fba3 	bl	800f204 <ld_dword>
 8010abe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ac4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad2:	789b      	ldrb	r3, [r3, #2]
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d005      	beq.n	8010ae4 <find_volume+0x23c>
 8010ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ada:	789b      	ldrb	r3, [r3, #2]
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d001      	beq.n	8010ae4 <find_volume+0x23c>
 8010ae0:	230d      	movs	r3, #13
 8010ae2:	e15d      	b.n	8010da0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae6:	789b      	ldrb	r3, [r3, #2]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010aec:	fb02 f303 	mul.w	r3, r2, r3
 8010af0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010af8:	b29a      	uxth	r2, r3
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b00:	895b      	ldrh	r3, [r3, #10]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d008      	beq.n	8010b18 <find_volume+0x270>
 8010b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b08:	895b      	ldrh	r3, [r3, #10]
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b0e:	895b      	ldrh	r3, [r3, #10]
 8010b10:	3b01      	subs	r3, #1
 8010b12:	4013      	ands	r3, r2
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d001      	beq.n	8010b1c <find_volume+0x274>
 8010b18:	230d      	movs	r3, #13
 8010b1a:	e141      	b.n	8010da0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1e:	3338      	adds	r3, #56	; 0x38
 8010b20:	3311      	adds	r3, #17
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fe fb56 	bl	800f1d4 <ld_word>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b32:	891b      	ldrh	r3, [r3, #8]
 8010b34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b36:	8992      	ldrh	r2, [r2, #12]
 8010b38:	0952      	lsrs	r2, r2, #5
 8010b3a:	b292      	uxth	r2, r2
 8010b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b40:	fb02 f201 	mul.w	r2, r2, r1
 8010b44:	1a9b      	subs	r3, r3, r2
 8010b46:	b29b      	uxth	r3, r3
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d001      	beq.n	8010b50 <find_volume+0x2a8>
 8010b4c:	230d      	movs	r3, #13
 8010b4e:	e127      	b.n	8010da0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b52:	3338      	adds	r3, #56	; 0x38
 8010b54:	3313      	adds	r3, #19
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fe fb3c 	bl	800f1d4 <ld_word>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d106      	bne.n	8010b74 <find_volume+0x2cc>
 8010b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b68:	3338      	adds	r3, #56	; 0x38
 8010b6a:	3320      	adds	r3, #32
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7fe fb49 	bl	800f204 <ld_dword>
 8010b72:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b76:	3338      	adds	r3, #56	; 0x38
 8010b78:	330e      	adds	r3, #14
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f7fe fb2a 	bl	800f1d4 <ld_word>
 8010b80:	4603      	mov	r3, r0
 8010b82:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010b84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d104      	bne.n	8010b94 <find_volume+0x2ec>
 8010b8a:	230d      	movs	r3, #13
 8010b8c:	e108      	b.n	8010da0 <find_volume+0x4f8>
 8010b8e:	bf00      	nop
 8010b90:	20033600 	.word	0x20033600

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010b94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b98:	4413      	add	r3, r2
 8010b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010b9c:	8911      	ldrh	r1, [r2, #8]
 8010b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010ba0:	8992      	ldrh	r2, [r2, #12]
 8010ba2:	0952      	lsrs	r2, r2, #5
 8010ba4:	b292      	uxth	r2, r2
 8010ba6:	fbb1 f2f2 	udiv	r2, r1, r2
 8010baa:	b292      	uxth	r2, r2
 8010bac:	4413      	add	r3, r2
 8010bae:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010bb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d201      	bcs.n	8010bbc <find_volume+0x314>
 8010bb8:	230d      	movs	r3, #13
 8010bba:	e0f1      	b.n	8010da0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	1ad3      	subs	r3, r2, r3
 8010bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010bc4:	8952      	ldrh	r2, [r2, #10]
 8010bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010bca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d101      	bne.n	8010bd6 <find_volume+0x32e>
 8010bd2:	230d      	movs	r3, #13
 8010bd4:	e0e4      	b.n	8010da0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8010bd6:	2303      	movs	r3, #3
 8010bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bde:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d802      	bhi.n	8010bec <find_volume+0x344>
 8010be6:	2302      	movs	r3, #2
 8010be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d802      	bhi.n	8010bfc <find_volume+0x354>
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	1c9a      	adds	r2, r3, #2
 8010c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c02:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c08:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010c0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0e:	441a      	add	r2, r3
 8010c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c12:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010c14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c18:	441a      	add	r2, r3
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c1c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c22:	2b03      	cmp	r3, #3
 8010c24:	d11e      	bne.n	8010c64 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c28:	3338      	adds	r3, #56	; 0x38
 8010c2a:	332a      	adds	r3, #42	; 0x2a
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7fe fad1 	bl	800f1d4 <ld_word>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d001      	beq.n	8010c3c <find_volume+0x394>
 8010c38:	230d      	movs	r3, #13
 8010c3a:	e0b1      	b.n	8010da0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c3e:	891b      	ldrh	r3, [r3, #8]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d001      	beq.n	8010c48 <find_volume+0x3a0>
 8010c44:	230d      	movs	r3, #13
 8010c46:	e0ab      	b.n	8010da0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c4a:	3338      	adds	r3, #56	; 0x38
 8010c4c:	332c      	adds	r3, #44	; 0x2c
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7fe fad8 	bl	800f204 <ld_dword>
 8010c54:	4602      	mov	r2, r0
 8010c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c58:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5c:	69db      	ldr	r3, [r3, #28]
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	647b      	str	r3, [r7, #68]	; 0x44
 8010c62:	e01f      	b.n	8010ca4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c66:	891b      	ldrh	r3, [r3, #8]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d101      	bne.n	8010c70 <find_volume+0x3c8>
 8010c6c:	230d      	movs	r3, #13
 8010c6e:	e097      	b.n	8010da0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c76:	441a      	add	r2, r3
 8010c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c7a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010c7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010c80:	2b02      	cmp	r3, #2
 8010c82:	d103      	bne.n	8010c8c <find_volume+0x3e4>
 8010c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c86:	69db      	ldr	r3, [r3, #28]
 8010c88:	005b      	lsls	r3, r3, #1
 8010c8a:	e00a      	b.n	8010ca2 <find_volume+0x3fa>
 8010c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c8e:	69da      	ldr	r2, [r3, #28]
 8010c90:	4613      	mov	r3, r2
 8010c92:	005b      	lsls	r3, r3, #1
 8010c94:	4413      	add	r3, r2
 8010c96:	085a      	lsrs	r2, r3, #1
 8010c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9a:	69db      	ldr	r3, [r3, #28]
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010ca2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ca6:	6a1a      	ldr	r2, [r3, #32]
 8010ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010caa:	899b      	ldrh	r3, [r3, #12]
 8010cac:	4619      	mov	r1, r3
 8010cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cb0:	440b      	add	r3, r1
 8010cb2:	3b01      	subs	r3, #1
 8010cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010cb6:	8989      	ldrh	r1, [r1, #12]
 8010cb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d201      	bcs.n	8010cc4 <find_volume+0x41c>
 8010cc0:	230d      	movs	r3, #13
 8010cc2:	e06d      	b.n	8010da0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010cca:	615a      	str	r2, [r3, #20]
 8010ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cce:	695a      	ldr	r2, [r3, #20]
 8010cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cd6:	2280      	movs	r2, #128	; 0x80
 8010cd8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010cde:	2b03      	cmp	r3, #3
 8010ce0:	d149      	bne.n	8010d76 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ce4:	3338      	adds	r3, #56	; 0x38
 8010ce6:	3330      	adds	r3, #48	; 0x30
 8010ce8:	4618      	mov	r0, r3
 8010cea:	f7fe fa73 	bl	800f1d4 <ld_word>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d140      	bne.n	8010d76 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cf6:	3301      	adds	r3, #1
 8010cf8:	4619      	mov	r1, r3
 8010cfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010cfc:	f7fe fd1a 	bl	800f734 <move_window>
 8010d00:	4603      	mov	r3, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d137      	bne.n	8010d76 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d08:	2200      	movs	r2, #0
 8010d0a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0e:	3338      	adds	r3, #56	; 0x38
 8010d10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7fe fa5d 	bl	800f1d4 <ld_word>
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	461a      	mov	r2, r3
 8010d1e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d127      	bne.n	8010d76 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d28:	3338      	adds	r3, #56	; 0x38
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f7fe fa6a 	bl	800f204 <ld_dword>
 8010d30:	4602      	mov	r2, r0
 8010d32:	4b1d      	ldr	r3, [pc, #116]	; (8010da8 <find_volume+0x500>)
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d11e      	bne.n	8010d76 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3a:	3338      	adds	r3, #56	; 0x38
 8010d3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7fe fa5f 	bl	800f204 <ld_dword>
 8010d46:	4602      	mov	r2, r0
 8010d48:	4b18      	ldr	r3, [pc, #96]	; (8010dac <find_volume+0x504>)
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d113      	bne.n	8010d76 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	3338      	adds	r3, #56	; 0x38
 8010d52:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010d56:	4618      	mov	r0, r3
 8010d58:	f7fe fa54 	bl	800f204 <ld_dword>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d60:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d64:	3338      	adds	r3, #56	; 0x38
 8010d66:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f7fe fa4a 	bl	800f204 <ld_dword>
 8010d70:	4602      	mov	r2, r0
 8010d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d74:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d78:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010d7c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010d7e:	4b0c      	ldr	r3, [pc, #48]	; (8010db0 <find_volume+0x508>)
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	3301      	adds	r3, #1
 8010d84:	b29a      	uxth	r2, r3
 8010d86:	4b0a      	ldr	r3, [pc, #40]	; (8010db0 <find_volume+0x508>)
 8010d88:	801a      	strh	r2, [r3, #0]
 8010d8a:	4b09      	ldr	r3, [pc, #36]	; (8010db0 <find_volume+0x508>)
 8010d8c:	881a      	ldrh	r2, [r3, #0]
 8010d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d90:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d94:	2200      	movs	r2, #0
 8010d96:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010d98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d9a:	f7fe fc63 	bl	800f664 <clear_lock>
#endif
	return FR_OK;
 8010d9e:	2300      	movs	r3, #0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3758      	adds	r7, #88	; 0x58
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}
 8010da8:	41615252 	.word	0x41615252
 8010dac:	61417272 	.word	0x61417272
 8010db0:	20033604 	.word	0x20033604

08010db4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b084      	sub	sp, #16
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010dbe:	2309      	movs	r3, #9
 8010dc0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d01c      	beq.n	8010e02 <validate+0x4e>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d018      	beq.n	8010e02 <validate+0x4e>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d013      	beq.n	8010e02 <validate+0x4e>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	889a      	ldrh	r2, [r3, #4]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	88db      	ldrh	r3, [r3, #6]
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d10c      	bne.n	8010e02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	785b      	ldrb	r3, [r3, #1]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7fe f952 	bl	800f098 <disk_status>
 8010df4:	4603      	mov	r3, r0
 8010df6:	f003 0301 	and.w	r3, r3, #1
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d101      	bne.n	8010e02 <validate+0x4e>
			res = FR_OK;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010e02:	7bfb      	ldrb	r3, [r7, #15]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d102      	bne.n	8010e0e <validate+0x5a>
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	e000      	b.n	8010e10 <validate+0x5c>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	683a      	ldr	r2, [r7, #0]
 8010e12:	6013      	str	r3, [r2, #0]
	return res;
 8010e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}
	...

08010e20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b088      	sub	sp, #32
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	60f8      	str	r0, [r7, #12]
 8010e28:	60b9      	str	r1, [r7, #8]
 8010e2a:	4613      	mov	r3, r2
 8010e2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010e32:	f107 0310 	add.w	r3, r7, #16
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff fc9b 	bl	8010772 <get_ldnumber>
 8010e3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	da01      	bge.n	8010e48 <f_mount+0x28>
 8010e44:	230b      	movs	r3, #11
 8010e46:	e02b      	b.n	8010ea0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010e48:	4a17      	ldr	r2, [pc, #92]	; (8010ea8 <f_mount+0x88>)
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d005      	beq.n	8010e64 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010e58:	69b8      	ldr	r0, [r7, #24]
 8010e5a:	f7fe fc03 	bl	800f664 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	2200      	movs	r2, #0
 8010e62:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d002      	beq.n	8010e70 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010e70:	68fa      	ldr	r2, [r7, #12]
 8010e72:	490d      	ldr	r1, [pc, #52]	; (8010ea8 <f_mount+0x88>)
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <f_mount+0x66>
 8010e80:	79fb      	ldrb	r3, [r7, #7]
 8010e82:	2b01      	cmp	r3, #1
 8010e84:	d001      	beq.n	8010e8a <f_mount+0x6a>
 8010e86:	2300      	movs	r3, #0
 8010e88:	e00a      	b.n	8010ea0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010e8a:	f107 010c 	add.w	r1, r7, #12
 8010e8e:	f107 0308 	add.w	r3, r7, #8
 8010e92:	2200      	movs	r2, #0
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7ff fd07 	bl	80108a8 <find_volume>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	3720      	adds	r7, #32
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	20033600 	.word	0x20033600

08010eac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b098      	sub	sp, #96	; 0x60
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d101      	bne.n	8010ec4 <f_open+0x18>
 8010ec0:	2309      	movs	r3, #9
 8010ec2:	e1ba      	b.n	801123a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010ec4:	79fb      	ldrb	r3, [r7, #7]
 8010ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010eca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010ecc:	79fa      	ldrb	r2, [r7, #7]
 8010ece:	f107 0110 	add.w	r1, r7, #16
 8010ed2:	f107 0308 	add.w	r3, r7, #8
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7ff fce6 	bl	80108a8 <find_volume>
 8010edc:	4603      	mov	r3, r0
 8010ede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010ee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f040 819e 	bne.w	8011228 <f_open+0x37c>
		dj.obj.fs = fs;
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010ef0:	68ba      	ldr	r2, [r7, #8]
 8010ef2:	f107 0314 	add.w	r3, r7, #20
 8010ef6:	4611      	mov	r1, r2
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7ff fba5 	bl	8010648 <follow_path>
 8010efe:	4603      	mov	r3, r0
 8010f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d11a      	bne.n	8010f42 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010f0c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f10:	b25b      	sxtb	r3, r3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	da03      	bge.n	8010f1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8010f16:	2306      	movs	r3, #6
 8010f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010f1c:	e011      	b.n	8010f42 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010f1e:	79fb      	ldrb	r3, [r7, #7]
 8010f20:	f023 0301 	bic.w	r3, r3, #1
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	bf14      	ite	ne
 8010f28:	2301      	movne	r3, #1
 8010f2a:	2300      	moveq	r3, #0
 8010f2c:	b2db      	uxtb	r3, r3
 8010f2e:	461a      	mov	r2, r3
 8010f30:	f107 0314 	add.w	r3, r7, #20
 8010f34:	4611      	mov	r1, r2
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fe fa4c 	bl	800f3d4 <chk_lock>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010f42:	79fb      	ldrb	r3, [r7, #7]
 8010f44:	f003 031c 	and.w	r3, r3, #28
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d07e      	beq.n	801104a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d017      	beq.n	8010f84 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f58:	2b04      	cmp	r3, #4
 8010f5a:	d10e      	bne.n	8010f7a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010f5c:	f7fe fa96 	bl	800f48c <enq_lock>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d006      	beq.n	8010f74 <f_open+0xc8>
 8010f66:	f107 0314 	add.w	r3, r7, #20
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7ff fa52 	bl	8010414 <dir_register>
 8010f70:	4603      	mov	r3, r0
 8010f72:	e000      	b.n	8010f76 <f_open+0xca>
 8010f74:	2312      	movs	r3, #18
 8010f76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	f043 0308 	orr.w	r3, r3, #8
 8010f80:	71fb      	strb	r3, [r7, #7]
 8010f82:	e010      	b.n	8010fa6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010f84:	7ebb      	ldrb	r3, [r7, #26]
 8010f86:	f003 0311 	and.w	r3, r3, #17
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d003      	beq.n	8010f96 <f_open+0xea>
					res = FR_DENIED;
 8010f8e:	2307      	movs	r3, #7
 8010f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010f94:	e007      	b.n	8010fa6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010f96:	79fb      	ldrb	r3, [r7, #7]
 8010f98:	f003 0304 	and.w	r3, r3, #4
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <f_open+0xfa>
 8010fa0:	2308      	movs	r3, #8
 8010fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010fa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d167      	bne.n	801107e <f_open+0x1d2>
 8010fae:	79fb      	ldrb	r3, [r7, #7]
 8010fb0:	f003 0308 	and.w	r3, r3, #8
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d062      	beq.n	801107e <f_open+0x1d2>
				dw = GET_FATTIME();
 8010fb8:	4ba2      	ldr	r3, [pc, #648]	; (8011244 <f_open+0x398>)
 8010fba:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fbe:	330e      	adds	r3, #14
 8010fc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe f95c 	bl	800f280 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fca:	3316      	adds	r3, #22
 8010fcc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe f956 	bl	800f280 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fd6:	330b      	adds	r3, #11
 8010fd8:	2220      	movs	r2, #32
 8010fda:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fe0:	4611      	mov	r1, r2
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f7ff f925 	bl	8010232 <ld_clust>
 8010fe8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010fee:	2200      	movs	r2, #0
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7ff f93d 	bl	8010270 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ff8:	331c      	adds	r3, #28
 8010ffa:	2100      	movs	r1, #0
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fe f93f 	bl	800f280 <st_dword>
					fs->wflag = 1;
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	2201      	movs	r2, #1
 8011006:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801100a:	2b00      	cmp	r3, #0
 801100c:	d037      	beq.n	801107e <f_open+0x1d2>
						dw = fs->winsect;
 801100e:	693b      	ldr	r3, [r7, #16]
 8011010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011012:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011014:	f107 0314 	add.w	r3, r7, #20
 8011018:	2200      	movs	r2, #0
 801101a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801101c:	4618      	mov	r0, r3
 801101e:	f7fe fe2d 	bl	800fc7c <remove_chain>
 8011022:	4603      	mov	r3, r0
 8011024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011028:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801102c:	2b00      	cmp	r3, #0
 801102e:	d126      	bne.n	801107e <f_open+0x1d2>
							res = move_window(fs, dw);
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011034:	4618      	mov	r0, r3
 8011036:	f7fe fb7d 	bl	800f734 <move_window>
 801103a:	4603      	mov	r3, r0
 801103c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011044:	3a01      	subs	r2, #1
 8011046:	611a      	str	r2, [r3, #16]
 8011048:	e019      	b.n	801107e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801104a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801104e:	2b00      	cmp	r3, #0
 8011050:	d115      	bne.n	801107e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011052:	7ebb      	ldrb	r3, [r7, #26]
 8011054:	f003 0310 	and.w	r3, r3, #16
 8011058:	2b00      	cmp	r3, #0
 801105a:	d003      	beq.n	8011064 <f_open+0x1b8>
					res = FR_NO_FILE;
 801105c:	2304      	movs	r3, #4
 801105e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011062:	e00c      	b.n	801107e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011064:	79fb      	ldrb	r3, [r7, #7]
 8011066:	f003 0302 	and.w	r3, r3, #2
 801106a:	2b00      	cmp	r3, #0
 801106c:	d007      	beq.n	801107e <f_open+0x1d2>
 801106e:	7ebb      	ldrb	r3, [r7, #26]
 8011070:	f003 0301 	and.w	r3, r3, #1
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <f_open+0x1d2>
						res = FR_DENIED;
 8011078:	2307      	movs	r3, #7
 801107a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801107e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011082:	2b00      	cmp	r3, #0
 8011084:	d128      	bne.n	80110d8 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011086:	79fb      	ldrb	r3, [r7, #7]
 8011088:	f003 0308 	and.w	r3, r3, #8
 801108c:	2b00      	cmp	r3, #0
 801108e:	d003      	beq.n	8011098 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011090:	79fb      	ldrb	r3, [r7, #7]
 8011092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011096:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80110a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110a6:	79fb      	ldrb	r3, [r7, #7]
 80110a8:	f023 0301 	bic.w	r3, r3, #1
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	bf14      	ite	ne
 80110b0:	2301      	movne	r3, #1
 80110b2:	2300      	moveq	r3, #0
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	461a      	mov	r2, r3
 80110b8:	f107 0314 	add.w	r3, r7, #20
 80110bc:	4611      	mov	r1, r2
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fe fa06 	bl	800f4d0 <inc_lock>
 80110c4:	4602      	mov	r2, r0
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	691b      	ldr	r3, [r3, #16]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d102      	bne.n	80110d8 <f_open+0x22c>
 80110d2:	2302      	movs	r3, #2
 80110d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80110d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80110dc:	2b00      	cmp	r3, #0
 80110de:	f040 80a3 	bne.w	8011228 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110e6:	4611      	mov	r1, r2
 80110e8:	4618      	mov	r0, r3
 80110ea:	f7ff f8a2 	bl	8010232 <ld_clust>
 80110ee:	4602      	mov	r2, r0
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80110f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110f6:	331c      	adds	r3, #28
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fe f883 	bl	800f204 <ld_dword>
 80110fe:	4602      	mov	r2, r0
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	2200      	movs	r2, #0
 8011108:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801110a:	693a      	ldr	r2, [r7, #16]
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	88da      	ldrh	r2, [r3, #6]
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	79fa      	ldrb	r2, [r7, #7]
 801111c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2200      	movs	r2, #0
 8011122:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	2200      	movs	r2, #0
 8011128:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2200      	movs	r2, #0
 801112e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	3330      	adds	r3, #48	; 0x30
 8011134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011138:	2100      	movs	r1, #0
 801113a:	4618      	mov	r0, r3
 801113c:	f7fe f8ed 	bl	800f31a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011140:	79fb      	ldrb	r3, [r7, #7]
 8011142:	f003 0320 	and.w	r3, r3, #32
 8011146:	2b00      	cmp	r3, #0
 8011148:	d06e      	beq.n	8011228 <f_open+0x37c>
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d06a      	beq.n	8011228 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	68da      	ldr	r2, [r3, #12]
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	895b      	ldrh	r3, [r3, #10]
 801115e:	461a      	mov	r2, r3
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	899b      	ldrh	r3, [r3, #12]
 8011164:	fb03 f302 	mul.w	r3, r3, r2
 8011168:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	689b      	ldr	r3, [r3, #8]
 801116e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	657b      	str	r3, [r7, #84]	; 0x54
 8011176:	e016      	b.n	80111a6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801117c:	4618      	mov	r0, r3
 801117e:	f7fe fb96 	bl	800f8ae <get_fat>
 8011182:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011186:	2b01      	cmp	r3, #1
 8011188:	d802      	bhi.n	8011190 <f_open+0x2e4>
 801118a:	2302      	movs	r3, #2
 801118c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011196:	d102      	bne.n	801119e <f_open+0x2f2>
 8011198:	2301      	movs	r3, #1
 801119a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801119e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80111a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	657b      	str	r3, [r7, #84]	; 0x54
 80111a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d103      	bne.n	80111b6 <f_open+0x30a>
 80111ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80111b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d8e0      	bhi.n	8011178 <f_open+0x2cc>
				}
				fp->clust = clst;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80111ba:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80111bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d131      	bne.n	8011228 <f_open+0x37c>
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	899b      	ldrh	r3, [r3, #12]
 80111c8:	461a      	mov	r2, r3
 80111ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80111d0:	fb02 f201 	mul.w	r2, r2, r1
 80111d4:	1a9b      	subs	r3, r3, r2
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d026      	beq.n	8011228 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fe fb46 	bl	800f870 <clust2sect>
 80111e4:	6478      	str	r0, [r7, #68]	; 0x44
 80111e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d103      	bne.n	80111f4 <f_open+0x348>
						res = FR_INT_ERR;
 80111ec:	2302      	movs	r3, #2
 80111ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80111f2:	e019      	b.n	8011228 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	899b      	ldrh	r3, [r3, #12]
 80111f8:	461a      	mov	r2, r3
 80111fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8011200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011202:	441a      	add	r2, r3
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011208:	693b      	ldr	r3, [r7, #16]
 801120a:	7858      	ldrb	r0, [r3, #1]
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	6a1a      	ldr	r2, [r3, #32]
 8011216:	2301      	movs	r3, #1
 8011218:	f7fd ff7e 	bl	800f118 <disk_read>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d002      	beq.n	8011228 <f_open+0x37c>
 8011222:	2301      	movs	r3, #1
 8011224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801122c:	2b00      	cmp	r3, #0
 801122e:	d002      	beq.n	8011236 <f_open+0x38a>
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	2200      	movs	r2, #0
 8011234:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801123a:	4618      	mov	r0, r3
 801123c:	3760      	adds	r7, #96	; 0x60
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	274a0000 	.word	0x274a0000

08011248 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b08e      	sub	sp, #56	; 0x38
 801124c:	af00      	add	r7, sp, #0
 801124e:	60f8      	str	r0, [r7, #12]
 8011250:	60b9      	str	r1, [r7, #8]
 8011252:	607a      	str	r2, [r7, #4]
 8011254:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	2200      	movs	r2, #0
 801125e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f107 0214 	add.w	r2, r7, #20
 8011266:	4611      	mov	r1, r2
 8011268:	4618      	mov	r0, r3
 801126a:	f7ff fda3 	bl	8010db4 <validate>
 801126e:	4603      	mov	r3, r0
 8011270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011278:	2b00      	cmp	r3, #0
 801127a:	d107      	bne.n	801128c <f_read+0x44>
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	7d5b      	ldrb	r3, [r3, #21]
 8011280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011284:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011288:	2b00      	cmp	r3, #0
 801128a:	d002      	beq.n	8011292 <f_read+0x4a>
 801128c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011290:	e135      	b.n	80114fe <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	7d1b      	ldrb	r3, [r3, #20]
 8011296:	f003 0301 	and.w	r3, r3, #1
 801129a:	2b00      	cmp	r3, #0
 801129c:	d101      	bne.n	80112a2 <f_read+0x5a>
 801129e:	2307      	movs	r3, #7
 80112a0:	e12d      	b.n	80114fe <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	68da      	ldr	r2, [r3, #12]
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	699b      	ldr	r3, [r3, #24]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	6a3b      	ldr	r3, [r7, #32]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	f240 811e 	bls.w	80114f4 <f_read+0x2ac>
 80112b8:	6a3b      	ldr	r3, [r7, #32]
 80112ba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80112bc:	e11a      	b.n	80114f4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	699b      	ldr	r3, [r3, #24]
 80112c2:	697a      	ldr	r2, [r7, #20]
 80112c4:	8992      	ldrh	r2, [r2, #12]
 80112c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80112ca:	fb02 f201 	mul.w	r2, r2, r1
 80112ce:	1a9b      	subs	r3, r3, r2
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	f040 80d5 	bne.w	8011480 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	699b      	ldr	r3, [r3, #24]
 80112da:	697a      	ldr	r2, [r7, #20]
 80112dc:	8992      	ldrh	r2, [r2, #12]
 80112de:	fbb3 f3f2 	udiv	r3, r3, r2
 80112e2:	697a      	ldr	r2, [r7, #20]
 80112e4:	8952      	ldrh	r2, [r2, #10]
 80112e6:	3a01      	subs	r2, #1
 80112e8:	4013      	ands	r3, r2
 80112ea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80112ec:	69fb      	ldr	r3, [r7, #28]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d12f      	bne.n	8011352 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	699b      	ldr	r3, [r3, #24]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d103      	bne.n	8011302 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	689b      	ldr	r3, [r3, #8]
 80112fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011300:	e013      	b.n	801132a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011306:	2b00      	cmp	r3, #0
 8011308:	d007      	beq.n	801131a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	4619      	mov	r1, r3
 8011310:	68f8      	ldr	r0, [r7, #12]
 8011312:	f7fe fdb0 	bl	800fe76 <clmt_clust>
 8011316:	6338      	str	r0, [r7, #48]	; 0x30
 8011318:	e007      	b.n	801132a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	69db      	ldr	r3, [r3, #28]
 8011320:	4619      	mov	r1, r3
 8011322:	4610      	mov	r0, r2
 8011324:	f7fe fac3 	bl	800f8ae <get_fat>
 8011328:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801132a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801132c:	2b01      	cmp	r3, #1
 801132e:	d804      	bhi.n	801133a <f_read+0xf2>
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2202      	movs	r2, #2
 8011334:	755a      	strb	r2, [r3, #21]
 8011336:	2302      	movs	r3, #2
 8011338:	e0e1      	b.n	80114fe <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011340:	d104      	bne.n	801134c <f_read+0x104>
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	2201      	movs	r2, #1
 8011346:	755a      	strb	r2, [r3, #21]
 8011348:	2301      	movs	r3, #1
 801134a:	e0d8      	b.n	80114fe <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011350:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011352:	697a      	ldr	r2, [r7, #20]
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	69db      	ldr	r3, [r3, #28]
 8011358:	4619      	mov	r1, r3
 801135a:	4610      	mov	r0, r2
 801135c:	f7fe fa88 	bl	800f870 <clust2sect>
 8011360:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d104      	bne.n	8011372 <f_read+0x12a>
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2202      	movs	r2, #2
 801136c:	755a      	strb	r2, [r3, #21]
 801136e:	2302      	movs	r3, #2
 8011370:	e0c5      	b.n	80114fe <f_read+0x2b6>
			sect += csect;
 8011372:	69ba      	ldr	r2, [r7, #24]
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	4413      	add	r3, r2
 8011378:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	899b      	ldrh	r3, [r3, #12]
 801137e:	461a      	mov	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	fbb3 f3f2 	udiv	r3, r3, r2
 8011386:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801138a:	2b00      	cmp	r3, #0
 801138c:	d041      	beq.n	8011412 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801138e:	69fa      	ldr	r2, [r7, #28]
 8011390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011392:	4413      	add	r3, r2
 8011394:	697a      	ldr	r2, [r7, #20]
 8011396:	8952      	ldrh	r2, [r2, #10]
 8011398:	4293      	cmp	r3, r2
 801139a:	d905      	bls.n	80113a8 <f_read+0x160>
					cc = fs->csize - csect;
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	895b      	ldrh	r3, [r3, #10]
 80113a0:	461a      	mov	r2, r3
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	1ad3      	subs	r3, r2, r3
 80113a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80113a8:	697b      	ldr	r3, [r7, #20]
 80113aa:	7858      	ldrb	r0, [r3, #1]
 80113ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ae:	69ba      	ldr	r2, [r7, #24]
 80113b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80113b2:	f7fd feb1 	bl	800f118 <disk_read>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d004      	beq.n	80113c6 <f_read+0x17e>
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	2201      	movs	r2, #1
 80113c0:	755a      	strb	r2, [r3, #21]
 80113c2:	2301      	movs	r3, #1
 80113c4:	e09b      	b.n	80114fe <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	7d1b      	ldrb	r3, [r3, #20]
 80113ca:	b25b      	sxtb	r3, r3
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	da18      	bge.n	8011402 <f_read+0x1ba>
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6a1a      	ldr	r2, [r3, #32]
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	1ad3      	subs	r3, r2, r3
 80113d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80113da:	429a      	cmp	r2, r3
 80113dc:	d911      	bls.n	8011402 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6a1a      	ldr	r2, [r3, #32]
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	1ad3      	subs	r3, r2, r3
 80113e6:	697a      	ldr	r2, [r7, #20]
 80113e8:	8992      	ldrh	r2, [r2, #12]
 80113ea:	fb02 f303 	mul.w	r3, r2, r3
 80113ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113f0:	18d0      	adds	r0, r2, r3
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	899b      	ldrh	r3, [r3, #12]
 80113fc:	461a      	mov	r2, r3
 80113fe:	f7fd ff6b 	bl	800f2d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	899b      	ldrh	r3, [r3, #12]
 8011406:	461a      	mov	r2, r3
 8011408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140a:	fb02 f303 	mul.w	r3, r2, r3
 801140e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011410:	e05c      	b.n	80114cc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	6a1b      	ldr	r3, [r3, #32]
 8011416:	69ba      	ldr	r2, [r7, #24]
 8011418:	429a      	cmp	r2, r3
 801141a:	d02e      	beq.n	801147a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	7d1b      	ldrb	r3, [r3, #20]
 8011420:	b25b      	sxtb	r3, r3
 8011422:	2b00      	cmp	r3, #0
 8011424:	da18      	bge.n	8011458 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	7858      	ldrb	r0, [r3, #1]
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	6a1a      	ldr	r2, [r3, #32]
 8011434:	2301      	movs	r3, #1
 8011436:	f7fd fe8f 	bl	800f158 <disk_write>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d004      	beq.n	801144a <f_read+0x202>
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	2201      	movs	r2, #1
 8011444:	755a      	strb	r2, [r3, #21]
 8011446:	2301      	movs	r3, #1
 8011448:	e059      	b.n	80114fe <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	7d1b      	ldrb	r3, [r3, #20]
 801144e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011452:	b2da      	uxtb	r2, r3
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	7858      	ldrb	r0, [r3, #1]
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011462:	2301      	movs	r3, #1
 8011464:	69ba      	ldr	r2, [r7, #24]
 8011466:	f7fd fe57 	bl	800f118 <disk_read>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d004      	beq.n	801147a <f_read+0x232>
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2201      	movs	r2, #1
 8011474:	755a      	strb	r2, [r3, #21]
 8011476:	2301      	movs	r3, #1
 8011478:	e041      	b.n	80114fe <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	69ba      	ldr	r2, [r7, #24]
 801147e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	899b      	ldrh	r3, [r3, #12]
 8011484:	4618      	mov	r0, r3
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	699b      	ldr	r3, [r3, #24]
 801148a:	697a      	ldr	r2, [r7, #20]
 801148c:	8992      	ldrh	r2, [r2, #12]
 801148e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011492:	fb02 f201 	mul.w	r2, r2, r1
 8011496:	1a9b      	subs	r3, r3, r2
 8011498:	1ac3      	subs	r3, r0, r3
 801149a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801149c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d901      	bls.n	80114a8 <f_read+0x260>
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	699b      	ldr	r3, [r3, #24]
 80114b2:	697a      	ldr	r2, [r7, #20]
 80114b4:	8992      	ldrh	r2, [r2, #12]
 80114b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80114ba:	fb02 f200 	mul.w	r2, r2, r0
 80114be:	1a9b      	subs	r3, r3, r2
 80114c0:	440b      	add	r3, r1
 80114c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114c4:	4619      	mov	r1, r3
 80114c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114c8:	f7fd ff06 	bl	800f2d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80114cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d0:	4413      	add	r3, r2
 80114d2:	627b      	str	r3, [r7, #36]	; 0x24
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	699a      	ldr	r2, [r3, #24]
 80114d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114da:	441a      	add	r2, r3
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	619a      	str	r2, [r3, #24]
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	681a      	ldr	r2, [r3, #0]
 80114e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e6:	441a      	add	r2, r3
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	601a      	str	r2, [r3, #0]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114f0:	1ad3      	subs	r3, r2, r3
 80114f2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	f47f aee1 	bne.w	80112be <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80114fc:	2300      	movs	r3, #0
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3738      	adds	r7, #56	; 0x38
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}

08011506 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011506:	b580      	push	{r7, lr}
 8011508:	b08c      	sub	sp, #48	; 0x30
 801150a:	af00      	add	r7, sp, #0
 801150c:	60f8      	str	r0, [r7, #12]
 801150e:	60b9      	str	r1, [r7, #8]
 8011510:	607a      	str	r2, [r7, #4]
 8011512:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	2200      	movs	r2, #0
 801151c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	f107 0210 	add.w	r2, r7, #16
 8011524:	4611      	mov	r1, r2
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fc44 	bl	8010db4 <validate>
 801152c:	4603      	mov	r3, r0
 801152e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011532:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011536:	2b00      	cmp	r3, #0
 8011538:	d107      	bne.n	801154a <f_write+0x44>
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	7d5b      	ldrb	r3, [r3, #21]
 801153e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <f_write+0x4a>
 801154a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801154e:	e16a      	b.n	8011826 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	7d1b      	ldrb	r3, [r3, #20]
 8011554:	f003 0302 	and.w	r3, r3, #2
 8011558:	2b00      	cmp	r3, #0
 801155a:	d101      	bne.n	8011560 <f_write+0x5a>
 801155c:	2307      	movs	r3, #7
 801155e:	e162      	b.n	8011826 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	699a      	ldr	r2, [r3, #24]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	441a      	add	r2, r3
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	699b      	ldr	r3, [r3, #24]
 801156c:	429a      	cmp	r2, r3
 801156e:	f080 814c 	bcs.w	801180a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	699b      	ldr	r3, [r3, #24]
 8011576:	43db      	mvns	r3, r3
 8011578:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801157a:	e146      	b.n	801180a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	699b      	ldr	r3, [r3, #24]
 8011580:	693a      	ldr	r2, [r7, #16]
 8011582:	8992      	ldrh	r2, [r2, #12]
 8011584:	fbb3 f1f2 	udiv	r1, r3, r2
 8011588:	fb02 f201 	mul.w	r2, r2, r1
 801158c:	1a9b      	subs	r3, r3, r2
 801158e:	2b00      	cmp	r3, #0
 8011590:	f040 80f1 	bne.w	8011776 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	699b      	ldr	r3, [r3, #24]
 8011598:	693a      	ldr	r2, [r7, #16]
 801159a:	8992      	ldrh	r2, [r2, #12]
 801159c:	fbb3 f3f2 	udiv	r3, r3, r2
 80115a0:	693a      	ldr	r2, [r7, #16]
 80115a2:	8952      	ldrh	r2, [r2, #10]
 80115a4:	3a01      	subs	r2, #1
 80115a6:	4013      	ands	r3, r2
 80115a8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80115aa:	69bb      	ldr	r3, [r7, #24]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d143      	bne.n	8011638 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	699b      	ldr	r3, [r3, #24]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d10c      	bne.n	80115d2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	689b      	ldr	r3, [r3, #8]
 80115bc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80115be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d11a      	bne.n	80115fa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	2100      	movs	r1, #0
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fe fbbc 	bl	800fd46 <create_chain>
 80115ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80115d0:	e013      	b.n	80115fa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d007      	beq.n	80115ea <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	699b      	ldr	r3, [r3, #24]
 80115de:	4619      	mov	r1, r3
 80115e0:	68f8      	ldr	r0, [r7, #12]
 80115e2:	f7fe fc48 	bl	800fe76 <clmt_clust>
 80115e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80115e8:	e007      	b.n	80115fa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80115ea:	68fa      	ldr	r2, [r7, #12]
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	69db      	ldr	r3, [r3, #28]
 80115f0:	4619      	mov	r1, r3
 80115f2:	4610      	mov	r0, r2
 80115f4:	f7fe fba7 	bl	800fd46 <create_chain>
 80115f8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80115fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	f000 8109 	beq.w	8011814 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011604:	2b01      	cmp	r3, #1
 8011606:	d104      	bne.n	8011612 <f_write+0x10c>
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2202      	movs	r2, #2
 801160c:	755a      	strb	r2, [r3, #21]
 801160e:	2302      	movs	r3, #2
 8011610:	e109      	b.n	8011826 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011618:	d104      	bne.n	8011624 <f_write+0x11e>
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	2201      	movs	r2, #1
 801161e:	755a      	strb	r2, [r3, #21]
 8011620:	2301      	movs	r3, #1
 8011622:	e100      	b.n	8011826 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011628:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	689b      	ldr	r3, [r3, #8]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d102      	bne.n	8011638 <f_write+0x132>
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011636:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	7d1b      	ldrb	r3, [r3, #20]
 801163c:	b25b      	sxtb	r3, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	da18      	bge.n	8011674 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	7858      	ldrb	r0, [r3, #1]
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6a1a      	ldr	r2, [r3, #32]
 8011650:	2301      	movs	r3, #1
 8011652:	f7fd fd81 	bl	800f158 <disk_write>
 8011656:	4603      	mov	r3, r0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d004      	beq.n	8011666 <f_write+0x160>
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	2201      	movs	r2, #1
 8011660:	755a      	strb	r2, [r3, #21]
 8011662:	2301      	movs	r3, #1
 8011664:	e0df      	b.n	8011826 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	7d1b      	ldrb	r3, [r3, #20]
 801166a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801166e:	b2da      	uxtb	r2, r3
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011674:	693a      	ldr	r2, [r7, #16]
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	69db      	ldr	r3, [r3, #28]
 801167a:	4619      	mov	r1, r3
 801167c:	4610      	mov	r0, r2
 801167e:	f7fe f8f7 	bl	800f870 <clust2sect>
 8011682:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d104      	bne.n	8011694 <f_write+0x18e>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2202      	movs	r2, #2
 801168e:	755a      	strb	r2, [r3, #21]
 8011690:	2302      	movs	r3, #2
 8011692:	e0c8      	b.n	8011826 <f_write+0x320>
			sect += csect;
 8011694:	697a      	ldr	r2, [r7, #20]
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	4413      	add	r3, r2
 801169a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	899b      	ldrh	r3, [r3, #12]
 80116a0:	461a      	mov	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80116a8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80116aa:	6a3b      	ldr	r3, [r7, #32]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d043      	beq.n	8011738 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80116b0:	69ba      	ldr	r2, [r7, #24]
 80116b2:	6a3b      	ldr	r3, [r7, #32]
 80116b4:	4413      	add	r3, r2
 80116b6:	693a      	ldr	r2, [r7, #16]
 80116b8:	8952      	ldrh	r2, [r2, #10]
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d905      	bls.n	80116ca <f_write+0x1c4>
					cc = fs->csize - csect;
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	895b      	ldrh	r3, [r3, #10]
 80116c2:	461a      	mov	r2, r3
 80116c4:	69bb      	ldr	r3, [r7, #24]
 80116c6:	1ad3      	subs	r3, r2, r3
 80116c8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	7858      	ldrb	r0, [r3, #1]
 80116ce:	6a3b      	ldr	r3, [r7, #32]
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	69f9      	ldr	r1, [r7, #28]
 80116d4:	f7fd fd40 	bl	800f158 <disk_write>
 80116d8:	4603      	mov	r3, r0
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d004      	beq.n	80116e8 <f_write+0x1e2>
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2201      	movs	r2, #1
 80116e2:	755a      	strb	r2, [r3, #21]
 80116e4:	2301      	movs	r3, #1
 80116e6:	e09e      	b.n	8011826 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	6a1a      	ldr	r2, [r3, #32]
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	6a3a      	ldr	r2, [r7, #32]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d918      	bls.n	8011728 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	6a1a      	ldr	r2, [r3, #32]
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	693a      	ldr	r2, [r7, #16]
 8011706:	8992      	ldrh	r2, [r2, #12]
 8011708:	fb02 f303 	mul.w	r3, r2, r3
 801170c:	69fa      	ldr	r2, [r7, #28]
 801170e:	18d1      	adds	r1, r2, r3
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	899b      	ldrh	r3, [r3, #12]
 8011714:	461a      	mov	r2, r3
 8011716:	f7fd fddf 	bl	800f2d8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	7d1b      	ldrb	r3, [r3, #20]
 801171e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011722:	b2da      	uxtb	r2, r3
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011728:	693b      	ldr	r3, [r7, #16]
 801172a:	899b      	ldrh	r3, [r3, #12]
 801172c:	461a      	mov	r2, r3
 801172e:	6a3b      	ldr	r3, [r7, #32]
 8011730:	fb02 f303 	mul.w	r3, r2, r3
 8011734:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011736:	e04b      	b.n	80117d0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	6a1b      	ldr	r3, [r3, #32]
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	429a      	cmp	r2, r3
 8011740:	d016      	beq.n	8011770 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	699a      	ldr	r2, [r3, #24]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801174a:	429a      	cmp	r2, r3
 801174c:	d210      	bcs.n	8011770 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	7858      	ldrb	r0, [r3, #1]
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011758:	2301      	movs	r3, #1
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	f7fd fcdc 	bl	800f118 <disk_read>
 8011760:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011762:	2b00      	cmp	r3, #0
 8011764:	d004      	beq.n	8011770 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2201      	movs	r2, #1
 801176a:	755a      	strb	r2, [r3, #21]
 801176c:	2301      	movs	r3, #1
 801176e:	e05a      	b.n	8011826 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	697a      	ldr	r2, [r7, #20]
 8011774:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	899b      	ldrh	r3, [r3, #12]
 801177a:	4618      	mov	r0, r3
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	699b      	ldr	r3, [r3, #24]
 8011780:	693a      	ldr	r2, [r7, #16]
 8011782:	8992      	ldrh	r2, [r2, #12]
 8011784:	fbb3 f1f2 	udiv	r1, r3, r2
 8011788:	fb02 f201 	mul.w	r2, r2, r1
 801178c:	1a9b      	subs	r3, r3, r2
 801178e:	1ac3      	subs	r3, r0, r3
 8011790:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	429a      	cmp	r2, r3
 8011798:	d901      	bls.n	801179e <f_write+0x298>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	699b      	ldr	r3, [r3, #24]
 80117a8:	693a      	ldr	r2, [r7, #16]
 80117aa:	8992      	ldrh	r2, [r2, #12]
 80117ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80117b0:	fb02 f200 	mul.w	r2, r2, r0
 80117b4:	1a9b      	subs	r3, r3, r2
 80117b6:	440b      	add	r3, r1
 80117b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117ba:	69f9      	ldr	r1, [r7, #28]
 80117bc:	4618      	mov	r0, r3
 80117be:	f7fd fd8b 	bl	800f2d8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	7d1b      	ldrb	r3, [r3, #20]
 80117c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80117ca:	b2da      	uxtb	r2, r3
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80117d0:	69fa      	ldr	r2, [r7, #28]
 80117d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d4:	4413      	add	r3, r2
 80117d6:	61fb      	str	r3, [r7, #28]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	699a      	ldr	r2, [r3, #24]
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	441a      	add	r2, r3
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	619a      	str	r2, [r3, #24]
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	68da      	ldr	r2, [r3, #12]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	429a      	cmp	r2, r3
 80117ee:	bf38      	it	cc
 80117f0:	461a      	movcc	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	60da      	str	r2, [r3, #12]
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117fc:	441a      	add	r2, r3
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	687a      	ldr	r2, [r7, #4]
 8011804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	f47f aeb5 	bne.w	801157c <f_write+0x76>
 8011812:	e000      	b.n	8011816 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011814:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	7d1b      	ldrb	r3, [r3, #20]
 801181a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801181e:	b2da      	uxtb	r2, r3
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	3730      	adds	r7, #48	; 0x30
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
	...

08011830 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b086      	sub	sp, #24
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f107 0208 	add.w	r2, r7, #8
 801183e:	4611      	mov	r1, r2
 8011840:	4618      	mov	r0, r3
 8011842:	f7ff fab7 	bl	8010db4 <validate>
 8011846:	4603      	mov	r3, r0
 8011848:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801184a:	7dfb      	ldrb	r3, [r7, #23]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d167      	bne.n	8011920 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	7d1b      	ldrb	r3, [r3, #20]
 8011854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011858:	2b00      	cmp	r3, #0
 801185a:	d061      	beq.n	8011920 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	7d1b      	ldrb	r3, [r3, #20]
 8011860:	b25b      	sxtb	r3, r3
 8011862:	2b00      	cmp	r3, #0
 8011864:	da15      	bge.n	8011892 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011866:	68bb      	ldr	r3, [r7, #8]
 8011868:	7858      	ldrb	r0, [r3, #1]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6a1a      	ldr	r2, [r3, #32]
 8011874:	2301      	movs	r3, #1
 8011876:	f7fd fc6f 	bl	800f158 <disk_write>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d001      	beq.n	8011884 <f_sync+0x54>
 8011880:	2301      	movs	r3, #1
 8011882:	e04e      	b.n	8011922 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	7d1b      	ldrb	r3, [r3, #20]
 8011888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801188c:	b2da      	uxtb	r2, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011892:	4b26      	ldr	r3, [pc, #152]	; (801192c <f_sync+0xfc>)
 8011894:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011896:	68ba      	ldr	r2, [r7, #8]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189c:	4619      	mov	r1, r3
 801189e:	4610      	mov	r0, r2
 80118a0:	f7fd ff48 	bl	800f734 <move_window>
 80118a4:	4603      	mov	r3, r0
 80118a6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80118a8:	7dfb      	ldrb	r3, [r7, #23]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d138      	bne.n	8011920 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118b2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	330b      	adds	r3, #11
 80118b8:	781a      	ldrb	r2, [r3, #0]
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	330b      	adds	r3, #11
 80118be:	f042 0220 	orr.w	r2, r2, #32
 80118c2:	b2d2      	uxtb	r2, r2
 80118c4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	461a      	mov	r2, r3
 80118d0:	68f9      	ldr	r1, [r7, #12]
 80118d2:	f7fe fccd 	bl	8010270 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	f103 021c 	add.w	r2, r3, #28
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	4619      	mov	r1, r3
 80118e2:	4610      	mov	r0, r2
 80118e4:	f7fd fccc 	bl	800f280 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	3316      	adds	r3, #22
 80118ec:	6939      	ldr	r1, [r7, #16]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fd fcc6 	bl	800f280 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	3312      	adds	r3, #18
 80118f8:	2100      	movs	r1, #0
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fd fca5 	bl	800f24a <st_word>
					fs->wflag = 1;
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	2201      	movs	r2, #1
 8011904:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	4618      	mov	r0, r3
 801190a:	f7fd ff41 	bl	800f790 <sync_fs>
 801190e:	4603      	mov	r3, r0
 8011910:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	7d1b      	ldrb	r3, [r3, #20]
 8011916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801191a:	b2da      	uxtb	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011920:	7dfb      	ldrb	r3, [r7, #23]
}
 8011922:	4618      	mov	r0, r3
 8011924:	3718      	adds	r7, #24
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	274a0000 	.word	0x274a0000

08011930 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff ff79 	bl	8011830 <f_sync>
 801193e:	4603      	mov	r3, r0
 8011940:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011942:	7bfb      	ldrb	r3, [r7, #15]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d118      	bne.n	801197a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f107 0208 	add.w	r2, r7, #8
 801194e:	4611      	mov	r1, r2
 8011950:	4618      	mov	r0, r3
 8011952:	f7ff fa2f 	bl	8010db4 <validate>
 8011956:	4603      	mov	r3, r0
 8011958:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801195a:	7bfb      	ldrb	r3, [r7, #15]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d10c      	bne.n	801197a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	4618      	mov	r0, r3
 8011966:	f7fd fe41 	bl	800f5ec <dec_lock>
 801196a:	4603      	mov	r3, r0
 801196c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801196e:	7bfb      	ldrb	r3, [r7, #15]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d102      	bne.n	801197a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801197a:	7bfb      	ldrb	r3, [r7, #15]
}
 801197c:	4618      	mov	r0, r3
 801197e:	3710      	adds	r7, #16
 8011980:	46bd      	mov	sp, r7
 8011982:	bd80      	pop	{r7, pc}

08011984 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011984:	b590      	push	{r4, r7, lr}
 8011986:	b091      	sub	sp, #68	; 0x44
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801198c:	f107 0108 	add.w	r1, r7, #8
 8011990:	1d3b      	adds	r3, r7, #4
 8011992:	2200      	movs	r2, #0
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe ff87 	bl	80108a8 <find_volume>
 801199a:	4603      	mov	r3, r0
 801199c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80119a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d131      	bne.n	8011a0c <f_chdir+0x88>
		dj.obj.fs = fs;
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80119ac:	687a      	ldr	r2, [r7, #4]
 80119ae:	f107 030c 	add.w	r3, r7, #12
 80119b2:	4611      	mov	r1, r2
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7fe fe47 	bl	8010648 <follow_path>
 80119ba:	4603      	mov	r3, r0
 80119bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80119c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d11a      	bne.n	80119fe <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80119c8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80119cc:	b25b      	sxtb	r3, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	da03      	bge.n	80119da <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	697a      	ldr	r2, [r7, #20]
 80119d6:	619a      	str	r2, [r3, #24]
 80119d8:	e011      	b.n	80119fe <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80119da:	7cbb      	ldrb	r3, [r7, #18]
 80119dc:	f003 0310 	and.w	r3, r3, #16
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d009      	beq.n	80119f8 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119e8:	68bc      	ldr	r4, [r7, #8]
 80119ea:	4611      	mov	r1, r2
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7fe fc20 	bl	8010232 <ld_clust>
 80119f2:	4603      	mov	r3, r0
 80119f4:	61a3      	str	r3, [r4, #24]
 80119f6:	e002      	b.n	80119fe <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80119f8:	2305      	movs	r3, #5
 80119fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80119fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a02:	2b04      	cmp	r3, #4
 8011a04:	d102      	bne.n	8011a0c <f_chdir+0x88>
 8011a06:	2305      	movs	r3, #5
 8011a08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3744      	adds	r7, #68	; 0x44
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd90      	pop	{r4, r7, pc}

08011a18 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b090      	sub	sp, #64	; 0x40
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	f107 0208 	add.w	r2, r7, #8
 8011a28:	4611      	mov	r1, r2
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7ff f9c2 	bl	8010db4 <validate>
 8011a30:	4603      	mov	r3, r0
 8011a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8011a36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d103      	bne.n	8011a46 <f_lseek+0x2e>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	7d5b      	ldrb	r3, [r3, #21]
 8011a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011a46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d002      	beq.n	8011a54 <f_lseek+0x3c>
 8011a4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011a52:	e201      	b.n	8011e58 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f000 80d9 	beq.w	8011c10 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a64:	d15a      	bne.n	8011b1c <f_lseek+0x104>
			tbl = fp->cltbl;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a6a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	1d1a      	adds	r2, r3, #4
 8011a70:	627a      	str	r2, [r7, #36]	; 0x24
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	617b      	str	r3, [r7, #20]
 8011a76:	2302      	movs	r3, #2
 8011a78:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d03a      	beq.n	8011afc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a88:	613b      	str	r3, [r7, #16]
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a90:	3302      	adds	r3, #2
 8011a92:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a96:	60fb      	str	r3, [r7, #12]
 8011a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a9a:	3301      	adds	r3, #1
 8011a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fd ff03 	bl	800f8ae <get_fat>
 8011aa8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aac:	2b01      	cmp	r3, #1
 8011aae:	d804      	bhi.n	8011aba <f_lseek+0xa2>
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2202      	movs	r2, #2
 8011ab4:	755a      	strb	r2, [r3, #21]
 8011ab6:	2302      	movs	r3, #2
 8011ab8:	e1ce      	b.n	8011e58 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac0:	d104      	bne.n	8011acc <f_lseek+0xb4>
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	2201      	movs	r2, #1
 8011ac6:	755a      	strb	r2, [r3, #21]
 8011ac8:	2301      	movs	r3, #1
 8011aca:	e1c5      	b.n	8011e58 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d0de      	beq.n	8011a94 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d809      	bhi.n	8011af2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	1d1a      	adds	r2, r3, #4
 8011ae2:	627a      	str	r2, [r7, #36]	; 0x24
 8011ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aea:	1d1a      	adds	r2, r3, #4
 8011aec:	627a      	str	r2, [r7, #36]	; 0x24
 8011aee:	693a      	ldr	r2, [r7, #16]
 8011af0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	69db      	ldr	r3, [r3, #28]
 8011af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d3c4      	bcc.n	8011a86 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b02:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8011b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d803      	bhi.n	8011b14 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	2200      	movs	r2, #0
 8011b10:	601a      	str	r2, [r3, #0]
 8011b12:	e19f      	b.n	8011e54 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8011b14:	2311      	movs	r3, #17
 8011b16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011b1a:	e19b      	b.n	8011e54 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	683a      	ldr	r2, [r7, #0]
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d902      	bls.n	8011b2c <f_lseek+0x114>
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f000 818d 	beq.w	8011e54 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	4619      	mov	r1, r3
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f7fe f998 	bl	800fe76 <clmt_clust>
 8011b46:	4602      	mov	r2, r0
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011b4c:	68ba      	ldr	r2, [r7, #8]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	69db      	ldr	r3, [r3, #28]
 8011b52:	4619      	mov	r1, r3
 8011b54:	4610      	mov	r0, r2
 8011b56:	f7fd fe8b 	bl	800f870 <clust2sect>
 8011b5a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d104      	bne.n	8011b6c <f_lseek+0x154>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2202      	movs	r2, #2
 8011b66:	755a      	strb	r2, [r3, #21]
 8011b68:	2302      	movs	r3, #2
 8011b6a:	e175      	b.n	8011e58 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	3b01      	subs	r3, #1
 8011b70:	68ba      	ldr	r2, [r7, #8]
 8011b72:	8992      	ldrh	r2, [r2, #12]
 8011b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b78:	68ba      	ldr	r2, [r7, #8]
 8011b7a:	8952      	ldrh	r2, [r2, #10]
 8011b7c:	3a01      	subs	r2, #1
 8011b7e:	4013      	ands	r3, r2
 8011b80:	69ba      	ldr	r2, [r7, #24]
 8011b82:	4413      	add	r3, r2
 8011b84:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	699b      	ldr	r3, [r3, #24]
 8011b8a:	68ba      	ldr	r2, [r7, #8]
 8011b8c:	8992      	ldrh	r2, [r2, #12]
 8011b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b92:	fb02 f201 	mul.w	r2, r2, r1
 8011b96:	1a9b      	subs	r3, r3, r2
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 815b 	beq.w	8011e54 <f_lseek+0x43c>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6a1b      	ldr	r3, [r3, #32]
 8011ba2:	69ba      	ldr	r2, [r7, #24]
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	f000 8155 	beq.w	8011e54 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	7d1b      	ldrb	r3, [r3, #20]
 8011bae:	b25b      	sxtb	r3, r3
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	da18      	bge.n	8011be6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	7858      	ldrb	r0, [r3, #1]
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1a      	ldr	r2, [r3, #32]
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	f7fd fac8 	bl	800f158 <disk_write>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d004      	beq.n	8011bd8 <f_lseek+0x1c0>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	755a      	strb	r2, [r3, #21]
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	e13f      	b.n	8011e58 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	7d1b      	ldrb	r3, [r3, #20]
 8011bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8011be6:	68bb      	ldr	r3, [r7, #8]
 8011be8:	7858      	ldrb	r0, [r3, #1]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	69ba      	ldr	r2, [r7, #24]
 8011bf4:	f7fd fa90 	bl	800f118 <disk_read>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d004      	beq.n	8011c08 <f_lseek+0x1f0>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2201      	movs	r2, #1
 8011c02:	755a      	strb	r2, [r3, #21]
 8011c04:	2301      	movs	r3, #1
 8011c06:	e127      	b.n	8011e58 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	69ba      	ldr	r2, [r7, #24]
 8011c0c:	621a      	str	r2, [r3, #32]
 8011c0e:	e121      	b.n	8011e54 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	683a      	ldr	r2, [r7, #0]
 8011c16:	429a      	cmp	r2, r3
 8011c18:	d908      	bls.n	8011c2c <f_lseek+0x214>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	7d1b      	ldrb	r3, [r3, #20]
 8011c1e:	f003 0302 	and.w	r3, r3, #2
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d102      	bne.n	8011c2c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	637b      	str	r3, [r7, #52]	; 0x34
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c3a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	f000 80b5 	beq.w	8011dae <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	895b      	ldrh	r3, [r3, #10]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	68bb      	ldr	r3, [r7, #8]
 8011c4c:	899b      	ldrh	r3, [r3, #12]
 8011c4e:	fb03 f302 	mul.w	r3, r3, r2
 8011c52:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011c54:	6a3b      	ldr	r3, [r7, #32]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d01b      	beq.n	8011c92 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011c5a:	683b      	ldr	r3, [r7, #0]
 8011c5c:	1e5a      	subs	r2, r3, #1
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8011c64:	6a3b      	ldr	r3, [r7, #32]
 8011c66:	1e59      	subs	r1, r3, #1
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d30f      	bcc.n	8011c92 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011c72:	6a3b      	ldr	r3, [r7, #32]
 8011c74:	1e5a      	subs	r2, r3, #1
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	425b      	negs	r3, r3
 8011c7a:	401a      	ands	r2, r3
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	683a      	ldr	r2, [r7, #0]
 8011c86:	1ad3      	subs	r3, r2, r3
 8011c88:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	69db      	ldr	r3, [r3, #28]
 8011c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c90:	e022      	b.n	8011cd8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	689b      	ldr	r3, [r3, #8]
 8011c96:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d119      	bne.n	8011cd2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7fe f84f 	bl	800fd46 <create_chain>
 8011ca8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d104      	bne.n	8011cba <f_lseek+0x2a2>
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2202      	movs	r2, #2
 8011cb4:	755a      	strb	r2, [r3, #21]
 8011cb6:	2302      	movs	r3, #2
 8011cb8:	e0ce      	b.n	8011e58 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc0:	d104      	bne.n	8011ccc <f_lseek+0x2b4>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	755a      	strb	r2, [r3, #21]
 8011cc8:	2301      	movs	r3, #1
 8011cca:	e0c5      	b.n	8011e58 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cd0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cd6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d067      	beq.n	8011dae <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8011cde:	e03a      	b.n	8011d56 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8011ce0:	683a      	ldr	r2, [r7, #0]
 8011ce2:	69fb      	ldr	r3, [r7, #28]
 8011ce4:	1ad3      	subs	r3, r2, r3
 8011ce6:	603b      	str	r3, [r7, #0]
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	699a      	ldr	r2, [r3, #24]
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	441a      	add	r2, r3
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	7d1b      	ldrb	r3, [r3, #20]
 8011cf8:	f003 0302 	and.w	r3, r3, #2
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d00b      	beq.n	8011d18 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fe f81e 	bl	800fd46 <create_chain>
 8011d0a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d108      	bne.n	8011d24 <f_lseek+0x30c>
							ofs = 0; break;
 8011d12:	2300      	movs	r3, #0
 8011d14:	603b      	str	r3, [r7, #0]
 8011d16:	e022      	b.n	8011d5e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fd fdc6 	bl	800f8ae <get_fat>
 8011d22:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d2a:	d104      	bne.n	8011d36 <f_lseek+0x31e>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	755a      	strb	r2, [r3, #21]
 8011d32:	2301      	movs	r3, #1
 8011d34:	e090      	b.n	8011e58 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d904      	bls.n	8011d46 <f_lseek+0x32e>
 8011d3c:	68bb      	ldr	r3, [r7, #8]
 8011d3e:	69db      	ldr	r3, [r3, #28]
 8011d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d304      	bcc.n	8011d50 <f_lseek+0x338>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2202      	movs	r2, #2
 8011d4a:	755a      	strb	r2, [r3, #21]
 8011d4c:	2302      	movs	r3, #2
 8011d4e:	e083      	b.n	8011e58 <f_lseek+0x440>
					fp->clust = clst;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d54:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011d56:	683a      	ldr	r2, [r7, #0]
 8011d58:	69fb      	ldr	r3, [r7, #28]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d8c0      	bhi.n	8011ce0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	699a      	ldr	r2, [r3, #24]
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	441a      	add	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	899b      	ldrh	r3, [r3, #12]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d76:	fb02 f201 	mul.w	r2, r2, r1
 8011d7a:	1a9b      	subs	r3, r3, r2
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d016      	beq.n	8011dae <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7fd fd73 	bl	800f870 <clust2sect>
 8011d8a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d104      	bne.n	8011d9c <f_lseek+0x384>
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2202      	movs	r2, #2
 8011d96:	755a      	strb	r2, [r3, #21]
 8011d98:	2302      	movs	r3, #2
 8011d9a:	e05d      	b.n	8011e58 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	899b      	ldrh	r3, [r3, #12]
 8011da0:	461a      	mov	r2, r3
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011daa:	4413      	add	r3, r2
 8011dac:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	699a      	ldr	r2, [r3, #24]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	68db      	ldr	r3, [r3, #12]
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d90a      	bls.n	8011dd0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	699a      	ldr	r2, [r3, #24]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	7d1b      	ldrb	r3, [r3, #20]
 8011dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dca:	b2da      	uxtb	r2, r3
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	699b      	ldr	r3, [r3, #24]
 8011dd4:	68ba      	ldr	r2, [r7, #8]
 8011dd6:	8992      	ldrh	r2, [r2, #12]
 8011dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ddc:	fb02 f201 	mul.w	r2, r2, r1
 8011de0:	1a9b      	subs	r3, r3, r2
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d036      	beq.n	8011e54 <f_lseek+0x43c>
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6a1b      	ldr	r3, [r3, #32]
 8011dea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d031      	beq.n	8011e54 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	7d1b      	ldrb	r3, [r3, #20]
 8011df4:	b25b      	sxtb	r3, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	da18      	bge.n	8011e2c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	7858      	ldrb	r0, [r3, #1]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6a1a      	ldr	r2, [r3, #32]
 8011e08:	2301      	movs	r3, #1
 8011e0a:	f7fd f9a5 	bl	800f158 <disk_write>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d004      	beq.n	8011e1e <f_lseek+0x406>
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2201      	movs	r2, #1
 8011e18:	755a      	strb	r2, [r3, #21]
 8011e1a:	2301      	movs	r3, #1
 8011e1c:	e01c      	b.n	8011e58 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	7d1b      	ldrb	r3, [r3, #20]
 8011e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e26:	b2da      	uxtb	r2, r3
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011e2c:	68bb      	ldr	r3, [r7, #8]
 8011e2e:	7858      	ldrb	r0, [r3, #1]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e36:	2301      	movs	r3, #1
 8011e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e3a:	f7fd f96d 	bl	800f118 <disk_read>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d004      	beq.n	8011e4e <f_lseek+0x436>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2201      	movs	r2, #1
 8011e48:	755a      	strb	r2, [r3, #21]
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	e004      	b.n	8011e58 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e52:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3740      	adds	r7, #64	; 0x40
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b09e      	sub	sp, #120	; 0x78
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011e6c:	f107 010c 	add.w	r1, r7, #12
 8011e70:	1d3b      	adds	r3, r7, #4
 8011e72:	2202      	movs	r2, #2
 8011e74:	4618      	mov	r0, r3
 8011e76:	f7fe fd17 	bl	80108a8 <find_volume>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011e84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f040 80a4 	bne.w	8011fd6 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011e8e:	687a      	ldr	r2, [r7, #4]
 8011e90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011e94:	4611      	mov	r1, r2
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fe fbd6 	bl	8010648 <follow_path>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011ea2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d108      	bne.n	8011ebc <f_unlink+0x5c>
 8011eaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011eae:	f003 0320 	and.w	r3, r3, #32
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d002      	beq.n	8011ebc <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011eb6:	2306      	movs	r3, #6
 8011eb8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011ebc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d108      	bne.n	8011ed6 <f_unlink+0x76>
 8011ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ec8:	2102      	movs	r1, #2
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fd fa82 	bl	800f3d4 <chk_lock>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011ed6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d17b      	bne.n	8011fd6 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011ede:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011ee2:	b25b      	sxtb	r3, r3
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	da03      	bge.n	8011ef0 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011ee8:	2306      	movs	r3, #6
 8011eea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011eee:	e008      	b.n	8011f02 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011ef0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011ef4:	f003 0301 	and.w	r3, r3, #1
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d002      	beq.n	8011f02 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011efc:	2307      	movs	r3, #7
 8011efe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011f02:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d13d      	bne.n	8011f86 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f0e:	4611      	mov	r1, r2
 8011f10:	4618      	mov	r0, r3
 8011f12:	f7fe f98e 	bl	8010232 <ld_clust>
 8011f16:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011f18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011f1c:	f003 0310 	and.w	r3, r3, #16
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d030      	beq.n	8011f86 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	699b      	ldr	r3, [r3, #24]
 8011f28:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d103      	bne.n	8011f36 <f_unlink+0xd6>
						res = FR_DENIED;
 8011f2e:	2307      	movs	r3, #7
 8011f30:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011f34:	e027      	b.n	8011f86 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f3c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011f3e:	f107 0310 	add.w	r3, r7, #16
 8011f42:	2100      	movs	r1, #0
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fd ffce 	bl	800fee6 <dir_sdi>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011f50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d116      	bne.n	8011f86 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011f58:	f107 0310 	add.w	r3, r7, #16
 8011f5c:	2100      	movs	r1, #0
 8011f5e:	4618      	mov	r0, r3
 8011f60:	f7fe f9a6 	bl	80102b0 <dir_read>
 8011f64:	4603      	mov	r3, r0
 8011f66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011f6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d102      	bne.n	8011f78 <f_unlink+0x118>
 8011f72:	2307      	movs	r3, #7
 8011f74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011f78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	d102      	bne.n	8011f86 <f_unlink+0x126>
 8011f80:	2300      	movs	r3, #0
 8011f82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011f86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d123      	bne.n	8011fd6 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fe fa70 	bl	8010478 <dir_remove>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011f9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d10c      	bne.n	8011fc0 <f_unlink+0x160>
 8011fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d009      	beq.n	8011fc0 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011fac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7fd fe61 	bl	800fc7c <remove_chain>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011fc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <f_unlink+0x176>
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7fd fbe0 	bl	800f790 <sync_fs>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011fd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3778      	adds	r7, #120	; 0x78
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
	...

08011fe4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011fe4:	b580      	push	{r7, lr}
 8011fe6:	b096      	sub	sp, #88	; 0x58
 8011fe8:	af00      	add	r7, sp, #0
 8011fea:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011fec:	f107 0108 	add.w	r1, r7, #8
 8011ff0:	1d3b      	adds	r3, r7, #4
 8011ff2:	2202      	movs	r2, #2
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fe fc57 	bl	80108a8 <find_volume>
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012008:	2b00      	cmp	r3, #0
 801200a:	f040 80fe 	bne.w	801220a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801200e:	687a      	ldr	r2, [r7, #4]
 8012010:	f107 030c 	add.w	r3, r7, #12
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f7fe fb16 	bl	8010648 <follow_path>
 801201c:	4603      	mov	r3, r0
 801201e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012026:	2b00      	cmp	r3, #0
 8012028:	d102      	bne.n	8012030 <f_mkdir+0x4c>
 801202a:	2308      	movs	r3, #8
 801202c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012030:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012034:	2b04      	cmp	r3, #4
 8012036:	d108      	bne.n	801204a <f_mkdir+0x66>
 8012038:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801203c:	f003 0320 	and.w	r3, r3, #32
 8012040:	2b00      	cmp	r3, #0
 8012042:	d002      	beq.n	801204a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8012044:	2306      	movs	r3, #6
 8012046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801204a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801204e:	2b04      	cmp	r3, #4
 8012050:	f040 80db 	bne.w	801220a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012054:	f107 030c 	add.w	r3, r7, #12
 8012058:	2100      	movs	r1, #0
 801205a:	4618      	mov	r0, r3
 801205c:	f7fd fe73 	bl	800fd46 <create_chain>
 8012060:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	895b      	ldrh	r3, [r3, #10]
 8012066:	461a      	mov	r2, r3
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	899b      	ldrh	r3, [r3, #12]
 801206c:	fb03 f302 	mul.w	r3, r3, r2
 8012070:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012072:	2300      	movs	r3, #0
 8012074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801207a:	2b00      	cmp	r3, #0
 801207c:	d102      	bne.n	8012084 <f_mkdir+0xa0>
 801207e:	2307      	movs	r3, #7
 8012080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012086:	2b01      	cmp	r3, #1
 8012088:	d102      	bne.n	8012090 <f_mkdir+0xac>
 801208a:	2302      	movs	r3, #2
 801208c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012096:	d102      	bne.n	801209e <f_mkdir+0xba>
 8012098:	2301      	movs	r3, #1
 801209a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801209e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d106      	bne.n	80120b4 <f_mkdir+0xd0>
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fd faff 	bl	800f6ac <sync_window>
 80120ae:	4603      	mov	r3, r0
 80120b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80120b4:	4b58      	ldr	r3, [pc, #352]	; (8012218 <f_mkdir+0x234>)
 80120b6:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80120b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d16c      	bne.n	801219a <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7fd fbd3 	bl	800f870 <clust2sect>
 80120ca:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	3338      	adds	r3, #56	; 0x38
 80120d0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	899b      	ldrh	r3, [r3, #12]
 80120d6:	461a      	mov	r2, r3
 80120d8:	2100      	movs	r1, #0
 80120da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80120dc:	f7fd f91d 	bl	800f31a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80120e0:	220b      	movs	r2, #11
 80120e2:	2120      	movs	r1, #32
 80120e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80120e6:	f7fd f918 	bl	800f31a <mem_set>
					dir[DIR_Name] = '.';
 80120ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120ec:	222e      	movs	r2, #46	; 0x2e
 80120ee:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80120f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120f2:	330b      	adds	r3, #11
 80120f4:	2210      	movs	r2, #16
 80120f6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80120f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120fa:	3316      	adds	r3, #22
 80120fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80120fe:	4618      	mov	r0, r3
 8012100:	f7fd f8be 	bl	800f280 <st_dword>
					st_clust(fs, dir, dcl);
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801210a:	4618      	mov	r0, r3
 801210c:	f7fe f8b0 	bl	8010270 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012112:	3320      	adds	r3, #32
 8012114:	2220      	movs	r2, #32
 8012116:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012118:	4618      	mov	r0, r3
 801211a:	f7fd f8dd 	bl	800f2d8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801211e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012120:	3321      	adds	r3, #33	; 0x21
 8012122:	222e      	movs	r2, #46	; 0x2e
 8012124:	701a      	strb	r2, [r3, #0]
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	781b      	ldrb	r3, [r3, #0]
 801212e:	2b03      	cmp	r3, #3
 8012130:	d106      	bne.n	8012140 <f_mkdir+0x15c>
 8012132:	68bb      	ldr	r3, [r7, #8]
 8012134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012138:	429a      	cmp	r2, r3
 801213a:	d101      	bne.n	8012140 <f_mkdir+0x15c>
 801213c:	2300      	movs	r3, #0
 801213e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012140:	68b8      	ldr	r0, [r7, #8]
 8012142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012144:	3320      	adds	r3, #32
 8012146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012148:	4619      	mov	r1, r3
 801214a:	f7fe f891 	bl	8010270 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	895b      	ldrh	r3, [r3, #10]
 8012152:	653b      	str	r3, [r7, #80]	; 0x50
 8012154:	e01c      	b.n	8012190 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8012156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012158:	1c5a      	adds	r2, r3, #1
 801215a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801215c:	68ba      	ldr	r2, [r7, #8]
 801215e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	2201      	movs	r2, #1
 8012164:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	4618      	mov	r0, r3
 801216a:	f7fd fa9f 	bl	800f6ac <sync_window>
 801216e:	4603      	mov	r3, r0
 8012170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012174:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012178:	2b00      	cmp	r3, #0
 801217a:	d10d      	bne.n	8012198 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	899b      	ldrh	r3, [r3, #12]
 8012180:	461a      	mov	r2, r3
 8012182:	2100      	movs	r1, #0
 8012184:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012186:	f7fd f8c8 	bl	800f31a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801218a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801218c:	3b01      	subs	r3, #1
 801218e:	653b      	str	r3, [r7, #80]	; 0x50
 8012190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012192:	2b00      	cmp	r3, #0
 8012194:	d1df      	bne.n	8012156 <f_mkdir+0x172>
 8012196:	e000      	b.n	801219a <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012198:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801219a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d107      	bne.n	80121b2 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80121a2:	f107 030c 	add.w	r3, r7, #12
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe f934 	bl	8010414 <dir_register>
 80121ac:	4603      	mov	r3, r0
 80121ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80121b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d120      	bne.n	80121fc <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80121ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121bc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80121be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121c0:	3316      	adds	r3, #22
 80121c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7fd f85b 	bl	800f280 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7fe f84d 	bl	8010270 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80121d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121d8:	330b      	adds	r3, #11
 80121da:	2210      	movs	r2, #16
 80121dc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2201      	movs	r2, #1
 80121e2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80121e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d10e      	bne.n	801220a <f_mkdir+0x226>
					res = sync_fs(fs);
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fd face 	bl	800f790 <sync_fs>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80121fa:	e006      	b.n	801220a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80121fc:	f107 030c 	add.w	r3, r7, #12
 8012200:	2200      	movs	r2, #0
 8012202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012204:	4618      	mov	r0, r3
 8012206:	f7fd fd39 	bl	800fc7c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801220a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801220e:	4618      	mov	r0, r3
 8012210:	3758      	adds	r7, #88	; 0x58
 8012212:	46bd      	mov	sp, r7
 8012214:	bd80      	pop	{r7, pc}
 8012216:	bf00      	nop
 8012218:	274a0000 	.word	0x274a0000

0801221c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b088      	sub	sp, #32
 8012220:	af00      	add	r7, sp, #0
 8012222:	60f8      	str	r0, [r7, #12]
 8012224:	60b9      	str	r1, [r7, #8]
 8012226:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012228:	2300      	movs	r3, #0
 801222a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012230:	e017      	b.n	8012262 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8012232:	f107 0310 	add.w	r3, r7, #16
 8012236:	f107 0114 	add.w	r1, r7, #20
 801223a:	2201      	movs	r2, #1
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff f803 	bl	8011248 <f_read>
		if (rc != 1) break;
 8012242:	693b      	ldr	r3, [r7, #16]
 8012244:	2b01      	cmp	r3, #1
 8012246:	d112      	bne.n	801226e <f_gets+0x52>
		c = s[0];
 8012248:	7d3b      	ldrb	r3, [r7, #20]
 801224a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	1c5a      	adds	r2, r3, #1
 8012250:	61ba      	str	r2, [r7, #24]
 8012252:	7dfa      	ldrb	r2, [r7, #23]
 8012254:	701a      	strb	r2, [r3, #0]
		n++;
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	3301      	adds	r3, #1
 801225a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801225c:	7dfb      	ldrb	r3, [r7, #23]
 801225e:	2b0a      	cmp	r3, #10
 8012260:	d007      	beq.n	8012272 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012262:	68bb      	ldr	r3, [r7, #8]
 8012264:	3b01      	subs	r3, #1
 8012266:	69fa      	ldr	r2, [r7, #28]
 8012268:	429a      	cmp	r2, r3
 801226a:	dbe2      	blt.n	8012232 <f_gets+0x16>
 801226c:	e002      	b.n	8012274 <f_gets+0x58>
		if (rc != 1) break;
 801226e:	bf00      	nop
 8012270:	e000      	b.n	8012274 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8012272:	bf00      	nop
	}
	*p = 0;
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	2200      	movs	r2, #0
 8012278:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d001      	beq.n	8012284 <f_gets+0x68>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	e000      	b.n	8012286 <f_gets+0x6a>
 8012284:	2300      	movs	r3, #0
}
 8012286:	4618      	mov	r0, r3
 8012288:	3720      	adds	r7, #32
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
	...

08012290 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012290:	b480      	push	{r7}
 8012292:	b087      	sub	sp, #28
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	4613      	mov	r3, r2
 801229c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801229e:	2301      	movs	r3, #1
 80122a0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80122a2:	2300      	movs	r3, #0
 80122a4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80122a6:	4b1f      	ldr	r3, [pc, #124]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122a8:	7a5b      	ldrb	r3, [r3, #9]
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d131      	bne.n	8012314 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80122b0:	4b1c      	ldr	r3, [pc, #112]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122b2:	7a5b      	ldrb	r3, [r3, #9]
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	461a      	mov	r2, r3
 80122b8:	4b1a      	ldr	r3, [pc, #104]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122ba:	2100      	movs	r1, #0
 80122bc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80122be:	4b19      	ldr	r3, [pc, #100]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122c0:	7a5b      	ldrb	r3, [r3, #9]
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	4a17      	ldr	r2, [pc, #92]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	4413      	add	r3, r2
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80122ce:	4b15      	ldr	r3, [pc, #84]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122d0:	7a5b      	ldrb	r3, [r3, #9]
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	461a      	mov	r2, r3
 80122d6:	4b13      	ldr	r3, [pc, #76]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122d8:	4413      	add	r3, r2
 80122da:	79fa      	ldrb	r2, [r7, #7]
 80122dc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80122de:	4b11      	ldr	r3, [pc, #68]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122e0:	7a5b      	ldrb	r3, [r3, #9]
 80122e2:	b2db      	uxtb	r3, r3
 80122e4:	1c5a      	adds	r2, r3, #1
 80122e6:	b2d1      	uxtb	r1, r2
 80122e8:	4a0e      	ldr	r2, [pc, #56]	; (8012324 <FATFS_LinkDriverEx+0x94>)
 80122ea:	7251      	strb	r1, [r2, #9]
 80122ec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80122ee:	7dbb      	ldrb	r3, [r7, #22]
 80122f0:	3330      	adds	r3, #48	; 0x30
 80122f2:	b2da      	uxtb	r2, r3
 80122f4:	68bb      	ldr	r3, [r7, #8]
 80122f6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	3301      	adds	r3, #1
 80122fc:	223a      	movs	r2, #58	; 0x3a
 80122fe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012300:	68bb      	ldr	r3, [r7, #8]
 8012302:	3302      	adds	r3, #2
 8012304:	222f      	movs	r2, #47	; 0x2f
 8012306:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	3303      	adds	r3, #3
 801230c:	2200      	movs	r2, #0
 801230e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012310:	2300      	movs	r3, #0
 8012312:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012314:	7dfb      	ldrb	r3, [r7, #23]
}
 8012316:	4618      	mov	r0, r3
 8012318:	371c      	adds	r7, #28
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr
 8012322:	bf00      	nop
 8012324:	20033628 	.word	0x20033628

08012328 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012332:	2200      	movs	r2, #0
 8012334:	6839      	ldr	r1, [r7, #0]
 8012336:	6878      	ldr	r0, [r7, #4]
 8012338:	f7ff ffaa 	bl	8012290 <FATFS_LinkDriverEx>
 801233c:	4603      	mov	r3, r0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <__cxa_guard_acquire>:
 8012346:	6803      	ldr	r3, [r0, #0]
 8012348:	07db      	lsls	r3, r3, #31
 801234a:	d406      	bmi.n	801235a <__cxa_guard_acquire+0x14>
 801234c:	7843      	ldrb	r3, [r0, #1]
 801234e:	b103      	cbz	r3, 8012352 <__cxa_guard_acquire+0xc>
 8012350:	deff      	udf	#255	; 0xff
 8012352:	2301      	movs	r3, #1
 8012354:	7043      	strb	r3, [r0, #1]
 8012356:	4618      	mov	r0, r3
 8012358:	4770      	bx	lr
 801235a:	2000      	movs	r0, #0
 801235c:	4770      	bx	lr

0801235e <__cxa_guard_release>:
 801235e:	2301      	movs	r3, #1
 8012360:	6003      	str	r3, [r0, #0]
 8012362:	4770      	bx	lr
 8012364:	0000      	movs	r0, r0
	...

08012368 <cos>:
 8012368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801236a:	ec51 0b10 	vmov	r0, r1, d0
 801236e:	4a1e      	ldr	r2, [pc, #120]	; (80123e8 <cos+0x80>)
 8012370:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012374:	4293      	cmp	r3, r2
 8012376:	dc06      	bgt.n	8012386 <cos+0x1e>
 8012378:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80123e0 <cos+0x78>
 801237c:	f000 fa74 	bl	8012868 <__kernel_cos>
 8012380:	ec51 0b10 	vmov	r0, r1, d0
 8012384:	e007      	b.n	8012396 <cos+0x2e>
 8012386:	4a19      	ldr	r2, [pc, #100]	; (80123ec <cos+0x84>)
 8012388:	4293      	cmp	r3, r2
 801238a:	dd09      	ble.n	80123a0 <cos+0x38>
 801238c:	ee10 2a10 	vmov	r2, s0
 8012390:	460b      	mov	r3, r1
 8012392:	f7ed ff91 	bl	80002b8 <__aeabi_dsub>
 8012396:	ec41 0b10 	vmov	d0, r0, r1
 801239a:	b005      	add	sp, #20
 801239c:	f85d fb04 	ldr.w	pc, [sp], #4
 80123a0:	4668      	mov	r0, sp
 80123a2:	f000 f86d 	bl	8012480 <__ieee754_rem_pio2>
 80123a6:	f000 0003 	and.w	r0, r0, #3
 80123aa:	2801      	cmp	r0, #1
 80123ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80123b0:	ed9d 0b00 	vldr	d0, [sp]
 80123b4:	d007      	beq.n	80123c6 <cos+0x5e>
 80123b6:	2802      	cmp	r0, #2
 80123b8:	d00e      	beq.n	80123d8 <cos+0x70>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d0de      	beq.n	801237c <cos+0x14>
 80123be:	2001      	movs	r0, #1
 80123c0:	f000 fe5a 	bl	8013078 <__kernel_sin>
 80123c4:	e7dc      	b.n	8012380 <cos+0x18>
 80123c6:	f000 fe57 	bl	8013078 <__kernel_sin>
 80123ca:	ec53 2b10 	vmov	r2, r3, d0
 80123ce:	ee10 0a10 	vmov	r0, s0
 80123d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80123d6:	e7de      	b.n	8012396 <cos+0x2e>
 80123d8:	f000 fa46 	bl	8012868 <__kernel_cos>
 80123dc:	e7f5      	b.n	80123ca <cos+0x62>
 80123de:	bf00      	nop
	...
 80123e8:	3fe921fb 	.word	0x3fe921fb
 80123ec:	7fefffff 	.word	0x7fefffff

080123f0 <sin>:
 80123f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123f2:	ec51 0b10 	vmov	r0, r1, d0
 80123f6:	4a20      	ldr	r2, [pc, #128]	; (8012478 <sin+0x88>)
 80123f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80123fc:	4293      	cmp	r3, r2
 80123fe:	dc07      	bgt.n	8012410 <sin+0x20>
 8012400:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012470 <sin+0x80>
 8012404:	2000      	movs	r0, #0
 8012406:	f000 fe37 	bl	8013078 <__kernel_sin>
 801240a:	ec51 0b10 	vmov	r0, r1, d0
 801240e:	e007      	b.n	8012420 <sin+0x30>
 8012410:	4a1a      	ldr	r2, [pc, #104]	; (801247c <sin+0x8c>)
 8012412:	4293      	cmp	r3, r2
 8012414:	dd09      	ble.n	801242a <sin+0x3a>
 8012416:	ee10 2a10 	vmov	r2, s0
 801241a:	460b      	mov	r3, r1
 801241c:	f7ed ff4c 	bl	80002b8 <__aeabi_dsub>
 8012420:	ec41 0b10 	vmov	d0, r0, r1
 8012424:	b005      	add	sp, #20
 8012426:	f85d fb04 	ldr.w	pc, [sp], #4
 801242a:	4668      	mov	r0, sp
 801242c:	f000 f828 	bl	8012480 <__ieee754_rem_pio2>
 8012430:	f000 0003 	and.w	r0, r0, #3
 8012434:	2801      	cmp	r0, #1
 8012436:	ed9d 1b02 	vldr	d1, [sp, #8]
 801243a:	ed9d 0b00 	vldr	d0, [sp]
 801243e:	d004      	beq.n	801244a <sin+0x5a>
 8012440:	2802      	cmp	r0, #2
 8012442:	d005      	beq.n	8012450 <sin+0x60>
 8012444:	b970      	cbnz	r0, 8012464 <sin+0x74>
 8012446:	2001      	movs	r0, #1
 8012448:	e7dd      	b.n	8012406 <sin+0x16>
 801244a:	f000 fa0d 	bl	8012868 <__kernel_cos>
 801244e:	e7dc      	b.n	801240a <sin+0x1a>
 8012450:	2001      	movs	r0, #1
 8012452:	f000 fe11 	bl	8013078 <__kernel_sin>
 8012456:	ec53 2b10 	vmov	r2, r3, d0
 801245a:	ee10 0a10 	vmov	r0, s0
 801245e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012462:	e7dd      	b.n	8012420 <sin+0x30>
 8012464:	f000 fa00 	bl	8012868 <__kernel_cos>
 8012468:	e7f5      	b.n	8012456 <sin+0x66>
 801246a:	bf00      	nop
 801246c:	f3af 8000 	nop.w
	...
 8012478:	3fe921fb 	.word	0x3fe921fb
 801247c:	7fefffff 	.word	0x7fefffff

08012480 <__ieee754_rem_pio2>:
 8012480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012484:	ec57 6b10 	vmov	r6, r7, d0
 8012488:	4bc3      	ldr	r3, [pc, #780]	; (8012798 <__ieee754_rem_pio2+0x318>)
 801248a:	b08d      	sub	sp, #52	; 0x34
 801248c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012490:	4598      	cmp	r8, r3
 8012492:	4604      	mov	r4, r0
 8012494:	9704      	str	r7, [sp, #16]
 8012496:	dc07      	bgt.n	80124a8 <__ieee754_rem_pio2+0x28>
 8012498:	2200      	movs	r2, #0
 801249a:	2300      	movs	r3, #0
 801249c:	ed84 0b00 	vstr	d0, [r4]
 80124a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80124a4:	2500      	movs	r5, #0
 80124a6:	e027      	b.n	80124f8 <__ieee754_rem_pio2+0x78>
 80124a8:	4bbc      	ldr	r3, [pc, #752]	; (801279c <__ieee754_rem_pio2+0x31c>)
 80124aa:	4598      	cmp	r8, r3
 80124ac:	dc75      	bgt.n	801259a <__ieee754_rem_pio2+0x11a>
 80124ae:	9b04      	ldr	r3, [sp, #16]
 80124b0:	4dbb      	ldr	r5, [pc, #748]	; (80127a0 <__ieee754_rem_pio2+0x320>)
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	ee10 0a10 	vmov	r0, s0
 80124b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8012760 <__ieee754_rem_pio2+0x2e0>)
 80124ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124be:	4639      	mov	r1, r7
 80124c0:	dd36      	ble.n	8012530 <__ieee754_rem_pio2+0xb0>
 80124c2:	f7ed fef9 	bl	80002b8 <__aeabi_dsub>
 80124c6:	45a8      	cmp	r8, r5
 80124c8:	4606      	mov	r6, r0
 80124ca:	460f      	mov	r7, r1
 80124cc:	d018      	beq.n	8012500 <__ieee754_rem_pio2+0x80>
 80124ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8012768 <__ieee754_rem_pio2+0x2e8>)
 80124d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d4:	f7ed fef0 	bl	80002b8 <__aeabi_dsub>
 80124d8:	4602      	mov	r2, r0
 80124da:	460b      	mov	r3, r1
 80124dc:	e9c4 2300 	strd	r2, r3, [r4]
 80124e0:	4630      	mov	r0, r6
 80124e2:	4639      	mov	r1, r7
 80124e4:	f7ed fee8 	bl	80002b8 <__aeabi_dsub>
 80124e8:	a39f      	add	r3, pc, #636	; (adr r3, 8012768 <__ieee754_rem_pio2+0x2e8>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	f7ed fee3 	bl	80002b8 <__aeabi_dsub>
 80124f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80124f6:	2501      	movs	r5, #1
 80124f8:	4628      	mov	r0, r5
 80124fa:	b00d      	add	sp, #52	; 0x34
 80124fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012500:	a39b      	add	r3, pc, #620	; (adr r3, 8012770 <__ieee754_rem_pio2+0x2f0>)
 8012502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012506:	f7ed fed7 	bl	80002b8 <__aeabi_dsub>
 801250a:	a39b      	add	r3, pc, #620	; (adr r3, 8012778 <__ieee754_rem_pio2+0x2f8>)
 801250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012510:	4606      	mov	r6, r0
 8012512:	460f      	mov	r7, r1
 8012514:	f7ed fed0 	bl	80002b8 <__aeabi_dsub>
 8012518:	4602      	mov	r2, r0
 801251a:	460b      	mov	r3, r1
 801251c:	e9c4 2300 	strd	r2, r3, [r4]
 8012520:	4630      	mov	r0, r6
 8012522:	4639      	mov	r1, r7
 8012524:	f7ed fec8 	bl	80002b8 <__aeabi_dsub>
 8012528:	a393      	add	r3, pc, #588	; (adr r3, 8012778 <__ieee754_rem_pio2+0x2f8>)
 801252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252e:	e7de      	b.n	80124ee <__ieee754_rem_pio2+0x6e>
 8012530:	f7ed fec4 	bl	80002bc <__adddf3>
 8012534:	45a8      	cmp	r8, r5
 8012536:	4606      	mov	r6, r0
 8012538:	460f      	mov	r7, r1
 801253a:	d016      	beq.n	801256a <__ieee754_rem_pio2+0xea>
 801253c:	a38a      	add	r3, pc, #552	; (adr r3, 8012768 <__ieee754_rem_pio2+0x2e8>)
 801253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012542:	f7ed febb 	bl	80002bc <__adddf3>
 8012546:	4602      	mov	r2, r0
 8012548:	460b      	mov	r3, r1
 801254a:	e9c4 2300 	strd	r2, r3, [r4]
 801254e:	4630      	mov	r0, r6
 8012550:	4639      	mov	r1, r7
 8012552:	f7ed feb1 	bl	80002b8 <__aeabi_dsub>
 8012556:	a384      	add	r3, pc, #528	; (adr r3, 8012768 <__ieee754_rem_pio2+0x2e8>)
 8012558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255c:	f7ed feae 	bl	80002bc <__adddf3>
 8012560:	f04f 35ff 	mov.w	r5, #4294967295
 8012564:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012568:	e7c6      	b.n	80124f8 <__ieee754_rem_pio2+0x78>
 801256a:	a381      	add	r3, pc, #516	; (adr r3, 8012770 <__ieee754_rem_pio2+0x2f0>)
 801256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012570:	f7ed fea4 	bl	80002bc <__adddf3>
 8012574:	a380      	add	r3, pc, #512	; (adr r3, 8012778 <__ieee754_rem_pio2+0x2f8>)
 8012576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257a:	4606      	mov	r6, r0
 801257c:	460f      	mov	r7, r1
 801257e:	f7ed fe9d 	bl	80002bc <__adddf3>
 8012582:	4602      	mov	r2, r0
 8012584:	460b      	mov	r3, r1
 8012586:	e9c4 2300 	strd	r2, r3, [r4]
 801258a:	4630      	mov	r0, r6
 801258c:	4639      	mov	r1, r7
 801258e:	f7ed fe93 	bl	80002b8 <__aeabi_dsub>
 8012592:	a379      	add	r3, pc, #484	; (adr r3, 8012778 <__ieee754_rem_pio2+0x2f8>)
 8012594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012598:	e7e0      	b.n	801255c <__ieee754_rem_pio2+0xdc>
 801259a:	4b82      	ldr	r3, [pc, #520]	; (80127a4 <__ieee754_rem_pio2+0x324>)
 801259c:	4598      	cmp	r8, r3
 801259e:	f300 80d0 	bgt.w	8012742 <__ieee754_rem_pio2+0x2c2>
 80125a2:	f000 fe23 	bl	80131ec <fabs>
 80125a6:	ec57 6b10 	vmov	r6, r7, d0
 80125aa:	ee10 0a10 	vmov	r0, s0
 80125ae:	a374      	add	r3, pc, #464	; (adr r3, 8012780 <__ieee754_rem_pio2+0x300>)
 80125b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b4:	4639      	mov	r1, r7
 80125b6:	f7ee f837 	bl	8000628 <__aeabi_dmul>
 80125ba:	2200      	movs	r2, #0
 80125bc:	4b7a      	ldr	r3, [pc, #488]	; (80127a8 <__ieee754_rem_pio2+0x328>)
 80125be:	f7ed fe7d 	bl	80002bc <__adddf3>
 80125c2:	f7ee fae1 	bl	8000b88 <__aeabi_d2iz>
 80125c6:	4605      	mov	r5, r0
 80125c8:	f7ed ffc4 	bl	8000554 <__aeabi_i2d>
 80125cc:	a364      	add	r3, pc, #400	; (adr r3, 8012760 <__ieee754_rem_pio2+0x2e0>)
 80125ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125d6:	f7ee f827 	bl	8000628 <__aeabi_dmul>
 80125da:	4602      	mov	r2, r0
 80125dc:	460b      	mov	r3, r1
 80125de:	4630      	mov	r0, r6
 80125e0:	4639      	mov	r1, r7
 80125e2:	f7ed fe69 	bl	80002b8 <__aeabi_dsub>
 80125e6:	a360      	add	r3, pc, #384	; (adr r3, 8012768 <__ieee754_rem_pio2+0x2e8>)
 80125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ec:	4682      	mov	sl, r0
 80125ee:	468b      	mov	fp, r1
 80125f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125f4:	f7ee f818 	bl	8000628 <__aeabi_dmul>
 80125f8:	2d1f      	cmp	r5, #31
 80125fa:	4606      	mov	r6, r0
 80125fc:	460f      	mov	r7, r1
 80125fe:	dc0c      	bgt.n	801261a <__ieee754_rem_pio2+0x19a>
 8012600:	1e6a      	subs	r2, r5, #1
 8012602:	4b6a      	ldr	r3, [pc, #424]	; (80127ac <__ieee754_rem_pio2+0x32c>)
 8012604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012608:	4543      	cmp	r3, r8
 801260a:	d006      	beq.n	801261a <__ieee754_rem_pio2+0x19a>
 801260c:	4632      	mov	r2, r6
 801260e:	463b      	mov	r3, r7
 8012610:	4650      	mov	r0, sl
 8012612:	4659      	mov	r1, fp
 8012614:	f7ed fe50 	bl	80002b8 <__aeabi_dsub>
 8012618:	e00e      	b.n	8012638 <__ieee754_rem_pio2+0x1b8>
 801261a:	4632      	mov	r2, r6
 801261c:	463b      	mov	r3, r7
 801261e:	4650      	mov	r0, sl
 8012620:	4659      	mov	r1, fp
 8012622:	f7ed fe49 	bl	80002b8 <__aeabi_dsub>
 8012626:	ea4f 5328 	mov.w	r3, r8, asr #20
 801262a:	9305      	str	r3, [sp, #20]
 801262c:	9a05      	ldr	r2, [sp, #20]
 801262e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	2b10      	cmp	r3, #16
 8012636:	dc02      	bgt.n	801263e <__ieee754_rem_pio2+0x1be>
 8012638:	e9c4 0100 	strd	r0, r1, [r4]
 801263c:	e039      	b.n	80126b2 <__ieee754_rem_pio2+0x232>
 801263e:	a34c      	add	r3, pc, #304	; (adr r3, 8012770 <__ieee754_rem_pio2+0x2f0>)
 8012640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012648:	f7ed ffee 	bl	8000628 <__aeabi_dmul>
 801264c:	4606      	mov	r6, r0
 801264e:	460f      	mov	r7, r1
 8012650:	4602      	mov	r2, r0
 8012652:	460b      	mov	r3, r1
 8012654:	4650      	mov	r0, sl
 8012656:	4659      	mov	r1, fp
 8012658:	f7ed fe2e 	bl	80002b8 <__aeabi_dsub>
 801265c:	4602      	mov	r2, r0
 801265e:	460b      	mov	r3, r1
 8012660:	4680      	mov	r8, r0
 8012662:	4689      	mov	r9, r1
 8012664:	4650      	mov	r0, sl
 8012666:	4659      	mov	r1, fp
 8012668:	f7ed fe26 	bl	80002b8 <__aeabi_dsub>
 801266c:	4632      	mov	r2, r6
 801266e:	463b      	mov	r3, r7
 8012670:	f7ed fe22 	bl	80002b8 <__aeabi_dsub>
 8012674:	a340      	add	r3, pc, #256	; (adr r3, 8012778 <__ieee754_rem_pio2+0x2f8>)
 8012676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267a:	4606      	mov	r6, r0
 801267c:	460f      	mov	r7, r1
 801267e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012682:	f7ed ffd1 	bl	8000628 <__aeabi_dmul>
 8012686:	4632      	mov	r2, r6
 8012688:	463b      	mov	r3, r7
 801268a:	f7ed fe15 	bl	80002b8 <__aeabi_dsub>
 801268e:	4602      	mov	r2, r0
 8012690:	460b      	mov	r3, r1
 8012692:	4606      	mov	r6, r0
 8012694:	460f      	mov	r7, r1
 8012696:	4640      	mov	r0, r8
 8012698:	4649      	mov	r1, r9
 801269a:	f7ed fe0d 	bl	80002b8 <__aeabi_dsub>
 801269e:	9a05      	ldr	r2, [sp, #20]
 80126a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80126a4:	1ad3      	subs	r3, r2, r3
 80126a6:	2b31      	cmp	r3, #49	; 0x31
 80126a8:	dc20      	bgt.n	80126ec <__ieee754_rem_pio2+0x26c>
 80126aa:	e9c4 0100 	strd	r0, r1, [r4]
 80126ae:	46c2      	mov	sl, r8
 80126b0:	46cb      	mov	fp, r9
 80126b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80126b6:	4650      	mov	r0, sl
 80126b8:	4642      	mov	r2, r8
 80126ba:	464b      	mov	r3, r9
 80126bc:	4659      	mov	r1, fp
 80126be:	f7ed fdfb 	bl	80002b8 <__aeabi_dsub>
 80126c2:	463b      	mov	r3, r7
 80126c4:	4632      	mov	r2, r6
 80126c6:	f7ed fdf7 	bl	80002b8 <__aeabi_dsub>
 80126ca:	9b04      	ldr	r3, [sp, #16]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80126d2:	f6bf af11 	bge.w	80124f8 <__ieee754_rem_pio2+0x78>
 80126d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80126da:	6063      	str	r3, [r4, #4]
 80126dc:	f8c4 8000 	str.w	r8, [r4]
 80126e0:	60a0      	str	r0, [r4, #8]
 80126e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126e6:	60e3      	str	r3, [r4, #12]
 80126e8:	426d      	negs	r5, r5
 80126ea:	e705      	b.n	80124f8 <__ieee754_rem_pio2+0x78>
 80126ec:	a326      	add	r3, pc, #152	; (adr r3, 8012788 <__ieee754_rem_pio2+0x308>)
 80126ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126f6:	f7ed ff97 	bl	8000628 <__aeabi_dmul>
 80126fa:	4606      	mov	r6, r0
 80126fc:	460f      	mov	r7, r1
 80126fe:	4602      	mov	r2, r0
 8012700:	460b      	mov	r3, r1
 8012702:	4640      	mov	r0, r8
 8012704:	4649      	mov	r1, r9
 8012706:	f7ed fdd7 	bl	80002b8 <__aeabi_dsub>
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4682      	mov	sl, r0
 8012710:	468b      	mov	fp, r1
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	f7ed fdcf 	bl	80002b8 <__aeabi_dsub>
 801271a:	4632      	mov	r2, r6
 801271c:	463b      	mov	r3, r7
 801271e:	f7ed fdcb 	bl	80002b8 <__aeabi_dsub>
 8012722:	a31b      	add	r3, pc, #108	; (adr r3, 8012790 <__ieee754_rem_pio2+0x310>)
 8012724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012728:	4606      	mov	r6, r0
 801272a:	460f      	mov	r7, r1
 801272c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012730:	f7ed ff7a 	bl	8000628 <__aeabi_dmul>
 8012734:	4632      	mov	r2, r6
 8012736:	463b      	mov	r3, r7
 8012738:	f7ed fdbe 	bl	80002b8 <__aeabi_dsub>
 801273c:	4606      	mov	r6, r0
 801273e:	460f      	mov	r7, r1
 8012740:	e764      	b.n	801260c <__ieee754_rem_pio2+0x18c>
 8012742:	4b1b      	ldr	r3, [pc, #108]	; (80127b0 <__ieee754_rem_pio2+0x330>)
 8012744:	4598      	cmp	r8, r3
 8012746:	dd35      	ble.n	80127b4 <__ieee754_rem_pio2+0x334>
 8012748:	ee10 2a10 	vmov	r2, s0
 801274c:	463b      	mov	r3, r7
 801274e:	4630      	mov	r0, r6
 8012750:	4639      	mov	r1, r7
 8012752:	f7ed fdb1 	bl	80002b8 <__aeabi_dsub>
 8012756:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801275a:	e9c4 0100 	strd	r0, r1, [r4]
 801275e:	e6a1      	b.n	80124a4 <__ieee754_rem_pio2+0x24>
 8012760:	54400000 	.word	0x54400000
 8012764:	3ff921fb 	.word	0x3ff921fb
 8012768:	1a626331 	.word	0x1a626331
 801276c:	3dd0b461 	.word	0x3dd0b461
 8012770:	1a600000 	.word	0x1a600000
 8012774:	3dd0b461 	.word	0x3dd0b461
 8012778:	2e037073 	.word	0x2e037073
 801277c:	3ba3198a 	.word	0x3ba3198a
 8012780:	6dc9c883 	.word	0x6dc9c883
 8012784:	3fe45f30 	.word	0x3fe45f30
 8012788:	2e000000 	.word	0x2e000000
 801278c:	3ba3198a 	.word	0x3ba3198a
 8012790:	252049c1 	.word	0x252049c1
 8012794:	397b839a 	.word	0x397b839a
 8012798:	3fe921fb 	.word	0x3fe921fb
 801279c:	4002d97b 	.word	0x4002d97b
 80127a0:	3ff921fb 	.word	0x3ff921fb
 80127a4:	413921fb 	.word	0x413921fb
 80127a8:	3fe00000 	.word	0x3fe00000
 80127ac:	08017e14 	.word	0x08017e14
 80127b0:	7fefffff 	.word	0x7fefffff
 80127b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80127b8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80127bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80127c0:	4630      	mov	r0, r6
 80127c2:	460f      	mov	r7, r1
 80127c4:	f7ee f9e0 	bl	8000b88 <__aeabi_d2iz>
 80127c8:	f7ed fec4 	bl	8000554 <__aeabi_i2d>
 80127cc:	4602      	mov	r2, r0
 80127ce:	460b      	mov	r3, r1
 80127d0:	4630      	mov	r0, r6
 80127d2:	4639      	mov	r1, r7
 80127d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80127d8:	f7ed fd6e 	bl	80002b8 <__aeabi_dsub>
 80127dc:	2200      	movs	r2, #0
 80127de:	4b1f      	ldr	r3, [pc, #124]	; (801285c <__ieee754_rem_pio2+0x3dc>)
 80127e0:	f7ed ff22 	bl	8000628 <__aeabi_dmul>
 80127e4:	460f      	mov	r7, r1
 80127e6:	4606      	mov	r6, r0
 80127e8:	f7ee f9ce 	bl	8000b88 <__aeabi_d2iz>
 80127ec:	f7ed feb2 	bl	8000554 <__aeabi_i2d>
 80127f0:	4602      	mov	r2, r0
 80127f2:	460b      	mov	r3, r1
 80127f4:	4630      	mov	r0, r6
 80127f6:	4639      	mov	r1, r7
 80127f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80127fc:	f7ed fd5c 	bl	80002b8 <__aeabi_dsub>
 8012800:	2200      	movs	r2, #0
 8012802:	4b16      	ldr	r3, [pc, #88]	; (801285c <__ieee754_rem_pio2+0x3dc>)
 8012804:	f7ed ff10 	bl	8000628 <__aeabi_dmul>
 8012808:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801280c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012810:	f04f 0803 	mov.w	r8, #3
 8012814:	2600      	movs	r6, #0
 8012816:	2700      	movs	r7, #0
 8012818:	4632      	mov	r2, r6
 801281a:	463b      	mov	r3, r7
 801281c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012820:	f108 3aff 	add.w	sl, r8, #4294967295
 8012824:	f7ee f968 	bl	8000af8 <__aeabi_dcmpeq>
 8012828:	b9b0      	cbnz	r0, 8012858 <__ieee754_rem_pio2+0x3d8>
 801282a:	4b0d      	ldr	r3, [pc, #52]	; (8012860 <__ieee754_rem_pio2+0x3e0>)
 801282c:	9301      	str	r3, [sp, #4]
 801282e:	2302      	movs	r3, #2
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	462a      	mov	r2, r5
 8012834:	4643      	mov	r3, r8
 8012836:	4621      	mov	r1, r4
 8012838:	a806      	add	r0, sp, #24
 801283a:	f000 f8dd 	bl	80129f8 <__kernel_rem_pio2>
 801283e:	9b04      	ldr	r3, [sp, #16]
 8012840:	2b00      	cmp	r3, #0
 8012842:	4605      	mov	r5, r0
 8012844:	f6bf ae58 	bge.w	80124f8 <__ieee754_rem_pio2+0x78>
 8012848:	6863      	ldr	r3, [r4, #4]
 801284a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801284e:	6063      	str	r3, [r4, #4]
 8012850:	68e3      	ldr	r3, [r4, #12]
 8012852:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012856:	e746      	b.n	80126e6 <__ieee754_rem_pio2+0x266>
 8012858:	46d0      	mov	r8, sl
 801285a:	e7dd      	b.n	8012818 <__ieee754_rem_pio2+0x398>
 801285c:	41700000 	.word	0x41700000
 8012860:	08017e94 	.word	0x08017e94
 8012864:	00000000 	.word	0x00000000

08012868 <__kernel_cos>:
 8012868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801286c:	ec59 8b10 	vmov	r8, r9, d0
 8012870:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012874:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012878:	ed2d 8b02 	vpush	{d8}
 801287c:	eeb0 8a41 	vmov.f32	s16, s2
 8012880:	eef0 8a61 	vmov.f32	s17, s3
 8012884:	da07      	bge.n	8012896 <__kernel_cos+0x2e>
 8012886:	ee10 0a10 	vmov	r0, s0
 801288a:	4649      	mov	r1, r9
 801288c:	f7ee f97c 	bl	8000b88 <__aeabi_d2iz>
 8012890:	2800      	cmp	r0, #0
 8012892:	f000 8089 	beq.w	80129a8 <__kernel_cos+0x140>
 8012896:	4642      	mov	r2, r8
 8012898:	464b      	mov	r3, r9
 801289a:	4640      	mov	r0, r8
 801289c:	4649      	mov	r1, r9
 801289e:	f7ed fec3 	bl	8000628 <__aeabi_dmul>
 80128a2:	2200      	movs	r2, #0
 80128a4:	4b4e      	ldr	r3, [pc, #312]	; (80129e0 <__kernel_cos+0x178>)
 80128a6:	4604      	mov	r4, r0
 80128a8:	460d      	mov	r5, r1
 80128aa:	f7ed febd 	bl	8000628 <__aeabi_dmul>
 80128ae:	a340      	add	r3, pc, #256	; (adr r3, 80129b0 <__kernel_cos+0x148>)
 80128b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b4:	4682      	mov	sl, r0
 80128b6:	468b      	mov	fp, r1
 80128b8:	4620      	mov	r0, r4
 80128ba:	4629      	mov	r1, r5
 80128bc:	f7ed feb4 	bl	8000628 <__aeabi_dmul>
 80128c0:	a33d      	add	r3, pc, #244	; (adr r3, 80129b8 <__kernel_cos+0x150>)
 80128c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c6:	f7ed fcf9 	bl	80002bc <__adddf3>
 80128ca:	4622      	mov	r2, r4
 80128cc:	462b      	mov	r3, r5
 80128ce:	f7ed feab 	bl	8000628 <__aeabi_dmul>
 80128d2:	a33b      	add	r3, pc, #236	; (adr r3, 80129c0 <__kernel_cos+0x158>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	f7ed fcee 	bl	80002b8 <__aeabi_dsub>
 80128dc:	4622      	mov	r2, r4
 80128de:	462b      	mov	r3, r5
 80128e0:	f7ed fea2 	bl	8000628 <__aeabi_dmul>
 80128e4:	a338      	add	r3, pc, #224	; (adr r3, 80129c8 <__kernel_cos+0x160>)
 80128e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ea:	f7ed fce7 	bl	80002bc <__adddf3>
 80128ee:	4622      	mov	r2, r4
 80128f0:	462b      	mov	r3, r5
 80128f2:	f7ed fe99 	bl	8000628 <__aeabi_dmul>
 80128f6:	a336      	add	r3, pc, #216	; (adr r3, 80129d0 <__kernel_cos+0x168>)
 80128f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128fc:	f7ed fcdc 	bl	80002b8 <__aeabi_dsub>
 8012900:	4622      	mov	r2, r4
 8012902:	462b      	mov	r3, r5
 8012904:	f7ed fe90 	bl	8000628 <__aeabi_dmul>
 8012908:	a333      	add	r3, pc, #204	; (adr r3, 80129d8 <__kernel_cos+0x170>)
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	f7ed fcd5 	bl	80002bc <__adddf3>
 8012912:	4622      	mov	r2, r4
 8012914:	462b      	mov	r3, r5
 8012916:	f7ed fe87 	bl	8000628 <__aeabi_dmul>
 801291a:	4622      	mov	r2, r4
 801291c:	462b      	mov	r3, r5
 801291e:	f7ed fe83 	bl	8000628 <__aeabi_dmul>
 8012922:	ec53 2b18 	vmov	r2, r3, d8
 8012926:	4604      	mov	r4, r0
 8012928:	460d      	mov	r5, r1
 801292a:	4640      	mov	r0, r8
 801292c:	4649      	mov	r1, r9
 801292e:	f7ed fe7b 	bl	8000628 <__aeabi_dmul>
 8012932:	460b      	mov	r3, r1
 8012934:	4602      	mov	r2, r0
 8012936:	4629      	mov	r1, r5
 8012938:	4620      	mov	r0, r4
 801293a:	f7ed fcbd 	bl	80002b8 <__aeabi_dsub>
 801293e:	4b29      	ldr	r3, [pc, #164]	; (80129e4 <__kernel_cos+0x17c>)
 8012940:	429e      	cmp	r6, r3
 8012942:	4680      	mov	r8, r0
 8012944:	4689      	mov	r9, r1
 8012946:	dc11      	bgt.n	801296c <__kernel_cos+0x104>
 8012948:	4602      	mov	r2, r0
 801294a:	460b      	mov	r3, r1
 801294c:	4650      	mov	r0, sl
 801294e:	4659      	mov	r1, fp
 8012950:	f7ed fcb2 	bl	80002b8 <__aeabi_dsub>
 8012954:	460b      	mov	r3, r1
 8012956:	4924      	ldr	r1, [pc, #144]	; (80129e8 <__kernel_cos+0x180>)
 8012958:	4602      	mov	r2, r0
 801295a:	2000      	movs	r0, #0
 801295c:	f7ed fcac 	bl	80002b8 <__aeabi_dsub>
 8012960:	ecbd 8b02 	vpop	{d8}
 8012964:	ec41 0b10 	vmov	d0, r0, r1
 8012968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296c:	4b1f      	ldr	r3, [pc, #124]	; (80129ec <__kernel_cos+0x184>)
 801296e:	491e      	ldr	r1, [pc, #120]	; (80129e8 <__kernel_cos+0x180>)
 8012970:	429e      	cmp	r6, r3
 8012972:	bfcc      	ite	gt
 8012974:	4d1e      	ldrgt	r5, [pc, #120]	; (80129f0 <__kernel_cos+0x188>)
 8012976:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801297a:	2400      	movs	r4, #0
 801297c:	4622      	mov	r2, r4
 801297e:	462b      	mov	r3, r5
 8012980:	2000      	movs	r0, #0
 8012982:	f7ed fc99 	bl	80002b8 <__aeabi_dsub>
 8012986:	4622      	mov	r2, r4
 8012988:	4606      	mov	r6, r0
 801298a:	460f      	mov	r7, r1
 801298c:	462b      	mov	r3, r5
 801298e:	4650      	mov	r0, sl
 8012990:	4659      	mov	r1, fp
 8012992:	f7ed fc91 	bl	80002b8 <__aeabi_dsub>
 8012996:	4642      	mov	r2, r8
 8012998:	464b      	mov	r3, r9
 801299a:	f7ed fc8d 	bl	80002b8 <__aeabi_dsub>
 801299e:	4602      	mov	r2, r0
 80129a0:	460b      	mov	r3, r1
 80129a2:	4630      	mov	r0, r6
 80129a4:	4639      	mov	r1, r7
 80129a6:	e7d9      	b.n	801295c <__kernel_cos+0xf4>
 80129a8:	2000      	movs	r0, #0
 80129aa:	490f      	ldr	r1, [pc, #60]	; (80129e8 <__kernel_cos+0x180>)
 80129ac:	e7d8      	b.n	8012960 <__kernel_cos+0xf8>
 80129ae:	bf00      	nop
 80129b0:	be8838d4 	.word	0xbe8838d4
 80129b4:	bda8fae9 	.word	0xbda8fae9
 80129b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80129bc:	3e21ee9e 	.word	0x3e21ee9e
 80129c0:	809c52ad 	.word	0x809c52ad
 80129c4:	3e927e4f 	.word	0x3e927e4f
 80129c8:	19cb1590 	.word	0x19cb1590
 80129cc:	3efa01a0 	.word	0x3efa01a0
 80129d0:	16c15177 	.word	0x16c15177
 80129d4:	3f56c16c 	.word	0x3f56c16c
 80129d8:	5555554c 	.word	0x5555554c
 80129dc:	3fa55555 	.word	0x3fa55555
 80129e0:	3fe00000 	.word	0x3fe00000
 80129e4:	3fd33332 	.word	0x3fd33332
 80129e8:	3ff00000 	.word	0x3ff00000
 80129ec:	3fe90000 	.word	0x3fe90000
 80129f0:	3fd20000 	.word	0x3fd20000
 80129f4:	00000000 	.word	0x00000000

080129f8 <__kernel_rem_pio2>:
 80129f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129fc:	ed2d 8b02 	vpush	{d8}
 8012a00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012a04:	1ed4      	subs	r4, r2, #3
 8012a06:	9308      	str	r3, [sp, #32]
 8012a08:	9101      	str	r1, [sp, #4]
 8012a0a:	4bc5      	ldr	r3, [pc, #788]	; (8012d20 <__kernel_rem_pio2+0x328>)
 8012a0c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012a0e:	9009      	str	r0, [sp, #36]	; 0x24
 8012a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a14:	9304      	str	r3, [sp, #16]
 8012a16:	9b08      	ldr	r3, [sp, #32]
 8012a18:	3b01      	subs	r3, #1
 8012a1a:	9307      	str	r3, [sp, #28]
 8012a1c:	2318      	movs	r3, #24
 8012a1e:	fb94 f4f3 	sdiv	r4, r4, r3
 8012a22:	f06f 0317 	mvn.w	r3, #23
 8012a26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012a2a:	fb04 3303 	mla	r3, r4, r3, r3
 8012a2e:	eb03 0a02 	add.w	sl, r3, r2
 8012a32:	9b04      	ldr	r3, [sp, #16]
 8012a34:	9a07      	ldr	r2, [sp, #28]
 8012a36:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012d10 <__kernel_rem_pio2+0x318>
 8012a3a:	eb03 0802 	add.w	r8, r3, r2
 8012a3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012a40:	1aa7      	subs	r7, r4, r2
 8012a42:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012a46:	ae22      	add	r6, sp, #136	; 0x88
 8012a48:	2500      	movs	r5, #0
 8012a4a:	4545      	cmp	r5, r8
 8012a4c:	dd13      	ble.n	8012a76 <__kernel_rem_pio2+0x7e>
 8012a4e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012d10 <__kernel_rem_pio2+0x318>
 8012a52:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012a56:	2600      	movs	r6, #0
 8012a58:	9b04      	ldr	r3, [sp, #16]
 8012a5a:	429e      	cmp	r6, r3
 8012a5c:	dc32      	bgt.n	8012ac4 <__kernel_rem_pio2+0xcc>
 8012a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a60:	9302      	str	r3, [sp, #8]
 8012a62:	9b08      	ldr	r3, [sp, #32]
 8012a64:	199d      	adds	r5, r3, r6
 8012a66:	ab22      	add	r3, sp, #136	; 0x88
 8012a68:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012a6c:	9306      	str	r3, [sp, #24]
 8012a6e:	ec59 8b18 	vmov	r8, r9, d8
 8012a72:	2700      	movs	r7, #0
 8012a74:	e01f      	b.n	8012ab6 <__kernel_rem_pio2+0xbe>
 8012a76:	42ef      	cmn	r7, r5
 8012a78:	d407      	bmi.n	8012a8a <__kernel_rem_pio2+0x92>
 8012a7a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012a7e:	f7ed fd69 	bl	8000554 <__aeabi_i2d>
 8012a82:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012a86:	3501      	adds	r5, #1
 8012a88:	e7df      	b.n	8012a4a <__kernel_rem_pio2+0x52>
 8012a8a:	ec51 0b18 	vmov	r0, r1, d8
 8012a8e:	e7f8      	b.n	8012a82 <__kernel_rem_pio2+0x8a>
 8012a90:	9906      	ldr	r1, [sp, #24]
 8012a92:	9d02      	ldr	r5, [sp, #8]
 8012a94:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012a98:	9106      	str	r1, [sp, #24]
 8012a9a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012a9e:	9502      	str	r5, [sp, #8]
 8012aa0:	f7ed fdc2 	bl	8000628 <__aeabi_dmul>
 8012aa4:	4602      	mov	r2, r0
 8012aa6:	460b      	mov	r3, r1
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	4649      	mov	r1, r9
 8012aac:	f7ed fc06 	bl	80002bc <__adddf3>
 8012ab0:	3701      	adds	r7, #1
 8012ab2:	4680      	mov	r8, r0
 8012ab4:	4689      	mov	r9, r1
 8012ab6:	9b07      	ldr	r3, [sp, #28]
 8012ab8:	429f      	cmp	r7, r3
 8012aba:	dde9      	ble.n	8012a90 <__kernel_rem_pio2+0x98>
 8012abc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012ac0:	3601      	adds	r6, #1
 8012ac2:	e7c9      	b.n	8012a58 <__kernel_rem_pio2+0x60>
 8012ac4:	9b04      	ldr	r3, [sp, #16]
 8012ac6:	aa0e      	add	r2, sp, #56	; 0x38
 8012ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012acc:	930c      	str	r3, [sp, #48]	; 0x30
 8012ace:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012ad0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012ad4:	9c04      	ldr	r4, [sp, #16]
 8012ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ad8:	ab9a      	add	r3, sp, #616	; 0x268
 8012ada:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012ade:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012ae2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ae6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012aea:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012aee:	ab9a      	add	r3, sp, #616	; 0x268
 8012af0:	445b      	add	r3, fp
 8012af2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012af6:	2500      	movs	r5, #0
 8012af8:	1b63      	subs	r3, r4, r5
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	dc78      	bgt.n	8012bf0 <__kernel_rem_pio2+0x1f8>
 8012afe:	4650      	mov	r0, sl
 8012b00:	ec49 8b10 	vmov	d0, r8, r9
 8012b04:	f000 fc00 	bl	8013308 <scalbn>
 8012b08:	ec57 6b10 	vmov	r6, r7, d0
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012b12:	ee10 0a10 	vmov	r0, s0
 8012b16:	4639      	mov	r1, r7
 8012b18:	f7ed fd86 	bl	8000628 <__aeabi_dmul>
 8012b1c:	ec41 0b10 	vmov	d0, r0, r1
 8012b20:	f000 fb6e 	bl	8013200 <floor>
 8012b24:	2200      	movs	r2, #0
 8012b26:	ec51 0b10 	vmov	r0, r1, d0
 8012b2a:	4b7e      	ldr	r3, [pc, #504]	; (8012d24 <__kernel_rem_pio2+0x32c>)
 8012b2c:	f7ed fd7c 	bl	8000628 <__aeabi_dmul>
 8012b30:	4602      	mov	r2, r0
 8012b32:	460b      	mov	r3, r1
 8012b34:	4630      	mov	r0, r6
 8012b36:	4639      	mov	r1, r7
 8012b38:	f7ed fbbe 	bl	80002b8 <__aeabi_dsub>
 8012b3c:	460f      	mov	r7, r1
 8012b3e:	4606      	mov	r6, r0
 8012b40:	f7ee f822 	bl	8000b88 <__aeabi_d2iz>
 8012b44:	9006      	str	r0, [sp, #24]
 8012b46:	f7ed fd05 	bl	8000554 <__aeabi_i2d>
 8012b4a:	4602      	mov	r2, r0
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	4630      	mov	r0, r6
 8012b50:	4639      	mov	r1, r7
 8012b52:	f7ed fbb1 	bl	80002b8 <__aeabi_dsub>
 8012b56:	f1ba 0f00 	cmp.w	sl, #0
 8012b5a:	4606      	mov	r6, r0
 8012b5c:	460f      	mov	r7, r1
 8012b5e:	dd6c      	ble.n	8012c3a <__kernel_rem_pio2+0x242>
 8012b60:	1e62      	subs	r2, r4, #1
 8012b62:	ab0e      	add	r3, sp, #56	; 0x38
 8012b64:	f1ca 0118 	rsb	r1, sl, #24
 8012b68:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012b6c:	9d06      	ldr	r5, [sp, #24]
 8012b6e:	fa40 f301 	asr.w	r3, r0, r1
 8012b72:	441d      	add	r5, r3
 8012b74:	408b      	lsls	r3, r1
 8012b76:	1ac0      	subs	r0, r0, r3
 8012b78:	ab0e      	add	r3, sp, #56	; 0x38
 8012b7a:	9506      	str	r5, [sp, #24]
 8012b7c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012b80:	f1ca 0317 	rsb	r3, sl, #23
 8012b84:	fa40 f303 	asr.w	r3, r0, r3
 8012b88:	9302      	str	r3, [sp, #8]
 8012b8a:	9b02      	ldr	r3, [sp, #8]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	dd62      	ble.n	8012c56 <__kernel_rem_pio2+0x25e>
 8012b90:	9b06      	ldr	r3, [sp, #24]
 8012b92:	2200      	movs	r2, #0
 8012b94:	3301      	adds	r3, #1
 8012b96:	9306      	str	r3, [sp, #24]
 8012b98:	4615      	mov	r5, r2
 8012b9a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012b9e:	4294      	cmp	r4, r2
 8012ba0:	f300 8095 	bgt.w	8012cce <__kernel_rem_pio2+0x2d6>
 8012ba4:	f1ba 0f00 	cmp.w	sl, #0
 8012ba8:	dd07      	ble.n	8012bba <__kernel_rem_pio2+0x1c2>
 8012baa:	f1ba 0f01 	cmp.w	sl, #1
 8012bae:	f000 80a2 	beq.w	8012cf6 <__kernel_rem_pio2+0x2fe>
 8012bb2:	f1ba 0f02 	cmp.w	sl, #2
 8012bb6:	f000 80c1 	beq.w	8012d3c <__kernel_rem_pio2+0x344>
 8012bba:	9b02      	ldr	r3, [sp, #8]
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d14a      	bne.n	8012c56 <__kernel_rem_pio2+0x25e>
 8012bc0:	4632      	mov	r2, r6
 8012bc2:	463b      	mov	r3, r7
 8012bc4:	2000      	movs	r0, #0
 8012bc6:	4958      	ldr	r1, [pc, #352]	; (8012d28 <__kernel_rem_pio2+0x330>)
 8012bc8:	f7ed fb76 	bl	80002b8 <__aeabi_dsub>
 8012bcc:	4606      	mov	r6, r0
 8012bce:	460f      	mov	r7, r1
 8012bd0:	2d00      	cmp	r5, #0
 8012bd2:	d040      	beq.n	8012c56 <__kernel_rem_pio2+0x25e>
 8012bd4:	4650      	mov	r0, sl
 8012bd6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012d18 <__kernel_rem_pio2+0x320>
 8012bda:	f000 fb95 	bl	8013308 <scalbn>
 8012bde:	4630      	mov	r0, r6
 8012be0:	4639      	mov	r1, r7
 8012be2:	ec53 2b10 	vmov	r2, r3, d0
 8012be6:	f7ed fb67 	bl	80002b8 <__aeabi_dsub>
 8012bea:	4606      	mov	r6, r0
 8012bec:	460f      	mov	r7, r1
 8012bee:	e032      	b.n	8012c56 <__kernel_rem_pio2+0x25e>
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	4b4e      	ldr	r3, [pc, #312]	; (8012d2c <__kernel_rem_pio2+0x334>)
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	4649      	mov	r1, r9
 8012bf8:	f7ed fd16 	bl	8000628 <__aeabi_dmul>
 8012bfc:	f7ed ffc4 	bl	8000b88 <__aeabi_d2iz>
 8012c00:	f7ed fca8 	bl	8000554 <__aeabi_i2d>
 8012c04:	2200      	movs	r2, #0
 8012c06:	4b4a      	ldr	r3, [pc, #296]	; (8012d30 <__kernel_rem_pio2+0x338>)
 8012c08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c0c:	f7ed fd0c 	bl	8000628 <__aeabi_dmul>
 8012c10:	4602      	mov	r2, r0
 8012c12:	460b      	mov	r3, r1
 8012c14:	4640      	mov	r0, r8
 8012c16:	4649      	mov	r1, r9
 8012c18:	f7ed fb4e 	bl	80002b8 <__aeabi_dsub>
 8012c1c:	f7ed ffb4 	bl	8000b88 <__aeabi_d2iz>
 8012c20:	ab0e      	add	r3, sp, #56	; 0x38
 8012c22:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012c26:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012c2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c2e:	f7ed fb45 	bl	80002bc <__adddf3>
 8012c32:	3501      	adds	r5, #1
 8012c34:	4680      	mov	r8, r0
 8012c36:	4689      	mov	r9, r1
 8012c38:	e75e      	b.n	8012af8 <__kernel_rem_pio2+0x100>
 8012c3a:	d105      	bne.n	8012c48 <__kernel_rem_pio2+0x250>
 8012c3c:	1e63      	subs	r3, r4, #1
 8012c3e:	aa0e      	add	r2, sp, #56	; 0x38
 8012c40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012c44:	15c3      	asrs	r3, r0, #23
 8012c46:	e79f      	b.n	8012b88 <__kernel_rem_pio2+0x190>
 8012c48:	2200      	movs	r2, #0
 8012c4a:	4b3a      	ldr	r3, [pc, #232]	; (8012d34 <__kernel_rem_pio2+0x33c>)
 8012c4c:	f7ed ff72 	bl	8000b34 <__aeabi_dcmpge>
 8012c50:	2800      	cmp	r0, #0
 8012c52:	d139      	bne.n	8012cc8 <__kernel_rem_pio2+0x2d0>
 8012c54:	9002      	str	r0, [sp, #8]
 8012c56:	2200      	movs	r2, #0
 8012c58:	2300      	movs	r3, #0
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	f7ed ff4b 	bl	8000af8 <__aeabi_dcmpeq>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	f000 80c7 	beq.w	8012df6 <__kernel_rem_pio2+0x3fe>
 8012c68:	1e65      	subs	r5, r4, #1
 8012c6a:	462b      	mov	r3, r5
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	9904      	ldr	r1, [sp, #16]
 8012c70:	428b      	cmp	r3, r1
 8012c72:	da6a      	bge.n	8012d4a <__kernel_rem_pio2+0x352>
 8012c74:	2a00      	cmp	r2, #0
 8012c76:	f000 8088 	beq.w	8012d8a <__kernel_rem_pio2+0x392>
 8012c7a:	ab0e      	add	r3, sp, #56	; 0x38
 8012c7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012c80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f000 80b4 	beq.w	8012df2 <__kernel_rem_pio2+0x3fa>
 8012c8a:	4650      	mov	r0, sl
 8012c8c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012d18 <__kernel_rem_pio2+0x320>
 8012c90:	f000 fb3a 	bl	8013308 <scalbn>
 8012c94:	00ec      	lsls	r4, r5, #3
 8012c96:	ab72      	add	r3, sp, #456	; 0x1c8
 8012c98:	191e      	adds	r6, r3, r4
 8012c9a:	ec59 8b10 	vmov	r8, r9, d0
 8012c9e:	f106 0a08 	add.w	sl, r6, #8
 8012ca2:	462f      	mov	r7, r5
 8012ca4:	2f00      	cmp	r7, #0
 8012ca6:	f280 80df 	bge.w	8012e68 <__kernel_rem_pio2+0x470>
 8012caa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012d10 <__kernel_rem_pio2+0x318>
 8012cae:	f04f 0a00 	mov.w	sl, #0
 8012cb2:	eba5 030a 	sub.w	r3, r5, sl
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	f2c0 810a 	blt.w	8012ed0 <__kernel_rem_pio2+0x4d8>
 8012cbc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012d38 <__kernel_rem_pio2+0x340>
 8012cc0:	ec59 8b18 	vmov	r8, r9, d8
 8012cc4:	2700      	movs	r7, #0
 8012cc6:	e0f5      	b.n	8012eb4 <__kernel_rem_pio2+0x4bc>
 8012cc8:	2302      	movs	r3, #2
 8012cca:	9302      	str	r3, [sp, #8]
 8012ccc:	e760      	b.n	8012b90 <__kernel_rem_pio2+0x198>
 8012cce:	ab0e      	add	r3, sp, #56	; 0x38
 8012cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cd4:	b94d      	cbnz	r5, 8012cea <__kernel_rem_pio2+0x2f2>
 8012cd6:	b12b      	cbz	r3, 8012ce4 <__kernel_rem_pio2+0x2ec>
 8012cd8:	a80e      	add	r0, sp, #56	; 0x38
 8012cda:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012cde:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	3201      	adds	r2, #1
 8012ce6:	461d      	mov	r5, r3
 8012ce8:	e759      	b.n	8012b9e <__kernel_rem_pio2+0x1a6>
 8012cea:	a80e      	add	r0, sp, #56	; 0x38
 8012cec:	1acb      	subs	r3, r1, r3
 8012cee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012cf2:	462b      	mov	r3, r5
 8012cf4:	e7f6      	b.n	8012ce4 <__kernel_rem_pio2+0x2ec>
 8012cf6:	1e62      	subs	r2, r4, #1
 8012cf8:	ab0e      	add	r3, sp, #56	; 0x38
 8012cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cfe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012d02:	a90e      	add	r1, sp, #56	; 0x38
 8012d04:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012d08:	e757      	b.n	8012bba <__kernel_rem_pio2+0x1c2>
 8012d0a:	bf00      	nop
 8012d0c:	f3af 8000 	nop.w
	...
 8012d1c:	3ff00000 	.word	0x3ff00000
 8012d20:	08017fe0 	.word	0x08017fe0
 8012d24:	40200000 	.word	0x40200000
 8012d28:	3ff00000 	.word	0x3ff00000
 8012d2c:	3e700000 	.word	0x3e700000
 8012d30:	41700000 	.word	0x41700000
 8012d34:	3fe00000 	.word	0x3fe00000
 8012d38:	08017fa0 	.word	0x08017fa0
 8012d3c:	1e62      	subs	r2, r4, #1
 8012d3e:	ab0e      	add	r3, sp, #56	; 0x38
 8012d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012d48:	e7db      	b.n	8012d02 <__kernel_rem_pio2+0x30a>
 8012d4a:	a90e      	add	r1, sp, #56	; 0x38
 8012d4c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012d50:	3b01      	subs	r3, #1
 8012d52:	430a      	orrs	r2, r1
 8012d54:	e78b      	b.n	8012c6e <__kernel_rem_pio2+0x276>
 8012d56:	3301      	adds	r3, #1
 8012d58:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012d5c:	2900      	cmp	r1, #0
 8012d5e:	d0fa      	beq.n	8012d56 <__kernel_rem_pio2+0x35e>
 8012d60:	9a08      	ldr	r2, [sp, #32]
 8012d62:	4422      	add	r2, r4
 8012d64:	00d2      	lsls	r2, r2, #3
 8012d66:	a922      	add	r1, sp, #136	; 0x88
 8012d68:	18e3      	adds	r3, r4, r3
 8012d6a:	9206      	str	r2, [sp, #24]
 8012d6c:	440a      	add	r2, r1
 8012d6e:	9302      	str	r3, [sp, #8]
 8012d70:	f10b 0108 	add.w	r1, fp, #8
 8012d74:	f102 0308 	add.w	r3, r2, #8
 8012d78:	1c66      	adds	r6, r4, #1
 8012d7a:	910a      	str	r1, [sp, #40]	; 0x28
 8012d7c:	2500      	movs	r5, #0
 8012d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8012d80:	9b02      	ldr	r3, [sp, #8]
 8012d82:	42b3      	cmp	r3, r6
 8012d84:	da04      	bge.n	8012d90 <__kernel_rem_pio2+0x398>
 8012d86:	461c      	mov	r4, r3
 8012d88:	e6a6      	b.n	8012ad8 <__kernel_rem_pio2+0xe0>
 8012d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e7e3      	b.n	8012d58 <__kernel_rem_pio2+0x360>
 8012d90:	9b06      	ldr	r3, [sp, #24]
 8012d92:	18ef      	adds	r7, r5, r3
 8012d94:	ab22      	add	r3, sp, #136	; 0x88
 8012d96:	441f      	add	r7, r3
 8012d98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d9a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012d9e:	f7ed fbd9 	bl	8000554 <__aeabi_i2d>
 8012da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012da4:	461c      	mov	r4, r3
 8012da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012da8:	e9c7 0100 	strd	r0, r1, [r7]
 8012dac:	eb03 0b05 	add.w	fp, r3, r5
 8012db0:	2700      	movs	r7, #0
 8012db2:	f04f 0800 	mov.w	r8, #0
 8012db6:	f04f 0900 	mov.w	r9, #0
 8012dba:	9b07      	ldr	r3, [sp, #28]
 8012dbc:	429f      	cmp	r7, r3
 8012dbe:	dd08      	ble.n	8012dd2 <__kernel_rem_pio2+0x3da>
 8012dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc2:	aa72      	add	r2, sp, #456	; 0x1c8
 8012dc4:	18eb      	adds	r3, r5, r3
 8012dc6:	4413      	add	r3, r2
 8012dc8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012dcc:	3601      	adds	r6, #1
 8012dce:	3508      	adds	r5, #8
 8012dd0:	e7d6      	b.n	8012d80 <__kernel_rem_pio2+0x388>
 8012dd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012dd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012dda:	f7ed fc25 	bl	8000628 <__aeabi_dmul>
 8012dde:	4602      	mov	r2, r0
 8012de0:	460b      	mov	r3, r1
 8012de2:	4640      	mov	r0, r8
 8012de4:	4649      	mov	r1, r9
 8012de6:	f7ed fa69 	bl	80002bc <__adddf3>
 8012dea:	3701      	adds	r7, #1
 8012dec:	4680      	mov	r8, r0
 8012dee:	4689      	mov	r9, r1
 8012df0:	e7e3      	b.n	8012dba <__kernel_rem_pio2+0x3c2>
 8012df2:	3d01      	subs	r5, #1
 8012df4:	e741      	b.n	8012c7a <__kernel_rem_pio2+0x282>
 8012df6:	f1ca 0000 	rsb	r0, sl, #0
 8012dfa:	ec47 6b10 	vmov	d0, r6, r7
 8012dfe:	f000 fa83 	bl	8013308 <scalbn>
 8012e02:	ec57 6b10 	vmov	r6, r7, d0
 8012e06:	2200      	movs	r2, #0
 8012e08:	4b99      	ldr	r3, [pc, #612]	; (8013070 <__kernel_rem_pio2+0x678>)
 8012e0a:	ee10 0a10 	vmov	r0, s0
 8012e0e:	4639      	mov	r1, r7
 8012e10:	f7ed fe90 	bl	8000b34 <__aeabi_dcmpge>
 8012e14:	b1f8      	cbz	r0, 8012e56 <__kernel_rem_pio2+0x45e>
 8012e16:	2200      	movs	r2, #0
 8012e18:	4b96      	ldr	r3, [pc, #600]	; (8013074 <__kernel_rem_pio2+0x67c>)
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	4639      	mov	r1, r7
 8012e1e:	f7ed fc03 	bl	8000628 <__aeabi_dmul>
 8012e22:	f7ed feb1 	bl	8000b88 <__aeabi_d2iz>
 8012e26:	4680      	mov	r8, r0
 8012e28:	f7ed fb94 	bl	8000554 <__aeabi_i2d>
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	4b90      	ldr	r3, [pc, #576]	; (8013070 <__kernel_rem_pio2+0x678>)
 8012e30:	f7ed fbfa 	bl	8000628 <__aeabi_dmul>
 8012e34:	460b      	mov	r3, r1
 8012e36:	4602      	mov	r2, r0
 8012e38:	4639      	mov	r1, r7
 8012e3a:	4630      	mov	r0, r6
 8012e3c:	f7ed fa3c 	bl	80002b8 <__aeabi_dsub>
 8012e40:	f7ed fea2 	bl	8000b88 <__aeabi_d2iz>
 8012e44:	1c65      	adds	r5, r4, #1
 8012e46:	ab0e      	add	r3, sp, #56	; 0x38
 8012e48:	f10a 0a18 	add.w	sl, sl, #24
 8012e4c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012e50:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012e54:	e719      	b.n	8012c8a <__kernel_rem_pio2+0x292>
 8012e56:	4630      	mov	r0, r6
 8012e58:	4639      	mov	r1, r7
 8012e5a:	f7ed fe95 	bl	8000b88 <__aeabi_d2iz>
 8012e5e:	ab0e      	add	r3, sp, #56	; 0x38
 8012e60:	4625      	mov	r5, r4
 8012e62:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012e66:	e710      	b.n	8012c8a <__kernel_rem_pio2+0x292>
 8012e68:	ab0e      	add	r3, sp, #56	; 0x38
 8012e6a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012e6e:	f7ed fb71 	bl	8000554 <__aeabi_i2d>
 8012e72:	4642      	mov	r2, r8
 8012e74:	464b      	mov	r3, r9
 8012e76:	f7ed fbd7 	bl	8000628 <__aeabi_dmul>
 8012e7a:	2200      	movs	r2, #0
 8012e7c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012e80:	4b7c      	ldr	r3, [pc, #496]	; (8013074 <__kernel_rem_pio2+0x67c>)
 8012e82:	4640      	mov	r0, r8
 8012e84:	4649      	mov	r1, r9
 8012e86:	f7ed fbcf 	bl	8000628 <__aeabi_dmul>
 8012e8a:	3f01      	subs	r7, #1
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	4689      	mov	r9, r1
 8012e90:	e708      	b.n	8012ca4 <__kernel_rem_pio2+0x2ac>
 8012e92:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e9a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012e9e:	f7ed fbc3 	bl	8000628 <__aeabi_dmul>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4640      	mov	r0, r8
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	f7ed fa07 	bl	80002bc <__adddf3>
 8012eae:	3701      	adds	r7, #1
 8012eb0:	4680      	mov	r8, r0
 8012eb2:	4689      	mov	r9, r1
 8012eb4:	9b04      	ldr	r3, [sp, #16]
 8012eb6:	429f      	cmp	r7, r3
 8012eb8:	dc01      	bgt.n	8012ebe <__kernel_rem_pio2+0x4c6>
 8012eba:	45ba      	cmp	sl, r7
 8012ebc:	dae9      	bge.n	8012e92 <__kernel_rem_pio2+0x49a>
 8012ebe:	ab4a      	add	r3, sp, #296	; 0x128
 8012ec0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012ec4:	e9c3 8900 	strd	r8, r9, [r3]
 8012ec8:	f10a 0a01 	add.w	sl, sl, #1
 8012ecc:	3e08      	subs	r6, #8
 8012ece:	e6f0      	b.n	8012cb2 <__kernel_rem_pio2+0x2ba>
 8012ed0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012ed2:	2b03      	cmp	r3, #3
 8012ed4:	d85b      	bhi.n	8012f8e <__kernel_rem_pio2+0x596>
 8012ed6:	e8df f003 	tbb	[pc, r3]
 8012eda:	264a      	.short	0x264a
 8012edc:	0226      	.short	0x0226
 8012ede:	ab9a      	add	r3, sp, #616	; 0x268
 8012ee0:	441c      	add	r4, r3
 8012ee2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012ee6:	46a2      	mov	sl, r4
 8012ee8:	46ab      	mov	fp, r5
 8012eea:	f1bb 0f00 	cmp.w	fp, #0
 8012eee:	dc6c      	bgt.n	8012fca <__kernel_rem_pio2+0x5d2>
 8012ef0:	46a2      	mov	sl, r4
 8012ef2:	46ab      	mov	fp, r5
 8012ef4:	f1bb 0f01 	cmp.w	fp, #1
 8012ef8:	f300 8086 	bgt.w	8013008 <__kernel_rem_pio2+0x610>
 8012efc:	2000      	movs	r0, #0
 8012efe:	2100      	movs	r1, #0
 8012f00:	2d01      	cmp	r5, #1
 8012f02:	f300 80a0 	bgt.w	8013046 <__kernel_rem_pio2+0x64e>
 8012f06:	9b02      	ldr	r3, [sp, #8]
 8012f08:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012f0c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	f040 809e 	bne.w	8013052 <__kernel_rem_pio2+0x65a>
 8012f16:	9b01      	ldr	r3, [sp, #4]
 8012f18:	e9c3 7800 	strd	r7, r8, [r3]
 8012f1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012f20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012f24:	e033      	b.n	8012f8e <__kernel_rem_pio2+0x596>
 8012f26:	3408      	adds	r4, #8
 8012f28:	ab4a      	add	r3, sp, #296	; 0x128
 8012f2a:	441c      	add	r4, r3
 8012f2c:	462e      	mov	r6, r5
 8012f2e:	2000      	movs	r0, #0
 8012f30:	2100      	movs	r1, #0
 8012f32:	2e00      	cmp	r6, #0
 8012f34:	da3a      	bge.n	8012fac <__kernel_rem_pio2+0x5b4>
 8012f36:	9b02      	ldr	r3, [sp, #8]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d03d      	beq.n	8012fb8 <__kernel_rem_pio2+0x5c0>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f42:	9c01      	ldr	r4, [sp, #4]
 8012f44:	e9c4 2300 	strd	r2, r3, [r4]
 8012f48:	4602      	mov	r2, r0
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012f50:	f7ed f9b2 	bl	80002b8 <__aeabi_dsub>
 8012f54:	ae4c      	add	r6, sp, #304	; 0x130
 8012f56:	2401      	movs	r4, #1
 8012f58:	42a5      	cmp	r5, r4
 8012f5a:	da30      	bge.n	8012fbe <__kernel_rem_pio2+0x5c6>
 8012f5c:	9b02      	ldr	r3, [sp, #8]
 8012f5e:	b113      	cbz	r3, 8012f66 <__kernel_rem_pio2+0x56e>
 8012f60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f64:	4619      	mov	r1, r3
 8012f66:	9b01      	ldr	r3, [sp, #4]
 8012f68:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012f6c:	e00f      	b.n	8012f8e <__kernel_rem_pio2+0x596>
 8012f6e:	ab9a      	add	r3, sp, #616	; 0x268
 8012f70:	441c      	add	r4, r3
 8012f72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012f76:	2000      	movs	r0, #0
 8012f78:	2100      	movs	r1, #0
 8012f7a:	2d00      	cmp	r5, #0
 8012f7c:	da10      	bge.n	8012fa0 <__kernel_rem_pio2+0x5a8>
 8012f7e:	9b02      	ldr	r3, [sp, #8]
 8012f80:	b113      	cbz	r3, 8012f88 <__kernel_rem_pio2+0x590>
 8012f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012f86:	4619      	mov	r1, r3
 8012f88:	9b01      	ldr	r3, [sp, #4]
 8012f8a:	e9c3 0100 	strd	r0, r1, [r3]
 8012f8e:	9b06      	ldr	r3, [sp, #24]
 8012f90:	f003 0007 	and.w	r0, r3, #7
 8012f94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012f98:	ecbd 8b02 	vpop	{d8}
 8012f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fa0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012fa4:	f7ed f98a 	bl	80002bc <__adddf3>
 8012fa8:	3d01      	subs	r5, #1
 8012faa:	e7e6      	b.n	8012f7a <__kernel_rem_pio2+0x582>
 8012fac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012fb0:	f7ed f984 	bl	80002bc <__adddf3>
 8012fb4:	3e01      	subs	r6, #1
 8012fb6:	e7bc      	b.n	8012f32 <__kernel_rem_pio2+0x53a>
 8012fb8:	4602      	mov	r2, r0
 8012fba:	460b      	mov	r3, r1
 8012fbc:	e7c1      	b.n	8012f42 <__kernel_rem_pio2+0x54a>
 8012fbe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012fc2:	f7ed f97b 	bl	80002bc <__adddf3>
 8012fc6:	3401      	adds	r4, #1
 8012fc8:	e7c6      	b.n	8012f58 <__kernel_rem_pio2+0x560>
 8012fca:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012fce:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012fd2:	4640      	mov	r0, r8
 8012fd4:	ec53 2b17 	vmov	r2, r3, d7
 8012fd8:	4649      	mov	r1, r9
 8012fda:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012fde:	f7ed f96d 	bl	80002bc <__adddf3>
 8012fe2:	4602      	mov	r2, r0
 8012fe4:	460b      	mov	r3, r1
 8012fe6:	4606      	mov	r6, r0
 8012fe8:	460f      	mov	r7, r1
 8012fea:	4640      	mov	r0, r8
 8012fec:	4649      	mov	r1, r9
 8012fee:	f7ed f963 	bl	80002b8 <__aeabi_dsub>
 8012ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ff6:	f7ed f961 	bl	80002bc <__adddf3>
 8012ffa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012ffe:	e9ca 0100 	strd	r0, r1, [sl]
 8013002:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8013006:	e770      	b.n	8012eea <__kernel_rem_pio2+0x4f2>
 8013008:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801300c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013010:	4630      	mov	r0, r6
 8013012:	ec53 2b17 	vmov	r2, r3, d7
 8013016:	4639      	mov	r1, r7
 8013018:	ed8d 7b04 	vstr	d7, [sp, #16]
 801301c:	f7ed f94e 	bl	80002bc <__adddf3>
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	4680      	mov	r8, r0
 8013026:	4689      	mov	r9, r1
 8013028:	4630      	mov	r0, r6
 801302a:	4639      	mov	r1, r7
 801302c:	f7ed f944 	bl	80002b8 <__aeabi_dsub>
 8013030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013034:	f7ed f942 	bl	80002bc <__adddf3>
 8013038:	f10b 3bff 	add.w	fp, fp, #4294967295
 801303c:	e9ca 0100 	strd	r0, r1, [sl]
 8013040:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8013044:	e756      	b.n	8012ef4 <__kernel_rem_pio2+0x4fc>
 8013046:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801304a:	f7ed f937 	bl	80002bc <__adddf3>
 801304e:	3d01      	subs	r5, #1
 8013050:	e756      	b.n	8012f00 <__kernel_rem_pio2+0x508>
 8013052:	9b01      	ldr	r3, [sp, #4]
 8013054:	9a01      	ldr	r2, [sp, #4]
 8013056:	601f      	str	r7, [r3, #0]
 8013058:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801305c:	605c      	str	r4, [r3, #4]
 801305e:	609d      	str	r5, [r3, #8]
 8013060:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013064:	60d3      	str	r3, [r2, #12]
 8013066:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801306a:	6110      	str	r0, [r2, #16]
 801306c:	6153      	str	r3, [r2, #20]
 801306e:	e78e      	b.n	8012f8e <__kernel_rem_pio2+0x596>
 8013070:	41700000 	.word	0x41700000
 8013074:	3e700000 	.word	0x3e700000

08013078 <__kernel_sin>:
 8013078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801307c:	ec55 4b10 	vmov	r4, r5, d0
 8013080:	b085      	sub	sp, #20
 8013082:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013086:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801308a:	ed8d 1b00 	vstr	d1, [sp]
 801308e:	9002      	str	r0, [sp, #8]
 8013090:	da06      	bge.n	80130a0 <__kernel_sin+0x28>
 8013092:	ee10 0a10 	vmov	r0, s0
 8013096:	4629      	mov	r1, r5
 8013098:	f7ed fd76 	bl	8000b88 <__aeabi_d2iz>
 801309c:	2800      	cmp	r0, #0
 801309e:	d051      	beq.n	8013144 <__kernel_sin+0xcc>
 80130a0:	4622      	mov	r2, r4
 80130a2:	462b      	mov	r3, r5
 80130a4:	4620      	mov	r0, r4
 80130a6:	4629      	mov	r1, r5
 80130a8:	f7ed fabe 	bl	8000628 <__aeabi_dmul>
 80130ac:	4682      	mov	sl, r0
 80130ae:	468b      	mov	fp, r1
 80130b0:	4602      	mov	r2, r0
 80130b2:	460b      	mov	r3, r1
 80130b4:	4620      	mov	r0, r4
 80130b6:	4629      	mov	r1, r5
 80130b8:	f7ed fab6 	bl	8000628 <__aeabi_dmul>
 80130bc:	a341      	add	r3, pc, #260	; (adr r3, 80131c4 <__kernel_sin+0x14c>)
 80130be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c2:	4680      	mov	r8, r0
 80130c4:	4689      	mov	r9, r1
 80130c6:	4650      	mov	r0, sl
 80130c8:	4659      	mov	r1, fp
 80130ca:	f7ed faad 	bl	8000628 <__aeabi_dmul>
 80130ce:	a33f      	add	r3, pc, #252	; (adr r3, 80131cc <__kernel_sin+0x154>)
 80130d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d4:	f7ed f8f0 	bl	80002b8 <__aeabi_dsub>
 80130d8:	4652      	mov	r2, sl
 80130da:	465b      	mov	r3, fp
 80130dc:	f7ed faa4 	bl	8000628 <__aeabi_dmul>
 80130e0:	a33c      	add	r3, pc, #240	; (adr r3, 80131d4 <__kernel_sin+0x15c>)
 80130e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e6:	f7ed f8e9 	bl	80002bc <__adddf3>
 80130ea:	4652      	mov	r2, sl
 80130ec:	465b      	mov	r3, fp
 80130ee:	f7ed fa9b 	bl	8000628 <__aeabi_dmul>
 80130f2:	a33a      	add	r3, pc, #232	; (adr r3, 80131dc <__kernel_sin+0x164>)
 80130f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f8:	f7ed f8de 	bl	80002b8 <__aeabi_dsub>
 80130fc:	4652      	mov	r2, sl
 80130fe:	465b      	mov	r3, fp
 8013100:	f7ed fa92 	bl	8000628 <__aeabi_dmul>
 8013104:	a337      	add	r3, pc, #220	; (adr r3, 80131e4 <__kernel_sin+0x16c>)
 8013106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310a:	f7ed f8d7 	bl	80002bc <__adddf3>
 801310e:	9b02      	ldr	r3, [sp, #8]
 8013110:	4606      	mov	r6, r0
 8013112:	460f      	mov	r7, r1
 8013114:	b9db      	cbnz	r3, 801314e <__kernel_sin+0xd6>
 8013116:	4602      	mov	r2, r0
 8013118:	460b      	mov	r3, r1
 801311a:	4650      	mov	r0, sl
 801311c:	4659      	mov	r1, fp
 801311e:	f7ed fa83 	bl	8000628 <__aeabi_dmul>
 8013122:	a325      	add	r3, pc, #148	; (adr r3, 80131b8 <__kernel_sin+0x140>)
 8013124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013128:	f7ed f8c6 	bl	80002b8 <__aeabi_dsub>
 801312c:	4642      	mov	r2, r8
 801312e:	464b      	mov	r3, r9
 8013130:	f7ed fa7a 	bl	8000628 <__aeabi_dmul>
 8013134:	4602      	mov	r2, r0
 8013136:	460b      	mov	r3, r1
 8013138:	4620      	mov	r0, r4
 801313a:	4629      	mov	r1, r5
 801313c:	f7ed f8be 	bl	80002bc <__adddf3>
 8013140:	4604      	mov	r4, r0
 8013142:	460d      	mov	r5, r1
 8013144:	ec45 4b10 	vmov	d0, r4, r5
 8013148:	b005      	add	sp, #20
 801314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314e:	2200      	movs	r2, #0
 8013150:	4b1b      	ldr	r3, [pc, #108]	; (80131c0 <__kernel_sin+0x148>)
 8013152:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013156:	f7ed fa67 	bl	8000628 <__aeabi_dmul>
 801315a:	4632      	mov	r2, r6
 801315c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013160:	463b      	mov	r3, r7
 8013162:	4640      	mov	r0, r8
 8013164:	4649      	mov	r1, r9
 8013166:	f7ed fa5f 	bl	8000628 <__aeabi_dmul>
 801316a:	4602      	mov	r2, r0
 801316c:	460b      	mov	r3, r1
 801316e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013172:	f7ed f8a1 	bl	80002b8 <__aeabi_dsub>
 8013176:	4652      	mov	r2, sl
 8013178:	465b      	mov	r3, fp
 801317a:	f7ed fa55 	bl	8000628 <__aeabi_dmul>
 801317e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013182:	f7ed f899 	bl	80002b8 <__aeabi_dsub>
 8013186:	a30c      	add	r3, pc, #48	; (adr r3, 80131b8 <__kernel_sin+0x140>)
 8013188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318c:	4606      	mov	r6, r0
 801318e:	460f      	mov	r7, r1
 8013190:	4640      	mov	r0, r8
 8013192:	4649      	mov	r1, r9
 8013194:	f7ed fa48 	bl	8000628 <__aeabi_dmul>
 8013198:	4602      	mov	r2, r0
 801319a:	460b      	mov	r3, r1
 801319c:	4630      	mov	r0, r6
 801319e:	4639      	mov	r1, r7
 80131a0:	f7ed f88c 	bl	80002bc <__adddf3>
 80131a4:	4602      	mov	r2, r0
 80131a6:	460b      	mov	r3, r1
 80131a8:	4620      	mov	r0, r4
 80131aa:	4629      	mov	r1, r5
 80131ac:	f7ed f884 	bl	80002b8 <__aeabi_dsub>
 80131b0:	e7c6      	b.n	8013140 <__kernel_sin+0xc8>
 80131b2:	bf00      	nop
 80131b4:	f3af 8000 	nop.w
 80131b8:	55555549 	.word	0x55555549
 80131bc:	3fc55555 	.word	0x3fc55555
 80131c0:	3fe00000 	.word	0x3fe00000
 80131c4:	5acfd57c 	.word	0x5acfd57c
 80131c8:	3de5d93a 	.word	0x3de5d93a
 80131cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80131d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80131d4:	57b1fe7d 	.word	0x57b1fe7d
 80131d8:	3ec71de3 	.word	0x3ec71de3
 80131dc:	19c161d5 	.word	0x19c161d5
 80131e0:	3f2a01a0 	.word	0x3f2a01a0
 80131e4:	1110f8a6 	.word	0x1110f8a6
 80131e8:	3f811111 	.word	0x3f811111

080131ec <fabs>:
 80131ec:	ec51 0b10 	vmov	r0, r1, d0
 80131f0:	ee10 2a10 	vmov	r2, s0
 80131f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80131f8:	ec43 2b10 	vmov	d0, r2, r3
 80131fc:	4770      	bx	lr
	...

08013200 <floor>:
 8013200:	ec51 0b10 	vmov	r0, r1, d0
 8013204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013208:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801320c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013210:	2e13      	cmp	r6, #19
 8013212:	460c      	mov	r4, r1
 8013214:	ee10 5a10 	vmov	r5, s0
 8013218:	4680      	mov	r8, r0
 801321a:	dc34      	bgt.n	8013286 <floor+0x86>
 801321c:	2e00      	cmp	r6, #0
 801321e:	da16      	bge.n	801324e <floor+0x4e>
 8013220:	a335      	add	r3, pc, #212	; (adr r3, 80132f8 <floor+0xf8>)
 8013222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013226:	f7ed f849 	bl	80002bc <__adddf3>
 801322a:	2200      	movs	r2, #0
 801322c:	2300      	movs	r3, #0
 801322e:	f7ed fc8b 	bl	8000b48 <__aeabi_dcmpgt>
 8013232:	b148      	cbz	r0, 8013248 <floor+0x48>
 8013234:	2c00      	cmp	r4, #0
 8013236:	da59      	bge.n	80132ec <floor+0xec>
 8013238:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801323c:	4a30      	ldr	r2, [pc, #192]	; (8013300 <floor+0x100>)
 801323e:	432b      	orrs	r3, r5
 8013240:	2500      	movs	r5, #0
 8013242:	42ab      	cmp	r3, r5
 8013244:	bf18      	it	ne
 8013246:	4614      	movne	r4, r2
 8013248:	4621      	mov	r1, r4
 801324a:	4628      	mov	r0, r5
 801324c:	e025      	b.n	801329a <floor+0x9a>
 801324e:	4f2d      	ldr	r7, [pc, #180]	; (8013304 <floor+0x104>)
 8013250:	4137      	asrs	r7, r6
 8013252:	ea01 0307 	and.w	r3, r1, r7
 8013256:	4303      	orrs	r3, r0
 8013258:	d01f      	beq.n	801329a <floor+0x9a>
 801325a:	a327      	add	r3, pc, #156	; (adr r3, 80132f8 <floor+0xf8>)
 801325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013260:	f7ed f82c 	bl	80002bc <__adddf3>
 8013264:	2200      	movs	r2, #0
 8013266:	2300      	movs	r3, #0
 8013268:	f7ed fc6e 	bl	8000b48 <__aeabi_dcmpgt>
 801326c:	2800      	cmp	r0, #0
 801326e:	d0eb      	beq.n	8013248 <floor+0x48>
 8013270:	2c00      	cmp	r4, #0
 8013272:	bfbe      	ittt	lt
 8013274:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013278:	fa43 f606 	asrlt.w	r6, r3, r6
 801327c:	19a4      	addlt	r4, r4, r6
 801327e:	ea24 0407 	bic.w	r4, r4, r7
 8013282:	2500      	movs	r5, #0
 8013284:	e7e0      	b.n	8013248 <floor+0x48>
 8013286:	2e33      	cmp	r6, #51	; 0x33
 8013288:	dd0b      	ble.n	80132a2 <floor+0xa2>
 801328a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801328e:	d104      	bne.n	801329a <floor+0x9a>
 8013290:	ee10 2a10 	vmov	r2, s0
 8013294:	460b      	mov	r3, r1
 8013296:	f7ed f811 	bl	80002bc <__adddf3>
 801329a:	ec41 0b10 	vmov	d0, r0, r1
 801329e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80132a6:	f04f 33ff 	mov.w	r3, #4294967295
 80132aa:	fa23 f707 	lsr.w	r7, r3, r7
 80132ae:	4207      	tst	r7, r0
 80132b0:	d0f3      	beq.n	801329a <floor+0x9a>
 80132b2:	a311      	add	r3, pc, #68	; (adr r3, 80132f8 <floor+0xf8>)
 80132b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b8:	f7ed f800 	bl	80002bc <__adddf3>
 80132bc:	2200      	movs	r2, #0
 80132be:	2300      	movs	r3, #0
 80132c0:	f7ed fc42 	bl	8000b48 <__aeabi_dcmpgt>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	d0bf      	beq.n	8013248 <floor+0x48>
 80132c8:	2c00      	cmp	r4, #0
 80132ca:	da02      	bge.n	80132d2 <floor+0xd2>
 80132cc:	2e14      	cmp	r6, #20
 80132ce:	d103      	bne.n	80132d8 <floor+0xd8>
 80132d0:	3401      	adds	r4, #1
 80132d2:	ea25 0507 	bic.w	r5, r5, r7
 80132d6:	e7b7      	b.n	8013248 <floor+0x48>
 80132d8:	2301      	movs	r3, #1
 80132da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80132de:	fa03 f606 	lsl.w	r6, r3, r6
 80132e2:	4435      	add	r5, r6
 80132e4:	4545      	cmp	r5, r8
 80132e6:	bf38      	it	cc
 80132e8:	18e4      	addcc	r4, r4, r3
 80132ea:	e7f2      	b.n	80132d2 <floor+0xd2>
 80132ec:	2500      	movs	r5, #0
 80132ee:	462c      	mov	r4, r5
 80132f0:	e7aa      	b.n	8013248 <floor+0x48>
 80132f2:	bf00      	nop
 80132f4:	f3af 8000 	nop.w
 80132f8:	8800759c 	.word	0x8800759c
 80132fc:	7e37e43c 	.word	0x7e37e43c
 8013300:	bff00000 	.word	0xbff00000
 8013304:	000fffff 	.word	0x000fffff

08013308 <scalbn>:
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	ec55 4b10 	vmov	r4, r5, d0
 801330e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013312:	4606      	mov	r6, r0
 8013314:	462b      	mov	r3, r5
 8013316:	b9aa      	cbnz	r2, 8013344 <scalbn+0x3c>
 8013318:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801331c:	4323      	orrs	r3, r4
 801331e:	d03b      	beq.n	8013398 <scalbn+0x90>
 8013320:	4b31      	ldr	r3, [pc, #196]	; (80133e8 <scalbn+0xe0>)
 8013322:	4629      	mov	r1, r5
 8013324:	2200      	movs	r2, #0
 8013326:	ee10 0a10 	vmov	r0, s0
 801332a:	f7ed f97d 	bl	8000628 <__aeabi_dmul>
 801332e:	4b2f      	ldr	r3, [pc, #188]	; (80133ec <scalbn+0xe4>)
 8013330:	429e      	cmp	r6, r3
 8013332:	4604      	mov	r4, r0
 8013334:	460d      	mov	r5, r1
 8013336:	da12      	bge.n	801335e <scalbn+0x56>
 8013338:	a327      	add	r3, pc, #156	; (adr r3, 80133d8 <scalbn+0xd0>)
 801333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801333e:	f7ed f973 	bl	8000628 <__aeabi_dmul>
 8013342:	e009      	b.n	8013358 <scalbn+0x50>
 8013344:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013348:	428a      	cmp	r2, r1
 801334a:	d10c      	bne.n	8013366 <scalbn+0x5e>
 801334c:	ee10 2a10 	vmov	r2, s0
 8013350:	4620      	mov	r0, r4
 8013352:	4629      	mov	r1, r5
 8013354:	f7ec ffb2 	bl	80002bc <__adddf3>
 8013358:	4604      	mov	r4, r0
 801335a:	460d      	mov	r5, r1
 801335c:	e01c      	b.n	8013398 <scalbn+0x90>
 801335e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013362:	460b      	mov	r3, r1
 8013364:	3a36      	subs	r2, #54	; 0x36
 8013366:	4432      	add	r2, r6
 8013368:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801336c:	428a      	cmp	r2, r1
 801336e:	dd0b      	ble.n	8013388 <scalbn+0x80>
 8013370:	ec45 4b11 	vmov	d1, r4, r5
 8013374:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80133e0 <scalbn+0xd8>
 8013378:	f000 f83c 	bl	80133f4 <copysign>
 801337c:	a318      	add	r3, pc, #96	; (adr r3, 80133e0 <scalbn+0xd8>)
 801337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013382:	ec51 0b10 	vmov	r0, r1, d0
 8013386:	e7da      	b.n	801333e <scalbn+0x36>
 8013388:	2a00      	cmp	r2, #0
 801338a:	dd08      	ble.n	801339e <scalbn+0x96>
 801338c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013390:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013394:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013398:	ec45 4b10 	vmov	d0, r4, r5
 801339c:	bd70      	pop	{r4, r5, r6, pc}
 801339e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80133a2:	da0d      	bge.n	80133c0 <scalbn+0xb8>
 80133a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80133a8:	429e      	cmp	r6, r3
 80133aa:	ec45 4b11 	vmov	d1, r4, r5
 80133ae:	dce1      	bgt.n	8013374 <scalbn+0x6c>
 80133b0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80133d8 <scalbn+0xd0>
 80133b4:	f000 f81e 	bl	80133f4 <copysign>
 80133b8:	a307      	add	r3, pc, #28	; (adr r3, 80133d8 <scalbn+0xd0>)
 80133ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133be:	e7e0      	b.n	8013382 <scalbn+0x7a>
 80133c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80133c4:	3236      	adds	r2, #54	; 0x36
 80133c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80133ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80133ce:	4620      	mov	r0, r4
 80133d0:	4629      	mov	r1, r5
 80133d2:	2200      	movs	r2, #0
 80133d4:	4b06      	ldr	r3, [pc, #24]	; (80133f0 <scalbn+0xe8>)
 80133d6:	e7b2      	b.n	801333e <scalbn+0x36>
 80133d8:	c2f8f359 	.word	0xc2f8f359
 80133dc:	01a56e1f 	.word	0x01a56e1f
 80133e0:	8800759c 	.word	0x8800759c
 80133e4:	7e37e43c 	.word	0x7e37e43c
 80133e8:	43500000 	.word	0x43500000
 80133ec:	ffff3cb0 	.word	0xffff3cb0
 80133f0:	3c900000 	.word	0x3c900000

080133f4 <copysign>:
 80133f4:	ec51 0b10 	vmov	r0, r1, d0
 80133f8:	ee11 0a90 	vmov	r0, s3
 80133fc:	ee10 2a10 	vmov	r2, s0
 8013400:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013404:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013408:	ea41 0300 	orr.w	r3, r1, r0
 801340c:	ec43 2b10 	vmov	d0, r2, r3
 8013410:	4770      	bx	lr
	...

08013414 <__errno>:
 8013414:	4b01      	ldr	r3, [pc, #4]	; (801341c <__errno+0x8>)
 8013416:	6818      	ldr	r0, [r3, #0]
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop
 801341c:	2000000c 	.word	0x2000000c

08013420 <__libc_init_array>:
 8013420:	b570      	push	{r4, r5, r6, lr}
 8013422:	4e0d      	ldr	r6, [pc, #52]	; (8013458 <__libc_init_array+0x38>)
 8013424:	4c0d      	ldr	r4, [pc, #52]	; (801345c <__libc_init_array+0x3c>)
 8013426:	1ba4      	subs	r4, r4, r6
 8013428:	10a4      	asrs	r4, r4, #2
 801342a:	2500      	movs	r5, #0
 801342c:	42a5      	cmp	r5, r4
 801342e:	d109      	bne.n	8013444 <__libc_init_array+0x24>
 8013430:	4e0b      	ldr	r6, [pc, #44]	; (8013460 <__libc_init_array+0x40>)
 8013432:	4c0c      	ldr	r4, [pc, #48]	; (8013464 <__libc_init_array+0x44>)
 8013434:	f004 f9e8 	bl	8017808 <_init>
 8013438:	1ba4      	subs	r4, r4, r6
 801343a:	10a4      	asrs	r4, r4, #2
 801343c:	2500      	movs	r5, #0
 801343e:	42a5      	cmp	r5, r4
 8013440:	d105      	bne.n	801344e <__libc_init_array+0x2e>
 8013442:	bd70      	pop	{r4, r5, r6, pc}
 8013444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013448:	4798      	blx	r3
 801344a:	3501      	adds	r5, #1
 801344c:	e7ee      	b.n	801342c <__libc_init_array+0xc>
 801344e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013452:	4798      	blx	r3
 8013454:	3501      	adds	r5, #1
 8013456:	e7f2      	b.n	801343e <__libc_init_array+0x1e>
 8013458:	0801832c 	.word	0x0801832c
 801345c:	0801832c 	.word	0x0801832c
 8013460:	0801832c 	.word	0x0801832c
 8013464:	08018334 	.word	0x08018334

08013468 <memcpy>:
 8013468:	b510      	push	{r4, lr}
 801346a:	1e43      	subs	r3, r0, #1
 801346c:	440a      	add	r2, r1
 801346e:	4291      	cmp	r1, r2
 8013470:	d100      	bne.n	8013474 <memcpy+0xc>
 8013472:	bd10      	pop	{r4, pc}
 8013474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013478:	f803 4f01 	strb.w	r4, [r3, #1]!
 801347c:	e7f7      	b.n	801346e <memcpy+0x6>

0801347e <memset>:
 801347e:	4402      	add	r2, r0
 8013480:	4603      	mov	r3, r0
 8013482:	4293      	cmp	r3, r2
 8013484:	d100      	bne.n	8013488 <memset+0xa>
 8013486:	4770      	bx	lr
 8013488:	f803 1b01 	strb.w	r1, [r3], #1
 801348c:	e7f9      	b.n	8013482 <memset+0x4>

0801348e <__cvt>:
 801348e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013492:	ec55 4b10 	vmov	r4, r5, d0
 8013496:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013498:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801349c:	2d00      	cmp	r5, #0
 801349e:	460e      	mov	r6, r1
 80134a0:	4691      	mov	r9, r2
 80134a2:	4619      	mov	r1, r3
 80134a4:	bfb8      	it	lt
 80134a6:	4622      	movlt	r2, r4
 80134a8:	462b      	mov	r3, r5
 80134aa:	f027 0720 	bic.w	r7, r7, #32
 80134ae:	bfbb      	ittet	lt
 80134b0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80134b4:	461d      	movlt	r5, r3
 80134b6:	2300      	movge	r3, #0
 80134b8:	232d      	movlt	r3, #45	; 0x2d
 80134ba:	bfb8      	it	lt
 80134bc:	4614      	movlt	r4, r2
 80134be:	2f46      	cmp	r7, #70	; 0x46
 80134c0:	700b      	strb	r3, [r1, #0]
 80134c2:	d004      	beq.n	80134ce <__cvt+0x40>
 80134c4:	2f45      	cmp	r7, #69	; 0x45
 80134c6:	d100      	bne.n	80134ca <__cvt+0x3c>
 80134c8:	3601      	adds	r6, #1
 80134ca:	2102      	movs	r1, #2
 80134cc:	e000      	b.n	80134d0 <__cvt+0x42>
 80134ce:	2103      	movs	r1, #3
 80134d0:	ab03      	add	r3, sp, #12
 80134d2:	9301      	str	r3, [sp, #4]
 80134d4:	ab02      	add	r3, sp, #8
 80134d6:	9300      	str	r3, [sp, #0]
 80134d8:	4632      	mov	r2, r6
 80134da:	4653      	mov	r3, sl
 80134dc:	ec45 4b10 	vmov	d0, r4, r5
 80134e0:	f001 fdfe 	bl	80150e0 <_dtoa_r>
 80134e4:	2f47      	cmp	r7, #71	; 0x47
 80134e6:	4680      	mov	r8, r0
 80134e8:	d102      	bne.n	80134f0 <__cvt+0x62>
 80134ea:	f019 0f01 	tst.w	r9, #1
 80134ee:	d026      	beq.n	801353e <__cvt+0xb0>
 80134f0:	2f46      	cmp	r7, #70	; 0x46
 80134f2:	eb08 0906 	add.w	r9, r8, r6
 80134f6:	d111      	bne.n	801351c <__cvt+0x8e>
 80134f8:	f898 3000 	ldrb.w	r3, [r8]
 80134fc:	2b30      	cmp	r3, #48	; 0x30
 80134fe:	d10a      	bne.n	8013516 <__cvt+0x88>
 8013500:	2200      	movs	r2, #0
 8013502:	2300      	movs	r3, #0
 8013504:	4620      	mov	r0, r4
 8013506:	4629      	mov	r1, r5
 8013508:	f7ed faf6 	bl	8000af8 <__aeabi_dcmpeq>
 801350c:	b918      	cbnz	r0, 8013516 <__cvt+0x88>
 801350e:	f1c6 0601 	rsb	r6, r6, #1
 8013512:	f8ca 6000 	str.w	r6, [sl]
 8013516:	f8da 3000 	ldr.w	r3, [sl]
 801351a:	4499      	add	r9, r3
 801351c:	2200      	movs	r2, #0
 801351e:	2300      	movs	r3, #0
 8013520:	4620      	mov	r0, r4
 8013522:	4629      	mov	r1, r5
 8013524:	f7ed fae8 	bl	8000af8 <__aeabi_dcmpeq>
 8013528:	b938      	cbnz	r0, 801353a <__cvt+0xac>
 801352a:	2230      	movs	r2, #48	; 0x30
 801352c:	9b03      	ldr	r3, [sp, #12]
 801352e:	454b      	cmp	r3, r9
 8013530:	d205      	bcs.n	801353e <__cvt+0xb0>
 8013532:	1c59      	adds	r1, r3, #1
 8013534:	9103      	str	r1, [sp, #12]
 8013536:	701a      	strb	r2, [r3, #0]
 8013538:	e7f8      	b.n	801352c <__cvt+0x9e>
 801353a:	f8cd 900c 	str.w	r9, [sp, #12]
 801353e:	9b03      	ldr	r3, [sp, #12]
 8013540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013542:	eba3 0308 	sub.w	r3, r3, r8
 8013546:	4640      	mov	r0, r8
 8013548:	6013      	str	r3, [r2, #0]
 801354a:	b004      	add	sp, #16
 801354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013550 <__exponent>:
 8013550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013552:	2900      	cmp	r1, #0
 8013554:	4604      	mov	r4, r0
 8013556:	bfba      	itte	lt
 8013558:	4249      	neglt	r1, r1
 801355a:	232d      	movlt	r3, #45	; 0x2d
 801355c:	232b      	movge	r3, #43	; 0x2b
 801355e:	2909      	cmp	r1, #9
 8013560:	f804 2b02 	strb.w	r2, [r4], #2
 8013564:	7043      	strb	r3, [r0, #1]
 8013566:	dd20      	ble.n	80135aa <__exponent+0x5a>
 8013568:	f10d 0307 	add.w	r3, sp, #7
 801356c:	461f      	mov	r7, r3
 801356e:	260a      	movs	r6, #10
 8013570:	fb91 f5f6 	sdiv	r5, r1, r6
 8013574:	fb06 1115 	mls	r1, r6, r5, r1
 8013578:	3130      	adds	r1, #48	; 0x30
 801357a:	2d09      	cmp	r5, #9
 801357c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013580:	f103 32ff 	add.w	r2, r3, #4294967295
 8013584:	4629      	mov	r1, r5
 8013586:	dc09      	bgt.n	801359c <__exponent+0x4c>
 8013588:	3130      	adds	r1, #48	; 0x30
 801358a:	3b02      	subs	r3, #2
 801358c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013590:	42bb      	cmp	r3, r7
 8013592:	4622      	mov	r2, r4
 8013594:	d304      	bcc.n	80135a0 <__exponent+0x50>
 8013596:	1a10      	subs	r0, r2, r0
 8013598:	b003      	add	sp, #12
 801359a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801359c:	4613      	mov	r3, r2
 801359e:	e7e7      	b.n	8013570 <__exponent+0x20>
 80135a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135a4:	f804 2b01 	strb.w	r2, [r4], #1
 80135a8:	e7f2      	b.n	8013590 <__exponent+0x40>
 80135aa:	2330      	movs	r3, #48	; 0x30
 80135ac:	4419      	add	r1, r3
 80135ae:	7083      	strb	r3, [r0, #2]
 80135b0:	1d02      	adds	r2, r0, #4
 80135b2:	70c1      	strb	r1, [r0, #3]
 80135b4:	e7ef      	b.n	8013596 <__exponent+0x46>
	...

080135b8 <_printf_float>:
 80135b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135bc:	b08d      	sub	sp, #52	; 0x34
 80135be:	460c      	mov	r4, r1
 80135c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80135c4:	4616      	mov	r6, r2
 80135c6:	461f      	mov	r7, r3
 80135c8:	4605      	mov	r5, r0
 80135ca:	f002 fe7b 	bl	80162c4 <_localeconv_r>
 80135ce:	6803      	ldr	r3, [r0, #0]
 80135d0:	9304      	str	r3, [sp, #16]
 80135d2:	4618      	mov	r0, r3
 80135d4:	f7ec fe14 	bl	8000200 <strlen>
 80135d8:	2300      	movs	r3, #0
 80135da:	930a      	str	r3, [sp, #40]	; 0x28
 80135dc:	f8d8 3000 	ldr.w	r3, [r8]
 80135e0:	9005      	str	r0, [sp, #20]
 80135e2:	3307      	adds	r3, #7
 80135e4:	f023 0307 	bic.w	r3, r3, #7
 80135e8:	f103 0208 	add.w	r2, r3, #8
 80135ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 80135f0:	f8d4 b000 	ldr.w	fp, [r4]
 80135f4:	f8c8 2000 	str.w	r2, [r8]
 80135f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013600:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013604:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013608:	9307      	str	r3, [sp, #28]
 801360a:	f8cd 8018 	str.w	r8, [sp, #24]
 801360e:	f04f 32ff 	mov.w	r2, #4294967295
 8013612:	4ba7      	ldr	r3, [pc, #668]	; (80138b0 <_printf_float+0x2f8>)
 8013614:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013618:	f7ed faa0 	bl	8000b5c <__aeabi_dcmpun>
 801361c:	bb70      	cbnz	r0, 801367c <_printf_float+0xc4>
 801361e:	f04f 32ff 	mov.w	r2, #4294967295
 8013622:	4ba3      	ldr	r3, [pc, #652]	; (80138b0 <_printf_float+0x2f8>)
 8013624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013628:	f7ed fa7a 	bl	8000b20 <__aeabi_dcmple>
 801362c:	bb30      	cbnz	r0, 801367c <_printf_float+0xc4>
 801362e:	2200      	movs	r2, #0
 8013630:	2300      	movs	r3, #0
 8013632:	4640      	mov	r0, r8
 8013634:	4649      	mov	r1, r9
 8013636:	f7ed fa69 	bl	8000b0c <__aeabi_dcmplt>
 801363a:	b110      	cbz	r0, 8013642 <_printf_float+0x8a>
 801363c:	232d      	movs	r3, #45	; 0x2d
 801363e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013642:	4a9c      	ldr	r2, [pc, #624]	; (80138b4 <_printf_float+0x2fc>)
 8013644:	4b9c      	ldr	r3, [pc, #624]	; (80138b8 <_printf_float+0x300>)
 8013646:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801364a:	bf8c      	ite	hi
 801364c:	4690      	movhi	r8, r2
 801364e:	4698      	movls	r8, r3
 8013650:	2303      	movs	r3, #3
 8013652:	f02b 0204 	bic.w	r2, fp, #4
 8013656:	6123      	str	r3, [r4, #16]
 8013658:	6022      	str	r2, [r4, #0]
 801365a:	f04f 0900 	mov.w	r9, #0
 801365e:	9700      	str	r7, [sp, #0]
 8013660:	4633      	mov	r3, r6
 8013662:	aa0b      	add	r2, sp, #44	; 0x2c
 8013664:	4621      	mov	r1, r4
 8013666:	4628      	mov	r0, r5
 8013668:	f000 f9e6 	bl	8013a38 <_printf_common>
 801366c:	3001      	adds	r0, #1
 801366e:	f040 808d 	bne.w	801378c <_printf_float+0x1d4>
 8013672:	f04f 30ff 	mov.w	r0, #4294967295
 8013676:	b00d      	add	sp, #52	; 0x34
 8013678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367c:	4642      	mov	r2, r8
 801367e:	464b      	mov	r3, r9
 8013680:	4640      	mov	r0, r8
 8013682:	4649      	mov	r1, r9
 8013684:	f7ed fa6a 	bl	8000b5c <__aeabi_dcmpun>
 8013688:	b110      	cbz	r0, 8013690 <_printf_float+0xd8>
 801368a:	4a8c      	ldr	r2, [pc, #560]	; (80138bc <_printf_float+0x304>)
 801368c:	4b8c      	ldr	r3, [pc, #560]	; (80138c0 <_printf_float+0x308>)
 801368e:	e7da      	b.n	8013646 <_printf_float+0x8e>
 8013690:	6861      	ldr	r1, [r4, #4]
 8013692:	1c4b      	adds	r3, r1, #1
 8013694:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013698:	a80a      	add	r0, sp, #40	; 0x28
 801369a:	d13e      	bne.n	801371a <_printf_float+0x162>
 801369c:	2306      	movs	r3, #6
 801369e:	6063      	str	r3, [r4, #4]
 80136a0:	2300      	movs	r3, #0
 80136a2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80136a6:	ab09      	add	r3, sp, #36	; 0x24
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	ec49 8b10 	vmov	d0, r8, r9
 80136ae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80136b2:	6022      	str	r2, [r4, #0]
 80136b4:	f8cd a004 	str.w	sl, [sp, #4]
 80136b8:	6861      	ldr	r1, [r4, #4]
 80136ba:	4628      	mov	r0, r5
 80136bc:	f7ff fee7 	bl	801348e <__cvt>
 80136c0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80136c4:	2b47      	cmp	r3, #71	; 0x47
 80136c6:	4680      	mov	r8, r0
 80136c8:	d109      	bne.n	80136de <_printf_float+0x126>
 80136ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136cc:	1cd8      	adds	r0, r3, #3
 80136ce:	db02      	blt.n	80136d6 <_printf_float+0x11e>
 80136d0:	6862      	ldr	r2, [r4, #4]
 80136d2:	4293      	cmp	r3, r2
 80136d4:	dd47      	ble.n	8013766 <_printf_float+0x1ae>
 80136d6:	f1aa 0a02 	sub.w	sl, sl, #2
 80136da:	fa5f fa8a 	uxtb.w	sl, sl
 80136de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80136e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80136e4:	d824      	bhi.n	8013730 <_printf_float+0x178>
 80136e6:	3901      	subs	r1, #1
 80136e8:	4652      	mov	r2, sl
 80136ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80136ee:	9109      	str	r1, [sp, #36]	; 0x24
 80136f0:	f7ff ff2e 	bl	8013550 <__exponent>
 80136f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136f6:	1813      	adds	r3, r2, r0
 80136f8:	2a01      	cmp	r2, #1
 80136fa:	4681      	mov	r9, r0
 80136fc:	6123      	str	r3, [r4, #16]
 80136fe:	dc02      	bgt.n	8013706 <_printf_float+0x14e>
 8013700:	6822      	ldr	r2, [r4, #0]
 8013702:	07d1      	lsls	r1, r2, #31
 8013704:	d501      	bpl.n	801370a <_printf_float+0x152>
 8013706:	3301      	adds	r3, #1
 8013708:	6123      	str	r3, [r4, #16]
 801370a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801370e:	2b00      	cmp	r3, #0
 8013710:	d0a5      	beq.n	801365e <_printf_float+0xa6>
 8013712:	232d      	movs	r3, #45	; 0x2d
 8013714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013718:	e7a1      	b.n	801365e <_printf_float+0xa6>
 801371a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801371e:	f000 8177 	beq.w	8013a10 <_printf_float+0x458>
 8013722:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013726:	d1bb      	bne.n	80136a0 <_printf_float+0xe8>
 8013728:	2900      	cmp	r1, #0
 801372a:	d1b9      	bne.n	80136a0 <_printf_float+0xe8>
 801372c:	2301      	movs	r3, #1
 801372e:	e7b6      	b.n	801369e <_printf_float+0xe6>
 8013730:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8013734:	d119      	bne.n	801376a <_printf_float+0x1b2>
 8013736:	2900      	cmp	r1, #0
 8013738:	6863      	ldr	r3, [r4, #4]
 801373a:	dd0c      	ble.n	8013756 <_printf_float+0x19e>
 801373c:	6121      	str	r1, [r4, #16]
 801373e:	b913      	cbnz	r3, 8013746 <_printf_float+0x18e>
 8013740:	6822      	ldr	r2, [r4, #0]
 8013742:	07d2      	lsls	r2, r2, #31
 8013744:	d502      	bpl.n	801374c <_printf_float+0x194>
 8013746:	3301      	adds	r3, #1
 8013748:	440b      	add	r3, r1
 801374a:	6123      	str	r3, [r4, #16]
 801374c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801374e:	65a3      	str	r3, [r4, #88]	; 0x58
 8013750:	f04f 0900 	mov.w	r9, #0
 8013754:	e7d9      	b.n	801370a <_printf_float+0x152>
 8013756:	b913      	cbnz	r3, 801375e <_printf_float+0x1a6>
 8013758:	6822      	ldr	r2, [r4, #0]
 801375a:	07d0      	lsls	r0, r2, #31
 801375c:	d501      	bpl.n	8013762 <_printf_float+0x1aa>
 801375e:	3302      	adds	r3, #2
 8013760:	e7f3      	b.n	801374a <_printf_float+0x192>
 8013762:	2301      	movs	r3, #1
 8013764:	e7f1      	b.n	801374a <_printf_float+0x192>
 8013766:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801376a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801376e:	4293      	cmp	r3, r2
 8013770:	db05      	blt.n	801377e <_printf_float+0x1c6>
 8013772:	6822      	ldr	r2, [r4, #0]
 8013774:	6123      	str	r3, [r4, #16]
 8013776:	07d1      	lsls	r1, r2, #31
 8013778:	d5e8      	bpl.n	801374c <_printf_float+0x194>
 801377a:	3301      	adds	r3, #1
 801377c:	e7e5      	b.n	801374a <_printf_float+0x192>
 801377e:	2b00      	cmp	r3, #0
 8013780:	bfd4      	ite	le
 8013782:	f1c3 0302 	rsble	r3, r3, #2
 8013786:	2301      	movgt	r3, #1
 8013788:	4413      	add	r3, r2
 801378a:	e7de      	b.n	801374a <_printf_float+0x192>
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	055a      	lsls	r2, r3, #21
 8013790:	d407      	bmi.n	80137a2 <_printf_float+0x1ea>
 8013792:	6923      	ldr	r3, [r4, #16]
 8013794:	4642      	mov	r2, r8
 8013796:	4631      	mov	r1, r6
 8013798:	4628      	mov	r0, r5
 801379a:	47b8      	blx	r7
 801379c:	3001      	adds	r0, #1
 801379e:	d12b      	bne.n	80137f8 <_printf_float+0x240>
 80137a0:	e767      	b.n	8013672 <_printf_float+0xba>
 80137a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80137a6:	f240 80dc 	bls.w	8013962 <_printf_float+0x3aa>
 80137aa:	2200      	movs	r2, #0
 80137ac:	2300      	movs	r3, #0
 80137ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80137b2:	f7ed f9a1 	bl	8000af8 <__aeabi_dcmpeq>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d033      	beq.n	8013822 <_printf_float+0x26a>
 80137ba:	2301      	movs	r3, #1
 80137bc:	4a41      	ldr	r2, [pc, #260]	; (80138c4 <_printf_float+0x30c>)
 80137be:	4631      	mov	r1, r6
 80137c0:	4628      	mov	r0, r5
 80137c2:	47b8      	blx	r7
 80137c4:	3001      	adds	r0, #1
 80137c6:	f43f af54 	beq.w	8013672 <_printf_float+0xba>
 80137ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80137ce:	429a      	cmp	r2, r3
 80137d0:	db02      	blt.n	80137d8 <_printf_float+0x220>
 80137d2:	6823      	ldr	r3, [r4, #0]
 80137d4:	07d8      	lsls	r0, r3, #31
 80137d6:	d50f      	bpl.n	80137f8 <_printf_float+0x240>
 80137d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137dc:	4631      	mov	r1, r6
 80137de:	4628      	mov	r0, r5
 80137e0:	47b8      	blx	r7
 80137e2:	3001      	adds	r0, #1
 80137e4:	f43f af45 	beq.w	8013672 <_printf_float+0xba>
 80137e8:	f04f 0800 	mov.w	r8, #0
 80137ec:	f104 091a 	add.w	r9, r4, #26
 80137f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137f2:	3b01      	subs	r3, #1
 80137f4:	4543      	cmp	r3, r8
 80137f6:	dc09      	bgt.n	801380c <_printf_float+0x254>
 80137f8:	6823      	ldr	r3, [r4, #0]
 80137fa:	079b      	lsls	r3, r3, #30
 80137fc:	f100 8103 	bmi.w	8013a06 <_printf_float+0x44e>
 8013800:	68e0      	ldr	r0, [r4, #12]
 8013802:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013804:	4298      	cmp	r0, r3
 8013806:	bfb8      	it	lt
 8013808:	4618      	movlt	r0, r3
 801380a:	e734      	b.n	8013676 <_printf_float+0xbe>
 801380c:	2301      	movs	r3, #1
 801380e:	464a      	mov	r2, r9
 8013810:	4631      	mov	r1, r6
 8013812:	4628      	mov	r0, r5
 8013814:	47b8      	blx	r7
 8013816:	3001      	adds	r0, #1
 8013818:	f43f af2b 	beq.w	8013672 <_printf_float+0xba>
 801381c:	f108 0801 	add.w	r8, r8, #1
 8013820:	e7e6      	b.n	80137f0 <_printf_float+0x238>
 8013822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013824:	2b00      	cmp	r3, #0
 8013826:	dc2b      	bgt.n	8013880 <_printf_float+0x2c8>
 8013828:	2301      	movs	r3, #1
 801382a:	4a26      	ldr	r2, [pc, #152]	; (80138c4 <_printf_float+0x30c>)
 801382c:	4631      	mov	r1, r6
 801382e:	4628      	mov	r0, r5
 8013830:	47b8      	blx	r7
 8013832:	3001      	adds	r0, #1
 8013834:	f43f af1d 	beq.w	8013672 <_printf_float+0xba>
 8013838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801383a:	b923      	cbnz	r3, 8013846 <_printf_float+0x28e>
 801383c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801383e:	b913      	cbnz	r3, 8013846 <_printf_float+0x28e>
 8013840:	6823      	ldr	r3, [r4, #0]
 8013842:	07d9      	lsls	r1, r3, #31
 8013844:	d5d8      	bpl.n	80137f8 <_printf_float+0x240>
 8013846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801384a:	4631      	mov	r1, r6
 801384c:	4628      	mov	r0, r5
 801384e:	47b8      	blx	r7
 8013850:	3001      	adds	r0, #1
 8013852:	f43f af0e 	beq.w	8013672 <_printf_float+0xba>
 8013856:	f04f 0900 	mov.w	r9, #0
 801385a:	f104 0a1a 	add.w	sl, r4, #26
 801385e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013860:	425b      	negs	r3, r3
 8013862:	454b      	cmp	r3, r9
 8013864:	dc01      	bgt.n	801386a <_printf_float+0x2b2>
 8013866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013868:	e794      	b.n	8013794 <_printf_float+0x1dc>
 801386a:	2301      	movs	r3, #1
 801386c:	4652      	mov	r2, sl
 801386e:	4631      	mov	r1, r6
 8013870:	4628      	mov	r0, r5
 8013872:	47b8      	blx	r7
 8013874:	3001      	adds	r0, #1
 8013876:	f43f aefc 	beq.w	8013672 <_printf_float+0xba>
 801387a:	f109 0901 	add.w	r9, r9, #1
 801387e:	e7ee      	b.n	801385e <_printf_float+0x2a6>
 8013880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013884:	429a      	cmp	r2, r3
 8013886:	bfa8      	it	ge
 8013888:	461a      	movge	r2, r3
 801388a:	2a00      	cmp	r2, #0
 801388c:	4691      	mov	r9, r2
 801388e:	dd07      	ble.n	80138a0 <_printf_float+0x2e8>
 8013890:	4613      	mov	r3, r2
 8013892:	4631      	mov	r1, r6
 8013894:	4642      	mov	r2, r8
 8013896:	4628      	mov	r0, r5
 8013898:	47b8      	blx	r7
 801389a:	3001      	adds	r0, #1
 801389c:	f43f aee9 	beq.w	8013672 <_printf_float+0xba>
 80138a0:	f104 031a 	add.w	r3, r4, #26
 80138a4:	f04f 0b00 	mov.w	fp, #0
 80138a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80138ac:	9306      	str	r3, [sp, #24]
 80138ae:	e015      	b.n	80138dc <_printf_float+0x324>
 80138b0:	7fefffff 	.word	0x7fefffff
 80138b4:	08017ff4 	.word	0x08017ff4
 80138b8:	08017ff0 	.word	0x08017ff0
 80138bc:	08017ffc 	.word	0x08017ffc
 80138c0:	08017ff8 	.word	0x08017ff8
 80138c4:	0801821b 	.word	0x0801821b
 80138c8:	2301      	movs	r3, #1
 80138ca:	9a06      	ldr	r2, [sp, #24]
 80138cc:	4631      	mov	r1, r6
 80138ce:	4628      	mov	r0, r5
 80138d0:	47b8      	blx	r7
 80138d2:	3001      	adds	r0, #1
 80138d4:	f43f aecd 	beq.w	8013672 <_printf_float+0xba>
 80138d8:	f10b 0b01 	add.w	fp, fp, #1
 80138dc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80138e0:	ebaa 0309 	sub.w	r3, sl, r9
 80138e4:	455b      	cmp	r3, fp
 80138e6:	dcef      	bgt.n	80138c8 <_printf_float+0x310>
 80138e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80138ec:	429a      	cmp	r2, r3
 80138ee:	44d0      	add	r8, sl
 80138f0:	db15      	blt.n	801391e <_printf_float+0x366>
 80138f2:	6823      	ldr	r3, [r4, #0]
 80138f4:	07da      	lsls	r2, r3, #31
 80138f6:	d412      	bmi.n	801391e <_printf_float+0x366>
 80138f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138fc:	eba3 020a 	sub.w	r2, r3, sl
 8013900:	eba3 0a01 	sub.w	sl, r3, r1
 8013904:	4592      	cmp	sl, r2
 8013906:	bfa8      	it	ge
 8013908:	4692      	movge	sl, r2
 801390a:	f1ba 0f00 	cmp.w	sl, #0
 801390e:	dc0e      	bgt.n	801392e <_printf_float+0x376>
 8013910:	f04f 0800 	mov.w	r8, #0
 8013914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013918:	f104 091a 	add.w	r9, r4, #26
 801391c:	e019      	b.n	8013952 <_printf_float+0x39a>
 801391e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013922:	4631      	mov	r1, r6
 8013924:	4628      	mov	r0, r5
 8013926:	47b8      	blx	r7
 8013928:	3001      	adds	r0, #1
 801392a:	d1e5      	bne.n	80138f8 <_printf_float+0x340>
 801392c:	e6a1      	b.n	8013672 <_printf_float+0xba>
 801392e:	4653      	mov	r3, sl
 8013930:	4642      	mov	r2, r8
 8013932:	4631      	mov	r1, r6
 8013934:	4628      	mov	r0, r5
 8013936:	47b8      	blx	r7
 8013938:	3001      	adds	r0, #1
 801393a:	d1e9      	bne.n	8013910 <_printf_float+0x358>
 801393c:	e699      	b.n	8013672 <_printf_float+0xba>
 801393e:	2301      	movs	r3, #1
 8013940:	464a      	mov	r2, r9
 8013942:	4631      	mov	r1, r6
 8013944:	4628      	mov	r0, r5
 8013946:	47b8      	blx	r7
 8013948:	3001      	adds	r0, #1
 801394a:	f43f ae92 	beq.w	8013672 <_printf_float+0xba>
 801394e:	f108 0801 	add.w	r8, r8, #1
 8013952:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013956:	1a9b      	subs	r3, r3, r2
 8013958:	eba3 030a 	sub.w	r3, r3, sl
 801395c:	4543      	cmp	r3, r8
 801395e:	dcee      	bgt.n	801393e <_printf_float+0x386>
 8013960:	e74a      	b.n	80137f8 <_printf_float+0x240>
 8013962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013964:	2a01      	cmp	r2, #1
 8013966:	dc01      	bgt.n	801396c <_printf_float+0x3b4>
 8013968:	07db      	lsls	r3, r3, #31
 801396a:	d53a      	bpl.n	80139e2 <_printf_float+0x42a>
 801396c:	2301      	movs	r3, #1
 801396e:	4642      	mov	r2, r8
 8013970:	4631      	mov	r1, r6
 8013972:	4628      	mov	r0, r5
 8013974:	47b8      	blx	r7
 8013976:	3001      	adds	r0, #1
 8013978:	f43f ae7b 	beq.w	8013672 <_printf_float+0xba>
 801397c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013980:	4631      	mov	r1, r6
 8013982:	4628      	mov	r0, r5
 8013984:	47b8      	blx	r7
 8013986:	3001      	adds	r0, #1
 8013988:	f108 0801 	add.w	r8, r8, #1
 801398c:	f43f ae71 	beq.w	8013672 <_printf_float+0xba>
 8013990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013992:	2200      	movs	r2, #0
 8013994:	f103 3aff 	add.w	sl, r3, #4294967295
 8013998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801399c:	2300      	movs	r3, #0
 801399e:	f7ed f8ab 	bl	8000af8 <__aeabi_dcmpeq>
 80139a2:	b9c8      	cbnz	r0, 80139d8 <_printf_float+0x420>
 80139a4:	4653      	mov	r3, sl
 80139a6:	4642      	mov	r2, r8
 80139a8:	4631      	mov	r1, r6
 80139aa:	4628      	mov	r0, r5
 80139ac:	47b8      	blx	r7
 80139ae:	3001      	adds	r0, #1
 80139b0:	d10e      	bne.n	80139d0 <_printf_float+0x418>
 80139b2:	e65e      	b.n	8013672 <_printf_float+0xba>
 80139b4:	2301      	movs	r3, #1
 80139b6:	4652      	mov	r2, sl
 80139b8:	4631      	mov	r1, r6
 80139ba:	4628      	mov	r0, r5
 80139bc:	47b8      	blx	r7
 80139be:	3001      	adds	r0, #1
 80139c0:	f43f ae57 	beq.w	8013672 <_printf_float+0xba>
 80139c4:	f108 0801 	add.w	r8, r8, #1
 80139c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ca:	3b01      	subs	r3, #1
 80139cc:	4543      	cmp	r3, r8
 80139ce:	dcf1      	bgt.n	80139b4 <_printf_float+0x3fc>
 80139d0:	464b      	mov	r3, r9
 80139d2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80139d6:	e6de      	b.n	8013796 <_printf_float+0x1de>
 80139d8:	f04f 0800 	mov.w	r8, #0
 80139dc:	f104 0a1a 	add.w	sl, r4, #26
 80139e0:	e7f2      	b.n	80139c8 <_printf_float+0x410>
 80139e2:	2301      	movs	r3, #1
 80139e4:	e7df      	b.n	80139a6 <_printf_float+0x3ee>
 80139e6:	2301      	movs	r3, #1
 80139e8:	464a      	mov	r2, r9
 80139ea:	4631      	mov	r1, r6
 80139ec:	4628      	mov	r0, r5
 80139ee:	47b8      	blx	r7
 80139f0:	3001      	adds	r0, #1
 80139f2:	f43f ae3e 	beq.w	8013672 <_printf_float+0xba>
 80139f6:	f108 0801 	add.w	r8, r8, #1
 80139fa:	68e3      	ldr	r3, [r4, #12]
 80139fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80139fe:	1a9b      	subs	r3, r3, r2
 8013a00:	4543      	cmp	r3, r8
 8013a02:	dcf0      	bgt.n	80139e6 <_printf_float+0x42e>
 8013a04:	e6fc      	b.n	8013800 <_printf_float+0x248>
 8013a06:	f04f 0800 	mov.w	r8, #0
 8013a0a:	f104 0919 	add.w	r9, r4, #25
 8013a0e:	e7f4      	b.n	80139fa <_printf_float+0x442>
 8013a10:	2900      	cmp	r1, #0
 8013a12:	f43f ae8b 	beq.w	801372c <_printf_float+0x174>
 8013a16:	2300      	movs	r3, #0
 8013a18:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013a1c:	ab09      	add	r3, sp, #36	; 0x24
 8013a1e:	9300      	str	r3, [sp, #0]
 8013a20:	ec49 8b10 	vmov	d0, r8, r9
 8013a24:	6022      	str	r2, [r4, #0]
 8013a26:	f8cd a004 	str.w	sl, [sp, #4]
 8013a2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013a2e:	4628      	mov	r0, r5
 8013a30:	f7ff fd2d 	bl	801348e <__cvt>
 8013a34:	4680      	mov	r8, r0
 8013a36:	e648      	b.n	80136ca <_printf_float+0x112>

08013a38 <_printf_common>:
 8013a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a3c:	4691      	mov	r9, r2
 8013a3e:	461f      	mov	r7, r3
 8013a40:	688a      	ldr	r2, [r1, #8]
 8013a42:	690b      	ldr	r3, [r1, #16]
 8013a44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	bfb8      	it	lt
 8013a4c:	4613      	movlt	r3, r2
 8013a4e:	f8c9 3000 	str.w	r3, [r9]
 8013a52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013a56:	4606      	mov	r6, r0
 8013a58:	460c      	mov	r4, r1
 8013a5a:	b112      	cbz	r2, 8013a62 <_printf_common+0x2a>
 8013a5c:	3301      	adds	r3, #1
 8013a5e:	f8c9 3000 	str.w	r3, [r9]
 8013a62:	6823      	ldr	r3, [r4, #0]
 8013a64:	0699      	lsls	r1, r3, #26
 8013a66:	bf42      	ittt	mi
 8013a68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013a6c:	3302      	addmi	r3, #2
 8013a6e:	f8c9 3000 	strmi.w	r3, [r9]
 8013a72:	6825      	ldr	r5, [r4, #0]
 8013a74:	f015 0506 	ands.w	r5, r5, #6
 8013a78:	d107      	bne.n	8013a8a <_printf_common+0x52>
 8013a7a:	f104 0a19 	add.w	sl, r4, #25
 8013a7e:	68e3      	ldr	r3, [r4, #12]
 8013a80:	f8d9 2000 	ldr.w	r2, [r9]
 8013a84:	1a9b      	subs	r3, r3, r2
 8013a86:	42ab      	cmp	r3, r5
 8013a88:	dc28      	bgt.n	8013adc <_printf_common+0xa4>
 8013a8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013a8e:	6822      	ldr	r2, [r4, #0]
 8013a90:	3300      	adds	r3, #0
 8013a92:	bf18      	it	ne
 8013a94:	2301      	movne	r3, #1
 8013a96:	0692      	lsls	r2, r2, #26
 8013a98:	d42d      	bmi.n	8013af6 <_printf_common+0xbe>
 8013a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013a9e:	4639      	mov	r1, r7
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	47c0      	blx	r8
 8013aa4:	3001      	adds	r0, #1
 8013aa6:	d020      	beq.n	8013aea <_printf_common+0xb2>
 8013aa8:	6823      	ldr	r3, [r4, #0]
 8013aaa:	68e5      	ldr	r5, [r4, #12]
 8013aac:	f8d9 2000 	ldr.w	r2, [r9]
 8013ab0:	f003 0306 	and.w	r3, r3, #6
 8013ab4:	2b04      	cmp	r3, #4
 8013ab6:	bf08      	it	eq
 8013ab8:	1aad      	subeq	r5, r5, r2
 8013aba:	68a3      	ldr	r3, [r4, #8]
 8013abc:	6922      	ldr	r2, [r4, #16]
 8013abe:	bf0c      	ite	eq
 8013ac0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013ac4:	2500      	movne	r5, #0
 8013ac6:	4293      	cmp	r3, r2
 8013ac8:	bfc4      	itt	gt
 8013aca:	1a9b      	subgt	r3, r3, r2
 8013acc:	18ed      	addgt	r5, r5, r3
 8013ace:	f04f 0900 	mov.w	r9, #0
 8013ad2:	341a      	adds	r4, #26
 8013ad4:	454d      	cmp	r5, r9
 8013ad6:	d11a      	bne.n	8013b0e <_printf_common+0xd6>
 8013ad8:	2000      	movs	r0, #0
 8013ada:	e008      	b.n	8013aee <_printf_common+0xb6>
 8013adc:	2301      	movs	r3, #1
 8013ade:	4652      	mov	r2, sl
 8013ae0:	4639      	mov	r1, r7
 8013ae2:	4630      	mov	r0, r6
 8013ae4:	47c0      	blx	r8
 8013ae6:	3001      	adds	r0, #1
 8013ae8:	d103      	bne.n	8013af2 <_printf_common+0xba>
 8013aea:	f04f 30ff 	mov.w	r0, #4294967295
 8013aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013af2:	3501      	adds	r5, #1
 8013af4:	e7c3      	b.n	8013a7e <_printf_common+0x46>
 8013af6:	18e1      	adds	r1, r4, r3
 8013af8:	1c5a      	adds	r2, r3, #1
 8013afa:	2030      	movs	r0, #48	; 0x30
 8013afc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013b00:	4422      	add	r2, r4
 8013b02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013b06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013b0a:	3302      	adds	r3, #2
 8013b0c:	e7c5      	b.n	8013a9a <_printf_common+0x62>
 8013b0e:	2301      	movs	r3, #1
 8013b10:	4622      	mov	r2, r4
 8013b12:	4639      	mov	r1, r7
 8013b14:	4630      	mov	r0, r6
 8013b16:	47c0      	blx	r8
 8013b18:	3001      	adds	r0, #1
 8013b1a:	d0e6      	beq.n	8013aea <_printf_common+0xb2>
 8013b1c:	f109 0901 	add.w	r9, r9, #1
 8013b20:	e7d8      	b.n	8013ad4 <_printf_common+0x9c>
	...

08013b24 <_printf_i>:
 8013b24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013b28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013b2c:	460c      	mov	r4, r1
 8013b2e:	7e09      	ldrb	r1, [r1, #24]
 8013b30:	b085      	sub	sp, #20
 8013b32:	296e      	cmp	r1, #110	; 0x6e
 8013b34:	4617      	mov	r7, r2
 8013b36:	4606      	mov	r6, r0
 8013b38:	4698      	mov	r8, r3
 8013b3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b3c:	f000 80b3 	beq.w	8013ca6 <_printf_i+0x182>
 8013b40:	d822      	bhi.n	8013b88 <_printf_i+0x64>
 8013b42:	2963      	cmp	r1, #99	; 0x63
 8013b44:	d036      	beq.n	8013bb4 <_printf_i+0x90>
 8013b46:	d80a      	bhi.n	8013b5e <_printf_i+0x3a>
 8013b48:	2900      	cmp	r1, #0
 8013b4a:	f000 80b9 	beq.w	8013cc0 <_printf_i+0x19c>
 8013b4e:	2958      	cmp	r1, #88	; 0x58
 8013b50:	f000 8083 	beq.w	8013c5a <_printf_i+0x136>
 8013b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013b58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013b5c:	e032      	b.n	8013bc4 <_printf_i+0xa0>
 8013b5e:	2964      	cmp	r1, #100	; 0x64
 8013b60:	d001      	beq.n	8013b66 <_printf_i+0x42>
 8013b62:	2969      	cmp	r1, #105	; 0x69
 8013b64:	d1f6      	bne.n	8013b54 <_printf_i+0x30>
 8013b66:	6820      	ldr	r0, [r4, #0]
 8013b68:	6813      	ldr	r3, [r2, #0]
 8013b6a:	0605      	lsls	r5, r0, #24
 8013b6c:	f103 0104 	add.w	r1, r3, #4
 8013b70:	d52a      	bpl.n	8013bc8 <_printf_i+0xa4>
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	6011      	str	r1, [r2, #0]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	da03      	bge.n	8013b82 <_printf_i+0x5e>
 8013b7a:	222d      	movs	r2, #45	; 0x2d
 8013b7c:	425b      	negs	r3, r3
 8013b7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013b82:	486f      	ldr	r0, [pc, #444]	; (8013d40 <_printf_i+0x21c>)
 8013b84:	220a      	movs	r2, #10
 8013b86:	e039      	b.n	8013bfc <_printf_i+0xd8>
 8013b88:	2973      	cmp	r1, #115	; 0x73
 8013b8a:	f000 809d 	beq.w	8013cc8 <_printf_i+0x1a4>
 8013b8e:	d808      	bhi.n	8013ba2 <_printf_i+0x7e>
 8013b90:	296f      	cmp	r1, #111	; 0x6f
 8013b92:	d020      	beq.n	8013bd6 <_printf_i+0xb2>
 8013b94:	2970      	cmp	r1, #112	; 0x70
 8013b96:	d1dd      	bne.n	8013b54 <_printf_i+0x30>
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	f043 0320 	orr.w	r3, r3, #32
 8013b9e:	6023      	str	r3, [r4, #0]
 8013ba0:	e003      	b.n	8013baa <_printf_i+0x86>
 8013ba2:	2975      	cmp	r1, #117	; 0x75
 8013ba4:	d017      	beq.n	8013bd6 <_printf_i+0xb2>
 8013ba6:	2978      	cmp	r1, #120	; 0x78
 8013ba8:	d1d4      	bne.n	8013b54 <_printf_i+0x30>
 8013baa:	2378      	movs	r3, #120	; 0x78
 8013bac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013bb0:	4864      	ldr	r0, [pc, #400]	; (8013d44 <_printf_i+0x220>)
 8013bb2:	e055      	b.n	8013c60 <_printf_i+0x13c>
 8013bb4:	6813      	ldr	r3, [r2, #0]
 8013bb6:	1d19      	adds	r1, r3, #4
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	6011      	str	r1, [r2, #0]
 8013bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e08c      	b.n	8013ce2 <_printf_i+0x1be>
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	6011      	str	r1, [r2, #0]
 8013bcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013bd0:	bf18      	it	ne
 8013bd2:	b21b      	sxthne	r3, r3
 8013bd4:	e7cf      	b.n	8013b76 <_printf_i+0x52>
 8013bd6:	6813      	ldr	r3, [r2, #0]
 8013bd8:	6825      	ldr	r5, [r4, #0]
 8013bda:	1d18      	adds	r0, r3, #4
 8013bdc:	6010      	str	r0, [r2, #0]
 8013bde:	0628      	lsls	r0, r5, #24
 8013be0:	d501      	bpl.n	8013be6 <_printf_i+0xc2>
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	e002      	b.n	8013bec <_printf_i+0xc8>
 8013be6:	0668      	lsls	r0, r5, #25
 8013be8:	d5fb      	bpl.n	8013be2 <_printf_i+0xbe>
 8013bea:	881b      	ldrh	r3, [r3, #0]
 8013bec:	4854      	ldr	r0, [pc, #336]	; (8013d40 <_printf_i+0x21c>)
 8013bee:	296f      	cmp	r1, #111	; 0x6f
 8013bf0:	bf14      	ite	ne
 8013bf2:	220a      	movne	r2, #10
 8013bf4:	2208      	moveq	r2, #8
 8013bf6:	2100      	movs	r1, #0
 8013bf8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013bfc:	6865      	ldr	r5, [r4, #4]
 8013bfe:	60a5      	str	r5, [r4, #8]
 8013c00:	2d00      	cmp	r5, #0
 8013c02:	f2c0 8095 	blt.w	8013d30 <_printf_i+0x20c>
 8013c06:	6821      	ldr	r1, [r4, #0]
 8013c08:	f021 0104 	bic.w	r1, r1, #4
 8013c0c:	6021      	str	r1, [r4, #0]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d13d      	bne.n	8013c8e <_printf_i+0x16a>
 8013c12:	2d00      	cmp	r5, #0
 8013c14:	f040 808e 	bne.w	8013d34 <_printf_i+0x210>
 8013c18:	4665      	mov	r5, ip
 8013c1a:	2a08      	cmp	r2, #8
 8013c1c:	d10b      	bne.n	8013c36 <_printf_i+0x112>
 8013c1e:	6823      	ldr	r3, [r4, #0]
 8013c20:	07db      	lsls	r3, r3, #31
 8013c22:	d508      	bpl.n	8013c36 <_printf_i+0x112>
 8013c24:	6923      	ldr	r3, [r4, #16]
 8013c26:	6862      	ldr	r2, [r4, #4]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	bfde      	ittt	le
 8013c2c:	2330      	movle	r3, #48	; 0x30
 8013c2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013c32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013c36:	ebac 0305 	sub.w	r3, ip, r5
 8013c3a:	6123      	str	r3, [r4, #16]
 8013c3c:	f8cd 8000 	str.w	r8, [sp]
 8013c40:	463b      	mov	r3, r7
 8013c42:	aa03      	add	r2, sp, #12
 8013c44:	4621      	mov	r1, r4
 8013c46:	4630      	mov	r0, r6
 8013c48:	f7ff fef6 	bl	8013a38 <_printf_common>
 8013c4c:	3001      	adds	r0, #1
 8013c4e:	d14d      	bne.n	8013cec <_printf_i+0x1c8>
 8013c50:	f04f 30ff 	mov.w	r0, #4294967295
 8013c54:	b005      	add	sp, #20
 8013c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c5a:	4839      	ldr	r0, [pc, #228]	; (8013d40 <_printf_i+0x21c>)
 8013c5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013c60:	6813      	ldr	r3, [r2, #0]
 8013c62:	6821      	ldr	r1, [r4, #0]
 8013c64:	1d1d      	adds	r5, r3, #4
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	6015      	str	r5, [r2, #0]
 8013c6a:	060a      	lsls	r2, r1, #24
 8013c6c:	d50b      	bpl.n	8013c86 <_printf_i+0x162>
 8013c6e:	07ca      	lsls	r2, r1, #31
 8013c70:	bf44      	itt	mi
 8013c72:	f041 0120 	orrmi.w	r1, r1, #32
 8013c76:	6021      	strmi	r1, [r4, #0]
 8013c78:	b91b      	cbnz	r3, 8013c82 <_printf_i+0x15e>
 8013c7a:	6822      	ldr	r2, [r4, #0]
 8013c7c:	f022 0220 	bic.w	r2, r2, #32
 8013c80:	6022      	str	r2, [r4, #0]
 8013c82:	2210      	movs	r2, #16
 8013c84:	e7b7      	b.n	8013bf6 <_printf_i+0xd2>
 8013c86:	064d      	lsls	r5, r1, #25
 8013c88:	bf48      	it	mi
 8013c8a:	b29b      	uxthmi	r3, r3
 8013c8c:	e7ef      	b.n	8013c6e <_printf_i+0x14a>
 8013c8e:	4665      	mov	r5, ip
 8013c90:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c94:	fb02 3311 	mls	r3, r2, r1, r3
 8013c98:	5cc3      	ldrb	r3, [r0, r3]
 8013c9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013c9e:	460b      	mov	r3, r1
 8013ca0:	2900      	cmp	r1, #0
 8013ca2:	d1f5      	bne.n	8013c90 <_printf_i+0x16c>
 8013ca4:	e7b9      	b.n	8013c1a <_printf_i+0xf6>
 8013ca6:	6813      	ldr	r3, [r2, #0]
 8013ca8:	6825      	ldr	r5, [r4, #0]
 8013caa:	6961      	ldr	r1, [r4, #20]
 8013cac:	1d18      	adds	r0, r3, #4
 8013cae:	6010      	str	r0, [r2, #0]
 8013cb0:	0628      	lsls	r0, r5, #24
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	d501      	bpl.n	8013cba <_printf_i+0x196>
 8013cb6:	6019      	str	r1, [r3, #0]
 8013cb8:	e002      	b.n	8013cc0 <_printf_i+0x19c>
 8013cba:	066a      	lsls	r2, r5, #25
 8013cbc:	d5fb      	bpl.n	8013cb6 <_printf_i+0x192>
 8013cbe:	8019      	strh	r1, [r3, #0]
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	6123      	str	r3, [r4, #16]
 8013cc4:	4665      	mov	r5, ip
 8013cc6:	e7b9      	b.n	8013c3c <_printf_i+0x118>
 8013cc8:	6813      	ldr	r3, [r2, #0]
 8013cca:	1d19      	adds	r1, r3, #4
 8013ccc:	6011      	str	r1, [r2, #0]
 8013cce:	681d      	ldr	r5, [r3, #0]
 8013cd0:	6862      	ldr	r2, [r4, #4]
 8013cd2:	2100      	movs	r1, #0
 8013cd4:	4628      	mov	r0, r5
 8013cd6:	f7ec fa9b 	bl	8000210 <memchr>
 8013cda:	b108      	cbz	r0, 8013ce0 <_printf_i+0x1bc>
 8013cdc:	1b40      	subs	r0, r0, r5
 8013cde:	6060      	str	r0, [r4, #4]
 8013ce0:	6863      	ldr	r3, [r4, #4]
 8013ce2:	6123      	str	r3, [r4, #16]
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013cea:	e7a7      	b.n	8013c3c <_printf_i+0x118>
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	462a      	mov	r2, r5
 8013cf0:	4639      	mov	r1, r7
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	47c0      	blx	r8
 8013cf6:	3001      	adds	r0, #1
 8013cf8:	d0aa      	beq.n	8013c50 <_printf_i+0x12c>
 8013cfa:	6823      	ldr	r3, [r4, #0]
 8013cfc:	079b      	lsls	r3, r3, #30
 8013cfe:	d413      	bmi.n	8013d28 <_printf_i+0x204>
 8013d00:	68e0      	ldr	r0, [r4, #12]
 8013d02:	9b03      	ldr	r3, [sp, #12]
 8013d04:	4298      	cmp	r0, r3
 8013d06:	bfb8      	it	lt
 8013d08:	4618      	movlt	r0, r3
 8013d0a:	e7a3      	b.n	8013c54 <_printf_i+0x130>
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	464a      	mov	r2, r9
 8013d10:	4639      	mov	r1, r7
 8013d12:	4630      	mov	r0, r6
 8013d14:	47c0      	blx	r8
 8013d16:	3001      	adds	r0, #1
 8013d18:	d09a      	beq.n	8013c50 <_printf_i+0x12c>
 8013d1a:	3501      	adds	r5, #1
 8013d1c:	68e3      	ldr	r3, [r4, #12]
 8013d1e:	9a03      	ldr	r2, [sp, #12]
 8013d20:	1a9b      	subs	r3, r3, r2
 8013d22:	42ab      	cmp	r3, r5
 8013d24:	dcf2      	bgt.n	8013d0c <_printf_i+0x1e8>
 8013d26:	e7eb      	b.n	8013d00 <_printf_i+0x1dc>
 8013d28:	2500      	movs	r5, #0
 8013d2a:	f104 0919 	add.w	r9, r4, #25
 8013d2e:	e7f5      	b.n	8013d1c <_printf_i+0x1f8>
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d1ac      	bne.n	8013c8e <_printf_i+0x16a>
 8013d34:	7803      	ldrb	r3, [r0, #0]
 8013d36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d3e:	e76c      	b.n	8013c1a <_printf_i+0xf6>
 8013d40:	08018000 	.word	0x08018000
 8013d44:	08018011 	.word	0x08018011

08013d48 <_scanf_float>:
 8013d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4c:	469a      	mov	sl, r3
 8013d4e:	688b      	ldr	r3, [r1, #8]
 8013d50:	4616      	mov	r6, r2
 8013d52:	1e5a      	subs	r2, r3, #1
 8013d54:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013d58:	b087      	sub	sp, #28
 8013d5a:	bf83      	ittte	hi
 8013d5c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013d60:	189b      	addhi	r3, r3, r2
 8013d62:	9301      	strhi	r3, [sp, #4]
 8013d64:	2300      	movls	r3, #0
 8013d66:	bf86      	itte	hi
 8013d68:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013d6c:	608b      	strhi	r3, [r1, #8]
 8013d6e:	9301      	strls	r3, [sp, #4]
 8013d70:	680b      	ldr	r3, [r1, #0]
 8013d72:	4688      	mov	r8, r1
 8013d74:	f04f 0b00 	mov.w	fp, #0
 8013d78:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013d7c:	f848 3b1c 	str.w	r3, [r8], #28
 8013d80:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013d84:	4607      	mov	r7, r0
 8013d86:	460c      	mov	r4, r1
 8013d88:	4645      	mov	r5, r8
 8013d8a:	465a      	mov	r2, fp
 8013d8c:	46d9      	mov	r9, fp
 8013d8e:	f8cd b008 	str.w	fp, [sp, #8]
 8013d92:	68a1      	ldr	r1, [r4, #8]
 8013d94:	b181      	cbz	r1, 8013db8 <_scanf_float+0x70>
 8013d96:	6833      	ldr	r3, [r6, #0]
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	2b49      	cmp	r3, #73	; 0x49
 8013d9c:	d071      	beq.n	8013e82 <_scanf_float+0x13a>
 8013d9e:	d84d      	bhi.n	8013e3c <_scanf_float+0xf4>
 8013da0:	2b39      	cmp	r3, #57	; 0x39
 8013da2:	d840      	bhi.n	8013e26 <_scanf_float+0xde>
 8013da4:	2b31      	cmp	r3, #49	; 0x31
 8013da6:	f080 8088 	bcs.w	8013eba <_scanf_float+0x172>
 8013daa:	2b2d      	cmp	r3, #45	; 0x2d
 8013dac:	f000 8090 	beq.w	8013ed0 <_scanf_float+0x188>
 8013db0:	d815      	bhi.n	8013dde <_scanf_float+0x96>
 8013db2:	2b2b      	cmp	r3, #43	; 0x2b
 8013db4:	f000 808c 	beq.w	8013ed0 <_scanf_float+0x188>
 8013db8:	f1b9 0f00 	cmp.w	r9, #0
 8013dbc:	d003      	beq.n	8013dc6 <_scanf_float+0x7e>
 8013dbe:	6823      	ldr	r3, [r4, #0]
 8013dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013dc4:	6023      	str	r3, [r4, #0]
 8013dc6:	3a01      	subs	r2, #1
 8013dc8:	2a01      	cmp	r2, #1
 8013dca:	f200 80ea 	bhi.w	8013fa2 <_scanf_float+0x25a>
 8013dce:	4545      	cmp	r5, r8
 8013dd0:	f200 80dc 	bhi.w	8013f8c <_scanf_float+0x244>
 8013dd4:	2601      	movs	r6, #1
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	b007      	add	sp, #28
 8013dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dde:	2b2e      	cmp	r3, #46	; 0x2e
 8013de0:	f000 809f 	beq.w	8013f22 <_scanf_float+0x1da>
 8013de4:	2b30      	cmp	r3, #48	; 0x30
 8013de6:	d1e7      	bne.n	8013db8 <_scanf_float+0x70>
 8013de8:	6820      	ldr	r0, [r4, #0]
 8013dea:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013dee:	d064      	beq.n	8013eba <_scanf_float+0x172>
 8013df0:	9b01      	ldr	r3, [sp, #4]
 8013df2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013df6:	6020      	str	r0, [r4, #0]
 8013df8:	f109 0901 	add.w	r9, r9, #1
 8013dfc:	b11b      	cbz	r3, 8013e06 <_scanf_float+0xbe>
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	3101      	adds	r1, #1
 8013e02:	9301      	str	r3, [sp, #4]
 8013e04:	60a1      	str	r1, [r4, #8]
 8013e06:	68a3      	ldr	r3, [r4, #8]
 8013e08:	3b01      	subs	r3, #1
 8013e0a:	60a3      	str	r3, [r4, #8]
 8013e0c:	6923      	ldr	r3, [r4, #16]
 8013e0e:	3301      	adds	r3, #1
 8013e10:	6123      	str	r3, [r4, #16]
 8013e12:	6873      	ldr	r3, [r6, #4]
 8013e14:	3b01      	subs	r3, #1
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	6073      	str	r3, [r6, #4]
 8013e1a:	f340 80ac 	ble.w	8013f76 <_scanf_float+0x22e>
 8013e1e:	6833      	ldr	r3, [r6, #0]
 8013e20:	3301      	adds	r3, #1
 8013e22:	6033      	str	r3, [r6, #0]
 8013e24:	e7b5      	b.n	8013d92 <_scanf_float+0x4a>
 8013e26:	2b45      	cmp	r3, #69	; 0x45
 8013e28:	f000 8085 	beq.w	8013f36 <_scanf_float+0x1ee>
 8013e2c:	2b46      	cmp	r3, #70	; 0x46
 8013e2e:	d06a      	beq.n	8013f06 <_scanf_float+0x1be>
 8013e30:	2b41      	cmp	r3, #65	; 0x41
 8013e32:	d1c1      	bne.n	8013db8 <_scanf_float+0x70>
 8013e34:	2a01      	cmp	r2, #1
 8013e36:	d1bf      	bne.n	8013db8 <_scanf_float+0x70>
 8013e38:	2202      	movs	r2, #2
 8013e3a:	e046      	b.n	8013eca <_scanf_float+0x182>
 8013e3c:	2b65      	cmp	r3, #101	; 0x65
 8013e3e:	d07a      	beq.n	8013f36 <_scanf_float+0x1ee>
 8013e40:	d818      	bhi.n	8013e74 <_scanf_float+0x12c>
 8013e42:	2b54      	cmp	r3, #84	; 0x54
 8013e44:	d066      	beq.n	8013f14 <_scanf_float+0x1cc>
 8013e46:	d811      	bhi.n	8013e6c <_scanf_float+0x124>
 8013e48:	2b4e      	cmp	r3, #78	; 0x4e
 8013e4a:	d1b5      	bne.n	8013db8 <_scanf_float+0x70>
 8013e4c:	2a00      	cmp	r2, #0
 8013e4e:	d146      	bne.n	8013ede <_scanf_float+0x196>
 8013e50:	f1b9 0f00 	cmp.w	r9, #0
 8013e54:	d145      	bne.n	8013ee2 <_scanf_float+0x19a>
 8013e56:	6821      	ldr	r1, [r4, #0]
 8013e58:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013e5c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013e60:	d13f      	bne.n	8013ee2 <_scanf_float+0x19a>
 8013e62:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013e66:	6021      	str	r1, [r4, #0]
 8013e68:	2201      	movs	r2, #1
 8013e6a:	e02e      	b.n	8013eca <_scanf_float+0x182>
 8013e6c:	2b59      	cmp	r3, #89	; 0x59
 8013e6e:	d01e      	beq.n	8013eae <_scanf_float+0x166>
 8013e70:	2b61      	cmp	r3, #97	; 0x61
 8013e72:	e7de      	b.n	8013e32 <_scanf_float+0xea>
 8013e74:	2b6e      	cmp	r3, #110	; 0x6e
 8013e76:	d0e9      	beq.n	8013e4c <_scanf_float+0x104>
 8013e78:	d815      	bhi.n	8013ea6 <_scanf_float+0x15e>
 8013e7a:	2b66      	cmp	r3, #102	; 0x66
 8013e7c:	d043      	beq.n	8013f06 <_scanf_float+0x1be>
 8013e7e:	2b69      	cmp	r3, #105	; 0x69
 8013e80:	d19a      	bne.n	8013db8 <_scanf_float+0x70>
 8013e82:	f1bb 0f00 	cmp.w	fp, #0
 8013e86:	d138      	bne.n	8013efa <_scanf_float+0x1b2>
 8013e88:	f1b9 0f00 	cmp.w	r9, #0
 8013e8c:	d197      	bne.n	8013dbe <_scanf_float+0x76>
 8013e8e:	6821      	ldr	r1, [r4, #0]
 8013e90:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013e94:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013e98:	d195      	bne.n	8013dc6 <_scanf_float+0x7e>
 8013e9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013e9e:	6021      	str	r1, [r4, #0]
 8013ea0:	f04f 0b01 	mov.w	fp, #1
 8013ea4:	e011      	b.n	8013eca <_scanf_float+0x182>
 8013ea6:	2b74      	cmp	r3, #116	; 0x74
 8013ea8:	d034      	beq.n	8013f14 <_scanf_float+0x1cc>
 8013eaa:	2b79      	cmp	r3, #121	; 0x79
 8013eac:	d184      	bne.n	8013db8 <_scanf_float+0x70>
 8013eae:	f1bb 0f07 	cmp.w	fp, #7
 8013eb2:	d181      	bne.n	8013db8 <_scanf_float+0x70>
 8013eb4:	f04f 0b08 	mov.w	fp, #8
 8013eb8:	e007      	b.n	8013eca <_scanf_float+0x182>
 8013eba:	eb12 0f0b 	cmn.w	r2, fp
 8013ebe:	f47f af7b 	bne.w	8013db8 <_scanf_float+0x70>
 8013ec2:	6821      	ldr	r1, [r4, #0]
 8013ec4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013ec8:	6021      	str	r1, [r4, #0]
 8013eca:	702b      	strb	r3, [r5, #0]
 8013ecc:	3501      	adds	r5, #1
 8013ece:	e79a      	b.n	8013e06 <_scanf_float+0xbe>
 8013ed0:	6821      	ldr	r1, [r4, #0]
 8013ed2:	0608      	lsls	r0, r1, #24
 8013ed4:	f57f af70 	bpl.w	8013db8 <_scanf_float+0x70>
 8013ed8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013edc:	e7f4      	b.n	8013ec8 <_scanf_float+0x180>
 8013ede:	2a02      	cmp	r2, #2
 8013ee0:	d047      	beq.n	8013f72 <_scanf_float+0x22a>
 8013ee2:	f1bb 0f01 	cmp.w	fp, #1
 8013ee6:	d003      	beq.n	8013ef0 <_scanf_float+0x1a8>
 8013ee8:	f1bb 0f04 	cmp.w	fp, #4
 8013eec:	f47f af64 	bne.w	8013db8 <_scanf_float+0x70>
 8013ef0:	f10b 0b01 	add.w	fp, fp, #1
 8013ef4:	fa5f fb8b 	uxtb.w	fp, fp
 8013ef8:	e7e7      	b.n	8013eca <_scanf_float+0x182>
 8013efa:	f1bb 0f03 	cmp.w	fp, #3
 8013efe:	d0f7      	beq.n	8013ef0 <_scanf_float+0x1a8>
 8013f00:	f1bb 0f05 	cmp.w	fp, #5
 8013f04:	e7f2      	b.n	8013eec <_scanf_float+0x1a4>
 8013f06:	f1bb 0f02 	cmp.w	fp, #2
 8013f0a:	f47f af55 	bne.w	8013db8 <_scanf_float+0x70>
 8013f0e:	f04f 0b03 	mov.w	fp, #3
 8013f12:	e7da      	b.n	8013eca <_scanf_float+0x182>
 8013f14:	f1bb 0f06 	cmp.w	fp, #6
 8013f18:	f47f af4e 	bne.w	8013db8 <_scanf_float+0x70>
 8013f1c:	f04f 0b07 	mov.w	fp, #7
 8013f20:	e7d3      	b.n	8013eca <_scanf_float+0x182>
 8013f22:	6821      	ldr	r1, [r4, #0]
 8013f24:	0588      	lsls	r0, r1, #22
 8013f26:	f57f af47 	bpl.w	8013db8 <_scanf_float+0x70>
 8013f2a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013f2e:	6021      	str	r1, [r4, #0]
 8013f30:	f8cd 9008 	str.w	r9, [sp, #8]
 8013f34:	e7c9      	b.n	8013eca <_scanf_float+0x182>
 8013f36:	6821      	ldr	r1, [r4, #0]
 8013f38:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013f3c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013f40:	d006      	beq.n	8013f50 <_scanf_float+0x208>
 8013f42:	0548      	lsls	r0, r1, #21
 8013f44:	f57f af38 	bpl.w	8013db8 <_scanf_float+0x70>
 8013f48:	f1b9 0f00 	cmp.w	r9, #0
 8013f4c:	f43f af3b 	beq.w	8013dc6 <_scanf_float+0x7e>
 8013f50:	0588      	lsls	r0, r1, #22
 8013f52:	bf58      	it	pl
 8013f54:	9802      	ldrpl	r0, [sp, #8]
 8013f56:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013f5a:	bf58      	it	pl
 8013f5c:	eba9 0000 	subpl.w	r0, r9, r0
 8013f60:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013f64:	bf58      	it	pl
 8013f66:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013f6a:	6021      	str	r1, [r4, #0]
 8013f6c:	f04f 0900 	mov.w	r9, #0
 8013f70:	e7ab      	b.n	8013eca <_scanf_float+0x182>
 8013f72:	2203      	movs	r2, #3
 8013f74:	e7a9      	b.n	8013eca <_scanf_float+0x182>
 8013f76:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013f7a:	9205      	str	r2, [sp, #20]
 8013f7c:	4631      	mov	r1, r6
 8013f7e:	4638      	mov	r0, r7
 8013f80:	4798      	blx	r3
 8013f82:	9a05      	ldr	r2, [sp, #20]
 8013f84:	2800      	cmp	r0, #0
 8013f86:	f43f af04 	beq.w	8013d92 <_scanf_float+0x4a>
 8013f8a:	e715      	b.n	8013db8 <_scanf_float+0x70>
 8013f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013f90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013f94:	4632      	mov	r2, r6
 8013f96:	4638      	mov	r0, r7
 8013f98:	4798      	blx	r3
 8013f9a:	6923      	ldr	r3, [r4, #16]
 8013f9c:	3b01      	subs	r3, #1
 8013f9e:	6123      	str	r3, [r4, #16]
 8013fa0:	e715      	b.n	8013dce <_scanf_float+0x86>
 8013fa2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013fa6:	2b06      	cmp	r3, #6
 8013fa8:	d80a      	bhi.n	8013fc0 <_scanf_float+0x278>
 8013faa:	f1bb 0f02 	cmp.w	fp, #2
 8013fae:	d968      	bls.n	8014082 <_scanf_float+0x33a>
 8013fb0:	f1ab 0b03 	sub.w	fp, fp, #3
 8013fb4:	fa5f fb8b 	uxtb.w	fp, fp
 8013fb8:	eba5 0b0b 	sub.w	fp, r5, fp
 8013fbc:	455d      	cmp	r5, fp
 8013fbe:	d14b      	bne.n	8014058 <_scanf_float+0x310>
 8013fc0:	6823      	ldr	r3, [r4, #0]
 8013fc2:	05da      	lsls	r2, r3, #23
 8013fc4:	d51f      	bpl.n	8014006 <_scanf_float+0x2be>
 8013fc6:	055b      	lsls	r3, r3, #21
 8013fc8:	d468      	bmi.n	801409c <_scanf_float+0x354>
 8013fca:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013fce:	6923      	ldr	r3, [r4, #16]
 8013fd0:	2965      	cmp	r1, #101	; 0x65
 8013fd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8013fd6:	f105 3bff 	add.w	fp, r5, #4294967295
 8013fda:	6123      	str	r3, [r4, #16]
 8013fdc:	d00d      	beq.n	8013ffa <_scanf_float+0x2b2>
 8013fde:	2945      	cmp	r1, #69	; 0x45
 8013fe0:	d00b      	beq.n	8013ffa <_scanf_float+0x2b2>
 8013fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013fe6:	4632      	mov	r2, r6
 8013fe8:	4638      	mov	r0, r7
 8013fea:	4798      	blx	r3
 8013fec:	6923      	ldr	r3, [r4, #16]
 8013fee:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013ff2:	3b01      	subs	r3, #1
 8013ff4:	f1a5 0b02 	sub.w	fp, r5, #2
 8013ff8:	6123      	str	r3, [r4, #16]
 8013ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013ffe:	4632      	mov	r2, r6
 8014000:	4638      	mov	r0, r7
 8014002:	4798      	blx	r3
 8014004:	465d      	mov	r5, fp
 8014006:	6826      	ldr	r6, [r4, #0]
 8014008:	f016 0610 	ands.w	r6, r6, #16
 801400c:	d17a      	bne.n	8014104 <_scanf_float+0x3bc>
 801400e:	702e      	strb	r6, [r5, #0]
 8014010:	6823      	ldr	r3, [r4, #0]
 8014012:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801401a:	d142      	bne.n	80140a2 <_scanf_float+0x35a>
 801401c:	9b02      	ldr	r3, [sp, #8]
 801401e:	eba9 0303 	sub.w	r3, r9, r3
 8014022:	425a      	negs	r2, r3
 8014024:	2b00      	cmp	r3, #0
 8014026:	d149      	bne.n	80140bc <_scanf_float+0x374>
 8014028:	2200      	movs	r2, #0
 801402a:	4641      	mov	r1, r8
 801402c:	4638      	mov	r0, r7
 801402e:	f000 ff0b 	bl	8014e48 <_strtod_r>
 8014032:	6825      	ldr	r5, [r4, #0]
 8014034:	f8da 3000 	ldr.w	r3, [sl]
 8014038:	f015 0f02 	tst.w	r5, #2
 801403c:	f103 0204 	add.w	r2, r3, #4
 8014040:	ec59 8b10 	vmov	r8, r9, d0
 8014044:	f8ca 2000 	str.w	r2, [sl]
 8014048:	d043      	beq.n	80140d2 <_scanf_float+0x38a>
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	e9c3 8900 	strd	r8, r9, [r3]
 8014050:	68e3      	ldr	r3, [r4, #12]
 8014052:	3301      	adds	r3, #1
 8014054:	60e3      	str	r3, [r4, #12]
 8014056:	e6be      	b.n	8013dd6 <_scanf_float+0x8e>
 8014058:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801405c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014060:	4632      	mov	r2, r6
 8014062:	4638      	mov	r0, r7
 8014064:	4798      	blx	r3
 8014066:	6923      	ldr	r3, [r4, #16]
 8014068:	3b01      	subs	r3, #1
 801406a:	6123      	str	r3, [r4, #16]
 801406c:	e7a6      	b.n	8013fbc <_scanf_float+0x274>
 801406e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014072:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014076:	4632      	mov	r2, r6
 8014078:	4638      	mov	r0, r7
 801407a:	4798      	blx	r3
 801407c:	6923      	ldr	r3, [r4, #16]
 801407e:	3b01      	subs	r3, #1
 8014080:	6123      	str	r3, [r4, #16]
 8014082:	4545      	cmp	r5, r8
 8014084:	d8f3      	bhi.n	801406e <_scanf_float+0x326>
 8014086:	e6a5      	b.n	8013dd4 <_scanf_float+0x8c>
 8014088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801408c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014090:	4632      	mov	r2, r6
 8014092:	4638      	mov	r0, r7
 8014094:	4798      	blx	r3
 8014096:	6923      	ldr	r3, [r4, #16]
 8014098:	3b01      	subs	r3, #1
 801409a:	6123      	str	r3, [r4, #16]
 801409c:	4545      	cmp	r5, r8
 801409e:	d8f3      	bhi.n	8014088 <_scanf_float+0x340>
 80140a0:	e698      	b.n	8013dd4 <_scanf_float+0x8c>
 80140a2:	9b03      	ldr	r3, [sp, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d0bf      	beq.n	8014028 <_scanf_float+0x2e0>
 80140a8:	9904      	ldr	r1, [sp, #16]
 80140aa:	230a      	movs	r3, #10
 80140ac:	4632      	mov	r2, r6
 80140ae:	3101      	adds	r1, #1
 80140b0:	4638      	mov	r0, r7
 80140b2:	f000 ff55 	bl	8014f60 <_strtol_r>
 80140b6:	9b03      	ldr	r3, [sp, #12]
 80140b8:	9d04      	ldr	r5, [sp, #16]
 80140ba:	1ac2      	subs	r2, r0, r3
 80140bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80140c0:	429d      	cmp	r5, r3
 80140c2:	bf28      	it	cs
 80140c4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80140c8:	490f      	ldr	r1, [pc, #60]	; (8014108 <_scanf_float+0x3c0>)
 80140ca:	4628      	mov	r0, r5
 80140cc:	f000 f858 	bl	8014180 <siprintf>
 80140d0:	e7aa      	b.n	8014028 <_scanf_float+0x2e0>
 80140d2:	f015 0504 	ands.w	r5, r5, #4
 80140d6:	d1b8      	bne.n	801404a <_scanf_float+0x302>
 80140d8:	681f      	ldr	r7, [r3, #0]
 80140da:	ee10 2a10 	vmov	r2, s0
 80140de:	464b      	mov	r3, r9
 80140e0:	ee10 0a10 	vmov	r0, s0
 80140e4:	4649      	mov	r1, r9
 80140e6:	f7ec fd39 	bl	8000b5c <__aeabi_dcmpun>
 80140ea:	b128      	cbz	r0, 80140f8 <_scanf_float+0x3b0>
 80140ec:	4628      	mov	r0, r5
 80140ee:	f000 f80d 	bl	801410c <nanf>
 80140f2:	ed87 0a00 	vstr	s0, [r7]
 80140f6:	e7ab      	b.n	8014050 <_scanf_float+0x308>
 80140f8:	4640      	mov	r0, r8
 80140fa:	4649      	mov	r1, r9
 80140fc:	f7ec fd8c 	bl	8000c18 <__aeabi_d2f>
 8014100:	6038      	str	r0, [r7, #0]
 8014102:	e7a5      	b.n	8014050 <_scanf_float+0x308>
 8014104:	2600      	movs	r6, #0
 8014106:	e666      	b.n	8013dd6 <_scanf_float+0x8e>
 8014108:	08018022 	.word	0x08018022

0801410c <nanf>:
 801410c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014114 <nanf+0x8>
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	7fc00000 	.word	0x7fc00000

08014118 <sniprintf>:
 8014118:	b40c      	push	{r2, r3}
 801411a:	b530      	push	{r4, r5, lr}
 801411c:	4b17      	ldr	r3, [pc, #92]	; (801417c <sniprintf+0x64>)
 801411e:	1e0c      	subs	r4, r1, #0
 8014120:	b09d      	sub	sp, #116	; 0x74
 8014122:	681d      	ldr	r5, [r3, #0]
 8014124:	da08      	bge.n	8014138 <sniprintf+0x20>
 8014126:	238b      	movs	r3, #139	; 0x8b
 8014128:	602b      	str	r3, [r5, #0]
 801412a:	f04f 30ff 	mov.w	r0, #4294967295
 801412e:	b01d      	add	sp, #116	; 0x74
 8014130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014134:	b002      	add	sp, #8
 8014136:	4770      	bx	lr
 8014138:	f44f 7302 	mov.w	r3, #520	; 0x208
 801413c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014140:	bf14      	ite	ne
 8014142:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014146:	4623      	moveq	r3, r4
 8014148:	9304      	str	r3, [sp, #16]
 801414a:	9307      	str	r3, [sp, #28]
 801414c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014150:	9002      	str	r0, [sp, #8]
 8014152:	9006      	str	r0, [sp, #24]
 8014154:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014158:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801415a:	ab21      	add	r3, sp, #132	; 0x84
 801415c:	a902      	add	r1, sp, #8
 801415e:	4628      	mov	r0, r5
 8014160:	9301      	str	r3, [sp, #4]
 8014162:	f002 fde7 	bl	8016d34 <_svfiprintf_r>
 8014166:	1c43      	adds	r3, r0, #1
 8014168:	bfbc      	itt	lt
 801416a:	238b      	movlt	r3, #139	; 0x8b
 801416c:	602b      	strlt	r3, [r5, #0]
 801416e:	2c00      	cmp	r4, #0
 8014170:	d0dd      	beq.n	801412e <sniprintf+0x16>
 8014172:	9b02      	ldr	r3, [sp, #8]
 8014174:	2200      	movs	r2, #0
 8014176:	701a      	strb	r2, [r3, #0]
 8014178:	e7d9      	b.n	801412e <sniprintf+0x16>
 801417a:	bf00      	nop
 801417c:	2000000c 	.word	0x2000000c

08014180 <siprintf>:
 8014180:	b40e      	push	{r1, r2, r3}
 8014182:	b500      	push	{lr}
 8014184:	b09c      	sub	sp, #112	; 0x70
 8014186:	ab1d      	add	r3, sp, #116	; 0x74
 8014188:	9002      	str	r0, [sp, #8]
 801418a:	9006      	str	r0, [sp, #24]
 801418c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014190:	4809      	ldr	r0, [pc, #36]	; (80141b8 <siprintf+0x38>)
 8014192:	9107      	str	r1, [sp, #28]
 8014194:	9104      	str	r1, [sp, #16]
 8014196:	4909      	ldr	r1, [pc, #36]	; (80141bc <siprintf+0x3c>)
 8014198:	f853 2b04 	ldr.w	r2, [r3], #4
 801419c:	9105      	str	r1, [sp, #20]
 801419e:	6800      	ldr	r0, [r0, #0]
 80141a0:	9301      	str	r3, [sp, #4]
 80141a2:	a902      	add	r1, sp, #8
 80141a4:	f002 fdc6 	bl	8016d34 <_svfiprintf_r>
 80141a8:	9b02      	ldr	r3, [sp, #8]
 80141aa:	2200      	movs	r2, #0
 80141ac:	701a      	strb	r2, [r3, #0]
 80141ae:	b01c      	add	sp, #112	; 0x70
 80141b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80141b4:	b003      	add	sp, #12
 80141b6:	4770      	bx	lr
 80141b8:	2000000c 	.word	0x2000000c
 80141bc:	ffff0208 	.word	0xffff0208

080141c0 <siscanf>:
 80141c0:	b40e      	push	{r1, r2, r3}
 80141c2:	b530      	push	{r4, r5, lr}
 80141c4:	b09c      	sub	sp, #112	; 0x70
 80141c6:	ac1f      	add	r4, sp, #124	; 0x7c
 80141c8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80141cc:	f854 5b04 	ldr.w	r5, [r4], #4
 80141d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80141d4:	9002      	str	r0, [sp, #8]
 80141d6:	9006      	str	r0, [sp, #24]
 80141d8:	f7ec f812 	bl	8000200 <strlen>
 80141dc:	4b0b      	ldr	r3, [pc, #44]	; (801420c <siscanf+0x4c>)
 80141de:	9003      	str	r0, [sp, #12]
 80141e0:	9007      	str	r0, [sp, #28]
 80141e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80141e4:	480a      	ldr	r0, [pc, #40]	; (8014210 <siscanf+0x50>)
 80141e6:	9401      	str	r4, [sp, #4]
 80141e8:	2300      	movs	r3, #0
 80141ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80141ec:	9314      	str	r3, [sp, #80]	; 0x50
 80141ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80141f6:	462a      	mov	r2, r5
 80141f8:	4623      	mov	r3, r4
 80141fa:	a902      	add	r1, sp, #8
 80141fc:	6800      	ldr	r0, [r0, #0]
 80141fe:	f002 feeb 	bl	8016fd8 <__ssvfiscanf_r>
 8014202:	b01c      	add	sp, #112	; 0x70
 8014204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014208:	b003      	add	sp, #12
 801420a:	4770      	bx	lr
 801420c:	08014215 	.word	0x08014215
 8014210:	2000000c 	.word	0x2000000c

08014214 <__seofread>:
 8014214:	2000      	movs	r0, #0
 8014216:	4770      	bx	lr

08014218 <strcpy>:
 8014218:	4603      	mov	r3, r0
 801421a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801421e:	f803 2b01 	strb.w	r2, [r3], #1
 8014222:	2a00      	cmp	r2, #0
 8014224:	d1f9      	bne.n	801421a <strcpy+0x2>
 8014226:	4770      	bx	lr

08014228 <sulp>:
 8014228:	b570      	push	{r4, r5, r6, lr}
 801422a:	4604      	mov	r4, r0
 801422c:	460d      	mov	r5, r1
 801422e:	ec45 4b10 	vmov	d0, r4, r5
 8014232:	4616      	mov	r6, r2
 8014234:	f002 fb3a 	bl	80168ac <__ulp>
 8014238:	ec51 0b10 	vmov	r0, r1, d0
 801423c:	b17e      	cbz	r6, 801425e <sulp+0x36>
 801423e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014246:	2b00      	cmp	r3, #0
 8014248:	dd09      	ble.n	801425e <sulp+0x36>
 801424a:	051b      	lsls	r3, r3, #20
 801424c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014250:	2400      	movs	r4, #0
 8014252:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014256:	4622      	mov	r2, r4
 8014258:	462b      	mov	r3, r5
 801425a:	f7ec f9e5 	bl	8000628 <__aeabi_dmul>
 801425e:	bd70      	pop	{r4, r5, r6, pc}

08014260 <_strtod_l>:
 8014260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014264:	461f      	mov	r7, r3
 8014266:	b0a1      	sub	sp, #132	; 0x84
 8014268:	2300      	movs	r3, #0
 801426a:	4681      	mov	r9, r0
 801426c:	4638      	mov	r0, r7
 801426e:	460e      	mov	r6, r1
 8014270:	9217      	str	r2, [sp, #92]	; 0x5c
 8014272:	931c      	str	r3, [sp, #112]	; 0x70
 8014274:	f002 f824 	bl	80162c0 <__localeconv_l>
 8014278:	4680      	mov	r8, r0
 801427a:	6800      	ldr	r0, [r0, #0]
 801427c:	f7eb ffc0 	bl	8000200 <strlen>
 8014280:	f04f 0a00 	mov.w	sl, #0
 8014284:	4604      	mov	r4, r0
 8014286:	f04f 0b00 	mov.w	fp, #0
 801428a:	961b      	str	r6, [sp, #108]	; 0x6c
 801428c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801428e:	781a      	ldrb	r2, [r3, #0]
 8014290:	2a0d      	cmp	r2, #13
 8014292:	d832      	bhi.n	80142fa <_strtod_l+0x9a>
 8014294:	2a09      	cmp	r2, #9
 8014296:	d236      	bcs.n	8014306 <_strtod_l+0xa6>
 8014298:	2a00      	cmp	r2, #0
 801429a:	d03e      	beq.n	801431a <_strtod_l+0xba>
 801429c:	2300      	movs	r3, #0
 801429e:	930d      	str	r3, [sp, #52]	; 0x34
 80142a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80142a2:	782b      	ldrb	r3, [r5, #0]
 80142a4:	2b30      	cmp	r3, #48	; 0x30
 80142a6:	f040 80ac 	bne.w	8014402 <_strtod_l+0x1a2>
 80142aa:	786b      	ldrb	r3, [r5, #1]
 80142ac:	2b58      	cmp	r3, #88	; 0x58
 80142ae:	d001      	beq.n	80142b4 <_strtod_l+0x54>
 80142b0:	2b78      	cmp	r3, #120	; 0x78
 80142b2:	d167      	bne.n	8014384 <_strtod_l+0x124>
 80142b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142b6:	9301      	str	r3, [sp, #4]
 80142b8:	ab1c      	add	r3, sp, #112	; 0x70
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	9702      	str	r7, [sp, #8]
 80142be:	ab1d      	add	r3, sp, #116	; 0x74
 80142c0:	4a88      	ldr	r2, [pc, #544]	; (80144e4 <_strtod_l+0x284>)
 80142c2:	a91b      	add	r1, sp, #108	; 0x6c
 80142c4:	4648      	mov	r0, r9
 80142c6:	f001 fd12 	bl	8015cee <__gethex>
 80142ca:	f010 0407 	ands.w	r4, r0, #7
 80142ce:	4606      	mov	r6, r0
 80142d0:	d005      	beq.n	80142de <_strtod_l+0x7e>
 80142d2:	2c06      	cmp	r4, #6
 80142d4:	d12b      	bne.n	801432e <_strtod_l+0xce>
 80142d6:	3501      	adds	r5, #1
 80142d8:	2300      	movs	r3, #0
 80142da:	951b      	str	r5, [sp, #108]	; 0x6c
 80142dc:	930d      	str	r3, [sp, #52]	; 0x34
 80142de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	f040 859a 	bne.w	8014e1a <_strtod_l+0xbba>
 80142e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80142e8:	b1e3      	cbz	r3, 8014324 <_strtod_l+0xc4>
 80142ea:	4652      	mov	r2, sl
 80142ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80142f0:	ec43 2b10 	vmov	d0, r2, r3
 80142f4:	b021      	add	sp, #132	; 0x84
 80142f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142fa:	2a2b      	cmp	r2, #43	; 0x2b
 80142fc:	d015      	beq.n	801432a <_strtod_l+0xca>
 80142fe:	2a2d      	cmp	r2, #45	; 0x2d
 8014300:	d004      	beq.n	801430c <_strtod_l+0xac>
 8014302:	2a20      	cmp	r2, #32
 8014304:	d1ca      	bne.n	801429c <_strtod_l+0x3c>
 8014306:	3301      	adds	r3, #1
 8014308:	931b      	str	r3, [sp, #108]	; 0x6c
 801430a:	e7bf      	b.n	801428c <_strtod_l+0x2c>
 801430c:	2201      	movs	r2, #1
 801430e:	920d      	str	r2, [sp, #52]	; 0x34
 8014310:	1c5a      	adds	r2, r3, #1
 8014312:	921b      	str	r2, [sp, #108]	; 0x6c
 8014314:	785b      	ldrb	r3, [r3, #1]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d1c2      	bne.n	80142a0 <_strtod_l+0x40>
 801431a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801431c:	961b      	str	r6, [sp, #108]	; 0x6c
 801431e:	2b00      	cmp	r3, #0
 8014320:	f040 8579 	bne.w	8014e16 <_strtod_l+0xbb6>
 8014324:	4652      	mov	r2, sl
 8014326:	465b      	mov	r3, fp
 8014328:	e7e2      	b.n	80142f0 <_strtod_l+0x90>
 801432a:	2200      	movs	r2, #0
 801432c:	e7ef      	b.n	801430e <_strtod_l+0xae>
 801432e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014330:	b13a      	cbz	r2, 8014342 <_strtod_l+0xe2>
 8014332:	2135      	movs	r1, #53	; 0x35
 8014334:	a81e      	add	r0, sp, #120	; 0x78
 8014336:	f002 fbb1 	bl	8016a9c <__copybits>
 801433a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801433c:	4648      	mov	r0, r9
 801433e:	f002 f81d 	bl	801637c <_Bfree>
 8014342:	3c01      	subs	r4, #1
 8014344:	2c04      	cmp	r4, #4
 8014346:	d806      	bhi.n	8014356 <_strtod_l+0xf6>
 8014348:	e8df f004 	tbb	[pc, r4]
 801434c:	1714030a 	.word	0x1714030a
 8014350:	0a          	.byte	0x0a
 8014351:	00          	.byte	0x00
 8014352:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014356:	0730      	lsls	r0, r6, #28
 8014358:	d5c1      	bpl.n	80142de <_strtod_l+0x7e>
 801435a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801435e:	e7be      	b.n	80142de <_strtod_l+0x7e>
 8014360:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014364:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014366:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801436a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801436e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014372:	e7f0      	b.n	8014356 <_strtod_l+0xf6>
 8014374:	f8df b170 	ldr.w	fp, [pc, #368]	; 80144e8 <_strtod_l+0x288>
 8014378:	e7ed      	b.n	8014356 <_strtod_l+0xf6>
 801437a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801437e:	f04f 3aff 	mov.w	sl, #4294967295
 8014382:	e7e8      	b.n	8014356 <_strtod_l+0xf6>
 8014384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014386:	1c5a      	adds	r2, r3, #1
 8014388:	921b      	str	r2, [sp, #108]	; 0x6c
 801438a:	785b      	ldrb	r3, [r3, #1]
 801438c:	2b30      	cmp	r3, #48	; 0x30
 801438e:	d0f9      	beq.n	8014384 <_strtod_l+0x124>
 8014390:	2b00      	cmp	r3, #0
 8014392:	d0a4      	beq.n	80142de <_strtod_l+0x7e>
 8014394:	2301      	movs	r3, #1
 8014396:	2500      	movs	r5, #0
 8014398:	9306      	str	r3, [sp, #24]
 801439a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801439c:	9308      	str	r3, [sp, #32]
 801439e:	9507      	str	r5, [sp, #28]
 80143a0:	9505      	str	r5, [sp, #20]
 80143a2:	220a      	movs	r2, #10
 80143a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80143a6:	7807      	ldrb	r7, [r0, #0]
 80143a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80143ac:	b2d9      	uxtb	r1, r3
 80143ae:	2909      	cmp	r1, #9
 80143b0:	d929      	bls.n	8014406 <_strtod_l+0x1a6>
 80143b2:	4622      	mov	r2, r4
 80143b4:	f8d8 1000 	ldr.w	r1, [r8]
 80143b8:	f003 f8f8 	bl	80175ac <strncmp>
 80143bc:	2800      	cmp	r0, #0
 80143be:	d031      	beq.n	8014424 <_strtod_l+0x1c4>
 80143c0:	2000      	movs	r0, #0
 80143c2:	9c05      	ldr	r4, [sp, #20]
 80143c4:	9004      	str	r0, [sp, #16]
 80143c6:	463b      	mov	r3, r7
 80143c8:	4602      	mov	r2, r0
 80143ca:	2b65      	cmp	r3, #101	; 0x65
 80143cc:	d001      	beq.n	80143d2 <_strtod_l+0x172>
 80143ce:	2b45      	cmp	r3, #69	; 0x45
 80143d0:	d114      	bne.n	80143fc <_strtod_l+0x19c>
 80143d2:	b924      	cbnz	r4, 80143de <_strtod_l+0x17e>
 80143d4:	b910      	cbnz	r0, 80143dc <_strtod_l+0x17c>
 80143d6:	9b06      	ldr	r3, [sp, #24]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d09e      	beq.n	801431a <_strtod_l+0xba>
 80143dc:	2400      	movs	r4, #0
 80143de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80143e0:	1c73      	adds	r3, r6, #1
 80143e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80143e4:	7873      	ldrb	r3, [r6, #1]
 80143e6:	2b2b      	cmp	r3, #43	; 0x2b
 80143e8:	d078      	beq.n	80144dc <_strtod_l+0x27c>
 80143ea:	2b2d      	cmp	r3, #45	; 0x2d
 80143ec:	d070      	beq.n	80144d0 <_strtod_l+0x270>
 80143ee:	f04f 0c00 	mov.w	ip, #0
 80143f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80143f6:	2f09      	cmp	r7, #9
 80143f8:	d97c      	bls.n	80144f4 <_strtod_l+0x294>
 80143fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80143fc:	f04f 0e00 	mov.w	lr, #0
 8014400:	e09a      	b.n	8014538 <_strtod_l+0x2d8>
 8014402:	2300      	movs	r3, #0
 8014404:	e7c7      	b.n	8014396 <_strtod_l+0x136>
 8014406:	9905      	ldr	r1, [sp, #20]
 8014408:	2908      	cmp	r1, #8
 801440a:	bfdd      	ittte	le
 801440c:	9907      	ldrle	r1, [sp, #28]
 801440e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014412:	9307      	strle	r3, [sp, #28]
 8014414:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014418:	9b05      	ldr	r3, [sp, #20]
 801441a:	3001      	adds	r0, #1
 801441c:	3301      	adds	r3, #1
 801441e:	9305      	str	r3, [sp, #20]
 8014420:	901b      	str	r0, [sp, #108]	; 0x6c
 8014422:	e7bf      	b.n	80143a4 <_strtod_l+0x144>
 8014424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014426:	191a      	adds	r2, r3, r4
 8014428:	921b      	str	r2, [sp, #108]	; 0x6c
 801442a:	9a05      	ldr	r2, [sp, #20]
 801442c:	5d1b      	ldrb	r3, [r3, r4]
 801442e:	2a00      	cmp	r2, #0
 8014430:	d037      	beq.n	80144a2 <_strtod_l+0x242>
 8014432:	9c05      	ldr	r4, [sp, #20]
 8014434:	4602      	mov	r2, r0
 8014436:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801443a:	2909      	cmp	r1, #9
 801443c:	d913      	bls.n	8014466 <_strtod_l+0x206>
 801443e:	2101      	movs	r1, #1
 8014440:	9104      	str	r1, [sp, #16]
 8014442:	e7c2      	b.n	80143ca <_strtod_l+0x16a>
 8014444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014446:	1c5a      	adds	r2, r3, #1
 8014448:	921b      	str	r2, [sp, #108]	; 0x6c
 801444a:	785b      	ldrb	r3, [r3, #1]
 801444c:	3001      	adds	r0, #1
 801444e:	2b30      	cmp	r3, #48	; 0x30
 8014450:	d0f8      	beq.n	8014444 <_strtod_l+0x1e4>
 8014452:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014456:	2a08      	cmp	r2, #8
 8014458:	f200 84e4 	bhi.w	8014e24 <_strtod_l+0xbc4>
 801445c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801445e:	9208      	str	r2, [sp, #32]
 8014460:	4602      	mov	r2, r0
 8014462:	2000      	movs	r0, #0
 8014464:	4604      	mov	r4, r0
 8014466:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801446a:	f100 0101 	add.w	r1, r0, #1
 801446e:	d012      	beq.n	8014496 <_strtod_l+0x236>
 8014470:	440a      	add	r2, r1
 8014472:	eb00 0c04 	add.w	ip, r0, r4
 8014476:	4621      	mov	r1, r4
 8014478:	270a      	movs	r7, #10
 801447a:	458c      	cmp	ip, r1
 801447c:	d113      	bne.n	80144a6 <_strtod_l+0x246>
 801447e:	1821      	adds	r1, r4, r0
 8014480:	2908      	cmp	r1, #8
 8014482:	f104 0401 	add.w	r4, r4, #1
 8014486:	4404      	add	r4, r0
 8014488:	dc19      	bgt.n	80144be <_strtod_l+0x25e>
 801448a:	9b07      	ldr	r3, [sp, #28]
 801448c:	210a      	movs	r1, #10
 801448e:	fb01 e303 	mla	r3, r1, r3, lr
 8014492:	9307      	str	r3, [sp, #28]
 8014494:	2100      	movs	r1, #0
 8014496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014498:	1c58      	adds	r0, r3, #1
 801449a:	901b      	str	r0, [sp, #108]	; 0x6c
 801449c:	785b      	ldrb	r3, [r3, #1]
 801449e:	4608      	mov	r0, r1
 80144a0:	e7c9      	b.n	8014436 <_strtod_l+0x1d6>
 80144a2:	9805      	ldr	r0, [sp, #20]
 80144a4:	e7d3      	b.n	801444e <_strtod_l+0x1ee>
 80144a6:	2908      	cmp	r1, #8
 80144a8:	f101 0101 	add.w	r1, r1, #1
 80144ac:	dc03      	bgt.n	80144b6 <_strtod_l+0x256>
 80144ae:	9b07      	ldr	r3, [sp, #28]
 80144b0:	437b      	muls	r3, r7
 80144b2:	9307      	str	r3, [sp, #28]
 80144b4:	e7e1      	b.n	801447a <_strtod_l+0x21a>
 80144b6:	2910      	cmp	r1, #16
 80144b8:	bfd8      	it	le
 80144ba:	437d      	mulle	r5, r7
 80144bc:	e7dd      	b.n	801447a <_strtod_l+0x21a>
 80144be:	2c10      	cmp	r4, #16
 80144c0:	bfdc      	itt	le
 80144c2:	210a      	movle	r1, #10
 80144c4:	fb01 e505 	mlale	r5, r1, r5, lr
 80144c8:	e7e4      	b.n	8014494 <_strtod_l+0x234>
 80144ca:	2301      	movs	r3, #1
 80144cc:	9304      	str	r3, [sp, #16]
 80144ce:	e781      	b.n	80143d4 <_strtod_l+0x174>
 80144d0:	f04f 0c01 	mov.w	ip, #1
 80144d4:	1cb3      	adds	r3, r6, #2
 80144d6:	931b      	str	r3, [sp, #108]	; 0x6c
 80144d8:	78b3      	ldrb	r3, [r6, #2]
 80144da:	e78a      	b.n	80143f2 <_strtod_l+0x192>
 80144dc:	f04f 0c00 	mov.w	ip, #0
 80144e0:	e7f8      	b.n	80144d4 <_strtod_l+0x274>
 80144e2:	bf00      	nop
 80144e4:	08018028 	.word	0x08018028
 80144e8:	7ff00000 	.word	0x7ff00000
 80144ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80144ee:	1c5f      	adds	r7, r3, #1
 80144f0:	971b      	str	r7, [sp, #108]	; 0x6c
 80144f2:	785b      	ldrb	r3, [r3, #1]
 80144f4:	2b30      	cmp	r3, #48	; 0x30
 80144f6:	d0f9      	beq.n	80144ec <_strtod_l+0x28c>
 80144f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80144fc:	2f08      	cmp	r7, #8
 80144fe:	f63f af7d 	bhi.w	80143fc <_strtod_l+0x19c>
 8014502:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014508:	930a      	str	r3, [sp, #40]	; 0x28
 801450a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801450c:	1c5f      	adds	r7, r3, #1
 801450e:	971b      	str	r7, [sp, #108]	; 0x6c
 8014510:	785b      	ldrb	r3, [r3, #1]
 8014512:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014516:	f1b8 0f09 	cmp.w	r8, #9
 801451a:	d937      	bls.n	801458c <_strtod_l+0x32c>
 801451c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801451e:	1a7f      	subs	r7, r7, r1
 8014520:	2f08      	cmp	r7, #8
 8014522:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014526:	dc37      	bgt.n	8014598 <_strtod_l+0x338>
 8014528:	45be      	cmp	lr, r7
 801452a:	bfa8      	it	ge
 801452c:	46be      	movge	lr, r7
 801452e:	f1bc 0f00 	cmp.w	ip, #0
 8014532:	d001      	beq.n	8014538 <_strtod_l+0x2d8>
 8014534:	f1ce 0e00 	rsb	lr, lr, #0
 8014538:	2c00      	cmp	r4, #0
 801453a:	d151      	bne.n	80145e0 <_strtod_l+0x380>
 801453c:	2800      	cmp	r0, #0
 801453e:	f47f aece 	bne.w	80142de <_strtod_l+0x7e>
 8014542:	9a06      	ldr	r2, [sp, #24]
 8014544:	2a00      	cmp	r2, #0
 8014546:	f47f aeca 	bne.w	80142de <_strtod_l+0x7e>
 801454a:	9a04      	ldr	r2, [sp, #16]
 801454c:	2a00      	cmp	r2, #0
 801454e:	f47f aee4 	bne.w	801431a <_strtod_l+0xba>
 8014552:	2b4e      	cmp	r3, #78	; 0x4e
 8014554:	d027      	beq.n	80145a6 <_strtod_l+0x346>
 8014556:	dc21      	bgt.n	801459c <_strtod_l+0x33c>
 8014558:	2b49      	cmp	r3, #73	; 0x49
 801455a:	f47f aede 	bne.w	801431a <_strtod_l+0xba>
 801455e:	49a0      	ldr	r1, [pc, #640]	; (80147e0 <_strtod_l+0x580>)
 8014560:	a81b      	add	r0, sp, #108	; 0x6c
 8014562:	f001 fdf7 	bl	8016154 <__match>
 8014566:	2800      	cmp	r0, #0
 8014568:	f43f aed7 	beq.w	801431a <_strtod_l+0xba>
 801456c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801456e:	499d      	ldr	r1, [pc, #628]	; (80147e4 <_strtod_l+0x584>)
 8014570:	3b01      	subs	r3, #1
 8014572:	a81b      	add	r0, sp, #108	; 0x6c
 8014574:	931b      	str	r3, [sp, #108]	; 0x6c
 8014576:	f001 fded 	bl	8016154 <__match>
 801457a:	b910      	cbnz	r0, 8014582 <_strtod_l+0x322>
 801457c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801457e:	3301      	adds	r3, #1
 8014580:	931b      	str	r3, [sp, #108]	; 0x6c
 8014582:	f8df b274 	ldr.w	fp, [pc, #628]	; 80147f8 <_strtod_l+0x598>
 8014586:	f04f 0a00 	mov.w	sl, #0
 801458a:	e6a8      	b.n	80142de <_strtod_l+0x7e>
 801458c:	210a      	movs	r1, #10
 801458e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014592:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014596:	e7b8      	b.n	801450a <_strtod_l+0x2aa>
 8014598:	46be      	mov	lr, r7
 801459a:	e7c8      	b.n	801452e <_strtod_l+0x2ce>
 801459c:	2b69      	cmp	r3, #105	; 0x69
 801459e:	d0de      	beq.n	801455e <_strtod_l+0x2fe>
 80145a0:	2b6e      	cmp	r3, #110	; 0x6e
 80145a2:	f47f aeba 	bne.w	801431a <_strtod_l+0xba>
 80145a6:	4990      	ldr	r1, [pc, #576]	; (80147e8 <_strtod_l+0x588>)
 80145a8:	a81b      	add	r0, sp, #108	; 0x6c
 80145aa:	f001 fdd3 	bl	8016154 <__match>
 80145ae:	2800      	cmp	r0, #0
 80145b0:	f43f aeb3 	beq.w	801431a <_strtod_l+0xba>
 80145b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	2b28      	cmp	r3, #40	; 0x28
 80145ba:	d10e      	bne.n	80145da <_strtod_l+0x37a>
 80145bc:	aa1e      	add	r2, sp, #120	; 0x78
 80145be:	498b      	ldr	r1, [pc, #556]	; (80147ec <_strtod_l+0x58c>)
 80145c0:	a81b      	add	r0, sp, #108	; 0x6c
 80145c2:	f001 fddb 	bl	801617c <__hexnan>
 80145c6:	2805      	cmp	r0, #5
 80145c8:	d107      	bne.n	80145da <_strtod_l+0x37a>
 80145ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80145cc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80145d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80145d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80145d8:	e681      	b.n	80142de <_strtod_l+0x7e>
 80145da:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014800 <_strtod_l+0x5a0>
 80145de:	e7d2      	b.n	8014586 <_strtod_l+0x326>
 80145e0:	ebae 0302 	sub.w	r3, lr, r2
 80145e4:	9306      	str	r3, [sp, #24]
 80145e6:	9b05      	ldr	r3, [sp, #20]
 80145e8:	9807      	ldr	r0, [sp, #28]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	bf08      	it	eq
 80145ee:	4623      	moveq	r3, r4
 80145f0:	2c10      	cmp	r4, #16
 80145f2:	9305      	str	r3, [sp, #20]
 80145f4:	46a0      	mov	r8, r4
 80145f6:	bfa8      	it	ge
 80145f8:	f04f 0810 	movge.w	r8, #16
 80145fc:	f7eb ff9a 	bl	8000534 <__aeabi_ui2d>
 8014600:	2c09      	cmp	r4, #9
 8014602:	4682      	mov	sl, r0
 8014604:	468b      	mov	fp, r1
 8014606:	dc13      	bgt.n	8014630 <_strtod_l+0x3d0>
 8014608:	9b06      	ldr	r3, [sp, #24]
 801460a:	2b00      	cmp	r3, #0
 801460c:	f43f ae67 	beq.w	80142de <_strtod_l+0x7e>
 8014610:	9b06      	ldr	r3, [sp, #24]
 8014612:	dd7a      	ble.n	801470a <_strtod_l+0x4aa>
 8014614:	2b16      	cmp	r3, #22
 8014616:	dc61      	bgt.n	80146dc <_strtod_l+0x47c>
 8014618:	4a75      	ldr	r2, [pc, #468]	; (80147f0 <_strtod_l+0x590>)
 801461a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801461e:	e9de 0100 	ldrd	r0, r1, [lr]
 8014622:	4652      	mov	r2, sl
 8014624:	465b      	mov	r3, fp
 8014626:	f7eb ffff 	bl	8000628 <__aeabi_dmul>
 801462a:	4682      	mov	sl, r0
 801462c:	468b      	mov	fp, r1
 801462e:	e656      	b.n	80142de <_strtod_l+0x7e>
 8014630:	4b6f      	ldr	r3, [pc, #444]	; (80147f0 <_strtod_l+0x590>)
 8014632:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8014636:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801463a:	f7eb fff5 	bl	8000628 <__aeabi_dmul>
 801463e:	4606      	mov	r6, r0
 8014640:	4628      	mov	r0, r5
 8014642:	460f      	mov	r7, r1
 8014644:	f7eb ff76 	bl	8000534 <__aeabi_ui2d>
 8014648:	4602      	mov	r2, r0
 801464a:	460b      	mov	r3, r1
 801464c:	4630      	mov	r0, r6
 801464e:	4639      	mov	r1, r7
 8014650:	f7eb fe34 	bl	80002bc <__adddf3>
 8014654:	2c0f      	cmp	r4, #15
 8014656:	4682      	mov	sl, r0
 8014658:	468b      	mov	fp, r1
 801465a:	ddd5      	ble.n	8014608 <_strtod_l+0x3a8>
 801465c:	9b06      	ldr	r3, [sp, #24]
 801465e:	eba4 0808 	sub.w	r8, r4, r8
 8014662:	4498      	add	r8, r3
 8014664:	f1b8 0f00 	cmp.w	r8, #0
 8014668:	f340 8096 	ble.w	8014798 <_strtod_l+0x538>
 801466c:	f018 030f 	ands.w	r3, r8, #15
 8014670:	d00a      	beq.n	8014688 <_strtod_l+0x428>
 8014672:	495f      	ldr	r1, [pc, #380]	; (80147f0 <_strtod_l+0x590>)
 8014674:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014678:	4652      	mov	r2, sl
 801467a:	465b      	mov	r3, fp
 801467c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014680:	f7eb ffd2 	bl	8000628 <__aeabi_dmul>
 8014684:	4682      	mov	sl, r0
 8014686:	468b      	mov	fp, r1
 8014688:	f038 080f 	bics.w	r8, r8, #15
 801468c:	d073      	beq.n	8014776 <_strtod_l+0x516>
 801468e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014692:	dd47      	ble.n	8014724 <_strtod_l+0x4c4>
 8014694:	2400      	movs	r4, #0
 8014696:	46a0      	mov	r8, r4
 8014698:	9407      	str	r4, [sp, #28]
 801469a:	9405      	str	r4, [sp, #20]
 801469c:	2322      	movs	r3, #34	; 0x22
 801469e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80147f8 <_strtod_l+0x598>
 80146a2:	f8c9 3000 	str.w	r3, [r9]
 80146a6:	f04f 0a00 	mov.w	sl, #0
 80146aa:	9b07      	ldr	r3, [sp, #28]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	f43f ae16 	beq.w	80142de <_strtod_l+0x7e>
 80146b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80146b4:	4648      	mov	r0, r9
 80146b6:	f001 fe61 	bl	801637c <_Bfree>
 80146ba:	9905      	ldr	r1, [sp, #20]
 80146bc:	4648      	mov	r0, r9
 80146be:	f001 fe5d 	bl	801637c <_Bfree>
 80146c2:	4641      	mov	r1, r8
 80146c4:	4648      	mov	r0, r9
 80146c6:	f001 fe59 	bl	801637c <_Bfree>
 80146ca:	9907      	ldr	r1, [sp, #28]
 80146cc:	4648      	mov	r0, r9
 80146ce:	f001 fe55 	bl	801637c <_Bfree>
 80146d2:	4621      	mov	r1, r4
 80146d4:	4648      	mov	r0, r9
 80146d6:	f001 fe51 	bl	801637c <_Bfree>
 80146da:	e600      	b.n	80142de <_strtod_l+0x7e>
 80146dc:	9a06      	ldr	r2, [sp, #24]
 80146de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80146e2:	4293      	cmp	r3, r2
 80146e4:	dbba      	blt.n	801465c <_strtod_l+0x3fc>
 80146e6:	4d42      	ldr	r5, [pc, #264]	; (80147f0 <_strtod_l+0x590>)
 80146e8:	f1c4 040f 	rsb	r4, r4, #15
 80146ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80146f0:	4652      	mov	r2, sl
 80146f2:	465b      	mov	r3, fp
 80146f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80146f8:	f7eb ff96 	bl	8000628 <__aeabi_dmul>
 80146fc:	9b06      	ldr	r3, [sp, #24]
 80146fe:	1b1c      	subs	r4, r3, r4
 8014700:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8014704:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014708:	e78d      	b.n	8014626 <_strtod_l+0x3c6>
 801470a:	f113 0f16 	cmn.w	r3, #22
 801470e:	dba5      	blt.n	801465c <_strtod_l+0x3fc>
 8014710:	4a37      	ldr	r2, [pc, #220]	; (80147f0 <_strtod_l+0x590>)
 8014712:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8014716:	e9d2 2300 	ldrd	r2, r3, [r2]
 801471a:	4650      	mov	r0, sl
 801471c:	4659      	mov	r1, fp
 801471e:	f7ec f8ad 	bl	800087c <__aeabi_ddiv>
 8014722:	e782      	b.n	801462a <_strtod_l+0x3ca>
 8014724:	2300      	movs	r3, #0
 8014726:	4e33      	ldr	r6, [pc, #204]	; (80147f4 <_strtod_l+0x594>)
 8014728:	ea4f 1828 	mov.w	r8, r8, asr #4
 801472c:	4650      	mov	r0, sl
 801472e:	4659      	mov	r1, fp
 8014730:	461d      	mov	r5, r3
 8014732:	f1b8 0f01 	cmp.w	r8, #1
 8014736:	dc21      	bgt.n	801477c <_strtod_l+0x51c>
 8014738:	b10b      	cbz	r3, 801473e <_strtod_l+0x4de>
 801473a:	4682      	mov	sl, r0
 801473c:	468b      	mov	fp, r1
 801473e:	4b2d      	ldr	r3, [pc, #180]	; (80147f4 <_strtod_l+0x594>)
 8014740:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014744:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014748:	4652      	mov	r2, sl
 801474a:	465b      	mov	r3, fp
 801474c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014750:	f7eb ff6a 	bl	8000628 <__aeabi_dmul>
 8014754:	4b28      	ldr	r3, [pc, #160]	; (80147f8 <_strtod_l+0x598>)
 8014756:	460a      	mov	r2, r1
 8014758:	400b      	ands	r3, r1
 801475a:	4928      	ldr	r1, [pc, #160]	; (80147fc <_strtod_l+0x59c>)
 801475c:	428b      	cmp	r3, r1
 801475e:	4682      	mov	sl, r0
 8014760:	d898      	bhi.n	8014694 <_strtod_l+0x434>
 8014762:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014766:	428b      	cmp	r3, r1
 8014768:	bf86      	itte	hi
 801476a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014804 <_strtod_l+0x5a4>
 801476e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014772:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014776:	2300      	movs	r3, #0
 8014778:	9304      	str	r3, [sp, #16]
 801477a:	e077      	b.n	801486c <_strtod_l+0x60c>
 801477c:	f018 0f01 	tst.w	r8, #1
 8014780:	d006      	beq.n	8014790 <_strtod_l+0x530>
 8014782:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801478a:	f7eb ff4d 	bl	8000628 <__aeabi_dmul>
 801478e:	2301      	movs	r3, #1
 8014790:	3501      	adds	r5, #1
 8014792:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014796:	e7cc      	b.n	8014732 <_strtod_l+0x4d2>
 8014798:	d0ed      	beq.n	8014776 <_strtod_l+0x516>
 801479a:	f1c8 0800 	rsb	r8, r8, #0
 801479e:	f018 020f 	ands.w	r2, r8, #15
 80147a2:	d00a      	beq.n	80147ba <_strtod_l+0x55a>
 80147a4:	4b12      	ldr	r3, [pc, #72]	; (80147f0 <_strtod_l+0x590>)
 80147a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147aa:	4650      	mov	r0, sl
 80147ac:	4659      	mov	r1, fp
 80147ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b2:	f7ec f863 	bl	800087c <__aeabi_ddiv>
 80147b6:	4682      	mov	sl, r0
 80147b8:	468b      	mov	fp, r1
 80147ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 80147be:	d0da      	beq.n	8014776 <_strtod_l+0x516>
 80147c0:	f1b8 0f1f 	cmp.w	r8, #31
 80147c4:	dd20      	ble.n	8014808 <_strtod_l+0x5a8>
 80147c6:	2400      	movs	r4, #0
 80147c8:	46a0      	mov	r8, r4
 80147ca:	9407      	str	r4, [sp, #28]
 80147cc:	9405      	str	r4, [sp, #20]
 80147ce:	2322      	movs	r3, #34	; 0x22
 80147d0:	f04f 0a00 	mov.w	sl, #0
 80147d4:	f04f 0b00 	mov.w	fp, #0
 80147d8:	f8c9 3000 	str.w	r3, [r9]
 80147dc:	e765      	b.n	80146aa <_strtod_l+0x44a>
 80147de:	bf00      	nop
 80147e0:	08017ff5 	.word	0x08017ff5
 80147e4:	0801807b 	.word	0x0801807b
 80147e8:	08017ffd 	.word	0x08017ffd
 80147ec:	0801803c 	.word	0x0801803c
 80147f0:	08018120 	.word	0x08018120
 80147f4:	080180f8 	.word	0x080180f8
 80147f8:	7ff00000 	.word	0x7ff00000
 80147fc:	7ca00000 	.word	0x7ca00000
 8014800:	fff80000 	.word	0xfff80000
 8014804:	7fefffff 	.word	0x7fefffff
 8014808:	f018 0310 	ands.w	r3, r8, #16
 801480c:	bf18      	it	ne
 801480e:	236a      	movne	r3, #106	; 0x6a
 8014810:	4da0      	ldr	r5, [pc, #640]	; (8014a94 <_strtod_l+0x834>)
 8014812:	9304      	str	r3, [sp, #16]
 8014814:	4650      	mov	r0, sl
 8014816:	4659      	mov	r1, fp
 8014818:	2300      	movs	r3, #0
 801481a:	f1b8 0f00 	cmp.w	r8, #0
 801481e:	f300 810a 	bgt.w	8014a36 <_strtod_l+0x7d6>
 8014822:	b10b      	cbz	r3, 8014828 <_strtod_l+0x5c8>
 8014824:	4682      	mov	sl, r0
 8014826:	468b      	mov	fp, r1
 8014828:	9b04      	ldr	r3, [sp, #16]
 801482a:	b1bb      	cbz	r3, 801485c <_strtod_l+0x5fc>
 801482c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014830:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014834:	2b00      	cmp	r3, #0
 8014836:	4659      	mov	r1, fp
 8014838:	dd10      	ble.n	801485c <_strtod_l+0x5fc>
 801483a:	2b1f      	cmp	r3, #31
 801483c:	f340 8107 	ble.w	8014a4e <_strtod_l+0x7ee>
 8014840:	2b34      	cmp	r3, #52	; 0x34
 8014842:	bfde      	ittt	le
 8014844:	3b20      	suble	r3, #32
 8014846:	f04f 32ff 	movle.w	r2, #4294967295
 801484a:	fa02 f303 	lslle.w	r3, r2, r3
 801484e:	f04f 0a00 	mov.w	sl, #0
 8014852:	bfcc      	ite	gt
 8014854:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014858:	ea03 0b01 	andle.w	fp, r3, r1
 801485c:	2200      	movs	r2, #0
 801485e:	2300      	movs	r3, #0
 8014860:	4650      	mov	r0, sl
 8014862:	4659      	mov	r1, fp
 8014864:	f7ec f948 	bl	8000af8 <__aeabi_dcmpeq>
 8014868:	2800      	cmp	r0, #0
 801486a:	d1ac      	bne.n	80147c6 <_strtod_l+0x566>
 801486c:	9b07      	ldr	r3, [sp, #28]
 801486e:	9300      	str	r3, [sp, #0]
 8014870:	9a05      	ldr	r2, [sp, #20]
 8014872:	9908      	ldr	r1, [sp, #32]
 8014874:	4623      	mov	r3, r4
 8014876:	4648      	mov	r0, r9
 8014878:	f001 fdd2 	bl	8016420 <__s2b>
 801487c:	9007      	str	r0, [sp, #28]
 801487e:	2800      	cmp	r0, #0
 8014880:	f43f af08 	beq.w	8014694 <_strtod_l+0x434>
 8014884:	9a06      	ldr	r2, [sp, #24]
 8014886:	9b06      	ldr	r3, [sp, #24]
 8014888:	2a00      	cmp	r2, #0
 801488a:	f1c3 0300 	rsb	r3, r3, #0
 801488e:	bfa8      	it	ge
 8014890:	2300      	movge	r3, #0
 8014892:	930e      	str	r3, [sp, #56]	; 0x38
 8014894:	2400      	movs	r4, #0
 8014896:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801489a:	9316      	str	r3, [sp, #88]	; 0x58
 801489c:	46a0      	mov	r8, r4
 801489e:	9b07      	ldr	r3, [sp, #28]
 80148a0:	4648      	mov	r0, r9
 80148a2:	6859      	ldr	r1, [r3, #4]
 80148a4:	f001 fd36 	bl	8016314 <_Balloc>
 80148a8:	9005      	str	r0, [sp, #20]
 80148aa:	2800      	cmp	r0, #0
 80148ac:	f43f aef6 	beq.w	801469c <_strtod_l+0x43c>
 80148b0:	9b07      	ldr	r3, [sp, #28]
 80148b2:	691a      	ldr	r2, [r3, #16]
 80148b4:	3202      	adds	r2, #2
 80148b6:	f103 010c 	add.w	r1, r3, #12
 80148ba:	0092      	lsls	r2, r2, #2
 80148bc:	300c      	adds	r0, #12
 80148be:	f7fe fdd3 	bl	8013468 <memcpy>
 80148c2:	aa1e      	add	r2, sp, #120	; 0x78
 80148c4:	a91d      	add	r1, sp, #116	; 0x74
 80148c6:	ec4b ab10 	vmov	d0, sl, fp
 80148ca:	4648      	mov	r0, r9
 80148cc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80148d0:	f002 f862 	bl	8016998 <__d2b>
 80148d4:	901c      	str	r0, [sp, #112]	; 0x70
 80148d6:	2800      	cmp	r0, #0
 80148d8:	f43f aee0 	beq.w	801469c <_strtod_l+0x43c>
 80148dc:	2101      	movs	r1, #1
 80148de:	4648      	mov	r0, r9
 80148e0:	f001 fe2a 	bl	8016538 <__i2b>
 80148e4:	4680      	mov	r8, r0
 80148e6:	2800      	cmp	r0, #0
 80148e8:	f43f aed8 	beq.w	801469c <_strtod_l+0x43c>
 80148ec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80148ee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80148f0:	2e00      	cmp	r6, #0
 80148f2:	bfab      	itete	ge
 80148f4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80148f6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80148f8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80148fa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80148fc:	bfac      	ite	ge
 80148fe:	18f7      	addge	r7, r6, r3
 8014900:	1b9d      	sublt	r5, r3, r6
 8014902:	9b04      	ldr	r3, [sp, #16]
 8014904:	1af6      	subs	r6, r6, r3
 8014906:	4416      	add	r6, r2
 8014908:	4b63      	ldr	r3, [pc, #396]	; (8014a98 <_strtod_l+0x838>)
 801490a:	3e01      	subs	r6, #1
 801490c:	429e      	cmp	r6, r3
 801490e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014912:	f280 80af 	bge.w	8014a74 <_strtod_l+0x814>
 8014916:	1b9b      	subs	r3, r3, r6
 8014918:	2b1f      	cmp	r3, #31
 801491a:	eba2 0203 	sub.w	r2, r2, r3
 801491e:	f04f 0101 	mov.w	r1, #1
 8014922:	f300 809b 	bgt.w	8014a5c <_strtod_l+0x7fc>
 8014926:	fa01 f303 	lsl.w	r3, r1, r3
 801492a:	930f      	str	r3, [sp, #60]	; 0x3c
 801492c:	2300      	movs	r3, #0
 801492e:	930a      	str	r3, [sp, #40]	; 0x28
 8014930:	18be      	adds	r6, r7, r2
 8014932:	9b04      	ldr	r3, [sp, #16]
 8014934:	42b7      	cmp	r7, r6
 8014936:	4415      	add	r5, r2
 8014938:	441d      	add	r5, r3
 801493a:	463b      	mov	r3, r7
 801493c:	bfa8      	it	ge
 801493e:	4633      	movge	r3, r6
 8014940:	42ab      	cmp	r3, r5
 8014942:	bfa8      	it	ge
 8014944:	462b      	movge	r3, r5
 8014946:	2b00      	cmp	r3, #0
 8014948:	bfc2      	ittt	gt
 801494a:	1af6      	subgt	r6, r6, r3
 801494c:	1aed      	subgt	r5, r5, r3
 801494e:	1aff      	subgt	r7, r7, r3
 8014950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014952:	b1bb      	cbz	r3, 8014984 <_strtod_l+0x724>
 8014954:	4641      	mov	r1, r8
 8014956:	461a      	mov	r2, r3
 8014958:	4648      	mov	r0, r9
 801495a:	f001 fe8d 	bl	8016678 <__pow5mult>
 801495e:	4680      	mov	r8, r0
 8014960:	2800      	cmp	r0, #0
 8014962:	f43f ae9b 	beq.w	801469c <_strtod_l+0x43c>
 8014966:	4601      	mov	r1, r0
 8014968:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801496a:	4648      	mov	r0, r9
 801496c:	f001 fded 	bl	801654a <__multiply>
 8014970:	900c      	str	r0, [sp, #48]	; 0x30
 8014972:	2800      	cmp	r0, #0
 8014974:	f43f ae92 	beq.w	801469c <_strtod_l+0x43c>
 8014978:	991c      	ldr	r1, [sp, #112]	; 0x70
 801497a:	4648      	mov	r0, r9
 801497c:	f001 fcfe 	bl	801637c <_Bfree>
 8014980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014982:	931c      	str	r3, [sp, #112]	; 0x70
 8014984:	2e00      	cmp	r6, #0
 8014986:	dc7a      	bgt.n	8014a7e <_strtod_l+0x81e>
 8014988:	9b06      	ldr	r3, [sp, #24]
 801498a:	2b00      	cmp	r3, #0
 801498c:	dd08      	ble.n	80149a0 <_strtod_l+0x740>
 801498e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014990:	9905      	ldr	r1, [sp, #20]
 8014992:	4648      	mov	r0, r9
 8014994:	f001 fe70 	bl	8016678 <__pow5mult>
 8014998:	9005      	str	r0, [sp, #20]
 801499a:	2800      	cmp	r0, #0
 801499c:	f43f ae7e 	beq.w	801469c <_strtod_l+0x43c>
 80149a0:	2d00      	cmp	r5, #0
 80149a2:	dd08      	ble.n	80149b6 <_strtod_l+0x756>
 80149a4:	462a      	mov	r2, r5
 80149a6:	9905      	ldr	r1, [sp, #20]
 80149a8:	4648      	mov	r0, r9
 80149aa:	f001 feb3 	bl	8016714 <__lshift>
 80149ae:	9005      	str	r0, [sp, #20]
 80149b0:	2800      	cmp	r0, #0
 80149b2:	f43f ae73 	beq.w	801469c <_strtod_l+0x43c>
 80149b6:	2f00      	cmp	r7, #0
 80149b8:	dd08      	ble.n	80149cc <_strtod_l+0x76c>
 80149ba:	4641      	mov	r1, r8
 80149bc:	463a      	mov	r2, r7
 80149be:	4648      	mov	r0, r9
 80149c0:	f001 fea8 	bl	8016714 <__lshift>
 80149c4:	4680      	mov	r8, r0
 80149c6:	2800      	cmp	r0, #0
 80149c8:	f43f ae68 	beq.w	801469c <_strtod_l+0x43c>
 80149cc:	9a05      	ldr	r2, [sp, #20]
 80149ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80149d0:	4648      	mov	r0, r9
 80149d2:	f001 ff0d 	bl	80167f0 <__mdiff>
 80149d6:	4604      	mov	r4, r0
 80149d8:	2800      	cmp	r0, #0
 80149da:	f43f ae5f 	beq.w	801469c <_strtod_l+0x43c>
 80149de:	68c3      	ldr	r3, [r0, #12]
 80149e0:	930c      	str	r3, [sp, #48]	; 0x30
 80149e2:	2300      	movs	r3, #0
 80149e4:	60c3      	str	r3, [r0, #12]
 80149e6:	4641      	mov	r1, r8
 80149e8:	f001 fee8 	bl	80167bc <__mcmp>
 80149ec:	2800      	cmp	r0, #0
 80149ee:	da55      	bge.n	8014a9c <_strtod_l+0x83c>
 80149f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80149f2:	b9e3      	cbnz	r3, 8014a2e <_strtod_l+0x7ce>
 80149f4:	f1ba 0f00 	cmp.w	sl, #0
 80149f8:	d119      	bne.n	8014a2e <_strtod_l+0x7ce>
 80149fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80149fe:	b9b3      	cbnz	r3, 8014a2e <_strtod_l+0x7ce>
 8014a00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014a04:	0d1b      	lsrs	r3, r3, #20
 8014a06:	051b      	lsls	r3, r3, #20
 8014a08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8014a0c:	d90f      	bls.n	8014a2e <_strtod_l+0x7ce>
 8014a0e:	6963      	ldr	r3, [r4, #20]
 8014a10:	b913      	cbnz	r3, 8014a18 <_strtod_l+0x7b8>
 8014a12:	6923      	ldr	r3, [r4, #16]
 8014a14:	2b01      	cmp	r3, #1
 8014a16:	dd0a      	ble.n	8014a2e <_strtod_l+0x7ce>
 8014a18:	4621      	mov	r1, r4
 8014a1a:	2201      	movs	r2, #1
 8014a1c:	4648      	mov	r0, r9
 8014a1e:	f001 fe79 	bl	8016714 <__lshift>
 8014a22:	4641      	mov	r1, r8
 8014a24:	4604      	mov	r4, r0
 8014a26:	f001 fec9 	bl	80167bc <__mcmp>
 8014a2a:	2800      	cmp	r0, #0
 8014a2c:	dc67      	bgt.n	8014afe <_strtod_l+0x89e>
 8014a2e:	9b04      	ldr	r3, [sp, #16]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d171      	bne.n	8014b18 <_strtod_l+0x8b8>
 8014a34:	e63d      	b.n	80146b2 <_strtod_l+0x452>
 8014a36:	f018 0f01 	tst.w	r8, #1
 8014a3a:	d004      	beq.n	8014a46 <_strtod_l+0x7e6>
 8014a3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014a40:	f7eb fdf2 	bl	8000628 <__aeabi_dmul>
 8014a44:	2301      	movs	r3, #1
 8014a46:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014a4a:	3508      	adds	r5, #8
 8014a4c:	e6e5      	b.n	801481a <_strtod_l+0x5ba>
 8014a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8014a52:	fa02 f303 	lsl.w	r3, r2, r3
 8014a56:	ea03 0a0a 	and.w	sl, r3, sl
 8014a5a:	e6ff      	b.n	801485c <_strtod_l+0x5fc>
 8014a5c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014a60:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014a64:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014a68:	36e2      	adds	r6, #226	; 0xe2
 8014a6a:	fa01 f306 	lsl.w	r3, r1, r6
 8014a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8014a70:	910f      	str	r1, [sp, #60]	; 0x3c
 8014a72:	e75d      	b.n	8014930 <_strtod_l+0x6d0>
 8014a74:	2300      	movs	r3, #0
 8014a76:	930a      	str	r3, [sp, #40]	; 0x28
 8014a78:	2301      	movs	r3, #1
 8014a7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a7c:	e758      	b.n	8014930 <_strtod_l+0x6d0>
 8014a7e:	4632      	mov	r2, r6
 8014a80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014a82:	4648      	mov	r0, r9
 8014a84:	f001 fe46 	bl	8016714 <__lshift>
 8014a88:	901c      	str	r0, [sp, #112]	; 0x70
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	f47f af7c 	bne.w	8014988 <_strtod_l+0x728>
 8014a90:	e604      	b.n	801469c <_strtod_l+0x43c>
 8014a92:	bf00      	nop
 8014a94:	08018050 	.word	0x08018050
 8014a98:	fffffc02 	.word	0xfffffc02
 8014a9c:	465d      	mov	r5, fp
 8014a9e:	f040 8086 	bne.w	8014bae <_strtod_l+0x94e>
 8014aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014aa4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014aa8:	b32a      	cbz	r2, 8014af6 <_strtod_l+0x896>
 8014aaa:	4aaf      	ldr	r2, [pc, #700]	; (8014d68 <_strtod_l+0xb08>)
 8014aac:	4293      	cmp	r3, r2
 8014aae:	d153      	bne.n	8014b58 <_strtod_l+0x8f8>
 8014ab0:	9b04      	ldr	r3, [sp, #16]
 8014ab2:	4650      	mov	r0, sl
 8014ab4:	b1d3      	cbz	r3, 8014aec <_strtod_l+0x88c>
 8014ab6:	4aad      	ldr	r2, [pc, #692]	; (8014d6c <_strtod_l+0xb0c>)
 8014ab8:	402a      	ands	r2, r5
 8014aba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014abe:	f04f 31ff 	mov.w	r1, #4294967295
 8014ac2:	d816      	bhi.n	8014af2 <_strtod_l+0x892>
 8014ac4:	0d12      	lsrs	r2, r2, #20
 8014ac6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014aca:	fa01 f303 	lsl.w	r3, r1, r3
 8014ace:	4298      	cmp	r0, r3
 8014ad0:	d142      	bne.n	8014b58 <_strtod_l+0x8f8>
 8014ad2:	4ba7      	ldr	r3, [pc, #668]	; (8014d70 <_strtod_l+0xb10>)
 8014ad4:	429d      	cmp	r5, r3
 8014ad6:	d102      	bne.n	8014ade <_strtod_l+0x87e>
 8014ad8:	3001      	adds	r0, #1
 8014ada:	f43f addf 	beq.w	801469c <_strtod_l+0x43c>
 8014ade:	4ba3      	ldr	r3, [pc, #652]	; (8014d6c <_strtod_l+0xb0c>)
 8014ae0:	402b      	ands	r3, r5
 8014ae2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014ae6:	f04f 0a00 	mov.w	sl, #0
 8014aea:	e7a0      	b.n	8014a2e <_strtod_l+0x7ce>
 8014aec:	f04f 33ff 	mov.w	r3, #4294967295
 8014af0:	e7ed      	b.n	8014ace <_strtod_l+0x86e>
 8014af2:	460b      	mov	r3, r1
 8014af4:	e7eb      	b.n	8014ace <_strtod_l+0x86e>
 8014af6:	bb7b      	cbnz	r3, 8014b58 <_strtod_l+0x8f8>
 8014af8:	f1ba 0f00 	cmp.w	sl, #0
 8014afc:	d12c      	bne.n	8014b58 <_strtod_l+0x8f8>
 8014afe:	9904      	ldr	r1, [sp, #16]
 8014b00:	4a9a      	ldr	r2, [pc, #616]	; (8014d6c <_strtod_l+0xb0c>)
 8014b02:	465b      	mov	r3, fp
 8014b04:	b1f1      	cbz	r1, 8014b44 <_strtod_l+0x8e4>
 8014b06:	ea02 010b 	and.w	r1, r2, fp
 8014b0a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8014b0e:	dc19      	bgt.n	8014b44 <_strtod_l+0x8e4>
 8014b10:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014b14:	f77f ae5b 	ble.w	80147ce <_strtod_l+0x56e>
 8014b18:	4a96      	ldr	r2, [pc, #600]	; (8014d74 <_strtod_l+0xb14>)
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014b20:	4650      	mov	r0, sl
 8014b22:	4659      	mov	r1, fp
 8014b24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014b28:	f7eb fd7e 	bl	8000628 <__aeabi_dmul>
 8014b2c:	4682      	mov	sl, r0
 8014b2e:	468b      	mov	fp, r1
 8014b30:	2900      	cmp	r1, #0
 8014b32:	f47f adbe 	bne.w	80146b2 <_strtod_l+0x452>
 8014b36:	2800      	cmp	r0, #0
 8014b38:	f47f adbb 	bne.w	80146b2 <_strtod_l+0x452>
 8014b3c:	2322      	movs	r3, #34	; 0x22
 8014b3e:	f8c9 3000 	str.w	r3, [r9]
 8014b42:	e5b6      	b.n	80146b2 <_strtod_l+0x452>
 8014b44:	4013      	ands	r3, r2
 8014b46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014b4a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014b4e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014b52:	f04f 3aff 	mov.w	sl, #4294967295
 8014b56:	e76a      	b.n	8014a2e <_strtod_l+0x7ce>
 8014b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b5a:	b193      	cbz	r3, 8014b82 <_strtod_l+0x922>
 8014b5c:	422b      	tst	r3, r5
 8014b5e:	f43f af66 	beq.w	8014a2e <_strtod_l+0x7ce>
 8014b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b64:	9a04      	ldr	r2, [sp, #16]
 8014b66:	4650      	mov	r0, sl
 8014b68:	4659      	mov	r1, fp
 8014b6a:	b173      	cbz	r3, 8014b8a <_strtod_l+0x92a>
 8014b6c:	f7ff fb5c 	bl	8014228 <sulp>
 8014b70:	4602      	mov	r2, r0
 8014b72:	460b      	mov	r3, r1
 8014b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b78:	f7eb fba0 	bl	80002bc <__adddf3>
 8014b7c:	4682      	mov	sl, r0
 8014b7e:	468b      	mov	fp, r1
 8014b80:	e755      	b.n	8014a2e <_strtod_l+0x7ce>
 8014b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b84:	ea13 0f0a 	tst.w	r3, sl
 8014b88:	e7e9      	b.n	8014b5e <_strtod_l+0x8fe>
 8014b8a:	f7ff fb4d 	bl	8014228 <sulp>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	460b      	mov	r3, r1
 8014b92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014b96:	f7eb fb8f 	bl	80002b8 <__aeabi_dsub>
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	4682      	mov	sl, r0
 8014ba0:	468b      	mov	fp, r1
 8014ba2:	f7eb ffa9 	bl	8000af8 <__aeabi_dcmpeq>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	f47f ae11 	bne.w	80147ce <_strtod_l+0x56e>
 8014bac:	e73f      	b.n	8014a2e <_strtod_l+0x7ce>
 8014bae:	4641      	mov	r1, r8
 8014bb0:	4620      	mov	r0, r4
 8014bb2:	f001 ff40 	bl	8016a36 <__ratio>
 8014bb6:	ec57 6b10 	vmov	r6, r7, d0
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014bc0:	ee10 0a10 	vmov	r0, s0
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	f7eb ffab 	bl	8000b20 <__aeabi_dcmple>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d077      	beq.n	8014cbe <_strtod_l+0xa5e>
 8014bce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d04a      	beq.n	8014c6a <_strtod_l+0xa0a>
 8014bd4:	4b68      	ldr	r3, [pc, #416]	; (8014d78 <_strtod_l+0xb18>)
 8014bd6:	2200      	movs	r2, #0
 8014bd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014bdc:	4f66      	ldr	r7, [pc, #408]	; (8014d78 <_strtod_l+0xb18>)
 8014bde:	2600      	movs	r6, #0
 8014be0:	4b62      	ldr	r3, [pc, #392]	; (8014d6c <_strtod_l+0xb0c>)
 8014be2:	402b      	ands	r3, r5
 8014be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014be6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014be8:	4b64      	ldr	r3, [pc, #400]	; (8014d7c <_strtod_l+0xb1c>)
 8014bea:	429a      	cmp	r2, r3
 8014bec:	f040 80ce 	bne.w	8014d8c <_strtod_l+0xb2c>
 8014bf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014bf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014bf8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014bfc:	ec4b ab10 	vmov	d0, sl, fp
 8014c00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014c04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c08:	f001 fe50 	bl	80168ac <__ulp>
 8014c0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014c10:	ec53 2b10 	vmov	r2, r3, d0
 8014c14:	f7eb fd08 	bl	8000628 <__aeabi_dmul>
 8014c18:	4652      	mov	r2, sl
 8014c1a:	465b      	mov	r3, fp
 8014c1c:	f7eb fb4e 	bl	80002bc <__adddf3>
 8014c20:	460b      	mov	r3, r1
 8014c22:	4952      	ldr	r1, [pc, #328]	; (8014d6c <_strtod_l+0xb0c>)
 8014c24:	4a56      	ldr	r2, [pc, #344]	; (8014d80 <_strtod_l+0xb20>)
 8014c26:	4019      	ands	r1, r3
 8014c28:	4291      	cmp	r1, r2
 8014c2a:	4682      	mov	sl, r0
 8014c2c:	d95b      	bls.n	8014ce6 <_strtod_l+0xa86>
 8014c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c30:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d103      	bne.n	8014c40 <_strtod_l+0x9e0>
 8014c38:	9b08      	ldr	r3, [sp, #32]
 8014c3a:	3301      	adds	r3, #1
 8014c3c:	f43f ad2e 	beq.w	801469c <_strtod_l+0x43c>
 8014c40:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014d70 <_strtod_l+0xb10>
 8014c44:	f04f 3aff 	mov.w	sl, #4294967295
 8014c48:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014c4a:	4648      	mov	r0, r9
 8014c4c:	f001 fb96 	bl	801637c <_Bfree>
 8014c50:	9905      	ldr	r1, [sp, #20]
 8014c52:	4648      	mov	r0, r9
 8014c54:	f001 fb92 	bl	801637c <_Bfree>
 8014c58:	4641      	mov	r1, r8
 8014c5a:	4648      	mov	r0, r9
 8014c5c:	f001 fb8e 	bl	801637c <_Bfree>
 8014c60:	4621      	mov	r1, r4
 8014c62:	4648      	mov	r0, r9
 8014c64:	f001 fb8a 	bl	801637c <_Bfree>
 8014c68:	e619      	b.n	801489e <_strtod_l+0x63e>
 8014c6a:	f1ba 0f00 	cmp.w	sl, #0
 8014c6e:	d11a      	bne.n	8014ca6 <_strtod_l+0xa46>
 8014c70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c74:	b9eb      	cbnz	r3, 8014cb2 <_strtod_l+0xa52>
 8014c76:	2200      	movs	r2, #0
 8014c78:	4b3f      	ldr	r3, [pc, #252]	; (8014d78 <_strtod_l+0xb18>)
 8014c7a:	4630      	mov	r0, r6
 8014c7c:	4639      	mov	r1, r7
 8014c7e:	f7eb ff45 	bl	8000b0c <__aeabi_dcmplt>
 8014c82:	b9c8      	cbnz	r0, 8014cb8 <_strtod_l+0xa58>
 8014c84:	4630      	mov	r0, r6
 8014c86:	4639      	mov	r1, r7
 8014c88:	2200      	movs	r2, #0
 8014c8a:	4b3e      	ldr	r3, [pc, #248]	; (8014d84 <_strtod_l+0xb24>)
 8014c8c:	f7eb fccc 	bl	8000628 <__aeabi_dmul>
 8014c90:	4606      	mov	r6, r0
 8014c92:	460f      	mov	r7, r1
 8014c94:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014c98:	9618      	str	r6, [sp, #96]	; 0x60
 8014c9a:	9319      	str	r3, [sp, #100]	; 0x64
 8014c9c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014ca0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014ca4:	e79c      	b.n	8014be0 <_strtod_l+0x980>
 8014ca6:	f1ba 0f01 	cmp.w	sl, #1
 8014caa:	d102      	bne.n	8014cb2 <_strtod_l+0xa52>
 8014cac:	2d00      	cmp	r5, #0
 8014cae:	f43f ad8e 	beq.w	80147ce <_strtod_l+0x56e>
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	4b34      	ldr	r3, [pc, #208]	; (8014d88 <_strtod_l+0xb28>)
 8014cb6:	e78f      	b.n	8014bd8 <_strtod_l+0x978>
 8014cb8:	2600      	movs	r6, #0
 8014cba:	4f32      	ldr	r7, [pc, #200]	; (8014d84 <_strtod_l+0xb24>)
 8014cbc:	e7ea      	b.n	8014c94 <_strtod_l+0xa34>
 8014cbe:	4b31      	ldr	r3, [pc, #196]	; (8014d84 <_strtod_l+0xb24>)
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	4639      	mov	r1, r7
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	f7eb fcaf 	bl	8000628 <__aeabi_dmul>
 8014cca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ccc:	4606      	mov	r6, r0
 8014cce:	460f      	mov	r7, r1
 8014cd0:	b933      	cbnz	r3, 8014ce0 <_strtod_l+0xa80>
 8014cd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cd6:	9010      	str	r0, [sp, #64]	; 0x40
 8014cd8:	9311      	str	r3, [sp, #68]	; 0x44
 8014cda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014cde:	e7df      	b.n	8014ca0 <_strtod_l+0xa40>
 8014ce0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014ce4:	e7f9      	b.n	8014cda <_strtod_l+0xa7a>
 8014ce6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014cea:	9b04      	ldr	r3, [sp, #16]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d1ab      	bne.n	8014c48 <_strtod_l+0x9e8>
 8014cf0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014cf4:	0d1b      	lsrs	r3, r3, #20
 8014cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014cf8:	051b      	lsls	r3, r3, #20
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	465d      	mov	r5, fp
 8014cfe:	d1a3      	bne.n	8014c48 <_strtod_l+0x9e8>
 8014d00:	4639      	mov	r1, r7
 8014d02:	4630      	mov	r0, r6
 8014d04:	f7eb ff40 	bl	8000b88 <__aeabi_d2iz>
 8014d08:	f7eb fc24 	bl	8000554 <__aeabi_i2d>
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	4602      	mov	r2, r0
 8014d10:	4639      	mov	r1, r7
 8014d12:	4630      	mov	r0, r6
 8014d14:	f7eb fad0 	bl	80002b8 <__aeabi_dsub>
 8014d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d1a:	4606      	mov	r6, r0
 8014d1c:	460f      	mov	r7, r1
 8014d1e:	b933      	cbnz	r3, 8014d2e <_strtod_l+0xace>
 8014d20:	f1ba 0f00 	cmp.w	sl, #0
 8014d24:	d103      	bne.n	8014d2e <_strtod_l+0xace>
 8014d26:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014d2a:	2d00      	cmp	r5, #0
 8014d2c:	d06d      	beq.n	8014e0a <_strtod_l+0xbaa>
 8014d2e:	a30a      	add	r3, pc, #40	; (adr r3, 8014d58 <_strtod_l+0xaf8>)
 8014d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d34:	4630      	mov	r0, r6
 8014d36:	4639      	mov	r1, r7
 8014d38:	f7eb fee8 	bl	8000b0c <__aeabi_dcmplt>
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	f47f acb8 	bne.w	80146b2 <_strtod_l+0x452>
 8014d42:	a307      	add	r3, pc, #28	; (adr r3, 8014d60 <_strtod_l+0xb00>)
 8014d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d48:	4630      	mov	r0, r6
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	f7eb fefc 	bl	8000b48 <__aeabi_dcmpgt>
 8014d50:	2800      	cmp	r0, #0
 8014d52:	f43f af79 	beq.w	8014c48 <_strtod_l+0x9e8>
 8014d56:	e4ac      	b.n	80146b2 <_strtod_l+0x452>
 8014d58:	94a03595 	.word	0x94a03595
 8014d5c:	3fdfffff 	.word	0x3fdfffff
 8014d60:	35afe535 	.word	0x35afe535
 8014d64:	3fe00000 	.word	0x3fe00000
 8014d68:	000fffff 	.word	0x000fffff
 8014d6c:	7ff00000 	.word	0x7ff00000
 8014d70:	7fefffff 	.word	0x7fefffff
 8014d74:	39500000 	.word	0x39500000
 8014d78:	3ff00000 	.word	0x3ff00000
 8014d7c:	7fe00000 	.word	0x7fe00000
 8014d80:	7c9fffff 	.word	0x7c9fffff
 8014d84:	3fe00000 	.word	0x3fe00000
 8014d88:	bff00000 	.word	0xbff00000
 8014d8c:	9b04      	ldr	r3, [sp, #16]
 8014d8e:	b333      	cbz	r3, 8014dde <_strtod_l+0xb7e>
 8014d90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014d92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014d96:	d822      	bhi.n	8014dde <_strtod_l+0xb7e>
 8014d98:	a327      	add	r3, pc, #156	; (adr r3, 8014e38 <_strtod_l+0xbd8>)
 8014d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9e:	4630      	mov	r0, r6
 8014da0:	4639      	mov	r1, r7
 8014da2:	f7eb febd 	bl	8000b20 <__aeabi_dcmple>
 8014da6:	b1a0      	cbz	r0, 8014dd2 <_strtod_l+0xb72>
 8014da8:	4639      	mov	r1, r7
 8014daa:	4630      	mov	r0, r6
 8014dac:	f7eb ff14 	bl	8000bd8 <__aeabi_d2uiz>
 8014db0:	2800      	cmp	r0, #0
 8014db2:	bf08      	it	eq
 8014db4:	2001      	moveq	r0, #1
 8014db6:	f7eb fbbd 	bl	8000534 <__aeabi_ui2d>
 8014dba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014dbc:	4606      	mov	r6, r0
 8014dbe:	460f      	mov	r7, r1
 8014dc0:	bb03      	cbnz	r3, 8014e04 <_strtod_l+0xba4>
 8014dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014dc6:	9012      	str	r0, [sp, #72]	; 0x48
 8014dc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8014dca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014dd6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014dda:	1a9b      	subs	r3, r3, r2
 8014ddc:	930b      	str	r3, [sp, #44]	; 0x2c
 8014dde:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014de2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014de6:	f001 fd61 	bl	80168ac <__ulp>
 8014dea:	4650      	mov	r0, sl
 8014dec:	ec53 2b10 	vmov	r2, r3, d0
 8014df0:	4659      	mov	r1, fp
 8014df2:	f7eb fc19 	bl	8000628 <__aeabi_dmul>
 8014df6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014dfa:	f7eb fa5f 	bl	80002bc <__adddf3>
 8014dfe:	4682      	mov	sl, r0
 8014e00:	468b      	mov	fp, r1
 8014e02:	e772      	b.n	8014cea <_strtod_l+0xa8a>
 8014e04:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014e08:	e7df      	b.n	8014dca <_strtod_l+0xb6a>
 8014e0a:	a30d      	add	r3, pc, #52	; (adr r3, 8014e40 <_strtod_l+0xbe0>)
 8014e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e10:	f7eb fe7c 	bl	8000b0c <__aeabi_dcmplt>
 8014e14:	e79c      	b.n	8014d50 <_strtod_l+0xaf0>
 8014e16:	2300      	movs	r3, #0
 8014e18:	930d      	str	r3, [sp, #52]	; 0x34
 8014e1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e1e:	6013      	str	r3, [r2, #0]
 8014e20:	f7ff ba61 	b.w	80142e6 <_strtod_l+0x86>
 8014e24:	2b65      	cmp	r3, #101	; 0x65
 8014e26:	f04f 0200 	mov.w	r2, #0
 8014e2a:	f43f ab4e 	beq.w	80144ca <_strtod_l+0x26a>
 8014e2e:	2101      	movs	r1, #1
 8014e30:	4614      	mov	r4, r2
 8014e32:	9104      	str	r1, [sp, #16]
 8014e34:	f7ff bacb 	b.w	80143ce <_strtod_l+0x16e>
 8014e38:	ffc00000 	.word	0xffc00000
 8014e3c:	41dfffff 	.word	0x41dfffff
 8014e40:	94a03595 	.word	0x94a03595
 8014e44:	3fcfffff 	.word	0x3fcfffff

08014e48 <_strtod_r>:
 8014e48:	4b05      	ldr	r3, [pc, #20]	; (8014e60 <_strtod_r+0x18>)
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	b410      	push	{r4}
 8014e4e:	6a1b      	ldr	r3, [r3, #32]
 8014e50:	4c04      	ldr	r4, [pc, #16]	; (8014e64 <_strtod_r+0x1c>)
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	bf08      	it	eq
 8014e56:	4623      	moveq	r3, r4
 8014e58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e5c:	f7ff ba00 	b.w	8014260 <_strtod_l>
 8014e60:	2000000c 	.word	0x2000000c
 8014e64:	20000070 	.word	0x20000070

08014e68 <_strtol_l.isra.0>:
 8014e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e6c:	4680      	mov	r8, r0
 8014e6e:	4689      	mov	r9, r1
 8014e70:	4692      	mov	sl, r2
 8014e72:	461e      	mov	r6, r3
 8014e74:	460f      	mov	r7, r1
 8014e76:	463d      	mov	r5, r7
 8014e78:	9808      	ldr	r0, [sp, #32]
 8014e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e7e:	f001 fa0d 	bl	801629c <__locale_ctype_ptr_l>
 8014e82:	4420      	add	r0, r4
 8014e84:	7843      	ldrb	r3, [r0, #1]
 8014e86:	f013 0308 	ands.w	r3, r3, #8
 8014e8a:	d132      	bne.n	8014ef2 <_strtol_l.isra.0+0x8a>
 8014e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8014e8e:	d132      	bne.n	8014ef6 <_strtol_l.isra.0+0x8e>
 8014e90:	787c      	ldrb	r4, [r7, #1]
 8014e92:	1cbd      	adds	r5, r7, #2
 8014e94:	2201      	movs	r2, #1
 8014e96:	2e00      	cmp	r6, #0
 8014e98:	d05d      	beq.n	8014f56 <_strtol_l.isra.0+0xee>
 8014e9a:	2e10      	cmp	r6, #16
 8014e9c:	d109      	bne.n	8014eb2 <_strtol_l.isra.0+0x4a>
 8014e9e:	2c30      	cmp	r4, #48	; 0x30
 8014ea0:	d107      	bne.n	8014eb2 <_strtol_l.isra.0+0x4a>
 8014ea2:	782b      	ldrb	r3, [r5, #0]
 8014ea4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014ea8:	2b58      	cmp	r3, #88	; 0x58
 8014eaa:	d14f      	bne.n	8014f4c <_strtol_l.isra.0+0xe4>
 8014eac:	786c      	ldrb	r4, [r5, #1]
 8014eae:	2610      	movs	r6, #16
 8014eb0:	3502      	adds	r5, #2
 8014eb2:	2a00      	cmp	r2, #0
 8014eb4:	bf14      	ite	ne
 8014eb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014eba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014ebe:	2700      	movs	r7, #0
 8014ec0:	fbb1 fcf6 	udiv	ip, r1, r6
 8014ec4:	4638      	mov	r0, r7
 8014ec6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014eca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014ece:	2b09      	cmp	r3, #9
 8014ed0:	d817      	bhi.n	8014f02 <_strtol_l.isra.0+0x9a>
 8014ed2:	461c      	mov	r4, r3
 8014ed4:	42a6      	cmp	r6, r4
 8014ed6:	dd23      	ble.n	8014f20 <_strtol_l.isra.0+0xb8>
 8014ed8:	1c7b      	adds	r3, r7, #1
 8014eda:	d007      	beq.n	8014eec <_strtol_l.isra.0+0x84>
 8014edc:	4584      	cmp	ip, r0
 8014ede:	d31c      	bcc.n	8014f1a <_strtol_l.isra.0+0xb2>
 8014ee0:	d101      	bne.n	8014ee6 <_strtol_l.isra.0+0x7e>
 8014ee2:	45a6      	cmp	lr, r4
 8014ee4:	db19      	blt.n	8014f1a <_strtol_l.isra.0+0xb2>
 8014ee6:	fb00 4006 	mla	r0, r0, r6, r4
 8014eea:	2701      	movs	r7, #1
 8014eec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ef0:	e7eb      	b.n	8014eca <_strtol_l.isra.0+0x62>
 8014ef2:	462f      	mov	r7, r5
 8014ef4:	e7bf      	b.n	8014e76 <_strtol_l.isra.0+0xe>
 8014ef6:	2c2b      	cmp	r4, #43	; 0x2b
 8014ef8:	bf04      	itt	eq
 8014efa:	1cbd      	addeq	r5, r7, #2
 8014efc:	787c      	ldrbeq	r4, [r7, #1]
 8014efe:	461a      	mov	r2, r3
 8014f00:	e7c9      	b.n	8014e96 <_strtol_l.isra.0+0x2e>
 8014f02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014f06:	2b19      	cmp	r3, #25
 8014f08:	d801      	bhi.n	8014f0e <_strtol_l.isra.0+0xa6>
 8014f0a:	3c37      	subs	r4, #55	; 0x37
 8014f0c:	e7e2      	b.n	8014ed4 <_strtol_l.isra.0+0x6c>
 8014f0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014f12:	2b19      	cmp	r3, #25
 8014f14:	d804      	bhi.n	8014f20 <_strtol_l.isra.0+0xb8>
 8014f16:	3c57      	subs	r4, #87	; 0x57
 8014f18:	e7dc      	b.n	8014ed4 <_strtol_l.isra.0+0x6c>
 8014f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8014f1e:	e7e5      	b.n	8014eec <_strtol_l.isra.0+0x84>
 8014f20:	1c7b      	adds	r3, r7, #1
 8014f22:	d108      	bne.n	8014f36 <_strtol_l.isra.0+0xce>
 8014f24:	2322      	movs	r3, #34	; 0x22
 8014f26:	f8c8 3000 	str.w	r3, [r8]
 8014f2a:	4608      	mov	r0, r1
 8014f2c:	f1ba 0f00 	cmp.w	sl, #0
 8014f30:	d107      	bne.n	8014f42 <_strtol_l.isra.0+0xda>
 8014f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f36:	b102      	cbz	r2, 8014f3a <_strtol_l.isra.0+0xd2>
 8014f38:	4240      	negs	r0, r0
 8014f3a:	f1ba 0f00 	cmp.w	sl, #0
 8014f3e:	d0f8      	beq.n	8014f32 <_strtol_l.isra.0+0xca>
 8014f40:	b10f      	cbz	r7, 8014f46 <_strtol_l.isra.0+0xde>
 8014f42:	f105 39ff 	add.w	r9, r5, #4294967295
 8014f46:	f8ca 9000 	str.w	r9, [sl]
 8014f4a:	e7f2      	b.n	8014f32 <_strtol_l.isra.0+0xca>
 8014f4c:	2430      	movs	r4, #48	; 0x30
 8014f4e:	2e00      	cmp	r6, #0
 8014f50:	d1af      	bne.n	8014eb2 <_strtol_l.isra.0+0x4a>
 8014f52:	2608      	movs	r6, #8
 8014f54:	e7ad      	b.n	8014eb2 <_strtol_l.isra.0+0x4a>
 8014f56:	2c30      	cmp	r4, #48	; 0x30
 8014f58:	d0a3      	beq.n	8014ea2 <_strtol_l.isra.0+0x3a>
 8014f5a:	260a      	movs	r6, #10
 8014f5c:	e7a9      	b.n	8014eb2 <_strtol_l.isra.0+0x4a>
	...

08014f60 <_strtol_r>:
 8014f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014f62:	4c06      	ldr	r4, [pc, #24]	; (8014f7c <_strtol_r+0x1c>)
 8014f64:	4d06      	ldr	r5, [pc, #24]	; (8014f80 <_strtol_r+0x20>)
 8014f66:	6824      	ldr	r4, [r4, #0]
 8014f68:	6a24      	ldr	r4, [r4, #32]
 8014f6a:	2c00      	cmp	r4, #0
 8014f6c:	bf08      	it	eq
 8014f6e:	462c      	moveq	r4, r5
 8014f70:	9400      	str	r4, [sp, #0]
 8014f72:	f7ff ff79 	bl	8014e68 <_strtol_l.isra.0>
 8014f76:	b003      	add	sp, #12
 8014f78:	bd30      	pop	{r4, r5, pc}
 8014f7a:	bf00      	nop
 8014f7c:	2000000c 	.word	0x2000000c
 8014f80:	20000070 	.word	0x20000070

08014f84 <_vsiprintf_r>:
 8014f84:	b500      	push	{lr}
 8014f86:	b09b      	sub	sp, #108	; 0x6c
 8014f88:	9100      	str	r1, [sp, #0]
 8014f8a:	9104      	str	r1, [sp, #16]
 8014f8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014f90:	9105      	str	r1, [sp, #20]
 8014f92:	9102      	str	r1, [sp, #8]
 8014f94:	4905      	ldr	r1, [pc, #20]	; (8014fac <_vsiprintf_r+0x28>)
 8014f96:	9103      	str	r1, [sp, #12]
 8014f98:	4669      	mov	r1, sp
 8014f9a:	f001 fecb 	bl	8016d34 <_svfiprintf_r>
 8014f9e:	9b00      	ldr	r3, [sp, #0]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	701a      	strb	r2, [r3, #0]
 8014fa4:	b01b      	add	sp, #108	; 0x6c
 8014fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8014faa:	bf00      	nop
 8014fac:	ffff0208 	.word	0xffff0208

08014fb0 <vsiprintf>:
 8014fb0:	4613      	mov	r3, r2
 8014fb2:	460a      	mov	r2, r1
 8014fb4:	4601      	mov	r1, r0
 8014fb6:	4802      	ldr	r0, [pc, #8]	; (8014fc0 <vsiprintf+0x10>)
 8014fb8:	6800      	ldr	r0, [r0, #0]
 8014fba:	f7ff bfe3 	b.w	8014f84 <_vsiprintf_r>
 8014fbe:	bf00      	nop
 8014fc0:	2000000c 	.word	0x2000000c

08014fc4 <quorem>:
 8014fc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fc8:	6903      	ldr	r3, [r0, #16]
 8014fca:	690c      	ldr	r4, [r1, #16]
 8014fcc:	42a3      	cmp	r3, r4
 8014fce:	4680      	mov	r8, r0
 8014fd0:	f2c0 8082 	blt.w	80150d8 <quorem+0x114>
 8014fd4:	3c01      	subs	r4, #1
 8014fd6:	f101 0714 	add.w	r7, r1, #20
 8014fda:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014fde:	f100 0614 	add.w	r6, r0, #20
 8014fe2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014fe6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014fea:	eb06 030c 	add.w	r3, r6, ip
 8014fee:	3501      	adds	r5, #1
 8014ff0:	eb07 090c 	add.w	r9, r7, ip
 8014ff4:	9301      	str	r3, [sp, #4]
 8014ff6:	fbb0 f5f5 	udiv	r5, r0, r5
 8014ffa:	b395      	cbz	r5, 8015062 <quorem+0x9e>
 8014ffc:	f04f 0a00 	mov.w	sl, #0
 8015000:	4638      	mov	r0, r7
 8015002:	46b6      	mov	lr, r6
 8015004:	46d3      	mov	fp, sl
 8015006:	f850 2b04 	ldr.w	r2, [r0], #4
 801500a:	b293      	uxth	r3, r2
 801500c:	fb05 a303 	mla	r3, r5, r3, sl
 8015010:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015014:	b29b      	uxth	r3, r3
 8015016:	ebab 0303 	sub.w	r3, fp, r3
 801501a:	0c12      	lsrs	r2, r2, #16
 801501c:	f8de b000 	ldr.w	fp, [lr]
 8015020:	fb05 a202 	mla	r2, r5, r2, sl
 8015024:	fa13 f38b 	uxtah	r3, r3, fp
 8015028:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801502c:	fa1f fb82 	uxth.w	fp, r2
 8015030:	f8de 2000 	ldr.w	r2, [lr]
 8015034:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015038:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801503c:	b29b      	uxth	r3, r3
 801503e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015042:	4581      	cmp	r9, r0
 8015044:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015048:	f84e 3b04 	str.w	r3, [lr], #4
 801504c:	d2db      	bcs.n	8015006 <quorem+0x42>
 801504e:	f856 300c 	ldr.w	r3, [r6, ip]
 8015052:	b933      	cbnz	r3, 8015062 <quorem+0x9e>
 8015054:	9b01      	ldr	r3, [sp, #4]
 8015056:	3b04      	subs	r3, #4
 8015058:	429e      	cmp	r6, r3
 801505a:	461a      	mov	r2, r3
 801505c:	d330      	bcc.n	80150c0 <quorem+0xfc>
 801505e:	f8c8 4010 	str.w	r4, [r8, #16]
 8015062:	4640      	mov	r0, r8
 8015064:	f001 fbaa 	bl	80167bc <__mcmp>
 8015068:	2800      	cmp	r0, #0
 801506a:	db25      	blt.n	80150b8 <quorem+0xf4>
 801506c:	3501      	adds	r5, #1
 801506e:	4630      	mov	r0, r6
 8015070:	f04f 0c00 	mov.w	ip, #0
 8015074:	f857 2b04 	ldr.w	r2, [r7], #4
 8015078:	f8d0 e000 	ldr.w	lr, [r0]
 801507c:	b293      	uxth	r3, r2
 801507e:	ebac 0303 	sub.w	r3, ip, r3
 8015082:	0c12      	lsrs	r2, r2, #16
 8015084:	fa13 f38e 	uxtah	r3, r3, lr
 8015088:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801508c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015090:	b29b      	uxth	r3, r3
 8015092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015096:	45b9      	cmp	r9, r7
 8015098:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801509c:	f840 3b04 	str.w	r3, [r0], #4
 80150a0:	d2e8      	bcs.n	8015074 <quorem+0xb0>
 80150a2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80150a6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80150aa:	b92a      	cbnz	r2, 80150b8 <quorem+0xf4>
 80150ac:	3b04      	subs	r3, #4
 80150ae:	429e      	cmp	r6, r3
 80150b0:	461a      	mov	r2, r3
 80150b2:	d30b      	bcc.n	80150cc <quorem+0x108>
 80150b4:	f8c8 4010 	str.w	r4, [r8, #16]
 80150b8:	4628      	mov	r0, r5
 80150ba:	b003      	add	sp, #12
 80150bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150c0:	6812      	ldr	r2, [r2, #0]
 80150c2:	3b04      	subs	r3, #4
 80150c4:	2a00      	cmp	r2, #0
 80150c6:	d1ca      	bne.n	801505e <quorem+0x9a>
 80150c8:	3c01      	subs	r4, #1
 80150ca:	e7c5      	b.n	8015058 <quorem+0x94>
 80150cc:	6812      	ldr	r2, [r2, #0]
 80150ce:	3b04      	subs	r3, #4
 80150d0:	2a00      	cmp	r2, #0
 80150d2:	d1ef      	bne.n	80150b4 <quorem+0xf0>
 80150d4:	3c01      	subs	r4, #1
 80150d6:	e7ea      	b.n	80150ae <quorem+0xea>
 80150d8:	2000      	movs	r0, #0
 80150da:	e7ee      	b.n	80150ba <quorem+0xf6>
 80150dc:	0000      	movs	r0, r0
	...

080150e0 <_dtoa_r>:
 80150e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150e4:	ec57 6b10 	vmov	r6, r7, d0
 80150e8:	b097      	sub	sp, #92	; 0x5c
 80150ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80150ec:	9106      	str	r1, [sp, #24]
 80150ee:	4604      	mov	r4, r0
 80150f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80150f2:	9312      	str	r3, [sp, #72]	; 0x48
 80150f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80150f8:	e9cd 6700 	strd	r6, r7, [sp]
 80150fc:	b93d      	cbnz	r5, 801510e <_dtoa_r+0x2e>
 80150fe:	2010      	movs	r0, #16
 8015100:	f001 f8ee 	bl	80162e0 <malloc>
 8015104:	6260      	str	r0, [r4, #36]	; 0x24
 8015106:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801510a:	6005      	str	r5, [r0, #0]
 801510c:	60c5      	str	r5, [r0, #12]
 801510e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015110:	6819      	ldr	r1, [r3, #0]
 8015112:	b151      	cbz	r1, 801512a <_dtoa_r+0x4a>
 8015114:	685a      	ldr	r2, [r3, #4]
 8015116:	604a      	str	r2, [r1, #4]
 8015118:	2301      	movs	r3, #1
 801511a:	4093      	lsls	r3, r2
 801511c:	608b      	str	r3, [r1, #8]
 801511e:	4620      	mov	r0, r4
 8015120:	f001 f92c 	bl	801637c <_Bfree>
 8015124:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015126:	2200      	movs	r2, #0
 8015128:	601a      	str	r2, [r3, #0]
 801512a:	1e3b      	subs	r3, r7, #0
 801512c:	bfbb      	ittet	lt
 801512e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015132:	9301      	strlt	r3, [sp, #4]
 8015134:	2300      	movge	r3, #0
 8015136:	2201      	movlt	r2, #1
 8015138:	bfac      	ite	ge
 801513a:	f8c8 3000 	strge.w	r3, [r8]
 801513e:	f8c8 2000 	strlt.w	r2, [r8]
 8015142:	4baf      	ldr	r3, [pc, #700]	; (8015400 <_dtoa_r+0x320>)
 8015144:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015148:	ea33 0308 	bics.w	r3, r3, r8
 801514c:	d114      	bne.n	8015178 <_dtoa_r+0x98>
 801514e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015150:	f242 730f 	movw	r3, #9999	; 0x270f
 8015154:	6013      	str	r3, [r2, #0]
 8015156:	9b00      	ldr	r3, [sp, #0]
 8015158:	b923      	cbnz	r3, 8015164 <_dtoa_r+0x84>
 801515a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801515e:	2800      	cmp	r0, #0
 8015160:	f000 8542 	beq.w	8015be8 <_dtoa_r+0xb08>
 8015164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015166:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015414 <_dtoa_r+0x334>
 801516a:	2b00      	cmp	r3, #0
 801516c:	f000 8544 	beq.w	8015bf8 <_dtoa_r+0xb18>
 8015170:	f10b 0303 	add.w	r3, fp, #3
 8015174:	f000 bd3e 	b.w	8015bf4 <_dtoa_r+0xb14>
 8015178:	e9dd 6700 	ldrd	r6, r7, [sp]
 801517c:	2200      	movs	r2, #0
 801517e:	2300      	movs	r3, #0
 8015180:	4630      	mov	r0, r6
 8015182:	4639      	mov	r1, r7
 8015184:	f7eb fcb8 	bl	8000af8 <__aeabi_dcmpeq>
 8015188:	4681      	mov	r9, r0
 801518a:	b168      	cbz	r0, 80151a8 <_dtoa_r+0xc8>
 801518c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801518e:	2301      	movs	r3, #1
 8015190:	6013      	str	r3, [r2, #0]
 8015192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015194:	2b00      	cmp	r3, #0
 8015196:	f000 8524 	beq.w	8015be2 <_dtoa_r+0xb02>
 801519a:	4b9a      	ldr	r3, [pc, #616]	; (8015404 <_dtoa_r+0x324>)
 801519c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801519e:	f103 3bff 	add.w	fp, r3, #4294967295
 80151a2:	6013      	str	r3, [r2, #0]
 80151a4:	f000 bd28 	b.w	8015bf8 <_dtoa_r+0xb18>
 80151a8:	aa14      	add	r2, sp, #80	; 0x50
 80151aa:	a915      	add	r1, sp, #84	; 0x54
 80151ac:	ec47 6b10 	vmov	d0, r6, r7
 80151b0:	4620      	mov	r0, r4
 80151b2:	f001 fbf1 	bl	8016998 <__d2b>
 80151b6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80151ba:	9004      	str	r0, [sp, #16]
 80151bc:	2d00      	cmp	r5, #0
 80151be:	d07c      	beq.n	80152ba <_dtoa_r+0x1da>
 80151c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80151c4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80151c8:	46b2      	mov	sl, r6
 80151ca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80151ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80151d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80151d6:	2200      	movs	r2, #0
 80151d8:	4b8b      	ldr	r3, [pc, #556]	; (8015408 <_dtoa_r+0x328>)
 80151da:	4650      	mov	r0, sl
 80151dc:	4659      	mov	r1, fp
 80151de:	f7eb f86b 	bl	80002b8 <__aeabi_dsub>
 80151e2:	a381      	add	r3, pc, #516	; (adr r3, 80153e8 <_dtoa_r+0x308>)
 80151e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151e8:	f7eb fa1e 	bl	8000628 <__aeabi_dmul>
 80151ec:	a380      	add	r3, pc, #512	; (adr r3, 80153f0 <_dtoa_r+0x310>)
 80151ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f2:	f7eb f863 	bl	80002bc <__adddf3>
 80151f6:	4606      	mov	r6, r0
 80151f8:	4628      	mov	r0, r5
 80151fa:	460f      	mov	r7, r1
 80151fc:	f7eb f9aa 	bl	8000554 <__aeabi_i2d>
 8015200:	a37d      	add	r3, pc, #500	; (adr r3, 80153f8 <_dtoa_r+0x318>)
 8015202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015206:	f7eb fa0f 	bl	8000628 <__aeabi_dmul>
 801520a:	4602      	mov	r2, r0
 801520c:	460b      	mov	r3, r1
 801520e:	4630      	mov	r0, r6
 8015210:	4639      	mov	r1, r7
 8015212:	f7eb f853 	bl	80002bc <__adddf3>
 8015216:	4606      	mov	r6, r0
 8015218:	460f      	mov	r7, r1
 801521a:	f7eb fcb5 	bl	8000b88 <__aeabi_d2iz>
 801521e:	2200      	movs	r2, #0
 8015220:	4682      	mov	sl, r0
 8015222:	2300      	movs	r3, #0
 8015224:	4630      	mov	r0, r6
 8015226:	4639      	mov	r1, r7
 8015228:	f7eb fc70 	bl	8000b0c <__aeabi_dcmplt>
 801522c:	b148      	cbz	r0, 8015242 <_dtoa_r+0x162>
 801522e:	4650      	mov	r0, sl
 8015230:	f7eb f990 	bl	8000554 <__aeabi_i2d>
 8015234:	4632      	mov	r2, r6
 8015236:	463b      	mov	r3, r7
 8015238:	f7eb fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 801523c:	b908      	cbnz	r0, 8015242 <_dtoa_r+0x162>
 801523e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015242:	f1ba 0f16 	cmp.w	sl, #22
 8015246:	d859      	bhi.n	80152fc <_dtoa_r+0x21c>
 8015248:	4970      	ldr	r1, [pc, #448]	; (801540c <_dtoa_r+0x32c>)
 801524a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801524e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015256:	f7eb fc77 	bl	8000b48 <__aeabi_dcmpgt>
 801525a:	2800      	cmp	r0, #0
 801525c:	d050      	beq.n	8015300 <_dtoa_r+0x220>
 801525e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015262:	2300      	movs	r3, #0
 8015264:	930f      	str	r3, [sp, #60]	; 0x3c
 8015266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015268:	1b5d      	subs	r5, r3, r5
 801526a:	f1b5 0801 	subs.w	r8, r5, #1
 801526e:	bf49      	itett	mi
 8015270:	f1c5 0301 	rsbmi	r3, r5, #1
 8015274:	2300      	movpl	r3, #0
 8015276:	9305      	strmi	r3, [sp, #20]
 8015278:	f04f 0800 	movmi.w	r8, #0
 801527c:	bf58      	it	pl
 801527e:	9305      	strpl	r3, [sp, #20]
 8015280:	f1ba 0f00 	cmp.w	sl, #0
 8015284:	db3e      	blt.n	8015304 <_dtoa_r+0x224>
 8015286:	2300      	movs	r3, #0
 8015288:	44d0      	add	r8, sl
 801528a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801528e:	9307      	str	r3, [sp, #28]
 8015290:	9b06      	ldr	r3, [sp, #24]
 8015292:	2b09      	cmp	r3, #9
 8015294:	f200 8090 	bhi.w	80153b8 <_dtoa_r+0x2d8>
 8015298:	2b05      	cmp	r3, #5
 801529a:	bfc4      	itt	gt
 801529c:	3b04      	subgt	r3, #4
 801529e:	9306      	strgt	r3, [sp, #24]
 80152a0:	9b06      	ldr	r3, [sp, #24]
 80152a2:	f1a3 0302 	sub.w	r3, r3, #2
 80152a6:	bfcc      	ite	gt
 80152a8:	2500      	movgt	r5, #0
 80152aa:	2501      	movle	r5, #1
 80152ac:	2b03      	cmp	r3, #3
 80152ae:	f200 808f 	bhi.w	80153d0 <_dtoa_r+0x2f0>
 80152b2:	e8df f003 	tbb	[pc, r3]
 80152b6:	7f7d      	.short	0x7f7d
 80152b8:	7131      	.short	0x7131
 80152ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80152be:	441d      	add	r5, r3
 80152c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80152c4:	2820      	cmp	r0, #32
 80152c6:	dd13      	ble.n	80152f0 <_dtoa_r+0x210>
 80152c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80152cc:	9b00      	ldr	r3, [sp, #0]
 80152ce:	fa08 f800 	lsl.w	r8, r8, r0
 80152d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80152d6:	fa23 f000 	lsr.w	r0, r3, r0
 80152da:	ea48 0000 	orr.w	r0, r8, r0
 80152de:	f7eb f929 	bl	8000534 <__aeabi_ui2d>
 80152e2:	2301      	movs	r3, #1
 80152e4:	4682      	mov	sl, r0
 80152e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80152ea:	3d01      	subs	r5, #1
 80152ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80152ee:	e772      	b.n	80151d6 <_dtoa_r+0xf6>
 80152f0:	9b00      	ldr	r3, [sp, #0]
 80152f2:	f1c0 0020 	rsb	r0, r0, #32
 80152f6:	fa03 f000 	lsl.w	r0, r3, r0
 80152fa:	e7f0      	b.n	80152de <_dtoa_r+0x1fe>
 80152fc:	2301      	movs	r3, #1
 80152fe:	e7b1      	b.n	8015264 <_dtoa_r+0x184>
 8015300:	900f      	str	r0, [sp, #60]	; 0x3c
 8015302:	e7b0      	b.n	8015266 <_dtoa_r+0x186>
 8015304:	9b05      	ldr	r3, [sp, #20]
 8015306:	eba3 030a 	sub.w	r3, r3, sl
 801530a:	9305      	str	r3, [sp, #20]
 801530c:	f1ca 0300 	rsb	r3, sl, #0
 8015310:	9307      	str	r3, [sp, #28]
 8015312:	2300      	movs	r3, #0
 8015314:	930e      	str	r3, [sp, #56]	; 0x38
 8015316:	e7bb      	b.n	8015290 <_dtoa_r+0x1b0>
 8015318:	2301      	movs	r3, #1
 801531a:	930a      	str	r3, [sp, #40]	; 0x28
 801531c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801531e:	2b00      	cmp	r3, #0
 8015320:	dd59      	ble.n	80153d6 <_dtoa_r+0x2f6>
 8015322:	9302      	str	r3, [sp, #8]
 8015324:	4699      	mov	r9, r3
 8015326:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015328:	2200      	movs	r2, #0
 801532a:	6072      	str	r2, [r6, #4]
 801532c:	2204      	movs	r2, #4
 801532e:	f102 0014 	add.w	r0, r2, #20
 8015332:	4298      	cmp	r0, r3
 8015334:	6871      	ldr	r1, [r6, #4]
 8015336:	d953      	bls.n	80153e0 <_dtoa_r+0x300>
 8015338:	4620      	mov	r0, r4
 801533a:	f000 ffeb 	bl	8016314 <_Balloc>
 801533e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015340:	6030      	str	r0, [r6, #0]
 8015342:	f1b9 0f0e 	cmp.w	r9, #14
 8015346:	f8d3 b000 	ldr.w	fp, [r3]
 801534a:	f200 80e6 	bhi.w	801551a <_dtoa_r+0x43a>
 801534e:	2d00      	cmp	r5, #0
 8015350:	f000 80e3 	beq.w	801551a <_dtoa_r+0x43a>
 8015354:	ed9d 7b00 	vldr	d7, [sp]
 8015358:	f1ba 0f00 	cmp.w	sl, #0
 801535c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015360:	dd74      	ble.n	801544c <_dtoa_r+0x36c>
 8015362:	4a2a      	ldr	r2, [pc, #168]	; (801540c <_dtoa_r+0x32c>)
 8015364:	f00a 030f 	and.w	r3, sl, #15
 8015368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801536c:	ed93 7b00 	vldr	d7, [r3]
 8015370:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015374:	06f0      	lsls	r0, r6, #27
 8015376:	ed8d 7b08 	vstr	d7, [sp, #32]
 801537a:	d565      	bpl.n	8015448 <_dtoa_r+0x368>
 801537c:	4b24      	ldr	r3, [pc, #144]	; (8015410 <_dtoa_r+0x330>)
 801537e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015382:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015386:	f7eb fa79 	bl	800087c <__aeabi_ddiv>
 801538a:	e9cd 0100 	strd	r0, r1, [sp]
 801538e:	f006 060f 	and.w	r6, r6, #15
 8015392:	2503      	movs	r5, #3
 8015394:	4f1e      	ldr	r7, [pc, #120]	; (8015410 <_dtoa_r+0x330>)
 8015396:	e04c      	b.n	8015432 <_dtoa_r+0x352>
 8015398:	2301      	movs	r3, #1
 801539a:	930a      	str	r3, [sp, #40]	; 0x28
 801539c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801539e:	4453      	add	r3, sl
 80153a0:	f103 0901 	add.w	r9, r3, #1
 80153a4:	9302      	str	r3, [sp, #8]
 80153a6:	464b      	mov	r3, r9
 80153a8:	2b01      	cmp	r3, #1
 80153aa:	bfb8      	it	lt
 80153ac:	2301      	movlt	r3, #1
 80153ae:	e7ba      	b.n	8015326 <_dtoa_r+0x246>
 80153b0:	2300      	movs	r3, #0
 80153b2:	e7b2      	b.n	801531a <_dtoa_r+0x23a>
 80153b4:	2300      	movs	r3, #0
 80153b6:	e7f0      	b.n	801539a <_dtoa_r+0x2ba>
 80153b8:	2501      	movs	r5, #1
 80153ba:	2300      	movs	r3, #0
 80153bc:	9306      	str	r3, [sp, #24]
 80153be:	950a      	str	r5, [sp, #40]	; 0x28
 80153c0:	f04f 33ff 	mov.w	r3, #4294967295
 80153c4:	9302      	str	r3, [sp, #8]
 80153c6:	4699      	mov	r9, r3
 80153c8:	2200      	movs	r2, #0
 80153ca:	2312      	movs	r3, #18
 80153cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80153ce:	e7aa      	b.n	8015326 <_dtoa_r+0x246>
 80153d0:	2301      	movs	r3, #1
 80153d2:	930a      	str	r3, [sp, #40]	; 0x28
 80153d4:	e7f4      	b.n	80153c0 <_dtoa_r+0x2e0>
 80153d6:	2301      	movs	r3, #1
 80153d8:	9302      	str	r3, [sp, #8]
 80153da:	4699      	mov	r9, r3
 80153dc:	461a      	mov	r2, r3
 80153de:	e7f5      	b.n	80153cc <_dtoa_r+0x2ec>
 80153e0:	3101      	adds	r1, #1
 80153e2:	6071      	str	r1, [r6, #4]
 80153e4:	0052      	lsls	r2, r2, #1
 80153e6:	e7a2      	b.n	801532e <_dtoa_r+0x24e>
 80153e8:	636f4361 	.word	0x636f4361
 80153ec:	3fd287a7 	.word	0x3fd287a7
 80153f0:	8b60c8b3 	.word	0x8b60c8b3
 80153f4:	3fc68a28 	.word	0x3fc68a28
 80153f8:	509f79fb 	.word	0x509f79fb
 80153fc:	3fd34413 	.word	0x3fd34413
 8015400:	7ff00000 	.word	0x7ff00000
 8015404:	0801821c 	.word	0x0801821c
 8015408:	3ff80000 	.word	0x3ff80000
 801540c:	08018120 	.word	0x08018120
 8015410:	080180f8 	.word	0x080180f8
 8015414:	08018081 	.word	0x08018081
 8015418:	07f1      	lsls	r1, r6, #31
 801541a:	d508      	bpl.n	801542e <_dtoa_r+0x34e>
 801541c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015424:	f7eb f900 	bl	8000628 <__aeabi_dmul>
 8015428:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801542c:	3501      	adds	r5, #1
 801542e:	1076      	asrs	r6, r6, #1
 8015430:	3708      	adds	r7, #8
 8015432:	2e00      	cmp	r6, #0
 8015434:	d1f0      	bne.n	8015418 <_dtoa_r+0x338>
 8015436:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801543a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801543e:	f7eb fa1d 	bl	800087c <__aeabi_ddiv>
 8015442:	e9cd 0100 	strd	r0, r1, [sp]
 8015446:	e01a      	b.n	801547e <_dtoa_r+0x39e>
 8015448:	2502      	movs	r5, #2
 801544a:	e7a3      	b.n	8015394 <_dtoa_r+0x2b4>
 801544c:	f000 80a0 	beq.w	8015590 <_dtoa_r+0x4b0>
 8015450:	f1ca 0600 	rsb	r6, sl, #0
 8015454:	4b9f      	ldr	r3, [pc, #636]	; (80156d4 <_dtoa_r+0x5f4>)
 8015456:	4fa0      	ldr	r7, [pc, #640]	; (80156d8 <_dtoa_r+0x5f8>)
 8015458:	f006 020f 	and.w	r2, r6, #15
 801545c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015464:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015468:	f7eb f8de 	bl	8000628 <__aeabi_dmul>
 801546c:	e9cd 0100 	strd	r0, r1, [sp]
 8015470:	1136      	asrs	r6, r6, #4
 8015472:	2300      	movs	r3, #0
 8015474:	2502      	movs	r5, #2
 8015476:	2e00      	cmp	r6, #0
 8015478:	d17f      	bne.n	801557a <_dtoa_r+0x49a>
 801547a:	2b00      	cmp	r3, #0
 801547c:	d1e1      	bne.n	8015442 <_dtoa_r+0x362>
 801547e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 8087 	beq.w	8015594 <_dtoa_r+0x4b4>
 8015486:	e9dd 6700 	ldrd	r6, r7, [sp]
 801548a:	2200      	movs	r2, #0
 801548c:	4b93      	ldr	r3, [pc, #588]	; (80156dc <_dtoa_r+0x5fc>)
 801548e:	4630      	mov	r0, r6
 8015490:	4639      	mov	r1, r7
 8015492:	f7eb fb3b 	bl	8000b0c <__aeabi_dcmplt>
 8015496:	2800      	cmp	r0, #0
 8015498:	d07c      	beq.n	8015594 <_dtoa_r+0x4b4>
 801549a:	f1b9 0f00 	cmp.w	r9, #0
 801549e:	d079      	beq.n	8015594 <_dtoa_r+0x4b4>
 80154a0:	9b02      	ldr	r3, [sp, #8]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	dd35      	ble.n	8015512 <_dtoa_r+0x432>
 80154a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80154aa:	9308      	str	r3, [sp, #32]
 80154ac:	4639      	mov	r1, r7
 80154ae:	2200      	movs	r2, #0
 80154b0:	4b8b      	ldr	r3, [pc, #556]	; (80156e0 <_dtoa_r+0x600>)
 80154b2:	4630      	mov	r0, r6
 80154b4:	f7eb f8b8 	bl	8000628 <__aeabi_dmul>
 80154b8:	e9cd 0100 	strd	r0, r1, [sp]
 80154bc:	9f02      	ldr	r7, [sp, #8]
 80154be:	3501      	adds	r5, #1
 80154c0:	4628      	mov	r0, r5
 80154c2:	f7eb f847 	bl	8000554 <__aeabi_i2d>
 80154c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154ca:	f7eb f8ad 	bl	8000628 <__aeabi_dmul>
 80154ce:	2200      	movs	r2, #0
 80154d0:	4b84      	ldr	r3, [pc, #528]	; (80156e4 <_dtoa_r+0x604>)
 80154d2:	f7ea fef3 	bl	80002bc <__adddf3>
 80154d6:	4605      	mov	r5, r0
 80154d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80154dc:	2f00      	cmp	r7, #0
 80154de:	d15d      	bne.n	801559c <_dtoa_r+0x4bc>
 80154e0:	2200      	movs	r2, #0
 80154e2:	4b81      	ldr	r3, [pc, #516]	; (80156e8 <_dtoa_r+0x608>)
 80154e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154e8:	f7ea fee6 	bl	80002b8 <__aeabi_dsub>
 80154ec:	462a      	mov	r2, r5
 80154ee:	4633      	mov	r3, r6
 80154f0:	e9cd 0100 	strd	r0, r1, [sp]
 80154f4:	f7eb fb28 	bl	8000b48 <__aeabi_dcmpgt>
 80154f8:	2800      	cmp	r0, #0
 80154fa:	f040 8288 	bne.w	8015a0e <_dtoa_r+0x92e>
 80154fe:	462a      	mov	r2, r5
 8015500:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015508:	f7eb fb00 	bl	8000b0c <__aeabi_dcmplt>
 801550c:	2800      	cmp	r0, #0
 801550e:	f040 827c 	bne.w	8015a0a <_dtoa_r+0x92a>
 8015512:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015516:	e9cd 2300 	strd	r2, r3, [sp]
 801551a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801551c:	2b00      	cmp	r3, #0
 801551e:	f2c0 8150 	blt.w	80157c2 <_dtoa_r+0x6e2>
 8015522:	f1ba 0f0e 	cmp.w	sl, #14
 8015526:	f300 814c 	bgt.w	80157c2 <_dtoa_r+0x6e2>
 801552a:	4b6a      	ldr	r3, [pc, #424]	; (80156d4 <_dtoa_r+0x5f4>)
 801552c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015530:	ed93 7b00 	vldr	d7, [r3]
 8015534:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015536:	2b00      	cmp	r3, #0
 8015538:	ed8d 7b02 	vstr	d7, [sp, #8]
 801553c:	f280 80d8 	bge.w	80156f0 <_dtoa_r+0x610>
 8015540:	f1b9 0f00 	cmp.w	r9, #0
 8015544:	f300 80d4 	bgt.w	80156f0 <_dtoa_r+0x610>
 8015548:	f040 825e 	bne.w	8015a08 <_dtoa_r+0x928>
 801554c:	2200      	movs	r2, #0
 801554e:	4b66      	ldr	r3, [pc, #408]	; (80156e8 <_dtoa_r+0x608>)
 8015550:	ec51 0b17 	vmov	r0, r1, d7
 8015554:	f7eb f868 	bl	8000628 <__aeabi_dmul>
 8015558:	e9dd 2300 	ldrd	r2, r3, [sp]
 801555c:	f7eb faea 	bl	8000b34 <__aeabi_dcmpge>
 8015560:	464f      	mov	r7, r9
 8015562:	464e      	mov	r6, r9
 8015564:	2800      	cmp	r0, #0
 8015566:	f040 8234 	bne.w	80159d2 <_dtoa_r+0x8f2>
 801556a:	2331      	movs	r3, #49	; 0x31
 801556c:	f10b 0501 	add.w	r5, fp, #1
 8015570:	f88b 3000 	strb.w	r3, [fp]
 8015574:	f10a 0a01 	add.w	sl, sl, #1
 8015578:	e22f      	b.n	80159da <_dtoa_r+0x8fa>
 801557a:	07f2      	lsls	r2, r6, #31
 801557c:	d505      	bpl.n	801558a <_dtoa_r+0x4aa>
 801557e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015582:	f7eb f851 	bl	8000628 <__aeabi_dmul>
 8015586:	3501      	adds	r5, #1
 8015588:	2301      	movs	r3, #1
 801558a:	1076      	asrs	r6, r6, #1
 801558c:	3708      	adds	r7, #8
 801558e:	e772      	b.n	8015476 <_dtoa_r+0x396>
 8015590:	2502      	movs	r5, #2
 8015592:	e774      	b.n	801547e <_dtoa_r+0x39e>
 8015594:	f8cd a020 	str.w	sl, [sp, #32]
 8015598:	464f      	mov	r7, r9
 801559a:	e791      	b.n	80154c0 <_dtoa_r+0x3e0>
 801559c:	4b4d      	ldr	r3, [pc, #308]	; (80156d4 <_dtoa_r+0x5f4>)
 801559e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80155a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80155a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d047      	beq.n	801563c <_dtoa_r+0x55c>
 80155ac:	4602      	mov	r2, r0
 80155ae:	460b      	mov	r3, r1
 80155b0:	2000      	movs	r0, #0
 80155b2:	494e      	ldr	r1, [pc, #312]	; (80156ec <_dtoa_r+0x60c>)
 80155b4:	f7eb f962 	bl	800087c <__aeabi_ddiv>
 80155b8:	462a      	mov	r2, r5
 80155ba:	4633      	mov	r3, r6
 80155bc:	f7ea fe7c 	bl	80002b8 <__aeabi_dsub>
 80155c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80155c4:	465d      	mov	r5, fp
 80155c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155ca:	f7eb fadd 	bl	8000b88 <__aeabi_d2iz>
 80155ce:	4606      	mov	r6, r0
 80155d0:	f7ea ffc0 	bl	8000554 <__aeabi_i2d>
 80155d4:	4602      	mov	r2, r0
 80155d6:	460b      	mov	r3, r1
 80155d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155dc:	f7ea fe6c 	bl	80002b8 <__aeabi_dsub>
 80155e0:	3630      	adds	r6, #48	; 0x30
 80155e2:	f805 6b01 	strb.w	r6, [r5], #1
 80155e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80155ea:	e9cd 0100 	strd	r0, r1, [sp]
 80155ee:	f7eb fa8d 	bl	8000b0c <__aeabi_dcmplt>
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d163      	bne.n	80156be <_dtoa_r+0x5de>
 80155f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155fa:	2000      	movs	r0, #0
 80155fc:	4937      	ldr	r1, [pc, #220]	; (80156dc <_dtoa_r+0x5fc>)
 80155fe:	f7ea fe5b 	bl	80002b8 <__aeabi_dsub>
 8015602:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015606:	f7eb fa81 	bl	8000b0c <__aeabi_dcmplt>
 801560a:	2800      	cmp	r0, #0
 801560c:	f040 80b7 	bne.w	801577e <_dtoa_r+0x69e>
 8015610:	eba5 030b 	sub.w	r3, r5, fp
 8015614:	429f      	cmp	r7, r3
 8015616:	f77f af7c 	ble.w	8015512 <_dtoa_r+0x432>
 801561a:	2200      	movs	r2, #0
 801561c:	4b30      	ldr	r3, [pc, #192]	; (80156e0 <_dtoa_r+0x600>)
 801561e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015622:	f7eb f801 	bl	8000628 <__aeabi_dmul>
 8015626:	2200      	movs	r2, #0
 8015628:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801562c:	4b2c      	ldr	r3, [pc, #176]	; (80156e0 <_dtoa_r+0x600>)
 801562e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015632:	f7ea fff9 	bl	8000628 <__aeabi_dmul>
 8015636:	e9cd 0100 	strd	r0, r1, [sp]
 801563a:	e7c4      	b.n	80155c6 <_dtoa_r+0x4e6>
 801563c:	462a      	mov	r2, r5
 801563e:	4633      	mov	r3, r6
 8015640:	f7ea fff2 	bl	8000628 <__aeabi_dmul>
 8015644:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015648:	eb0b 0507 	add.w	r5, fp, r7
 801564c:	465e      	mov	r6, fp
 801564e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015652:	f7eb fa99 	bl	8000b88 <__aeabi_d2iz>
 8015656:	4607      	mov	r7, r0
 8015658:	f7ea ff7c 	bl	8000554 <__aeabi_i2d>
 801565c:	3730      	adds	r7, #48	; 0x30
 801565e:	4602      	mov	r2, r0
 8015660:	460b      	mov	r3, r1
 8015662:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015666:	f7ea fe27 	bl	80002b8 <__aeabi_dsub>
 801566a:	f806 7b01 	strb.w	r7, [r6], #1
 801566e:	42ae      	cmp	r6, r5
 8015670:	e9cd 0100 	strd	r0, r1, [sp]
 8015674:	f04f 0200 	mov.w	r2, #0
 8015678:	d126      	bne.n	80156c8 <_dtoa_r+0x5e8>
 801567a:	4b1c      	ldr	r3, [pc, #112]	; (80156ec <_dtoa_r+0x60c>)
 801567c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015680:	f7ea fe1c 	bl	80002bc <__adddf3>
 8015684:	4602      	mov	r2, r0
 8015686:	460b      	mov	r3, r1
 8015688:	e9dd 0100 	ldrd	r0, r1, [sp]
 801568c:	f7eb fa5c 	bl	8000b48 <__aeabi_dcmpgt>
 8015690:	2800      	cmp	r0, #0
 8015692:	d174      	bne.n	801577e <_dtoa_r+0x69e>
 8015694:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015698:	2000      	movs	r0, #0
 801569a:	4914      	ldr	r1, [pc, #80]	; (80156ec <_dtoa_r+0x60c>)
 801569c:	f7ea fe0c 	bl	80002b8 <__aeabi_dsub>
 80156a0:	4602      	mov	r2, r0
 80156a2:	460b      	mov	r3, r1
 80156a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156a8:	f7eb fa30 	bl	8000b0c <__aeabi_dcmplt>
 80156ac:	2800      	cmp	r0, #0
 80156ae:	f43f af30 	beq.w	8015512 <_dtoa_r+0x432>
 80156b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80156b6:	2b30      	cmp	r3, #48	; 0x30
 80156b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80156bc:	d002      	beq.n	80156c4 <_dtoa_r+0x5e4>
 80156be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80156c2:	e04a      	b.n	801575a <_dtoa_r+0x67a>
 80156c4:	4615      	mov	r5, r2
 80156c6:	e7f4      	b.n	80156b2 <_dtoa_r+0x5d2>
 80156c8:	4b05      	ldr	r3, [pc, #20]	; (80156e0 <_dtoa_r+0x600>)
 80156ca:	f7ea ffad 	bl	8000628 <__aeabi_dmul>
 80156ce:	e9cd 0100 	strd	r0, r1, [sp]
 80156d2:	e7bc      	b.n	801564e <_dtoa_r+0x56e>
 80156d4:	08018120 	.word	0x08018120
 80156d8:	080180f8 	.word	0x080180f8
 80156dc:	3ff00000 	.word	0x3ff00000
 80156e0:	40240000 	.word	0x40240000
 80156e4:	401c0000 	.word	0x401c0000
 80156e8:	40140000 	.word	0x40140000
 80156ec:	3fe00000 	.word	0x3fe00000
 80156f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80156f4:	465d      	mov	r5, fp
 80156f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80156fa:	4630      	mov	r0, r6
 80156fc:	4639      	mov	r1, r7
 80156fe:	f7eb f8bd 	bl	800087c <__aeabi_ddiv>
 8015702:	f7eb fa41 	bl	8000b88 <__aeabi_d2iz>
 8015706:	4680      	mov	r8, r0
 8015708:	f7ea ff24 	bl	8000554 <__aeabi_i2d>
 801570c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015710:	f7ea ff8a 	bl	8000628 <__aeabi_dmul>
 8015714:	4602      	mov	r2, r0
 8015716:	460b      	mov	r3, r1
 8015718:	4630      	mov	r0, r6
 801571a:	4639      	mov	r1, r7
 801571c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015720:	f7ea fdca 	bl	80002b8 <__aeabi_dsub>
 8015724:	f805 6b01 	strb.w	r6, [r5], #1
 8015728:	eba5 060b 	sub.w	r6, r5, fp
 801572c:	45b1      	cmp	r9, r6
 801572e:	4602      	mov	r2, r0
 8015730:	460b      	mov	r3, r1
 8015732:	d139      	bne.n	80157a8 <_dtoa_r+0x6c8>
 8015734:	f7ea fdc2 	bl	80002bc <__adddf3>
 8015738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801573c:	4606      	mov	r6, r0
 801573e:	460f      	mov	r7, r1
 8015740:	f7eb fa02 	bl	8000b48 <__aeabi_dcmpgt>
 8015744:	b9c8      	cbnz	r0, 801577a <_dtoa_r+0x69a>
 8015746:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801574a:	4630      	mov	r0, r6
 801574c:	4639      	mov	r1, r7
 801574e:	f7eb f9d3 	bl	8000af8 <__aeabi_dcmpeq>
 8015752:	b110      	cbz	r0, 801575a <_dtoa_r+0x67a>
 8015754:	f018 0f01 	tst.w	r8, #1
 8015758:	d10f      	bne.n	801577a <_dtoa_r+0x69a>
 801575a:	9904      	ldr	r1, [sp, #16]
 801575c:	4620      	mov	r0, r4
 801575e:	f000 fe0d 	bl	801637c <_Bfree>
 8015762:	2300      	movs	r3, #0
 8015764:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015766:	702b      	strb	r3, [r5, #0]
 8015768:	f10a 0301 	add.w	r3, sl, #1
 801576c:	6013      	str	r3, [r2, #0]
 801576e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015770:	2b00      	cmp	r3, #0
 8015772:	f000 8241 	beq.w	8015bf8 <_dtoa_r+0xb18>
 8015776:	601d      	str	r5, [r3, #0]
 8015778:	e23e      	b.n	8015bf8 <_dtoa_r+0xb18>
 801577a:	f8cd a020 	str.w	sl, [sp, #32]
 801577e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015782:	2a39      	cmp	r2, #57	; 0x39
 8015784:	f105 33ff 	add.w	r3, r5, #4294967295
 8015788:	d108      	bne.n	801579c <_dtoa_r+0x6bc>
 801578a:	459b      	cmp	fp, r3
 801578c:	d10a      	bne.n	80157a4 <_dtoa_r+0x6c4>
 801578e:	9b08      	ldr	r3, [sp, #32]
 8015790:	3301      	adds	r3, #1
 8015792:	9308      	str	r3, [sp, #32]
 8015794:	2330      	movs	r3, #48	; 0x30
 8015796:	f88b 3000 	strb.w	r3, [fp]
 801579a:	465b      	mov	r3, fp
 801579c:	781a      	ldrb	r2, [r3, #0]
 801579e:	3201      	adds	r2, #1
 80157a0:	701a      	strb	r2, [r3, #0]
 80157a2:	e78c      	b.n	80156be <_dtoa_r+0x5de>
 80157a4:	461d      	mov	r5, r3
 80157a6:	e7ea      	b.n	801577e <_dtoa_r+0x69e>
 80157a8:	2200      	movs	r2, #0
 80157aa:	4b9b      	ldr	r3, [pc, #620]	; (8015a18 <_dtoa_r+0x938>)
 80157ac:	f7ea ff3c 	bl	8000628 <__aeabi_dmul>
 80157b0:	2200      	movs	r2, #0
 80157b2:	2300      	movs	r3, #0
 80157b4:	4606      	mov	r6, r0
 80157b6:	460f      	mov	r7, r1
 80157b8:	f7eb f99e 	bl	8000af8 <__aeabi_dcmpeq>
 80157bc:	2800      	cmp	r0, #0
 80157be:	d09a      	beq.n	80156f6 <_dtoa_r+0x616>
 80157c0:	e7cb      	b.n	801575a <_dtoa_r+0x67a>
 80157c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80157c4:	2a00      	cmp	r2, #0
 80157c6:	f000 808b 	beq.w	80158e0 <_dtoa_r+0x800>
 80157ca:	9a06      	ldr	r2, [sp, #24]
 80157cc:	2a01      	cmp	r2, #1
 80157ce:	dc6e      	bgt.n	80158ae <_dtoa_r+0x7ce>
 80157d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80157d2:	2a00      	cmp	r2, #0
 80157d4:	d067      	beq.n	80158a6 <_dtoa_r+0x7c6>
 80157d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80157da:	9f07      	ldr	r7, [sp, #28]
 80157dc:	9d05      	ldr	r5, [sp, #20]
 80157de:	9a05      	ldr	r2, [sp, #20]
 80157e0:	2101      	movs	r1, #1
 80157e2:	441a      	add	r2, r3
 80157e4:	4620      	mov	r0, r4
 80157e6:	9205      	str	r2, [sp, #20]
 80157e8:	4498      	add	r8, r3
 80157ea:	f000 fea5 	bl	8016538 <__i2b>
 80157ee:	4606      	mov	r6, r0
 80157f0:	2d00      	cmp	r5, #0
 80157f2:	dd0c      	ble.n	801580e <_dtoa_r+0x72e>
 80157f4:	f1b8 0f00 	cmp.w	r8, #0
 80157f8:	dd09      	ble.n	801580e <_dtoa_r+0x72e>
 80157fa:	4545      	cmp	r5, r8
 80157fc:	9a05      	ldr	r2, [sp, #20]
 80157fe:	462b      	mov	r3, r5
 8015800:	bfa8      	it	ge
 8015802:	4643      	movge	r3, r8
 8015804:	1ad2      	subs	r2, r2, r3
 8015806:	9205      	str	r2, [sp, #20]
 8015808:	1aed      	subs	r5, r5, r3
 801580a:	eba8 0803 	sub.w	r8, r8, r3
 801580e:	9b07      	ldr	r3, [sp, #28]
 8015810:	b1eb      	cbz	r3, 801584e <_dtoa_r+0x76e>
 8015812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015814:	2b00      	cmp	r3, #0
 8015816:	d067      	beq.n	80158e8 <_dtoa_r+0x808>
 8015818:	b18f      	cbz	r7, 801583e <_dtoa_r+0x75e>
 801581a:	4631      	mov	r1, r6
 801581c:	463a      	mov	r2, r7
 801581e:	4620      	mov	r0, r4
 8015820:	f000 ff2a 	bl	8016678 <__pow5mult>
 8015824:	9a04      	ldr	r2, [sp, #16]
 8015826:	4601      	mov	r1, r0
 8015828:	4606      	mov	r6, r0
 801582a:	4620      	mov	r0, r4
 801582c:	f000 fe8d 	bl	801654a <__multiply>
 8015830:	9904      	ldr	r1, [sp, #16]
 8015832:	9008      	str	r0, [sp, #32]
 8015834:	4620      	mov	r0, r4
 8015836:	f000 fda1 	bl	801637c <_Bfree>
 801583a:	9b08      	ldr	r3, [sp, #32]
 801583c:	9304      	str	r3, [sp, #16]
 801583e:	9b07      	ldr	r3, [sp, #28]
 8015840:	1bda      	subs	r2, r3, r7
 8015842:	d004      	beq.n	801584e <_dtoa_r+0x76e>
 8015844:	9904      	ldr	r1, [sp, #16]
 8015846:	4620      	mov	r0, r4
 8015848:	f000 ff16 	bl	8016678 <__pow5mult>
 801584c:	9004      	str	r0, [sp, #16]
 801584e:	2101      	movs	r1, #1
 8015850:	4620      	mov	r0, r4
 8015852:	f000 fe71 	bl	8016538 <__i2b>
 8015856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015858:	4607      	mov	r7, r0
 801585a:	2b00      	cmp	r3, #0
 801585c:	f000 81d0 	beq.w	8015c00 <_dtoa_r+0xb20>
 8015860:	461a      	mov	r2, r3
 8015862:	4601      	mov	r1, r0
 8015864:	4620      	mov	r0, r4
 8015866:	f000 ff07 	bl	8016678 <__pow5mult>
 801586a:	9b06      	ldr	r3, [sp, #24]
 801586c:	2b01      	cmp	r3, #1
 801586e:	4607      	mov	r7, r0
 8015870:	dc40      	bgt.n	80158f4 <_dtoa_r+0x814>
 8015872:	9b00      	ldr	r3, [sp, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d139      	bne.n	80158ec <_dtoa_r+0x80c>
 8015878:	9b01      	ldr	r3, [sp, #4]
 801587a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801587e:	2b00      	cmp	r3, #0
 8015880:	d136      	bne.n	80158f0 <_dtoa_r+0x810>
 8015882:	9b01      	ldr	r3, [sp, #4]
 8015884:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015888:	0d1b      	lsrs	r3, r3, #20
 801588a:	051b      	lsls	r3, r3, #20
 801588c:	b12b      	cbz	r3, 801589a <_dtoa_r+0x7ba>
 801588e:	9b05      	ldr	r3, [sp, #20]
 8015890:	3301      	adds	r3, #1
 8015892:	9305      	str	r3, [sp, #20]
 8015894:	f108 0801 	add.w	r8, r8, #1
 8015898:	2301      	movs	r3, #1
 801589a:	9307      	str	r3, [sp, #28]
 801589c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d12a      	bne.n	80158f8 <_dtoa_r+0x818>
 80158a2:	2001      	movs	r0, #1
 80158a4:	e030      	b.n	8015908 <_dtoa_r+0x828>
 80158a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80158a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80158ac:	e795      	b.n	80157da <_dtoa_r+0x6fa>
 80158ae:	9b07      	ldr	r3, [sp, #28]
 80158b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80158b4:	42bb      	cmp	r3, r7
 80158b6:	bfbf      	itttt	lt
 80158b8:	9b07      	ldrlt	r3, [sp, #28]
 80158ba:	9707      	strlt	r7, [sp, #28]
 80158bc:	1afa      	sublt	r2, r7, r3
 80158be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80158c0:	bfbb      	ittet	lt
 80158c2:	189b      	addlt	r3, r3, r2
 80158c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80158c6:	1bdf      	subge	r7, r3, r7
 80158c8:	2700      	movlt	r7, #0
 80158ca:	f1b9 0f00 	cmp.w	r9, #0
 80158ce:	bfb5      	itete	lt
 80158d0:	9b05      	ldrlt	r3, [sp, #20]
 80158d2:	9d05      	ldrge	r5, [sp, #20]
 80158d4:	eba3 0509 	sublt.w	r5, r3, r9
 80158d8:	464b      	movge	r3, r9
 80158da:	bfb8      	it	lt
 80158dc:	2300      	movlt	r3, #0
 80158de:	e77e      	b.n	80157de <_dtoa_r+0x6fe>
 80158e0:	9f07      	ldr	r7, [sp, #28]
 80158e2:	9d05      	ldr	r5, [sp, #20]
 80158e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80158e6:	e783      	b.n	80157f0 <_dtoa_r+0x710>
 80158e8:	9a07      	ldr	r2, [sp, #28]
 80158ea:	e7ab      	b.n	8015844 <_dtoa_r+0x764>
 80158ec:	2300      	movs	r3, #0
 80158ee:	e7d4      	b.n	801589a <_dtoa_r+0x7ba>
 80158f0:	9b00      	ldr	r3, [sp, #0]
 80158f2:	e7d2      	b.n	801589a <_dtoa_r+0x7ba>
 80158f4:	2300      	movs	r3, #0
 80158f6:	9307      	str	r3, [sp, #28]
 80158f8:	693b      	ldr	r3, [r7, #16]
 80158fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80158fe:	6918      	ldr	r0, [r3, #16]
 8015900:	f000 fdcc 	bl	801649c <__hi0bits>
 8015904:	f1c0 0020 	rsb	r0, r0, #32
 8015908:	4440      	add	r0, r8
 801590a:	f010 001f 	ands.w	r0, r0, #31
 801590e:	d047      	beq.n	80159a0 <_dtoa_r+0x8c0>
 8015910:	f1c0 0320 	rsb	r3, r0, #32
 8015914:	2b04      	cmp	r3, #4
 8015916:	dd3b      	ble.n	8015990 <_dtoa_r+0x8b0>
 8015918:	9b05      	ldr	r3, [sp, #20]
 801591a:	f1c0 001c 	rsb	r0, r0, #28
 801591e:	4403      	add	r3, r0
 8015920:	9305      	str	r3, [sp, #20]
 8015922:	4405      	add	r5, r0
 8015924:	4480      	add	r8, r0
 8015926:	9b05      	ldr	r3, [sp, #20]
 8015928:	2b00      	cmp	r3, #0
 801592a:	dd05      	ble.n	8015938 <_dtoa_r+0x858>
 801592c:	461a      	mov	r2, r3
 801592e:	9904      	ldr	r1, [sp, #16]
 8015930:	4620      	mov	r0, r4
 8015932:	f000 feef 	bl	8016714 <__lshift>
 8015936:	9004      	str	r0, [sp, #16]
 8015938:	f1b8 0f00 	cmp.w	r8, #0
 801593c:	dd05      	ble.n	801594a <_dtoa_r+0x86a>
 801593e:	4639      	mov	r1, r7
 8015940:	4642      	mov	r2, r8
 8015942:	4620      	mov	r0, r4
 8015944:	f000 fee6 	bl	8016714 <__lshift>
 8015948:	4607      	mov	r7, r0
 801594a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801594c:	b353      	cbz	r3, 80159a4 <_dtoa_r+0x8c4>
 801594e:	4639      	mov	r1, r7
 8015950:	9804      	ldr	r0, [sp, #16]
 8015952:	f000 ff33 	bl	80167bc <__mcmp>
 8015956:	2800      	cmp	r0, #0
 8015958:	da24      	bge.n	80159a4 <_dtoa_r+0x8c4>
 801595a:	2300      	movs	r3, #0
 801595c:	220a      	movs	r2, #10
 801595e:	9904      	ldr	r1, [sp, #16]
 8015960:	4620      	mov	r0, r4
 8015962:	f000 fd22 	bl	80163aa <__multadd>
 8015966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015968:	9004      	str	r0, [sp, #16]
 801596a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801596e:	2b00      	cmp	r3, #0
 8015970:	f000 814d 	beq.w	8015c0e <_dtoa_r+0xb2e>
 8015974:	2300      	movs	r3, #0
 8015976:	4631      	mov	r1, r6
 8015978:	220a      	movs	r2, #10
 801597a:	4620      	mov	r0, r4
 801597c:	f000 fd15 	bl	80163aa <__multadd>
 8015980:	9b02      	ldr	r3, [sp, #8]
 8015982:	2b00      	cmp	r3, #0
 8015984:	4606      	mov	r6, r0
 8015986:	dc4f      	bgt.n	8015a28 <_dtoa_r+0x948>
 8015988:	9b06      	ldr	r3, [sp, #24]
 801598a:	2b02      	cmp	r3, #2
 801598c:	dd4c      	ble.n	8015a28 <_dtoa_r+0x948>
 801598e:	e011      	b.n	80159b4 <_dtoa_r+0x8d4>
 8015990:	d0c9      	beq.n	8015926 <_dtoa_r+0x846>
 8015992:	9a05      	ldr	r2, [sp, #20]
 8015994:	331c      	adds	r3, #28
 8015996:	441a      	add	r2, r3
 8015998:	9205      	str	r2, [sp, #20]
 801599a:	441d      	add	r5, r3
 801599c:	4498      	add	r8, r3
 801599e:	e7c2      	b.n	8015926 <_dtoa_r+0x846>
 80159a0:	4603      	mov	r3, r0
 80159a2:	e7f6      	b.n	8015992 <_dtoa_r+0x8b2>
 80159a4:	f1b9 0f00 	cmp.w	r9, #0
 80159a8:	dc38      	bgt.n	8015a1c <_dtoa_r+0x93c>
 80159aa:	9b06      	ldr	r3, [sp, #24]
 80159ac:	2b02      	cmp	r3, #2
 80159ae:	dd35      	ble.n	8015a1c <_dtoa_r+0x93c>
 80159b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80159b4:	9b02      	ldr	r3, [sp, #8]
 80159b6:	b963      	cbnz	r3, 80159d2 <_dtoa_r+0x8f2>
 80159b8:	4639      	mov	r1, r7
 80159ba:	2205      	movs	r2, #5
 80159bc:	4620      	mov	r0, r4
 80159be:	f000 fcf4 	bl	80163aa <__multadd>
 80159c2:	4601      	mov	r1, r0
 80159c4:	4607      	mov	r7, r0
 80159c6:	9804      	ldr	r0, [sp, #16]
 80159c8:	f000 fef8 	bl	80167bc <__mcmp>
 80159cc:	2800      	cmp	r0, #0
 80159ce:	f73f adcc 	bgt.w	801556a <_dtoa_r+0x48a>
 80159d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159d4:	465d      	mov	r5, fp
 80159d6:	ea6f 0a03 	mvn.w	sl, r3
 80159da:	f04f 0900 	mov.w	r9, #0
 80159de:	4639      	mov	r1, r7
 80159e0:	4620      	mov	r0, r4
 80159e2:	f000 fccb 	bl	801637c <_Bfree>
 80159e6:	2e00      	cmp	r6, #0
 80159e8:	f43f aeb7 	beq.w	801575a <_dtoa_r+0x67a>
 80159ec:	f1b9 0f00 	cmp.w	r9, #0
 80159f0:	d005      	beq.n	80159fe <_dtoa_r+0x91e>
 80159f2:	45b1      	cmp	r9, r6
 80159f4:	d003      	beq.n	80159fe <_dtoa_r+0x91e>
 80159f6:	4649      	mov	r1, r9
 80159f8:	4620      	mov	r0, r4
 80159fa:	f000 fcbf 	bl	801637c <_Bfree>
 80159fe:	4631      	mov	r1, r6
 8015a00:	4620      	mov	r0, r4
 8015a02:	f000 fcbb 	bl	801637c <_Bfree>
 8015a06:	e6a8      	b.n	801575a <_dtoa_r+0x67a>
 8015a08:	2700      	movs	r7, #0
 8015a0a:	463e      	mov	r6, r7
 8015a0c:	e7e1      	b.n	80159d2 <_dtoa_r+0x8f2>
 8015a0e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015a12:	463e      	mov	r6, r7
 8015a14:	e5a9      	b.n	801556a <_dtoa_r+0x48a>
 8015a16:	bf00      	nop
 8015a18:	40240000 	.word	0x40240000
 8015a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	f000 80fa 	beq.w	8015c1c <_dtoa_r+0xb3c>
 8015a28:	2d00      	cmp	r5, #0
 8015a2a:	dd05      	ble.n	8015a38 <_dtoa_r+0x958>
 8015a2c:	4631      	mov	r1, r6
 8015a2e:	462a      	mov	r2, r5
 8015a30:	4620      	mov	r0, r4
 8015a32:	f000 fe6f 	bl	8016714 <__lshift>
 8015a36:	4606      	mov	r6, r0
 8015a38:	9b07      	ldr	r3, [sp, #28]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d04c      	beq.n	8015ad8 <_dtoa_r+0x9f8>
 8015a3e:	6871      	ldr	r1, [r6, #4]
 8015a40:	4620      	mov	r0, r4
 8015a42:	f000 fc67 	bl	8016314 <_Balloc>
 8015a46:	6932      	ldr	r2, [r6, #16]
 8015a48:	3202      	adds	r2, #2
 8015a4a:	4605      	mov	r5, r0
 8015a4c:	0092      	lsls	r2, r2, #2
 8015a4e:	f106 010c 	add.w	r1, r6, #12
 8015a52:	300c      	adds	r0, #12
 8015a54:	f7fd fd08 	bl	8013468 <memcpy>
 8015a58:	2201      	movs	r2, #1
 8015a5a:	4629      	mov	r1, r5
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	f000 fe59 	bl	8016714 <__lshift>
 8015a62:	9b00      	ldr	r3, [sp, #0]
 8015a64:	f8cd b014 	str.w	fp, [sp, #20]
 8015a68:	f003 0301 	and.w	r3, r3, #1
 8015a6c:	46b1      	mov	r9, r6
 8015a6e:	9307      	str	r3, [sp, #28]
 8015a70:	4606      	mov	r6, r0
 8015a72:	4639      	mov	r1, r7
 8015a74:	9804      	ldr	r0, [sp, #16]
 8015a76:	f7ff faa5 	bl	8014fc4 <quorem>
 8015a7a:	4649      	mov	r1, r9
 8015a7c:	4605      	mov	r5, r0
 8015a7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015a82:	9804      	ldr	r0, [sp, #16]
 8015a84:	f000 fe9a 	bl	80167bc <__mcmp>
 8015a88:	4632      	mov	r2, r6
 8015a8a:	9000      	str	r0, [sp, #0]
 8015a8c:	4639      	mov	r1, r7
 8015a8e:	4620      	mov	r0, r4
 8015a90:	f000 feae 	bl	80167f0 <__mdiff>
 8015a94:	68c3      	ldr	r3, [r0, #12]
 8015a96:	4602      	mov	r2, r0
 8015a98:	bb03      	cbnz	r3, 8015adc <_dtoa_r+0x9fc>
 8015a9a:	4601      	mov	r1, r0
 8015a9c:	9008      	str	r0, [sp, #32]
 8015a9e:	9804      	ldr	r0, [sp, #16]
 8015aa0:	f000 fe8c 	bl	80167bc <__mcmp>
 8015aa4:	9a08      	ldr	r2, [sp, #32]
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	4611      	mov	r1, r2
 8015aaa:	4620      	mov	r0, r4
 8015aac:	9308      	str	r3, [sp, #32]
 8015aae:	f000 fc65 	bl	801637c <_Bfree>
 8015ab2:	9b08      	ldr	r3, [sp, #32]
 8015ab4:	b9a3      	cbnz	r3, 8015ae0 <_dtoa_r+0xa00>
 8015ab6:	9a06      	ldr	r2, [sp, #24]
 8015ab8:	b992      	cbnz	r2, 8015ae0 <_dtoa_r+0xa00>
 8015aba:	9a07      	ldr	r2, [sp, #28]
 8015abc:	b982      	cbnz	r2, 8015ae0 <_dtoa_r+0xa00>
 8015abe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015ac2:	d029      	beq.n	8015b18 <_dtoa_r+0xa38>
 8015ac4:	9b00      	ldr	r3, [sp, #0]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	dd01      	ble.n	8015ace <_dtoa_r+0x9ee>
 8015aca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015ace:	9b05      	ldr	r3, [sp, #20]
 8015ad0:	1c5d      	adds	r5, r3, #1
 8015ad2:	f883 8000 	strb.w	r8, [r3]
 8015ad6:	e782      	b.n	80159de <_dtoa_r+0x8fe>
 8015ad8:	4630      	mov	r0, r6
 8015ada:	e7c2      	b.n	8015a62 <_dtoa_r+0x982>
 8015adc:	2301      	movs	r3, #1
 8015ade:	e7e3      	b.n	8015aa8 <_dtoa_r+0x9c8>
 8015ae0:	9a00      	ldr	r2, [sp, #0]
 8015ae2:	2a00      	cmp	r2, #0
 8015ae4:	db04      	blt.n	8015af0 <_dtoa_r+0xa10>
 8015ae6:	d125      	bne.n	8015b34 <_dtoa_r+0xa54>
 8015ae8:	9a06      	ldr	r2, [sp, #24]
 8015aea:	bb1a      	cbnz	r2, 8015b34 <_dtoa_r+0xa54>
 8015aec:	9a07      	ldr	r2, [sp, #28]
 8015aee:	bb0a      	cbnz	r2, 8015b34 <_dtoa_r+0xa54>
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	ddec      	ble.n	8015ace <_dtoa_r+0x9ee>
 8015af4:	2201      	movs	r2, #1
 8015af6:	9904      	ldr	r1, [sp, #16]
 8015af8:	4620      	mov	r0, r4
 8015afa:	f000 fe0b 	bl	8016714 <__lshift>
 8015afe:	4639      	mov	r1, r7
 8015b00:	9004      	str	r0, [sp, #16]
 8015b02:	f000 fe5b 	bl	80167bc <__mcmp>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	dc03      	bgt.n	8015b12 <_dtoa_r+0xa32>
 8015b0a:	d1e0      	bne.n	8015ace <_dtoa_r+0x9ee>
 8015b0c:	f018 0f01 	tst.w	r8, #1
 8015b10:	d0dd      	beq.n	8015ace <_dtoa_r+0x9ee>
 8015b12:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b16:	d1d8      	bne.n	8015aca <_dtoa_r+0x9ea>
 8015b18:	9b05      	ldr	r3, [sp, #20]
 8015b1a:	9a05      	ldr	r2, [sp, #20]
 8015b1c:	1c5d      	adds	r5, r3, #1
 8015b1e:	2339      	movs	r3, #57	; 0x39
 8015b20:	7013      	strb	r3, [r2, #0]
 8015b22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b26:	2b39      	cmp	r3, #57	; 0x39
 8015b28:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b2c:	d04f      	beq.n	8015bce <_dtoa_r+0xaee>
 8015b2e:	3301      	adds	r3, #1
 8015b30:	7013      	strb	r3, [r2, #0]
 8015b32:	e754      	b.n	80159de <_dtoa_r+0x8fe>
 8015b34:	9a05      	ldr	r2, [sp, #20]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	f102 0501 	add.w	r5, r2, #1
 8015b3c:	dd06      	ble.n	8015b4c <_dtoa_r+0xa6c>
 8015b3e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b42:	d0e9      	beq.n	8015b18 <_dtoa_r+0xa38>
 8015b44:	f108 0801 	add.w	r8, r8, #1
 8015b48:	9b05      	ldr	r3, [sp, #20]
 8015b4a:	e7c2      	b.n	8015ad2 <_dtoa_r+0x9f2>
 8015b4c:	9a02      	ldr	r2, [sp, #8]
 8015b4e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015b52:	eba5 030b 	sub.w	r3, r5, fp
 8015b56:	4293      	cmp	r3, r2
 8015b58:	d021      	beq.n	8015b9e <_dtoa_r+0xabe>
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	220a      	movs	r2, #10
 8015b5e:	9904      	ldr	r1, [sp, #16]
 8015b60:	4620      	mov	r0, r4
 8015b62:	f000 fc22 	bl	80163aa <__multadd>
 8015b66:	45b1      	cmp	r9, r6
 8015b68:	9004      	str	r0, [sp, #16]
 8015b6a:	f04f 0300 	mov.w	r3, #0
 8015b6e:	f04f 020a 	mov.w	r2, #10
 8015b72:	4649      	mov	r1, r9
 8015b74:	4620      	mov	r0, r4
 8015b76:	d105      	bne.n	8015b84 <_dtoa_r+0xaa4>
 8015b78:	f000 fc17 	bl	80163aa <__multadd>
 8015b7c:	4681      	mov	r9, r0
 8015b7e:	4606      	mov	r6, r0
 8015b80:	9505      	str	r5, [sp, #20]
 8015b82:	e776      	b.n	8015a72 <_dtoa_r+0x992>
 8015b84:	f000 fc11 	bl	80163aa <__multadd>
 8015b88:	4631      	mov	r1, r6
 8015b8a:	4681      	mov	r9, r0
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	220a      	movs	r2, #10
 8015b90:	4620      	mov	r0, r4
 8015b92:	f000 fc0a 	bl	80163aa <__multadd>
 8015b96:	4606      	mov	r6, r0
 8015b98:	e7f2      	b.n	8015b80 <_dtoa_r+0xaa0>
 8015b9a:	f04f 0900 	mov.w	r9, #0
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	9904      	ldr	r1, [sp, #16]
 8015ba2:	4620      	mov	r0, r4
 8015ba4:	f000 fdb6 	bl	8016714 <__lshift>
 8015ba8:	4639      	mov	r1, r7
 8015baa:	9004      	str	r0, [sp, #16]
 8015bac:	f000 fe06 	bl	80167bc <__mcmp>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	dcb6      	bgt.n	8015b22 <_dtoa_r+0xa42>
 8015bb4:	d102      	bne.n	8015bbc <_dtoa_r+0xadc>
 8015bb6:	f018 0f01 	tst.w	r8, #1
 8015bba:	d1b2      	bne.n	8015b22 <_dtoa_r+0xa42>
 8015bbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015bc0:	2b30      	cmp	r3, #48	; 0x30
 8015bc2:	f105 32ff 	add.w	r2, r5, #4294967295
 8015bc6:	f47f af0a 	bne.w	80159de <_dtoa_r+0x8fe>
 8015bca:	4615      	mov	r5, r2
 8015bcc:	e7f6      	b.n	8015bbc <_dtoa_r+0xadc>
 8015bce:	4593      	cmp	fp, r2
 8015bd0:	d105      	bne.n	8015bde <_dtoa_r+0xafe>
 8015bd2:	2331      	movs	r3, #49	; 0x31
 8015bd4:	f10a 0a01 	add.w	sl, sl, #1
 8015bd8:	f88b 3000 	strb.w	r3, [fp]
 8015bdc:	e6ff      	b.n	80159de <_dtoa_r+0x8fe>
 8015bde:	4615      	mov	r5, r2
 8015be0:	e79f      	b.n	8015b22 <_dtoa_r+0xa42>
 8015be2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015c48 <_dtoa_r+0xb68>
 8015be6:	e007      	b.n	8015bf8 <_dtoa_r+0xb18>
 8015be8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bea:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015c4c <_dtoa_r+0xb6c>
 8015bee:	b11b      	cbz	r3, 8015bf8 <_dtoa_r+0xb18>
 8015bf0:	f10b 0308 	add.w	r3, fp, #8
 8015bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015bf6:	6013      	str	r3, [r2, #0]
 8015bf8:	4658      	mov	r0, fp
 8015bfa:	b017      	add	sp, #92	; 0x5c
 8015bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c00:	9b06      	ldr	r3, [sp, #24]
 8015c02:	2b01      	cmp	r3, #1
 8015c04:	f77f ae35 	ble.w	8015872 <_dtoa_r+0x792>
 8015c08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c0a:	9307      	str	r3, [sp, #28]
 8015c0c:	e649      	b.n	80158a2 <_dtoa_r+0x7c2>
 8015c0e:	9b02      	ldr	r3, [sp, #8]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	dc03      	bgt.n	8015c1c <_dtoa_r+0xb3c>
 8015c14:	9b06      	ldr	r3, [sp, #24]
 8015c16:	2b02      	cmp	r3, #2
 8015c18:	f73f aecc 	bgt.w	80159b4 <_dtoa_r+0x8d4>
 8015c1c:	465d      	mov	r5, fp
 8015c1e:	4639      	mov	r1, r7
 8015c20:	9804      	ldr	r0, [sp, #16]
 8015c22:	f7ff f9cf 	bl	8014fc4 <quorem>
 8015c26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015c2a:	f805 8b01 	strb.w	r8, [r5], #1
 8015c2e:	9a02      	ldr	r2, [sp, #8]
 8015c30:	eba5 030b 	sub.w	r3, r5, fp
 8015c34:	429a      	cmp	r2, r3
 8015c36:	ddb0      	ble.n	8015b9a <_dtoa_r+0xaba>
 8015c38:	2300      	movs	r3, #0
 8015c3a:	220a      	movs	r2, #10
 8015c3c:	9904      	ldr	r1, [sp, #16]
 8015c3e:	4620      	mov	r0, r4
 8015c40:	f000 fbb3 	bl	80163aa <__multadd>
 8015c44:	9004      	str	r0, [sp, #16]
 8015c46:	e7ea      	b.n	8015c1e <_dtoa_r+0xb3e>
 8015c48:	0801821b 	.word	0x0801821b
 8015c4c:	08018078 	.word	0x08018078

08015c50 <rshift>:
 8015c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c52:	6906      	ldr	r6, [r0, #16]
 8015c54:	114b      	asrs	r3, r1, #5
 8015c56:	429e      	cmp	r6, r3
 8015c58:	f100 0414 	add.w	r4, r0, #20
 8015c5c:	dd30      	ble.n	8015cc0 <rshift+0x70>
 8015c5e:	f011 011f 	ands.w	r1, r1, #31
 8015c62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015c66:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015c6a:	d108      	bne.n	8015c7e <rshift+0x2e>
 8015c6c:	4621      	mov	r1, r4
 8015c6e:	42b2      	cmp	r2, r6
 8015c70:	460b      	mov	r3, r1
 8015c72:	d211      	bcs.n	8015c98 <rshift+0x48>
 8015c74:	f852 3b04 	ldr.w	r3, [r2], #4
 8015c78:	f841 3b04 	str.w	r3, [r1], #4
 8015c7c:	e7f7      	b.n	8015c6e <rshift+0x1e>
 8015c7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015c82:	f1c1 0c20 	rsb	ip, r1, #32
 8015c86:	40cd      	lsrs	r5, r1
 8015c88:	3204      	adds	r2, #4
 8015c8a:	4623      	mov	r3, r4
 8015c8c:	42b2      	cmp	r2, r6
 8015c8e:	4617      	mov	r7, r2
 8015c90:	d30c      	bcc.n	8015cac <rshift+0x5c>
 8015c92:	601d      	str	r5, [r3, #0]
 8015c94:	b105      	cbz	r5, 8015c98 <rshift+0x48>
 8015c96:	3304      	adds	r3, #4
 8015c98:	1b1a      	subs	r2, r3, r4
 8015c9a:	42a3      	cmp	r3, r4
 8015c9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015ca0:	bf08      	it	eq
 8015ca2:	2300      	moveq	r3, #0
 8015ca4:	6102      	str	r2, [r0, #16]
 8015ca6:	bf08      	it	eq
 8015ca8:	6143      	streq	r3, [r0, #20]
 8015caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cac:	683f      	ldr	r7, [r7, #0]
 8015cae:	fa07 f70c 	lsl.w	r7, r7, ip
 8015cb2:	433d      	orrs	r5, r7
 8015cb4:	f843 5b04 	str.w	r5, [r3], #4
 8015cb8:	f852 5b04 	ldr.w	r5, [r2], #4
 8015cbc:	40cd      	lsrs	r5, r1
 8015cbe:	e7e5      	b.n	8015c8c <rshift+0x3c>
 8015cc0:	4623      	mov	r3, r4
 8015cc2:	e7e9      	b.n	8015c98 <rshift+0x48>

08015cc4 <__hexdig_fun>:
 8015cc4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015cc8:	2b09      	cmp	r3, #9
 8015cca:	d802      	bhi.n	8015cd2 <__hexdig_fun+0xe>
 8015ccc:	3820      	subs	r0, #32
 8015cce:	b2c0      	uxtb	r0, r0
 8015cd0:	4770      	bx	lr
 8015cd2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015cd6:	2b05      	cmp	r3, #5
 8015cd8:	d801      	bhi.n	8015cde <__hexdig_fun+0x1a>
 8015cda:	3847      	subs	r0, #71	; 0x47
 8015cdc:	e7f7      	b.n	8015cce <__hexdig_fun+0xa>
 8015cde:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015ce2:	2b05      	cmp	r3, #5
 8015ce4:	d801      	bhi.n	8015cea <__hexdig_fun+0x26>
 8015ce6:	3827      	subs	r0, #39	; 0x27
 8015ce8:	e7f1      	b.n	8015cce <__hexdig_fun+0xa>
 8015cea:	2000      	movs	r0, #0
 8015cec:	4770      	bx	lr

08015cee <__gethex>:
 8015cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf2:	b08b      	sub	sp, #44	; 0x2c
 8015cf4:	468a      	mov	sl, r1
 8015cf6:	9002      	str	r0, [sp, #8]
 8015cf8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015cfa:	9306      	str	r3, [sp, #24]
 8015cfc:	4690      	mov	r8, r2
 8015cfe:	f000 fadf 	bl	80162c0 <__localeconv_l>
 8015d02:	6803      	ldr	r3, [r0, #0]
 8015d04:	9303      	str	r3, [sp, #12]
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7ea fa7a 	bl	8000200 <strlen>
 8015d0c:	9b03      	ldr	r3, [sp, #12]
 8015d0e:	9001      	str	r0, [sp, #4]
 8015d10:	4403      	add	r3, r0
 8015d12:	f04f 0b00 	mov.w	fp, #0
 8015d16:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015d1a:	9307      	str	r3, [sp, #28]
 8015d1c:	f8da 3000 	ldr.w	r3, [sl]
 8015d20:	3302      	adds	r3, #2
 8015d22:	461f      	mov	r7, r3
 8015d24:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015d28:	2830      	cmp	r0, #48	; 0x30
 8015d2a:	d06c      	beq.n	8015e06 <__gethex+0x118>
 8015d2c:	f7ff ffca 	bl	8015cc4 <__hexdig_fun>
 8015d30:	4604      	mov	r4, r0
 8015d32:	2800      	cmp	r0, #0
 8015d34:	d16a      	bne.n	8015e0c <__gethex+0x11e>
 8015d36:	9a01      	ldr	r2, [sp, #4]
 8015d38:	9903      	ldr	r1, [sp, #12]
 8015d3a:	4638      	mov	r0, r7
 8015d3c:	f001 fc36 	bl	80175ac <strncmp>
 8015d40:	2800      	cmp	r0, #0
 8015d42:	d166      	bne.n	8015e12 <__gethex+0x124>
 8015d44:	9b01      	ldr	r3, [sp, #4]
 8015d46:	5cf8      	ldrb	r0, [r7, r3]
 8015d48:	18fe      	adds	r6, r7, r3
 8015d4a:	f7ff ffbb 	bl	8015cc4 <__hexdig_fun>
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d062      	beq.n	8015e18 <__gethex+0x12a>
 8015d52:	4633      	mov	r3, r6
 8015d54:	7818      	ldrb	r0, [r3, #0]
 8015d56:	2830      	cmp	r0, #48	; 0x30
 8015d58:	461f      	mov	r7, r3
 8015d5a:	f103 0301 	add.w	r3, r3, #1
 8015d5e:	d0f9      	beq.n	8015d54 <__gethex+0x66>
 8015d60:	f7ff ffb0 	bl	8015cc4 <__hexdig_fun>
 8015d64:	fab0 f580 	clz	r5, r0
 8015d68:	096d      	lsrs	r5, r5, #5
 8015d6a:	4634      	mov	r4, r6
 8015d6c:	f04f 0b01 	mov.w	fp, #1
 8015d70:	463a      	mov	r2, r7
 8015d72:	4616      	mov	r6, r2
 8015d74:	3201      	adds	r2, #1
 8015d76:	7830      	ldrb	r0, [r6, #0]
 8015d78:	f7ff ffa4 	bl	8015cc4 <__hexdig_fun>
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	d1f8      	bne.n	8015d72 <__gethex+0x84>
 8015d80:	9a01      	ldr	r2, [sp, #4]
 8015d82:	9903      	ldr	r1, [sp, #12]
 8015d84:	4630      	mov	r0, r6
 8015d86:	f001 fc11 	bl	80175ac <strncmp>
 8015d8a:	b950      	cbnz	r0, 8015da2 <__gethex+0xb4>
 8015d8c:	b954      	cbnz	r4, 8015da4 <__gethex+0xb6>
 8015d8e:	9b01      	ldr	r3, [sp, #4]
 8015d90:	18f4      	adds	r4, r6, r3
 8015d92:	4622      	mov	r2, r4
 8015d94:	4616      	mov	r6, r2
 8015d96:	3201      	adds	r2, #1
 8015d98:	7830      	ldrb	r0, [r6, #0]
 8015d9a:	f7ff ff93 	bl	8015cc4 <__hexdig_fun>
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	d1f8      	bne.n	8015d94 <__gethex+0xa6>
 8015da2:	b10c      	cbz	r4, 8015da8 <__gethex+0xba>
 8015da4:	1ba4      	subs	r4, r4, r6
 8015da6:	00a4      	lsls	r4, r4, #2
 8015da8:	7833      	ldrb	r3, [r6, #0]
 8015daa:	2b50      	cmp	r3, #80	; 0x50
 8015dac:	d001      	beq.n	8015db2 <__gethex+0xc4>
 8015dae:	2b70      	cmp	r3, #112	; 0x70
 8015db0:	d140      	bne.n	8015e34 <__gethex+0x146>
 8015db2:	7873      	ldrb	r3, [r6, #1]
 8015db4:	2b2b      	cmp	r3, #43	; 0x2b
 8015db6:	d031      	beq.n	8015e1c <__gethex+0x12e>
 8015db8:	2b2d      	cmp	r3, #45	; 0x2d
 8015dba:	d033      	beq.n	8015e24 <__gethex+0x136>
 8015dbc:	1c71      	adds	r1, r6, #1
 8015dbe:	f04f 0900 	mov.w	r9, #0
 8015dc2:	7808      	ldrb	r0, [r1, #0]
 8015dc4:	f7ff ff7e 	bl	8015cc4 <__hexdig_fun>
 8015dc8:	1e43      	subs	r3, r0, #1
 8015dca:	b2db      	uxtb	r3, r3
 8015dcc:	2b18      	cmp	r3, #24
 8015dce:	d831      	bhi.n	8015e34 <__gethex+0x146>
 8015dd0:	f1a0 0210 	sub.w	r2, r0, #16
 8015dd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015dd8:	f7ff ff74 	bl	8015cc4 <__hexdig_fun>
 8015ddc:	1e43      	subs	r3, r0, #1
 8015dde:	b2db      	uxtb	r3, r3
 8015de0:	2b18      	cmp	r3, #24
 8015de2:	d922      	bls.n	8015e2a <__gethex+0x13c>
 8015de4:	f1b9 0f00 	cmp.w	r9, #0
 8015de8:	d000      	beq.n	8015dec <__gethex+0xfe>
 8015dea:	4252      	negs	r2, r2
 8015dec:	4414      	add	r4, r2
 8015dee:	f8ca 1000 	str.w	r1, [sl]
 8015df2:	b30d      	cbz	r5, 8015e38 <__gethex+0x14a>
 8015df4:	f1bb 0f00 	cmp.w	fp, #0
 8015df8:	bf0c      	ite	eq
 8015dfa:	2706      	moveq	r7, #6
 8015dfc:	2700      	movne	r7, #0
 8015dfe:	4638      	mov	r0, r7
 8015e00:	b00b      	add	sp, #44	; 0x2c
 8015e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e06:	f10b 0b01 	add.w	fp, fp, #1
 8015e0a:	e78a      	b.n	8015d22 <__gethex+0x34>
 8015e0c:	2500      	movs	r5, #0
 8015e0e:	462c      	mov	r4, r5
 8015e10:	e7ae      	b.n	8015d70 <__gethex+0x82>
 8015e12:	463e      	mov	r6, r7
 8015e14:	2501      	movs	r5, #1
 8015e16:	e7c7      	b.n	8015da8 <__gethex+0xba>
 8015e18:	4604      	mov	r4, r0
 8015e1a:	e7fb      	b.n	8015e14 <__gethex+0x126>
 8015e1c:	f04f 0900 	mov.w	r9, #0
 8015e20:	1cb1      	adds	r1, r6, #2
 8015e22:	e7ce      	b.n	8015dc2 <__gethex+0xd4>
 8015e24:	f04f 0901 	mov.w	r9, #1
 8015e28:	e7fa      	b.n	8015e20 <__gethex+0x132>
 8015e2a:	230a      	movs	r3, #10
 8015e2c:	fb03 0202 	mla	r2, r3, r2, r0
 8015e30:	3a10      	subs	r2, #16
 8015e32:	e7cf      	b.n	8015dd4 <__gethex+0xe6>
 8015e34:	4631      	mov	r1, r6
 8015e36:	e7da      	b.n	8015dee <__gethex+0x100>
 8015e38:	1bf3      	subs	r3, r6, r7
 8015e3a:	3b01      	subs	r3, #1
 8015e3c:	4629      	mov	r1, r5
 8015e3e:	2b07      	cmp	r3, #7
 8015e40:	dc49      	bgt.n	8015ed6 <__gethex+0x1e8>
 8015e42:	9802      	ldr	r0, [sp, #8]
 8015e44:	f000 fa66 	bl	8016314 <_Balloc>
 8015e48:	9b01      	ldr	r3, [sp, #4]
 8015e4a:	f100 0914 	add.w	r9, r0, #20
 8015e4e:	f04f 0b00 	mov.w	fp, #0
 8015e52:	f1c3 0301 	rsb	r3, r3, #1
 8015e56:	4605      	mov	r5, r0
 8015e58:	f8cd 9010 	str.w	r9, [sp, #16]
 8015e5c:	46da      	mov	sl, fp
 8015e5e:	9308      	str	r3, [sp, #32]
 8015e60:	42b7      	cmp	r7, r6
 8015e62:	d33b      	bcc.n	8015edc <__gethex+0x1ee>
 8015e64:	9804      	ldr	r0, [sp, #16]
 8015e66:	f840 ab04 	str.w	sl, [r0], #4
 8015e6a:	eba0 0009 	sub.w	r0, r0, r9
 8015e6e:	1080      	asrs	r0, r0, #2
 8015e70:	6128      	str	r0, [r5, #16]
 8015e72:	0147      	lsls	r7, r0, #5
 8015e74:	4650      	mov	r0, sl
 8015e76:	f000 fb11 	bl	801649c <__hi0bits>
 8015e7a:	f8d8 6000 	ldr.w	r6, [r8]
 8015e7e:	1a3f      	subs	r7, r7, r0
 8015e80:	42b7      	cmp	r7, r6
 8015e82:	dd64      	ble.n	8015f4e <__gethex+0x260>
 8015e84:	1bbf      	subs	r7, r7, r6
 8015e86:	4639      	mov	r1, r7
 8015e88:	4628      	mov	r0, r5
 8015e8a:	f000 fe21 	bl	8016ad0 <__any_on>
 8015e8e:	4682      	mov	sl, r0
 8015e90:	b178      	cbz	r0, 8015eb2 <__gethex+0x1c4>
 8015e92:	1e7b      	subs	r3, r7, #1
 8015e94:	1159      	asrs	r1, r3, #5
 8015e96:	f003 021f 	and.w	r2, r3, #31
 8015e9a:	f04f 0a01 	mov.w	sl, #1
 8015e9e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015ea2:	fa0a f202 	lsl.w	r2, sl, r2
 8015ea6:	420a      	tst	r2, r1
 8015ea8:	d003      	beq.n	8015eb2 <__gethex+0x1c4>
 8015eaa:	4553      	cmp	r3, sl
 8015eac:	dc46      	bgt.n	8015f3c <__gethex+0x24e>
 8015eae:	f04f 0a02 	mov.w	sl, #2
 8015eb2:	4639      	mov	r1, r7
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	f7ff fecb 	bl	8015c50 <rshift>
 8015eba:	443c      	add	r4, r7
 8015ebc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015ec0:	42a3      	cmp	r3, r4
 8015ec2:	da52      	bge.n	8015f6a <__gethex+0x27c>
 8015ec4:	4629      	mov	r1, r5
 8015ec6:	9802      	ldr	r0, [sp, #8]
 8015ec8:	f000 fa58 	bl	801637c <_Bfree>
 8015ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ece:	2300      	movs	r3, #0
 8015ed0:	6013      	str	r3, [r2, #0]
 8015ed2:	27a3      	movs	r7, #163	; 0xa3
 8015ed4:	e793      	b.n	8015dfe <__gethex+0x110>
 8015ed6:	3101      	adds	r1, #1
 8015ed8:	105b      	asrs	r3, r3, #1
 8015eda:	e7b0      	b.n	8015e3e <__gethex+0x150>
 8015edc:	1e73      	subs	r3, r6, #1
 8015ede:	9305      	str	r3, [sp, #20]
 8015ee0:	9a07      	ldr	r2, [sp, #28]
 8015ee2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015ee6:	4293      	cmp	r3, r2
 8015ee8:	d018      	beq.n	8015f1c <__gethex+0x22e>
 8015eea:	f1bb 0f20 	cmp.w	fp, #32
 8015eee:	d107      	bne.n	8015f00 <__gethex+0x212>
 8015ef0:	9b04      	ldr	r3, [sp, #16]
 8015ef2:	f8c3 a000 	str.w	sl, [r3]
 8015ef6:	3304      	adds	r3, #4
 8015ef8:	f04f 0a00 	mov.w	sl, #0
 8015efc:	9304      	str	r3, [sp, #16]
 8015efe:	46d3      	mov	fp, sl
 8015f00:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015f04:	f7ff fede 	bl	8015cc4 <__hexdig_fun>
 8015f08:	f000 000f 	and.w	r0, r0, #15
 8015f0c:	fa00 f00b 	lsl.w	r0, r0, fp
 8015f10:	ea4a 0a00 	orr.w	sl, sl, r0
 8015f14:	f10b 0b04 	add.w	fp, fp, #4
 8015f18:	9b05      	ldr	r3, [sp, #20]
 8015f1a:	e00d      	b.n	8015f38 <__gethex+0x24a>
 8015f1c:	9b05      	ldr	r3, [sp, #20]
 8015f1e:	9a08      	ldr	r2, [sp, #32]
 8015f20:	4413      	add	r3, r2
 8015f22:	42bb      	cmp	r3, r7
 8015f24:	d3e1      	bcc.n	8015eea <__gethex+0x1fc>
 8015f26:	4618      	mov	r0, r3
 8015f28:	9a01      	ldr	r2, [sp, #4]
 8015f2a:	9903      	ldr	r1, [sp, #12]
 8015f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8015f2e:	f001 fb3d 	bl	80175ac <strncmp>
 8015f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f34:	2800      	cmp	r0, #0
 8015f36:	d1d8      	bne.n	8015eea <__gethex+0x1fc>
 8015f38:	461e      	mov	r6, r3
 8015f3a:	e791      	b.n	8015e60 <__gethex+0x172>
 8015f3c:	1eb9      	subs	r1, r7, #2
 8015f3e:	4628      	mov	r0, r5
 8015f40:	f000 fdc6 	bl	8016ad0 <__any_on>
 8015f44:	2800      	cmp	r0, #0
 8015f46:	d0b2      	beq.n	8015eae <__gethex+0x1c0>
 8015f48:	f04f 0a03 	mov.w	sl, #3
 8015f4c:	e7b1      	b.n	8015eb2 <__gethex+0x1c4>
 8015f4e:	da09      	bge.n	8015f64 <__gethex+0x276>
 8015f50:	1bf7      	subs	r7, r6, r7
 8015f52:	4629      	mov	r1, r5
 8015f54:	463a      	mov	r2, r7
 8015f56:	9802      	ldr	r0, [sp, #8]
 8015f58:	f000 fbdc 	bl	8016714 <__lshift>
 8015f5c:	1be4      	subs	r4, r4, r7
 8015f5e:	4605      	mov	r5, r0
 8015f60:	f100 0914 	add.w	r9, r0, #20
 8015f64:	f04f 0a00 	mov.w	sl, #0
 8015f68:	e7a8      	b.n	8015ebc <__gethex+0x1ce>
 8015f6a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015f6e:	42a0      	cmp	r0, r4
 8015f70:	dd6a      	ble.n	8016048 <__gethex+0x35a>
 8015f72:	1b04      	subs	r4, r0, r4
 8015f74:	42a6      	cmp	r6, r4
 8015f76:	dc2e      	bgt.n	8015fd6 <__gethex+0x2e8>
 8015f78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f7c:	2b02      	cmp	r3, #2
 8015f7e:	d022      	beq.n	8015fc6 <__gethex+0x2d8>
 8015f80:	2b03      	cmp	r3, #3
 8015f82:	d024      	beq.n	8015fce <__gethex+0x2e0>
 8015f84:	2b01      	cmp	r3, #1
 8015f86:	d115      	bne.n	8015fb4 <__gethex+0x2c6>
 8015f88:	42a6      	cmp	r6, r4
 8015f8a:	d113      	bne.n	8015fb4 <__gethex+0x2c6>
 8015f8c:	2e01      	cmp	r6, #1
 8015f8e:	dc0b      	bgt.n	8015fa8 <__gethex+0x2ba>
 8015f90:	9a06      	ldr	r2, [sp, #24]
 8015f92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f96:	6013      	str	r3, [r2, #0]
 8015f98:	2301      	movs	r3, #1
 8015f9a:	612b      	str	r3, [r5, #16]
 8015f9c:	f8c9 3000 	str.w	r3, [r9]
 8015fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015fa2:	2762      	movs	r7, #98	; 0x62
 8015fa4:	601d      	str	r5, [r3, #0]
 8015fa6:	e72a      	b.n	8015dfe <__gethex+0x110>
 8015fa8:	1e71      	subs	r1, r6, #1
 8015faa:	4628      	mov	r0, r5
 8015fac:	f000 fd90 	bl	8016ad0 <__any_on>
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	d1ed      	bne.n	8015f90 <__gethex+0x2a2>
 8015fb4:	4629      	mov	r1, r5
 8015fb6:	9802      	ldr	r0, [sp, #8]
 8015fb8:	f000 f9e0 	bl	801637c <_Bfree>
 8015fbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	6013      	str	r3, [r2, #0]
 8015fc2:	2750      	movs	r7, #80	; 0x50
 8015fc4:	e71b      	b.n	8015dfe <__gethex+0x110>
 8015fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d0e1      	beq.n	8015f90 <__gethex+0x2a2>
 8015fcc:	e7f2      	b.n	8015fb4 <__gethex+0x2c6>
 8015fce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d1dd      	bne.n	8015f90 <__gethex+0x2a2>
 8015fd4:	e7ee      	b.n	8015fb4 <__gethex+0x2c6>
 8015fd6:	1e67      	subs	r7, r4, #1
 8015fd8:	f1ba 0f00 	cmp.w	sl, #0
 8015fdc:	d131      	bne.n	8016042 <__gethex+0x354>
 8015fde:	b127      	cbz	r7, 8015fea <__gethex+0x2fc>
 8015fe0:	4639      	mov	r1, r7
 8015fe2:	4628      	mov	r0, r5
 8015fe4:	f000 fd74 	bl	8016ad0 <__any_on>
 8015fe8:	4682      	mov	sl, r0
 8015fea:	117a      	asrs	r2, r7, #5
 8015fec:	2301      	movs	r3, #1
 8015fee:	f007 071f 	and.w	r7, r7, #31
 8015ff2:	fa03 f707 	lsl.w	r7, r3, r7
 8015ff6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015ffa:	4621      	mov	r1, r4
 8015ffc:	421f      	tst	r7, r3
 8015ffe:	4628      	mov	r0, r5
 8016000:	bf18      	it	ne
 8016002:	f04a 0a02 	orrne.w	sl, sl, #2
 8016006:	1b36      	subs	r6, r6, r4
 8016008:	f7ff fe22 	bl	8015c50 <rshift>
 801600c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016010:	2702      	movs	r7, #2
 8016012:	f1ba 0f00 	cmp.w	sl, #0
 8016016:	d048      	beq.n	80160aa <__gethex+0x3bc>
 8016018:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801601c:	2b02      	cmp	r3, #2
 801601e:	d015      	beq.n	801604c <__gethex+0x35e>
 8016020:	2b03      	cmp	r3, #3
 8016022:	d017      	beq.n	8016054 <__gethex+0x366>
 8016024:	2b01      	cmp	r3, #1
 8016026:	d109      	bne.n	801603c <__gethex+0x34e>
 8016028:	f01a 0f02 	tst.w	sl, #2
 801602c:	d006      	beq.n	801603c <__gethex+0x34e>
 801602e:	f8d9 3000 	ldr.w	r3, [r9]
 8016032:	ea4a 0a03 	orr.w	sl, sl, r3
 8016036:	f01a 0f01 	tst.w	sl, #1
 801603a:	d10e      	bne.n	801605a <__gethex+0x36c>
 801603c:	f047 0710 	orr.w	r7, r7, #16
 8016040:	e033      	b.n	80160aa <__gethex+0x3bc>
 8016042:	f04f 0a01 	mov.w	sl, #1
 8016046:	e7d0      	b.n	8015fea <__gethex+0x2fc>
 8016048:	2701      	movs	r7, #1
 801604a:	e7e2      	b.n	8016012 <__gethex+0x324>
 801604c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801604e:	f1c3 0301 	rsb	r3, r3, #1
 8016052:	9315      	str	r3, [sp, #84]	; 0x54
 8016054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016056:	2b00      	cmp	r3, #0
 8016058:	d0f0      	beq.n	801603c <__gethex+0x34e>
 801605a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801605e:	f105 0314 	add.w	r3, r5, #20
 8016062:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016066:	eb03 010a 	add.w	r1, r3, sl
 801606a:	f04f 0c00 	mov.w	ip, #0
 801606e:	4618      	mov	r0, r3
 8016070:	f853 2b04 	ldr.w	r2, [r3], #4
 8016074:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016078:	d01c      	beq.n	80160b4 <__gethex+0x3c6>
 801607a:	3201      	adds	r2, #1
 801607c:	6002      	str	r2, [r0, #0]
 801607e:	2f02      	cmp	r7, #2
 8016080:	f105 0314 	add.w	r3, r5, #20
 8016084:	d138      	bne.n	80160f8 <__gethex+0x40a>
 8016086:	f8d8 2000 	ldr.w	r2, [r8]
 801608a:	3a01      	subs	r2, #1
 801608c:	42b2      	cmp	r2, r6
 801608e:	d10a      	bne.n	80160a6 <__gethex+0x3b8>
 8016090:	1171      	asrs	r1, r6, #5
 8016092:	2201      	movs	r2, #1
 8016094:	f006 061f 	and.w	r6, r6, #31
 8016098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801609c:	fa02 f606 	lsl.w	r6, r2, r6
 80160a0:	421e      	tst	r6, r3
 80160a2:	bf18      	it	ne
 80160a4:	4617      	movne	r7, r2
 80160a6:	f047 0720 	orr.w	r7, r7, #32
 80160aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160ac:	601d      	str	r5, [r3, #0]
 80160ae:	9b06      	ldr	r3, [sp, #24]
 80160b0:	601c      	str	r4, [r3, #0]
 80160b2:	e6a4      	b.n	8015dfe <__gethex+0x110>
 80160b4:	4299      	cmp	r1, r3
 80160b6:	f843 cc04 	str.w	ip, [r3, #-4]
 80160ba:	d8d8      	bhi.n	801606e <__gethex+0x380>
 80160bc:	68ab      	ldr	r3, [r5, #8]
 80160be:	4599      	cmp	r9, r3
 80160c0:	db12      	blt.n	80160e8 <__gethex+0x3fa>
 80160c2:	6869      	ldr	r1, [r5, #4]
 80160c4:	9802      	ldr	r0, [sp, #8]
 80160c6:	3101      	adds	r1, #1
 80160c8:	f000 f924 	bl	8016314 <_Balloc>
 80160cc:	692a      	ldr	r2, [r5, #16]
 80160ce:	3202      	adds	r2, #2
 80160d0:	f105 010c 	add.w	r1, r5, #12
 80160d4:	4683      	mov	fp, r0
 80160d6:	0092      	lsls	r2, r2, #2
 80160d8:	300c      	adds	r0, #12
 80160da:	f7fd f9c5 	bl	8013468 <memcpy>
 80160de:	4629      	mov	r1, r5
 80160e0:	9802      	ldr	r0, [sp, #8]
 80160e2:	f000 f94b 	bl	801637c <_Bfree>
 80160e6:	465d      	mov	r5, fp
 80160e8:	692b      	ldr	r3, [r5, #16]
 80160ea:	1c5a      	adds	r2, r3, #1
 80160ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80160f0:	612a      	str	r2, [r5, #16]
 80160f2:	2201      	movs	r2, #1
 80160f4:	615a      	str	r2, [r3, #20]
 80160f6:	e7c2      	b.n	801607e <__gethex+0x390>
 80160f8:	692a      	ldr	r2, [r5, #16]
 80160fa:	454a      	cmp	r2, r9
 80160fc:	dd0b      	ble.n	8016116 <__gethex+0x428>
 80160fe:	2101      	movs	r1, #1
 8016100:	4628      	mov	r0, r5
 8016102:	f7ff fda5 	bl	8015c50 <rshift>
 8016106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801610a:	3401      	adds	r4, #1
 801610c:	42a3      	cmp	r3, r4
 801610e:	f6ff aed9 	blt.w	8015ec4 <__gethex+0x1d6>
 8016112:	2701      	movs	r7, #1
 8016114:	e7c7      	b.n	80160a6 <__gethex+0x3b8>
 8016116:	f016 061f 	ands.w	r6, r6, #31
 801611a:	d0fa      	beq.n	8016112 <__gethex+0x424>
 801611c:	449a      	add	sl, r3
 801611e:	f1c6 0620 	rsb	r6, r6, #32
 8016122:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016126:	f000 f9b9 	bl	801649c <__hi0bits>
 801612a:	42b0      	cmp	r0, r6
 801612c:	dbe7      	blt.n	80160fe <__gethex+0x410>
 801612e:	e7f0      	b.n	8016112 <__gethex+0x424>

08016130 <L_shift>:
 8016130:	f1c2 0208 	rsb	r2, r2, #8
 8016134:	0092      	lsls	r2, r2, #2
 8016136:	b570      	push	{r4, r5, r6, lr}
 8016138:	f1c2 0620 	rsb	r6, r2, #32
 801613c:	6843      	ldr	r3, [r0, #4]
 801613e:	6804      	ldr	r4, [r0, #0]
 8016140:	fa03 f506 	lsl.w	r5, r3, r6
 8016144:	432c      	orrs	r4, r5
 8016146:	40d3      	lsrs	r3, r2
 8016148:	6004      	str	r4, [r0, #0]
 801614a:	f840 3f04 	str.w	r3, [r0, #4]!
 801614e:	4288      	cmp	r0, r1
 8016150:	d3f4      	bcc.n	801613c <L_shift+0xc>
 8016152:	bd70      	pop	{r4, r5, r6, pc}

08016154 <__match>:
 8016154:	b530      	push	{r4, r5, lr}
 8016156:	6803      	ldr	r3, [r0, #0]
 8016158:	3301      	adds	r3, #1
 801615a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801615e:	b914      	cbnz	r4, 8016166 <__match+0x12>
 8016160:	6003      	str	r3, [r0, #0]
 8016162:	2001      	movs	r0, #1
 8016164:	bd30      	pop	{r4, r5, pc}
 8016166:	f813 2b01 	ldrb.w	r2, [r3], #1
 801616a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801616e:	2d19      	cmp	r5, #25
 8016170:	bf98      	it	ls
 8016172:	3220      	addls	r2, #32
 8016174:	42a2      	cmp	r2, r4
 8016176:	d0f0      	beq.n	801615a <__match+0x6>
 8016178:	2000      	movs	r0, #0
 801617a:	e7f3      	b.n	8016164 <__match+0x10>

0801617c <__hexnan>:
 801617c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016180:	680b      	ldr	r3, [r1, #0]
 8016182:	6801      	ldr	r1, [r0, #0]
 8016184:	115f      	asrs	r7, r3, #5
 8016186:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801618a:	f013 031f 	ands.w	r3, r3, #31
 801618e:	b087      	sub	sp, #28
 8016190:	bf18      	it	ne
 8016192:	3704      	addne	r7, #4
 8016194:	2500      	movs	r5, #0
 8016196:	1f3e      	subs	r6, r7, #4
 8016198:	4682      	mov	sl, r0
 801619a:	4690      	mov	r8, r2
 801619c:	9301      	str	r3, [sp, #4]
 801619e:	f847 5c04 	str.w	r5, [r7, #-4]
 80161a2:	46b1      	mov	r9, r6
 80161a4:	4634      	mov	r4, r6
 80161a6:	9502      	str	r5, [sp, #8]
 80161a8:	46ab      	mov	fp, r5
 80161aa:	784a      	ldrb	r2, [r1, #1]
 80161ac:	1c4b      	adds	r3, r1, #1
 80161ae:	9303      	str	r3, [sp, #12]
 80161b0:	b342      	cbz	r2, 8016204 <__hexnan+0x88>
 80161b2:	4610      	mov	r0, r2
 80161b4:	9105      	str	r1, [sp, #20]
 80161b6:	9204      	str	r2, [sp, #16]
 80161b8:	f7ff fd84 	bl	8015cc4 <__hexdig_fun>
 80161bc:	2800      	cmp	r0, #0
 80161be:	d143      	bne.n	8016248 <__hexnan+0xcc>
 80161c0:	9a04      	ldr	r2, [sp, #16]
 80161c2:	9905      	ldr	r1, [sp, #20]
 80161c4:	2a20      	cmp	r2, #32
 80161c6:	d818      	bhi.n	80161fa <__hexnan+0x7e>
 80161c8:	9b02      	ldr	r3, [sp, #8]
 80161ca:	459b      	cmp	fp, r3
 80161cc:	dd13      	ble.n	80161f6 <__hexnan+0x7a>
 80161ce:	454c      	cmp	r4, r9
 80161d0:	d206      	bcs.n	80161e0 <__hexnan+0x64>
 80161d2:	2d07      	cmp	r5, #7
 80161d4:	dc04      	bgt.n	80161e0 <__hexnan+0x64>
 80161d6:	462a      	mov	r2, r5
 80161d8:	4649      	mov	r1, r9
 80161da:	4620      	mov	r0, r4
 80161dc:	f7ff ffa8 	bl	8016130 <L_shift>
 80161e0:	4544      	cmp	r4, r8
 80161e2:	d944      	bls.n	801626e <__hexnan+0xf2>
 80161e4:	2300      	movs	r3, #0
 80161e6:	f1a4 0904 	sub.w	r9, r4, #4
 80161ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80161ee:	f8cd b008 	str.w	fp, [sp, #8]
 80161f2:	464c      	mov	r4, r9
 80161f4:	461d      	mov	r5, r3
 80161f6:	9903      	ldr	r1, [sp, #12]
 80161f8:	e7d7      	b.n	80161aa <__hexnan+0x2e>
 80161fa:	2a29      	cmp	r2, #41	; 0x29
 80161fc:	d14a      	bne.n	8016294 <__hexnan+0x118>
 80161fe:	3102      	adds	r1, #2
 8016200:	f8ca 1000 	str.w	r1, [sl]
 8016204:	f1bb 0f00 	cmp.w	fp, #0
 8016208:	d044      	beq.n	8016294 <__hexnan+0x118>
 801620a:	454c      	cmp	r4, r9
 801620c:	d206      	bcs.n	801621c <__hexnan+0xa0>
 801620e:	2d07      	cmp	r5, #7
 8016210:	dc04      	bgt.n	801621c <__hexnan+0xa0>
 8016212:	462a      	mov	r2, r5
 8016214:	4649      	mov	r1, r9
 8016216:	4620      	mov	r0, r4
 8016218:	f7ff ff8a 	bl	8016130 <L_shift>
 801621c:	4544      	cmp	r4, r8
 801621e:	d928      	bls.n	8016272 <__hexnan+0xf6>
 8016220:	4643      	mov	r3, r8
 8016222:	f854 2b04 	ldr.w	r2, [r4], #4
 8016226:	f843 2b04 	str.w	r2, [r3], #4
 801622a:	42a6      	cmp	r6, r4
 801622c:	d2f9      	bcs.n	8016222 <__hexnan+0xa6>
 801622e:	2200      	movs	r2, #0
 8016230:	f843 2b04 	str.w	r2, [r3], #4
 8016234:	429e      	cmp	r6, r3
 8016236:	d2fb      	bcs.n	8016230 <__hexnan+0xb4>
 8016238:	6833      	ldr	r3, [r6, #0]
 801623a:	b91b      	cbnz	r3, 8016244 <__hexnan+0xc8>
 801623c:	4546      	cmp	r6, r8
 801623e:	d127      	bne.n	8016290 <__hexnan+0x114>
 8016240:	2301      	movs	r3, #1
 8016242:	6033      	str	r3, [r6, #0]
 8016244:	2005      	movs	r0, #5
 8016246:	e026      	b.n	8016296 <__hexnan+0x11a>
 8016248:	3501      	adds	r5, #1
 801624a:	2d08      	cmp	r5, #8
 801624c:	f10b 0b01 	add.w	fp, fp, #1
 8016250:	dd06      	ble.n	8016260 <__hexnan+0xe4>
 8016252:	4544      	cmp	r4, r8
 8016254:	d9cf      	bls.n	80161f6 <__hexnan+0x7a>
 8016256:	2300      	movs	r3, #0
 8016258:	f844 3c04 	str.w	r3, [r4, #-4]
 801625c:	2501      	movs	r5, #1
 801625e:	3c04      	subs	r4, #4
 8016260:	6822      	ldr	r2, [r4, #0]
 8016262:	f000 000f 	and.w	r0, r0, #15
 8016266:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801626a:	6020      	str	r0, [r4, #0]
 801626c:	e7c3      	b.n	80161f6 <__hexnan+0x7a>
 801626e:	2508      	movs	r5, #8
 8016270:	e7c1      	b.n	80161f6 <__hexnan+0x7a>
 8016272:	9b01      	ldr	r3, [sp, #4]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d0df      	beq.n	8016238 <__hexnan+0xbc>
 8016278:	f04f 32ff 	mov.w	r2, #4294967295
 801627c:	f1c3 0320 	rsb	r3, r3, #32
 8016280:	fa22 f303 	lsr.w	r3, r2, r3
 8016284:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016288:	401a      	ands	r2, r3
 801628a:	f847 2c04 	str.w	r2, [r7, #-4]
 801628e:	e7d3      	b.n	8016238 <__hexnan+0xbc>
 8016290:	3e04      	subs	r6, #4
 8016292:	e7d1      	b.n	8016238 <__hexnan+0xbc>
 8016294:	2004      	movs	r0, #4
 8016296:	b007      	add	sp, #28
 8016298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801629c <__locale_ctype_ptr_l>:
 801629c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80162a0:	4770      	bx	lr
	...

080162a4 <__locale_ctype_ptr>:
 80162a4:	4b04      	ldr	r3, [pc, #16]	; (80162b8 <__locale_ctype_ptr+0x14>)
 80162a6:	4a05      	ldr	r2, [pc, #20]	; (80162bc <__locale_ctype_ptr+0x18>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	6a1b      	ldr	r3, [r3, #32]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	bf08      	it	eq
 80162b0:	4613      	moveq	r3, r2
 80162b2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80162b6:	4770      	bx	lr
 80162b8:	2000000c 	.word	0x2000000c
 80162bc:	20000070 	.word	0x20000070

080162c0 <__localeconv_l>:
 80162c0:	30f0      	adds	r0, #240	; 0xf0
 80162c2:	4770      	bx	lr

080162c4 <_localeconv_r>:
 80162c4:	4b04      	ldr	r3, [pc, #16]	; (80162d8 <_localeconv_r+0x14>)
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	6a18      	ldr	r0, [r3, #32]
 80162ca:	4b04      	ldr	r3, [pc, #16]	; (80162dc <_localeconv_r+0x18>)
 80162cc:	2800      	cmp	r0, #0
 80162ce:	bf08      	it	eq
 80162d0:	4618      	moveq	r0, r3
 80162d2:	30f0      	adds	r0, #240	; 0xf0
 80162d4:	4770      	bx	lr
 80162d6:	bf00      	nop
 80162d8:	2000000c 	.word	0x2000000c
 80162dc:	20000070 	.word	0x20000070

080162e0 <malloc>:
 80162e0:	4b02      	ldr	r3, [pc, #8]	; (80162ec <malloc+0xc>)
 80162e2:	4601      	mov	r1, r0
 80162e4:	6818      	ldr	r0, [r3, #0]
 80162e6:	f000 bc71 	b.w	8016bcc <_malloc_r>
 80162ea:	bf00      	nop
 80162ec:	2000000c 	.word	0x2000000c

080162f0 <__ascii_mbtowc>:
 80162f0:	b082      	sub	sp, #8
 80162f2:	b901      	cbnz	r1, 80162f6 <__ascii_mbtowc+0x6>
 80162f4:	a901      	add	r1, sp, #4
 80162f6:	b142      	cbz	r2, 801630a <__ascii_mbtowc+0x1a>
 80162f8:	b14b      	cbz	r3, 801630e <__ascii_mbtowc+0x1e>
 80162fa:	7813      	ldrb	r3, [r2, #0]
 80162fc:	600b      	str	r3, [r1, #0]
 80162fe:	7812      	ldrb	r2, [r2, #0]
 8016300:	1c10      	adds	r0, r2, #0
 8016302:	bf18      	it	ne
 8016304:	2001      	movne	r0, #1
 8016306:	b002      	add	sp, #8
 8016308:	4770      	bx	lr
 801630a:	4610      	mov	r0, r2
 801630c:	e7fb      	b.n	8016306 <__ascii_mbtowc+0x16>
 801630e:	f06f 0001 	mvn.w	r0, #1
 8016312:	e7f8      	b.n	8016306 <__ascii_mbtowc+0x16>

08016314 <_Balloc>:
 8016314:	b570      	push	{r4, r5, r6, lr}
 8016316:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016318:	4604      	mov	r4, r0
 801631a:	460e      	mov	r6, r1
 801631c:	b93d      	cbnz	r5, 801632e <_Balloc+0x1a>
 801631e:	2010      	movs	r0, #16
 8016320:	f7ff ffde 	bl	80162e0 <malloc>
 8016324:	6260      	str	r0, [r4, #36]	; 0x24
 8016326:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801632a:	6005      	str	r5, [r0, #0]
 801632c:	60c5      	str	r5, [r0, #12]
 801632e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016330:	68eb      	ldr	r3, [r5, #12]
 8016332:	b183      	cbz	r3, 8016356 <_Balloc+0x42>
 8016334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016336:	68db      	ldr	r3, [r3, #12]
 8016338:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801633c:	b9b8      	cbnz	r0, 801636e <_Balloc+0x5a>
 801633e:	2101      	movs	r1, #1
 8016340:	fa01 f506 	lsl.w	r5, r1, r6
 8016344:	1d6a      	adds	r2, r5, #5
 8016346:	0092      	lsls	r2, r2, #2
 8016348:	4620      	mov	r0, r4
 801634a:	f000 fbe2 	bl	8016b12 <_calloc_r>
 801634e:	b160      	cbz	r0, 801636a <_Balloc+0x56>
 8016350:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016354:	e00e      	b.n	8016374 <_Balloc+0x60>
 8016356:	2221      	movs	r2, #33	; 0x21
 8016358:	2104      	movs	r1, #4
 801635a:	4620      	mov	r0, r4
 801635c:	f000 fbd9 	bl	8016b12 <_calloc_r>
 8016360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016362:	60e8      	str	r0, [r5, #12]
 8016364:	68db      	ldr	r3, [r3, #12]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d1e4      	bne.n	8016334 <_Balloc+0x20>
 801636a:	2000      	movs	r0, #0
 801636c:	bd70      	pop	{r4, r5, r6, pc}
 801636e:	6802      	ldr	r2, [r0, #0]
 8016370:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016374:	2300      	movs	r3, #0
 8016376:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801637a:	e7f7      	b.n	801636c <_Balloc+0x58>

0801637c <_Bfree>:
 801637c:	b570      	push	{r4, r5, r6, lr}
 801637e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016380:	4606      	mov	r6, r0
 8016382:	460d      	mov	r5, r1
 8016384:	b93c      	cbnz	r4, 8016396 <_Bfree+0x1a>
 8016386:	2010      	movs	r0, #16
 8016388:	f7ff ffaa 	bl	80162e0 <malloc>
 801638c:	6270      	str	r0, [r6, #36]	; 0x24
 801638e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016392:	6004      	str	r4, [r0, #0]
 8016394:	60c4      	str	r4, [r0, #12]
 8016396:	b13d      	cbz	r5, 80163a8 <_Bfree+0x2c>
 8016398:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801639a:	686a      	ldr	r2, [r5, #4]
 801639c:	68db      	ldr	r3, [r3, #12]
 801639e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80163a2:	6029      	str	r1, [r5, #0]
 80163a4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80163a8:	bd70      	pop	{r4, r5, r6, pc}

080163aa <__multadd>:
 80163aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ae:	690d      	ldr	r5, [r1, #16]
 80163b0:	461f      	mov	r7, r3
 80163b2:	4606      	mov	r6, r0
 80163b4:	460c      	mov	r4, r1
 80163b6:	f101 0c14 	add.w	ip, r1, #20
 80163ba:	2300      	movs	r3, #0
 80163bc:	f8dc 0000 	ldr.w	r0, [ip]
 80163c0:	b281      	uxth	r1, r0
 80163c2:	fb02 7101 	mla	r1, r2, r1, r7
 80163c6:	0c0f      	lsrs	r7, r1, #16
 80163c8:	0c00      	lsrs	r0, r0, #16
 80163ca:	fb02 7000 	mla	r0, r2, r0, r7
 80163ce:	b289      	uxth	r1, r1
 80163d0:	3301      	adds	r3, #1
 80163d2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80163d6:	429d      	cmp	r5, r3
 80163d8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80163dc:	f84c 1b04 	str.w	r1, [ip], #4
 80163e0:	dcec      	bgt.n	80163bc <__multadd+0x12>
 80163e2:	b1d7      	cbz	r7, 801641a <__multadd+0x70>
 80163e4:	68a3      	ldr	r3, [r4, #8]
 80163e6:	42ab      	cmp	r3, r5
 80163e8:	dc12      	bgt.n	8016410 <__multadd+0x66>
 80163ea:	6861      	ldr	r1, [r4, #4]
 80163ec:	4630      	mov	r0, r6
 80163ee:	3101      	adds	r1, #1
 80163f0:	f7ff ff90 	bl	8016314 <_Balloc>
 80163f4:	6922      	ldr	r2, [r4, #16]
 80163f6:	3202      	adds	r2, #2
 80163f8:	f104 010c 	add.w	r1, r4, #12
 80163fc:	4680      	mov	r8, r0
 80163fe:	0092      	lsls	r2, r2, #2
 8016400:	300c      	adds	r0, #12
 8016402:	f7fd f831 	bl	8013468 <memcpy>
 8016406:	4621      	mov	r1, r4
 8016408:	4630      	mov	r0, r6
 801640a:	f7ff ffb7 	bl	801637c <_Bfree>
 801640e:	4644      	mov	r4, r8
 8016410:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016414:	3501      	adds	r5, #1
 8016416:	615f      	str	r7, [r3, #20]
 8016418:	6125      	str	r5, [r4, #16]
 801641a:	4620      	mov	r0, r4
 801641c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016420 <__s2b>:
 8016420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016424:	460c      	mov	r4, r1
 8016426:	4615      	mov	r5, r2
 8016428:	461f      	mov	r7, r3
 801642a:	2209      	movs	r2, #9
 801642c:	3308      	adds	r3, #8
 801642e:	4606      	mov	r6, r0
 8016430:	fb93 f3f2 	sdiv	r3, r3, r2
 8016434:	2100      	movs	r1, #0
 8016436:	2201      	movs	r2, #1
 8016438:	429a      	cmp	r2, r3
 801643a:	db20      	blt.n	801647e <__s2b+0x5e>
 801643c:	4630      	mov	r0, r6
 801643e:	f7ff ff69 	bl	8016314 <_Balloc>
 8016442:	9b08      	ldr	r3, [sp, #32]
 8016444:	6143      	str	r3, [r0, #20]
 8016446:	2d09      	cmp	r5, #9
 8016448:	f04f 0301 	mov.w	r3, #1
 801644c:	6103      	str	r3, [r0, #16]
 801644e:	dd19      	ble.n	8016484 <__s2b+0x64>
 8016450:	f104 0809 	add.w	r8, r4, #9
 8016454:	46c1      	mov	r9, r8
 8016456:	442c      	add	r4, r5
 8016458:	f819 3b01 	ldrb.w	r3, [r9], #1
 801645c:	4601      	mov	r1, r0
 801645e:	3b30      	subs	r3, #48	; 0x30
 8016460:	220a      	movs	r2, #10
 8016462:	4630      	mov	r0, r6
 8016464:	f7ff ffa1 	bl	80163aa <__multadd>
 8016468:	45a1      	cmp	r9, r4
 801646a:	d1f5      	bne.n	8016458 <__s2b+0x38>
 801646c:	eb08 0405 	add.w	r4, r8, r5
 8016470:	3c08      	subs	r4, #8
 8016472:	1b2d      	subs	r5, r5, r4
 8016474:	1963      	adds	r3, r4, r5
 8016476:	42bb      	cmp	r3, r7
 8016478:	db07      	blt.n	801648a <__s2b+0x6a>
 801647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801647e:	0052      	lsls	r2, r2, #1
 8016480:	3101      	adds	r1, #1
 8016482:	e7d9      	b.n	8016438 <__s2b+0x18>
 8016484:	340a      	adds	r4, #10
 8016486:	2509      	movs	r5, #9
 8016488:	e7f3      	b.n	8016472 <__s2b+0x52>
 801648a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801648e:	4601      	mov	r1, r0
 8016490:	3b30      	subs	r3, #48	; 0x30
 8016492:	220a      	movs	r2, #10
 8016494:	4630      	mov	r0, r6
 8016496:	f7ff ff88 	bl	80163aa <__multadd>
 801649a:	e7eb      	b.n	8016474 <__s2b+0x54>

0801649c <__hi0bits>:
 801649c:	0c02      	lsrs	r2, r0, #16
 801649e:	0412      	lsls	r2, r2, #16
 80164a0:	4603      	mov	r3, r0
 80164a2:	b9b2      	cbnz	r2, 80164d2 <__hi0bits+0x36>
 80164a4:	0403      	lsls	r3, r0, #16
 80164a6:	2010      	movs	r0, #16
 80164a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80164ac:	bf04      	itt	eq
 80164ae:	021b      	lsleq	r3, r3, #8
 80164b0:	3008      	addeq	r0, #8
 80164b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80164b6:	bf04      	itt	eq
 80164b8:	011b      	lsleq	r3, r3, #4
 80164ba:	3004      	addeq	r0, #4
 80164bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80164c0:	bf04      	itt	eq
 80164c2:	009b      	lsleq	r3, r3, #2
 80164c4:	3002      	addeq	r0, #2
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	db06      	blt.n	80164d8 <__hi0bits+0x3c>
 80164ca:	005b      	lsls	r3, r3, #1
 80164cc:	d503      	bpl.n	80164d6 <__hi0bits+0x3a>
 80164ce:	3001      	adds	r0, #1
 80164d0:	4770      	bx	lr
 80164d2:	2000      	movs	r0, #0
 80164d4:	e7e8      	b.n	80164a8 <__hi0bits+0xc>
 80164d6:	2020      	movs	r0, #32
 80164d8:	4770      	bx	lr

080164da <__lo0bits>:
 80164da:	6803      	ldr	r3, [r0, #0]
 80164dc:	f013 0207 	ands.w	r2, r3, #7
 80164e0:	4601      	mov	r1, r0
 80164e2:	d00b      	beq.n	80164fc <__lo0bits+0x22>
 80164e4:	07da      	lsls	r2, r3, #31
 80164e6:	d423      	bmi.n	8016530 <__lo0bits+0x56>
 80164e8:	0798      	lsls	r0, r3, #30
 80164ea:	bf49      	itett	mi
 80164ec:	085b      	lsrmi	r3, r3, #1
 80164ee:	089b      	lsrpl	r3, r3, #2
 80164f0:	2001      	movmi	r0, #1
 80164f2:	600b      	strmi	r3, [r1, #0]
 80164f4:	bf5c      	itt	pl
 80164f6:	600b      	strpl	r3, [r1, #0]
 80164f8:	2002      	movpl	r0, #2
 80164fa:	4770      	bx	lr
 80164fc:	b298      	uxth	r0, r3
 80164fe:	b9a8      	cbnz	r0, 801652c <__lo0bits+0x52>
 8016500:	0c1b      	lsrs	r3, r3, #16
 8016502:	2010      	movs	r0, #16
 8016504:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016508:	bf04      	itt	eq
 801650a:	0a1b      	lsreq	r3, r3, #8
 801650c:	3008      	addeq	r0, #8
 801650e:	071a      	lsls	r2, r3, #28
 8016510:	bf04      	itt	eq
 8016512:	091b      	lsreq	r3, r3, #4
 8016514:	3004      	addeq	r0, #4
 8016516:	079a      	lsls	r2, r3, #30
 8016518:	bf04      	itt	eq
 801651a:	089b      	lsreq	r3, r3, #2
 801651c:	3002      	addeq	r0, #2
 801651e:	07da      	lsls	r2, r3, #31
 8016520:	d402      	bmi.n	8016528 <__lo0bits+0x4e>
 8016522:	085b      	lsrs	r3, r3, #1
 8016524:	d006      	beq.n	8016534 <__lo0bits+0x5a>
 8016526:	3001      	adds	r0, #1
 8016528:	600b      	str	r3, [r1, #0]
 801652a:	4770      	bx	lr
 801652c:	4610      	mov	r0, r2
 801652e:	e7e9      	b.n	8016504 <__lo0bits+0x2a>
 8016530:	2000      	movs	r0, #0
 8016532:	4770      	bx	lr
 8016534:	2020      	movs	r0, #32
 8016536:	4770      	bx	lr

08016538 <__i2b>:
 8016538:	b510      	push	{r4, lr}
 801653a:	460c      	mov	r4, r1
 801653c:	2101      	movs	r1, #1
 801653e:	f7ff fee9 	bl	8016314 <_Balloc>
 8016542:	2201      	movs	r2, #1
 8016544:	6144      	str	r4, [r0, #20]
 8016546:	6102      	str	r2, [r0, #16]
 8016548:	bd10      	pop	{r4, pc}

0801654a <__multiply>:
 801654a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801654e:	4614      	mov	r4, r2
 8016550:	690a      	ldr	r2, [r1, #16]
 8016552:	6923      	ldr	r3, [r4, #16]
 8016554:	429a      	cmp	r2, r3
 8016556:	bfb8      	it	lt
 8016558:	460b      	movlt	r3, r1
 801655a:	4688      	mov	r8, r1
 801655c:	bfbc      	itt	lt
 801655e:	46a0      	movlt	r8, r4
 8016560:	461c      	movlt	r4, r3
 8016562:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016566:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801656a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801656e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016572:	eb07 0609 	add.w	r6, r7, r9
 8016576:	42b3      	cmp	r3, r6
 8016578:	bfb8      	it	lt
 801657a:	3101      	addlt	r1, #1
 801657c:	f7ff feca 	bl	8016314 <_Balloc>
 8016580:	f100 0514 	add.w	r5, r0, #20
 8016584:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016588:	462b      	mov	r3, r5
 801658a:	2200      	movs	r2, #0
 801658c:	4573      	cmp	r3, lr
 801658e:	d316      	bcc.n	80165be <__multiply+0x74>
 8016590:	f104 0214 	add.w	r2, r4, #20
 8016594:	f108 0114 	add.w	r1, r8, #20
 8016598:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801659c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80165a0:	9300      	str	r3, [sp, #0]
 80165a2:	9b00      	ldr	r3, [sp, #0]
 80165a4:	9201      	str	r2, [sp, #4]
 80165a6:	4293      	cmp	r3, r2
 80165a8:	d80c      	bhi.n	80165c4 <__multiply+0x7a>
 80165aa:	2e00      	cmp	r6, #0
 80165ac:	dd03      	ble.n	80165b6 <__multiply+0x6c>
 80165ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d05d      	beq.n	8016672 <__multiply+0x128>
 80165b6:	6106      	str	r6, [r0, #16]
 80165b8:	b003      	add	sp, #12
 80165ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165be:	f843 2b04 	str.w	r2, [r3], #4
 80165c2:	e7e3      	b.n	801658c <__multiply+0x42>
 80165c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80165c8:	f1bb 0f00 	cmp.w	fp, #0
 80165cc:	d023      	beq.n	8016616 <__multiply+0xcc>
 80165ce:	4689      	mov	r9, r1
 80165d0:	46ac      	mov	ip, r5
 80165d2:	f04f 0800 	mov.w	r8, #0
 80165d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80165da:	f8dc a000 	ldr.w	sl, [ip]
 80165de:	b2a3      	uxth	r3, r4
 80165e0:	fa1f fa8a 	uxth.w	sl, sl
 80165e4:	fb0b a303 	mla	r3, fp, r3, sl
 80165e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80165ec:	f8dc 4000 	ldr.w	r4, [ip]
 80165f0:	4443      	add	r3, r8
 80165f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80165f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80165fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80165fe:	46e2      	mov	sl, ip
 8016600:	b29b      	uxth	r3, r3
 8016602:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016606:	454f      	cmp	r7, r9
 8016608:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801660c:	f84a 3b04 	str.w	r3, [sl], #4
 8016610:	d82b      	bhi.n	801666a <__multiply+0x120>
 8016612:	f8cc 8004 	str.w	r8, [ip, #4]
 8016616:	9b01      	ldr	r3, [sp, #4]
 8016618:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801661c:	3204      	adds	r2, #4
 801661e:	f1ba 0f00 	cmp.w	sl, #0
 8016622:	d020      	beq.n	8016666 <__multiply+0x11c>
 8016624:	682b      	ldr	r3, [r5, #0]
 8016626:	4689      	mov	r9, r1
 8016628:	46a8      	mov	r8, r5
 801662a:	f04f 0b00 	mov.w	fp, #0
 801662e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016632:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016636:	fb0a 440c 	mla	r4, sl, ip, r4
 801663a:	445c      	add	r4, fp
 801663c:	46c4      	mov	ip, r8
 801663e:	b29b      	uxth	r3, r3
 8016640:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016644:	f84c 3b04 	str.w	r3, [ip], #4
 8016648:	f859 3b04 	ldr.w	r3, [r9], #4
 801664c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016650:	0c1b      	lsrs	r3, r3, #16
 8016652:	fb0a b303 	mla	r3, sl, r3, fp
 8016656:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801665a:	454f      	cmp	r7, r9
 801665c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016660:	d805      	bhi.n	801666e <__multiply+0x124>
 8016662:	f8c8 3004 	str.w	r3, [r8, #4]
 8016666:	3504      	adds	r5, #4
 8016668:	e79b      	b.n	80165a2 <__multiply+0x58>
 801666a:	46d4      	mov	ip, sl
 801666c:	e7b3      	b.n	80165d6 <__multiply+0x8c>
 801666e:	46e0      	mov	r8, ip
 8016670:	e7dd      	b.n	801662e <__multiply+0xe4>
 8016672:	3e01      	subs	r6, #1
 8016674:	e799      	b.n	80165aa <__multiply+0x60>
	...

08016678 <__pow5mult>:
 8016678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801667c:	4615      	mov	r5, r2
 801667e:	f012 0203 	ands.w	r2, r2, #3
 8016682:	4606      	mov	r6, r0
 8016684:	460f      	mov	r7, r1
 8016686:	d007      	beq.n	8016698 <__pow5mult+0x20>
 8016688:	3a01      	subs	r2, #1
 801668a:	4c21      	ldr	r4, [pc, #132]	; (8016710 <__pow5mult+0x98>)
 801668c:	2300      	movs	r3, #0
 801668e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016692:	f7ff fe8a 	bl	80163aa <__multadd>
 8016696:	4607      	mov	r7, r0
 8016698:	10ad      	asrs	r5, r5, #2
 801669a:	d035      	beq.n	8016708 <__pow5mult+0x90>
 801669c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801669e:	b93c      	cbnz	r4, 80166b0 <__pow5mult+0x38>
 80166a0:	2010      	movs	r0, #16
 80166a2:	f7ff fe1d 	bl	80162e0 <malloc>
 80166a6:	6270      	str	r0, [r6, #36]	; 0x24
 80166a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80166ac:	6004      	str	r4, [r0, #0]
 80166ae:	60c4      	str	r4, [r0, #12]
 80166b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80166b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80166b8:	b94c      	cbnz	r4, 80166ce <__pow5mult+0x56>
 80166ba:	f240 2171 	movw	r1, #625	; 0x271
 80166be:	4630      	mov	r0, r6
 80166c0:	f7ff ff3a 	bl	8016538 <__i2b>
 80166c4:	2300      	movs	r3, #0
 80166c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80166ca:	4604      	mov	r4, r0
 80166cc:	6003      	str	r3, [r0, #0]
 80166ce:	f04f 0800 	mov.w	r8, #0
 80166d2:	07eb      	lsls	r3, r5, #31
 80166d4:	d50a      	bpl.n	80166ec <__pow5mult+0x74>
 80166d6:	4639      	mov	r1, r7
 80166d8:	4622      	mov	r2, r4
 80166da:	4630      	mov	r0, r6
 80166dc:	f7ff ff35 	bl	801654a <__multiply>
 80166e0:	4639      	mov	r1, r7
 80166e2:	4681      	mov	r9, r0
 80166e4:	4630      	mov	r0, r6
 80166e6:	f7ff fe49 	bl	801637c <_Bfree>
 80166ea:	464f      	mov	r7, r9
 80166ec:	106d      	asrs	r5, r5, #1
 80166ee:	d00b      	beq.n	8016708 <__pow5mult+0x90>
 80166f0:	6820      	ldr	r0, [r4, #0]
 80166f2:	b938      	cbnz	r0, 8016704 <__pow5mult+0x8c>
 80166f4:	4622      	mov	r2, r4
 80166f6:	4621      	mov	r1, r4
 80166f8:	4630      	mov	r0, r6
 80166fa:	f7ff ff26 	bl	801654a <__multiply>
 80166fe:	6020      	str	r0, [r4, #0]
 8016700:	f8c0 8000 	str.w	r8, [r0]
 8016704:	4604      	mov	r4, r0
 8016706:	e7e4      	b.n	80166d2 <__pow5mult+0x5a>
 8016708:	4638      	mov	r0, r7
 801670a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801670e:	bf00      	nop
 8016710:	080181e8 	.word	0x080181e8

08016714 <__lshift>:
 8016714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016718:	460c      	mov	r4, r1
 801671a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801671e:	6923      	ldr	r3, [r4, #16]
 8016720:	6849      	ldr	r1, [r1, #4]
 8016722:	eb0a 0903 	add.w	r9, sl, r3
 8016726:	68a3      	ldr	r3, [r4, #8]
 8016728:	4607      	mov	r7, r0
 801672a:	4616      	mov	r6, r2
 801672c:	f109 0501 	add.w	r5, r9, #1
 8016730:	42ab      	cmp	r3, r5
 8016732:	db32      	blt.n	801679a <__lshift+0x86>
 8016734:	4638      	mov	r0, r7
 8016736:	f7ff fded 	bl	8016314 <_Balloc>
 801673a:	2300      	movs	r3, #0
 801673c:	4680      	mov	r8, r0
 801673e:	f100 0114 	add.w	r1, r0, #20
 8016742:	461a      	mov	r2, r3
 8016744:	4553      	cmp	r3, sl
 8016746:	db2b      	blt.n	80167a0 <__lshift+0x8c>
 8016748:	6920      	ldr	r0, [r4, #16]
 801674a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801674e:	f104 0314 	add.w	r3, r4, #20
 8016752:	f016 021f 	ands.w	r2, r6, #31
 8016756:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801675a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801675e:	d025      	beq.n	80167ac <__lshift+0x98>
 8016760:	f1c2 0e20 	rsb	lr, r2, #32
 8016764:	2000      	movs	r0, #0
 8016766:	681e      	ldr	r6, [r3, #0]
 8016768:	468a      	mov	sl, r1
 801676a:	4096      	lsls	r6, r2
 801676c:	4330      	orrs	r0, r6
 801676e:	f84a 0b04 	str.w	r0, [sl], #4
 8016772:	f853 0b04 	ldr.w	r0, [r3], #4
 8016776:	459c      	cmp	ip, r3
 8016778:	fa20 f00e 	lsr.w	r0, r0, lr
 801677c:	d814      	bhi.n	80167a8 <__lshift+0x94>
 801677e:	6048      	str	r0, [r1, #4]
 8016780:	b108      	cbz	r0, 8016786 <__lshift+0x72>
 8016782:	f109 0502 	add.w	r5, r9, #2
 8016786:	3d01      	subs	r5, #1
 8016788:	4638      	mov	r0, r7
 801678a:	f8c8 5010 	str.w	r5, [r8, #16]
 801678e:	4621      	mov	r1, r4
 8016790:	f7ff fdf4 	bl	801637c <_Bfree>
 8016794:	4640      	mov	r0, r8
 8016796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801679a:	3101      	adds	r1, #1
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	e7c7      	b.n	8016730 <__lshift+0x1c>
 80167a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80167a4:	3301      	adds	r3, #1
 80167a6:	e7cd      	b.n	8016744 <__lshift+0x30>
 80167a8:	4651      	mov	r1, sl
 80167aa:	e7dc      	b.n	8016766 <__lshift+0x52>
 80167ac:	3904      	subs	r1, #4
 80167ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80167b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80167b6:	459c      	cmp	ip, r3
 80167b8:	d8f9      	bhi.n	80167ae <__lshift+0x9a>
 80167ba:	e7e4      	b.n	8016786 <__lshift+0x72>

080167bc <__mcmp>:
 80167bc:	6903      	ldr	r3, [r0, #16]
 80167be:	690a      	ldr	r2, [r1, #16]
 80167c0:	1a9b      	subs	r3, r3, r2
 80167c2:	b530      	push	{r4, r5, lr}
 80167c4:	d10c      	bne.n	80167e0 <__mcmp+0x24>
 80167c6:	0092      	lsls	r2, r2, #2
 80167c8:	3014      	adds	r0, #20
 80167ca:	3114      	adds	r1, #20
 80167cc:	1884      	adds	r4, r0, r2
 80167ce:	4411      	add	r1, r2
 80167d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80167d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80167d8:	4295      	cmp	r5, r2
 80167da:	d003      	beq.n	80167e4 <__mcmp+0x28>
 80167dc:	d305      	bcc.n	80167ea <__mcmp+0x2e>
 80167de:	2301      	movs	r3, #1
 80167e0:	4618      	mov	r0, r3
 80167e2:	bd30      	pop	{r4, r5, pc}
 80167e4:	42a0      	cmp	r0, r4
 80167e6:	d3f3      	bcc.n	80167d0 <__mcmp+0x14>
 80167e8:	e7fa      	b.n	80167e0 <__mcmp+0x24>
 80167ea:	f04f 33ff 	mov.w	r3, #4294967295
 80167ee:	e7f7      	b.n	80167e0 <__mcmp+0x24>

080167f0 <__mdiff>:
 80167f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167f4:	460d      	mov	r5, r1
 80167f6:	4607      	mov	r7, r0
 80167f8:	4611      	mov	r1, r2
 80167fa:	4628      	mov	r0, r5
 80167fc:	4614      	mov	r4, r2
 80167fe:	f7ff ffdd 	bl	80167bc <__mcmp>
 8016802:	1e06      	subs	r6, r0, #0
 8016804:	d108      	bne.n	8016818 <__mdiff+0x28>
 8016806:	4631      	mov	r1, r6
 8016808:	4638      	mov	r0, r7
 801680a:	f7ff fd83 	bl	8016314 <_Balloc>
 801680e:	2301      	movs	r3, #1
 8016810:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016818:	bfa4      	itt	ge
 801681a:	4623      	movge	r3, r4
 801681c:	462c      	movge	r4, r5
 801681e:	4638      	mov	r0, r7
 8016820:	6861      	ldr	r1, [r4, #4]
 8016822:	bfa6      	itte	ge
 8016824:	461d      	movge	r5, r3
 8016826:	2600      	movge	r6, #0
 8016828:	2601      	movlt	r6, #1
 801682a:	f7ff fd73 	bl	8016314 <_Balloc>
 801682e:	692b      	ldr	r3, [r5, #16]
 8016830:	60c6      	str	r6, [r0, #12]
 8016832:	6926      	ldr	r6, [r4, #16]
 8016834:	f105 0914 	add.w	r9, r5, #20
 8016838:	f104 0214 	add.w	r2, r4, #20
 801683c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016840:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016844:	f100 0514 	add.w	r5, r0, #20
 8016848:	f04f 0e00 	mov.w	lr, #0
 801684c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016850:	f859 4b04 	ldr.w	r4, [r9], #4
 8016854:	fa1e f18a 	uxtah	r1, lr, sl
 8016858:	b2a3      	uxth	r3, r4
 801685a:	1ac9      	subs	r1, r1, r3
 801685c:	0c23      	lsrs	r3, r4, #16
 801685e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016862:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016866:	b289      	uxth	r1, r1
 8016868:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801686c:	45c8      	cmp	r8, r9
 801686e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016872:	4694      	mov	ip, r2
 8016874:	f845 3b04 	str.w	r3, [r5], #4
 8016878:	d8e8      	bhi.n	801684c <__mdiff+0x5c>
 801687a:	45bc      	cmp	ip, r7
 801687c:	d304      	bcc.n	8016888 <__mdiff+0x98>
 801687e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016882:	b183      	cbz	r3, 80168a6 <__mdiff+0xb6>
 8016884:	6106      	str	r6, [r0, #16]
 8016886:	e7c5      	b.n	8016814 <__mdiff+0x24>
 8016888:	f85c 1b04 	ldr.w	r1, [ip], #4
 801688c:	fa1e f381 	uxtah	r3, lr, r1
 8016890:	141a      	asrs	r2, r3, #16
 8016892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016896:	b29b      	uxth	r3, r3
 8016898:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801689c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80168a0:	f845 3b04 	str.w	r3, [r5], #4
 80168a4:	e7e9      	b.n	801687a <__mdiff+0x8a>
 80168a6:	3e01      	subs	r6, #1
 80168a8:	e7e9      	b.n	801687e <__mdiff+0x8e>
	...

080168ac <__ulp>:
 80168ac:	4b12      	ldr	r3, [pc, #72]	; (80168f8 <__ulp+0x4c>)
 80168ae:	ee10 2a90 	vmov	r2, s1
 80168b2:	401a      	ands	r2, r3
 80168b4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	dd04      	ble.n	80168c6 <__ulp+0x1a>
 80168bc:	2000      	movs	r0, #0
 80168be:	4619      	mov	r1, r3
 80168c0:	ec41 0b10 	vmov	d0, r0, r1
 80168c4:	4770      	bx	lr
 80168c6:	425b      	negs	r3, r3
 80168c8:	151b      	asrs	r3, r3, #20
 80168ca:	2b13      	cmp	r3, #19
 80168cc:	f04f 0000 	mov.w	r0, #0
 80168d0:	f04f 0100 	mov.w	r1, #0
 80168d4:	dc04      	bgt.n	80168e0 <__ulp+0x34>
 80168d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80168da:	fa42 f103 	asr.w	r1, r2, r3
 80168de:	e7ef      	b.n	80168c0 <__ulp+0x14>
 80168e0:	3b14      	subs	r3, #20
 80168e2:	2b1e      	cmp	r3, #30
 80168e4:	f04f 0201 	mov.w	r2, #1
 80168e8:	bfda      	itte	le
 80168ea:	f1c3 031f 	rsble	r3, r3, #31
 80168ee:	fa02 f303 	lslle.w	r3, r2, r3
 80168f2:	4613      	movgt	r3, r2
 80168f4:	4618      	mov	r0, r3
 80168f6:	e7e3      	b.n	80168c0 <__ulp+0x14>
 80168f8:	7ff00000 	.word	0x7ff00000

080168fc <__b2d>:
 80168fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168fe:	6905      	ldr	r5, [r0, #16]
 8016900:	f100 0714 	add.w	r7, r0, #20
 8016904:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016908:	1f2e      	subs	r6, r5, #4
 801690a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801690e:	4620      	mov	r0, r4
 8016910:	f7ff fdc4 	bl	801649c <__hi0bits>
 8016914:	f1c0 0320 	rsb	r3, r0, #32
 8016918:	280a      	cmp	r0, #10
 801691a:	600b      	str	r3, [r1, #0]
 801691c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016994 <__b2d+0x98>
 8016920:	dc14      	bgt.n	801694c <__b2d+0x50>
 8016922:	f1c0 0e0b 	rsb	lr, r0, #11
 8016926:	fa24 f10e 	lsr.w	r1, r4, lr
 801692a:	42b7      	cmp	r7, r6
 801692c:	ea41 030c 	orr.w	r3, r1, ip
 8016930:	bf34      	ite	cc
 8016932:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016936:	2100      	movcs	r1, #0
 8016938:	3015      	adds	r0, #21
 801693a:	fa04 f000 	lsl.w	r0, r4, r0
 801693e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016942:	ea40 0201 	orr.w	r2, r0, r1
 8016946:	ec43 2b10 	vmov	d0, r2, r3
 801694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801694c:	42b7      	cmp	r7, r6
 801694e:	bf3a      	itte	cc
 8016950:	f1a5 0608 	subcc.w	r6, r5, #8
 8016954:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016958:	2100      	movcs	r1, #0
 801695a:	380b      	subs	r0, #11
 801695c:	d015      	beq.n	801698a <__b2d+0x8e>
 801695e:	4084      	lsls	r4, r0
 8016960:	f1c0 0520 	rsb	r5, r0, #32
 8016964:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016968:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801696c:	42be      	cmp	r6, r7
 801696e:	fa21 fc05 	lsr.w	ip, r1, r5
 8016972:	ea44 030c 	orr.w	r3, r4, ip
 8016976:	bf8c      	ite	hi
 8016978:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801697c:	2400      	movls	r4, #0
 801697e:	fa01 f000 	lsl.w	r0, r1, r0
 8016982:	40ec      	lsrs	r4, r5
 8016984:	ea40 0204 	orr.w	r2, r0, r4
 8016988:	e7dd      	b.n	8016946 <__b2d+0x4a>
 801698a:	ea44 030c 	orr.w	r3, r4, ip
 801698e:	460a      	mov	r2, r1
 8016990:	e7d9      	b.n	8016946 <__b2d+0x4a>
 8016992:	bf00      	nop
 8016994:	3ff00000 	.word	0x3ff00000

08016998 <__d2b>:
 8016998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801699c:	460e      	mov	r6, r1
 801699e:	2101      	movs	r1, #1
 80169a0:	ec59 8b10 	vmov	r8, r9, d0
 80169a4:	4615      	mov	r5, r2
 80169a6:	f7ff fcb5 	bl	8016314 <_Balloc>
 80169aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80169ae:	4607      	mov	r7, r0
 80169b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80169b4:	bb34      	cbnz	r4, 8016a04 <__d2b+0x6c>
 80169b6:	9301      	str	r3, [sp, #4]
 80169b8:	f1b8 0300 	subs.w	r3, r8, #0
 80169bc:	d027      	beq.n	8016a0e <__d2b+0x76>
 80169be:	a802      	add	r0, sp, #8
 80169c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80169c4:	f7ff fd89 	bl	80164da <__lo0bits>
 80169c8:	9900      	ldr	r1, [sp, #0]
 80169ca:	b1f0      	cbz	r0, 8016a0a <__d2b+0x72>
 80169cc:	9a01      	ldr	r2, [sp, #4]
 80169ce:	f1c0 0320 	rsb	r3, r0, #32
 80169d2:	fa02 f303 	lsl.w	r3, r2, r3
 80169d6:	430b      	orrs	r3, r1
 80169d8:	40c2      	lsrs	r2, r0
 80169da:	617b      	str	r3, [r7, #20]
 80169dc:	9201      	str	r2, [sp, #4]
 80169de:	9b01      	ldr	r3, [sp, #4]
 80169e0:	61bb      	str	r3, [r7, #24]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	bf14      	ite	ne
 80169e6:	2102      	movne	r1, #2
 80169e8:	2101      	moveq	r1, #1
 80169ea:	6139      	str	r1, [r7, #16]
 80169ec:	b1c4      	cbz	r4, 8016a20 <__d2b+0x88>
 80169ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80169f2:	4404      	add	r4, r0
 80169f4:	6034      	str	r4, [r6, #0]
 80169f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80169fa:	6028      	str	r0, [r5, #0]
 80169fc:	4638      	mov	r0, r7
 80169fe:	b003      	add	sp, #12
 8016a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a08:	e7d5      	b.n	80169b6 <__d2b+0x1e>
 8016a0a:	6179      	str	r1, [r7, #20]
 8016a0c:	e7e7      	b.n	80169de <__d2b+0x46>
 8016a0e:	a801      	add	r0, sp, #4
 8016a10:	f7ff fd63 	bl	80164da <__lo0bits>
 8016a14:	9b01      	ldr	r3, [sp, #4]
 8016a16:	617b      	str	r3, [r7, #20]
 8016a18:	2101      	movs	r1, #1
 8016a1a:	6139      	str	r1, [r7, #16]
 8016a1c:	3020      	adds	r0, #32
 8016a1e:	e7e5      	b.n	80169ec <__d2b+0x54>
 8016a20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016a24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016a28:	6030      	str	r0, [r6, #0]
 8016a2a:	6918      	ldr	r0, [r3, #16]
 8016a2c:	f7ff fd36 	bl	801649c <__hi0bits>
 8016a30:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016a34:	e7e1      	b.n	80169fa <__d2b+0x62>

08016a36 <__ratio>:
 8016a36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a3a:	4688      	mov	r8, r1
 8016a3c:	4669      	mov	r1, sp
 8016a3e:	4681      	mov	r9, r0
 8016a40:	f7ff ff5c 	bl	80168fc <__b2d>
 8016a44:	a901      	add	r1, sp, #4
 8016a46:	4640      	mov	r0, r8
 8016a48:	ec57 6b10 	vmov	r6, r7, d0
 8016a4c:	f7ff ff56 	bl	80168fc <__b2d>
 8016a50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016a54:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016a58:	eba3 0c02 	sub.w	ip, r3, r2
 8016a5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016a60:	1a9b      	subs	r3, r3, r2
 8016a62:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016a66:	ec5b ab10 	vmov	sl, fp, d0
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	bfce      	itee	gt
 8016a6e:	463a      	movgt	r2, r7
 8016a70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016a74:	465a      	movle	r2, fp
 8016a76:	4659      	mov	r1, fp
 8016a78:	463d      	mov	r5, r7
 8016a7a:	bfd4      	ite	le
 8016a7c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016a80:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016a84:	4630      	mov	r0, r6
 8016a86:	ee10 2a10 	vmov	r2, s0
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	4629      	mov	r1, r5
 8016a8e:	f7e9 fef5 	bl	800087c <__aeabi_ddiv>
 8016a92:	ec41 0b10 	vmov	d0, r0, r1
 8016a96:	b003      	add	sp, #12
 8016a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a9c <__copybits>:
 8016a9c:	3901      	subs	r1, #1
 8016a9e:	b510      	push	{r4, lr}
 8016aa0:	1149      	asrs	r1, r1, #5
 8016aa2:	6914      	ldr	r4, [r2, #16]
 8016aa4:	3101      	adds	r1, #1
 8016aa6:	f102 0314 	add.w	r3, r2, #20
 8016aaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016aae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016ab2:	42a3      	cmp	r3, r4
 8016ab4:	4602      	mov	r2, r0
 8016ab6:	d303      	bcc.n	8016ac0 <__copybits+0x24>
 8016ab8:	2300      	movs	r3, #0
 8016aba:	428a      	cmp	r2, r1
 8016abc:	d305      	bcc.n	8016aca <__copybits+0x2e>
 8016abe:	bd10      	pop	{r4, pc}
 8016ac0:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ac4:	f840 2b04 	str.w	r2, [r0], #4
 8016ac8:	e7f3      	b.n	8016ab2 <__copybits+0x16>
 8016aca:	f842 3b04 	str.w	r3, [r2], #4
 8016ace:	e7f4      	b.n	8016aba <__copybits+0x1e>

08016ad0 <__any_on>:
 8016ad0:	f100 0214 	add.w	r2, r0, #20
 8016ad4:	6900      	ldr	r0, [r0, #16]
 8016ad6:	114b      	asrs	r3, r1, #5
 8016ad8:	4298      	cmp	r0, r3
 8016ada:	b510      	push	{r4, lr}
 8016adc:	db11      	blt.n	8016b02 <__any_on+0x32>
 8016ade:	dd0a      	ble.n	8016af6 <__any_on+0x26>
 8016ae0:	f011 011f 	ands.w	r1, r1, #31
 8016ae4:	d007      	beq.n	8016af6 <__any_on+0x26>
 8016ae6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016aea:	fa24 f001 	lsr.w	r0, r4, r1
 8016aee:	fa00 f101 	lsl.w	r1, r0, r1
 8016af2:	428c      	cmp	r4, r1
 8016af4:	d10b      	bne.n	8016b0e <__any_on+0x3e>
 8016af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016afa:	4293      	cmp	r3, r2
 8016afc:	d803      	bhi.n	8016b06 <__any_on+0x36>
 8016afe:	2000      	movs	r0, #0
 8016b00:	bd10      	pop	{r4, pc}
 8016b02:	4603      	mov	r3, r0
 8016b04:	e7f7      	b.n	8016af6 <__any_on+0x26>
 8016b06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b0a:	2900      	cmp	r1, #0
 8016b0c:	d0f5      	beq.n	8016afa <__any_on+0x2a>
 8016b0e:	2001      	movs	r0, #1
 8016b10:	e7f6      	b.n	8016b00 <__any_on+0x30>

08016b12 <_calloc_r>:
 8016b12:	b538      	push	{r3, r4, r5, lr}
 8016b14:	fb02 f401 	mul.w	r4, r2, r1
 8016b18:	4621      	mov	r1, r4
 8016b1a:	f000 f857 	bl	8016bcc <_malloc_r>
 8016b1e:	4605      	mov	r5, r0
 8016b20:	b118      	cbz	r0, 8016b2a <_calloc_r+0x18>
 8016b22:	4622      	mov	r2, r4
 8016b24:	2100      	movs	r1, #0
 8016b26:	f7fc fcaa 	bl	801347e <memset>
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016b30 <_free_r>:
 8016b30:	b538      	push	{r3, r4, r5, lr}
 8016b32:	4605      	mov	r5, r0
 8016b34:	2900      	cmp	r1, #0
 8016b36:	d045      	beq.n	8016bc4 <_free_r+0x94>
 8016b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b3c:	1f0c      	subs	r4, r1, #4
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	bfb8      	it	lt
 8016b42:	18e4      	addlt	r4, r4, r3
 8016b44:	f000 fe30 	bl	80177a8 <__malloc_lock>
 8016b48:	4a1f      	ldr	r2, [pc, #124]	; (8016bc8 <_free_r+0x98>)
 8016b4a:	6813      	ldr	r3, [r2, #0]
 8016b4c:	4610      	mov	r0, r2
 8016b4e:	b933      	cbnz	r3, 8016b5e <_free_r+0x2e>
 8016b50:	6063      	str	r3, [r4, #4]
 8016b52:	6014      	str	r4, [r2, #0]
 8016b54:	4628      	mov	r0, r5
 8016b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b5a:	f000 be26 	b.w	80177aa <__malloc_unlock>
 8016b5e:	42a3      	cmp	r3, r4
 8016b60:	d90c      	bls.n	8016b7c <_free_r+0x4c>
 8016b62:	6821      	ldr	r1, [r4, #0]
 8016b64:	1862      	adds	r2, r4, r1
 8016b66:	4293      	cmp	r3, r2
 8016b68:	bf04      	itt	eq
 8016b6a:	681a      	ldreq	r2, [r3, #0]
 8016b6c:	685b      	ldreq	r3, [r3, #4]
 8016b6e:	6063      	str	r3, [r4, #4]
 8016b70:	bf04      	itt	eq
 8016b72:	1852      	addeq	r2, r2, r1
 8016b74:	6022      	streq	r2, [r4, #0]
 8016b76:	6004      	str	r4, [r0, #0]
 8016b78:	e7ec      	b.n	8016b54 <_free_r+0x24>
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	685a      	ldr	r2, [r3, #4]
 8016b7e:	b10a      	cbz	r2, 8016b84 <_free_r+0x54>
 8016b80:	42a2      	cmp	r2, r4
 8016b82:	d9fa      	bls.n	8016b7a <_free_r+0x4a>
 8016b84:	6819      	ldr	r1, [r3, #0]
 8016b86:	1858      	adds	r0, r3, r1
 8016b88:	42a0      	cmp	r0, r4
 8016b8a:	d10b      	bne.n	8016ba4 <_free_r+0x74>
 8016b8c:	6820      	ldr	r0, [r4, #0]
 8016b8e:	4401      	add	r1, r0
 8016b90:	1858      	adds	r0, r3, r1
 8016b92:	4282      	cmp	r2, r0
 8016b94:	6019      	str	r1, [r3, #0]
 8016b96:	d1dd      	bne.n	8016b54 <_free_r+0x24>
 8016b98:	6810      	ldr	r0, [r2, #0]
 8016b9a:	6852      	ldr	r2, [r2, #4]
 8016b9c:	605a      	str	r2, [r3, #4]
 8016b9e:	4401      	add	r1, r0
 8016ba0:	6019      	str	r1, [r3, #0]
 8016ba2:	e7d7      	b.n	8016b54 <_free_r+0x24>
 8016ba4:	d902      	bls.n	8016bac <_free_r+0x7c>
 8016ba6:	230c      	movs	r3, #12
 8016ba8:	602b      	str	r3, [r5, #0]
 8016baa:	e7d3      	b.n	8016b54 <_free_r+0x24>
 8016bac:	6820      	ldr	r0, [r4, #0]
 8016bae:	1821      	adds	r1, r4, r0
 8016bb0:	428a      	cmp	r2, r1
 8016bb2:	bf04      	itt	eq
 8016bb4:	6811      	ldreq	r1, [r2, #0]
 8016bb6:	6852      	ldreq	r2, [r2, #4]
 8016bb8:	6062      	str	r2, [r4, #4]
 8016bba:	bf04      	itt	eq
 8016bbc:	1809      	addeq	r1, r1, r0
 8016bbe:	6021      	streq	r1, [r4, #0]
 8016bc0:	605c      	str	r4, [r3, #4]
 8016bc2:	e7c7      	b.n	8016b54 <_free_r+0x24>
 8016bc4:	bd38      	pop	{r3, r4, r5, pc}
 8016bc6:	bf00      	nop
 8016bc8:	20033634 	.word	0x20033634

08016bcc <_malloc_r>:
 8016bcc:	b570      	push	{r4, r5, r6, lr}
 8016bce:	1ccd      	adds	r5, r1, #3
 8016bd0:	f025 0503 	bic.w	r5, r5, #3
 8016bd4:	3508      	adds	r5, #8
 8016bd6:	2d0c      	cmp	r5, #12
 8016bd8:	bf38      	it	cc
 8016bda:	250c      	movcc	r5, #12
 8016bdc:	2d00      	cmp	r5, #0
 8016bde:	4606      	mov	r6, r0
 8016be0:	db01      	blt.n	8016be6 <_malloc_r+0x1a>
 8016be2:	42a9      	cmp	r1, r5
 8016be4:	d903      	bls.n	8016bee <_malloc_r+0x22>
 8016be6:	230c      	movs	r3, #12
 8016be8:	6033      	str	r3, [r6, #0]
 8016bea:	2000      	movs	r0, #0
 8016bec:	bd70      	pop	{r4, r5, r6, pc}
 8016bee:	f000 fddb 	bl	80177a8 <__malloc_lock>
 8016bf2:	4a21      	ldr	r2, [pc, #132]	; (8016c78 <_malloc_r+0xac>)
 8016bf4:	6814      	ldr	r4, [r2, #0]
 8016bf6:	4621      	mov	r1, r4
 8016bf8:	b991      	cbnz	r1, 8016c20 <_malloc_r+0x54>
 8016bfa:	4c20      	ldr	r4, [pc, #128]	; (8016c7c <_malloc_r+0xb0>)
 8016bfc:	6823      	ldr	r3, [r4, #0]
 8016bfe:	b91b      	cbnz	r3, 8016c08 <_malloc_r+0x3c>
 8016c00:	4630      	mov	r0, r6
 8016c02:	f000 fc91 	bl	8017528 <_sbrk_r>
 8016c06:	6020      	str	r0, [r4, #0]
 8016c08:	4629      	mov	r1, r5
 8016c0a:	4630      	mov	r0, r6
 8016c0c:	f000 fc8c 	bl	8017528 <_sbrk_r>
 8016c10:	1c43      	adds	r3, r0, #1
 8016c12:	d124      	bne.n	8016c5e <_malloc_r+0x92>
 8016c14:	230c      	movs	r3, #12
 8016c16:	6033      	str	r3, [r6, #0]
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f000 fdc6 	bl	80177aa <__malloc_unlock>
 8016c1e:	e7e4      	b.n	8016bea <_malloc_r+0x1e>
 8016c20:	680b      	ldr	r3, [r1, #0]
 8016c22:	1b5b      	subs	r3, r3, r5
 8016c24:	d418      	bmi.n	8016c58 <_malloc_r+0x8c>
 8016c26:	2b0b      	cmp	r3, #11
 8016c28:	d90f      	bls.n	8016c4a <_malloc_r+0x7e>
 8016c2a:	600b      	str	r3, [r1, #0]
 8016c2c:	50cd      	str	r5, [r1, r3]
 8016c2e:	18cc      	adds	r4, r1, r3
 8016c30:	4630      	mov	r0, r6
 8016c32:	f000 fdba 	bl	80177aa <__malloc_unlock>
 8016c36:	f104 000b 	add.w	r0, r4, #11
 8016c3a:	1d23      	adds	r3, r4, #4
 8016c3c:	f020 0007 	bic.w	r0, r0, #7
 8016c40:	1ac3      	subs	r3, r0, r3
 8016c42:	d0d3      	beq.n	8016bec <_malloc_r+0x20>
 8016c44:	425a      	negs	r2, r3
 8016c46:	50e2      	str	r2, [r4, r3]
 8016c48:	e7d0      	b.n	8016bec <_malloc_r+0x20>
 8016c4a:	428c      	cmp	r4, r1
 8016c4c:	684b      	ldr	r3, [r1, #4]
 8016c4e:	bf16      	itet	ne
 8016c50:	6063      	strne	r3, [r4, #4]
 8016c52:	6013      	streq	r3, [r2, #0]
 8016c54:	460c      	movne	r4, r1
 8016c56:	e7eb      	b.n	8016c30 <_malloc_r+0x64>
 8016c58:	460c      	mov	r4, r1
 8016c5a:	6849      	ldr	r1, [r1, #4]
 8016c5c:	e7cc      	b.n	8016bf8 <_malloc_r+0x2c>
 8016c5e:	1cc4      	adds	r4, r0, #3
 8016c60:	f024 0403 	bic.w	r4, r4, #3
 8016c64:	42a0      	cmp	r0, r4
 8016c66:	d005      	beq.n	8016c74 <_malloc_r+0xa8>
 8016c68:	1a21      	subs	r1, r4, r0
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f000 fc5c 	bl	8017528 <_sbrk_r>
 8016c70:	3001      	adds	r0, #1
 8016c72:	d0cf      	beq.n	8016c14 <_malloc_r+0x48>
 8016c74:	6025      	str	r5, [r4, #0]
 8016c76:	e7db      	b.n	8016c30 <_malloc_r+0x64>
 8016c78:	20033634 	.word	0x20033634
 8016c7c:	20033638 	.word	0x20033638

08016c80 <__ssputs_r>:
 8016c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c84:	688e      	ldr	r6, [r1, #8]
 8016c86:	429e      	cmp	r6, r3
 8016c88:	4682      	mov	sl, r0
 8016c8a:	460c      	mov	r4, r1
 8016c8c:	4690      	mov	r8, r2
 8016c8e:	4699      	mov	r9, r3
 8016c90:	d837      	bhi.n	8016d02 <__ssputs_r+0x82>
 8016c92:	898a      	ldrh	r2, [r1, #12]
 8016c94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c98:	d031      	beq.n	8016cfe <__ssputs_r+0x7e>
 8016c9a:	6825      	ldr	r5, [r4, #0]
 8016c9c:	6909      	ldr	r1, [r1, #16]
 8016c9e:	1a6f      	subs	r7, r5, r1
 8016ca0:	6965      	ldr	r5, [r4, #20]
 8016ca2:	2302      	movs	r3, #2
 8016ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ca8:	fb95 f5f3 	sdiv	r5, r5, r3
 8016cac:	f109 0301 	add.w	r3, r9, #1
 8016cb0:	443b      	add	r3, r7
 8016cb2:	429d      	cmp	r5, r3
 8016cb4:	bf38      	it	cc
 8016cb6:	461d      	movcc	r5, r3
 8016cb8:	0553      	lsls	r3, r2, #21
 8016cba:	d530      	bpl.n	8016d1e <__ssputs_r+0x9e>
 8016cbc:	4629      	mov	r1, r5
 8016cbe:	f7ff ff85 	bl	8016bcc <_malloc_r>
 8016cc2:	4606      	mov	r6, r0
 8016cc4:	b950      	cbnz	r0, 8016cdc <__ssputs_r+0x5c>
 8016cc6:	230c      	movs	r3, #12
 8016cc8:	f8ca 3000 	str.w	r3, [sl]
 8016ccc:	89a3      	ldrh	r3, [r4, #12]
 8016cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cd2:	81a3      	strh	r3, [r4, #12]
 8016cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8016cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016cdc:	463a      	mov	r2, r7
 8016cde:	6921      	ldr	r1, [r4, #16]
 8016ce0:	f7fc fbc2 	bl	8013468 <memcpy>
 8016ce4:	89a3      	ldrh	r3, [r4, #12]
 8016ce6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cee:	81a3      	strh	r3, [r4, #12]
 8016cf0:	6126      	str	r6, [r4, #16]
 8016cf2:	6165      	str	r5, [r4, #20]
 8016cf4:	443e      	add	r6, r7
 8016cf6:	1bed      	subs	r5, r5, r7
 8016cf8:	6026      	str	r6, [r4, #0]
 8016cfa:	60a5      	str	r5, [r4, #8]
 8016cfc:	464e      	mov	r6, r9
 8016cfe:	454e      	cmp	r6, r9
 8016d00:	d900      	bls.n	8016d04 <__ssputs_r+0x84>
 8016d02:	464e      	mov	r6, r9
 8016d04:	4632      	mov	r2, r6
 8016d06:	4641      	mov	r1, r8
 8016d08:	6820      	ldr	r0, [r4, #0]
 8016d0a:	f000 fd34 	bl	8017776 <memmove>
 8016d0e:	68a3      	ldr	r3, [r4, #8]
 8016d10:	1b9b      	subs	r3, r3, r6
 8016d12:	60a3      	str	r3, [r4, #8]
 8016d14:	6823      	ldr	r3, [r4, #0]
 8016d16:	441e      	add	r6, r3
 8016d18:	6026      	str	r6, [r4, #0]
 8016d1a:	2000      	movs	r0, #0
 8016d1c:	e7dc      	b.n	8016cd8 <__ssputs_r+0x58>
 8016d1e:	462a      	mov	r2, r5
 8016d20:	f000 fd44 	bl	80177ac <_realloc_r>
 8016d24:	4606      	mov	r6, r0
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d1e2      	bne.n	8016cf0 <__ssputs_r+0x70>
 8016d2a:	6921      	ldr	r1, [r4, #16]
 8016d2c:	4650      	mov	r0, sl
 8016d2e:	f7ff feff 	bl	8016b30 <_free_r>
 8016d32:	e7c8      	b.n	8016cc6 <__ssputs_r+0x46>

08016d34 <_svfiprintf_r>:
 8016d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d38:	461d      	mov	r5, r3
 8016d3a:	898b      	ldrh	r3, [r1, #12]
 8016d3c:	061f      	lsls	r7, r3, #24
 8016d3e:	b09d      	sub	sp, #116	; 0x74
 8016d40:	4680      	mov	r8, r0
 8016d42:	460c      	mov	r4, r1
 8016d44:	4616      	mov	r6, r2
 8016d46:	d50f      	bpl.n	8016d68 <_svfiprintf_r+0x34>
 8016d48:	690b      	ldr	r3, [r1, #16]
 8016d4a:	b96b      	cbnz	r3, 8016d68 <_svfiprintf_r+0x34>
 8016d4c:	2140      	movs	r1, #64	; 0x40
 8016d4e:	f7ff ff3d 	bl	8016bcc <_malloc_r>
 8016d52:	6020      	str	r0, [r4, #0]
 8016d54:	6120      	str	r0, [r4, #16]
 8016d56:	b928      	cbnz	r0, 8016d64 <_svfiprintf_r+0x30>
 8016d58:	230c      	movs	r3, #12
 8016d5a:	f8c8 3000 	str.w	r3, [r8]
 8016d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016d62:	e0c8      	b.n	8016ef6 <_svfiprintf_r+0x1c2>
 8016d64:	2340      	movs	r3, #64	; 0x40
 8016d66:	6163      	str	r3, [r4, #20]
 8016d68:	2300      	movs	r3, #0
 8016d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8016d6c:	2320      	movs	r3, #32
 8016d6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d72:	2330      	movs	r3, #48	; 0x30
 8016d74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d78:	9503      	str	r5, [sp, #12]
 8016d7a:	f04f 0b01 	mov.w	fp, #1
 8016d7e:	4637      	mov	r7, r6
 8016d80:	463d      	mov	r5, r7
 8016d82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d86:	b10b      	cbz	r3, 8016d8c <_svfiprintf_r+0x58>
 8016d88:	2b25      	cmp	r3, #37	; 0x25
 8016d8a:	d13e      	bne.n	8016e0a <_svfiprintf_r+0xd6>
 8016d8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8016d90:	d00b      	beq.n	8016daa <_svfiprintf_r+0x76>
 8016d92:	4653      	mov	r3, sl
 8016d94:	4632      	mov	r2, r6
 8016d96:	4621      	mov	r1, r4
 8016d98:	4640      	mov	r0, r8
 8016d9a:	f7ff ff71 	bl	8016c80 <__ssputs_r>
 8016d9e:	3001      	adds	r0, #1
 8016da0:	f000 80a4 	beq.w	8016eec <_svfiprintf_r+0x1b8>
 8016da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016da6:	4453      	add	r3, sl
 8016da8:	9309      	str	r3, [sp, #36]	; 0x24
 8016daa:	783b      	ldrb	r3, [r7, #0]
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	f000 809d 	beq.w	8016eec <_svfiprintf_r+0x1b8>
 8016db2:	2300      	movs	r3, #0
 8016db4:	f04f 32ff 	mov.w	r2, #4294967295
 8016db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016dbc:	9304      	str	r3, [sp, #16]
 8016dbe:	9307      	str	r3, [sp, #28]
 8016dc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016dc4:	931a      	str	r3, [sp, #104]	; 0x68
 8016dc6:	462f      	mov	r7, r5
 8016dc8:	2205      	movs	r2, #5
 8016dca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016dce:	4850      	ldr	r0, [pc, #320]	; (8016f10 <_svfiprintf_r+0x1dc>)
 8016dd0:	f7e9 fa1e 	bl	8000210 <memchr>
 8016dd4:	9b04      	ldr	r3, [sp, #16]
 8016dd6:	b9d0      	cbnz	r0, 8016e0e <_svfiprintf_r+0xda>
 8016dd8:	06d9      	lsls	r1, r3, #27
 8016dda:	bf44      	itt	mi
 8016ddc:	2220      	movmi	r2, #32
 8016dde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016de2:	071a      	lsls	r2, r3, #28
 8016de4:	bf44      	itt	mi
 8016de6:	222b      	movmi	r2, #43	; 0x2b
 8016de8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016dec:	782a      	ldrb	r2, [r5, #0]
 8016dee:	2a2a      	cmp	r2, #42	; 0x2a
 8016df0:	d015      	beq.n	8016e1e <_svfiprintf_r+0xea>
 8016df2:	9a07      	ldr	r2, [sp, #28]
 8016df4:	462f      	mov	r7, r5
 8016df6:	2000      	movs	r0, #0
 8016df8:	250a      	movs	r5, #10
 8016dfa:	4639      	mov	r1, r7
 8016dfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e00:	3b30      	subs	r3, #48	; 0x30
 8016e02:	2b09      	cmp	r3, #9
 8016e04:	d94d      	bls.n	8016ea2 <_svfiprintf_r+0x16e>
 8016e06:	b1b8      	cbz	r0, 8016e38 <_svfiprintf_r+0x104>
 8016e08:	e00f      	b.n	8016e2a <_svfiprintf_r+0xf6>
 8016e0a:	462f      	mov	r7, r5
 8016e0c:	e7b8      	b.n	8016d80 <_svfiprintf_r+0x4c>
 8016e0e:	4a40      	ldr	r2, [pc, #256]	; (8016f10 <_svfiprintf_r+0x1dc>)
 8016e10:	1a80      	subs	r0, r0, r2
 8016e12:	fa0b f000 	lsl.w	r0, fp, r0
 8016e16:	4318      	orrs	r0, r3
 8016e18:	9004      	str	r0, [sp, #16]
 8016e1a:	463d      	mov	r5, r7
 8016e1c:	e7d3      	b.n	8016dc6 <_svfiprintf_r+0x92>
 8016e1e:	9a03      	ldr	r2, [sp, #12]
 8016e20:	1d11      	adds	r1, r2, #4
 8016e22:	6812      	ldr	r2, [r2, #0]
 8016e24:	9103      	str	r1, [sp, #12]
 8016e26:	2a00      	cmp	r2, #0
 8016e28:	db01      	blt.n	8016e2e <_svfiprintf_r+0xfa>
 8016e2a:	9207      	str	r2, [sp, #28]
 8016e2c:	e004      	b.n	8016e38 <_svfiprintf_r+0x104>
 8016e2e:	4252      	negs	r2, r2
 8016e30:	f043 0302 	orr.w	r3, r3, #2
 8016e34:	9207      	str	r2, [sp, #28]
 8016e36:	9304      	str	r3, [sp, #16]
 8016e38:	783b      	ldrb	r3, [r7, #0]
 8016e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8016e3c:	d10c      	bne.n	8016e58 <_svfiprintf_r+0x124>
 8016e3e:	787b      	ldrb	r3, [r7, #1]
 8016e40:	2b2a      	cmp	r3, #42	; 0x2a
 8016e42:	d133      	bne.n	8016eac <_svfiprintf_r+0x178>
 8016e44:	9b03      	ldr	r3, [sp, #12]
 8016e46:	1d1a      	adds	r2, r3, #4
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	9203      	str	r2, [sp, #12]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	bfb8      	it	lt
 8016e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e54:	3702      	adds	r7, #2
 8016e56:	9305      	str	r3, [sp, #20]
 8016e58:	4d2e      	ldr	r5, [pc, #184]	; (8016f14 <_svfiprintf_r+0x1e0>)
 8016e5a:	7839      	ldrb	r1, [r7, #0]
 8016e5c:	2203      	movs	r2, #3
 8016e5e:	4628      	mov	r0, r5
 8016e60:	f7e9 f9d6 	bl	8000210 <memchr>
 8016e64:	b138      	cbz	r0, 8016e76 <_svfiprintf_r+0x142>
 8016e66:	2340      	movs	r3, #64	; 0x40
 8016e68:	1b40      	subs	r0, r0, r5
 8016e6a:	fa03 f000 	lsl.w	r0, r3, r0
 8016e6e:	9b04      	ldr	r3, [sp, #16]
 8016e70:	4303      	orrs	r3, r0
 8016e72:	3701      	adds	r7, #1
 8016e74:	9304      	str	r3, [sp, #16]
 8016e76:	7839      	ldrb	r1, [r7, #0]
 8016e78:	4827      	ldr	r0, [pc, #156]	; (8016f18 <_svfiprintf_r+0x1e4>)
 8016e7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e7e:	2206      	movs	r2, #6
 8016e80:	1c7e      	adds	r6, r7, #1
 8016e82:	f7e9 f9c5 	bl	8000210 <memchr>
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d038      	beq.n	8016efc <_svfiprintf_r+0x1c8>
 8016e8a:	4b24      	ldr	r3, [pc, #144]	; (8016f1c <_svfiprintf_r+0x1e8>)
 8016e8c:	bb13      	cbnz	r3, 8016ed4 <_svfiprintf_r+0x1a0>
 8016e8e:	9b03      	ldr	r3, [sp, #12]
 8016e90:	3307      	adds	r3, #7
 8016e92:	f023 0307 	bic.w	r3, r3, #7
 8016e96:	3308      	adds	r3, #8
 8016e98:	9303      	str	r3, [sp, #12]
 8016e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9c:	444b      	add	r3, r9
 8016e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8016ea0:	e76d      	b.n	8016d7e <_svfiprintf_r+0x4a>
 8016ea2:	fb05 3202 	mla	r2, r5, r2, r3
 8016ea6:	2001      	movs	r0, #1
 8016ea8:	460f      	mov	r7, r1
 8016eaa:	e7a6      	b.n	8016dfa <_svfiprintf_r+0xc6>
 8016eac:	2300      	movs	r3, #0
 8016eae:	3701      	adds	r7, #1
 8016eb0:	9305      	str	r3, [sp, #20]
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	250a      	movs	r5, #10
 8016eb6:	4638      	mov	r0, r7
 8016eb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ebc:	3a30      	subs	r2, #48	; 0x30
 8016ebe:	2a09      	cmp	r2, #9
 8016ec0:	d903      	bls.n	8016eca <_svfiprintf_r+0x196>
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d0c8      	beq.n	8016e58 <_svfiprintf_r+0x124>
 8016ec6:	9105      	str	r1, [sp, #20]
 8016ec8:	e7c6      	b.n	8016e58 <_svfiprintf_r+0x124>
 8016eca:	fb05 2101 	mla	r1, r5, r1, r2
 8016ece:	2301      	movs	r3, #1
 8016ed0:	4607      	mov	r7, r0
 8016ed2:	e7f0      	b.n	8016eb6 <_svfiprintf_r+0x182>
 8016ed4:	ab03      	add	r3, sp, #12
 8016ed6:	9300      	str	r3, [sp, #0]
 8016ed8:	4622      	mov	r2, r4
 8016eda:	4b11      	ldr	r3, [pc, #68]	; (8016f20 <_svfiprintf_r+0x1ec>)
 8016edc:	a904      	add	r1, sp, #16
 8016ede:	4640      	mov	r0, r8
 8016ee0:	f7fc fb6a 	bl	80135b8 <_printf_float>
 8016ee4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016ee8:	4681      	mov	r9, r0
 8016eea:	d1d6      	bne.n	8016e9a <_svfiprintf_r+0x166>
 8016eec:	89a3      	ldrh	r3, [r4, #12]
 8016eee:	065b      	lsls	r3, r3, #25
 8016ef0:	f53f af35 	bmi.w	8016d5e <_svfiprintf_r+0x2a>
 8016ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ef6:	b01d      	add	sp, #116	; 0x74
 8016ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016efc:	ab03      	add	r3, sp, #12
 8016efe:	9300      	str	r3, [sp, #0]
 8016f00:	4622      	mov	r2, r4
 8016f02:	4b07      	ldr	r3, [pc, #28]	; (8016f20 <_svfiprintf_r+0x1ec>)
 8016f04:	a904      	add	r1, sp, #16
 8016f06:	4640      	mov	r0, r8
 8016f08:	f7fc fe0c 	bl	8013b24 <_printf_i>
 8016f0c:	e7ea      	b.n	8016ee4 <_svfiprintf_r+0x1b0>
 8016f0e:	bf00      	nop
 8016f10:	080181f4 	.word	0x080181f4
 8016f14:	080181fa 	.word	0x080181fa
 8016f18:	080181fe 	.word	0x080181fe
 8016f1c:	080135b9 	.word	0x080135b9
 8016f20:	08016c81 	.word	0x08016c81

08016f24 <_sungetc_r>:
 8016f24:	b538      	push	{r3, r4, r5, lr}
 8016f26:	1c4b      	adds	r3, r1, #1
 8016f28:	4614      	mov	r4, r2
 8016f2a:	d103      	bne.n	8016f34 <_sungetc_r+0x10>
 8016f2c:	f04f 35ff 	mov.w	r5, #4294967295
 8016f30:	4628      	mov	r0, r5
 8016f32:	bd38      	pop	{r3, r4, r5, pc}
 8016f34:	8993      	ldrh	r3, [r2, #12]
 8016f36:	f023 0320 	bic.w	r3, r3, #32
 8016f3a:	8193      	strh	r3, [r2, #12]
 8016f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f3e:	6852      	ldr	r2, [r2, #4]
 8016f40:	b2cd      	uxtb	r5, r1
 8016f42:	b18b      	cbz	r3, 8016f68 <_sungetc_r+0x44>
 8016f44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016f46:	4293      	cmp	r3, r2
 8016f48:	dd08      	ble.n	8016f5c <_sungetc_r+0x38>
 8016f4a:	6823      	ldr	r3, [r4, #0]
 8016f4c:	1e5a      	subs	r2, r3, #1
 8016f4e:	6022      	str	r2, [r4, #0]
 8016f50:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016f54:	6863      	ldr	r3, [r4, #4]
 8016f56:	3301      	adds	r3, #1
 8016f58:	6063      	str	r3, [r4, #4]
 8016f5a:	e7e9      	b.n	8016f30 <_sungetc_r+0xc>
 8016f5c:	4621      	mov	r1, r4
 8016f5e:	f000 fbc3 	bl	80176e8 <__submore>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d0f1      	beq.n	8016f4a <_sungetc_r+0x26>
 8016f66:	e7e1      	b.n	8016f2c <_sungetc_r+0x8>
 8016f68:	6921      	ldr	r1, [r4, #16]
 8016f6a:	6823      	ldr	r3, [r4, #0]
 8016f6c:	b151      	cbz	r1, 8016f84 <_sungetc_r+0x60>
 8016f6e:	4299      	cmp	r1, r3
 8016f70:	d208      	bcs.n	8016f84 <_sungetc_r+0x60>
 8016f72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016f76:	42a9      	cmp	r1, r5
 8016f78:	d104      	bne.n	8016f84 <_sungetc_r+0x60>
 8016f7a:	3b01      	subs	r3, #1
 8016f7c:	3201      	adds	r2, #1
 8016f7e:	6023      	str	r3, [r4, #0]
 8016f80:	6062      	str	r2, [r4, #4]
 8016f82:	e7d5      	b.n	8016f30 <_sungetc_r+0xc>
 8016f84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016f88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8016f8e:	2303      	movs	r3, #3
 8016f90:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f92:	4623      	mov	r3, r4
 8016f94:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016f98:	6023      	str	r3, [r4, #0]
 8016f9a:	2301      	movs	r3, #1
 8016f9c:	e7dc      	b.n	8016f58 <_sungetc_r+0x34>

08016f9e <__ssrefill_r>:
 8016f9e:	b510      	push	{r4, lr}
 8016fa0:	460c      	mov	r4, r1
 8016fa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016fa4:	b169      	cbz	r1, 8016fc2 <__ssrefill_r+0x24>
 8016fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016faa:	4299      	cmp	r1, r3
 8016fac:	d001      	beq.n	8016fb2 <__ssrefill_r+0x14>
 8016fae:	f7ff fdbf 	bl	8016b30 <_free_r>
 8016fb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016fb4:	6063      	str	r3, [r4, #4]
 8016fb6:	2000      	movs	r0, #0
 8016fb8:	6360      	str	r0, [r4, #52]	; 0x34
 8016fba:	b113      	cbz	r3, 8016fc2 <__ssrefill_r+0x24>
 8016fbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016fbe:	6023      	str	r3, [r4, #0]
 8016fc0:	bd10      	pop	{r4, pc}
 8016fc2:	6923      	ldr	r3, [r4, #16]
 8016fc4:	6023      	str	r3, [r4, #0]
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	6063      	str	r3, [r4, #4]
 8016fca:	89a3      	ldrh	r3, [r4, #12]
 8016fcc:	f043 0320 	orr.w	r3, r3, #32
 8016fd0:	81a3      	strh	r3, [r4, #12]
 8016fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd6:	e7f3      	b.n	8016fc0 <__ssrefill_r+0x22>

08016fd8 <__ssvfiscanf_r>:
 8016fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fdc:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016fe0:	460c      	mov	r4, r1
 8016fe2:	2100      	movs	r1, #0
 8016fe4:	9144      	str	r1, [sp, #272]	; 0x110
 8016fe6:	9145      	str	r1, [sp, #276]	; 0x114
 8016fe8:	499f      	ldr	r1, [pc, #636]	; (8017268 <__ssvfiscanf_r+0x290>)
 8016fea:	91a0      	str	r1, [sp, #640]	; 0x280
 8016fec:	f10d 0804 	add.w	r8, sp, #4
 8016ff0:	499e      	ldr	r1, [pc, #632]	; (801726c <__ssvfiscanf_r+0x294>)
 8016ff2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017270 <__ssvfiscanf_r+0x298>
 8016ff6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016ffa:	4606      	mov	r6, r0
 8016ffc:	4692      	mov	sl, r2
 8016ffe:	91a1      	str	r1, [sp, #644]	; 0x284
 8017000:	9300      	str	r3, [sp, #0]
 8017002:	270a      	movs	r7, #10
 8017004:	f89a 3000 	ldrb.w	r3, [sl]
 8017008:	2b00      	cmp	r3, #0
 801700a:	f000 812a 	beq.w	8017262 <__ssvfiscanf_r+0x28a>
 801700e:	4655      	mov	r5, sl
 8017010:	f7ff f948 	bl	80162a4 <__locale_ctype_ptr>
 8017014:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017018:	4458      	add	r0, fp
 801701a:	7843      	ldrb	r3, [r0, #1]
 801701c:	f013 0308 	ands.w	r3, r3, #8
 8017020:	d01c      	beq.n	801705c <__ssvfiscanf_r+0x84>
 8017022:	6863      	ldr	r3, [r4, #4]
 8017024:	2b00      	cmp	r3, #0
 8017026:	dd12      	ble.n	801704e <__ssvfiscanf_r+0x76>
 8017028:	f7ff f93c 	bl	80162a4 <__locale_ctype_ptr>
 801702c:	6823      	ldr	r3, [r4, #0]
 801702e:	781a      	ldrb	r2, [r3, #0]
 8017030:	4410      	add	r0, r2
 8017032:	7842      	ldrb	r2, [r0, #1]
 8017034:	0712      	lsls	r2, r2, #28
 8017036:	d401      	bmi.n	801703c <__ssvfiscanf_r+0x64>
 8017038:	46aa      	mov	sl, r5
 801703a:	e7e3      	b.n	8017004 <__ssvfiscanf_r+0x2c>
 801703c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801703e:	3201      	adds	r2, #1
 8017040:	9245      	str	r2, [sp, #276]	; 0x114
 8017042:	6862      	ldr	r2, [r4, #4]
 8017044:	3301      	adds	r3, #1
 8017046:	3a01      	subs	r2, #1
 8017048:	6062      	str	r2, [r4, #4]
 801704a:	6023      	str	r3, [r4, #0]
 801704c:	e7e9      	b.n	8017022 <__ssvfiscanf_r+0x4a>
 801704e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017050:	4621      	mov	r1, r4
 8017052:	4630      	mov	r0, r6
 8017054:	4798      	blx	r3
 8017056:	2800      	cmp	r0, #0
 8017058:	d0e6      	beq.n	8017028 <__ssvfiscanf_r+0x50>
 801705a:	e7ed      	b.n	8017038 <__ssvfiscanf_r+0x60>
 801705c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017060:	f040 8082 	bne.w	8017168 <__ssvfiscanf_r+0x190>
 8017064:	9343      	str	r3, [sp, #268]	; 0x10c
 8017066:	9341      	str	r3, [sp, #260]	; 0x104
 8017068:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801706c:	2b2a      	cmp	r3, #42	; 0x2a
 801706e:	d103      	bne.n	8017078 <__ssvfiscanf_r+0xa0>
 8017070:	2310      	movs	r3, #16
 8017072:	9341      	str	r3, [sp, #260]	; 0x104
 8017074:	f10a 0502 	add.w	r5, sl, #2
 8017078:	46aa      	mov	sl, r5
 801707a:	f815 1b01 	ldrb.w	r1, [r5], #1
 801707e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017082:	2a09      	cmp	r2, #9
 8017084:	d922      	bls.n	80170cc <__ssvfiscanf_r+0xf4>
 8017086:	2203      	movs	r2, #3
 8017088:	4879      	ldr	r0, [pc, #484]	; (8017270 <__ssvfiscanf_r+0x298>)
 801708a:	f7e9 f8c1 	bl	8000210 <memchr>
 801708e:	b138      	cbz	r0, 80170a0 <__ssvfiscanf_r+0xc8>
 8017090:	eba0 0309 	sub.w	r3, r0, r9
 8017094:	2001      	movs	r0, #1
 8017096:	4098      	lsls	r0, r3
 8017098:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801709a:	4318      	orrs	r0, r3
 801709c:	9041      	str	r0, [sp, #260]	; 0x104
 801709e:	46aa      	mov	sl, r5
 80170a0:	f89a 3000 	ldrb.w	r3, [sl]
 80170a4:	2b67      	cmp	r3, #103	; 0x67
 80170a6:	f10a 0501 	add.w	r5, sl, #1
 80170aa:	d82b      	bhi.n	8017104 <__ssvfiscanf_r+0x12c>
 80170ac:	2b65      	cmp	r3, #101	; 0x65
 80170ae:	f080 809f 	bcs.w	80171f0 <__ssvfiscanf_r+0x218>
 80170b2:	2b47      	cmp	r3, #71	; 0x47
 80170b4:	d810      	bhi.n	80170d8 <__ssvfiscanf_r+0x100>
 80170b6:	2b45      	cmp	r3, #69	; 0x45
 80170b8:	f080 809a 	bcs.w	80171f0 <__ssvfiscanf_r+0x218>
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d06c      	beq.n	801719a <__ssvfiscanf_r+0x1c2>
 80170c0:	2b25      	cmp	r3, #37	; 0x25
 80170c2:	d051      	beq.n	8017168 <__ssvfiscanf_r+0x190>
 80170c4:	2303      	movs	r3, #3
 80170c6:	9347      	str	r3, [sp, #284]	; 0x11c
 80170c8:	9742      	str	r7, [sp, #264]	; 0x108
 80170ca:	e027      	b.n	801711c <__ssvfiscanf_r+0x144>
 80170cc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80170ce:	fb07 1303 	mla	r3, r7, r3, r1
 80170d2:	3b30      	subs	r3, #48	; 0x30
 80170d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80170d6:	e7cf      	b.n	8017078 <__ssvfiscanf_r+0xa0>
 80170d8:	2b5b      	cmp	r3, #91	; 0x5b
 80170da:	d06a      	beq.n	80171b2 <__ssvfiscanf_r+0x1da>
 80170dc:	d80c      	bhi.n	80170f8 <__ssvfiscanf_r+0x120>
 80170de:	2b58      	cmp	r3, #88	; 0x58
 80170e0:	d1f0      	bne.n	80170c4 <__ssvfiscanf_r+0xec>
 80170e2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80170e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80170e8:	9241      	str	r2, [sp, #260]	; 0x104
 80170ea:	2210      	movs	r2, #16
 80170ec:	9242      	str	r2, [sp, #264]	; 0x108
 80170ee:	2b6e      	cmp	r3, #110	; 0x6e
 80170f0:	bf8c      	ite	hi
 80170f2:	2304      	movhi	r3, #4
 80170f4:	2303      	movls	r3, #3
 80170f6:	e010      	b.n	801711a <__ssvfiscanf_r+0x142>
 80170f8:	2b63      	cmp	r3, #99	; 0x63
 80170fa:	d065      	beq.n	80171c8 <__ssvfiscanf_r+0x1f0>
 80170fc:	2b64      	cmp	r3, #100	; 0x64
 80170fe:	d1e1      	bne.n	80170c4 <__ssvfiscanf_r+0xec>
 8017100:	9742      	str	r7, [sp, #264]	; 0x108
 8017102:	e7f4      	b.n	80170ee <__ssvfiscanf_r+0x116>
 8017104:	2b70      	cmp	r3, #112	; 0x70
 8017106:	d04b      	beq.n	80171a0 <__ssvfiscanf_r+0x1c8>
 8017108:	d826      	bhi.n	8017158 <__ssvfiscanf_r+0x180>
 801710a:	2b6e      	cmp	r3, #110	; 0x6e
 801710c:	d062      	beq.n	80171d4 <__ssvfiscanf_r+0x1fc>
 801710e:	d84c      	bhi.n	80171aa <__ssvfiscanf_r+0x1d2>
 8017110:	2b69      	cmp	r3, #105	; 0x69
 8017112:	d1d7      	bne.n	80170c4 <__ssvfiscanf_r+0xec>
 8017114:	2300      	movs	r3, #0
 8017116:	9342      	str	r3, [sp, #264]	; 0x108
 8017118:	2303      	movs	r3, #3
 801711a:	9347      	str	r3, [sp, #284]	; 0x11c
 801711c:	6863      	ldr	r3, [r4, #4]
 801711e:	2b00      	cmp	r3, #0
 8017120:	dd68      	ble.n	80171f4 <__ssvfiscanf_r+0x21c>
 8017122:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017124:	0659      	lsls	r1, r3, #25
 8017126:	d407      	bmi.n	8017138 <__ssvfiscanf_r+0x160>
 8017128:	f7ff f8bc 	bl	80162a4 <__locale_ctype_ptr>
 801712c:	6823      	ldr	r3, [r4, #0]
 801712e:	781a      	ldrb	r2, [r3, #0]
 8017130:	4410      	add	r0, r2
 8017132:	7842      	ldrb	r2, [r0, #1]
 8017134:	0712      	lsls	r2, r2, #28
 8017136:	d464      	bmi.n	8017202 <__ssvfiscanf_r+0x22a>
 8017138:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801713a:	2b02      	cmp	r3, #2
 801713c:	dc73      	bgt.n	8017226 <__ssvfiscanf_r+0x24e>
 801713e:	466b      	mov	r3, sp
 8017140:	4622      	mov	r2, r4
 8017142:	a941      	add	r1, sp, #260	; 0x104
 8017144:	4630      	mov	r0, r6
 8017146:	f000 f897 	bl	8017278 <_scanf_chars>
 801714a:	2801      	cmp	r0, #1
 801714c:	f000 8089 	beq.w	8017262 <__ssvfiscanf_r+0x28a>
 8017150:	2802      	cmp	r0, #2
 8017152:	f47f af71 	bne.w	8017038 <__ssvfiscanf_r+0x60>
 8017156:	e01d      	b.n	8017194 <__ssvfiscanf_r+0x1bc>
 8017158:	2b75      	cmp	r3, #117	; 0x75
 801715a:	d0d1      	beq.n	8017100 <__ssvfiscanf_r+0x128>
 801715c:	2b78      	cmp	r3, #120	; 0x78
 801715e:	d0c0      	beq.n	80170e2 <__ssvfiscanf_r+0x10a>
 8017160:	2b73      	cmp	r3, #115	; 0x73
 8017162:	d1af      	bne.n	80170c4 <__ssvfiscanf_r+0xec>
 8017164:	2302      	movs	r3, #2
 8017166:	e7d8      	b.n	801711a <__ssvfiscanf_r+0x142>
 8017168:	6863      	ldr	r3, [r4, #4]
 801716a:	2b00      	cmp	r3, #0
 801716c:	dd0c      	ble.n	8017188 <__ssvfiscanf_r+0x1b0>
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	455a      	cmp	r2, fp
 8017174:	d175      	bne.n	8017262 <__ssvfiscanf_r+0x28a>
 8017176:	3301      	adds	r3, #1
 8017178:	6862      	ldr	r2, [r4, #4]
 801717a:	6023      	str	r3, [r4, #0]
 801717c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801717e:	3a01      	subs	r2, #1
 8017180:	3301      	adds	r3, #1
 8017182:	6062      	str	r2, [r4, #4]
 8017184:	9345      	str	r3, [sp, #276]	; 0x114
 8017186:	e757      	b.n	8017038 <__ssvfiscanf_r+0x60>
 8017188:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801718a:	4621      	mov	r1, r4
 801718c:	4630      	mov	r0, r6
 801718e:	4798      	blx	r3
 8017190:	2800      	cmp	r0, #0
 8017192:	d0ec      	beq.n	801716e <__ssvfiscanf_r+0x196>
 8017194:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017196:	2800      	cmp	r0, #0
 8017198:	d159      	bne.n	801724e <__ssvfiscanf_r+0x276>
 801719a:	f04f 30ff 	mov.w	r0, #4294967295
 801719e:	e05c      	b.n	801725a <__ssvfiscanf_r+0x282>
 80171a0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80171a2:	f042 0220 	orr.w	r2, r2, #32
 80171a6:	9241      	str	r2, [sp, #260]	; 0x104
 80171a8:	e79b      	b.n	80170e2 <__ssvfiscanf_r+0x10a>
 80171aa:	2308      	movs	r3, #8
 80171ac:	9342      	str	r3, [sp, #264]	; 0x108
 80171ae:	2304      	movs	r3, #4
 80171b0:	e7b3      	b.n	801711a <__ssvfiscanf_r+0x142>
 80171b2:	4629      	mov	r1, r5
 80171b4:	4640      	mov	r0, r8
 80171b6:	f000 f9c7 	bl	8017548 <__sccl>
 80171ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171c0:	9341      	str	r3, [sp, #260]	; 0x104
 80171c2:	4605      	mov	r5, r0
 80171c4:	2301      	movs	r3, #1
 80171c6:	e7a8      	b.n	801711a <__ssvfiscanf_r+0x142>
 80171c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80171ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171ce:	9341      	str	r3, [sp, #260]	; 0x104
 80171d0:	2300      	movs	r3, #0
 80171d2:	e7a2      	b.n	801711a <__ssvfiscanf_r+0x142>
 80171d4:	9841      	ldr	r0, [sp, #260]	; 0x104
 80171d6:	06c3      	lsls	r3, r0, #27
 80171d8:	f53f af2e 	bmi.w	8017038 <__ssvfiscanf_r+0x60>
 80171dc:	9b00      	ldr	r3, [sp, #0]
 80171de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80171e0:	1d19      	adds	r1, r3, #4
 80171e2:	9100      	str	r1, [sp, #0]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	07c0      	lsls	r0, r0, #31
 80171e8:	bf4c      	ite	mi
 80171ea:	801a      	strhmi	r2, [r3, #0]
 80171ec:	601a      	strpl	r2, [r3, #0]
 80171ee:	e723      	b.n	8017038 <__ssvfiscanf_r+0x60>
 80171f0:	2305      	movs	r3, #5
 80171f2:	e792      	b.n	801711a <__ssvfiscanf_r+0x142>
 80171f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171f6:	4621      	mov	r1, r4
 80171f8:	4630      	mov	r0, r6
 80171fa:	4798      	blx	r3
 80171fc:	2800      	cmp	r0, #0
 80171fe:	d090      	beq.n	8017122 <__ssvfiscanf_r+0x14a>
 8017200:	e7c8      	b.n	8017194 <__ssvfiscanf_r+0x1bc>
 8017202:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017204:	3201      	adds	r2, #1
 8017206:	9245      	str	r2, [sp, #276]	; 0x114
 8017208:	6862      	ldr	r2, [r4, #4]
 801720a:	3a01      	subs	r2, #1
 801720c:	2a00      	cmp	r2, #0
 801720e:	6062      	str	r2, [r4, #4]
 8017210:	dd02      	ble.n	8017218 <__ssvfiscanf_r+0x240>
 8017212:	3301      	adds	r3, #1
 8017214:	6023      	str	r3, [r4, #0]
 8017216:	e787      	b.n	8017128 <__ssvfiscanf_r+0x150>
 8017218:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801721a:	4621      	mov	r1, r4
 801721c:	4630      	mov	r0, r6
 801721e:	4798      	blx	r3
 8017220:	2800      	cmp	r0, #0
 8017222:	d081      	beq.n	8017128 <__ssvfiscanf_r+0x150>
 8017224:	e7b6      	b.n	8017194 <__ssvfiscanf_r+0x1bc>
 8017226:	2b04      	cmp	r3, #4
 8017228:	dc06      	bgt.n	8017238 <__ssvfiscanf_r+0x260>
 801722a:	466b      	mov	r3, sp
 801722c:	4622      	mov	r2, r4
 801722e:	a941      	add	r1, sp, #260	; 0x104
 8017230:	4630      	mov	r0, r6
 8017232:	f000 f885 	bl	8017340 <_scanf_i>
 8017236:	e788      	b.n	801714a <__ssvfiscanf_r+0x172>
 8017238:	4b0e      	ldr	r3, [pc, #56]	; (8017274 <__ssvfiscanf_r+0x29c>)
 801723a:	2b00      	cmp	r3, #0
 801723c:	f43f aefc 	beq.w	8017038 <__ssvfiscanf_r+0x60>
 8017240:	466b      	mov	r3, sp
 8017242:	4622      	mov	r2, r4
 8017244:	a941      	add	r1, sp, #260	; 0x104
 8017246:	4630      	mov	r0, r6
 8017248:	f7fc fd7e 	bl	8013d48 <_scanf_float>
 801724c:	e77d      	b.n	801714a <__ssvfiscanf_r+0x172>
 801724e:	89a3      	ldrh	r3, [r4, #12]
 8017250:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017254:	bf18      	it	ne
 8017256:	f04f 30ff 	movne.w	r0, #4294967295
 801725a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017262:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017264:	e7f9      	b.n	801725a <__ssvfiscanf_r+0x282>
 8017266:	bf00      	nop
 8017268:	08016f25 	.word	0x08016f25
 801726c:	08016f9f 	.word	0x08016f9f
 8017270:	080181fa 	.word	0x080181fa
 8017274:	08013d49 	.word	0x08013d49

08017278 <_scanf_chars>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	4615      	mov	r5, r2
 801727e:	688a      	ldr	r2, [r1, #8]
 8017280:	4680      	mov	r8, r0
 8017282:	460c      	mov	r4, r1
 8017284:	b932      	cbnz	r2, 8017294 <_scanf_chars+0x1c>
 8017286:	698a      	ldr	r2, [r1, #24]
 8017288:	2a00      	cmp	r2, #0
 801728a:	bf14      	ite	ne
 801728c:	f04f 32ff 	movne.w	r2, #4294967295
 8017290:	2201      	moveq	r2, #1
 8017292:	608a      	str	r2, [r1, #8]
 8017294:	6822      	ldr	r2, [r4, #0]
 8017296:	06d1      	lsls	r1, r2, #27
 8017298:	bf5f      	itttt	pl
 801729a:	681a      	ldrpl	r2, [r3, #0]
 801729c:	1d11      	addpl	r1, r2, #4
 801729e:	6019      	strpl	r1, [r3, #0]
 80172a0:	6817      	ldrpl	r7, [r2, #0]
 80172a2:	2600      	movs	r6, #0
 80172a4:	69a3      	ldr	r3, [r4, #24]
 80172a6:	b1db      	cbz	r3, 80172e0 <_scanf_chars+0x68>
 80172a8:	2b01      	cmp	r3, #1
 80172aa:	d107      	bne.n	80172bc <_scanf_chars+0x44>
 80172ac:	682b      	ldr	r3, [r5, #0]
 80172ae:	6962      	ldr	r2, [r4, #20]
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	5cd3      	ldrb	r3, [r2, r3]
 80172b4:	b9a3      	cbnz	r3, 80172e0 <_scanf_chars+0x68>
 80172b6:	2e00      	cmp	r6, #0
 80172b8:	d132      	bne.n	8017320 <_scanf_chars+0xa8>
 80172ba:	e006      	b.n	80172ca <_scanf_chars+0x52>
 80172bc:	2b02      	cmp	r3, #2
 80172be:	d007      	beq.n	80172d0 <_scanf_chars+0x58>
 80172c0:	2e00      	cmp	r6, #0
 80172c2:	d12d      	bne.n	8017320 <_scanf_chars+0xa8>
 80172c4:	69a3      	ldr	r3, [r4, #24]
 80172c6:	2b01      	cmp	r3, #1
 80172c8:	d12a      	bne.n	8017320 <_scanf_chars+0xa8>
 80172ca:	2001      	movs	r0, #1
 80172cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172d0:	f7fe ffe8 	bl	80162a4 <__locale_ctype_ptr>
 80172d4:	682b      	ldr	r3, [r5, #0]
 80172d6:	781b      	ldrb	r3, [r3, #0]
 80172d8:	4418      	add	r0, r3
 80172da:	7843      	ldrb	r3, [r0, #1]
 80172dc:	071b      	lsls	r3, r3, #28
 80172de:	d4ef      	bmi.n	80172c0 <_scanf_chars+0x48>
 80172e0:	6823      	ldr	r3, [r4, #0]
 80172e2:	06da      	lsls	r2, r3, #27
 80172e4:	bf5e      	ittt	pl
 80172e6:	682b      	ldrpl	r3, [r5, #0]
 80172e8:	781b      	ldrbpl	r3, [r3, #0]
 80172ea:	703b      	strbpl	r3, [r7, #0]
 80172ec:	682a      	ldr	r2, [r5, #0]
 80172ee:	686b      	ldr	r3, [r5, #4]
 80172f0:	f102 0201 	add.w	r2, r2, #1
 80172f4:	602a      	str	r2, [r5, #0]
 80172f6:	68a2      	ldr	r2, [r4, #8]
 80172f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80172fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8017300:	606b      	str	r3, [r5, #4]
 8017302:	f106 0601 	add.w	r6, r6, #1
 8017306:	bf58      	it	pl
 8017308:	3701      	addpl	r7, #1
 801730a:	60a2      	str	r2, [r4, #8]
 801730c:	b142      	cbz	r2, 8017320 <_scanf_chars+0xa8>
 801730e:	2b00      	cmp	r3, #0
 8017310:	dcc8      	bgt.n	80172a4 <_scanf_chars+0x2c>
 8017312:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017316:	4629      	mov	r1, r5
 8017318:	4640      	mov	r0, r8
 801731a:	4798      	blx	r3
 801731c:	2800      	cmp	r0, #0
 801731e:	d0c1      	beq.n	80172a4 <_scanf_chars+0x2c>
 8017320:	6823      	ldr	r3, [r4, #0]
 8017322:	f013 0310 	ands.w	r3, r3, #16
 8017326:	d105      	bne.n	8017334 <_scanf_chars+0xbc>
 8017328:	68e2      	ldr	r2, [r4, #12]
 801732a:	3201      	adds	r2, #1
 801732c:	60e2      	str	r2, [r4, #12]
 801732e:	69a2      	ldr	r2, [r4, #24]
 8017330:	b102      	cbz	r2, 8017334 <_scanf_chars+0xbc>
 8017332:	703b      	strb	r3, [r7, #0]
 8017334:	6923      	ldr	r3, [r4, #16]
 8017336:	441e      	add	r6, r3
 8017338:	6126      	str	r6, [r4, #16]
 801733a:	2000      	movs	r0, #0
 801733c:	e7c6      	b.n	80172cc <_scanf_chars+0x54>
	...

08017340 <_scanf_i>:
 8017340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017344:	469a      	mov	sl, r3
 8017346:	4b74      	ldr	r3, [pc, #464]	; (8017518 <_scanf_i+0x1d8>)
 8017348:	460c      	mov	r4, r1
 801734a:	4683      	mov	fp, r0
 801734c:	4616      	mov	r6, r2
 801734e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017352:	b087      	sub	sp, #28
 8017354:	ab03      	add	r3, sp, #12
 8017356:	68a7      	ldr	r7, [r4, #8]
 8017358:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801735c:	4b6f      	ldr	r3, [pc, #444]	; (801751c <_scanf_i+0x1dc>)
 801735e:	69a1      	ldr	r1, [r4, #24]
 8017360:	4a6f      	ldr	r2, [pc, #444]	; (8017520 <_scanf_i+0x1e0>)
 8017362:	2903      	cmp	r1, #3
 8017364:	bf08      	it	eq
 8017366:	461a      	moveq	r2, r3
 8017368:	1e7b      	subs	r3, r7, #1
 801736a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801736e:	bf84      	itt	hi
 8017370:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017374:	60a3      	strhi	r3, [r4, #8]
 8017376:	6823      	ldr	r3, [r4, #0]
 8017378:	9200      	str	r2, [sp, #0]
 801737a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801737e:	bf88      	it	hi
 8017380:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017384:	f104 091c 	add.w	r9, r4, #28
 8017388:	6023      	str	r3, [r4, #0]
 801738a:	bf8c      	ite	hi
 801738c:	197f      	addhi	r7, r7, r5
 801738e:	2700      	movls	r7, #0
 8017390:	464b      	mov	r3, r9
 8017392:	f04f 0800 	mov.w	r8, #0
 8017396:	9301      	str	r3, [sp, #4]
 8017398:	6831      	ldr	r1, [r6, #0]
 801739a:	ab03      	add	r3, sp, #12
 801739c:	2202      	movs	r2, #2
 801739e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80173a2:	7809      	ldrb	r1, [r1, #0]
 80173a4:	f7e8 ff34 	bl	8000210 <memchr>
 80173a8:	9b01      	ldr	r3, [sp, #4]
 80173aa:	b330      	cbz	r0, 80173fa <_scanf_i+0xba>
 80173ac:	f1b8 0f01 	cmp.w	r8, #1
 80173b0:	d15a      	bne.n	8017468 <_scanf_i+0x128>
 80173b2:	6862      	ldr	r2, [r4, #4]
 80173b4:	b92a      	cbnz	r2, 80173c2 <_scanf_i+0x82>
 80173b6:	6822      	ldr	r2, [r4, #0]
 80173b8:	2108      	movs	r1, #8
 80173ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80173be:	6061      	str	r1, [r4, #4]
 80173c0:	6022      	str	r2, [r4, #0]
 80173c2:	6822      	ldr	r2, [r4, #0]
 80173c4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80173c8:	6022      	str	r2, [r4, #0]
 80173ca:	68a2      	ldr	r2, [r4, #8]
 80173cc:	1e51      	subs	r1, r2, #1
 80173ce:	60a1      	str	r1, [r4, #8]
 80173d0:	b19a      	cbz	r2, 80173fa <_scanf_i+0xba>
 80173d2:	6832      	ldr	r2, [r6, #0]
 80173d4:	1c51      	adds	r1, r2, #1
 80173d6:	6031      	str	r1, [r6, #0]
 80173d8:	7812      	ldrb	r2, [r2, #0]
 80173da:	701a      	strb	r2, [r3, #0]
 80173dc:	1c5d      	adds	r5, r3, #1
 80173de:	6873      	ldr	r3, [r6, #4]
 80173e0:	3b01      	subs	r3, #1
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	6073      	str	r3, [r6, #4]
 80173e6:	dc07      	bgt.n	80173f8 <_scanf_i+0xb8>
 80173e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80173ec:	4631      	mov	r1, r6
 80173ee:	4658      	mov	r0, fp
 80173f0:	4798      	blx	r3
 80173f2:	2800      	cmp	r0, #0
 80173f4:	f040 8086 	bne.w	8017504 <_scanf_i+0x1c4>
 80173f8:	462b      	mov	r3, r5
 80173fa:	f108 0801 	add.w	r8, r8, #1
 80173fe:	f1b8 0f03 	cmp.w	r8, #3
 8017402:	d1c8      	bne.n	8017396 <_scanf_i+0x56>
 8017404:	6862      	ldr	r2, [r4, #4]
 8017406:	b90a      	cbnz	r2, 801740c <_scanf_i+0xcc>
 8017408:	220a      	movs	r2, #10
 801740a:	6062      	str	r2, [r4, #4]
 801740c:	6862      	ldr	r2, [r4, #4]
 801740e:	4945      	ldr	r1, [pc, #276]	; (8017524 <_scanf_i+0x1e4>)
 8017410:	6960      	ldr	r0, [r4, #20]
 8017412:	9301      	str	r3, [sp, #4]
 8017414:	1a89      	subs	r1, r1, r2
 8017416:	f000 f897 	bl	8017548 <__sccl>
 801741a:	9b01      	ldr	r3, [sp, #4]
 801741c:	f04f 0800 	mov.w	r8, #0
 8017420:	461d      	mov	r5, r3
 8017422:	68a3      	ldr	r3, [r4, #8]
 8017424:	6822      	ldr	r2, [r4, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d03a      	beq.n	80174a0 <_scanf_i+0x160>
 801742a:	6831      	ldr	r1, [r6, #0]
 801742c:	6960      	ldr	r0, [r4, #20]
 801742e:	f891 c000 	ldrb.w	ip, [r1]
 8017432:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017436:	2800      	cmp	r0, #0
 8017438:	d032      	beq.n	80174a0 <_scanf_i+0x160>
 801743a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801743e:	d121      	bne.n	8017484 <_scanf_i+0x144>
 8017440:	0510      	lsls	r0, r2, #20
 8017442:	d51f      	bpl.n	8017484 <_scanf_i+0x144>
 8017444:	f108 0801 	add.w	r8, r8, #1
 8017448:	b117      	cbz	r7, 8017450 <_scanf_i+0x110>
 801744a:	3301      	adds	r3, #1
 801744c:	3f01      	subs	r7, #1
 801744e:	60a3      	str	r3, [r4, #8]
 8017450:	6873      	ldr	r3, [r6, #4]
 8017452:	3b01      	subs	r3, #1
 8017454:	2b00      	cmp	r3, #0
 8017456:	6073      	str	r3, [r6, #4]
 8017458:	dd1b      	ble.n	8017492 <_scanf_i+0x152>
 801745a:	6833      	ldr	r3, [r6, #0]
 801745c:	3301      	adds	r3, #1
 801745e:	6033      	str	r3, [r6, #0]
 8017460:	68a3      	ldr	r3, [r4, #8]
 8017462:	3b01      	subs	r3, #1
 8017464:	60a3      	str	r3, [r4, #8]
 8017466:	e7dc      	b.n	8017422 <_scanf_i+0xe2>
 8017468:	f1b8 0f02 	cmp.w	r8, #2
 801746c:	d1ad      	bne.n	80173ca <_scanf_i+0x8a>
 801746e:	6822      	ldr	r2, [r4, #0]
 8017470:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017474:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017478:	d1bf      	bne.n	80173fa <_scanf_i+0xba>
 801747a:	2110      	movs	r1, #16
 801747c:	6061      	str	r1, [r4, #4]
 801747e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017482:	e7a1      	b.n	80173c8 <_scanf_i+0x88>
 8017484:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017488:	6022      	str	r2, [r4, #0]
 801748a:	780b      	ldrb	r3, [r1, #0]
 801748c:	702b      	strb	r3, [r5, #0]
 801748e:	3501      	adds	r5, #1
 8017490:	e7de      	b.n	8017450 <_scanf_i+0x110>
 8017492:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017496:	4631      	mov	r1, r6
 8017498:	4658      	mov	r0, fp
 801749a:	4798      	blx	r3
 801749c:	2800      	cmp	r0, #0
 801749e:	d0df      	beq.n	8017460 <_scanf_i+0x120>
 80174a0:	6823      	ldr	r3, [r4, #0]
 80174a2:	05d9      	lsls	r1, r3, #23
 80174a4:	d50c      	bpl.n	80174c0 <_scanf_i+0x180>
 80174a6:	454d      	cmp	r5, r9
 80174a8:	d908      	bls.n	80174bc <_scanf_i+0x17c>
 80174aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80174ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80174b2:	4632      	mov	r2, r6
 80174b4:	4658      	mov	r0, fp
 80174b6:	4798      	blx	r3
 80174b8:	1e6f      	subs	r7, r5, #1
 80174ba:	463d      	mov	r5, r7
 80174bc:	454d      	cmp	r5, r9
 80174be:	d029      	beq.n	8017514 <_scanf_i+0x1d4>
 80174c0:	6822      	ldr	r2, [r4, #0]
 80174c2:	f012 0210 	ands.w	r2, r2, #16
 80174c6:	d113      	bne.n	80174f0 <_scanf_i+0x1b0>
 80174c8:	702a      	strb	r2, [r5, #0]
 80174ca:	6863      	ldr	r3, [r4, #4]
 80174cc:	9e00      	ldr	r6, [sp, #0]
 80174ce:	4649      	mov	r1, r9
 80174d0:	4658      	mov	r0, fp
 80174d2:	47b0      	blx	r6
 80174d4:	f8da 3000 	ldr.w	r3, [sl]
 80174d8:	6821      	ldr	r1, [r4, #0]
 80174da:	1d1a      	adds	r2, r3, #4
 80174dc:	f8ca 2000 	str.w	r2, [sl]
 80174e0:	f011 0f20 	tst.w	r1, #32
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	d010      	beq.n	801750a <_scanf_i+0x1ca>
 80174e8:	6018      	str	r0, [r3, #0]
 80174ea:	68e3      	ldr	r3, [r4, #12]
 80174ec:	3301      	adds	r3, #1
 80174ee:	60e3      	str	r3, [r4, #12]
 80174f0:	eba5 0509 	sub.w	r5, r5, r9
 80174f4:	44a8      	add	r8, r5
 80174f6:	6925      	ldr	r5, [r4, #16]
 80174f8:	4445      	add	r5, r8
 80174fa:	6125      	str	r5, [r4, #16]
 80174fc:	2000      	movs	r0, #0
 80174fe:	b007      	add	sp, #28
 8017500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017504:	f04f 0800 	mov.w	r8, #0
 8017508:	e7ca      	b.n	80174a0 <_scanf_i+0x160>
 801750a:	07ca      	lsls	r2, r1, #31
 801750c:	bf4c      	ite	mi
 801750e:	8018      	strhmi	r0, [r3, #0]
 8017510:	6018      	strpl	r0, [r3, #0]
 8017512:	e7ea      	b.n	80174ea <_scanf_i+0x1aa>
 8017514:	2001      	movs	r0, #1
 8017516:	e7f2      	b.n	80174fe <_scanf_i+0x1be>
 8017518:	08017d54 	.word	0x08017d54
 801751c:	08014f61 	.word	0x08014f61
 8017520:	080176c5 	.word	0x080176c5
 8017524:	08018215 	.word	0x08018215

08017528 <_sbrk_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4c06      	ldr	r4, [pc, #24]	; (8017544 <_sbrk_r+0x1c>)
 801752c:	2300      	movs	r3, #0
 801752e:	4605      	mov	r5, r0
 8017530:	4608      	mov	r0, r1
 8017532:	6023      	str	r3, [r4, #0]
 8017534:	f7ee fe14 	bl	8006160 <_sbrk>
 8017538:	1c43      	adds	r3, r0, #1
 801753a:	d102      	bne.n	8017542 <_sbrk_r+0x1a>
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	b103      	cbz	r3, 8017542 <_sbrk_r+0x1a>
 8017540:	602b      	str	r3, [r5, #0]
 8017542:	bd38      	pop	{r3, r4, r5, pc}
 8017544:	20037fd4 	.word	0x20037fd4

08017548 <__sccl>:
 8017548:	b570      	push	{r4, r5, r6, lr}
 801754a:	780b      	ldrb	r3, [r1, #0]
 801754c:	2b5e      	cmp	r3, #94	; 0x5e
 801754e:	bf13      	iteet	ne
 8017550:	1c4a      	addne	r2, r1, #1
 8017552:	1c8a      	addeq	r2, r1, #2
 8017554:	784b      	ldrbeq	r3, [r1, #1]
 8017556:	2100      	movne	r1, #0
 8017558:	bf08      	it	eq
 801755a:	2101      	moveq	r1, #1
 801755c:	1e44      	subs	r4, r0, #1
 801755e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017562:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017566:	42ac      	cmp	r4, r5
 8017568:	d1fb      	bne.n	8017562 <__sccl+0x1a>
 801756a:	b913      	cbnz	r3, 8017572 <__sccl+0x2a>
 801756c:	3a01      	subs	r2, #1
 801756e:	4610      	mov	r0, r2
 8017570:	bd70      	pop	{r4, r5, r6, pc}
 8017572:	f081 0401 	eor.w	r4, r1, #1
 8017576:	54c4      	strb	r4, [r0, r3]
 8017578:	1c51      	adds	r1, r2, #1
 801757a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801757e:	2d2d      	cmp	r5, #45	; 0x2d
 8017580:	f101 36ff 	add.w	r6, r1, #4294967295
 8017584:	460a      	mov	r2, r1
 8017586:	d006      	beq.n	8017596 <__sccl+0x4e>
 8017588:	2d5d      	cmp	r5, #93	; 0x5d
 801758a:	d0f0      	beq.n	801756e <__sccl+0x26>
 801758c:	b90d      	cbnz	r5, 8017592 <__sccl+0x4a>
 801758e:	4632      	mov	r2, r6
 8017590:	e7ed      	b.n	801756e <__sccl+0x26>
 8017592:	462b      	mov	r3, r5
 8017594:	e7ef      	b.n	8017576 <__sccl+0x2e>
 8017596:	780e      	ldrb	r6, [r1, #0]
 8017598:	2e5d      	cmp	r6, #93	; 0x5d
 801759a:	d0fa      	beq.n	8017592 <__sccl+0x4a>
 801759c:	42b3      	cmp	r3, r6
 801759e:	dcf8      	bgt.n	8017592 <__sccl+0x4a>
 80175a0:	3301      	adds	r3, #1
 80175a2:	429e      	cmp	r6, r3
 80175a4:	54c4      	strb	r4, [r0, r3]
 80175a6:	dcfb      	bgt.n	80175a0 <__sccl+0x58>
 80175a8:	3102      	adds	r1, #2
 80175aa:	e7e6      	b.n	801757a <__sccl+0x32>

080175ac <strncmp>:
 80175ac:	b510      	push	{r4, lr}
 80175ae:	b16a      	cbz	r2, 80175cc <strncmp+0x20>
 80175b0:	3901      	subs	r1, #1
 80175b2:	1884      	adds	r4, r0, r2
 80175b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80175b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80175bc:	4293      	cmp	r3, r2
 80175be:	d103      	bne.n	80175c8 <strncmp+0x1c>
 80175c0:	42a0      	cmp	r0, r4
 80175c2:	d001      	beq.n	80175c8 <strncmp+0x1c>
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	d1f5      	bne.n	80175b4 <strncmp+0x8>
 80175c8:	1a98      	subs	r0, r3, r2
 80175ca:	bd10      	pop	{r4, pc}
 80175cc:	4610      	mov	r0, r2
 80175ce:	e7fc      	b.n	80175ca <strncmp+0x1e>

080175d0 <_strtoul_l.isra.0>:
 80175d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175d4:	4680      	mov	r8, r0
 80175d6:	4689      	mov	r9, r1
 80175d8:	4692      	mov	sl, r2
 80175da:	461e      	mov	r6, r3
 80175dc:	460f      	mov	r7, r1
 80175de:	463d      	mov	r5, r7
 80175e0:	9808      	ldr	r0, [sp, #32]
 80175e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80175e6:	f7fe fe59 	bl	801629c <__locale_ctype_ptr_l>
 80175ea:	4420      	add	r0, r4
 80175ec:	7843      	ldrb	r3, [r0, #1]
 80175ee:	f013 0308 	ands.w	r3, r3, #8
 80175f2:	d130      	bne.n	8017656 <_strtoul_l.isra.0+0x86>
 80175f4:	2c2d      	cmp	r4, #45	; 0x2d
 80175f6:	d130      	bne.n	801765a <_strtoul_l.isra.0+0x8a>
 80175f8:	787c      	ldrb	r4, [r7, #1]
 80175fa:	1cbd      	adds	r5, r7, #2
 80175fc:	2101      	movs	r1, #1
 80175fe:	2e00      	cmp	r6, #0
 8017600:	d05c      	beq.n	80176bc <_strtoul_l.isra.0+0xec>
 8017602:	2e10      	cmp	r6, #16
 8017604:	d109      	bne.n	801761a <_strtoul_l.isra.0+0x4a>
 8017606:	2c30      	cmp	r4, #48	; 0x30
 8017608:	d107      	bne.n	801761a <_strtoul_l.isra.0+0x4a>
 801760a:	782b      	ldrb	r3, [r5, #0]
 801760c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017610:	2b58      	cmp	r3, #88	; 0x58
 8017612:	d14e      	bne.n	80176b2 <_strtoul_l.isra.0+0xe2>
 8017614:	786c      	ldrb	r4, [r5, #1]
 8017616:	2610      	movs	r6, #16
 8017618:	3502      	adds	r5, #2
 801761a:	f04f 32ff 	mov.w	r2, #4294967295
 801761e:	2300      	movs	r3, #0
 8017620:	fbb2 f2f6 	udiv	r2, r2, r6
 8017624:	fb06 fc02 	mul.w	ip, r6, r2
 8017628:	ea6f 0c0c 	mvn.w	ip, ip
 801762c:	4618      	mov	r0, r3
 801762e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017632:	2f09      	cmp	r7, #9
 8017634:	d817      	bhi.n	8017666 <_strtoul_l.isra.0+0x96>
 8017636:	463c      	mov	r4, r7
 8017638:	42a6      	cmp	r6, r4
 801763a:	dd23      	ble.n	8017684 <_strtoul_l.isra.0+0xb4>
 801763c:	2b00      	cmp	r3, #0
 801763e:	db1e      	blt.n	801767e <_strtoul_l.isra.0+0xae>
 8017640:	4282      	cmp	r2, r0
 8017642:	d31c      	bcc.n	801767e <_strtoul_l.isra.0+0xae>
 8017644:	d101      	bne.n	801764a <_strtoul_l.isra.0+0x7a>
 8017646:	45a4      	cmp	ip, r4
 8017648:	db19      	blt.n	801767e <_strtoul_l.isra.0+0xae>
 801764a:	fb00 4006 	mla	r0, r0, r6, r4
 801764e:	2301      	movs	r3, #1
 8017650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017654:	e7eb      	b.n	801762e <_strtoul_l.isra.0+0x5e>
 8017656:	462f      	mov	r7, r5
 8017658:	e7c1      	b.n	80175de <_strtoul_l.isra.0+0xe>
 801765a:	2c2b      	cmp	r4, #43	; 0x2b
 801765c:	bf04      	itt	eq
 801765e:	1cbd      	addeq	r5, r7, #2
 8017660:	787c      	ldrbeq	r4, [r7, #1]
 8017662:	4619      	mov	r1, r3
 8017664:	e7cb      	b.n	80175fe <_strtoul_l.isra.0+0x2e>
 8017666:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801766a:	2f19      	cmp	r7, #25
 801766c:	d801      	bhi.n	8017672 <_strtoul_l.isra.0+0xa2>
 801766e:	3c37      	subs	r4, #55	; 0x37
 8017670:	e7e2      	b.n	8017638 <_strtoul_l.isra.0+0x68>
 8017672:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017676:	2f19      	cmp	r7, #25
 8017678:	d804      	bhi.n	8017684 <_strtoul_l.isra.0+0xb4>
 801767a:	3c57      	subs	r4, #87	; 0x57
 801767c:	e7dc      	b.n	8017638 <_strtoul_l.isra.0+0x68>
 801767e:	f04f 33ff 	mov.w	r3, #4294967295
 8017682:	e7e5      	b.n	8017650 <_strtoul_l.isra.0+0x80>
 8017684:	2b00      	cmp	r3, #0
 8017686:	da09      	bge.n	801769c <_strtoul_l.isra.0+0xcc>
 8017688:	2322      	movs	r3, #34	; 0x22
 801768a:	f8c8 3000 	str.w	r3, [r8]
 801768e:	f04f 30ff 	mov.w	r0, #4294967295
 8017692:	f1ba 0f00 	cmp.w	sl, #0
 8017696:	d107      	bne.n	80176a8 <_strtoul_l.isra.0+0xd8>
 8017698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801769c:	b101      	cbz	r1, 80176a0 <_strtoul_l.isra.0+0xd0>
 801769e:	4240      	negs	r0, r0
 80176a0:	f1ba 0f00 	cmp.w	sl, #0
 80176a4:	d0f8      	beq.n	8017698 <_strtoul_l.isra.0+0xc8>
 80176a6:	b10b      	cbz	r3, 80176ac <_strtoul_l.isra.0+0xdc>
 80176a8:	f105 39ff 	add.w	r9, r5, #4294967295
 80176ac:	f8ca 9000 	str.w	r9, [sl]
 80176b0:	e7f2      	b.n	8017698 <_strtoul_l.isra.0+0xc8>
 80176b2:	2430      	movs	r4, #48	; 0x30
 80176b4:	2e00      	cmp	r6, #0
 80176b6:	d1b0      	bne.n	801761a <_strtoul_l.isra.0+0x4a>
 80176b8:	2608      	movs	r6, #8
 80176ba:	e7ae      	b.n	801761a <_strtoul_l.isra.0+0x4a>
 80176bc:	2c30      	cmp	r4, #48	; 0x30
 80176be:	d0a4      	beq.n	801760a <_strtoul_l.isra.0+0x3a>
 80176c0:	260a      	movs	r6, #10
 80176c2:	e7aa      	b.n	801761a <_strtoul_l.isra.0+0x4a>

080176c4 <_strtoul_r>:
 80176c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176c6:	4c06      	ldr	r4, [pc, #24]	; (80176e0 <_strtoul_r+0x1c>)
 80176c8:	4d06      	ldr	r5, [pc, #24]	; (80176e4 <_strtoul_r+0x20>)
 80176ca:	6824      	ldr	r4, [r4, #0]
 80176cc:	6a24      	ldr	r4, [r4, #32]
 80176ce:	2c00      	cmp	r4, #0
 80176d0:	bf08      	it	eq
 80176d2:	462c      	moveq	r4, r5
 80176d4:	9400      	str	r4, [sp, #0]
 80176d6:	f7ff ff7b 	bl	80175d0 <_strtoul_l.isra.0>
 80176da:	b003      	add	sp, #12
 80176dc:	bd30      	pop	{r4, r5, pc}
 80176de:	bf00      	nop
 80176e0:	2000000c 	.word	0x2000000c
 80176e4:	20000070 	.word	0x20000070

080176e8 <__submore>:
 80176e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ec:	460c      	mov	r4, r1
 80176ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176f4:	4299      	cmp	r1, r3
 80176f6:	d11d      	bne.n	8017734 <__submore+0x4c>
 80176f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80176fc:	f7ff fa66 	bl	8016bcc <_malloc_r>
 8017700:	b918      	cbnz	r0, 801770a <__submore+0x22>
 8017702:	f04f 30ff 	mov.w	r0, #4294967295
 8017706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801770a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801770e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017710:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017714:	6360      	str	r0, [r4, #52]	; 0x34
 8017716:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801771a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801771e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017722:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017726:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801772a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801772e:	6020      	str	r0, [r4, #0]
 8017730:	2000      	movs	r0, #0
 8017732:	e7e8      	b.n	8017706 <__submore+0x1e>
 8017734:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017736:	0077      	lsls	r7, r6, #1
 8017738:	463a      	mov	r2, r7
 801773a:	f000 f837 	bl	80177ac <_realloc_r>
 801773e:	4605      	mov	r5, r0
 8017740:	2800      	cmp	r0, #0
 8017742:	d0de      	beq.n	8017702 <__submore+0x1a>
 8017744:	eb00 0806 	add.w	r8, r0, r6
 8017748:	4601      	mov	r1, r0
 801774a:	4632      	mov	r2, r6
 801774c:	4640      	mov	r0, r8
 801774e:	f7fb fe8b 	bl	8013468 <memcpy>
 8017752:	f8c4 8000 	str.w	r8, [r4]
 8017756:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801775a:	e7e9      	b.n	8017730 <__submore+0x48>

0801775c <__ascii_wctomb>:
 801775c:	b149      	cbz	r1, 8017772 <__ascii_wctomb+0x16>
 801775e:	2aff      	cmp	r2, #255	; 0xff
 8017760:	bf85      	ittet	hi
 8017762:	238a      	movhi	r3, #138	; 0x8a
 8017764:	6003      	strhi	r3, [r0, #0]
 8017766:	700a      	strbls	r2, [r1, #0]
 8017768:	f04f 30ff 	movhi.w	r0, #4294967295
 801776c:	bf98      	it	ls
 801776e:	2001      	movls	r0, #1
 8017770:	4770      	bx	lr
 8017772:	4608      	mov	r0, r1
 8017774:	4770      	bx	lr

08017776 <memmove>:
 8017776:	4288      	cmp	r0, r1
 8017778:	b510      	push	{r4, lr}
 801777a:	eb01 0302 	add.w	r3, r1, r2
 801777e:	d807      	bhi.n	8017790 <memmove+0x1a>
 8017780:	1e42      	subs	r2, r0, #1
 8017782:	4299      	cmp	r1, r3
 8017784:	d00a      	beq.n	801779c <memmove+0x26>
 8017786:	f811 4b01 	ldrb.w	r4, [r1], #1
 801778a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801778e:	e7f8      	b.n	8017782 <memmove+0xc>
 8017790:	4283      	cmp	r3, r0
 8017792:	d9f5      	bls.n	8017780 <memmove+0xa>
 8017794:	1881      	adds	r1, r0, r2
 8017796:	1ad2      	subs	r2, r2, r3
 8017798:	42d3      	cmn	r3, r2
 801779a:	d100      	bne.n	801779e <memmove+0x28>
 801779c:	bd10      	pop	{r4, pc}
 801779e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80177a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80177a6:	e7f7      	b.n	8017798 <memmove+0x22>

080177a8 <__malloc_lock>:
 80177a8:	4770      	bx	lr

080177aa <__malloc_unlock>:
 80177aa:	4770      	bx	lr

080177ac <_realloc_r>:
 80177ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177ae:	4607      	mov	r7, r0
 80177b0:	4614      	mov	r4, r2
 80177b2:	460e      	mov	r6, r1
 80177b4:	b921      	cbnz	r1, 80177c0 <_realloc_r+0x14>
 80177b6:	4611      	mov	r1, r2
 80177b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80177bc:	f7ff ba06 	b.w	8016bcc <_malloc_r>
 80177c0:	b922      	cbnz	r2, 80177cc <_realloc_r+0x20>
 80177c2:	f7ff f9b5 	bl	8016b30 <_free_r>
 80177c6:	4625      	mov	r5, r4
 80177c8:	4628      	mov	r0, r5
 80177ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80177cc:	f000 f814 	bl	80177f8 <_malloc_usable_size_r>
 80177d0:	42a0      	cmp	r0, r4
 80177d2:	d20f      	bcs.n	80177f4 <_realloc_r+0x48>
 80177d4:	4621      	mov	r1, r4
 80177d6:	4638      	mov	r0, r7
 80177d8:	f7ff f9f8 	bl	8016bcc <_malloc_r>
 80177dc:	4605      	mov	r5, r0
 80177de:	2800      	cmp	r0, #0
 80177e0:	d0f2      	beq.n	80177c8 <_realloc_r+0x1c>
 80177e2:	4631      	mov	r1, r6
 80177e4:	4622      	mov	r2, r4
 80177e6:	f7fb fe3f 	bl	8013468 <memcpy>
 80177ea:	4631      	mov	r1, r6
 80177ec:	4638      	mov	r0, r7
 80177ee:	f7ff f99f 	bl	8016b30 <_free_r>
 80177f2:	e7e9      	b.n	80177c8 <_realloc_r+0x1c>
 80177f4:	4635      	mov	r5, r6
 80177f6:	e7e7      	b.n	80177c8 <_realloc_r+0x1c>

080177f8 <_malloc_usable_size_r>:
 80177f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177fc:	1f18      	subs	r0, r3, #4
 80177fe:	2b00      	cmp	r3, #0
 8017800:	bfbc      	itt	lt
 8017802:	580b      	ldrlt	r3, [r1, r0]
 8017804:	18c0      	addlt	r0, r0, r3
 8017806:	4770      	bx	lr

08017808 <_init>:
 8017808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801780a:	bf00      	nop
 801780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801780e:	bc08      	pop	{r3}
 8017810:	469e      	mov	lr, r3
 8017812:	4770      	bx	lr

08017814 <_fini>:
 8017814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017816:	bf00      	nop
 8017818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801781a:	bc08      	pop	{r3}
 801781c:	469e      	mov	lr, r3
 801781e:	4770      	bx	lr
