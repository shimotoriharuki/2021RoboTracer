
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a2c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019bf0  08019bf0  00029bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a5ec  0801a5ec  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a5ec  0801a5ec  0002a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a5f4  0801a5f4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a5f4  0801a5f4  0002a5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a5fc  0801a5fc  0002a5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a600  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ab8  200001e0  0801a7dc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046c98  0801a7dc  00036c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b145  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b351  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  000752c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354ae  00000000  00000000  00077330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265b5  00000000  00000000  000ac7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011107b  00000000  00000000  000d2d93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a760  00000000  00000000  001e3e8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019bd4 	.word	0x08019bd4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019bd4 	.word	0x08019bd4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a faa2 	bl	800b520 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044790 	.word	0x20044790

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fa8a 	bl	800b520 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044790 	.word	0x20044790

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f92b 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fe92 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fe8c 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fe86 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fe80 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fe7a 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fe74 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fe6e 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fe68 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fe62 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fe5c 	bl	8009d50 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fe50 	bl	8009d50 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fe4a 	bl	8009d50 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f91d 	bl	8017368 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ff5a 	bl	800f0b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ff56 	bl	800f0b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ff52 	bl	800f0b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ff4e 	bl	800f0b0 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004487c 	.word	0x2004487c
 8001248:	200447e4 	.word	0x200447e4
 800124c:	20044904 	.word	0x20044904

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004487c 	.word	0x2004487c
 800137c:	20044904 	.word	0x20044904
 8001380:	200447e4 	.word	0x200447e4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004487c 	.word	0x2004487c
 80013c4:	200447e4 	.word	0x200447e4
 80013c8:	20044904 	.word	0x20044904

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ff0e 	bl	800f250 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ff0a 	bl	800f250 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449e4 	.word	0x200449e4
 8001458:	200446c8 	.word	0x200446c8
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fa9e 	bl	8013d04 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200435d4 	.word	0x200435d4

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fe5d 	bl	80164d0 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fae2 	bl	8013dec <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fadd 	bl	8013dec <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f84b 	bl	80138da <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019bf0 	.word	0x08019bf0
 8001870:	20043544 	.word	0x20043544
 8001874:	200435d4 	.word	0x200435d4
 8001878:	200435c4 	.word	0x200435c4

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fa59 	bl	8013d58 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fcc4 	bl	8014234 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fa53 	bl	8013d58 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fdf8 	bl	80164d0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fa80 	bl	8013dec <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 ffee 	bl	80138da <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 f9f2 	bl	8013d04 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20043444 	.word	0x20043444
 8001930:	20042304 	.word	0x20042304
 8001934:	08019c0c 	.word	0x08019c0c
 8001938:	08019bf0 	.word	0x08019bf0
 800193c:	20043544 	.word	0x20043544
 8001940:	200435d4 	.word	0x200435d4
 8001944:	200435c4 	.word	0x200435c4

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fdfb 	bl	8016578 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fe22 	bl	80145f0 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 f9a4 	bl	8013d04 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019bfc 	.word	0x08019bfc
 80019cc:	20043544 	.word	0x20043544
 80019d0:	200435d4 	.word	0x200435d4

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fdb5 	bl	8016578 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fddc 	bl	80145f0 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 f95e 	bl	8013d04 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019c08 	.word	0x08019c08
 8001a58:	20043544 	.word	0x20043544
 8001a5c:	200435d4 	.word	0x200435d4

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 f967 	bl	8013d58 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fbd2 	bl	8014234 <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 f961 	bl	8013d58 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fd0c 	bl	80164d0 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 f994 	bl	8013dec <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 ff02 	bl	80138da <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 f906 	bl	8013d04 <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20043444 	.word	0x20043444
 8001b08:	20042304 	.word	0x20042304
 8001b0c:	08019c0c 	.word	0x08019c0c
 8001b10:	08019c10 	.word	0x08019c10
 8001b14:	20043544 	.word	0x20043544
 8001b18:	200435d4 	.word	0x200435d4
 8001b1c:	200435c4 	.word	0x200435c4

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fb60 	bl	80131f4 <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019c18 	.word	0x08019c18
 8001b54:	20042404 	.word	0x20042404

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fd33 	bl	80165d0 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fd2f 	bl	80165d0 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20043444 	.word	0x20043444
 8001b80:	20042304 	.word	0x20042304

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fc15 	bl	80143b8 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 f8e2 	bl	8013d58 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fb71 	bl	8013280 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 f8da 	bl	8013d58 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20043444 	.word	0x20043444
 8001bac:	20042304 	.word	0x20042304
 8001bb0:	200435d4 	.word	0x200435d4
 8001bb4:	08019c0c 	.word	0x08019c0c

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20043544 	.word	0x20043544

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fb38 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fce1 	bl	800e5dc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fe0e 	bl	800e844 <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fb24 	bl	800b27c <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044670 	.word	0x20044670

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fb07 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fcb0 	bl	800e5dc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fcaa 	bl	800e5dc <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 faf4 	bl	800b27c <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044670 	.word	0x20044670

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2004460c 	.word	0x2004460c
 8001d64:	2004460a 	.word	0x2004460a
 8001d68:	20044604 	.word	0x20044604

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f007 ffb2 	bl	8009d50 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019c1c 	.word	0x08019c1c
 8001df8:	08019c28 	.word	0x08019c28

08001dfc <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e04:	f7ff ff7a 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <_ZN3IMU12updateValuesEv+0x48>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <_ZN3IMU12updateValuesEv+0x4c>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <_ZN3IMU12updateValuesEv+0x50>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b21a      	sxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	815a      	strh	r2, [r3, #10]

	//static int16_t pre_zg;
	//zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter


	mon_zg= zg_;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <_ZN3IMU12updateValuesEv+0x54>)
 8001e36:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2004460c 	.word	0x2004460c
 8001e48:	2004460a 	.word	0x2004460a
 8001e4c:	20044604 	.word	0x20044604
 8001e50:	20000210 	.word	0x20000210
 8001e54:	00000000 	.word	0x00000000

08001e58 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001e58:	b5b0      	push	{r4, r5, r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e78:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f7fe fb7b 	bl	8000578 <__aeabi_f2d>
 8001e82:	a316      	add	r3, pc, #88	; (adr r3, 8001edc <_ZN3IMU8getOmegaEv+0x84>)
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	f7fe fcf8 	bl	800087c <__aeabi_ddiv>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4614      	mov	r4, r2
 8001e92:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e96:	a313      	add	r3, pc, #76	; (adr r3, 8001ee4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f7fe fbc2 	bl	8000628 <__aeabi_dmul>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	4621      	mov	r1, r4
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <_ZN3IMU8getOmegaEv+0x80>)
 8001eb2:	f7fe fce3 	bl	800087c <__aeabi_ddiv>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	f7fe feab 	bl	8000c18 <__aeabi_d2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	60bb      	str	r3, [r7, #8]

	return omega;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	ee07 3a90 	vmov	s15, r3
}
 8001ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40668000 	.word	0x40668000
 8001edc:	66666666 	.word	0x66666666
 8001ee0:	40306666 	.word	0x40306666
 8001ee4:	54411744 	.word	0x54411744
 8001ee8:	400921fb 	.word	0x400921fb

08001eec <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	b08b      	sub	sp, #44	; 0x2c
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001ef4:	466b      	mov	r3, sp
 8001ef6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001ef8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001efc:	f007 ff28 	bl	8009d50 <HAL_Delay>
	lcd_clear();
 8001f00:	f7ff f8ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f04:	2100      	movs	r1, #0
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7ff f8da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f0c:	4840      	ldr	r0, [pc, #256]	; (8002010 <_ZN3IMU11calibrationEv+0x124>)
 8001f0e:	f7ff f901 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f12:	2101      	movs	r1, #1
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff f8d3 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f1a:	483e      	ldr	r0, [pc, #248]	; (8002014 <_ZN3IMU11calibrationEv+0x128>)
 8001f1c:	f7ff f8fa 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f20:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f24:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f26:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f2a:	1e5d      	subs	r5, r3, #1
 8001f2c:	61bd      	str	r5, [r7, #24]
 8001f2e:	462b      	mov	r3, r5
 8001f30:	3301      	adds	r3, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	f04f 0400 	mov.w	r4, #0
 8001f40:	0154      	lsls	r4, r2, #5
 8001f42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f46:	014b      	lsls	r3, r1, #5
 8001f48:	462b      	mov	r3, r5
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	f04f 0400 	mov.w	r4, #0
 8001f5a:	0154      	lsls	r4, r2, #5
 8001f5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f60:	014b      	lsls	r3, r1, #5
 8001f62:	462b      	mov	r3, r5
 8001f64:	3301      	adds	r3, #1
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	3303      	adds	r3, #3
 8001f6a:	3307      	adds	r3, #7
 8001f6c:	08db      	lsrs	r3, r3, #3
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	ebad 0d03 	sub.w	sp, sp, r3
 8001f74:	466b      	mov	r3, sp
 8001f76:	3303      	adds	r3, #3
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f7e:	2300      	movs	r3, #0
 8001f80:	83fb      	strh	r3, [r7, #30]
 8001f82:	8bfa      	ldrh	r2, [r7, #30]
 8001f84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	da13      	bge.n	8001fb4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f92:	8bfb      	ldrh	r3, [r7, #30]
 8001f94:	ee07 2a90 	vmov	s15, r2
 8001f98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001fa6:	2002      	movs	r0, #2
 8001fa8:	f007 fed2 	bl	8009d50 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001fac:	8bfb      	ldrh	r3, [r7, #30]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	83fb      	strh	r3, [r7, #30]
 8001fb2:	e7e6      	b.n	8001f82 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	462b      	mov	r3, r5
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d00e      	beq.n	8001fea <_ZN3IMU11calibrationEv+0xfe>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fde:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe8:	e7ec      	b.n	8001fc4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001fea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	edc3 7a03 	vstr	s15, [r3, #12]
 8002004:	46b5      	mov	sp, r6
}
 8002006:	bf00      	nop
 8002008:	372c      	adds	r7, #44	; 0x2c
 800200a:	46bd      	mov	sp, r7
 800200c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200e:	bf00      	nop
 8002010:	08019c2c 	.word	0x08019c2c
 8002014:	08019c38 	.word	0x08019c38

08002018 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af02      	add	r7, sp, #8
 800201e:	4603      	mov	r3, r0
 8002020:	460a      	mov	r2, r1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	4613      	mov	r3, r2
 8002026:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	b299      	uxth	r1, r3
 800202c:	1dfa      	adds	r2, r7, #7
 800202e:	2364      	movs	r3, #100	; 0x64
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2301      	movs	r3, #1
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <INA260_read+0x50>)
 8002036:	f009 fa73 	bl	800b520 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	b299      	uxth	r1, r3
 800203e:	f107 020c 	add.w	r2, r7, #12
 8002042:	2364      	movs	r3, #100	; 0x64
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2302      	movs	r3, #2
 8002048:	4807      	ldr	r0, [pc, #28]	; (8002068 <INA260_read+0x50>)
 800204a:	f009 fb67 	bl	800b71c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 800204e:	7b3b      	ldrb	r3, [r7, #12]
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b21a      	sxth	r2, r3
 8002054:	7b7b      	ldrb	r3, [r7, #13]
 8002056:	b21b      	sxth	r3, r3
 8002058:	4313      	orrs	r3, r2
 800205a:	b21b      	sxth	r3, r3
 800205c:	81fb      	strh	r3, [r7, #14]
	return val;
 800205e:	89fb      	ldrh	r3, [r7, #14]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20044824 	.word	0x20044824

0800206c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b087      	sub	sp, #28
 8002070:	af02      	add	r7, sp, #8
 8002072:	4604      	mov	r4, r0
 8002074:	4608      	mov	r0, r1
 8002076:	4611      	mov	r1, r2
 8002078:	461a      	mov	r2, r3
 800207a:	4623      	mov	r3, r4
 800207c:	71fb      	strb	r3, [r7, #7]
 800207e:	4603      	mov	r3, r0
 8002080:	71bb      	strb	r3, [r7, #6]
 8002082:	460b      	mov	r3, r1
 8002084:	717b      	strb	r3, [r7, #5]
 8002086:	4613      	mov	r3, r2
 8002088:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	733b      	strb	r3, [r7, #12]
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	737b      	strb	r3, [r7, #13]
 8002092:	797b      	ldrb	r3, [r7, #5]
 8002094:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8002096:	793b      	ldrb	r3, [r7, #4]
 8002098:	b299      	uxth	r1, r3
 800209a:	f107 020c 	add.w	r2, r7, #12
 800209e:	2364      	movs	r3, #100	; 0x64
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2303      	movs	r3, #3
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <INA260_write+0x48>)
 80020a6:	f009 fa3b 	bl	800b520 <HAL_I2C_Master_Transmit>
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd90      	pop	{r4, r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20044824 	.word	0x20044824

080020b8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	460b      	mov	r3, r1
 80020c4:	71bb      	strb	r3, [r7, #6]
 80020c6:	4613      	mov	r3, r2
 80020c8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 80020ca:	797b      	ldrb	r3, [r7, #5]
 80020cc:	79ba      	ldrb	r2, [r7, #6]
 80020ce:	79f9      	ldrb	r1, [r7, #7]
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ffcb 	bl	800206c <INA260_write>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	4603      	mov	r3, r0
 80020e6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	461a      	mov	r2, r3
 80020ec:	21df      	movs	r1, #223	; 0xdf
 80020ee:	2000      	movs	r0, #0
 80020f0:	f7ff ffe2 	bl	80020b8 <setConfig>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
{

}
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002124:	482a      	ldr	r0, [pc, #168]	; (80021d0 <_ZN8JoyStick8getValueEv+0xbc>)
 8002126:	f009 f891 	bl	800b24c <HAL_GPIO_ReadPin>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <_ZN8JoyStick8getValueEv+0x2e>
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8002142:	2101      	movs	r1, #1
 8002144:	4823      	ldr	r0, [pc, #140]	; (80021d4 <_ZN8JoyStick8getValueEv+0xc0>)
 8002146:	f009 f881 	bl	800b24c <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <_ZN8JoyStick8getValueEv+0x4e>
 800215a:	89fb      	ldrh	r3, [r7, #14]
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8002162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002166:	481a      	ldr	r0, [pc, #104]	; (80021d0 <_ZN8JoyStick8getValueEv+0xbc>)
 8002168:	f009 f870 	bl	800b24c <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <_ZN8JoyStick8getValueEv+0x70>
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8002184:	2104      	movs	r1, #4
 8002186:	4814      	ldr	r0, [pc, #80]	; (80021d8 <_ZN8JoyStick8getValueEv+0xc4>)
 8002188:	f009 f860 	bl	800b24c <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <_ZN8JoyStick8getValueEv+0x90>
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	f043 0308 	orr.w	r3, r3, #8
 80021a2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	480a      	ldr	r0, [pc, #40]	; (80021d0 <_ZN8JoyStick8getValueEv+0xbc>)
 80021a8:	f009 f850 	bl	800b24c <HAL_GPIO_ReadPin>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf0c      	ite	eq
 80021b2:	2301      	moveq	r3, #1
 80021b4:	2300      	movne	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <_ZN8JoyStick8getValueEv+0xb0>
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	f043 0310 	orr.w	r3, r3, #16
 80021c2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80021c4:	89fb      	ldrh	r3, [r7, #14]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40020400 	.word	0x40020400

080021dc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b52      	cmp	r3, #82	; 0x52
 80021ec:	d112      	bne.n	8002214 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021ee:	2200      	movs	r2, #0
 80021f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f4:	4856      	ldr	r0, [pc, #344]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80021f6:	f009 f841 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002200:	4853      	ldr	r0, [pc, #332]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f009 f83b 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002206:	2201      	movs	r2, #1
 8002208:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800220c:	4850      	ldr	r0, [pc, #320]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800220e:	f009 f835 	bl	800b27c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8002212:	e098      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	2b47      	cmp	r3, #71	; 0x47
 8002218:	d112      	bne.n	8002240 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002220:	484b      	ldr	r0, [pc, #300]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002222:	f009 f82b 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800222c:	4848      	ldr	r0, [pc, #288]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f009 f825 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002238:	4845      	ldr	r0, [pc, #276]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800223a:	f009 f81f 	bl	800b27c <HAL_GPIO_WritePin>
}
 800223e:	e082      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	2b42      	cmp	r3, #66	; 0x42
 8002244:	d112      	bne.n	800226c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224c:	4840      	ldr	r0, [pc, #256]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f009 f815 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002258:	483d      	ldr	r0, [pc, #244]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f009 f80f 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002264:	483a      	ldr	r0, [pc, #232]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f009 f809 	bl	800b27c <HAL_GPIO_WritePin>
}
 800226a:	e06c      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b43      	cmp	r3, #67	; 0x43
 8002270:	d112      	bne.n	8002298 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	4835      	ldr	r0, [pc, #212]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f008 ffff 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002284:	4832      	ldr	r0, [pc, #200]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 fff9 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002290:	482f      	ldr	r0, [pc, #188]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f008 fff3 	bl	800b27c <HAL_GPIO_WritePin>
}
 8002296:	e056      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b4d      	cmp	r3, #77	; 0x4d
 800229c:	d112      	bne.n	80022c4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	482a      	ldr	r0, [pc, #168]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f008 ffe9 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	4827      	ldr	r0, [pc, #156]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 ffe3 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	4824      	ldr	r0, [pc, #144]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f008 ffdd 	bl	800b27c <HAL_GPIO_WritePin>
}
 80022c2:	e040      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b59      	cmp	r3, #89	; 0x59
 80022c8:	d112      	bne.n	80022f0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d0:	481f      	ldr	r0, [pc, #124]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f008 ffd3 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022dc:	481c      	ldr	r0, [pc, #112]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 ffcd 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022e2:	2201      	movs	r2, #1
 80022e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e8:	4819      	ldr	r0, [pc, #100]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f008 ffc7 	bl	800b27c <HAL_GPIO_WritePin>
}
 80022ee:	e02a      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b57      	cmp	r3, #87	; 0x57
 80022f4:	d112      	bne.n	800231c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fc:	4814      	ldr	r0, [pc, #80]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f008 ffbd 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	4811      	ldr	r0, [pc, #68]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 ffb7 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002314:	480e      	ldr	r0, [pc, #56]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f008 ffb1 	bl	800b27c <HAL_GPIO_WritePin>
}
 800231a:	e014      	b.n	8002346 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b7e      	cmp	r3, #126	; 0x7e
 8002320:	d111      	bne.n	8002346 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f008 ffa7 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 ffa1 	bl	800b27c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002340:	4803      	ldr	r0, [pc, #12]	; (8002350 <_ZN3LED9fullColorEc+0x174>)
 8002342:	f008 ff9b 	bl	800b27c <HAL_GPIO_WritePin>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40020000 	.word	0x40020000

08002354 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	70fb      	strb	r3, [r7, #3]
 8002360:	4613      	mov	r3, r2
 8002362:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002364:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d106      	bne.n	800237a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002372:	4813      	ldr	r0, [pc, #76]	; (80023c0 <_ZN3LED2LREaa+0x6c>)
 8002374:	f008 ff82 	bl	800b27c <HAL_GPIO_WritePin>
 8002378:	e009      	b.n	800238e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800237a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002382:	2200      	movs	r2, #0
 8002384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <_ZN3LED2LREaa+0x6c>)
 800238a:	f008 ff77 	bl	800b27c <HAL_GPIO_WritePin>

	if(r_status == 1)
 800238e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d106      	bne.n	80023a4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800239c:	4808      	ldr	r0, [pc, #32]	; (80023c0 <_ZN3LED2LREaa+0x6c>)
 800239e:	f008 ff6d 	bl	800b27c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80023a2:	e009      	b.n	80023b8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80023a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80023ac:	2200      	movs	r2, #0
 80023ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <_ZN3LED2LREaa+0x6c>)
 80023b4:	f008 ff62 	bl	800b27c <HAL_GPIO_WritePin>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40020000 	.word	0x40020000

080023c4 <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b092      	sub	sp, #72	; 0x48
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fe92 	bl	80020fc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	647b      	str	r3, [r7, #68]	; 0x44
 80023e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e2:	331c      	adds	r3, #28
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
 80023e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d008      	beq.n	8002400 <_ZN10LineSensorC1Ev+0x3c>
 80023ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80023f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f4:	2200      	movs	r2, #0
 80023f6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80023f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fa:	3302      	adds	r3, #2
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
 80023fe:	e7f2      	b.n	80023e6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002406:	62bb      	str	r3, [r7, #40]	; 0x28
 8002408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240a:	643b      	str	r3, [r7, #64]	; 0x40
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	3338      	adds	r3, #56	; 0x38
 8002410:	627b      	str	r3, [r7, #36]	; 0x24
 8002412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	429a      	cmp	r2, r3
 8002418:	d009      	beq.n	800242e <_ZN10LineSensorC1Ev+0x6a>
 800241a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800241c:	623b      	str	r3, [r7, #32]
		s = 0;
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002428:	3304      	adds	r3, #4
 800242a:	643b      	str	r3, [r7, #64]	; 0x40
 800242c:	e7f1      	b.n	8002412 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3338      	adds	r3, #56	; 0x38
 800243e:	61bb      	str	r3, [r7, #24]
 8002440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	429a      	cmp	r2, r3
 8002446:	d009      	beq.n	800245c <_ZN10LineSensorC1Ev+0x98>
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244a:	617b      	str	r3, [r7, #20]
		m = 0;
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002456:	3304      	adds	r3, #4
 8002458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245a:	e7f1      	b.n	8002440 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3338      	adds	r3, #56	; 0x38
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	429a      	cmp	r2, r3
 8002474:	d009      	beq.n	800248a <_ZN10LineSensorC1Ev+0xc6>
 8002476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002478:	60bb      	str	r3, [r7, #8]
		s = 1;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002480:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002484:	3304      	adds	r3, #4
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
 8002488:	e7f1      	b.n	800246e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	3748      	adds	r7, #72	; 0x48
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	220e      	movs	r2, #14
 80024a0:	4619      	mov	r1, r3
 80024a2:	4803      	ldr	r0, [pc, #12]	; (80024b0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80024a4:	f007 fcba 	bl	8009e1c <HAL_ADC_Start_DMA>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20044748 	.word	0x20044748

080024b4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b0d      	cmp	r3, #13
 80024c4:	dc2f      	bgt.n	8002526 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3392      	adds	r3, #146	; 0x92
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	ed93 7a00 	vldr	s14, [r3]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	33a0      	adds	r3, #160	; 0xa0
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	3304      	adds	r3, #4
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024fa:	4b14      	ldr	r3, [pc, #80]	; (800254c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4619      	mov	r1, r3
 8002500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	1a5b      	subs	r3, r3, r1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	68f9      	ldr	r1, [r7, #12]
 8002510:	440b      	add	r3, r1
 8002512:	3306      	adds	r3, #6
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3301      	adds	r3, #1
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	e7cc      	b.n	80024c0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b07      	ldr	r3, [pc, #28]	; (800254c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002530:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b09      	cmp	r3, #9
 8002538:	d902      	bls.n	8002540 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800253c:	2200      	movs	r2, #0
 800253e:	701a      	strb	r2, [r3, #0]


}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20000250 	.word	0x20000250

08002550 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002550:	b490      	push	{r4, r7}
 8002552:	b08e      	sub	sp, #56	; 0x38
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800255e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002562:	2b0d      	cmp	r3, #13
 8002564:	f200 8087 	bhi.w	8002676 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800256e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002572:	2b09      	cmp	r3, #9
 8002574:	d81c      	bhi.n	80025b0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002576:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800257a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800257e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4423      	add	r3, r4
 800258e:	3306      	adds	r3, #6
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4403      	add	r3, r0
 8002594:	3304      	adds	r3, #4
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	008b      	lsls	r3, r1, #2
 800259a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800259e:	440b      	add	r3, r1
 80025a0:	3b30      	subs	r3, #48	; 0x30
 80025a2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025a4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025a8:	3301      	adds	r3, #1
 80025aa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025ae:	e7de      	b.n	800256e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ba:	2b09      	cmp	r3, #9
 80025bc:	d84d      	bhi.n	800265a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80025be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025c2:	3301      	adds	r3, #1
 80025c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025cc:	2b09      	cmp	r3, #9
 80025ce:	d83e      	bhi.n	800264e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80025d0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025da:	4413      	add	r3, r2
 80025dc:	3b30      	subs	r3, #48	; 0x30
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025ec:	4413      	add	r3, r2
 80025ee:	3b30      	subs	r3, #48	; 0x30
 80025f0:	edd3 7a00 	vldr	s15, [r3]
 80025f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fc:	d521      	bpl.n	8002642 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80025fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002608:	4413      	add	r3, r2
 800260a:	3b30      	subs	r3, #48	; 0x30
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002610:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002614:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002618:	0092      	lsls	r2, r2, #2
 800261a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800261e:	440a      	add	r2, r1
 8002620:	3a30      	subs	r2, #48	; 0x30
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800262a:	440b      	add	r3, r1
 800262c:	3b30      	subs	r3, #48	; 0x30
 800262e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002630:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800263a:	4413      	add	r3, r2
 800263c:	3b30      	subs	r3, #48	; 0x30
 800263e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002640:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002642:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002646:	3301      	adds	r3, #1
 8002648:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800264c:	e7bc      	b.n	80025c8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800264e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002652:	3301      	adds	r3, #1
 8002654:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002658:	e7ad      	b.n	80025b6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 800265a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	33b0      	adds	r3, #176	; 0xb0
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	440b      	add	r3, r1
 8002668:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800266a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800266e:	3301      	adds	r3, #1
 8002670:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002674:	e773      	b.n	800255e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 800267e:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002686:	4a25      	ldr	r2, [pc, #148]	; (800271c <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002688:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002690:	4a23      	ldr	r2, [pc, #140]	; (8002720 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 8002692:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 800269c:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 80026a6:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80026ae:	4a1f      	ldr	r2, [pc, #124]	; (800272c <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 80026b0:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 80026b8:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 80026ba:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026c2:	4a1c      	ldr	r2, [pc, #112]	; (8002734 <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 80026c4:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80026cc:	4a1a      	ldr	r2, [pc, #104]	; (8002738 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 80026ce:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80026d6:	4a19      	ldr	r2, [pc, #100]	; (800273c <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 80026d8:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 80026e2:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80026ea:	4a16      	ldr	r2, [pc, #88]	; (8002744 <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 80026ec:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80026fe:	4a13      	ldr	r2, [pc, #76]	; (800274c <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002700:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002708:	4a11      	ldr	r2, [pc, #68]	; (8002750 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 800270a:	6013      	str	r3, [r2, #0]
}
 800270c:	bf00      	nop
 800270e:	3738      	adds	r7, #56	; 0x38
 8002710:	46bd      	mov	sp, r7
 8002712:	bc90      	pop	{r4, r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000214 	.word	0x20000214
 800271c:	20000218 	.word	0x20000218
 8002720:	2000021c 	.word	0x2000021c
 8002724:	20000220 	.word	0x20000220
 8002728:	20000224 	.word	0x20000224
 800272c:	20000228 	.word	0x20000228
 8002730:	2000022c 	.word	0x2000022c
 8002734:	20000230 	.word	0x20000230
 8002738:	20000234 	.word	0x20000234
 800273c:	20000238 	.word	0x20000238
 8002740:	2000023c 	.word	0x2000023c
 8002744:	20000240 	.word	0x20000240
 8002748:	20000244 	.word	0x20000244
 800274c:	20000248 	.word	0x20000248
 8002750:	2000024c 	.word	0x2000024c

08002754 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0a0      	sub	sp, #128	; 0x80
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800275c:	2064      	movs	r0, #100	; 0x64
 800275e:	f007 faf7 	bl	8009d50 <HAL_Delay>

	lcd_clear();
 8002762:	f7fe fc9d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002766:	2100      	movs	r1, #0
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fca9 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800276e:	4886      	ldr	r0, [pc, #536]	; (8002988 <_ZN10LineSensor11calibrationEv+0x234>)
 8002770:	f7fe fcd0 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002774:	2101      	movs	r1, #1
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe fca2 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800277c:	4883      	ldr	r0, [pc, #524]	; (800298c <_ZN10LineSensor11calibrationEv+0x238>)
 800277e:	f7fe fcc9 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002782:	2300      	movs	r3, #0
 8002784:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002788:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800278c:	2b0d      	cmp	r3, #13
 800278e:	d823      	bhi.n	80027d8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002790:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002794:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	32b0      	adds	r2, #176	; 0xb0
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	440a      	add	r2, r1
 80027a0:	6812      	ldr	r2, [r2, #0]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027a8:	440b      	add	r3, r1
 80027aa:	3b40      	subs	r3, #64	; 0x40
 80027ac:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80027ae:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027b2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	32b0      	adds	r2, #176	; 0xb0
 80027ba:	0092      	lsls	r2, r2, #2
 80027bc:	440a      	add	r2, r1
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027c6:	440b      	add	r3, r1
 80027c8:	3b78      	subs	r3, #120	; 0x78
 80027ca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027cc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027d0:	3301      	adds	r3, #1
 80027d2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027d6:	e7d7      	b.n	8002788 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fc98 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	bf14      	ite	ne
 80027ea:	2301      	movne	r3, #1
 80027ec:	2300      	moveq	r3, #0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d079      	beq.n	80028e8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027fa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027fe:	2b0d      	cmp	r3, #13
 8002800:	d850      	bhi.n	80028a4 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 8002802:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800280c:	4413      	add	r3, r2
 800280e:	3b40      	subs	r3, #64	; 0x40
 8002810:	ed93 7a00 	vldr	s14, [r3]
 8002814:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	33b0      	adds	r3, #176	; 0xb0
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	edd3 7a00 	vldr	s15, [r3]
 8002824:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800282c:	d50f      	bpl.n	800284e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800282e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002832:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	32b0      	adds	r2, #176	; 0xb0
 800283a:	0092      	lsls	r2, r2, #2
 800283c:	440a      	add	r2, r1
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002846:	440b      	add	r3, r1
 8002848:	3b40      	subs	r3, #64	; 0x40
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e024      	b.n	8002898 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800284e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002858:	4413      	add	r3, r2
 800285a:	3b78      	subs	r3, #120	; 0x78
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	33b0      	adds	r3, #176	; 0xb0
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	edd3 7a00 	vldr	s15, [r3]
 8002870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002878:	dd0e      	ble.n	8002898 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800287a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800287e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	32b0      	adds	r2, #176	; 0xb0
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	440a      	add	r2, r1
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002892:	440b      	add	r3, r1
 8002894:	3b78      	subs	r3, #120	; 0x78
 8002896:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002898:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289c:	3301      	adds	r3, #1
 800289e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028a2:	e7aa      	b.n	80027fa <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80028aa:	4618      	mov	r0, r3
 80028ac:	f002 fd4a 	bl	8005344 <_ZN12RotarySwitch8getValueEv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028c6:	2201      	movs	r2, #1
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fd41 	bl	8002354 <_ZN3LED2LREaa>
 80028d2:	e781      	b.n	80027d8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028da:	2200      	movs	r2, #0
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fd37 	bl	8002354 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80028e6:	e777      	b.n	80027d8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028ee:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028f2:	2b0d      	cmp	r3, #13
 80028f4:	d826      	bhi.n	8002944 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80028f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002900:	4413      	add	r3, r2
 8002902:	3b40      	subs	r3, #64	; 0x40
 8002904:	ed93 7a00 	vldr	s14, [r3]
 8002908:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002912:	4413      	add	r3, r2
 8002914:	3b78      	subs	r3, #120	; 0x78
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800291e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002922:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002990 <_ZN10LineSensor11calibrationEv+0x23c>
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	3392      	adds	r3, #146	; 0x92
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002938:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800293c:	3301      	adds	r3, #1
 800293e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002942:	e7d4      	b.n	80028ee <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002944:	2300      	movs	r3, #0
 8002946:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800294a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800294e:	2b0d      	cmp	r3, #13
 8002950:	d815      	bhi.n	800297e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002952:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002956:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800295a:	0092      	lsls	r2, r2, #2
 800295c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002960:	440a      	add	r2, r1
 8002962:	3a78      	subs	r2, #120	; 0x78
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	33a0      	adds	r3, #160	; 0xa0
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3304      	adds	r3, #4
 8002970:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002972:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002976:	3301      	adds	r3, #1
 8002978:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800297c:	e7e5      	b.n	800294a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800297e:	bf00      	nop
 8002980:	3780      	adds	r7, #128	; 0x80
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	08019c44 	.word	0x08019c44
 800298c:	08019c50 	.word	0x08019c50
 8002990:	447a0000 	.word	0x447a0000

08002994 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 80029a0:	2303      	movs	r3, #3
 80029a2:	81bb      	strh	r3, [r7, #12]
 80029a4:	89bb      	ldrh	r3, [r7, #12]
 80029a6:	2b0a      	cmp	r3, #10
 80029a8:	d814      	bhi.n	80029d4 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 80029aa:	89bb      	ldrh	r3, [r7, #12]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	33b0      	adds	r3, #176	; 0xb0
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a28 <_ZN10LineSensor13emergencyStopEv+0x94>
 80029bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c4:	db02      	blt.n	80029cc <_ZN10LineSensor13emergencyStopEv+0x38>
 80029c6:	89fb      	ldrh	r3, [r7, #14]
 80029c8:	3301      	adds	r3, #1
 80029ca:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 80029cc:	89bb      	ldrh	r3, [r7, #12]
 80029ce:	3301      	adds	r3, #1
 80029d0:	81bb      	strh	r3, [r7, #12]
 80029d2:	e7e7      	b.n	80029a4 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	2b07      	cmp	r3, #7
 80029d8:	d906      	bls.n	80029e8 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 80029da:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	e002      	b.n	80029ee <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	2b63      	cmp	r3, #99	; 0x63
 80029f4:	d903      	bls.n	80029fe <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	701a      	strb	r2, [r3, #0]
 80029fc:	e002      	b.n	8002a04 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a06:	881b      	ldrh	r3, [r3, #0]
 8002a08:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d903      	bls.n	8002a18 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a12:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a16:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]

}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	44098000 	.word	0x44098000
 8002a2c:	20000252 	.word	0x20000252
 8002a30:	20000254 	.word	0x20000254

08002a34 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a42:	eef0 7ae7 	vabs.f32	s15, s15
 8002a46:	eeb0 0a67 	vmov.f32	s0, s15
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	645a      	str	r2, [r3, #68]	; 0x44
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ae0:	3350      	adds	r3, #80	; 0x50
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002aec:	3352      	adds	r3, #82	; 0x52
 8002aee:	2200      	movs	r2, #0
 8002af0:	801a      	strh	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002af8:	3354      	adds	r3, #84	; 0x54
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b04:	3388      	adds	r3, #136	; 0x88
 8002b06:	2200      	movs	r2, #0
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b10:	338a      	adds	r3, #138	; 0x8a
 8002b12:	2200      	movs	r2, #0
 8002b14:	801a      	strh	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b1c:	338c      	adds	r3, #140	; 0x8c
 8002b1e:	2200      	movs	r2, #0
 8002b20:	801a      	strh	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b28:	338e      	adds	r3, #142	; 0x8e
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b34:	338f      	adds	r3, #143	; 0x8f
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b40:	3390      	adds	r3, #144	; 0x90
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b4c:	3394      	adds	r3, #148	; 0x94
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b5a:	3398      	adds	r3, #152	; 0x98
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b68:	339c      	adds	r3, #156	; 0x9c
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b76:	33a0      	adds	r3, #160	; 0xa0
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b84:	33a4      	adds	r3, #164	; 0xa4
 8002b86:	2200      	movs	r2, #0
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b90:	33a6      	adds	r3, #166	; 0xa6
 8002b92:	2200      	movs	r2, #0
 8002b94:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a3a      	ldr	r2, [r7, #32]
 8002bac:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb8:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bbe:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc4:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bcc:	2300      	movs	r3, #0
 8002bce:	82fb      	strh	r3, [r7, #22]
 8002bd0:	8afb      	ldrh	r3, [r7, #22]
 8002bd2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d80d      	bhi.n	8002bf6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002be2:	3304      	adds	r3, #4
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bee:	8afb      	ldrh	r3, [r7, #22]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	82fb      	strh	r3, [r7, #22]
 8002bf4:	e7ec      	b.n	8002bd0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	82bb      	strh	r3, [r7, #20]
 8002bfa:	8abb      	ldrh	r3, [r7, #20]
 8002bfc:	2b63      	cmp	r3, #99	; 0x63
 8002bfe:	d80d      	bhi.n	8002c1c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c00:	8abb      	ldrh	r3, [r7, #20]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c08:	3316      	adds	r3, #22
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c14:	8abb      	ldrh	r3, [r7, #20]
 8002c16:	3301      	adds	r3, #1
 8002c18:	82bb      	strh	r3, [r7, #20]
 8002c1a:	e7ee      	b.n	8002bfa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	827b      	strh	r3, [r7, #18]
 8002c20:	8a7b      	ldrh	r3, [r7, #18]
 8002c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c26:	d20d      	bcs.n	8002c44 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002c28:	8a7b      	ldrh	r3, [r7, #18]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c30:	333a      	adds	r3, #58	; 0x3a
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c3c:	8a7b      	ldrh	r3, [r7, #18]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	827b      	strh	r3, [r7, #18]
 8002c42:	e7ed      	b.n	8002c20 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c44:	2300      	movs	r3, #0
 8002c46:	823b      	strh	r3, [r7, #16]
 8002c48:	8a3b      	ldrh	r3, [r7, #16]
 8002c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c4e:	d20d      	bcs.n	8002c6c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002c50:	8a3b      	ldrh	r3, [r7, #16]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002c58:	332e      	adds	r3, #46	; 0x2e
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c64:	8a3b      	ldrh	r3, [r7, #16]
 8002c66:	3301      	adds	r3, #1
 8002c68:	823b      	strh	r3, [r7, #16]
 8002c6a:	e7ed      	b.n	8002c48 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	371c      	adds	r7, #28
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
	...

08002c7c <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002cb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc8:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002ccc:	4a06      	ldr	r2, [pc, #24]	; (8002ce8 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	ee07 3a90 	vmov	s15, r3

}
 8002cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	20000258 	.word	0x20000258
 8002cec:	00000000 	.word	0x00000000

08002cf0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002cf0:	b5b0      	push	{r4, r5, r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7ff ffbf 	bl	8002c7c <_ZN9LineTrace9calcErrorEv>
 8002cfe:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d0c:	4b66      	ldr	r3, [pc, #408]	; (8002ea8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d14c      	bne.n	8002dc6 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d32:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d3a:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002d44:	4b59      	ldr	r3, [pc, #356]	; (8002eac <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d4e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d56:	ee17 0a90 	vmov	r0, s15
 8002d5a:	f7fd fc0d 	bl	8000578 <__aeabi_f2d>
 8002d5e:	a350      	add	r3, pc, #320	; (adr r3, 8002ea0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f7fd fd8a 	bl	800087c <__aeabi_ddiv>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	4621      	mov	r1, r4
 8002d70:	f7fd ff52 	bl	8000c18 <__aeabi_d2f>
 8002d74:	4603      	mov	r3, r0
 8002d76:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbfb 	bl	8000578 <__aeabi_f2d>
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002d8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d94:	ee17 0a90 	vmov	r0, s15
 8002d98:	f7fd fbee 	bl	8000578 <__aeabi_f2d>
 8002d9c:	a340      	add	r3, pc, #256	; (adr r3, 8002ea0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fc41 	bl	8000628 <__aeabi_dmul>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4620      	mov	r0, r4
 8002dac:	4629      	mov	r1, r5
 8002dae:	f7fd fa85 	bl	80002bc <__adddf3>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	4618      	mov	r0, r3
 8002db8:	4621      	mov	r1, r4
 8002dba:	f7fd ff2d 	bl	8000c18 <__aeabi_d2f>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e04b      	b.n	8002e5e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dcc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd4:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002dde:	4b33      	ldr	r3, [pc, #204]	; (8002eac <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002de8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df0:	ee17 0a90 	vmov	r0, s15
 8002df4:	f7fd fbc0 	bl	8000578 <__aeabi_f2d>
 8002df8:	a329      	add	r3, pc, #164	; (adr r3, 8002ea0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f7fd fd3d 	bl	800087c <__aeabi_ddiv>
 8002e02:	4603      	mov	r3, r0
 8002e04:	460c      	mov	r4, r1
 8002e06:	4618      	mov	r0, r3
 8002e08:	4621      	mov	r1, r4
 8002e0a:	f7fd ff05 	bl	8000c18 <__aeabi_d2f>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e12:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fbae 	bl	8000578 <__aeabi_f2d>
 8002e1c:	4604      	mov	r4, r0
 8002e1e:	460d      	mov	r5, r1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e26:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2e:	ee17 0a90 	vmov	r0, s15
 8002e32:	f7fd fba1 	bl	8000578 <__aeabi_f2d>
 8002e36:	a31a      	add	r3, pc, #104	; (adr r3, 8002ea0 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f7fd fbf4 	bl	8000628 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd fa38 	bl	80002bc <__adddf3>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	460c      	mov	r4, r1
 8002e50:	4618      	mov	r0, r3
 8002e52:	4621      	mov	r1, r4
 8002e54:	f7fd fee0 	bl	8000c18 <__aeabi_d2f>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e5c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002e5e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e62:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e6c:	edd3 7a00 	vldr	s15, [r3]
 8002e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e74:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002e82:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e86:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f002 ff78 	bl	8005d80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e90:	4a06      	ldr	r2, [pc, #24]	; (8002eac <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6013      	str	r3, [r2, #0]

}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ea4:	3f50624d 	.word	0x3f50624d
 8002ea8:	2000027c 	.word	0x2000027c
 8002eac:	20000278 	.word	0x20000278

08002eb0 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe fc2f 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 f8fe 	bl	80050c8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f001 fe14 	bl	8004afe <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 fe75 	bl	8004be2 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f08:	b590      	push	{r4, r7, lr}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f1a:	3388      	adds	r3, #136	; 0x88
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	461c      	mov	r4, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f7fe fbdf 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f26:	eef0 7a40 	vmov.f32	s15, s0
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f30:	3316      	adds	r3, #22
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f40:	3388      	adds	r3, #136	; 0x88
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f4e:	3388      	adds	r3, #136	; 0x88
 8002f50:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f58:	3388      	adds	r3, #136	; 0x88
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	2b63      	cmp	r3, #99	; 0x63
 8002f5e:	d905      	bls.n	8002f6c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f66:	3388      	adds	r3, #136	; 0x88
 8002f68:	2263      	movs	r2, #99	; 0x63
 8002f6a:	801a      	strh	r2, [r3, #0]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd90      	pop	{r4, r7, pc}

08002f74 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f86:	338a      	adds	r3, #138	; 0x8a
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	461c      	mov	r4, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f7fe fba9 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f92:	eef0 7a40 	vmov.f32	s15, s0
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f9c:	333a      	adds	r3, #58	; 0x3a
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fac:	338a      	adds	r3, #138	; 0x8a
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fba:	338a      	adds	r3, #138	; 0x8a
 8002fbc:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fc4:	338a      	adds	r3, #138	; 0x8a
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fcc:	d306      	bcc.n	8002fdc <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fd4:	338a      	adds	r3, #138	; 0x8a
 8002fd6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002fda:	801a      	strh	r2, [r3, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd90      	pop	{r4, r7, pc}

08002fe4 <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	ed2d 8b02 	vpush	{d8}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d046      	beq.n	8003088 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003000:	3354      	adds	r3, #84	; 0x54
 8003002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11c      	bne.n	8003044 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69dc      	ldr	r4, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fb57 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003018:	eeb0 8a40 	vmov.f32	s16, s0
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4618      	mov	r0, r3
 8003022:	f002 f840 	bl	80050a6 <_ZN8Odometry8getThetaEv>
 8003026:	ec53 2b10 	vmov	r2, r3, d0
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f7fd fdf3 	bl	8000c18 <__aeabi_d2f>
 8003032:	4603      	mov	r3, r0
 8003034:	ee00 3a90 	vmov	s1, r3
 8003038:	eeb0 0a48 	vmov.f32	s0, s16
 800303c:	4620      	mov	r0, r4
 800303e:	f001 fc15 	bl	800486c <_ZN6Logger21storeDistanceAndThetaEff>
 8003042:	e01b      	b.n	800307c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69dc      	ldr	r4, [r3, #28]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fb3a 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003052:	eeb0 8a40 	vmov.f32	s16, s0
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	4618      	mov	r0, r3
 800305c:	f002 f823 	bl	80050a6 <_ZN8Odometry8getThetaEv>
 8003060:	ec53 2b10 	vmov	r2, r3, d0
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fdd6 	bl	8000c18 <__aeabi_d2f>
 800306c:	4603      	mov	r3, r0
 800306e:	ee00 3a90 	vmov	s1, r3
 8003072:	eeb0 0a48 	vmov.f32	s0, s16
 8003076:	4620      	mov	r0, r4
 8003078:	f001 fc3b 	bl	80048f2 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003086:	801a      	strh	r2, [r3, #0]
	}
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	ecbd 8b02 	vpop	{d8}
 8003092:	bd90      	pop	{r4, r7, pc}
 8003094:	2000025c 	.word	0x2000025c

08003098 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6959      	ldr	r1, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030aa:	3388      	adds	r3, #136	; 0x88
 80030ac:	881b      	ldrh	r3, [r3, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80030b4:	3316      	adds	r3, #22
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	edd3 7a00 	vldr	s15, [r3]
 80030be:	eeb0 0a67 	vmov.f32	s0, s15
 80030c2:	4608      	mov	r0, r1
 80030c4:	f7fe fb1d 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030ce:	3388      	adds	r3, #136	; 0x88
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	3301      	adds	r3, #1
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030dc:	3388      	adds	r3, #136	; 0x88
 80030de:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030e6:	3388      	adds	r3, #136	; 0x88
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	2b63      	cmp	r3, #99	; 0x63
 80030ec:	d905      	bls.n	80030fa <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x62>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030f4:	3388      	adds	r3, #136	; 0x88
 80030f6:	2263      	movs	r2, #99	; 0x63
 80030f8:	801a      	strh	r2, [r3, #0]

}
 80030fa:	bf00      	nop
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003116:	3354      	adds	r3, #84	; 0x54
 8003118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d143      	bne.n	80031a8 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8003120:	edd7 7a00 	vldr	s15, [r7]
 8003124:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003240 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800312c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003130:	d504      	bpl.n	800313c <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	e076      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 800313c:	edd7 7a00 	vldr	s15, [r7]
 8003140:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003244 <_ZN9LineTrace15radius2VelocityEf+0x140>
 8003144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	d502      	bpl.n	8003154 <_ZN9LineTrace15radius2VelocityEf+0x50>
 800314e:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e06a      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 8003154:	edd7 7a00 	vldr	s15, [r7]
 8003158:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800324c <_ZN9LineTrace15radius2VelocityEf+0x148>
 800315c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	d503      	bpl.n	800316e <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8003166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e05d      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 800316e:	edd7 7a00 	vldr	s15, [r7]
 8003172:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003250 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	d502      	bpl.n	8003186 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e051      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003186:	edd7 7a00 	vldr	s15, [r7]
 800318a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003258 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800318e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	d502      	bpl.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e045      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e040      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031ae:	3354      	adds	r3, #84	; 0x54
 80031b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d136      	bne.n	8003226 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 80031b8:	edd7 7a00 	vldr	s15, [r7]
 80031bc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003240 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	d504      	bpl.n	80031d4 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e02a      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 80031d4:	edd7 7a00 	vldr	s15, [r7]
 80031d8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003250 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 80031dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d502      	bpl.n	80031ec <_ZN9LineTrace15radius2VelocityEf+0xe8>
 80031e6:	4b1e      	ldr	r3, [pc, #120]	; (8003260 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 80031e8:	60fb      	str	r3, [r7, #12]
 80031ea:	e01e      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 80031ec:	edd7 7a00 	vldr	s15, [r7]
 80031f0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003258 <_ZN9LineTrace15radius2VelocityEf+0x154>
 80031f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fc:	d502      	bpl.n	8003204 <_ZN9LineTrace15radius2VelocityEf+0x100>
 80031fe:	4b17      	ldr	r3, [pc, #92]	; (800325c <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	e012      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003204:	edd7 7a00 	vldr	s15, [r7]
 8003208:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003264 <_ZN9LineTrace15radius2VelocityEf+0x160>
 800320c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003214:	d502      	bpl.n	800321c <_ZN9LineTrace15radius2VelocityEf+0x118>
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	e006      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e001      	b.n	800322a <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003228:	60fb      	str	r3, [r7, #12]

	return velocity;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	ee07 3a90 	vmov	s15, r3
}
 8003230:	eeb0 0a67 	vmov.f32	s0, s15
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	43960000 	.word	0x43960000
 8003244:	44480000 	.word	0x44480000
 8003248:	3fd9999a 	.word	0x3fd9999a
 800324c:	447a0000 	.word	0x447a0000
 8003250:	44bb8000 	.word	0x44bb8000
 8003254:	40133333 	.word	0x40133333
 8003258:	44fa0000 	.word	0x44fa0000
 800325c:	40200000 	.word	0x40200000
 8003260:	40066666 	.word	0x40066666
 8003264:	451c4000 	.word	0x451c4000
 8003268:	40400000 	.word	0x40400000
 800326c:	3fa66666 	.word	0x3fa66666

08003270 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003270:	b5b0      	push	{r4, r5, r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	ed87 0a02 	vstr	s0, [r7, #8]
 800327c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800327e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003282:	83fb      	strh	r3, [r7, #30]
 8003284:	8bfb      	ldrh	r3, [r7, #30]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 808d 	beq.w	80033a6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800328c:	8bfb      	ldrh	r3, [r7, #30]
 800328e:	3b01      	subs	r3, #1
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003296:	3304      	adds	r3, #4
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	ed93 7a00 	vldr	s14, [r3]
 80032a0:	8bfb      	ldrh	r3, [r7, #30]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032a8:	3304      	adds	r3, #4
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b6:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80032be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c6:	dd6a      	ble.n	800339e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80032c8:	8bfb      	ldrh	r3, [r7, #30]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	4413      	add	r3, r2
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f950 	bl	8000578 <__aeabi_f2d>
 80032d8:	a335      	add	r3, pc, #212	; (adr r3, 80033b0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f7fd f9a3 	bl	8000628 <__aeabi_dmul>
 80032e2:	4603      	mov	r3, r0
 80032e4:	460c      	mov	r4, r1
 80032e6:	4625      	mov	r5, r4
 80032e8:	461c      	mov	r4, r3
 80032ea:	69b8      	ldr	r0, [r7, #24]
 80032ec:	f7fd f944 	bl	8000578 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4620      	mov	r0, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	f7fd fac0 	bl	800087c <__aeabi_ddiv>
 80032fc:	4603      	mov	r3, r0
 80032fe:	460c      	mov	r4, r1
 8003300:	4618      	mov	r0, r3
 8003302:	4621      	mov	r1, r4
 8003304:	f7fd fc88 	bl	8000c18 <__aeabi_d2f>
 8003308:	4603      	mov	r3, r0
 800330a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800330c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003310:	ed97 7a05 	vldr	s14, [r7, #20]
 8003314:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003318:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800331c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003320:	edd7 7a02 	vldr	s15, [r7, #8]
 8003324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	dd37      	ble.n	800339e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800332e:	8bfb      	ldrh	r3, [r7, #30]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003336:	3304      	adds	r3, #4
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f91a 	bl	8000578 <__aeabi_f2d>
 8003344:	4604      	mov	r4, r0
 8003346:	460d      	mov	r5, r1
 8003348:	8bfb      	ldrh	r3, [r7, #30]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	ed93 7a00 	vldr	s14, [r3]
 8003354:	edd7 7a02 	vldr	s15, [r7, #8]
 8003358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335c:	ee17 0a90 	vmov	r0, s15
 8003360:	f7fd f90a 	bl	8000578 <__aeabi_f2d>
 8003364:	a312      	add	r3, pc, #72	; (adr r3, 80033b0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	f7fd f95d 	bl	8000628 <__aeabi_dmul>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4620      	mov	r0, r4
 8003374:	4629      	mov	r1, r5
 8003376:	f7fc ffa1 	bl	80002bc <__adddf3>
 800337a:	4603      	mov	r3, r0
 800337c:	460c      	mov	r4, r1
 800337e:	4619      	mov	r1, r3
 8003380:	4622      	mov	r2, r4
 8003382:	8bfb      	ldrh	r3, [r7, #30]
 8003384:	1e5c      	subs	r4, r3, #1
 8003386:	4608      	mov	r0, r1
 8003388:	4611      	mov	r1, r2
 800338a:	f7fd fc45 	bl	8000c18 <__aeabi_d2f>
 800338e:	4601      	mov	r1, r0
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003396:	3304      	adds	r3, #4
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800339e:	8bfb      	ldrh	r3, [r7, #30]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	83fb      	strh	r3, [r7, #30]
 80033a4:	e76e      	b.n	8003284 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033a6:	bf00      	nop
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bdb0      	pop	{r4, r5, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033b4:	3f50624d 	.word	0x3f50624d

080033b8 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80033b8:	b5b0      	push	{r4, r5, r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80033c4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80033c6:	2300      	movs	r3, #0
 80033c8:	83fb      	strh	r3, [r7, #30]
 80033ca:	8bfb      	ldrh	r3, [r7, #30]
 80033cc:	f241 726f 	movw	r2, #5999	; 0x176f
 80033d0:	4293      	cmp	r3, r2
 80033d2:	f200 808d 	bhi.w	80034f0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80033d6:	8bfb      	ldrh	r3, [r7, #30]
 80033d8:	3301      	adds	r3, #1
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033e0:	3304      	adds	r3, #4
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	ed93 7a00 	vldr	s14, [r3]
 80033ea:	8bfb      	ldrh	r3, [r7, #30]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033f2:	3304      	adds	r3, #4
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003400:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003404:	edd7 7a06 	vldr	s15, [r7, #24]
 8003408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003410:	dd6a      	ble.n	80034e8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 8003412:	8bfb      	ldrh	r3, [r7, #30]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fd f8ab 	bl	8000578 <__aeabi_f2d>
 8003422:	a335      	add	r3, pc, #212	; (adr r3, 80034f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f7fd f8fe 	bl	8000628 <__aeabi_dmul>
 800342c:	4603      	mov	r3, r0
 800342e:	460c      	mov	r4, r1
 8003430:	4625      	mov	r5, r4
 8003432:	461c      	mov	r4, r3
 8003434:	69b8      	ldr	r0, [r7, #24]
 8003436:	f7fd f89f 	bl	8000578 <__aeabi_f2d>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4620      	mov	r0, r4
 8003440:	4629      	mov	r1, r5
 8003442:	f7fd fa1b 	bl	800087c <__aeabi_ddiv>
 8003446:	4603      	mov	r3, r0
 8003448:	460c      	mov	r4, r1
 800344a:	4618      	mov	r0, r3
 800344c:	4621      	mov	r1, r4
 800344e:	f7fd fbe3 	bl	8000c18 <__aeabi_d2f>
 8003452:	4603      	mov	r3, r0
 8003454:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003456:	edd7 6a06 	vldr	s13, [r7, #24]
 800345a:	ed97 7a05 	vldr	s14, [r7, #20]
 800345e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003462:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003466:	ed97 7a04 	vldr	s14, [r7, #16]
 800346a:	edd7 7a02 	vldr	s15, [r7, #8]
 800346e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	dd37      	ble.n	80034e8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003478:	8bfb      	ldrh	r3, [r7, #30]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003480:	3304      	adds	r3, #4
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f875 	bl	8000578 <__aeabi_f2d>
 800348e:	4604      	mov	r4, r0
 8003490:	460d      	mov	r5, r1
 8003492:	8bfb      	ldrh	r3, [r7, #30]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	4413      	add	r3, r2
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034a6:	ee17 0a90 	vmov	r0, s15
 80034aa:	f7fd f865 	bl	8000578 <__aeabi_f2d>
 80034ae:	a312      	add	r3, pc, #72	; (adr r3, 80034f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b4:	f7fd f8b8 	bl	8000628 <__aeabi_dmul>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4620      	mov	r0, r4
 80034be:	4629      	mov	r1, r5
 80034c0:	f7fc fefc 	bl	80002bc <__adddf3>
 80034c4:	4603      	mov	r3, r0
 80034c6:	460c      	mov	r4, r1
 80034c8:	4619      	mov	r1, r3
 80034ca:	4622      	mov	r2, r4
 80034cc:	8bfb      	ldrh	r3, [r7, #30]
 80034ce:	1c5c      	adds	r4, r3, #1
 80034d0:	4608      	mov	r0, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	f7fd fba0 	bl	8000c18 <__aeabi_d2f>
 80034d8:	4601      	mov	r1, r0
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80034e0:	3304      	adds	r3, #4
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	3301      	adds	r3, #1
 80034ec:	83fb      	strh	r3, [r7, #30]
 80034ee:	e76c      	b.n	80033ca <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bdb0      	pop	{r4, r5, r7, pc}
 80034f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034fc:	3f50624d 	.word	0x3f50624d

08003500 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe f915 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003518:	3350      	adds	r3, #80	; 0x50
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003534:	3350      	adds	r3, #80	; 0x50
 8003536:	2200      	movs	r2, #0
 8003538:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003540:	3352      	adds	r3, #82	; 0x52
 8003542:	2200      	movs	r2, #0
 8003544:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800354c:	330c      	adds	r3, #12
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800356e:	3350      	adds	r3, #80	; 0x50
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 809c 	beq.w	80036b0 <_ZN9LineTrace20updateTargetVelocityEv+0x150>
		while(encoder_->getTotalDistance()*0.9527 >= ref_distance_){
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe f8b1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003582:	ee10 3a10 	vmov	r3, s0
 8003586:	4618      	mov	r0, r3
 8003588:	f7fc fff6 	bl	8000578 <__aeabi_f2d>
 800358c:	a34e      	add	r3, pc, #312	; (adr r3, 80036c8 <_ZN9LineTrace20updateTargetVelocityEv+0x168>)
 800358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003592:	f7fd f849 	bl	8000628 <__aeabi_dmul>
 8003596:	4603      	mov	r3, r0
 8003598:	460c      	mov	r4, r1
 800359a:	4625      	mov	r5, r4
 800359c:	461c      	mov	r4, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035a4:	330c      	adds	r3, #12
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fc ffe5 	bl	8000578 <__aeabi_f2d>
 80035ae:	460a      	mov	r2, r1
 80035b0:	4601      	mov	r1, r0
 80035b2:	2301      	movs	r3, #1
 80035b4:	461e      	mov	r6, r3
 80035b6:	4613      	mov	r3, r2
 80035b8:	460a      	mov	r2, r1
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f7fd fab9 	bl	8000b34 <__aeabi_dcmpge>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <_ZN9LineTrace20updateTargetVelocityEv+0x6c>
 80035c8:	2300      	movs	r3, #0
 80035ca:	461e      	mov	r6, r3
 80035cc:	b2f3      	uxtb	r3, r6
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d026      	beq.n	8003620 <_ZN9LineTrace20updateTargetVelocityEv+0xc0>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035d8:	330c      	adds	r3, #12
 80035da:	ed93 7a00 	vldr	s14, [r3]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e4:	3352      	adds	r3, #82	; 0x52
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	3332      	adds	r3, #50	; 0x32
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	3304      	adds	r3, #4
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003600:	330c      	adds	r3, #12
 8003602:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800360c:	3352      	adds	r3, #82	; 0x52
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	3301      	adds	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800361a:	3352      	adds	r3, #82	; 0x52
 800361c:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance()*0.9527 >= ref_distance_){
 800361e:	e7ab      	b.n	8003578 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003626:	3352      	adds	r3, #82	; 0x52
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	f241 726f 	movw	r2, #5999	; 0x176f
 800362e:	4293      	cmp	r3, r2
 8003630:	d906      	bls.n	8003640 <_ZN9LineTrace20updateTargetVelocityEv+0xe0>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003638:	3352      	adds	r3, #82	; 0x52
 800363a:	f241 726f 	movw	r2, #5999	; 0x176f
 800363e:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003646:	330c      	adds	r3, #12
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <_ZN9LineTrace20updateTargetVelocityEv+0x158>)
 800364c:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe f846 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003658:	eef0 7a40 	vmov.f32	s15, s0
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <_ZN9LineTrace20updateTargetVelocityEv+0x15c>)
 800365e:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003668:	3352      	adds	r3, #82	; 0x52
 800366a:	881a      	ldrh	r2, [r3, #0]
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <_ZN9LineTrace20updateTargetVelocityEv+0x160>)
 800366e:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003676:	3352      	adds	r3, #82	; 0x52
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003680:	3304      	adds	r3, #4
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	eeb0 0a67 	vmov.f32	s0, s15
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 faef 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800369a:	3352      	adds	r3, #82	; 0x52
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036a4:	3304      	adds	r3, #4
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a05      	ldr	r2, [pc, #20]	; (80036c4 <_ZN9LineTrace20updateTargetVelocityEv+0x164>)
 80036ae:	6013      	str	r3, [r2, #0]

	}
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b8:	20000268 	.word	0x20000268
 80036bc:	2000026c 	.word	0x2000026c
 80036c0:	20000270 	.word	0x20000270
 80036c4:	20000274 	.word	0x20000274
 80036c8:	b5dcc63f 	.word	0xb5dcc63f
 80036cc:	3fee7c84 	.word	0x3fee7c84

080036d0 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd ffee 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80036ea:	eeb0 7a40 	vmov.f32	s14, s0
 80036ee:	edd7 7a00 	vldr	s15, [r7]
 80036f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fa:	bf94      	ite	ls
 80036fc:	2301      	movls	r3, #1
 80036fe:	2300      	movhi	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800372c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003730:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003738:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800374c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003750:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003754:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003758:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 800375c:	4a40      	ldr	r2, [pc, #256]	; (8003860 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003762:	4a40      	ldr	r2, [pc, #256]	; (8003864 <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x154>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d044      	beq.n	8003800 <_ZN9LineTrace11isCrossLineEv+0xec>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8003776:	edd7 7a03 	vldr	s15, [r7, #12]
 800377a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800386c <_ZN9LineTrace11isCrossLineEv+0x158>
 800377e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003786:	d50f      	bpl.n	80037a8 <_ZN9LineTrace11isCrossLineEv+0x94>
 8003788:	edd7 7a02 	vldr	s15, [r7, #8]
 800378c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800386c <_ZN9LineTrace11isCrossLineEv+0x158>
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d506      	bpl.n	80037a8 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 800379a:	4b35      	ldr	r3, [pc, #212]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b33      	ldr	r3, [pc, #204]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e002      	b.n	80037ae <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80037a8:	4b31      	ldr	r3, [pc, #196]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d94d      	bls.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = true;
 80037b6:	4b2f      	ldr	r3, [pc, #188]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x160>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037bc:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037c2:	4b2b      	ldr	r3, [pc, #172]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037ce:	3390      	adds	r3, #144	; 0x90
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037da:	3354      	adds	r3, #84	; 0x54
 80037dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fb8f 	bl	8002f08 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80037ea:	e032      	b.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff fc53 	bl	8003098 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80037f8:	33a4      	adds	r3, #164	; 0xa4
 80037fa:	2200      	movs	r2, #0
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	e028      	b.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003800:	edd7 7a03 	vldr	s15, [r7, #12]
 8003804:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003878 <_ZN9LineTrace11isCrossLineEv+0x164>
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	dd0f      	ble.n	8003832 <_ZN9LineTrace11isCrossLineEv+0x11e>
 8003812:	edd7 7a02 	vldr	s15, [r7, #8]
 8003816:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003878 <_ZN9LineTrace11isCrossLineEv+0x164>
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	dd06      	ble.n	8003832 <_ZN9LineTrace11isCrossLineEv+0x11e>
			cnt++;
 8003824:	4b12      	ldr	r3, [pc, #72]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <_ZN9LineTrace11isCrossLineEv+0x124>
		}
		else{
			cnt = 0;
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003834:	2200      	movs	r2, #0
 8003836:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	2b09      	cmp	r3, #9
 800383e:	d908      	bls.n	8003852 <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = false;
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003846:	4b08      	ldr	r3, [pc, #32]	; (8003868 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800384e:	2200      	movs	r2, #0
 8003850:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8003854:	781b      	ldrb	r3, [r3, #0]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000260 	.word	0x20000260
 8003864:	20000264 	.word	0x20000264
 8003868:	20000283 	.word	0x20000283
 800386c:	44160000 	.word	0x44160000
 8003870:	20000280 	.word	0x20000280
 8003874:	20000282 	.word	0x20000282
 8003878:	43fa0000 	.word	0x43fa0000

0800387c <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003884:	2300      	movs	r3, #0
 8003886:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd ff1a 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003892:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fc03 	bl	80050a6 <_ZN8Odometry8getThetaEv>
 80038a0:	ec54 3b10 	vmov	r3, r4, d0
 80038a4:	4618      	mov	r0, r3
 80038a6:	4621      	mov	r1, r4
 80038a8:	f7fd f9b6 	bl	8000c18 <__aeabi_d2f>
 80038ac:	4603      	mov	r3, r0
 80038ae:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80038b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80038b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	d101      	bne.n	80038c2 <_ZN9LineTrace8isStableEv+0x46>
 80038be:	4b23      	ldr	r3, [pc, #140]	; (800394c <_ZN9LineTrace8isStableEv+0xd0>)
 80038c0:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80038c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80038c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038ce:	eeb0 0a66 	vmov.f32	s0, s13
 80038d2:	f7ff f8af 	bl	8002a34 <_ZSt3absf>
 80038d6:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80038da:	edd7 7a03 	vldr	s15, [r7, #12]
 80038de:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003950 <_ZN9LineTrace8isStableEv+0xd4>
 80038e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ea:	db01      	blt.n	80038f0 <_ZN9LineTrace8isStableEv+0x74>
 80038ec:	4b19      	ldr	r3, [pc, #100]	; (8003954 <_ZN9LineTrace8isStableEv+0xd8>)
 80038ee:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038f6:	3390      	adds	r3, #144	; 0x90
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d008      	beq.n	8003910 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80038fe:	4b16      	ldr	r3, [pc, #88]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003900:	2200      	movs	r2, #0
 8003902:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800390a:	3390      	adds	r3, #144	; 0x90
 800390c:	2200      	movs	r2, #0
 800390e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003910:	edd7 7a03 	vldr	s15, [r7, #12]
 8003914:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800395c <_ZN9LineTrace8isStableEv+0xe0>
 8003918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800391c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003920:	db06      	blt.n	8003930 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	b29a      	uxth	r2, r3
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e002      	b.n	8003936 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003932:	2200      	movs	r2, #0
 8003934:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <_ZN9LineTrace8isStableEv+0xdc>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d901      	bls.n	8003942 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 800393e:	2301      	movs	r3, #1
 8003940:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003942:	7dfb      	ldrb	r3, [r7, #23]
}
 8003944:	4618      	mov	r0, r3
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd90      	pop	{r4, r7, pc}
 800394c:	3727c5ac 	.word	0x3727c5ac
 8003950:	459c4000 	.word	0x459c4000
 8003954:	459c4000 	.word	0x459c4000
 8003958:	20000284 	.word	0x20000284
 800395c:	44fa0000 	.word	0x44fa0000

08003960 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b092      	sub	sp, #72	; 0x48
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003968:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800396c:	2201      	movs	r2, #1
 800396e:	4963      	ldr	r1, [pc, #396]	; (8003afc <_ZN9LineTrace4initEv+0x19c>)
 8003970:	4863      	ldr	r0, [pc, #396]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003972:	f7fd ffe9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800397a:	2201      	movs	r2, #1
 800397c:	4961      	ldr	r1, [pc, #388]	; (8003b04 <_ZN9LineTrace4initEv+0x1a4>)
 800397e:	4860      	ldr	r0, [pc, #384]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003980:	f7fd ffe2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003984:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003988:	2201      	movs	r2, #1
 800398a:	495f      	ldr	r1, [pc, #380]	; (8003b08 <_ZN9LineTrace4initEv+0x1a8>)
 800398c:	485c      	ldr	r0, [pc, #368]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 800398e:	f7fd ffdb 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003992:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003996:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800399a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800399e:	eeb0 1a66 	vmov.f32	s2, s13
 80039a2:	eef0 0a47 	vmov.f32	s1, s14
 80039a6:	eeb0 0a67 	vmov.f32	s0, s15
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f8c6 	bl	8003b3c <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 80039b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039b4:	2201      	movs	r2, #1
 80039b6:	4955      	ldr	r1, [pc, #340]	; (8003b0c <_ZN9LineTrace4initEv+0x1ac>)
 80039b8:	4851      	ldr	r0, [pc, #324]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 80039ba:	f7fd ffc5 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 80039be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039c2:	2201      	movs	r2, #1
 80039c4:	4952      	ldr	r1, [pc, #328]	; (8003b10 <_ZN9LineTrace4initEv+0x1b0>)
 80039c6:	484e      	ldr	r0, [pc, #312]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 80039c8:	f7fd ffbe 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 80039cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039d0:	2201      	movs	r2, #1
 80039d2:	4950      	ldr	r1, [pc, #320]	; (8003b14 <_ZN9LineTrace4initEv+0x1b4>)
 80039d4:	484a      	ldr	r0, [pc, #296]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 80039d6:	f7fd ffb7 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 80039da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80039de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80039e2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80039e6:	eeb0 1a66 	vmov.f32	s2, s13
 80039ea:	eef0 0a47 	vmov.f32	s1, s14
 80039ee:	eeb0 0a67 	vmov.f32	s0, s15
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f8e8 	bl	8003bc8 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80039f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fc:	2201      	movs	r2, #1
 80039fe:	4946      	ldr	r1, [pc, #280]	; (8003b18 <_ZN9LineTrace4initEv+0x1b8>)
 8003a00:	483f      	ldr	r0, [pc, #252]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a02:	f7fd ffa1 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4943      	ldr	r1, [pc, #268]	; (8003b1c <_ZN9LineTrace4initEv+0x1bc>)
 8003a0e:	483c      	ldr	r0, [pc, #240]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a10:	f7fd ff9a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a18:	2201      	movs	r2, #1
 8003a1a:	4941      	ldr	r1, [pc, #260]	; (8003b20 <_ZN9LineTrace4initEv+0x1c0>)
 8003a1c:	4838      	ldr	r0, [pc, #224]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a1e:	f7fd ff93 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a22:	f107 0320 	add.w	r3, r7, #32
 8003a26:	2201      	movs	r2, #1
 8003a28:	493e      	ldr	r1, [pc, #248]	; (8003b24 <_ZN9LineTrace4initEv+0x1c4>)
 8003a2a:	4835      	ldr	r0, [pc, #212]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a2c:	f7fd ff8c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a30:	f107 031c 	add.w	r3, r7, #28
 8003a34:	2201      	movs	r2, #1
 8003a36:	493c      	ldr	r1, [pc, #240]	; (8003b28 <_ZN9LineTrace4initEv+0x1c8>)
 8003a38:	4831      	ldr	r0, [pc, #196]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a3a:	f7fd ff85 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a3e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f913 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a50:	eeb0 0a67 	vmov.f32	s0, s15
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f91c 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f925 	bl	8003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a68:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f92e 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f937 	bl	8003cf2 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a84:	f107 0318 	add.w	r3, r7, #24
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4928      	ldr	r1, [pc, #160]	; (8003b2c <_ZN9LineTrace4initEv+0x1cc>)
 8003a8c:	481c      	ldr	r0, [pc, #112]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a8e:	f7fd ff5b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a92:	f107 0314 	add.w	r3, r7, #20
 8003a96:	2201      	movs	r2, #1
 8003a98:	4925      	ldr	r1, [pc, #148]	; (8003b30 <_ZN9LineTrace4initEv+0x1d0>)
 8003a9a:	4819      	ldr	r0, [pc, #100]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003a9c:	f7fd ff54 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003aa4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aa8:	eef0 0a47 	vmov.f32	s1, s14
 8003aac:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f97e 	bl	8003db2 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003ac2:	f107 0310 	add.w	r3, r7, #16
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	491a      	ldr	r1, [pc, #104]	; (8003b34 <_ZN9LineTrace4initEv+0x1d4>)
 8003aca:	480d      	ldr	r0, [pc, #52]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003acc:	f7fd ff3c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	4918      	ldr	r1, [pc, #96]	; (8003b38 <_ZN9LineTrace4initEv+0x1d8>)
 8003ad8:	4809      	ldr	r0, [pc, #36]	; (8003b00 <_ZN9LineTrace4initEv+0x1a0>)
 8003ada:	f7fd ff35 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003ade:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ae6:	eef0 0a47 	vmov.f32	s1, s14
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f979 	bl	8003de6 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003af4:	bf00      	nop
 8003af6:	3748      	adds	r7, #72	; 0x48
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	08019c90 	.word	0x08019c90
 8003b00:	08019c98 	.word	0x08019c98
 8003b04:	08019ca0 	.word	0x08019ca0
 8003b08:	08019ca8 	.word	0x08019ca8
 8003b0c:	08019cb0 	.word	0x08019cb0
 8003b10:	08019cbc 	.word	0x08019cbc
 8003b14:	08019cc8 	.word	0x08019cc8
 8003b18:	08019cd4 	.word	0x08019cd4
 8003b1c:	08019ce0 	.word	0x08019ce0
 8003b20:	08019cec 	.word	0x08019cec
 8003b24:	08019cf8 	.word	0x08019cf8
 8003b28:	08019d04 	.word	0x08019d04
 8003b2c:	08019d10 	.word	0x08019d10
 8003b30:	08019d18 	.word	0x08019d18
 8003b34:	08019d20 	.word	0x08019d20
 8003b38:	08019d2c 	.word	0x08019d2c

08003b3c <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b48:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b4c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	ee07 3a90 	vmov	s15, r3
}
 8003b7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	ee07 3a90 	vmov	s15, r3
}
 8003b9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
	return kd_;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb6:	ee07 3a90 	vmov	s15, r3
}
 8003bba:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bd4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bd8:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	ee07 3a90 	vmov	s15, r3
}
 8003c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	ee07 3a90 	vmov	s15, r3
}
 8003c28:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	ee07 3a90 	vmov	s15, r3
}
 8003c46:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	683a      	ldr	r2, [r7, #0]
 8003ca2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	b083      	sub	sp, #12
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
 8003cda:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d20:	ee07 3a90 	vmov	s15, r3
}
 8003d24:	eeb0 0a67 	vmov.f32	s0, s15
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d40:	ee07 3a90 	vmov	s15, r3
}
 8003d44:	eeb0 0a67 	vmov.f32	s0, s15
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d60:	ee07 3a90 	vmov	s15, r3
}
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003d80:	ee07 3a90 	vmov	s15, r3
}
 8003d84:	eeb0 0a67 	vmov.f32	s0, s15
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003da0:	ee07 3a90 	vmov	s15, r3
}
 8003da4:	eeb0 0a67 	vmov.f32	s0, s15
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dbe:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dc8:	3394      	adds	r3, #148	; 0x94
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dd4:	3398      	adds	r3, #152	; 0x98
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	601a      	str	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b085      	sub	sp, #20
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	ed87 0a02 	vstr	s0, [r7, #8]
 8003df2:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dfc:	339c      	adds	r3, #156	; 0x9c
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e08:	33a0      	adds	r3, #160	; 0xa0
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e28:	3394      	adds	r3, #148	; 0x94
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	ee07 3a90 	vmov	s15, r3
}
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e4c:	33a0      	adds	r3, #160	; 0xa0
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	ee07 3a90 	vmov	s15, r3
}
 8003e54:	eeb0 0a67 	vmov.f32	s0, s15
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e70:	339c      	adds	r3, #156	; 0x9c
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	ee07 3a90 	vmov	s15, r3
}
 8003e78:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e94:	3398      	adds	r3, #152	; 0x98
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	ee07 3a90 	vmov	s15, r3
}
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
	...

08003eac <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80fb 	beq.w	80040b6 <_ZN9LineTrace4flipEv+0x20a>
		// ---- line following processing -----//
		pidTrace();
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7fe ff15 	bl	8002cf0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fb4a 	bl	8003560 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8003ecc:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80040c0 <_ZN9LineTrace4flipEv+0x214>
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff fbfd 	bl	80036d0 <_ZN9LineTrace16isTargetDistanceEf>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d028      	beq.n	8003f2e <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff f881 	bl	8002fe4 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fcca 	bl	800387c <_ZN9LineTrace8isStableEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <_ZN9LineTrace4flipEv+0x5c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fb94 	bl	8005620 <_ZN10SideSensor10getStatusLEv>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <_ZN9LineTrace4flipEv+0x5c>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <_ZN9LineTrace4flipEv+0x5e>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f14:	338f      	adds	r3, #143	; 0x8f
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fbfe 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f8cd 	bl	80050c8 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f34:	338f      	adds	r3, #143	; 0x8f
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <_ZN9LineTrace4flipEv+0xa4>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fb6d 	bl	8005620 <_ZN10SideSensor10getStatusLEv>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <_ZN9LineTrace4flipEv+0xa4>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <_ZN9LineTrace4flipEv+0xa6>
 8003f50:	2300      	movs	r3, #0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01d      	beq.n	8003f92 <_ZN9LineTrace4flipEv+0xe6>
			if(mode_selector_ == FIRST_RUNNING){
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f5c:	3354      	adds	r3, #84	; 0x54
 8003f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d103      	bne.n	8003f6e <_ZN9LineTrace4flipEv+0xc2>
				storeSideLineDistance();
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff f804 	bl	8002f74 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f6c:	e005      	b.n	8003f7a <_ZN9LineTrace4flipEv+0xce>
			}
			else{
				//correctionTotalDistanceFromSideMarker();
				correction_check_cnt_ = 0;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f74:	33a4      	adds	r3, #164	; 0xa4
 8003f76:	2200      	movs	r2, #0
 8003f78:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f80:	338f      	adds	r3, #143	; 0x8f
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f8c:	3390      	adds	r3, #144	; 0x90
 8003f8e:	2201      	movs	r2, #1
 8003f90:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7ff fbbe 	bl	8003714 <_ZN9LineTrace11isCrossLineEv>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <_ZN9LineTrace4flipEv+0x106>
			side_sensor_->enableIgnore();
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 fb64 	bl	8005670 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fd fbe2 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 fb74 	bl	80056a4 <_ZN10SideSensor13getIgnoreFlagEv>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <_ZN9LineTrace4flipEv+0x136>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7fd fbc6 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8003fd0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80040c4 <_ZN9LineTrace4flipEv+0x218>
 8003fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fdc:	db01      	blt.n	8003fe2 <_ZN9LineTrace4flipEv+0x136>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <_ZN9LineTrace4flipEv+0x138>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <_ZN9LineTrace4flipEv+0x146>
			side_sensor_->disableIgnore();
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f001 fb4c 	bl	800568a <_ZN10SideSensor13disableIgnoreEv>
		}



		if(stable_flag_ == true) led_.LR(-1, 1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ff8:	338f      	adds	r3, #143	; 0x8f
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <_ZN9LineTrace4flipEv+0x166>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	330c      	adds	r3, #12
 8004004:	2201      	movs	r2, #1
 8004006:	f04f 31ff 	mov.w	r1, #4294967295
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f9a2 	bl	8002354 <_ZN3LED2LREaa>
 8004010:	e007      	b.n	8004022 <_ZN9LineTrace4flipEv+0x176>
		else led_.LR(-1, 0);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	330c      	adds	r3, #12
 8004016:	2200      	movs	r2, #0
 8004018:	f04f 31ff 	mov.w	r1, #4294967295
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe f999 	bl	8002354 <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fcb4 	bl	8002994 <_ZN10LineSensor13emergencyStopEv>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	eddf 0a24 	vldr	s1, [pc, #144]	; 80040c8 <_ZN9LineTrace4flipEv+0x21c>
 800403a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80040c8 <_ZN9LineTrace4flipEv+0x21c>
 800403e:	4618      	mov	r0, r3
 8004040:	f001 fe9e 	bl	8005d80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	4618      	mov	r0, r3
 800404a:	f7fd f99b 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004054:	33a4      	adds	r3, #164	; 0xa4
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	3301      	adds	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004062:	33a4      	adds	r3, #164	; 0xa4
 8004064:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800406c:	33a4      	adds	r3, #164	; 0xa4
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	f242 720f 	movw	r2, #9999	; 0x270f
 8004074:	4293      	cmp	r3, r2
 8004076:	d906      	bls.n	8004086 <_ZN9LineTrace4flipEv+0x1da>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800407e:	33a4      	adds	r3, #164	; 0xa4
 8004080:	f242 7210 	movw	r2, #10000	; 0x2710
 8004084:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800408c:	33a4      	adds	r3, #164	; 0xa4
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	2b50      	cmp	r3, #80	; 0x50
 8004092:	d808      	bhi.n	80040a6 <_ZN9LineTrace4flipEv+0x1fa>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	330c      	adds	r3, #12
 8004098:	2201      	movs	r2, #1
 800409a:	f04f 31ff 	mov.w	r1, #4294967295
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe f958 	bl	8002354 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 80040a4:	e007      	b.n	80040b6 <_ZN9LineTrace4flipEv+0x20a>
		else led_.LR(-1, 0);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	330c      	adds	r3, #12
 80040aa:	2200      	movs	r2, #0
 80040ac:	f04f 31ff 	mov.w	r1, #4294967295
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe f94f 	bl	8002354 <_ZN3LED2LREaa>
}
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	42480000 	.word	0x42480000
 80040c4:	428c0000 	.word	0x428c0000
 80040c8:	00000000 	.word	0x00000000

080040cc <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040de:	3354      	adds	r3, #84	; 0x54
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	801a      	strh	r2, [r3, #0]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fe90 	bl	8005e32 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	4618      	mov	r0, r3
 8004118:	f001 fa9a 	bl	8005650 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004122:	3388      	adds	r3, #136	; 0x88
 8004124:	2200      	movs	r2, #0
 8004126:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800412e:	338a      	adds	r3, #138	; 0x8a
 8004130:	2200      	movs	r2, #0
 8004132:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800413a:	338c      	adds	r3, #140	; 0x8c
 800413c:	2200      	movs	r2, #0
 800413e:	801a      	strh	r2, [r3, #0]
}
 8004140:	bf00      	nop
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004154:	2300      	movs	r3, #0
 8004156:	737b      	strb	r3, [r7, #13]
	start();
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff ffc9 	bl	80040f0 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800415e:	7b7b      	ldrb	r3, [r7, #13]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d15b      	bne.n	800421c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <_ZN9LineTrace7runningEv+0x28>
 800416a:	2b0a      	cmp	r3, #10
 800416c:	d030      	beq.n	80041d0 <_ZN9LineTrace7runningEv+0x88>
 800416e:	e054      	b.n	800421a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	4618      	mov	r0, r3
 8004176:	f001 fa5f 	bl	8005638 <_ZN10SideSensor16getWhiteLineCntREv>
 800417a:	4603      	mov	r3, r0
 800417c:	2b01      	cmp	r3, #1
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d044      	beq.n	8004214 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fe fe90 	bl	8002eb0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004196:	3354      	adds	r3, #84	; 0x54
 8004198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff f9ad 	bl	8003500 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fae3 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fd fac1 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	330c      	adds	r3, #12
 80041be:	f04f 32ff 	mov.w	r2, #4294967295
 80041c2:	2100      	movs	r1, #0
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe f8c5 	bl	8002354 <_ZN3LED2LREaa>
				stage = 10;
 80041ca:	230a      	movs	r3, #10
 80041cc:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041ce:	e021      	b.n	8004214 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 fa2f 	bl	8005638 <_ZN10SideSensor16getWhiteLineCntREv>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b02      	cmp	r3, #2
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d016      	beq.n	8004218 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fe fe7b 	bl	8002ee6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff f998 	bl	8003526 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80041f6:	2064      	movs	r0, #100	; 0x64
 80041f8:	f005 fdaa 	bl	8009d50 <HAL_Delay>

				setTargetVelocity(0);
 80041fc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800422c <_ZN9LineTrace7runningEv+0xe4>
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fd36 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800420a:	f005 fda1 	bl	8009d50 <HAL_Delay>

				goal_flag = true;
 800420e:	2301      	movs	r3, #1
 8004210:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004212:	e001      	b.n	8004218 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004214:	bf00      	nop
 8004216:	e7a2      	b.n	800415e <_ZN9LineTrace7runningEv+0x16>
			break;
 8004218:	bf00      	nop
	while(goal_flag == false){
 800421a:	e7a0      	b.n	800415e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f807 	bl	8004230 <_ZN9LineTrace4stopEv>
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	00000000 	.word	0x00000000

08004230 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	4618      	mov	r0, r3
 8004246:	f001 fe07 	bl	8005e58 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	330c      	adds	r3, #12
 800424e:	2201      	movs	r2, #1
 8004250:	f04f 31ff 	mov.w	r1, #4294967295
 8004254:	4618      	mov	r0, r3
 8004256:	f7fe f87d 	bl	8002354 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004260:	3354      	adds	r3, #84	; 0x54
 8004262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69d8      	ldr	r0, [r3, #28]
 800426e:	4b23      	ldr	r3, [pc, #140]	; (80042fc <_ZN9LineTrace4stopEv+0xcc>)
 8004270:	4a23      	ldr	r2, [pc, #140]	; (8004300 <_ZN9LineTrace4stopEv+0xd0>)
 8004272:	4924      	ldr	r1, [pc, #144]	; (8004304 <_ZN9LineTrace4stopEv+0xd4>)
 8004274:	f000 fbdc 	bl	8004a30 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004278:	e006      	b.n	8004288 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69d8      	ldr	r0, [r3, #28]
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <_ZN9LineTrace4stopEv+0xd8>)
 8004280:	4a22      	ldr	r2, [pc, #136]	; (800430c <_ZN9LineTrace4stopEv+0xdc>)
 8004282:	4920      	ldr	r1, [pc, #128]	; (8004304 <_ZN9LineTrace4stopEv+0xd4>)
 8004284:	f000 fbf7 	bl	8004a76 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800428e:	3358      	adds	r3, #88	; 0x58
 8004290:	2200      	movs	r2, #0
 8004292:	9200      	str	r2, [sp, #0]
 8004294:	2264      	movs	r2, #100	; 0x64
 8004296:	491e      	ldr	r1, [pc, #120]	; (8004310 <_ZN9LineTrace4stopEv+0xe0>)
 8004298:	481a      	ldr	r0, [pc, #104]	; (8004304 <_ZN9LineTrace4stopEv+0xd4>)
 800429a:	f7fd faef 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80042a4:	33e8      	adds	r3, #232	; 0xe8
 80042a6:	2200      	movs	r2, #0
 80042a8:	9200      	str	r2, [sp, #0]
 80042aa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042ae:	4919      	ldr	r1, [pc, #100]	; (8004314 <_ZN9LineTrace4stopEv+0xe4>)
 80042b0:	4814      	ldr	r0, [pc, #80]	; (8004304 <_ZN9LineTrace4stopEv+0xd4>)
 80042b2:	f7fd fae3 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 80042bc:	33b8      	adds	r3, #184	; 0xb8
 80042be:	2200      	movs	r2, #0
 80042c0:	9200      	str	r2, [sp, #0]
 80042c2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042c6:	4914      	ldr	r1, [pc, #80]	; (8004318 <_ZN9LineTrace4stopEv+0xe8>)
 80042c8:	480e      	ldr	r0, [pc, #56]	; (8004304 <_ZN9LineTrace4stopEv+0xd4>)
 80042ca:	f7fd fad7 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	330c      	adds	r3, #12
 80042d2:	2200      	movs	r2, #0
 80042d4:	f04f 31ff 	mov.w	r1, #4294967295
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fe f83b 	bl	8002354 <_ZN3LED2LREaa>

	logger_->resetIdx();
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 fc57 	bl	8004b96 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fc06 	bl	8004afe <_ZN6Logger10resetLogs2Ev>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	08019d38 	.word	0x08019d38
 8004300:	08019d44 	.word	0x08019d44
 8004304:	08019d54 	.word	0x08019d54
 8004308:	08019d60 	.word	0x08019d60
 800430c:	08019d6c 	.word	0x08019d6c
 8004310:	08019d7c 	.word	0x08019d7c
 8004314:	08019d8c 	.word	0x08019d8c
 8004318:	08019d98 	.word	0x08019d98

0800431c <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 800431c:	b590      	push	{r4, r7, lr}
 800431e:	b08b      	sub	sp, #44	; 0x2c
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fb25 	bl	8004978 <_ZN6Logger23getDistanceArrayPointerEv>
 800432e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb2d 	bl	8004994 <_ZN6Logger20getThetaArrayPointerEv>
 800433a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800433c:	2300      	movs	r3, #0
 800433e:	837b      	strh	r3, [r7, #26]
 8004340:	8b7b      	ldrh	r3, [r7, #26]
 8004342:	f241 726f 	movw	r2, #5999	; 0x176f
 8004346:	4293      	cmp	r3, r2
 8004348:	d84b      	bhi.n	80043e2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800434a:	8b7b      	ldrh	r3, [r7, #26]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004356:	8b7b      	ldrh	r3, [r7, #26]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004362:	edd7 7a07 	vldr	s15, [r7, #28]
 8004366:	eef5 7a40 	vcmp.f32	s15, #0.0
 800436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436e:	d101      	bne.n	8004374 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004370:	4b4c      	ldr	r3, [pc, #304]	; (80044a4 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004372:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004374:	ed97 7a02 	vldr	s14, [r7, #8]
 8004378:	edd7 7a07 	vldr	s15, [r7, #28]
 800437c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004380:	eeb0 0a66 	vmov.f32	s0, s13
 8004384:	f7fe fb56 	bl	8002a34 <_ZSt3absf>
 8004388:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800438c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004390:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80044a8 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439c:	db01      	blt.n	80043a2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80043a0:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80043a2:	8b7c      	ldrh	r4, [r7, #26]
 80043a4:	ed97 0a05 	vldr	s0, [r7, #20]
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fe feab 	bl	8003104 <_ZN9LineTrace15radius2VelocityEf>
 80043ae:	eef0 7a40 	vmov.f32	s15, s0
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80043b8:	3304      	adds	r3, #4
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80043c2:	8b7b      	ldrh	r3, [r7, #26]
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	441a      	add	r2, r3
 80043ca:	8b7b      	ldrh	r3, [r7, #26]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	3332      	adds	r3, #50	; 0x32
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	3304      	adds	r3, #4
 80043d8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80043da:	8b7b      	ldrh	r3, [r7, #26]
 80043dc:	3301      	adds	r3, #1
 80043de:	837b      	strh	r3, [r7, #26]
 80043e0:	e7ae      	b.n	8004340 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043e8:	3354      	adds	r3, #84	; 0x54
 80043ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d120      	bne.n	8004434 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043fe:	3310      	adds	r3, #16
 8004400:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004408:	3398      	adds	r3, #152	; 0x98
 800440a:	edd3 7a00 	vldr	s15, [r3]
 800440e:	6939      	ldr	r1, [r7, #16]
 8004410:	eeb0 0a67 	vmov.f32	s0, s15
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fe ff2b 	bl	8003270 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004420:	3394      	adds	r3, #148	; 0x94
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	6939      	ldr	r1, [r7, #16]
 8004428:	eeb0 0a67 	vmov.f32	s0, s15
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fe ffc3 	bl	80033b8 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004432:	e027      	b.n	8004484 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800443a:	3354      	adds	r3, #84	; 0x54
 800443c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d11f      	bne.n	8004484 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004450:	3310      	adds	r3, #16
 8004452:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800445a:	33a0      	adds	r3, #160	; 0xa0
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	eeb0 0a67 	vmov.f32	s0, s15
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe ff02 	bl	8003270 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004472:	339c      	adds	r3, #156	; 0x9c
 8004474:	edd3 7a00 	vldr	s15, [r3]
 8004478:	6939      	ldr	r1, [r7, #16]
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fe ff9a 	bl	80033b8 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800448a:	3310      	adds	r3, #16
 800448c:	2200      	movs	r2, #0
 800448e:	9200      	str	r2, [sp, #0]
 8004490:	f241 7270 	movw	r2, #6000	; 0x1770
 8004494:	4906      	ldr	r1, [pc, #24]	; (80044b0 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004496:	4807      	ldr	r0, [pc, #28]	; (80044b4 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004498:	f7fd f9f0 	bl	800187c <sd_write_array_float>

}
 800449c:	bf00      	nop
 800449e:	3724      	adds	r7, #36	; 0x24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd90      	pop	{r4, r7, pc}
 80044a4:	3727c5ac 	.word	0x3727c5ac
 80044a8:	459c4000 	.word	0x459c4000
 80044ac:	459c4000 	.word	0x459c4000
 80044b0:	08019da8 	.word	0x08019da8
 80044b4:	08019d54 	.word	0x08019d54

080044b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80044b8:	b590      	push	{r4, r7, lr}
 80044ba:	b08b      	sub	sp, #44	; 0x2c
 80044bc:	af02      	add	r7, sp, #8
 80044be:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69d8      	ldr	r0, [r3, #28]
 80044c4:	4b6b      	ldr	r3, [pc, #428]	; (8004674 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80044c6:	4a6c      	ldr	r2, [pc, #432]	; (8004678 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80044c8:	496c      	ldr	r1, [pc, #432]	; (800467c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044ca:	f000 faf9 	bl	8004ac0 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044d4:	3358      	adds	r3, #88	; 0x58
 80044d6:	2264      	movs	r2, #100	; 0x64
 80044d8:	4969      	ldr	r1, [pc, #420]	; (8004680 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80044da:	4868      	ldr	r0, [pc, #416]	; (800467c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044dc:	f7fd fa34 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044e6:	33e8      	adds	r3, #232	; 0xe8
 80044e8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044ec:	4965      	ldr	r1, [pc, #404]	; (8004684 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80044ee:	4863      	ldr	r0, [pc, #396]	; (800467c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044f0:	f7fd fa2a 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fa3d 	bl	8004978 <_ZN6Logger23getDistanceArrayPointerEv>
 80044fe:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fa45 	bl	8004994 <_ZN6Logger20getThetaArrayPointerEv>
 800450a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800450c:	2300      	movs	r3, #0
 800450e:	837b      	strh	r3, [r7, #26]
 8004510:	8b7b      	ldrh	r3, [r7, #26]
 8004512:	f241 726f 	movw	r2, #5999	; 0x176f
 8004516:	4293      	cmp	r3, r2
 8004518:	d84b      	bhi.n	80045b2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800451a:	8b7b      	ldrh	r3, [r7, #26]
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4413      	add	r3, r2
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004526:	8b7b      	ldrh	r3, [r7, #26]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004532:	edd7 7a07 	vldr	s15, [r7, #28]
 8004536:	eef5 7a40 	vcmp.f32	s15, #0.0
 800453a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453e:	d101      	bne.n	8004544 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004540:	4b51      	ldr	r3, [pc, #324]	; (8004688 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004542:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004544:	ed97 7a02 	vldr	s14, [r7, #8]
 8004548:	edd7 7a07 	vldr	s15, [r7, #28]
 800454c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004550:	eeb0 0a66 	vmov.f32	s0, s13
 8004554:	f7fe fa6e 	bl	8002a34 <_ZSt3absf>
 8004558:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800455c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004560:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800468c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800456c:	db01      	blt.n	8004572 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800456e:	4b48      	ldr	r3, [pc, #288]	; (8004690 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004570:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004572:	8b7c      	ldrh	r4, [r7, #26]
 8004574:	ed97 0a05 	vldr	s0, [r7, #20]
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7fe fdc3 	bl	8003104 <_ZN9LineTrace15radius2VelocityEf>
 800457e:	eef0 7a40 	vmov.f32	s15, s0
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004588:	3304      	adds	r3, #4
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004592:	8b7b      	ldrh	r3, [r7, #26]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	441a      	add	r2, r3
 800459a:	8b7b      	ldrh	r3, [r7, #26]
 800459c:	6812      	ldr	r2, [r2, #0]
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	3332      	adds	r3, #50	; 0x32
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3304      	adds	r3, #4
 80045a8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045aa:	8b7b      	ldrh	r3, [r7, #26]
 80045ac:	3301      	adds	r3, #1
 80045ae:	837b      	strh	r3, [r7, #26]
 80045b0:	e7ae      	b.n	8004510 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045b8:	3354      	adds	r3, #84	; 0x54
 80045ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d120      	bne.n	8004604 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045ce:	3310      	adds	r3, #16
 80045d0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045d8:	3398      	adds	r3, #152	; 0x98
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	eeb0 0a67 	vmov.f32	s0, s15
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7fe fe43 	bl	8003270 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045f0:	3394      	adds	r3, #148	; 0x94
 80045f2:	edd3 7a00 	vldr	s15, [r3]
 80045f6:	6939      	ldr	r1, [r7, #16]
 80045f8:	eeb0 0a67 	vmov.f32	s0, s15
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7fe fedb 	bl	80033b8 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004602:	e027      	b.n	8004654 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800460a:	3354      	adds	r3, #84	; 0x54
 800460c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004610:	2b02      	cmp	r3, #2
 8004612:	d11f      	bne.n	8004654 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004620:	3310      	adds	r3, #16
 8004622:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800462a:	33a0      	adds	r3, #160	; 0xa0
 800462c:	edd3 7a00 	vldr	s15, [r3]
 8004630:	6939      	ldr	r1, [r7, #16]
 8004632:	eeb0 0a67 	vmov.f32	s0, s15
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fe fe1a 	bl	8003270 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004642:	339c      	adds	r3, #156	; 0x9c
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	6939      	ldr	r1, [r7, #16]
 800464a:	eeb0 0a67 	vmov.f32	s0, s15
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fe feb2 	bl	80033b8 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800465a:	3310      	adds	r3, #16
 800465c:	2200      	movs	r2, #0
 800465e:	9200      	str	r2, [sp, #0]
 8004660:	f241 7270 	movw	r2, #6000	; 0x1770
 8004664:	490b      	ldr	r1, [pc, #44]	; (8004694 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004668:	f7fd f908 	bl	800187c <sd_write_array_float>

}
 800466c:	bf00      	nop
 800466e:	3724      	adds	r7, #36	; 0x24
 8004670:	46bd      	mov	sp, r7
 8004672:	bd90      	pop	{r4, r7, pc}
 8004674:	08019d38 	.word	0x08019d38
 8004678:	08019d44 	.word	0x08019d44
 800467c:	08019d54 	.word	0x08019d54
 8004680:	08019d7c 	.word	0x08019d7c
 8004684:	08019d8c 	.word	0x08019d8c
 8004688:	3727c5ac 	.word	0x3727c5ac
 800468c:	459c4000 	.word	0x459c4000
 8004690:	459c4000 	.word	0x459c4000
 8004694:	08019da8 	.word	0x08019da8

08004698 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046a6:	33c0      	adds	r3, #192	; 0xc0
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046b2:	33c2      	adds	r3, #194	; 0xc2
 80046b4:	2200      	movs	r2, #0
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046be:	33c4      	adds	r3, #196	; 0xc4
 80046c0:	2200      	movs	r2, #0
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046ca:	33c6      	adds	r3, #198	; 0xc6
 80046cc:	2200      	movs	r2, #0
 80046ce:	801a      	strh	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046d6:	33c8      	adds	r3, #200	; 0xc8
 80046d8:	2200      	movs	r2, #0
 80046da:	801a      	strh	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046e2:	33ca      	adds	r3, #202	; 0xca
 80046e4:	2200      	movs	r2, #0
 80046e6:	801a      	strh	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004704:	f7fd fa0c 	bl	8001b20 <sd_mount>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	bf0c      	ite	eq
 800470e:	2301      	moveq	r3, #1
 8004710:	2300      	movne	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d016      	beq.n	8004746 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004718:	f7fc fcc2 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800471c:	2100      	movs	r1, #0
 800471e:	2000      	movs	r0, #0
 8004720:	f7fc fcce 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004724:	4815      	ldr	r0, [pc, #84]	; (800477c <_ZN6Logger10sdCardInitEv+0x84>)
 8004726:	f7fc fcf5 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800472a:	2101      	movs	r1, #1
 800472c:	2000      	movs	r0, #0
 800472e:	f7fc fcc7 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004732:	4813      	ldr	r0, [pc, #76]	; (8004780 <_ZN6Logger10sdCardInitEv+0x88>)
 8004734:	f7fc fcee 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800473c:	f005 fb08 	bl	8009d50 <HAL_Delay>

	  ret = true;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	e015      	b.n	8004772 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004746:	f7fc fcab 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800474a:	2100      	movs	r1, #0
 800474c:	2000      	movs	r0, #0
 800474e:	f7fc fcb7 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004752:	480a      	ldr	r0, [pc, #40]	; (800477c <_ZN6Logger10sdCardInitEv+0x84>)
 8004754:	f7fc fcde 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004758:	2101      	movs	r1, #1
 800475a:	2000      	movs	r0, #0
 800475c:	f7fc fcb0 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004760:	4808      	ldr	r0, [pc, #32]	; (8004784 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004762:	f7fc fcd7 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800476a:	f005 faf1 	bl	8009d50 <HAL_Delay>

	  ret = false;
 800476e:	2300      	movs	r3, #0
 8004770:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004772:	7bfb      	ldrb	r3, [r7, #15]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	08019db8 	.word	0x08019db8
 8004780:	08019dc4 	.word	0x08019dc4
 8004784:	08019dcc 	.word	0x08019dcc

08004788 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800479a:	33c0      	adds	r3, #192	; 0xc0
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d025      	beq.n	80047ee <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047a8:	33c6      	adds	r3, #198	; 0xc6
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80047b4:	8879      	ldrh	r1, [r7, #2]
 80047b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047c0:	33c6      	adds	r3, #198	; 0xc6
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ce:	33c6      	adds	r3, #198	; 0xc6
 80047d0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047d8:	33c6      	adds	r3, #198	; 0xc6
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047e0:	d305      	bcc.n	80047ee <_ZN6Logger11storeLogIntEs+0x66>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047e8:	33c6      	adds	r3, #198	; 0xc6
 80047ea:	2200      	movs	r2, #0
 80047ec:	801a      	strh	r2, [r3, #0]
	}

}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	460b      	mov	r3, r1
 8004804:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800480c:	33c0      	adds	r3, #192	; 0xc0
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d025      	beq.n	8004860 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800481a:	33c8      	adds	r3, #200	; 0xc8
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004824:	3310      	adds	r3, #16
 8004826:	8879      	ldrh	r1, [r7, #2]
 8004828:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004832:	33c8      	adds	r3, #200	; 0xc8
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004840:	33c8      	adds	r3, #200	; 0xc8
 8004842:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800484a:	33c8      	adds	r3, #200	; 0xc8
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004852:	d305      	bcc.n	8004860 <_ZN6Logger12storeLog2IntEs+0x66>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800485a:	33c8      	adds	r3, #200	; 0xc8
 800485c:	2200      	movs	r2, #0
 800485e:	801a      	strh	r2, [r3, #0]
	}

}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	ed87 0a02 	vstr	s0, [r7, #8]
 8004878:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004882:	33ca      	adds	r3, #202	; 0xca
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800488c:	3310      	adds	r3, #16
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800489c:	33ca      	adds	r3, #202	; 0xca
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 80048a6:	3320      	adds	r3, #32
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048b6:	33ca      	adds	r3, #202	; 0xca
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048c4:	33ca      	adds	r3, #202	; 0xca
 80048c6:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ce:	33ca      	adds	r3, #202	; 0xca
 80048d0:	881b      	ldrh	r3, [r3, #0]
 80048d2:	f241 726f 	movw	r2, #5999	; 0x176f
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d905      	bls.n	80048e6 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048e0:	33ca      	adds	r3, #202	; 0xca
 80048e2:	2200      	movs	r2, #0
 80048e4:	801a      	strh	r2, [r3, #0]
	//}
}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80048fe:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004908:	33ca      	adds	r3, #202	; 0xca
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004912:	3350      	adds	r3, #80	; 0x50
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004922:	33ca      	adds	r3, #202	; 0xca
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800492c:	3340      	adds	r3, #64	; 0x40
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800493c:	33ca      	adds	r3, #202	; 0xca
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	3301      	adds	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800494a:	33ca      	adds	r3, #202	; 0xca
 800494c:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004954:	33ca      	adds	r3, #202	; 0xca
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	f241 726f 	movw	r2, #5999	; 0x176f
 800495c:	4293      	cmp	r3, r2
 800495e:	d905      	bls.n	800496c <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004966:	33ca      	adds	r3, #202	; 0xca
 8004968:	2200      	movs	r2, #0
 800496a:	801a      	strh	r2, [r3, #0]
	//}
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004986:	3340      	adds	r3, #64	; 0x40
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80049a2:	3380      	adds	r3, #128	; 0x80
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	2300      	movs	r3, #0
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	4613      	mov	r3, r2
 80049c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	68b8      	ldr	r0, [r7, #8]
 80049cc:	f7fc ff56 	bl	800187c <sd_write_array_float>
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 80049ea:	2300      	movs	r3, #0
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	4613      	mov	r3, r2
 80049f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f7fd f832 	bl	8001a60 <sd_write_array_int>
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004a16:	3320      	adds	r3, #32
 8004a18:	2200      	movs	r2, #0
 8004a1a:	9200      	str	r2, [sp, #0]
 8004a1c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7fd f81c 	bl	8001a60 <sd_write_array_int>
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af02      	add	r7, sp, #8
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a44:	3340      	adds	r3, #64	; 0x40
 8004a46:	2200      	movs	r2, #0
 8004a48:	9200      	str	r2, [sp, #0]
 8004a4a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	68b8      	ldr	r0, [r7, #8]
 8004a52:	f7fc ff13 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a5c:	3380      	adds	r3, #128	; 0x80
 8004a5e:	2200      	movs	r2, #0
 8004a60:	9200      	str	r2, [sp, #0]
 8004a62:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a66:	6839      	ldr	r1, [r7, #0]
 8004a68:	68b8      	ldr	r0, [r7, #8]
 8004a6a:	f7fc ff07 	bl	800187c <sd_write_array_float>
}
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af02      	add	r7, sp, #8
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a8a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004a8e:	2200      	movs	r2, #0
 8004a90:	9200      	str	r2, [sp, #0]
 8004a92:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	68b8      	ldr	r0, [r7, #8]
 8004a9a:	f7fc feef 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004aa4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	9200      	str	r2, [sp, #0]
 8004aac:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ab0:	6839      	ldr	r1, [r7, #0]
 8004ab2:	68b8      	ldr	r0, [r7, #8]
 8004ab4:	f7fc fee2 	bl	800187c <sd_write_array_float>
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ad4:	3340      	adds	r3, #64	; 0x40
 8004ad6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	68b8      	ldr	r0, [r7, #8]
 8004ade:	f7fc ff33 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004ae8:	3380      	adds	r3, #128	; 0x80
 8004aea:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aee:	6839      	ldr	r1, [r7, #0]
 8004af0:	68b8      	ldr	r0, [r7, #8]
 8004af2:	f7fc ff29 	bl	8001948 <sd_read_array_float>
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004afe:	b480      	push	{r7}
 8004b00:	b08b      	sub	sp, #44	; 0x2c
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b1c:	3340      	adds	r3, #64	; 0x40
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d009      	beq.n	8004b3c <_ZN6Logger10resetLogs2Ev+0x3e>
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	3304      	adds	r3, #4
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3a:	e7f1      	b.n	8004b20 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b46:	613b      	str	r3, [r7, #16]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b52:	3340      	adds	r3, #64	; 0x40
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	6a3a      	ldr	r2, [r7, #32]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d009      	beq.n	8004b72 <_ZN6Logger10resetLogs2Ev+0x74>
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	623b      	str	r3, [r7, #32]
 8004b70:	e7f1      	b.n	8004b56 <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b78:	33c2      	adds	r3, #194	; 0xc2
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b84:	33ca      	adds	r3, #202	; 0xca
 8004b86:	2200      	movs	r2, #0
 8004b88:	801a      	strh	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	372c      	adds	r7, #44	; 0x2c
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr

08004b96 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ba4:	33c2      	adds	r3, #194	; 0xc2
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bb0:	33ca      	adds	r3, #202	; 0xca
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bd0:	33c0      	adds	r3, #192	; 0xc0
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bf0:	33c0      	adds	r3, #192	; 0xc0
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	701a      	strb	r2, [r3, #0]
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	801a      	strh	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	805a      	strh	r2, [r3, #2]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c2c:	2108      	movs	r1, #8
 8004c2e:	4805      	ldr	r0, [pc, #20]	; (8004c44 <_ZN5Motor4initEv+0x20>)
 8004c30:	f00a fa3e 	bl	800f0b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004c34:	210c      	movs	r1, #12
 8004c36:	4803      	ldr	r0, [pc, #12]	; (8004c44 <_ZN5Motor4initEv+0x20>)
 8004c38:	f00a fa3a 	bl	800f0b0 <HAL_TIM_PWM_Start>

}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20044708 	.word	0x20044708

08004c48 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da0d      	bge.n	8004c76 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c60:	481f      	ldr	r0, [pc, #124]	; (8004ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c62:	f006 fb0b 	bl	800b27c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	425b      	negs	r3, r3
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	81fb      	strh	r3, [r7, #14]
 8004c74:	e00a      	b.n	8004c8c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004c76:	2201      	movs	r2, #1
 8004c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c7c:	4818      	ldr	r0, [pc, #96]	; (8004ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c7e:	f006 fafd 	bl	800b27c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da0d      	bge.n	8004cb2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004c96:	2201      	movs	r2, #1
 8004c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c9c:	4810      	ldr	r0, [pc, #64]	; (8004ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c9e:	f006 faed 	bl	800b27c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	425b      	negs	r3, r3
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	81bb      	strh	r3, [r7, #12]
 8004cb0:	e00a      	b.n	8004cc8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004cb8:	4809      	ldr	r0, [pc, #36]	; (8004ce0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cba:	f006 fadf 	bl	800b27c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004cc8:	89fa      	ldrh	r2, [r7, #14]
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004cd0:	89ba      	ldrh	r2, [r7, #12]
 8004cd2:	4b04      	ldr	r3, [pc, #16]	; (8004ce4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40020c00 	.word	0x40020c00
 8004ce4:	20044708 	.word	0x20044708

08004ce8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6178      	str	r0, [r7, #20]
 8004cf0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004cf4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	4b30      	ldr	r3, [pc, #192]	; (8004dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004cfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d02:	f7fb ff21 	bl	8000b48 <__aeabi_dcmpgt>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <_ZN5Motor8setRatioEdd+0x30>
 8004d0c:	f04f 0300 	mov.w	r3, #0
 8004d10:	4c2b      	ldr	r4, [pc, #172]	; (8004dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d12:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004d16:	e00e      	b.n	8004d36 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d22:	f7fb fef3 	bl	8000b0c <__aeabi_dcmplt>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <_ZN5Motor8setRatioEdd+0x4e>
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	4c24      	ldr	r4, [pc, #144]	; (8004dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d32:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	4b21      	ldr	r3, [pc, #132]	; (8004dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d40:	f7fb ff02 	bl	8000b48 <__aeabi_dcmpgt>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <_ZN5Motor8setRatioEdd+0x6e>
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	4c1c      	ldr	r4, [pc, #112]	; (8004dc0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d50:	e9c7 3400 	strd	r3, r4, [r7]
 8004d54:	e00e      	b.n	8004d74 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d60:	f7fb fed4 	bl	8000b0c <__aeabi_dcmplt>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <_ZN5Motor8setRatioEdd+0x8c>
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	4c15      	ldr	r4, [pc, #84]	; (8004dc4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d70:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d7e:	f7fb fc53 	bl	8000628 <__aeabi_dmul>
 8004d82:	4603      	mov	r3, r0
 8004d84:	460c      	mov	r4, r1
 8004d86:	4618      	mov	r0, r3
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f7fb fefd 	bl	8000b88 <__aeabi_d2iz>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	b21a      	sxth	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	; (8004dc8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da0:	f7fb fc42 	bl	8000628 <__aeabi_dmul>
 8004da4:	4603      	mov	r3, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	4618      	mov	r0, r3
 8004daa:	4621      	mov	r1, r4
 8004dac:	f7fb feec 	bl	8000b88 <__aeabi_d2iz>
 8004db0:	4603      	mov	r3, r0
 8004db2:	b21a      	sxth	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	805a      	strh	r2, [r3, #2]

}
 8004db8:	bf00      	nop
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd90      	pop	{r4, r7, pc}
 8004dc0:	3ff00000 	.word	0x3ff00000
 8004dc4:	bff00000 	.word	0xbff00000
 8004dc8:	409c2000 	.word	0x409c2000

08004dcc <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e00:	b490      	push	{r4, r7}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	f04f 0400 	mov.w	r4, #0
 8004e18:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	f04f 0400 	mov.w	r4, #0
 8004e26:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	f04f 0400 	mov.w	r4, #0
 8004e34:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	f04f 0300 	mov.w	r3, #0
 8004e3e:	f04f 0400 	mov.w	r4, #0
 8004e42:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	f04f 0400 	mov.w	r4, #0
 8004e50:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	609a      	str	r2, [r3, #8]
}
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc90      	pop	{r4, r7}
 8004e70:	4770      	bx	lr
 8004e72:	0000      	movs	r0, r0
 8004e74:	0000      	movs	r0, r0
	...

08004e78 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e7c:	b086      	sub	sp, #24
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fc ffe6 	bl	8001e58 <_ZN3IMU8getOmegaEv>
 8004e8c:	ee10 3a10 	vmov	r3, s0
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fb fb71 	bl	8000578 <__aeabi_f2d>
 8004e96:	4603      	mov	r3, r0
 8004e98:	460c      	mov	r4, r1
 8004e9a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fc fc00 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004ea8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004eac:	a376      	add	r3, pc, #472	; (adr r3, 8005088 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004eb6:	f7fb fbb7 	bl	8000628 <__aeabi_dmul>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7fb fb54 	bl	8000578 <__aeabi_f2d>
 8004ed0:	4682      	mov	sl, r0
 8004ed2:	468b      	mov	fp, r1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ee8:	f7fb fcc8 	bl	800087c <__aeabi_ddiv>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4640      	mov	r0, r8
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	f7fb f9e2 	bl	80002bc <__adddf3>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	ec43 2b17 	vmov	d7, r2, r3
 8004f00:	eeb0 0a47 	vmov.f32	s0, s14
 8004f04:	eef0 0a67 	vmov.f32	s1, s15
 8004f08:	f00f fc16 	bl	8014738 <cos>
 8004f0c:	ec53 2b10 	vmov	r2, r3, d0
 8004f10:	4650      	mov	r0, sl
 8004f12:	4659      	mov	r1, fp
 8004f14:	f7fb fb88 	bl	8000628 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	4629      	mov	r1, r5
 8004f20:	f7fb f9cc 	bl	80002bc <__adddf3>
 8004f24:	4603      	mov	r3, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f7fb fb1f 	bl	8000578 <__aeabi_f2d>
 8004f3a:	4682      	mov	sl, r0
 8004f3c:	468b      	mov	fp, r1
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f52:	f7fb fc93 	bl	800087c <__aeabi_ddiv>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	f7fb f9ad 	bl	80002bc <__adddf3>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	ec43 2b17 	vmov	d7, r2, r3
 8004f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f6e:	eef0 0a67 	vmov.f32	s1, s15
 8004f72:	f00f fc25 	bl	80147c0 <sin>
 8004f76:	ec53 2b10 	vmov	r2, r3, d0
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	4659      	mov	r1, fp
 8004f7e:	f7fb fb53 	bl	8000628 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7fb f997 	bl	80002bc <__adddf3>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4623      	mov	r3, r4
 8004fa8:	f7fb f988 	bl	80002bc <__adddf3>
 8004fac:	4603      	mov	r3, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	ed93 7b08 	vldr	d7, [r3, #32]
 8004fc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004fc6:	eef0 0a67 	vmov.f32	s1, s15
 8004fca:	f00f fbb5 	bl	8014738 <cos>
 8004fce:	ec51 0b10 	vmov	r0, r1, d0
 8004fd2:	f04f 0200 	mov.w	r2, #0
 8004fd6:	4b28      	ldr	r3, [pc, #160]	; (8005078 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004fd8:	f7fb fb26 	bl	8000628 <__aeabi_dmul>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	4629      	mov	r1, r5
 8004fe4:	f7fb f96a 	bl	80002bc <__adddf3>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	460c      	mov	r4, r1
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8005002:	eef0 0a67 	vmov.f32	s1, s15
 8005006:	f00f fbdb 	bl	80147c0 <sin>
 800500a:	ec51 0b10 	vmov	r0, r1, d0
 800500e:	f04f 0200 	mov.w	r2, #0
 8005012:	4b19      	ldr	r3, [pc, #100]	; (8005078 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005014:	f7fb fb08 	bl	8000628 <__aeabi_dmul>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4620      	mov	r0, r4
 800501e:	4629      	mov	r1, r5
 8005020:	f7fb f94c 	bl	80002bc <__adddf3>
 8005024:	4603      	mov	r3, r0
 8005026:	460c      	mov	r4, r1
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005034:	4618      	mov	r0, r3
 8005036:	4621      	mov	r1, r4
 8005038:	f7fb fdee 	bl	8000c18 <__aeabi_d2f>
 800503c:	4602      	mov	r2, r0
 800503e:	4b0f      	ldr	r3, [pc, #60]	; (800507c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005040:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005048:	4618      	mov	r0, r3
 800504a:	4621      	mov	r1, r4
 800504c:	f7fb fde4 	bl	8000c18 <__aeabi_d2f>
 8005050:	4602      	mov	r2, r0
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005054:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800505c:	4618      	mov	r0, r3
 800505e:	4621      	mov	r1, r4
 8005060:	f7fb fdda 	bl	8000c18 <__aeabi_d2f>
 8005064:	4602      	mov	r2, r0
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005068:	601a      	str	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005074:	f3af 8000 	nop.w
 8005078:	405b8000 	.word	0x405b8000
 800507c:	20000288 	.word	0x20000288
 8005080:	2000028c 	.word	0x2000028c
 8005084:	20000290 	.word	0x20000290
 8005088:	d2f1a9fc 	.word	0xd2f1a9fc
 800508c:	3f50624d 	.word	0x3f50624d

08005090 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff feed 	bl	8004e78 <_ZN8Odometry12calcPotitionEv>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80050a6:	b490      	push	{r4, r7}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
	return theta_;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050b4:	ec44 3b17 	vmov	d7, r3, r4
}
 80050b8:	eeb0 0a47 	vmov.f32	s0, s14
 80050bc:	eef0 0a67 	vmov.f32	s1, s15
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc90      	pop	{r4, r7}
 80050c6:	4770      	bx	lr

080050c8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80050c8:	b490      	push	{r4, r7}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	f04f 0300 	mov.w	r3, #0
 80050e4:	f04f 0400 	mov.w	r4, #0
 80050e8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	f04f 0300 	mov.w	r3, #0
 80050f2:	f04f 0400 	mov.w	r4, #0
 80050f6:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc90      	pop	{r4, r7}
 8005102:	4770      	bx	lr

08005104 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005104:	b490      	push	{r4, r7}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	f04f 0400 	mov.w	r4, #0
 800511c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	f04f 0300 	mov.w	r3, #0
 8005126:	f04f 0400 	mov.w	r4, #0
 800512a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	f04f 0400 	mov.w	r4, #0
 8005138:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005142:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005146:	2200      	movs	r2, #0
 8005148:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800514a:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <_ZN13PathFollowingC1Ev+0xec>)
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005158:	4a25      	ldr	r2, [pc, #148]	; (80051f0 <_ZN13PathFollowingC1Ev+0xec>)
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	f04f 0400 	mov.w	r4, #0
 8005162:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005166:	4a22      	ldr	r2, [pc, #136]	; (80051f0 <_ZN13PathFollowingC1Ev+0xec>)
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005174:	4a1f      	ldr	r2, [pc, #124]	; (80051f4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005182:	4a1c      	ldr	r2, [pc, #112]	; (80051f4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	f04f 0400 	mov.w	r4, #0
 800518c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <_ZN13PathFollowingC1Ev+0xf0>)
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	f04f 0400 	mov.w	r4, #0
 800519a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800519e:	4a15      	ldr	r2, [pc, #84]	; (80051f4 <_ZN13PathFollowingC1Ev+0xf0>)
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80051ac:	4a11      	ldr	r2, [pc, #68]	; (80051f4 <_ZN13PathFollowingC1Ev+0xf0>)
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	f04f 0400 	mov.w	r4, #0
 80051b6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80051ba:	4a0e      	ldr	r2, [pc, #56]	; (80051f4 <_ZN13PathFollowingC1Ev+0xf0>)
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80051c8:	4a0b      	ldr	r2, [pc, #44]	; (80051f8 <_ZN13PathFollowingC1Ev+0xf4>)
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80051d6:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <_ZN13PathFollowingC1Ev+0xf4>)
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc90      	pop	{r4, r7}
 80051ee:	4770      	bx	lr
 80051f0:	20044c08 	.word	0x20044c08
 80051f4:	20044b98 	.word	0x20044b98
 80051f8:	20044bf8 	.word	0x20044bf8

080051fc <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005204:	f001 fdbe 	bl	8006d84 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005208:	f107 0318 	add.w	r3, r7, #24
 800520c:	2201      	movs	r2, #1
 800520e:	4915      	ldr	r1, [pc, #84]	; (8005264 <_ZN13PathFollowing4initEv+0x68>)
 8005210:	4815      	ldr	r0, [pc, #84]	; (8005268 <_ZN13PathFollowing4initEv+0x6c>)
 8005212:	f7fc fbdf 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005216:	f107 0310 	add.w	r3, r7, #16
 800521a:	2201      	movs	r2, #1
 800521c:	4913      	ldr	r1, [pc, #76]	; (800526c <_ZN13PathFollowing4initEv+0x70>)
 800521e:	4812      	ldr	r0, [pc, #72]	; (8005268 <_ZN13PathFollowing4initEv+0x6c>)
 8005220:	f7fc fbd8 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	2201      	movs	r2, #1
 800522a:	4911      	ldr	r1, [pc, #68]	; (8005270 <_ZN13PathFollowing4initEv+0x74>)
 800522c:	480e      	ldr	r0, [pc, #56]	; (8005268 <_ZN13PathFollowing4initEv+0x6c>)
 800522e:	f7fc fbd1 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005232:	ed97 7b06 	vldr	d7, [r7, #24]
 8005236:	ed97 6b04 	vldr	d6, [r7, #16]
 800523a:	ed97 5b02 	vldr	d5, [r7, #8]
 800523e:	eeb0 2a45 	vmov.f32	s4, s10
 8005242:	eef0 2a65 	vmov.f32	s5, s11
 8005246:	eeb0 1a46 	vmov.f32	s2, s12
 800524a:	eef0 1a66 	vmov.f32	s3, s13
 800524e:	eeb0 0a47 	vmov.f32	s0, s14
 8005252:	eef0 0a67 	vmov.f32	s1, s15
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f80c 	bl	8005274 <_ZN13PathFollowing7setGainEddd>
}
 800525c:	bf00      	nop
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	08019dd4 	.word	0x08019dd4
 8005268:	08019ddc 	.word	0x08019ddc
 800526c:	08019de4 	.word	0x08019de4
 8005270:	08019dec 	.word	0x08019dec

08005274 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005274:	b490      	push	{r4, r7}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	61f8      	str	r0, [r7, #28]
 800527c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005280:	ed87 1b02 	vstr	d1, [r7, #8]
 8005284:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005288:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800528a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800528e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005294:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005298:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800529e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80052a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80052a6:	bf00      	nop
 80052a8:	3720      	adds	r7, #32
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc90      	pop	{r4, r7}
 80052ae:	4770      	bx	lr
 80052b0:	20044c08 	.word	0x20044c08

080052b4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80052bc:	2088      	movs	r0, #136	; 0x88
 80052be:	f7fc ff0e 	bl	80020de <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80052c2:	2080      	movs	r0, #128	; 0x80
 80052c4:	f7fc ff0b 	bl	80020de <INA260_init>
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80052d8:	2188      	movs	r1, #136	; 0x88
 80052da:	2002      	movs	r0, #2
 80052dc:	f7fc fe9c 	bl	8002018 <INA260_read>
 80052e0:	4603      	mov	r3, r0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb f936 	bl	8000554 <__aeabi_i2d>
 80052e8:	a30c      	add	r3, pc, #48	; (adr r3, 800531c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80052ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ee:	f7fb f99b 	bl	8000628 <__aeabi_dmul>
 80052f2:	4603      	mov	r3, r0
 80052f4:	460c      	mov	r4, r1
 80052f6:	4618      	mov	r0, r3
 80052f8:	4621      	mov	r1, r4
 80052fa:	f7fb fc8d 	bl	8000c18 <__aeabi_d2f>
 80052fe:	4602      	mov	r2, r0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4a03      	ldr	r2, [pc, #12]	; (8005318 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800530a:	6013      	str	r3, [r2, #0]
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	bd90      	pop	{r4, r7, pc}
 8005314:	f3af 8000 	nop.w
 8005318:	20000294 	.word	0x20000294
 800531c:	47ae147b 	.word	0x47ae147b
 8005320:	3f547ae1 	.word	0x3f547ae1

08005324 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	ee07 3a90 	vmov	s15, r3

}
 8005334:	eeb0 0a67 	vmov.f32	s0, s15
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005350:	2102      	movs	r1, #2
 8005352:	4822      	ldr	r0, [pc, #136]	; (80053dc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005354:	f005 ff7a 	bl	800b24c <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005368:	89fb      	ldrh	r3, [r7, #14]
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005370:	2108      	movs	r1, #8
 8005372:	481a      	ldr	r0, [pc, #104]	; (80053dc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005374:	f005 ff6a 	bl	800b24c <HAL_GPIO_ReadPin>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005388:	89fb      	ldrh	r3, [r7, #14]
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005390:	2110      	movs	r1, #16
 8005392:	4812      	ldr	r0, [pc, #72]	; (80053dc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005394:	f005 ff5a 	bl	800b24c <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d003      	beq.n	80053b0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80053a8:	89fb      	ldrh	r3, [r7, #14]
 80053aa:	f043 0304 	orr.w	r3, r3, #4
 80053ae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80053b0:	2180      	movs	r1, #128	; 0x80
 80053b2:	480a      	ldr	r0, [pc, #40]	; (80053dc <_ZN12RotarySwitch8getValueEv+0x98>)
 80053b4:	f005 ff4a 	bl	800b24c <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	f043 0308 	orr.w	r3, r3, #8
 80053ce:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80053d0:	89fb      	ldrh	r3, [r7, #14]

}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	40020c00 	.word	0x40020c00

080053e0 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	801a      	strh	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	709a      	strb	r2, [r3, #2]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	70da      	strb	r2, [r3, #3]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	809a      	strh	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	80da      	strh	r2, [r3, #6]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	721a      	strb	r2, [r3, #8]
{

}
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	7a1b      	ldrb	r3, [r3, #8]
 8005428:	f083 0301 	eor.w	r3, r3, #1
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 80db 	beq.w	80055ea <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 8005434:	4b6f      	ldr	r3, [pc, #444]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f083 0301 	eor.w	r3, r3, #1
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d02a      	beq.n	8005498 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005442:	2104      	movs	r1, #4
 8005444:	486c      	ldr	r0, [pc, #432]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8005446:	f005 ff01 	bl	800b24c <HAL_GPIO_ReadPin>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d006      	beq.n	8005468 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800545a:	4b68      	ldr	r3, [pc, #416]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800545c:	881b      	ldrh	r3, [r3, #0]
 800545e:	3301      	adds	r3, #1
 8005460:	b29a      	uxth	r2, r3
 8005462:	4b66      	ldr	r3, [pc, #408]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	e002      	b.n	800546e <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005468:	4b64      	ldr	r3, [pc, #400]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800546a:	2200      	movs	r2, #0
 800546c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800546e:	4b63      	ldr	r3, [pc, #396]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	2b04      	cmp	r3, #4
 8005474:	d945      	bls.n	8005502 <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 800548a:	4b5a      	ldr	r3, [pc, #360]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005490:	4b5a      	ldr	r3, [pc, #360]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005492:	2200      	movs	r2, #0
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e034      	b.n	8005502 <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 8005498:	4b56      	ldr	r3, [pc, #344]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d030      	beq.n	8005502 <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80054a0:	2104      	movs	r1, #4
 80054a2:	4855      	ldr	r0, [pc, #340]	; (80055f8 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 80054a4:	f005 fed2 	bl	800b24c <HAL_GPIO_ReadPin>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d006      	beq.n	80054c6 <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 80054b8:	4b50      	ldr	r3, [pc, #320]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	4b4e      	ldr	r3, [pc, #312]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e002      	b.n	80054cc <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 80054c6:	4b4d      	ldr	r3, [pc, #308]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054cc:	4b4b      	ldr	r3, [pc, #300]	; (80055fc <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d916      	bls.n	8005502 <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80054e8:	4b42      	ldr	r3, [pc, #264]	; (80055f4 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	88db      	ldrh	r3, [r3, #6]
 80054f2:	3301      	adds	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	88da      	ldrh	r2, [r3, #6]
 80054fe:	4b40      	ldr	r3, [pc, #256]	; (8005600 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8005500:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005502:	4b40      	ldr	r3, [pc, #256]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f083 0301 	eor.w	r3, r3, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d02a      	beq.n	8005566 <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005514:	483c      	ldr	r0, [pc, #240]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8005516:	f005 fe99 	bl	800b24c <HAL_GPIO_ReadPin>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	bf0c      	ite	eq
 8005520:	2301      	moveq	r3, #1
 8005522:	2300      	movne	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 800552a:	4b38      	ldr	r3, [pc, #224]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	3301      	adds	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e002      	b.n	800553e <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800553a:	2200      	movs	r2, #0
 800553c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800553e:	4b33      	ldr	r3, [pc, #204]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d90f      	bls.n	8005566 <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	881b      	ldrh	r3, [r3, #0]
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	b29a      	uxth	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 800555a:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005560:	4b2a      	ldr	r3, [pc, #168]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005562:	2200      	movs	r2, #0
 8005564:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005566:	4b27      	ldr	r3, [pc, #156]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d031      	beq.n	80055d2 <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 800556e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005572:	4825      	ldr	r0, [pc, #148]	; (8005608 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8005574:	f005 fe6a 	bl	800b24c <HAL_GPIO_ReadPin>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d006      	beq.n	8005596 <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 8005588:	4b20      	ldr	r3, [pc, #128]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	4b1e      	ldr	r3, [pc, #120]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005592:	801a      	strh	r2, [r3, #0]
 8005594:	e002      	b.n	800559c <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005598:	2200      	movs	r2, #0
 800559a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800559c:	4b1b      	ldr	r3, [pc, #108]	; (800560c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800559e:	881b      	ldrh	r3, [r3, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d916      	bls.n	80055d2 <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	f083 0302 	eor.w	r3, r3, #2
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80055b8:	4b12      	ldr	r3, [pc, #72]	; (8005604 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	889b      	ldrh	r3, [r3, #4]
 80055c2:	3301      	adds	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	889a      	ldrh	r2, [r3, #4]
 80055ce:	4b10      	ldr	r3, [pc, #64]	; (8005610 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80055d0:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	881a      	ldrh	r2, [r3, #0]
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80055d8:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	789a      	ldrb	r2, [r3, #2]
 80055de:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80055e0:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	78da      	ldrb	r2, [r3, #3]
 80055e6:	4b0d      	ldr	r3, [pc, #52]	; (800561c <_ZN10SideSensor12updateStatusEv+0x200>)
 80055e8:	701a      	strb	r2, [r3, #0]
	}

}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200002a0 	.word	0x200002a0
 80055f8:	40021000 	.word	0x40021000
 80055fc:	200002a4 	.word	0x200002a4
 8005600:	2000029e 	.word	0x2000029e
 8005604:	200002a1 	.word	0x200002a1
 8005608:	40020c00 	.word	0x40020c00
 800560c:	200002a2 	.word	0x200002a2
 8005610:	2000029c 	.word	0x2000029c
 8005614:	20000298 	.word	0x20000298
 8005618:	2000029a 	.word	0x2000029a
 800561c:	2000029b 	.word	0x2000029b

08005620 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	789b      	ldrb	r3, [r3, #2]
}
 800562c:	4618      	mov	r0, r3
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	88db      	ldrh	r3, [r3, #6]
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	80da      	strh	r2, [r3, #6]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	721a      	strb	r2, [r3, #8]
}
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	721a      	strb	r2, [r3, #8]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	7a1b      	ldrb	r3, [r3, #8]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3308      	adds	r3, #8
 80056cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80056d0:	2100      	movs	r1, #0
 80056d2:	4618      	mov	r0, r3
 80056d4:	f010 f8b0 	bl	8015838 <memset>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056de:	811a      	strh	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056e6:	815a      	strh	r2, [r3, #10]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ee:	819a      	strh	r2, [r3, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f6:	81da      	strh	r2, [r3, #14]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056fe:	821a      	strh	r2, [r3, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005706:	825a      	strh	r2, [r3, #18]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	829a      	strh	r2, [r3, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	82da      	strh	r2, [r3, #22]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	831a      	strh	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	835a      	strh	r2, [r3, #26]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	839a      	strh	r2, [r3, #28]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	83da      	strh	r2, [r3, #30]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	841a      	strh	r2, [r3, #32]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005738:	845a      	strh	r2, [r3, #34]	; 0x22
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	849a      	strh	r2, [r3, #36]	; 0x24
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005746:	84da      	strh	r2, [r3, #38]	; 0x26
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	851a      	strh	r2, [r3, #40]	; 0x28
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	859a      	strh	r2, [r3, #44]	; 0x2c
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005762:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576a:	861a      	strh	r2, [r3, #48]	; 0x30
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	865a      	strh	r2, [r3, #50]	; 0x32
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2201      	movs	r2, #1
 8005776:	869a      	strh	r2, [r3, #52]	; 0x34
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005786:	871a      	strh	r2, [r3, #56]	; 0x38
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	875a      	strh	r2, [r3, #58]	; 0x3a
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	87da      	strh	r2, [r3, #62]	; 0x3e
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800580a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005814:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2201      	movs	r2, #1
 8005858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005862:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587c:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588e:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2201      	movs	r2, #1
 800589e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a8:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058c2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058cc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058de:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fa:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005904:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005930:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800593a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005944:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2201      	movs	r2, #1
 8005956:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005960:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005992:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800599c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ae:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c0:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e2:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ec:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a06:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a18:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f04f 0200 	mov.w	r2, #0
 8005a2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d042      	beq.n	8005ae4 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3204      	adds	r2, #4
 8005a70:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005a74:	ee07 3a90 	vmov	s15, r3
 8005a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a9c:	4a13      	ldr	r2, [pc, #76]	; (8005aec <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005a9e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005aa6:	2bf9      	cmp	r3, #249	; 0xf9
 8005aa8:	d903      	bls.n	8005ab2 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	22fa      	movs	r2, #250	; 0xfa
 8005aae:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685c      	ldr	r4, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fa fd5b 	bl	8000578 <__aeabi_f2d>
 8005ac2:	4605      	mov	r5, r0
 8005ac4:	460e      	mov	r6, r1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fa fd53 	bl	8000578 <__aeabi_f2d>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	ec43 2b11 	vmov	d1, r2, r3
 8005ada:	ec46 5b10 	vmov	d0, r5, r6
 8005ade:	4620      	mov	r0, r4
 8005ae0:	f7ff f902 	bl	8004ce8 <_ZN5Motor8setRatioEdd>

	}

}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aec:	200002a8 	.word	0x200002a8

08005af0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	605a      	str	r2, [r3, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	609a      	str	r2, [r3, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	60da      	str	r2, [r3, #12]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	611a      	str	r2, [r3, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	615a      	str	r2, [r3, #20]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	619a      	str	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	61da      	str	r2, [r3, #28]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	621a      	str	r2, [r3, #32]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
	...

08005b88 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005b88:	b590      	push	{r4, r7, lr}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b94:	f107 020c 	add.w	r2, r7, #12
 8005b98:	f107 0110 	add.w	r1, r7, #16
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fb fd6f 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005ba2:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005baa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bb6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7fa fcdc 	bl	8000578 <__aeabi_f2d>
 8005bc0:	a30e      	add	r3, pc, #56	; (adr r3, 8005bfc <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f7fa fd2f 	bl	8000628 <__aeabi_dmul>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	4618      	mov	r0, r3
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	f7fb f821 	bl	8000c18 <__aeabi_d2f>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005be2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	ee07 3a90 	vmov	s15, r3
}
 8005bec:	eeb0 0a67 	vmov.f32	s0, s15
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200002ac 	.word	0x200002ac
 8005bfc:	1ab1d998 	.word	0x1ab1d998
 8005c00:	3f7830b5 	.word	0x3f7830b5
 8005c04:	00000000 	.word	0x00000000

08005c08 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	ed93 7a00 	vldr	s14, [r3]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c20:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005c2e:	4b48      	ldr	r3, [pc, #288]	; (8005d50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c44:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005c50:	4b3f      	ldr	r3, [pc, #252]	; (8005d50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fa fc8f 	bl	8000578 <__aeabi_f2d>
 8005c5a:	4604      	mov	r4, r0
 8005c5c:	460d      	mov	r5, r1
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c64:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6c:	ee17 0a90 	vmov	r0, s15
 8005c70:	f7fa fc82 	bl	8000578 <__aeabi_f2d>
 8005c74:	a334      	add	r3, pc, #208	; (adr r3, 8005d48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fcd5 	bl	8000628 <__aeabi_dmul>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4620      	mov	r0, r4
 8005c84:	4629      	mov	r1, r5
 8005c86:	f7fa fb19 	bl	80002bc <__adddf3>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	4621      	mov	r1, r4
 8005c92:	f7fa ffc1 	bl	8000c18 <__aeabi_d2f>
 8005c96:	4602      	mov	r2, r0
 8005c98:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c9a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005ca4:	edd3 7a00 	vldr	s15, [r3]
 8005ca8:	edd7 6a05 	vldr	s13, [r7, #20]
 8005cac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb4:	ee17 0a90 	vmov	r0, s15
 8005cb8:	f7fa fc5e 	bl	8000578 <__aeabi_f2d>
 8005cbc:	a322      	add	r3, pc, #136	; (adr r3, 8005d48 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa fddb 	bl	800087c <__aeabi_ddiv>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	4618      	mov	r0, r3
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f7fa ffa3 	bl	8000c18 <__aeabi_d2f>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005cd6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cec:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005cfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d02:	ee17 0a90 	vmov	r0, s15
 8005d06:	f7fa fc37 	bl	8000578 <__aeabi_f2d>
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	460e      	mov	r6, r1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d14:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1c:	ee17 0a90 	vmov	r0, s15
 8005d20:	f7fa fc2a 	bl	8000578 <__aeabi_f2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	ec43 2b11 	vmov	d1, r2, r3
 8005d2c:	ec46 5b10 	vmov	d0, r5, r6
 8005d30:	4620      	mov	r0, r4
 8005d32:	f7fe ffd9 	bl	8004ce8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005d36:	4a07      	ldr	r2, [pc, #28]	; (8005d54 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	6013      	str	r3, [r2, #0]
}
 8005d3c:	bf00      	nop
 8005d3e:	371c      	adds	r7, #28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d44:	f3af 8000 	nop.w
 8005d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d4c:	3f50624d 	.word	0x3f50624d
 8005d50:	200002b4 	.word	0x200002b4
 8005d54:	200002b0 	.word	0x200002b0

08005d58 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d64:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	605a      	str	r2, [r3, #4]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d8c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005db4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005db8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	615a      	str	r2, [r3, #20]
}
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b085      	sub	sp, #20
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005de6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005dea:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	621a      	str	r2, [r3, #32]
}
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff feb7 	bl	8005b88 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff feef 	bl	8005c08 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005e4a:	bf00      	nop
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
	...

08005e58 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005e88 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e70:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005e88 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe ff37 	bl	8004ce8 <_ZN5Motor8setRatioEdd>

}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	f3af 8000 	nop.w
	...

08005e90 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005ea2:	f001 fe11 	bl	8007ac8 <cppFlip100ns>

		tim7_timer++;
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eae:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d902      	bls.n	8005ec0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005eca:	f001 fdcd 	bl	8007a68 <cppFlip1ms>

		tim6_timer++;
 8005ece:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a14      	ldr	r2, [pc, #80]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ed6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ed8:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d902      	bls.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005ee2:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10e      	bne.n	8005f10 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005ef2:	f001 fdf3 	bl	8007adc <cppFlip10ms>

		tim13_timer++;
 8005ef6:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005efe:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d902      	bls.n	8005f10 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
	}

}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40001400 	.word	0x40001400
 8005f1c:	200448bc 	.word	0x200448bc
 8005f20:	0001869f 	.word	0x0001869f
 8005f24:	40001000 	.word	0x40001000
 8005f28:	20044878 	.word	0x20044878
 8005f2c:	40001c00 	.word	0x40001c00
 8005f30:	200448c0 	.word	0x200448c0

08005f34 <init>:

void init()
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f3e:	4808      	ldr	r0, [pc, #32]	; (8005f60 <init+0x2c>)
 8005f40:	f005 f99c 	bl	800b27c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005f44:	4807      	ldr	r0, [pc, #28]	; (8005f64 <init+0x30>)
 8005f46:	f009 f864 	bl	800f012 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005f4a:	4807      	ldr	r0, [pc, #28]	; (8005f68 <init+0x34>)
 8005f4c:	f009 f861 	bl	800f012 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005f50:	4806      	ldr	r0, [pc, #24]	; (8005f6c <init+0x38>)
 8005f52:	f009 f85e 	bl	800f012 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005f56:	f001 fce3 	bl	8007920 <cppInit>

	//path_following_initialize();

}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000
 8005f64:	200449a4 	.word	0x200449a4
 8005f68:	20044b48 	.word	0x20044b48
 8005f6c:	200448c4 	.word	0x200448c4

08005f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f74:	f003 fe7a 	bl	8009c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f78:	f000 f82a 	bl	8005fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f7c:	f000 fdbc 	bl	8006af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005f80:	f000 fd8a 	bl	8006a98 <MX_DMA_Init>
  MX_I2C2_Init();
 8005f84:	f000 f9e8 	bl	8006358 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005f88:	f000 fa14 	bl	80063b4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005f8c:	f000 fa32 	bl	80063f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005f90:	f000 fa66 	bl	8006460 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005f94:	f000 fb70 	bl	8006678 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005f98:	f000 fc3c 	bl	8006814 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005f9c:	f000 fd52 	bl	8006a44 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005fa0:	f00b f80a 	bl	8010fb8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005fa4:	f000 fbcc 	bl	8006740 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005fa8:	f000 f9a8 	bl	80062fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005fac:	f000 fb00 	bl	80065b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005fb0:	f000 fc88 	bl	80068c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005fb4:	f000 fcd4 	bl	8006960 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005fb8:	f000 f898 	bl	80060ec <MX_ADC2_Init>
  MX_TIM7_Init();
 8005fbc:	f000 fbf6 	bl	80067ac <MX_TIM7_Init>
  MX_TIM13_Init();
 8005fc0:	f000 fd1c 	bl	80069fc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005fc4:	f7ff ffb6 	bl	8005f34 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005fc8:	f001 fdb6 	bl	8007b38 <cppLoop>
 8005fcc:	e7fc      	b.n	8005fc8 <main+0x58>
	...

08005fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0a4      	sub	sp, #144	; 0x90
 8005fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fda:	2234      	movs	r2, #52	; 0x34
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f00f fc2a 	bl	8015838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ff4:	f107 030c 	add.w	r3, r7, #12
 8005ff8:	223c      	movs	r2, #60	; 0x3c
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f00f fc1b 	bl	8015838 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <SystemClock_Config+0x114>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	4a36      	ldr	r2, [pc, #216]	; (80060e4 <SystemClock_Config+0x114>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6413      	str	r3, [r2, #64]	; 0x40
 8006012:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <SystemClock_Config+0x114>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <SystemClock_Config+0x118>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <SystemClock_Config+0x118>)
 8006028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <SystemClock_Config+0x118>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800603a:	2301      	movs	r3, #1
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800603e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006042:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006044:	2302      	movs	r3, #2
 8006046:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006048:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800604c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800604e:	2308      	movs	r3, #8
 8006050:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006052:	23b4      	movs	r3, #180	; 0xb4
 8006054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006058:	2302      	movs	r3, #2
 800605a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800605e:	2308      	movs	r3, #8
 8006060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006064:	2302      	movs	r3, #2
 8006066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800606a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800606e:	4618      	mov	r0, r3
 8006070:	f006 fd26 	bl	800cac0 <HAL_RCC_OscConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800607a:	f000 fe7f 	bl	8006d7c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800607e:	f006 f8a1 	bl	800c1c4 <HAL_PWREx_EnableOverDrive>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006088:	f000 fe78 	bl	8006d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800608c:	230f      	movs	r3, #15
 800608e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006090:	2302      	movs	r3, #2
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006094:	2300      	movs	r3, #0
 8006096:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006098:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800609c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800609e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060a2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80060a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060a8:	2105      	movs	r1, #5
 80060aa:	4618      	mov	r0, r3
 80060ac:	f006 f8da 	bl	800c264 <HAL_RCC_ClockConfig>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <SystemClock_Config+0xea>
  {
    Error_Handler();
 80060b6:	f000 fe61 	bl	8006d7c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80060ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80060be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80060c0:	2300      	movs	r3, #0
 80060c2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80060c4:	2300      	movs	r3, #0
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f006 fab9 	bl	800c644 <HAL_RCCEx_PeriphCLKConfig>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80060d8:	f000 fe50 	bl	8006d7c <Error_Handler>
  }
}
 80060dc:	bf00      	nop
 80060de:	3790      	adds	r7, #144	; 0x90
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40007000 	.word	0x40007000

080060ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80060f2:	463b      	mov	r3, r7
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80060fe:	4b7c      	ldr	r3, [pc, #496]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006100:	4a7c      	ldr	r2, [pc, #496]	; (80062f4 <MX_ADC2_Init+0x208>)
 8006102:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006104:	4b7a      	ldr	r3, [pc, #488]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800610a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800610c:	4b78      	ldr	r3, [pc, #480]	; (80062f0 <MX_ADC2_Init+0x204>)
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006112:	4b77      	ldr	r3, [pc, #476]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006114:	2201      	movs	r2, #1
 8006116:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006118:	4b75      	ldr	r3, [pc, #468]	; (80062f0 <MX_ADC2_Init+0x204>)
 800611a:	2201      	movs	r2, #1
 800611c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800611e:	4b74      	ldr	r3, [pc, #464]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006126:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006128:	2200      	movs	r2, #0
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800612c:	4b70      	ldr	r3, [pc, #448]	; (80062f0 <MX_ADC2_Init+0x204>)
 800612e:	4a72      	ldr	r2, [pc, #456]	; (80062f8 <MX_ADC2_Init+0x20c>)
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006132:	4b6f      	ldr	r3, [pc, #444]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006134:	2200      	movs	r2, #0
 8006136:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006138:	4b6d      	ldr	r3, [pc, #436]	; (80062f0 <MX_ADC2_Init+0x204>)
 800613a:	220e      	movs	r2, #14
 800613c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800613e:	4b6c      	ldr	r3, [pc, #432]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006146:	4b6a      	ldr	r3, [pc, #424]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006148:	2201      	movs	r2, #1
 800614a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800614c:	4868      	ldr	r0, [pc, #416]	; (80062f0 <MX_ADC2_Init+0x204>)
 800614e:	f003 fe21 	bl	8009d94 <HAL_ADC_Init>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006158:	f000 fe10 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800615c:	230a      	movs	r3, #10
 800615e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006160:	2301      	movs	r3, #1
 8006162:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006164:	2306      	movs	r3, #6
 8006166:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006168:	463b      	mov	r3, r7
 800616a:	4619      	mov	r1, r3
 800616c:	4860      	ldr	r0, [pc, #384]	; (80062f0 <MX_ADC2_Init+0x204>)
 800616e:	f003 ff65 	bl	800a03c <HAL_ADC_ConfigChannel>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006178:	f000 fe00 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800617c:	230b      	movs	r3, #11
 800617e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006180:	2302      	movs	r3, #2
 8006182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006184:	463b      	mov	r3, r7
 8006186:	4619      	mov	r1, r3
 8006188:	4859      	ldr	r0, [pc, #356]	; (80062f0 <MX_ADC2_Init+0x204>)
 800618a:	f003 ff57 	bl	800a03c <HAL_ADC_ConfigChannel>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006194:	f000 fdf2 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800619c:	2303      	movs	r3, #3
 800619e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061a0:	463b      	mov	r3, r7
 80061a2:	4619      	mov	r1, r3
 80061a4:	4852      	ldr	r0, [pc, #328]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061a6:	f003 ff49 	bl	800a03c <HAL_ADC_ConfigChannel>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80061b0:	f000 fde4 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80061b4:	230d      	movs	r3, #13
 80061b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80061b8:	2304      	movs	r3, #4
 80061ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061bc:	463b      	mov	r3, r7
 80061be:	4619      	mov	r1, r3
 80061c0:	484b      	ldr	r0, [pc, #300]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061c2:	f003 ff3b 	bl	800a03c <HAL_ADC_ConfigChannel>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80061cc:	f000 fdd6 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80061d4:	2305      	movs	r3, #5
 80061d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d8:	463b      	mov	r3, r7
 80061da:	4619      	mov	r1, r3
 80061dc:	4844      	ldr	r0, [pc, #272]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061de:	f003 ff2d 	bl	800a03c <HAL_ADC_ConfigChannel>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80061e8:	f000 fdc8 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80061ec:	2301      	movs	r3, #1
 80061ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80061f0:	2306      	movs	r3, #6
 80061f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061f4:	463b      	mov	r3, r7
 80061f6:	4619      	mov	r1, r3
 80061f8:	483d      	ldr	r0, [pc, #244]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061fa:	f003 ff1f 	bl	800a03c <HAL_ADC_ConfigChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006204:	f000 fdba 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006208:	2302      	movs	r3, #2
 800620a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800620c:	2307      	movs	r3, #7
 800620e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006210:	463b      	mov	r3, r7
 8006212:	4619      	mov	r1, r3
 8006214:	4836      	ldr	r0, [pc, #216]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006216:	f003 ff11 	bl	800a03c <HAL_ADC_ConfigChannel>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006220:	f000 fdac 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006224:	2303      	movs	r3, #3
 8006226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006228:	2308      	movs	r3, #8
 800622a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800622c:	463b      	mov	r3, r7
 800622e:	4619      	mov	r1, r3
 8006230:	482f      	ldr	r0, [pc, #188]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006232:	f003 ff03 	bl	800a03c <HAL_ADC_ConfigChannel>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800623c:	f000 fd9e 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006240:	2304      	movs	r3, #4
 8006242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006244:	2309      	movs	r3, #9
 8006246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006248:	463b      	mov	r3, r7
 800624a:	4619      	mov	r1, r3
 800624c:	4828      	ldr	r0, [pc, #160]	; (80062f0 <MX_ADC2_Init+0x204>)
 800624e:	f003 fef5 	bl	800a03c <HAL_ADC_ConfigChannel>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006258:	f000 fd90 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800625c:	2305      	movs	r3, #5
 800625e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006260:	230a      	movs	r3, #10
 8006262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006264:	463b      	mov	r3, r7
 8006266:	4619      	mov	r1, r3
 8006268:	4821      	ldr	r0, [pc, #132]	; (80062f0 <MX_ADC2_Init+0x204>)
 800626a:	f003 fee7 	bl	800a03c <HAL_ADC_ConfigChannel>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006274:	f000 fd82 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006278:	2306      	movs	r3, #6
 800627a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800627c:	230b      	movs	r3, #11
 800627e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006280:	463b      	mov	r3, r7
 8006282:	4619      	mov	r1, r3
 8006284:	481a      	ldr	r0, [pc, #104]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006286:	f003 fed9 	bl	800a03c <HAL_ADC_ConfigChannel>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006290:	f000 fd74 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006294:	2307      	movs	r3, #7
 8006296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006298:	230c      	movs	r3, #12
 800629a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800629c:	463b      	mov	r3, r7
 800629e:	4619      	mov	r1, r3
 80062a0:	4813      	ldr	r0, [pc, #76]	; (80062f0 <MX_ADC2_Init+0x204>)
 80062a2:	f003 fecb 	bl	800a03c <HAL_ADC_ConfigChannel>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80062ac:	f000 fd66 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80062b0:	2308      	movs	r3, #8
 80062b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80062b4:	230d      	movs	r3, #13
 80062b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b8:	463b      	mov	r3, r7
 80062ba:	4619      	mov	r1, r3
 80062bc:	480c      	ldr	r0, [pc, #48]	; (80062f0 <MX_ADC2_Init+0x204>)
 80062be:	f003 febd 	bl	800a03c <HAL_ADC_ConfigChannel>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80062c8:	f000 fd58 	bl	8006d7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80062cc:	2309      	movs	r3, #9
 80062ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80062d0:	230e      	movs	r3, #14
 80062d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062d4:	463b      	mov	r3, r7
 80062d6:	4619      	mov	r1, r3
 80062d8:	4805      	ldr	r0, [pc, #20]	; (80062f0 <MX_ADC2_Init+0x204>)
 80062da:	f003 feaf 	bl	800a03c <HAL_ADC_ConfigChannel>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80062e4:	f000 fd4a 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20044748 	.word	0x20044748
 80062f4:	40012100 	.word	0x40012100
 80062f8:	0f000001 	.word	0x0f000001

080062fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006300:	4b12      	ldr	r3, [pc, #72]	; (800634c <MX_I2C1_Init+0x50>)
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <MX_I2C1_Init+0x54>)
 8006304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <MX_I2C1_Init+0x50>)
 8006308:	4a12      	ldr	r2, [pc, #72]	; (8006354 <MX_I2C1_Init+0x58>)
 800630a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <MX_I2C1_Init+0x50>)
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <MX_I2C1_Init+0x50>)
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <MX_I2C1_Init+0x50>)
 800631a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800631e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <MX_I2C1_Init+0x50>)
 8006322:	2200      	movs	r2, #0
 8006324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <MX_I2C1_Init+0x50>)
 8006328:	2200      	movs	r2, #0
 800632a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <MX_I2C1_Init+0x50>)
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <MX_I2C1_Init+0x50>)
 8006334:	2280      	movs	r2, #128	; 0x80
 8006336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006338:	4804      	ldr	r0, [pc, #16]	; (800634c <MX_I2C1_Init+0x50>)
 800633a:	f004 ffb9 	bl	800b2b0 <HAL_I2C_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006344:	f000 fd1a 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006348:	bf00      	nop
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20044790 	.word	0x20044790
 8006350:	40005400 	.word	0x40005400
 8006354:	000186a0 	.word	0x000186a0

08006358 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800635c:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <MX_I2C2_Init+0x50>)
 800635e:	4a13      	ldr	r2, [pc, #76]	; (80063ac <MX_I2C2_Init+0x54>)
 8006360:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006362:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006364:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <MX_I2C2_Init+0x58>)
 8006366:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <MX_I2C2_Init+0x50>)
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800636e:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006370:	2200      	movs	r2, #0
 8006372:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800637a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <MX_I2C2_Init+0x50>)
 800637e:	2200      	movs	r2, #0
 8006380:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006384:	2200      	movs	r2, #0
 8006386:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006388:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <MX_I2C2_Init+0x50>)
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006390:	2280      	movs	r2, #128	; 0x80
 8006392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006394:	4804      	ldr	r0, [pc, #16]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006396:	f004 ff8b 	bl	800b2b0 <HAL_I2C_Init>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80063a0:	f000 fcec 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80063a4:	bf00      	nop
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20044824 	.word	0x20044824
 80063ac:	40005800 	.word	0x40005800
 80063b0:	000186a0 	.word	0x000186a0

080063b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063ba:	4a0d      	ldr	r2, [pc, #52]	; (80063f0 <MX_SDIO_SD_Init+0x3c>)
 80063bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80063c4:	4b09      	ldr	r3, [pc, #36]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063d8:	2200      	movs	r2, #0
 80063da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80063dc:	4b03      	ldr	r3, [pc, #12]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063de:	2202      	movs	r2, #2
 80063e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20044a24 	.word	0x20044a24
 80063f0:	40012c00 	.word	0x40012c00

080063f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80063f8:	4b17      	ldr	r3, [pc, #92]	; (8006458 <MX_SPI2_Init+0x64>)
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <MX_SPI2_Init+0x68>)
 80063fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80063fe:	4b16      	ldr	r3, [pc, #88]	; (8006458 <MX_SPI2_Init+0x64>)
 8006400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006404:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006406:	4b14      	ldr	r3, [pc, #80]	; (8006458 <MX_SPI2_Init+0x64>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <MX_SPI2_Init+0x64>)
 800640e:	2200      	movs	r2, #0
 8006410:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <MX_SPI2_Init+0x64>)
 8006414:	2202      	movs	r2, #2
 8006416:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <MX_SPI2_Init+0x64>)
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <MX_SPI2_Init+0x64>)
 8006420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006424:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <MX_SPI2_Init+0x64>)
 8006428:	2228      	movs	r2, #40	; 0x28
 800642a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <MX_SPI2_Init+0x64>)
 800642e:	2200      	movs	r2, #0
 8006430:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <MX_SPI2_Init+0x64>)
 8006434:	2200      	movs	r2, #0
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <MX_SPI2_Init+0x64>)
 800643a:	2200      	movs	r2, #0
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <MX_SPI2_Init+0x64>)
 8006440:	220a      	movs	r2, #10
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006444:	4804      	ldr	r0, [pc, #16]	; (8006458 <MX_SPI2_Init+0x64>)
 8006446:	f008 f865 	bl	800e514 <HAL_SPI_Init>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006450:	f000 fc94 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20044670 	.word	0x20044670
 800645c:	40003800 	.word	0x40003800

08006460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b09a      	sub	sp, #104	; 0x68
 8006464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006466:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f00f f9e2 	bl	8015838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800647e:	f107 0320 	add.w	r3, r7, #32
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	609a      	str	r2, [r3, #8]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	611a      	str	r2, [r3, #16]
 800648e:	615a      	str	r2, [r3, #20]
 8006490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006492:	463b      	mov	r3, r7
 8006494:	2220      	movs	r2, #32
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f00f f9cd 	bl	8015838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800649e:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064a0:	4a42      	ldr	r2, [pc, #264]	; (80065ac <MX_TIM1_Init+0x14c>)
 80064a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80064a4:	4b40      	ldr	r3, [pc, #256]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064aa:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80064b0:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064be:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064c4:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80064ca:	4837      	ldr	r0, [pc, #220]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064cc:	f008 fdc5 	bl	800f05a <HAL_TIM_PWM_Init>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80064d6:	f000 fc51 	bl	8006d7c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064da:	2303      	movs	r3, #3
 80064dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064de:	2300      	movs	r3, #0
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064e2:	2301      	movs	r3, #1
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064e6:	2300      	movs	r3, #0
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80064ee:	2300      	movs	r3, #0
 80064f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80064f2:	2301      	movs	r3, #1
 80064f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80064f6:	2300      	movs	r3, #0
 80064f8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80064fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006502:	4619      	mov	r1, r3
 8006504:	4828      	ldr	r0, [pc, #160]	; (80065a8 <MX_TIM1_Init+0x148>)
 8006506:	f008 fe11 	bl	800f12c <HAL_TIM_Encoder_Init>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006510:	f000 fc34 	bl	8006d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006518:	2300      	movs	r3, #0
 800651a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800651c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006520:	4619      	mov	r1, r3
 8006522:	4821      	ldr	r0, [pc, #132]	; (80065a8 <MX_TIM1_Init+0x148>)
 8006524:	f009 fb38 	bl	800fb98 <HAL_TIMEx_MasterConfigSynchronization>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800652e:	f000 fc25 	bl	8006d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006532:	2360      	movs	r3, #96	; 0x60
 8006534:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800653a:	2300      	movs	r3, #0
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800653e:	2300      	movs	r3, #0
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006542:	2300      	movs	r3, #0
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006546:	2300      	movs	r3, #0
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800654a:	2300      	movs	r3, #0
 800654c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800654e:	f107 0320 	add.w	r3, r7, #32
 8006552:	2208      	movs	r2, #8
 8006554:	4619      	mov	r1, r3
 8006556:	4814      	ldr	r0, [pc, #80]	; (80065a8 <MX_TIM1_Init+0x148>)
 8006558:	f008 ffba 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006562:	f000 fc0b 	bl	8006d7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006566:	2300      	movs	r3, #0
 8006568:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800657a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800657e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006584:	463b      	mov	r3, r7
 8006586:	4619      	mov	r1, r3
 8006588:	4807      	ldr	r0, [pc, #28]	; (80065a8 <MX_TIM1_Init+0x148>)
 800658a:	f009 fb81 	bl	800fc90 <HAL_TIMEx_ConfigBreakDeadTime>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006594:	f000 fbf2 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006598:	4803      	ldr	r0, [pc, #12]	; (80065a8 <MX_TIM1_Init+0x148>)
 800659a:	f000 ffdf 	bl	800755c <HAL_TIM_MspPostInit>

}
 800659e:	bf00      	nop
 80065a0:	3768      	adds	r7, #104	; 0x68
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200449e4 	.word	0x200449e4
 80065ac:	40010000 	.word	0x40010000

080065b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065b6:	f107 0320 	add.w	r3, r7, #32
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	611a      	str	r2, [r3, #16]
 80065ce:	615a      	str	r2, [r3, #20]
 80065d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <MX_TIM3_Init+0xc4>)
 80065d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065da:	2201      	movs	r2, #1
 80065dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80065e4:	4b22      	ldr	r3, [pc, #136]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065e6:	f241 1293 	movw	r2, #4499	; 0x1193
 80065ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065f2:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80065f8:	481d      	ldr	r0, [pc, #116]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065fa:	f008 fd2e 	bl	800f05a <HAL_TIM_PWM_Init>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006604:	f000 fbba 	bl	8006d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006608:	2300      	movs	r3, #0
 800660a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800660c:	2300      	movs	r3, #0
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006610:	f107 0320 	add.w	r3, r7, #32
 8006614:	4619      	mov	r1, r3
 8006616:	4816      	ldr	r0, [pc, #88]	; (8006670 <MX_TIM3_Init+0xc0>)
 8006618:	f009 fabe 	bl	800fb98 <HAL_TIMEx_MasterConfigSynchronization>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006622:	f000 fbab 	bl	8006d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006626:	2360      	movs	r3, #96	; 0x60
 8006628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	2200      	movs	r2, #0
 800663a:	4619      	mov	r1, r3
 800663c:	480c      	ldr	r0, [pc, #48]	; (8006670 <MX_TIM3_Init+0xc0>)
 800663e:	f008 ff47 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006648:	f000 fb98 	bl	8006d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	2204      	movs	r2, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4807      	ldr	r0, [pc, #28]	; (8006670 <MX_TIM3_Init+0xc0>)
 8006654:	f008 ff3c 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800665e:	f000 fb8d 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006662:	4803      	ldr	r0, [pc, #12]	; (8006670 <MX_TIM3_Init+0xc0>)
 8006664:	f000 ff7a 	bl	800755c <HAL_TIM_MspPostInit>

}
 8006668:	bf00      	nop
 800666a:	3728      	adds	r7, #40	; 0x28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2004487c 	.word	0x2004487c
 8006674:	40000400 	.word	0x40000400

08006678 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800667e:	f107 0320 	add.w	r3, r7, #32
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	609a      	str	r2, [r3, #8]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	611a      	str	r2, [r3, #16]
 8006696:	615a      	str	r2, [r3, #20]
 8006698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800669a:	4b27      	ldr	r3, [pc, #156]	; (8006738 <MX_TIM4_Init+0xc0>)
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <MX_TIM4_Init+0xc4>)
 800669e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066ae:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80066b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066bc:	2200      	movs	r2, #0
 80066be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80066c0:	481d      	ldr	r0, [pc, #116]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066c2:	f008 fcca 	bl	800f05a <HAL_TIM_PWM_Init>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80066cc:	f000 fb56 	bl	8006d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066d0:	2300      	movs	r3, #0
 80066d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066d8:	f107 0320 	add.w	r3, r7, #32
 80066dc:	4619      	mov	r1, r3
 80066de:	4816      	ldr	r0, [pc, #88]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066e0:	f009 fa5a 	bl	800fb98 <HAL_TIMEx_MasterConfigSynchronization>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80066ea:	f000 fb47 	bl	8006d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066ee:	2360      	movs	r3, #96	; 0x60
 80066f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066fe:	1d3b      	adds	r3, r7, #4
 8006700:	2208      	movs	r2, #8
 8006702:	4619      	mov	r1, r3
 8006704:	480c      	ldr	r0, [pc, #48]	; (8006738 <MX_TIM4_Init+0xc0>)
 8006706:	f008 fee3 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006710:	f000 fb34 	bl	8006d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006714:	1d3b      	adds	r3, r7, #4
 8006716:	220c      	movs	r2, #12
 8006718:	4619      	mov	r1, r3
 800671a:	4807      	ldr	r0, [pc, #28]	; (8006738 <MX_TIM4_Init+0xc0>)
 800671c:	f008 fed8 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006726:	f000 fb29 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800672a:	4803      	ldr	r0, [pc, #12]	; (8006738 <MX_TIM4_Init+0xc0>)
 800672c:	f000 ff16 	bl	800755c <HAL_TIM_MspPostInit>

}
 8006730:	bf00      	nop
 8006732:	3728      	adds	r7, #40	; 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20044708 	.word	0x20044708
 800673c:	40000800 	.word	0x40000800

08006740 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006746:	463b      	mov	r3, r7
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <MX_TIM6_Init+0x68>)
 8006752:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006754:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006756:	2259      	movs	r2, #89	; 0x59
 8006758:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800675a:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <MX_TIM6_Init+0x64>)
 800675c:	2200      	movs	r2, #0
 800675e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006760:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006766:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006768:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <MX_TIM6_Init+0x64>)
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800676e:	480d      	ldr	r0, [pc, #52]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006770:	f008 fc24 	bl	800efbc <HAL_TIM_Base_Init>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800677a:	f000 faff 	bl	8006d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800677e:	2300      	movs	r3, #0
 8006780:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006782:	2300      	movs	r3, #0
 8006784:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006786:	463b      	mov	r3, r7
 8006788:	4619      	mov	r1, r3
 800678a:	4806      	ldr	r0, [pc, #24]	; (80067a4 <MX_TIM6_Init+0x64>)
 800678c:	f009 fa04 	bl	800fb98 <HAL_TIMEx_MasterConfigSynchronization>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006796:	f000 faf1 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200449a4 	.word	0x200449a4
 80067a8:	40001000 	.word	0x40001000

080067ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067b2:	463b      	mov	r3, r7
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <MX_TIM7_Init+0x60>)
 80067bc:	4a14      	ldr	r2, [pc, #80]	; (8006810 <MX_TIM7_Init+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <MX_TIM7_Init+0x60>)
 80067c2:	22b3      	movs	r2, #179	; 0xb3
 80067c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <MX_TIM7_Init+0x60>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <MX_TIM7_Init+0x60>)
 80067ce:	2231      	movs	r2, #49	; 0x31
 80067d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <MX_TIM7_Init+0x60>)
 80067d4:	2280      	movs	r2, #128	; 0x80
 80067d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067d8:	480c      	ldr	r0, [pc, #48]	; (800680c <MX_TIM7_Init+0x60>)
 80067da:	f008 fbef 	bl	800efbc <HAL_TIM_Base_Init>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80067e4:	f000 faca 	bl	8006d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e8:	2300      	movs	r3, #0
 80067ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067f0:	463b      	mov	r3, r7
 80067f2:	4619      	mov	r1, r3
 80067f4:	4805      	ldr	r0, [pc, #20]	; (800680c <MX_TIM7_Init+0x60>)
 80067f6:	f009 f9cf 	bl	800fb98 <HAL_TIMEx_MasterConfigSynchronization>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006800:	f000 fabc 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20044b48 	.word	0x20044b48
 8006810:	40001400 	.word	0x40001400

08006814 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	2224      	movs	r2, #36	; 0x24
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f00f f808 	bl	8015838 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006830:	4b22      	ldr	r3, [pc, #136]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006832:	4a23      	ldr	r2, [pc, #140]	; (80068c0 <MX_TIM8_Init+0xac>)
 8006834:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006836:	4b21      	ldr	r3, [pc, #132]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006838:	2200      	movs	r2, #0
 800683a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <MX_TIM8_Init+0xa8>)
 800683e:	2210      	movs	r2, #16
 8006840:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006842:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006848:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684a:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <MX_TIM8_Init+0xa8>)
 800684c:	2200      	movs	r2, #0
 800684e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006850:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006852:	2200      	movs	r2, #0
 8006854:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006858:	2200      	movs	r2, #0
 800685a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800685c:	2303      	movs	r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006868:	2300      	movs	r3, #0
 800686a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006870:	2300      	movs	r3, #0
 8006872:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006874:	2301      	movs	r3, #1
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006878:	2300      	movs	r3, #0
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	4619      	mov	r1, r3
 8006886:	480d      	ldr	r0, [pc, #52]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006888:	f008 fc50 	bl	800f12c <HAL_TIM_Encoder_Init>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006892:	f000 fa73 	bl	8006d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4806      	ldr	r0, [pc, #24]	; (80068bc <MX_TIM8_Init+0xa8>)
 80068a4:	f009 f978 	bl	800fb98 <HAL_TIMEx_MasterConfigSynchronization>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80068ae:	f000 fa65 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80068b2:	bf00      	nop
 80068b4:	3730      	adds	r7, #48	; 0x30
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200446c8 	.word	0x200446c8
 80068c0:	40010400 	.word	0x40010400

080068c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80068ca:	1d3b      	adds	r3, r7, #4
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	60da      	str	r2, [r3, #12]
 80068d6:	611a      	str	r2, [r3, #16]
 80068d8:	615a      	str	r2, [r3, #20]
 80068da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80068dc:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <MX_TIM10_Init+0x94>)
 80068de:	4a1f      	ldr	r2, [pc, #124]	; (800695c <MX_TIM10_Init+0x98>)
 80068e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80068e2:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <MX_TIM10_Init+0x94>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068e8:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <MX_TIM10_Init+0x94>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <MX_TIM10_Init+0x94>)
 80068f0:	f242 3227 	movw	r2, #8999	; 0x2327
 80068f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068f6:	4b18      	ldr	r3, [pc, #96]	; (8006958 <MX_TIM10_Init+0x94>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068fc:	4b16      	ldr	r3, [pc, #88]	; (8006958 <MX_TIM10_Init+0x94>)
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006902:	4815      	ldr	r0, [pc, #84]	; (8006958 <MX_TIM10_Init+0x94>)
 8006904:	f008 fb5a 	bl	800efbc <HAL_TIM_Base_Init>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800690e:	f000 fa35 	bl	8006d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006912:	4811      	ldr	r0, [pc, #68]	; (8006958 <MX_TIM10_Init+0x94>)
 8006914:	f008 fba1 	bl	800f05a <HAL_TIM_PWM_Init>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800691e:	f000 fa2d 	bl	8006d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006922:	2360      	movs	r3, #96	; 0x60
 8006924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	2200      	movs	r2, #0
 8006936:	4619      	mov	r1, r3
 8006938:	4807      	ldr	r0, [pc, #28]	; (8006958 <MX_TIM10_Init+0x94>)
 800693a:	f008 fdc9 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006944:	f000 fa1a 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006948:	4803      	ldr	r0, [pc, #12]	; (8006958 <MX_TIM10_Init+0x94>)
 800694a:	f000 fe07 	bl	800755c <HAL_TIM_MspPostInit>

}
 800694e:	bf00      	nop
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200447e4 	.word	0x200447e4
 800695c:	40014400 	.word	0x40014400

08006960 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	605a      	str	r2, [r3, #4]
 800696e:	609a      	str	r2, [r3, #8]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	611a      	str	r2, [r3, #16]
 8006974:	615a      	str	r2, [r3, #20]
 8006976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006978:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <MX_TIM11_Init+0x94>)
 800697a:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <MX_TIM11_Init+0x98>)
 800697c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800697e:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <MX_TIM11_Init+0x94>)
 8006980:	2201      	movs	r2, #1
 8006982:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006984:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <MX_TIM11_Init+0x94>)
 8006986:	2200      	movs	r2, #0
 8006988:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800698a:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <MX_TIM11_Init+0x94>)
 800698c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006990:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <MX_TIM11_Init+0x94>)
 8006994:	2200      	movs	r2, #0
 8006996:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006998:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <MX_TIM11_Init+0x94>)
 800699a:	2200      	movs	r2, #0
 800699c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800699e:	4815      	ldr	r0, [pc, #84]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069a0:	f008 fb0c 	bl	800efbc <HAL_TIM_Base_Init>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80069aa:	f000 f9e7 	bl	8006d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80069ae:	4811      	ldr	r0, [pc, #68]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069b0:	f008 fb53 	bl	800f05a <HAL_TIM_PWM_Init>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80069ba:	f000 f9df 	bl	8006d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069be:	2360      	movs	r3, #96	; 0x60
 80069c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	2200      	movs	r2, #0
 80069d2:	4619      	mov	r1, r3
 80069d4:	4807      	ldr	r0, [pc, #28]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069d6:	f008 fd7b 	bl	800f4d0 <HAL_TIM_PWM_ConfigChannel>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80069e0:	f000 f9cc 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80069e4:	4803      	ldr	r0, [pc, #12]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069e6:	f000 fdb9 	bl	800755c <HAL_TIM_MspPostInit>

}
 80069ea:	bf00      	nop
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20044904 	.word	0x20044904
 80069f8:	40014800 	.word	0x40014800

080069fc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a02:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <MX_TIM13_Init+0x44>)
 8006a04:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a08:	2259      	movs	r2, #89	; 0x59
 8006a0a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a18:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a22:	2280      	movs	r2, #128	; 0x80
 8006a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006a26:	4805      	ldr	r0, [pc, #20]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a28:	f008 fac8 	bl	800efbc <HAL_TIM_Base_Init>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006a32:	f000 f9a3 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200448c4 	.word	0x200448c4
 8006a40:	40001c00 	.word	0x40001c00

08006a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a4a:	4a12      	ldr	r2, [pc, #72]	; (8006a94 <MX_USART2_UART_Init+0x50>)
 8006a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a6a:	220c      	movs	r2, #12
 8006a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a6e:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006a7a:	4805      	ldr	r0, [pc, #20]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a7c:	f009 f96e 	bl	800fd5c <HAL_UART_Init>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006a86:	f000 f979 	bl	8006d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20044aa8 	.word	0x20044aa8
 8006a94:	40004400 	.word	0x40004400

08006a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <MX_DMA_Init+0x5c>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <MX_DMA_Init+0x5c>)
 8006aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aac:	6313      	str	r3, [r2, #48]	; 0x30
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <MX_DMA_Init+0x5c>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	203a      	movs	r0, #58	; 0x3a
 8006ac0:	f003 fe47 	bl	800a752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006ac4:	203a      	movs	r0, #58	; 0x3a
 8006ac6:	f003 fe60 	bl	800a78a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	203b      	movs	r0, #59	; 0x3b
 8006ad0:	f003 fe3f 	bl	800a752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006ad4:	203b      	movs	r0, #59	; 0x3b
 8006ad6:	f003 fe58 	bl	800a78a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	2045      	movs	r0, #69	; 0x45
 8006ae0:	f003 fe37 	bl	800a752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006ae4:	2045      	movs	r0, #69	; 0x45
 8006ae6:	f003 fe50 	bl	800a78a <HAL_NVIC_EnableIRQ>

}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40023800 	.word	0x40023800

08006af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	; 0x30
 8006afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006afe:	f107 031c 	add.w	r3, r7, #28
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	4b94      	ldr	r3, [pc, #592]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	4a93      	ldr	r2, [pc, #588]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b18:	f043 0310 	orr.w	r3, r3, #16
 8006b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1e:	4b91      	ldr	r3, [pc, #580]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	4b8d      	ldr	r3, [pc, #564]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a8c      	ldr	r2, [pc, #560]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3a:	4b8a      	ldr	r3, [pc, #552]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	4b86      	ldr	r3, [pc, #536]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	4a85      	ldr	r2, [pc, #532]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b50:	f043 0304 	orr.w	r3, r3, #4
 8006b54:	6313      	str	r3, [r2, #48]	; 0x30
 8006b56:	4b83      	ldr	r3, [pc, #524]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	4b7f      	ldr	r3, [pc, #508]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	4a7e      	ldr	r2, [pc, #504]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	6313      	str	r3, [r2, #48]	; 0x30
 8006b72:	4b7c      	ldr	r3, [pc, #496]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	4b78      	ldr	r3, [pc, #480]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	4a77      	ldr	r2, [pc, #476]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b8e:	4b75      	ldr	r3, [pc, #468]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	60bb      	str	r3, [r7, #8]
 8006b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	4b71      	ldr	r3, [pc, #452]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	4a70      	ldr	r2, [pc, #448]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006ba4:	f043 0308 	orr.w	r3, r3, #8
 8006ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8006baa:	4b6e      	ldr	r3, [pc, #440]	; (8006d64 <MX_GPIO_Init+0x26c>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bbc:	486a      	ldr	r0, [pc, #424]	; (8006d68 <MX_GPIO_Init+0x270>)
 8006bbe:	f004 fb5d 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc8:	4868      	ldr	r0, [pc, #416]	; (8006d6c <MX_GPIO_Init+0x274>)
 8006bca:	f004 fb57 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bd4:	4866      	ldr	r0, [pc, #408]	; (8006d70 <MX_GPIO_Init+0x278>)
 8006bd6:	f004 fb51 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006be0:	4864      	ldr	r0, [pc, #400]	; (8006d74 <MX_GPIO_Init+0x27c>)
 8006be2:	f004 fb4b 	bl	800b27c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006be6:	2304      	movs	r3, #4
 8006be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bea:	2300      	movs	r3, #0
 8006bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bf2:	f107 031c 	add.w	r3, r7, #28
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	485b      	ldr	r0, [pc, #364]	; (8006d68 <MX_GPIO_Init+0x270>)
 8006bfa:	f004 f97d 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006bfe:	230f      	movs	r3, #15
 8006c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c02:	2303      	movs	r3, #3
 8006c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c0a:	f107 031c 	add.w	r3, r7, #28
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4859      	ldr	r0, [pc, #356]	; (8006d78 <MX_GPIO_Init+0x280>)
 8006c12:	f004 f971 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c16:	23e1      	movs	r3, #225	; 0xe1
 8006c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c22:	f107 031c 	add.w	r3, r7, #28
 8006c26:	4619      	mov	r1, r3
 8006c28:	4852      	ldr	r0, [pc, #328]	; (8006d74 <MX_GPIO_Init+0x27c>)
 8006c2a:	f004 f965 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c32:	2303      	movs	r3, #3
 8006c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3a:	f107 031c 	add.w	r3, r7, #28
 8006c3e:	4619      	mov	r1, r3
 8006c40:	484a      	ldr	r0, [pc, #296]	; (8006d6c <MX_GPIO_Init+0x274>)
 8006c42:	f004 f959 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c46:	2304      	movs	r3, #4
 8006c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c52:	f107 031c 	add.w	r3, r7, #28
 8006c56:	4619      	mov	r1, r3
 8006c58:	4844      	ldr	r0, [pc, #272]	; (8006d6c <MX_GPIO_Init+0x274>)
 8006c5a:	f004 f94d 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006c5e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c64:	2300      	movs	r3, #0
 8006c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c6c:	f107 031c 	add.w	r3, r7, #28
 8006c70:	4619      	mov	r1, r3
 8006c72:	483d      	ldr	r0, [pc, #244]	; (8006d68 <MX_GPIO_Init+0x270>)
 8006c74:	f004 f940 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c86:	2300      	movs	r3, #0
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c8a:	f107 031c 	add.w	r3, r7, #28
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4835      	ldr	r0, [pc, #212]	; (8006d68 <MX_GPIO_Init+0x270>)
 8006c92:	f004 f931 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca8:	f107 031c 	add.w	r3, r7, #28
 8006cac:	4619      	mov	r1, r3
 8006cae:	482f      	ldr	r0, [pc, #188]	; (8006d6c <MX_GPIO_Init+0x274>)
 8006cb0:	f004 f922 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cc2:	f107 031c 	add.w	r3, r7, #28
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4829      	ldr	r0, [pc, #164]	; (8006d70 <MX_GPIO_Init+0x278>)
 8006cca:	f004 f915 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ce0:	f107 031c 	add.w	r3, r7, #28
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4822      	ldr	r0, [pc, #136]	; (8006d70 <MX_GPIO_Init+0x278>)
 8006ce8:	f004 f906 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cfe:	f107 031c 	add.w	r3, r7, #28
 8006d02:	4619      	mov	r1, r3
 8006d04:	481a      	ldr	r0, [pc, #104]	; (8006d70 <MX_GPIO_Init+0x278>)
 8006d06:	f004 f8f7 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d10:	2301      	movs	r3, #1
 8006d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1c:	f107 031c 	add.w	r3, r7, #28
 8006d20:	4619      	mov	r1, r3
 8006d22:	4814      	ldr	r0, [pc, #80]	; (8006d74 <MX_GPIO_Init+0x27c>)
 8006d24:	f004 f8e8 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d36:	f107 031c 	add.w	r3, r7, #28
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	480d      	ldr	r0, [pc, #52]	; (8006d74 <MX_GPIO_Init+0x27c>)
 8006d3e:	f004 f8db 	bl	800aef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006d42:	239b      	movs	r3, #155	; 0x9b
 8006d44:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d46:	2300      	movs	r3, #0
 8006d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d4e:	f107 031c 	add.w	r3, r7, #28
 8006d52:	4619      	mov	r1, r3
 8006d54:	4806      	ldr	r0, [pc, #24]	; (8006d70 <MX_GPIO_Init+0x278>)
 8006d56:	f004 f8cf 	bl	800aef8 <HAL_GPIO_Init>

}
 8006d5a:	bf00      	nop
 8006d5c:	3730      	adds	r7, #48	; 0x30
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40023800 	.word	0x40023800
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40020400 	.word	0x40020400
 8006d70:	40020c00 	.word	0x40020c00
 8006d74:	40020000 	.word	0x40020000
 8006d78:	40020800 	.word	0x40020800

08006d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d80:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d82:	e7fe      	b.n	8006d82 <Error_Handler+0x6>

08006d84 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
	...

08006d94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <HAL_MspInit+0x4c>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	4a0f      	ldr	r2, [pc, #60]	; (8006de0 <HAL_MspInit+0x4c>)
 8006da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006da8:	6453      	str	r3, [r2, #68]	; 0x44
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <HAL_MspInit+0x4c>)
 8006dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006db6:	2300      	movs	r3, #0
 8006db8:	603b      	str	r3, [r7, #0]
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_MspInit+0x4c>)
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <HAL_MspInit+0x4c>)
 8006dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <HAL_MspInit+0x4c>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dce:	603b      	str	r3, [r7, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006dd2:	bf00      	nop
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800

08006de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b08c      	sub	sp, #48	; 0x30
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dec:	f107 031c 	add.w	r3, r7, #28
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	609a      	str	r2, [r3, #8]
 8006df8:	60da      	str	r2, [r3, #12]
 8006dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a4a      	ldr	r2, [pc, #296]	; (8006f2c <HAL_ADC_MspInit+0x148>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f040 808e 	bne.w	8006f24 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	4b48      	ldr	r3, [pc, #288]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e10:	4a47      	ldr	r2, [pc, #284]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e16:	6453      	str	r3, [r2, #68]	; 0x44
 8006e18:	4b45      	ldr	r3, [pc, #276]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e24:	2300      	movs	r3, #0
 8006e26:	617b      	str	r3, [r7, #20]
 8006e28:	4b41      	ldr	r3, [pc, #260]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	4a40      	ldr	r2, [pc, #256]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e2e:	f043 0304 	orr.w	r3, r3, #4
 8006e32:	6313      	str	r3, [r2, #48]	; 0x30
 8006e34:	4b3e      	ldr	r3, [pc, #248]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e40:	2300      	movs	r3, #0
 8006e42:	613b      	str	r3, [r7, #16]
 8006e44:	4b3a      	ldr	r3, [pc, #232]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	4a39      	ldr	r2, [pc, #228]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e4a:	f043 0301 	orr.w	r3, r3, #1
 8006e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e50:	4b37      	ldr	r3, [pc, #220]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	613b      	str	r3, [r7, #16]
 8006e5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e64:	4a32      	ldr	r2, [pc, #200]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e66:	f043 0302 	orr.w	r3, r3, #2
 8006e6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e6c:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <HAL_ADC_MspInit+0x14c>)
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006e78:	230f      	movs	r3, #15
 8006e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e80:	2300      	movs	r3, #0
 8006e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e84:	f107 031c 	add.w	r3, r7, #28
 8006e88:	4619      	mov	r1, r3
 8006e8a:	482a      	ldr	r0, [pc, #168]	; (8006f34 <HAL_ADC_MspInit+0x150>)
 8006e8c:	f004 f834 	bl	800aef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006e90:	23ff      	movs	r3, #255	; 0xff
 8006e92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e94:	2303      	movs	r3, #3
 8006e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e9c:	f107 031c 	add.w	r3, r7, #28
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4825      	ldr	r0, [pc, #148]	; (8006f38 <HAL_ADC_MspInit+0x154>)
 8006ea4:	f004 f828 	bl	800aef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eac:	2303      	movs	r3, #3
 8006eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006eb4:	f107 031c 	add.w	r3, r7, #28
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4820      	ldr	r0, [pc, #128]	; (8006f3c <HAL_ADC_MspInit+0x158>)
 8006ebc:	f004 f81c 	bl	800aef8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006ec0:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006ec2:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <HAL_ADC_MspInit+0x160>)
 8006ec4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006ec6:	4b1e      	ldr	r3, [pc, #120]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ecc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ece:	4b1c      	ldr	r3, [pc, #112]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006eda:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006edc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ee0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006eea:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006eec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ef0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006ef2:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ef8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006efc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f00:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f02:	4b0f      	ldr	r3, [pc, #60]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f08:	480d      	ldr	r0, [pc, #52]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006f0a:	f003 fc59 	bl	800a7c0 <HAL_DMA_Init>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006f14:	f7ff ff32 	bl	8006d7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f1e:	4a08      	ldr	r2, [pc, #32]	; (8006f40 <HAL_ADC_MspInit+0x15c>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006f24:	bf00      	nop
 8006f26:	3730      	adds	r7, #48	; 0x30
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	40012100 	.word	0x40012100
 8006f30:	40023800 	.word	0x40023800
 8006f34:	40020800 	.word	0x40020800
 8006f38:	40020000 	.word	0x40020000
 8006f3c:	40020400 	.word	0x40020400
 8006f40:	20044ae8 	.word	0x20044ae8
 8006f44:	40026440 	.word	0x40026440

08006f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08c      	sub	sp, #48	; 0x30
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f50:	f107 031c 	add.w	r3, r7, #28
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
 8006f58:	605a      	str	r2, [r3, #4]
 8006f5a:	609a      	str	r2, [r3, #8]
 8006f5c:	60da      	str	r2, [r3, #12]
 8006f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a32      	ldr	r2, [pc, #200]	; (8007030 <HAL_I2C_MspInit+0xe8>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d12c      	bne.n	8006fc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	4b31      	ldr	r3, [pc, #196]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f72:	4a30      	ldr	r2, [pc, #192]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7a:	4b2e      	ldr	r3, [pc, #184]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006f86:	23c0      	movs	r3, #192	; 0xc0
 8006f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f8a:	2312      	movs	r3, #18
 8006f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f92:	2303      	movs	r3, #3
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006f96:	2304      	movs	r3, #4
 8006f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f9a:	f107 031c 	add.w	r3, r7, #28
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4825      	ldr	r0, [pc, #148]	; (8007038 <HAL_I2C_MspInit+0xf0>)
 8006fa2:	f003 ffa9 	bl	800aef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	617b      	str	r3, [r7, #20]
 8006faa:	4b22      	ldr	r3, [pc, #136]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	4a21      	ldr	r2, [pc, #132]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006fb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fb6:	4b1f      	ldr	r3, [pc, #124]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006fc2:	e031      	b.n	8007028 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a1c      	ldr	r2, [pc, #112]	; (800703c <HAL_I2C_MspInit+0xf4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d12c      	bne.n	8007028 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fce:	2300      	movs	r3, #0
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	4b18      	ldr	r3, [pc, #96]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	4a17      	ldr	r2, [pc, #92]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006fd8:	f043 0302 	orr.w	r3, r3, #2
 8006fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fde:	4b15      	ldr	r3, [pc, #84]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	613b      	str	r3, [r7, #16]
 8006fe8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006fea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ff0:	2312      	movs	r3, #18
 8006ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007000:	f107 031c 	add.w	r3, r7, #28
 8007004:	4619      	mov	r1, r3
 8007006:	480c      	ldr	r0, [pc, #48]	; (8007038 <HAL_I2C_MspInit+0xf0>)
 8007008:	f003 ff76 	bl	800aef8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	4b08      	ldr	r3, [pc, #32]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	4a07      	ldr	r2, [pc, #28]	; (8007034 <HAL_I2C_MspInit+0xec>)
 8007016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800701a:	6413      	str	r3, [r2, #64]	; 0x40
 800701c:	4b05      	ldr	r3, [pc, #20]	; (8007034 <HAL_I2C_MspInit+0xec>)
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	68fb      	ldr	r3, [r7, #12]
}
 8007028:	bf00      	nop
 800702a:	3730      	adds	r7, #48	; 0x30
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40005400 	.word	0x40005400
 8007034:	40023800 	.word	0x40023800
 8007038:	40020400 	.word	0x40020400
 800703c:	40005800 	.word	0x40005800

08007040 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007048:	f107 0314 	add.w	r3, r7, #20
 800704c:	2200      	movs	r2, #0
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	609a      	str	r2, [r3, #8]
 8007054:	60da      	str	r2, [r3, #12]
 8007056:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a69      	ldr	r2, [pc, #420]	; (8007204 <HAL_SD_MspInit+0x1c4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	f040 80cb 	bne.w	80071fa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007064:	2300      	movs	r3, #0
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	4b67      	ldr	r3, [pc, #412]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 800706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706c:	4a66      	ldr	r2, [pc, #408]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 800706e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007072:	6453      	str	r3, [r2, #68]	; 0x44
 8007074:	4b64      	ldr	r3, [pc, #400]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800707c:	613b      	str	r3, [r7, #16]
 800707e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007080:	2300      	movs	r3, #0
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	4b60      	ldr	r3, [pc, #384]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 8007086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007088:	4a5f      	ldr	r2, [pc, #380]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 800708a:	f043 0304 	orr.w	r3, r3, #4
 800708e:	6313      	str	r3, [r2, #48]	; 0x30
 8007090:	4b5d      	ldr	r3, [pc, #372]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 8007092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	4b59      	ldr	r3, [pc, #356]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	4a58      	ldr	r2, [pc, #352]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 80070a6:	f043 0308 	orr.w	r3, r3, #8
 80070aa:	6313      	str	r3, [r2, #48]	; 0x30
 80070ac:	4b56      	ldr	r3, [pc, #344]	; (8007208 <HAL_SD_MspInit+0x1c8>)
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	f003 0308 	and.w	r3, r3, #8
 80070b4:	60bb      	str	r3, [r7, #8]
 80070b6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80070b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80070bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070be:	2302      	movs	r3, #2
 80070c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070c6:	2303      	movs	r3, #3
 80070c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80070ca:	230c      	movs	r3, #12
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070ce:	f107 0314 	add.w	r3, r7, #20
 80070d2:	4619      	mov	r1, r3
 80070d4:	484d      	ldr	r0, [pc, #308]	; (800720c <HAL_SD_MspInit+0x1cc>)
 80070d6:	f003 ff0f 	bl	800aef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070da:	2304      	movs	r3, #4
 80070dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070de:	2302      	movs	r3, #2
 80070e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070e6:	2303      	movs	r3, #3
 80070e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80070ea:	230c      	movs	r3, #12
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070ee:	f107 0314 	add.w	r3, r7, #20
 80070f2:	4619      	mov	r1, r3
 80070f4:	4846      	ldr	r0, [pc, #280]	; (8007210 <HAL_SD_MspInit+0x1d0>)
 80070f6:	f003 feff 	bl	800aef8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80070fa:	4b46      	ldr	r3, [pc, #280]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 80070fc:	4a46      	ldr	r2, [pc, #280]	; (8007218 <HAL_SD_MspInit+0x1d8>)
 80070fe:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007100:	4b44      	ldr	r3, [pc, #272]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007106:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007108:	4b42      	ldr	r3, [pc, #264]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 800710a:	2200      	movs	r2, #0
 800710c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800710e:	4b41      	ldr	r3, [pc, #260]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007110:	2200      	movs	r2, #0
 8007112:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007114:	4b3f      	ldr	r3, [pc, #252]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800711a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800711c:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 800711e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007122:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007124:	4b3b      	ldr	r3, [pc, #236]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007126:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800712a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800712c:	4b39      	ldr	r3, [pc, #228]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 800712e:	2220      	movs	r2, #32
 8007130:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007132:	4b38      	ldr	r3, [pc, #224]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007134:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007138:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800713a:	4b36      	ldr	r3, [pc, #216]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 800713c:	2204      	movs	r2, #4
 800713e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007140:	4b34      	ldr	r3, [pc, #208]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007142:	2203      	movs	r2, #3
 8007144:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007146:	4b33      	ldr	r3, [pc, #204]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007148:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800714c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800714e:	4b31      	ldr	r3, [pc, #196]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007150:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007154:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007156:	482f      	ldr	r0, [pc, #188]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 8007158:	f003 fb32 	bl	800a7c0 <HAL_DMA_Init>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007162:	f7ff fe0b 	bl	8006d7c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 800716a:	641a      	str	r2, [r3, #64]	; 0x40
 800716c:	4a29      	ldr	r2, [pc, #164]	; (8007214 <HAL_SD_MspInit+0x1d4>)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007172:	4b2a      	ldr	r3, [pc, #168]	; (800721c <HAL_SD_MspInit+0x1dc>)
 8007174:	4a2a      	ldr	r2, [pc, #168]	; (8007220 <HAL_SD_MspInit+0x1e0>)
 8007176:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007178:	4b28      	ldr	r3, [pc, #160]	; (800721c <HAL_SD_MspInit+0x1dc>)
 800717a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800717e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007180:	4b26      	ldr	r3, [pc, #152]	; (800721c <HAL_SD_MspInit+0x1dc>)
 8007182:	2240      	movs	r2, #64	; 0x40
 8007184:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007186:	4b25      	ldr	r3, [pc, #148]	; (800721c <HAL_SD_MspInit+0x1dc>)
 8007188:	2200      	movs	r2, #0
 800718a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800718c:	4b23      	ldr	r3, [pc, #140]	; (800721c <HAL_SD_MspInit+0x1dc>)
 800718e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007192:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007194:	4b21      	ldr	r3, [pc, #132]	; (800721c <HAL_SD_MspInit+0x1dc>)
 8007196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800719a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800719c:	4b1f      	ldr	r3, [pc, #124]	; (800721c <HAL_SD_MspInit+0x1dc>)
 800719e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071a2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80071a4:	4b1d      	ldr	r3, [pc, #116]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071a6:	2220      	movs	r2, #32
 80071a8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071aa:	4b1c      	ldr	r3, [pc, #112]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80071b0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071b2:	4b1a      	ldr	r3, [pc, #104]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071b4:	2204      	movs	r2, #4
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80071b8:	4b18      	ldr	r3, [pc, #96]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071ba:	2203      	movs	r2, #3
 80071bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80071be:	4b17      	ldr	r3, [pc, #92]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80071c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80071c6:	4b15      	ldr	r3, [pc, #84]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80071ce:	4813      	ldr	r0, [pc, #76]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071d0:	f003 faf6 	bl	800a7c0 <HAL_DMA_Init>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80071da:	f7ff fdcf 	bl	8006d7c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a0e      	ldr	r2, [pc, #56]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80071e4:	4a0d      	ldr	r2, [pc, #52]	; (800721c <HAL_SD_MspInit+0x1dc>)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80071ea:	2200      	movs	r2, #0
 80071ec:	2100      	movs	r1, #0
 80071ee:	2031      	movs	r0, #49	; 0x31
 80071f0:	f003 faaf 	bl	800a752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80071f4:	2031      	movs	r0, #49	; 0x31
 80071f6:	f003 fac8 	bl	800a78a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80071fa:	bf00      	nop
 80071fc:	3728      	adds	r7, #40	; 0x28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40012c00 	.word	0x40012c00
 8007208:	40023800 	.word	0x40023800
 800720c:	40020800 	.word	0x40020800
 8007210:	40020c00 	.word	0x40020c00
 8007214:	20044610 	.word	0x20044610
 8007218:	40026458 	.word	0x40026458
 800721c:	20044944 	.word	0x20044944
 8007220:	400264a0 	.word	0x400264a0

08007224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08a      	sub	sp, #40	; 0x28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722c:	f107 0314 	add.w	r3, r7, #20
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a19      	ldr	r2, [pc, #100]	; (80072a8 <HAL_SPI_MspInit+0x84>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d12c      	bne.n	80072a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	613b      	str	r3, [r7, #16]
 800724a:	4b18      	ldr	r3, [pc, #96]	; (80072ac <HAL_SPI_MspInit+0x88>)
 800724c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724e:	4a17      	ldr	r2, [pc, #92]	; (80072ac <HAL_SPI_MspInit+0x88>)
 8007250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007254:	6413      	str	r3, [r2, #64]	; 0x40
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <HAL_SPI_MspInit+0x88>)
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	4b11      	ldr	r3, [pc, #68]	; (80072ac <HAL_SPI_MspInit+0x88>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	4a10      	ldr	r2, [pc, #64]	; (80072ac <HAL_SPI_MspInit+0x88>)
 800726c:	f043 0302 	orr.w	r3, r3, #2
 8007270:	6313      	str	r3, [r2, #48]	; 0x30
 8007272:	4b0e      	ldr	r3, [pc, #56]	; (80072ac <HAL_SPI_MspInit+0x88>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800727e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007284:	2302      	movs	r3, #2
 8007286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800728c:	2303      	movs	r3, #3
 800728e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007290:	2305      	movs	r3, #5
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007294:	f107 0314 	add.w	r3, r7, #20
 8007298:	4619      	mov	r1, r3
 800729a:	4805      	ldr	r0, [pc, #20]	; (80072b0 <HAL_SPI_MspInit+0x8c>)
 800729c:	f003 fe2c 	bl	800aef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80072a0:	bf00      	nop
 80072a2:	3728      	adds	r7, #40	; 0x28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	40003800 	.word	0x40003800
 80072ac:	40023800 	.word	0x40023800
 80072b0:	40020400 	.word	0x40020400

080072b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08c      	sub	sp, #48	; 0x30
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072bc:	f107 031c 	add.w	r3, r7, #28
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	605a      	str	r2, [r3, #4]
 80072c6:	609a      	str	r2, [r3, #8]
 80072c8:	60da      	str	r2, [r3, #12]
 80072ca:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a2d      	ldr	r2, [pc, #180]	; (8007388 <HAL_TIM_PWM_MspInit+0xd4>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d12d      	bne.n	8007332 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	4b2c      	ldr	r3, [pc, #176]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	4a2b      	ldr	r2, [pc, #172]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	6453      	str	r3, [r2, #68]	; 0x44
 80072e6:	4b29      	ldr	r3, [pc, #164]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 80072e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	4b25      	ldr	r3, [pc, #148]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	4a24      	ldr	r2, [pc, #144]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 80072fc:	f043 0310 	orr.w	r3, r3, #16
 8007300:	6313      	str	r3, [r2, #48]	; 0x30
 8007302:	4b22      	ldr	r3, [pc, #136]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	f003 0310 	and.w	r3, r3, #16
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800730e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007314:	2302      	movs	r3, #2
 8007316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800731c:	2300      	movs	r3, #0
 800731e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007320:	2301      	movs	r3, #1
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007324:	f107 031c 	add.w	r3, r7, #28
 8007328:	4619      	mov	r1, r3
 800732a:	4819      	ldr	r0, [pc, #100]	; (8007390 <HAL_TIM_PWM_MspInit+0xdc>)
 800732c:	f003 fde4 	bl	800aef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007330:	e026      	b.n	8007380 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a17      	ldr	r2, [pc, #92]	; (8007394 <HAL_TIM_PWM_MspInit+0xe0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10e      	bne.n	800735a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800733c:	2300      	movs	r3, #0
 800733e:	613b      	str	r3, [r7, #16]
 8007340:	4b12      	ldr	r3, [pc, #72]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	4a11      	ldr	r2, [pc, #68]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 8007346:	f043 0302 	orr.w	r3, r3, #2
 800734a:	6413      	str	r3, [r2, #64]	; 0x40
 800734c:	4b0f      	ldr	r3, [pc, #60]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	613b      	str	r3, [r7, #16]
 8007356:	693b      	ldr	r3, [r7, #16]
}
 8007358:	e012      	b.n	8007380 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a0e      	ldr	r2, [pc, #56]	; (8007398 <HAL_TIM_PWM_MspInit+0xe4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d10d      	bne.n	8007380 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	4b08      	ldr	r3, [pc, #32]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 800736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736c:	4a07      	ldr	r2, [pc, #28]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 800736e:	f043 0304 	orr.w	r3, r3, #4
 8007372:	6413      	str	r3, [r2, #64]	; 0x40
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_TIM_PWM_MspInit+0xd8>)
 8007376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
}
 8007380:	bf00      	nop
 8007382:	3730      	adds	r7, #48	; 0x30
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40010000 	.word	0x40010000
 800738c:	40023800 	.word	0x40023800
 8007390:	40021000 	.word	0x40021000
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800

0800739c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a3e      	ldr	r2, [pc, #248]	; (80074a4 <HAL_TIM_Base_MspInit+0x108>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d116      	bne.n	80073dc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80073ae:	2300      	movs	r3, #0
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	4b3d      	ldr	r3, [pc, #244]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	4a3c      	ldr	r2, [pc, #240]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 80073b8:	f043 0310 	orr.w	r3, r3, #16
 80073bc:	6413      	str	r3, [r2, #64]	; 0x40
 80073be:	4b3a      	ldr	r3, [pc, #232]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80073ca:	2200      	movs	r2, #0
 80073cc:	2101      	movs	r1, #1
 80073ce:	2036      	movs	r0, #54	; 0x36
 80073d0:	f003 f9bf 	bl	800a752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80073d4:	2036      	movs	r0, #54	; 0x36
 80073d6:	f003 f9d8 	bl	800a78a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80073da:	e05e      	b.n	800749a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a32      	ldr	r2, [pc, #200]	; (80074ac <HAL_TIM_Base_MspInit+0x110>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d116      	bne.n	8007414 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80073e6:	2300      	movs	r3, #0
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	4b2f      	ldr	r3, [pc, #188]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	4a2e      	ldr	r2, [pc, #184]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 80073f0:	f043 0320 	orr.w	r3, r3, #32
 80073f4:	6413      	str	r3, [r2, #64]	; 0x40
 80073f6:	4b2c      	ldr	r3, [pc, #176]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f003 0320 	and.w	r3, r3, #32
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007402:	2200      	movs	r2, #0
 8007404:	2100      	movs	r1, #0
 8007406:	2037      	movs	r0, #55	; 0x37
 8007408:	f003 f9a3 	bl	800a752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800740c:	2037      	movs	r0, #55	; 0x37
 800740e:	f003 f9bc 	bl	800a78a <HAL_NVIC_EnableIRQ>
}
 8007412:	e042      	b.n	800749a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a25      	ldr	r2, [pc, #148]	; (80074b0 <HAL_TIM_Base_MspInit+0x114>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d10e      	bne.n	800743c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800741e:	2300      	movs	r3, #0
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800742c:	6453      	str	r3, [r2, #68]	; 0x44
 800742e:	4b1e      	ldr	r3, [pc, #120]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	697b      	ldr	r3, [r7, #20]
}
 800743a:	e02e      	b.n	800749a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <HAL_TIM_Base_MspInit+0x118>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d10e      	bne.n	8007464 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 800744c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744e:	4a16      	ldr	r2, [pc, #88]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007454:	6453      	str	r3, [r2, #68]	; 0x44
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800745a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800745e:	613b      	str	r3, [r7, #16]
 8007460:	693b      	ldr	r3, [r7, #16]
}
 8007462:	e01a      	b.n	800749a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a13      	ldr	r2, [pc, #76]	; (80074b8 <HAL_TIM_Base_MspInit+0x11c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d115      	bne.n	800749a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	4a0c      	ldr	r2, [pc, #48]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747c:	6413      	str	r3, [r2, #64]	; 0x40
 800747e:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800748a:	2200      	movs	r2, #0
 800748c:	2100      	movs	r1, #0
 800748e:	202c      	movs	r0, #44	; 0x2c
 8007490:	f003 f95f 	bl	800a752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007494:	202c      	movs	r0, #44	; 0x2c
 8007496:	f003 f978 	bl	800a78a <HAL_NVIC_EnableIRQ>
}
 800749a:	bf00      	nop
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	40001000 	.word	0x40001000
 80074a8:	40023800 	.word	0x40023800
 80074ac:	40001400 	.word	0x40001400
 80074b0:	40014400 	.word	0x40014400
 80074b4:	40014800 	.word	0x40014800
 80074b8:	40001c00 	.word	0x40001c00

080074bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1d      	ldr	r2, [pc, #116]	; (8007550 <HAL_TIM_Encoder_MspInit+0x94>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d133      	bne.n	8007546 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80074de:	2300      	movs	r3, #0
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <HAL_TIM_Encoder_MspInit+0x98>)
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	4a1b      	ldr	r2, [pc, #108]	; (8007554 <HAL_TIM_Encoder_MspInit+0x98>)
 80074e8:	f043 0302 	orr.w	r3, r3, #2
 80074ec:	6453      	str	r3, [r2, #68]	; 0x44
 80074ee:	4b19      	ldr	r3, [pc, #100]	; (8007554 <HAL_TIM_Encoder_MspInit+0x98>)
 80074f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	60fb      	str	r3, [r7, #12]
 80074fe:	4b15      	ldr	r3, [pc, #84]	; (8007554 <HAL_TIM_Encoder_MspInit+0x98>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	4a14      	ldr	r2, [pc, #80]	; (8007554 <HAL_TIM_Encoder_MspInit+0x98>)
 8007504:	f043 0304 	orr.w	r3, r3, #4
 8007508:	6313      	str	r3, [r2, #48]	; 0x30
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <HAL_TIM_Encoder_MspInit+0x98>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	f003 0304 	and.w	r3, r3, #4
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007516:	23c0      	movs	r3, #192	; 0xc0
 8007518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751a:	2302      	movs	r3, #2
 800751c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751e:	2300      	movs	r3, #0
 8007520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007522:	2300      	movs	r3, #0
 8007524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007526:	2303      	movs	r3, #3
 8007528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800752a:	f107 0314 	add.w	r3, r7, #20
 800752e:	4619      	mov	r1, r3
 8007530:	4809      	ldr	r0, [pc, #36]	; (8007558 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007532:	f003 fce1 	bl	800aef8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	202c      	movs	r0, #44	; 0x2c
 800753c:	f003 f909 	bl	800a752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007540:	202c      	movs	r0, #44	; 0x2c
 8007542:	f003 f922 	bl	800a78a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007546:	bf00      	nop
 8007548:	3728      	adds	r7, #40	; 0x28
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	40010400 	.word	0x40010400
 8007554:	40023800 	.word	0x40023800
 8007558:	40020800 	.word	0x40020800

0800755c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08c      	sub	sp, #48	; 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007564:	f107 031c 	add.w	r3, r7, #28
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	609a      	str	r2, [r3, #8]
 8007570:	60da      	str	r2, [r3, #12]
 8007572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a5c      	ldr	r2, [pc, #368]	; (80076ec <HAL_TIM_MspPostInit+0x190>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d11f      	bne.n	80075be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	4b5b      	ldr	r3, [pc, #364]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a5a      	ldr	r2, [pc, #360]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007588:	f043 0310 	orr.w	r3, r3, #16
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b58      	ldr	r3, [pc, #352]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0310 	and.w	r3, r3, #16
 8007596:	61bb      	str	r3, [r7, #24]
 8007598:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800759a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800759e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a0:	2302      	movs	r3, #2
 80075a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a8:	2300      	movs	r3, #0
 80075aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80075ac:	2301      	movs	r3, #1
 80075ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075b0:	f107 031c 	add.w	r3, r7, #28
 80075b4:	4619      	mov	r1, r3
 80075b6:	484f      	ldr	r0, [pc, #316]	; (80076f4 <HAL_TIM_MspPostInit+0x198>)
 80075b8:	f003 fc9e 	bl	800aef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80075bc:	e091      	b.n	80076e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a4d      	ldr	r2, [pc, #308]	; (80076f8 <HAL_TIM_MspPostInit+0x19c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d11e      	bne.n	8007606 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]
 80075cc:	4b48      	ldr	r3, [pc, #288]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	4a47      	ldr	r2, [pc, #284]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 80075d2:	f043 0302 	orr.w	r3, r3, #2
 80075d6:	6313      	str	r3, [r2, #48]	; 0x30
 80075d8:	4b45      	ldr	r3, [pc, #276]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80075e4:	2330      	movs	r3, #48	; 0x30
 80075e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075e8:	2302      	movs	r3, #2
 80075ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075f0:	2300      	movs	r3, #0
 80075f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80075f4:	2302      	movs	r3, #2
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075f8:	f107 031c 	add.w	r3, r7, #28
 80075fc:	4619      	mov	r1, r3
 80075fe:	483f      	ldr	r0, [pc, #252]	; (80076fc <HAL_TIM_MspPostInit+0x1a0>)
 8007600:	f003 fc7a 	bl	800aef8 <HAL_GPIO_Init>
}
 8007604:	e06d      	b.n	80076e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a3d      	ldr	r2, [pc, #244]	; (8007700 <HAL_TIM_MspPostInit+0x1a4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d11f      	bne.n	8007650 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	4b36      	ldr	r3, [pc, #216]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007618:	4a35      	ldr	r2, [pc, #212]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 800761a:	f043 0308 	orr.w	r3, r3, #8
 800761e:	6313      	str	r3, [r2, #48]	; 0x30
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800762c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007632:	2302      	movs	r3, #2
 8007634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007636:	2300      	movs	r3, #0
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763a:	2300      	movs	r3, #0
 800763c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800763e:	2302      	movs	r3, #2
 8007640:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007642:	f107 031c 	add.w	r3, r7, #28
 8007646:	4619      	mov	r1, r3
 8007648:	482e      	ldr	r0, [pc, #184]	; (8007704 <HAL_TIM_MspPostInit+0x1a8>)
 800764a:	f003 fc55 	bl	800aef8 <HAL_GPIO_Init>
}
 800764e:	e048      	b.n	80076e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a2c      	ldr	r2, [pc, #176]	; (8007708 <HAL_TIM_MspPostInit+0x1ac>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d11f      	bne.n	800769a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800765a:	2300      	movs	r3, #0
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	4b24      	ldr	r3, [pc, #144]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 8007664:	f043 0302 	orr.w	r3, r3, #2
 8007668:	6313      	str	r3, [r2, #48]	; 0x30
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	f003 0302 	and.w	r3, r3, #2
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800767a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767c:	2302      	movs	r3, #2
 800767e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007680:	2300      	movs	r3, #0
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007684:	2300      	movs	r3, #0
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007688:	2303      	movs	r3, #3
 800768a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800768c:	f107 031c 	add.w	r3, r7, #28
 8007690:	4619      	mov	r1, r3
 8007692:	481a      	ldr	r0, [pc, #104]	; (80076fc <HAL_TIM_MspPostInit+0x1a0>)
 8007694:	f003 fc30 	bl	800aef8 <HAL_GPIO_Init>
}
 8007698:	e023      	b.n	80076e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a1b      	ldr	r2, [pc, #108]	; (800770c <HAL_TIM_MspPostInit+0x1b0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d11e      	bne.n	80076e2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076a4:	2300      	movs	r3, #0
 80076a6:	60bb      	str	r3, [r7, #8]
 80076a8:	4b11      	ldr	r3, [pc, #68]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	4a10      	ldr	r2, [pc, #64]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 80076ae:	f043 0302 	orr.w	r3, r3, #2
 80076b2:	6313      	str	r3, [r2, #48]	; 0x30
 80076b4:	4b0e      	ldr	r3, [pc, #56]	; (80076f0 <HAL_TIM_MspPostInit+0x194>)
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	60bb      	str	r3, [r7, #8]
 80076be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80076c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076c6:	2302      	movs	r3, #2
 80076c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ce:	2300      	movs	r3, #0
 80076d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80076d2:	2303      	movs	r3, #3
 80076d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076d6:	f107 031c 	add.w	r3, r7, #28
 80076da:	4619      	mov	r1, r3
 80076dc:	4807      	ldr	r0, [pc, #28]	; (80076fc <HAL_TIM_MspPostInit+0x1a0>)
 80076de:	f003 fc0b 	bl	800aef8 <HAL_GPIO_Init>
}
 80076e2:	bf00      	nop
 80076e4:	3730      	adds	r7, #48	; 0x30
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40023800 	.word	0x40023800
 80076f4:	40021000 	.word	0x40021000
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40020400 	.word	0x40020400
 8007700:	40000800 	.word	0x40000800
 8007704:	40020c00 	.word	0x40020c00
 8007708:	40014400 	.word	0x40014400
 800770c:	40014800 	.word	0x40014800

08007710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	; 0x28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	60da      	str	r2, [r3, #12]
 8007726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a19      	ldr	r2, [pc, #100]	; (8007794 <HAL_UART_MspInit+0x84>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d12b      	bne.n	800778a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
 8007736:	4b18      	ldr	r3, [pc, #96]	; (8007798 <HAL_UART_MspInit+0x88>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	4a17      	ldr	r2, [pc, #92]	; (8007798 <HAL_UART_MspInit+0x88>)
 800773c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007740:	6413      	str	r3, [r2, #64]	; 0x40
 8007742:	4b15      	ldr	r3, [pc, #84]	; (8007798 <HAL_UART_MspInit+0x88>)
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <HAL_UART_MspInit+0x88>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	4a10      	ldr	r2, [pc, #64]	; (8007798 <HAL_UART_MspInit+0x88>)
 8007758:	f043 0308 	orr.w	r3, r3, #8
 800775c:	6313      	str	r3, [r2, #48]	; 0x30
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <HAL_UART_MspInit+0x88>)
 8007760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	60fb      	str	r3, [r7, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800776a:	2360      	movs	r3, #96	; 0x60
 800776c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800776e:	2302      	movs	r3, #2
 8007770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007772:	2300      	movs	r3, #0
 8007774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007776:	2303      	movs	r3, #3
 8007778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800777a:	2307      	movs	r3, #7
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800777e:	f107 0314 	add.w	r3, r7, #20
 8007782:	4619      	mov	r1, r3
 8007784:	4805      	ldr	r0, [pc, #20]	; (800779c <HAL_UART_MspInit+0x8c>)
 8007786:	f003 fbb7 	bl	800aef8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800778a:	bf00      	nop
 800778c:	3728      	adds	r7, #40	; 0x28
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40004400 	.word	0x40004400
 8007798:	40023800 	.word	0x40023800
 800779c:	40020c00 	.word	0x40020c00

080077a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077a4:	e7fe      	b.n	80077a4 <NMI_Handler+0x4>

080077a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077a6:	b480      	push	{r7}
 80077a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077aa:	e7fe      	b.n	80077aa <HardFault_Handler+0x4>

080077ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077ac:	b480      	push	{r7}
 80077ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077b0:	e7fe      	b.n	80077b0 <MemManage_Handler+0x4>

080077b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077b2:	b480      	push	{r7}
 80077b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077b6:	e7fe      	b.n	80077b6 <BusFault_Handler+0x4>

080077b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077bc:	e7fe      	b.n	80077bc <UsageFault_Handler+0x4>

080077be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077be:	b480      	push	{r7}
 80077c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077c2:	bf00      	nop
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr

080077da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077da:	b480      	push	{r7}
 80077dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80077de:	bf00      	nop
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80077ec:	f002 fa90 	bl	8009d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80077f0:	bf00      	nop
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80077f8:	4803      	ldr	r0, [pc, #12]	; (8007808 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80077fa:	f007 fd60 	bl	800f2be <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80077fe:	4803      	ldr	r0, [pc, #12]	; (800780c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007800:	f007 fd5d 	bl	800f2be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007804:	bf00      	nop
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200446c8 	.word	0x200446c8
 800780c:	200448c4 	.word	0x200448c4

08007810 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007814:	4802      	ldr	r0, [pc, #8]	; (8007820 <SDIO_IRQHandler+0x10>)
 8007816:	f005 fdf9 	bl	800d40c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800781a:	bf00      	nop
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20044a24 	.word	0x20044a24

08007824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007828:	4802      	ldr	r0, [pc, #8]	; (8007834 <TIM6_DAC_IRQHandler+0x10>)
 800782a:	f007 fd48 	bl	800f2be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800782e:	bf00      	nop
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	200449a4 	.word	0x200449a4

08007838 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800783c:	4802      	ldr	r0, [pc, #8]	; (8007848 <TIM7_IRQHandler+0x10>)
 800783e:	f007 fd3e 	bl	800f2be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	20044b48 	.word	0x20044b48

0800784c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007850:	4802      	ldr	r0, [pc, #8]	; (800785c <DMA2_Stream2_IRQHandler+0x10>)
 8007852:	f003 f8dd 	bl	800aa10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007856:	bf00      	nop
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20044ae8 	.word	0x20044ae8

08007860 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007864:	4802      	ldr	r0, [pc, #8]	; (8007870 <DMA2_Stream3_IRQHandler+0x10>)
 8007866:	f003 f8d3 	bl	800aa10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800786a:	bf00      	nop
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20044610 	.word	0x20044610

08007874 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007878:	4802      	ldr	r0, [pc, #8]	; (8007884 <DMA2_Stream6_IRQHandler+0x10>)
 800787a:	f003 f8c9 	bl	800aa10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800787e:	bf00      	nop
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20044944 	.word	0x20044944

08007888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007890:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <_sbrk+0x5c>)
 8007892:	4b15      	ldr	r3, [pc, #84]	; (80078e8 <_sbrk+0x60>)
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800789c:	4b13      	ldr	r3, [pc, #76]	; (80078ec <_sbrk+0x64>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <_sbrk+0x64>)
 80078a6:	4a12      	ldr	r2, [pc, #72]	; (80078f0 <_sbrk+0x68>)
 80078a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078aa:	4b10      	ldr	r3, [pc, #64]	; (80078ec <_sbrk+0x64>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4413      	add	r3, r2
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d207      	bcs.n	80078c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078b8:	f00d ff94 	bl	80157e4 <__errno>
 80078bc:	4602      	mov	r2, r0
 80078be:	230c      	movs	r3, #12
 80078c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295
 80078c6:	e009      	b.n	80078dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80078c8:	4b08      	ldr	r3, [pc, #32]	; (80078ec <_sbrk+0x64>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80078ce:	4b07      	ldr	r3, [pc, #28]	; (80078ec <_sbrk+0x64>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4413      	add	r3, r2
 80078d6:	4a05      	ldr	r2, [pc, #20]	; (80078ec <_sbrk+0x64>)
 80078d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80078da:	68fb      	ldr	r3, [r7, #12]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20050000 	.word	0x20050000
 80078e8:	00000800 	.word	0x00000800
 80078ec:	200002b8 	.word	0x200002b8
 80078f0:	20046c98 	.word	0x20046c98

080078f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80078f4:	b480      	push	{r7}
 80078f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078f8:	4b08      	ldr	r3, [pc, #32]	; (800791c <SystemInit+0x28>)
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fe:	4a07      	ldr	r2, [pc, #28]	; (800791c <SystemInit+0x28>)
 8007900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007908:	4b04      	ldr	r3, [pc, #16]	; (800791c <SystemInit+0x28>)
 800790a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800790e:	609a      	str	r2, [r3, #8]
#endif
}
 8007910:	bf00      	nop
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007920:	b598      	push	{r3, r4, r7, lr}
 8007922:	af00      	add	r7, sp, #0
	lcd_init();
 8007924:	f7f9 fb78 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007928:	483b      	ldr	r0, [pc, #236]	; (8007a18 <cppInit+0xf8>)
 800792a:	f7fd fcc3 	bl	80052b4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800792e:	2064      	movs	r0, #100	; 0x64
 8007930:	f002 fa0e 	bl	8009d50 <HAL_Delay>
	power_sensor.updateValues();
 8007934:	4838      	ldr	r0, [pc, #224]	; (8007a18 <cppInit+0xf8>)
 8007936:	f7fd fccb 	bl	80052d0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800793a:	f7f9 fbb1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800793e:	2100      	movs	r1, #0
 8007940:	2000      	movs	r0, #0
 8007942:	f7f9 fbbd 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007946:	4835      	ldr	r0, [pc, #212]	; (8007a1c <cppInit+0xfc>)
 8007948:	f7f9 fbe4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800794c:	2101      	movs	r1, #1
 800794e:	2000      	movs	r0, #0
 8007950:	f7f9 fbb6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007954:	4830      	ldr	r0, [pc, #192]	; (8007a18 <cppInit+0xf8>)
 8007956:	f7fd fce5 	bl	8005324 <_ZN11PowerSensor17getButteryVoltageEv>
 800795a:	ee10 3a10 	vmov	r3, s0
 800795e:	4618      	mov	r0, r3
 8007960:	f7f8 fe0a 	bl	8000578 <__aeabi_f2d>
 8007964:	4603      	mov	r3, r0
 8007966:	460c      	mov	r4, r1
 8007968:	461a      	mov	r2, r3
 800796a:	4623      	mov	r3, r4
 800796c:	482c      	ldr	r0, [pc, #176]	; (8007a20 <cppInit+0x100>)
 800796e:	f7f9 fbd1 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007976:	f002 f9eb 	bl	8009d50 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800797a:	482a      	ldr	r0, [pc, #168]	; (8007a24 <cppInit+0x104>)
 800797c:	f7fc febc 	bl	80046f8 <_ZN6Logger10sdCardInitEv>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d007      	beq.n	8007996 <cppInit+0x76>
		led.fullColor('G');
 8007986:	2147      	movs	r1, #71	; 0x47
 8007988:	4827      	ldr	r0, [pc, #156]	; (8007a28 <cppInit+0x108>)
 800798a:	f7fa fc27 	bl	80021dc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800798e:	2064      	movs	r0, #100	; 0x64
 8007990:	f002 f9de 	bl	8009d50 <HAL_Delay>
 8007994:	e006      	b.n	80079a4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007996:	2152      	movs	r1, #82	; 0x52
 8007998:	4823      	ldr	r0, [pc, #140]	; (8007a28 <cppInit+0x108>)
 800799a:	f7fa fc1f 	bl	80021dc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800799e:	2064      	movs	r0, #100	; 0x64
 80079a0:	f002 f9d6 	bl	8009d50 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80079a4:	4821      	ldr	r0, [pc, #132]	; (8007a2c <cppInit+0x10c>)
 80079a6:	f7fa fd75 	bl	8002494 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80079aa:	4821      	ldr	r0, [pc, #132]	; (8007a30 <cppInit+0x110>)
 80079ac:	f7fd f93a 	bl	8004c24 <_ZN5Motor4initEv>
	encoder.init();
 80079b0:	4820      	ldr	r0, [pc, #128]	; (8007a34 <cppInit+0x114>)
 80079b2:	f7f9 fd37 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80079b6:	4820      	ldr	r0, [pc, #128]	; (8007a38 <cppInit+0x118>)
 80079b8:	f7fa f9fa 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 80079bc:	481f      	ldr	r0, [pc, #124]	; (8007a3c <cppInit+0x11c>)
 80079be:	f7fb ffcf 	bl	8003960 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80079c2:	481a      	ldr	r0, [pc, #104]	; (8007a2c <cppInit+0x10c>)
 80079c4:	f7fa fec6 	bl	8002754 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80079c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079cc:	f002 f9c0 	bl	8009d50 <HAL_Delay>

	led.fullColor('M');
 80079d0:	214d      	movs	r1, #77	; 0x4d
 80079d2:	4815      	ldr	r0, [pc, #84]	; (8007a28 <cppInit+0x108>)
 80079d4:	f7fa fc02 	bl	80021dc <_ZN3LED9fullColorEc>
	imu.calibration();
 80079d8:	4817      	ldr	r0, [pc, #92]	; (8007a38 <cppInit+0x118>)
 80079da:	f7fa fa87 	bl	8001eec <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 80079de:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007a40 <cppInit+0x120>
 80079e2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007a44 <cppInit+0x124>
 80079e6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007a48 <cppInit+0x128>
 80079ea:	4818      	ldr	r0, [pc, #96]	; (8007a4c <cppInit+0x12c>)
 80079ec:	f7fe f9dc 	bl	8005da8 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80079f0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007a50 <cppInit+0x130>
 80079f4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007a54 <cppInit+0x134>
 80079f8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007a58 <cppInit+0x138>
 80079fc:	4813      	ldr	r0, [pc, #76]	; (8007a4c <cppInit+0x12c>)
 80079fe:	f7fe f9ec 	bl	8005dda <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007a02:	4816      	ldr	r0, [pc, #88]	; (8007a5c <cppInit+0x13c>)
 8007a04:	f7fd fb60 	bl	80050c8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007a08:	4815      	ldr	r0, [pc, #84]	; (8007a60 <cppInit+0x140>)
 8007a0a:	f7fd fbf7 	bl	80051fc <_ZN13PathFollowing4initEv>

	esc.init();
 8007a0e:	4815      	ldr	r0, [pc, #84]	; (8007a64 <cppInit+0x144>)
 8007a10:	f7f9 fbec 	bl	80011ec <_ZN3ESC4initEv>

}
 8007a14:	bf00      	nop
 8007a16:	bd98      	pop	{r3, r4, r7, pc}
 8007a18:	200005d0 	.word	0x200005d0
 8007a1c:	08019e1c 	.word	0x08019e1c
 8007a20:	08019e24 	.word	0x08019e24
 8007a24:	200005f0 	.word	0x200005f0
 8007a28:	200005cc 	.word	0x200005cc
 8007a2c:	200002bc 	.word	0x200002bc
 8007a30:	200005c8 	.word	0x200005c8
 8007a34:	2001dabc 	.word	0x2001dabc
 8007a38:	200005dc 	.word	0x200005dc
 8007a3c:	2001db5c 	.word	0x2001db5c
 8007a40:	3a8439b6 	.word	0x3a8439b6
 8007a44:	40d1a29c 	.word	0x40d1a29c
 8007a48:	3f81f8a1 	.word	0x3f81f8a1
 8007a4c:	2001dadc 	.word	0x2001dadc
 8007a50:	00000000 	.word	0x00000000
 8007a54:	3f5e3fbc 	.word	0x3f5e3fbc
 8007a58:	3d75c28f 	.word	0x3d75c28f
 8007a5c:	2001db18 	.word	0x2001db18
 8007a60:	2002ab10 	.word	0x2002ab10
 8007a64:	2001db58 	.word	0x2001db58

08007a68 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007a6c:	480e      	ldr	r0, [pc, #56]	; (8007aa8 <cppFlip1ms+0x40>)
 8007a6e:	f7fa fd6f 	bl	8002550 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007a72:	480e      	ldr	r0, [pc, #56]	; (8007aac <cppFlip1ms+0x44>)
 8007a74:	f7fa f9c2 	bl	8001dfc <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007a78:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <cppFlip1ms+0x48>)
 8007a7a:	f7f9 fcf5 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007a7e:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <cppFlip1ms+0x4c>)
 8007a80:	f7fc fa14 	bl	8003eac <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007a84:	480c      	ldr	r0, [pc, #48]	; (8007ab8 <cppFlip1ms+0x50>)
 8007a86:	f7fe f9c1 	bl	8005e0c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007a8a:	480c      	ldr	r0, [pc, #48]	; (8007abc <cppFlip1ms+0x54>)
 8007a8c:	f7fd fb00 	bl	8005090 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007a90:	480b      	ldr	r0, [pc, #44]	; (8007ac0 <cppFlip1ms+0x58>)
 8007a92:	f7fd fcc3 	bl	800541c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007a96:	480b      	ldr	r0, [pc, #44]	; (8007ac4 <cppFlip1ms+0x5c>)
 8007a98:	f7fd f8d6 	bl	8004c48 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007a9c:	4804      	ldr	r0, [pc, #16]	; (8007ab0 <cppFlip1ms+0x48>)
 8007a9e:	f7f9 fdcd 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007aa2:	bf00      	nop
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	200002bc 	.word	0x200002bc
 8007aac:	200005dc 	.word	0x200005dc
 8007ab0:	2001dabc 	.word	0x2001dabc
 8007ab4:	2001db5c 	.word	0x2001db5c
 8007ab8:	2001dadc 	.word	0x2001dadc
 8007abc:	2001db18 	.word	0x2001db18
 8007ac0:	200005b4 	.word	0x200005b4
 8007ac4:	200005c8 	.word	0x200005c8

08007ac8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007acc:	4802      	ldr	r0, [pc, #8]	; (8007ad8 <cppFlip100ns+0x10>)
 8007ace:	f7fa fcf1 	bl	80024b4 <_ZN10LineSensor17storeSensorValuesEv>
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200002bc 	.word	0x200002bc

08007adc <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007ae0:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <cppFlip10ms+0x48>)
 8007ae2:	881b      	ldrh	r3, [r3, #0]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <cppFlip10ms+0x48>)
 8007aea:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <cppFlip10ms+0x48>)
 8007aee:	881b      	ldrh	r3, [r3, #0]
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d905      	bls.n	8007b00 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007af4:	480c      	ldr	r0, [pc, #48]	; (8007b28 <cppFlip10ms+0x4c>)
 8007af6:	f7fd ffa9 	bl	8005a4c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007afa:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <cppFlip10ms+0x48>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007b00:	480a      	ldr	r0, [pc, #40]	; (8007b2c <cppFlip10ms+0x50>)
 8007b02:	f7fd f963 	bl	8004dcc <_ZN5Motor20getLeftCounterPeriodEv>
 8007b06:	4603      	mov	r3, r0
 8007b08:	4619      	mov	r1, r3
 8007b0a:	4809      	ldr	r0, [pc, #36]	; (8007b30 <cppFlip10ms+0x54>)
 8007b0c:	f7fc fe3c 	bl	8004788 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007b10:	4806      	ldr	r0, [pc, #24]	; (8007b2c <cppFlip10ms+0x50>)
 8007b12:	f7fd f968 	bl	8004de6 <_ZN5Motor21getRightCounterPeriodEv>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4619      	mov	r1, r3
 8007b1a:	4805      	ldr	r0, [pc, #20]	; (8007b30 <cppFlip10ms+0x54>)
 8007b1c:	f7fc fe6d 	bl	80047fa <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007b20:	bf00      	nop
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20042238 	.word	0x20042238
 8007b28:	2002a904 	.word	0x2002a904
 8007b2c:	200005c8 	.word	0x200005c8
 8007b30:	200005f0 	.word	0x200005f0
 8007b34:	00000000 	.word	0x00000000

08007b38 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007b3e:	4baf      	ldr	r3, [pc, #700]	; (8007dfc <cppLoop+0x2c4>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f3bf 8f5b 	dmb	ish
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <cppLoop+0x4e>
 8007b5a:	48a8      	ldr	r0, [pc, #672]	; (8007dfc <cppLoop+0x2c4>)
 8007b5c:	f00c fddd 	bl	801471a <__cxa_guard_acquire>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <cppLoop+0x4e>
 8007b70:	48a3      	ldr	r0, [pc, #652]	; (8007e00 <cppLoop+0x2c8>)
 8007b72:	f7fb fffc 	bl	8003b6e <_ZN9LineTrace5getKpEv>
 8007b76:	eef0 7a40 	vmov.f32	s15, s0
 8007b7a:	4ba2      	ldr	r3, [pc, #648]	; (8007e04 <cppLoop+0x2cc>)
 8007b7c:	edc3 7a00 	vstr	s15, [r3]
 8007b80:	489e      	ldr	r0, [pc, #632]	; (8007dfc <cppLoop+0x2c4>)
 8007b82:	f00c fdd6 	bl	8014732 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007b86:	4ba0      	ldr	r3, [pc, #640]	; (8007e08 <cppLoop+0x2d0>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f3bf 8f5b 	dmb	ish
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d015      	beq.n	8007bce <cppLoop+0x96>
 8007ba2:	4899      	ldr	r0, [pc, #612]	; (8007e08 <cppLoop+0x2d0>)
 8007ba4:	f00c fdb9 	bl	801471a <__cxa_guard_acquire>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	2300      	moveq	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <cppLoop+0x96>
 8007bb8:	4891      	ldr	r0, [pc, #580]	; (8007e00 <cppLoop+0x2c8>)
 8007bba:	f7fb ffe7 	bl	8003b8c <_ZN9LineTrace5getKiEv>
 8007bbe:	eef0 7a40 	vmov.f32	s15, s0
 8007bc2:	4b92      	ldr	r3, [pc, #584]	; (8007e0c <cppLoop+0x2d4>)
 8007bc4:	edc3 7a00 	vstr	s15, [r3]
 8007bc8:	488f      	ldr	r0, [pc, #572]	; (8007e08 <cppLoop+0x2d0>)
 8007bca:	f00c fdb2 	bl	8014732 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007bce:	4b90      	ldr	r3, [pc, #576]	; (8007e10 <cppLoop+0x2d8>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f3bf 8f5b 	dmb	ish
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d015      	beq.n	8007c16 <cppLoop+0xde>
 8007bea:	4889      	ldr	r0, [pc, #548]	; (8007e10 <cppLoop+0x2d8>)
 8007bec:	f00c fd95 	bl	801471a <__cxa_guard_acquire>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <cppLoop+0xde>
 8007c00:	487f      	ldr	r0, [pc, #508]	; (8007e00 <cppLoop+0x2c8>)
 8007c02:	f7fb ffd2 	bl	8003baa <_ZN9LineTrace5getKdEv>
 8007c06:	eef0 7a40 	vmov.f32	s15, s0
 8007c0a:	4b82      	ldr	r3, [pc, #520]	; (8007e14 <cppLoop+0x2dc>)
 8007c0c:	edc3 7a00 	vstr	s15, [r3]
 8007c10:	487f      	ldr	r0, [pc, #508]	; (8007e10 <cppLoop+0x2d8>)
 8007c12:	f00c fd8e 	bl	8014732 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007c16:	4b80      	ldr	r3, [pc, #512]	; (8007e18 <cppLoop+0x2e0>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f3bf 8f5b 	dmb	ish
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bf0c      	ite	eq
 8007c28:	2301      	moveq	r3, #1
 8007c2a:	2300      	movne	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d015      	beq.n	8007c5e <cppLoop+0x126>
 8007c32:	4879      	ldr	r0, [pc, #484]	; (8007e18 <cppLoop+0x2e0>)
 8007c34:	f00c fd71 	bl	801471a <__cxa_guard_acquire>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <cppLoop+0x126>
 8007c48:	486d      	ldr	r0, [pc, #436]	; (8007e00 <cppLoop+0x2c8>)
 8007c4a:	f7fb ffd6 	bl	8003bfa <_ZN9LineTrace9getKpSlowEv>
 8007c4e:	eef0 7a40 	vmov.f32	s15, s0
 8007c52:	4b72      	ldr	r3, [pc, #456]	; (8007e1c <cppLoop+0x2e4>)
 8007c54:	edc3 7a00 	vstr	s15, [r3]
 8007c58:	486f      	ldr	r0, [pc, #444]	; (8007e18 <cppLoop+0x2e0>)
 8007c5a:	f00c fd6a 	bl	8014732 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007c5e:	4b70      	ldr	r3, [pc, #448]	; (8007e20 <cppLoop+0x2e8>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f3bf 8f5b 	dmb	ish
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d015      	beq.n	8007ca6 <cppLoop+0x16e>
 8007c7a:	4869      	ldr	r0, [pc, #420]	; (8007e20 <cppLoop+0x2e8>)
 8007c7c:	f00c fd4d 	bl	801471a <__cxa_guard_acquire>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bf14      	ite	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	2300      	moveq	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <cppLoop+0x16e>
 8007c90:	485b      	ldr	r0, [pc, #364]	; (8007e00 <cppLoop+0x2c8>)
 8007c92:	f7fb ffc1 	bl	8003c18 <_ZN9LineTrace9getKiSlowEv>
 8007c96:	eef0 7a40 	vmov.f32	s15, s0
 8007c9a:	4b62      	ldr	r3, [pc, #392]	; (8007e24 <cppLoop+0x2ec>)
 8007c9c:	edc3 7a00 	vstr	s15, [r3]
 8007ca0:	485f      	ldr	r0, [pc, #380]	; (8007e20 <cppLoop+0x2e8>)
 8007ca2:	f00c fd46 	bl	8014732 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007ca6:	4b60      	ldr	r3, [pc, #384]	; (8007e28 <cppLoop+0x2f0>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f3bf 8f5b 	dmb	ish
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d015      	beq.n	8007cee <cppLoop+0x1b6>
 8007cc2:	4859      	ldr	r0, [pc, #356]	; (8007e28 <cppLoop+0x2f0>)
 8007cc4:	f00c fd29 	bl	801471a <__cxa_guard_acquire>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <cppLoop+0x1b6>
 8007cd8:	4849      	ldr	r0, [pc, #292]	; (8007e00 <cppLoop+0x2c8>)
 8007cda:	f7fb ffac 	bl	8003c36 <_ZN9LineTrace9getKdSlowEv>
 8007cde:	eef0 7a40 	vmov.f32	s15, s0
 8007ce2:	4b52      	ldr	r3, [pc, #328]	; (8007e2c <cppLoop+0x2f4>)
 8007ce4:	edc3 7a00 	vstr	s15, [r3]
 8007ce8:	484f      	ldr	r0, [pc, #316]	; (8007e28 <cppLoop+0x2f0>)
 8007cea:	f00c fd22 	bl	8014732 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007cee:	4b50      	ldr	r3, [pc, #320]	; (8007e30 <cppLoop+0x2f8>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f3bf 8f5b 	dmb	ish
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d015      	beq.n	8007d36 <cppLoop+0x1fe>
 8007d0a:	4849      	ldr	r0, [pc, #292]	; (8007e30 <cppLoop+0x2f8>)
 8007d0c:	f00c fd05 	bl	801471a <__cxa_guard_acquire>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bf14      	ite	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <cppLoop+0x1fe>
 8007d20:	4837      	ldr	r0, [pc, #220]	; (8007e00 <cppLoop+0x2c8>)
 8007d22:	f7fb fff6 	bl	8003d12 <_ZN9LineTrace17getTargetVelocityEv>
 8007d26:	eef0 7a40 	vmov.f32	s15, s0
 8007d2a:	4b42      	ldr	r3, [pc, #264]	; (8007e34 <cppLoop+0x2fc>)
 8007d2c:	edc3 7a00 	vstr	s15, [r3]
 8007d30:	483f      	ldr	r0, [pc, #252]	; (8007e30 <cppLoop+0x2f8>)
 8007d32:	f00c fcfe 	bl	8014732 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007d36:	4b40      	ldr	r3, [pc, #256]	; (8007e38 <cppLoop+0x300>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f3bf 8f5b 	dmb	ish
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d015      	beq.n	8007d7e <cppLoop+0x246>
 8007d52:	4839      	ldr	r0, [pc, #228]	; (8007e38 <cppLoop+0x300>)
 8007d54:	f00c fce1 	bl	801471a <__cxa_guard_acquire>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <cppLoop+0x246>
 8007d68:	4825      	ldr	r0, [pc, #148]	; (8007e00 <cppLoop+0x2c8>)
 8007d6a:	f7fb ffe2 	bl	8003d32 <_ZN9LineTrace14getMaxVelocityEv>
 8007d6e:	eef0 7a40 	vmov.f32	s15, s0
 8007d72:	4b32      	ldr	r3, [pc, #200]	; (8007e3c <cppLoop+0x304>)
 8007d74:	edc3 7a00 	vstr	s15, [r3]
 8007d78:	482f      	ldr	r0, [pc, #188]	; (8007e38 <cppLoop+0x300>)
 8007d7a:	f00c fcda 	bl	8014732 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007d7e:	4b30      	ldr	r3, [pc, #192]	; (8007e40 <cppLoop+0x308>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f3bf 8f5b 	dmb	ish
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	bf0c      	ite	eq
 8007d90:	2301      	moveq	r3, #1
 8007d92:	2300      	movne	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d015      	beq.n	8007dc6 <cppLoop+0x28e>
 8007d9a:	4829      	ldr	r0, [pc, #164]	; (8007e40 <cppLoop+0x308>)
 8007d9c:	f00c fcbd 	bl	801471a <__cxa_guard_acquire>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bf14      	ite	ne
 8007da6:	2301      	movne	r3, #1
 8007da8:	2300      	moveq	r3, #0
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <cppLoop+0x28e>
 8007db0:	4813      	ldr	r0, [pc, #76]	; (8007e00 <cppLoop+0x2c8>)
 8007db2:	f7fb ffce 	bl	8003d52 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007db6:	eef0 7a40 	vmov.f32	s15, s0
 8007dba:	4b22      	ldr	r3, [pc, #136]	; (8007e44 <cppLoop+0x30c>)
 8007dbc:	edc3 7a00 	vstr	s15, [r3]
 8007dc0:	481f      	ldr	r0, [pc, #124]	; (8007e40 <cppLoop+0x308>)
 8007dc2:	f00c fcb6 	bl	8014732 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007dc6:	4b20      	ldr	r3, [pc, #128]	; (8007e48 <cppLoop+0x310>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f3bf 8f5b 	dmb	ish
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bf0c      	ite	eq
 8007dd8:	2301      	moveq	r3, #1
 8007dda:	2300      	movne	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d03f      	beq.n	8007e62 <cppLoop+0x32a>
 8007de2:	4819      	ldr	r0, [pc, #100]	; (8007e48 <cppLoop+0x310>)
 8007de4:	f00c fc99 	bl	801471a <__cxa_guard_acquire>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d034      	beq.n	8007e62 <cppLoop+0x32a>
 8007df8:	e028      	b.n	8007e4c <cppLoop+0x314>
 8007dfa:	bf00      	nop
 8007dfc:	20042248 	.word	0x20042248
 8007e00:	2001db5c 	.word	0x2001db5c
 8007e04:	20042244 	.word	0x20042244
 8007e08:	20042250 	.word	0x20042250
 8007e0c:	2004224c 	.word	0x2004224c
 8007e10:	20042258 	.word	0x20042258
 8007e14:	20042254 	.word	0x20042254
 8007e18:	20042260 	.word	0x20042260
 8007e1c:	2004225c 	.word	0x2004225c
 8007e20:	20042268 	.word	0x20042268
 8007e24:	20042264 	.word	0x20042264
 8007e28:	20042270 	.word	0x20042270
 8007e2c:	2004226c 	.word	0x2004226c
 8007e30:	20042278 	.word	0x20042278
 8007e34:	20042274 	.word	0x20042274
 8007e38:	20042280 	.word	0x20042280
 8007e3c:	2004227c 	.word	0x2004227c
 8007e40:	20042288 	.word	0x20042288
 8007e44:	20042284 	.word	0x20042284
 8007e48:	20042290 	.word	0x20042290
 8007e4c:	48b6      	ldr	r0, [pc, #728]	; (8008128 <cppLoop+0x5f0>)
 8007e4e:	f7fb ff90 	bl	8003d72 <_ZN9LineTrace14getMinVelocityEv>
 8007e52:	eef0 7a40 	vmov.f32	s15, s0
 8007e56:	4bb5      	ldr	r3, [pc, #724]	; (800812c <cppLoop+0x5f4>)
 8007e58:	edc3 7a00 	vstr	s15, [r3]
 8007e5c:	48b4      	ldr	r0, [pc, #720]	; (8008130 <cppLoop+0x5f8>)
 8007e5e:	f00c fc68 	bl	8014732 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007e62:	4bb4      	ldr	r3, [pc, #720]	; (8008134 <cppLoop+0x5fc>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	f3bf 8f5b 	dmb	ish
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d015      	beq.n	8007eaa <cppLoop+0x372>
 8007e7e:	48ad      	ldr	r0, [pc, #692]	; (8008134 <cppLoop+0x5fc>)
 8007e80:	f00c fc4b 	bl	801471a <__cxa_guard_acquire>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bf14      	ite	ne
 8007e8a:	2301      	movne	r3, #1
 8007e8c:	2300      	moveq	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <cppLoop+0x372>
 8007e94:	48a4      	ldr	r0, [pc, #656]	; (8008128 <cppLoop+0x5f0>)
 8007e96:	f7fb ff7c 	bl	8003d92 <_ZN9LineTrace15getMinVelocity2Ev>
 8007e9a:	eef0 7a40 	vmov.f32	s15, s0
 8007e9e:	4ba6      	ldr	r3, [pc, #664]	; (8008138 <cppLoop+0x600>)
 8007ea0:	edc3 7a00 	vstr	s15, [r3]
 8007ea4:	48a3      	ldr	r0, [pc, #652]	; (8008134 <cppLoop+0x5fc>)
 8007ea6:	f00c fc44 	bl	8014732 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007eaa:	4ba4      	ldr	r3, [pc, #656]	; (800813c <cppLoop+0x604>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f3bf 8f5b 	dmb	ish
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d015      	beq.n	8007ef2 <cppLoop+0x3ba>
 8007ec6:	489d      	ldr	r0, [pc, #628]	; (800813c <cppLoop+0x604>)
 8007ec8:	f00c fc27 	bl	801471a <__cxa_guard_acquire>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bf14      	ite	ne
 8007ed2:	2301      	movne	r3, #1
 8007ed4:	2300      	moveq	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <cppLoop+0x3ba>
 8007edc:	4892      	ldr	r0, [pc, #584]	; (8008128 <cppLoop+0x5f0>)
 8007ede:	f7fb ff9c 	bl	8003e1a <_ZN9LineTrace9getMaxAccEv>
 8007ee2:	eef0 7a40 	vmov.f32	s15, s0
 8007ee6:	4b96      	ldr	r3, [pc, #600]	; (8008140 <cppLoop+0x608>)
 8007ee8:	edc3 7a00 	vstr	s15, [r3]
 8007eec:	4893      	ldr	r0, [pc, #588]	; (800813c <cppLoop+0x604>)
 8007eee:	f00c fc20 	bl	8014732 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007ef2:	4b94      	ldr	r3, [pc, #592]	; (8008144 <cppLoop+0x60c>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f3bf 8f5b 	dmb	ish
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d015      	beq.n	8007f3a <cppLoop+0x402>
 8007f0e:	488d      	ldr	r0, [pc, #564]	; (8008144 <cppLoop+0x60c>)
 8007f10:	f00c fc03 	bl	801471a <__cxa_guard_acquire>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bf14      	ite	ne
 8007f1a:	2301      	movne	r3, #1
 8007f1c:	2300      	moveq	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <cppLoop+0x402>
 8007f24:	4880      	ldr	r0, [pc, #512]	; (8008128 <cppLoop+0x5f0>)
 8007f26:	f7fb ffae 	bl	8003e86 <_ZN9LineTrace9getMaxDecEv>
 8007f2a:	eef0 7a40 	vmov.f32	s15, s0
 8007f2e:	4b86      	ldr	r3, [pc, #536]	; (8008148 <cppLoop+0x610>)
 8007f30:	edc3 7a00 	vstr	s15, [r3]
 8007f34:	4883      	ldr	r0, [pc, #524]	; (8008144 <cppLoop+0x60c>)
 8007f36:	f00c fbfc 	bl	8014732 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007f3a:	4b84      	ldr	r3, [pc, #528]	; (800814c <cppLoop+0x614>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	f3bf 8f5b 	dmb	ish
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2301      	moveq	r3, #1
 8007f4e:	2300      	movne	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d015      	beq.n	8007f82 <cppLoop+0x44a>
 8007f56:	487d      	ldr	r0, [pc, #500]	; (800814c <cppLoop+0x614>)
 8007f58:	f00c fbdf 	bl	801471a <__cxa_guard_acquire>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bf14      	ite	ne
 8007f62:	2301      	movne	r3, #1
 8007f64:	2300      	moveq	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00a      	beq.n	8007f82 <cppLoop+0x44a>
 8007f6c:	486e      	ldr	r0, [pc, #440]	; (8008128 <cppLoop+0x5f0>)
 8007f6e:	f7fb ff78 	bl	8003e62 <_ZN9LineTrace10getMaxAcc2Ev>
 8007f72:	eef0 7a40 	vmov.f32	s15, s0
 8007f76:	4b76      	ldr	r3, [pc, #472]	; (8008150 <cppLoop+0x618>)
 8007f78:	edc3 7a00 	vstr	s15, [r3]
 8007f7c:	4873      	ldr	r0, [pc, #460]	; (800814c <cppLoop+0x614>)
 8007f7e:	f00c fbd8 	bl	8014732 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007f82:	4b74      	ldr	r3, [pc, #464]	; (8008154 <cppLoop+0x61c>)
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	f3bf 8f5b 	dmb	ish
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf0c      	ite	eq
 8007f94:	2301      	moveq	r3, #1
 8007f96:	2300      	movne	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d015      	beq.n	8007fca <cppLoop+0x492>
 8007f9e:	486d      	ldr	r0, [pc, #436]	; (8008154 <cppLoop+0x61c>)
 8007fa0:	f00c fbbb 	bl	801471a <__cxa_guard_acquire>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	bf14      	ite	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	2300      	moveq	r3, #0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <cppLoop+0x492>
 8007fb4:	485c      	ldr	r0, [pc, #368]	; (8008128 <cppLoop+0x5f0>)
 8007fb6:	f7fb ff42 	bl	8003e3e <_ZN9LineTrace10getMaxDec2Ev>
 8007fba:	eef0 7a40 	vmov.f32	s15, s0
 8007fbe:	4b66      	ldr	r3, [pc, #408]	; (8008158 <cppLoop+0x620>)
 8007fc0:	edc3 7a00 	vstr	s15, [r3]
 8007fc4:	4863      	ldr	r0, [pc, #396]	; (8008154 <cppLoop+0x61c>)
 8007fc6:	f00c fbb4 	bl	8014732 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007fca:	4864      	ldr	r0, [pc, #400]	; (800815c <cppLoop+0x624>)
 8007fcc:	f7fd f9ba 	bl	8005344 <_ZN12RotarySwitch8getValueEv>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b0f      	cmp	r3, #15
 8007fd4:	f201 8572 	bhi.w	8009abc <cppLoop+0x1f84>
 8007fd8:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <cppLoop+0x4a8>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008021 	.word	0x08008021
 8007fe4:	080083a5 	.word	0x080083a5
 8007fe8:	080084c1 	.word	0x080084c1
 8007fec:	08008613 	.word	0x08008613
 8007ff0:	0800870b 	.word	0x0800870b
 8007ff4:	080089a1 	.word	0x080089a1
 8007ff8:	08008ad9 	.word	0x08008ad9
 8007ffc:	08008d5d 	.word	0x08008d5d
 8008000:	08008fa7 	.word	0x08008fa7
 8008004:	08009237 	.word	0x08009237
 8008008:	080092f3 	.word	0x080092f3
 800800c:	080093e9 	.word	0x080093e9
 8008010:	0800946f 	.word	0x0800946f
 8008014:	08009535 	.word	0x08009535
 8008018:	08009619 	.word	0x08009619
 800801c:	08009751 	.word	0x08009751
	case 0:
		led.fullColor('W');
 8008020:	2157      	movs	r1, #87	; 0x57
 8008022:	484f      	ldr	r0, [pc, #316]	; (8008160 <cppLoop+0x628>)
 8008024:	f7fa f8da 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008028:	f7f9 f83a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800802c:	2100      	movs	r1, #0
 800802e:	2000      	movs	r0, #0
 8008030:	f7f9 f846 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 8008034:	483c      	ldr	r0, [pc, #240]	; (8008128 <cppLoop+0x5f0>)
 8008036:	f7fb fde0 	bl	8003bfa <_ZN9LineTrace9getKpSlowEv>
 800803a:	eeb0 7a40 	vmov.f32	s14, s0
 800803e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008164 <cppLoop+0x62c>
 8008042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008046:	eeb0 0a67 	vmov.f32	s0, s15
 800804a:	f7fa fcf3 	bl	8002a34 <_ZSt3absf>
 800804e:	ee10 3a10 	vmov	r3, s0
 8008052:	4618      	mov	r0, r3
 8008054:	f7f8 fa90 	bl	8000578 <__aeabi_f2d>
 8008058:	4603      	mov	r3, r0
 800805a:	460c      	mov	r4, r1
 800805c:	461a      	mov	r2, r3
 800805e:	4623      	mov	r3, r4
 8008060:	4841      	ldr	r0, [pc, #260]	; (8008168 <cppLoop+0x630>)
 8008062:	f7f9 f857 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008066:	2101      	movs	r1, #1
 8008068:	2000      	movs	r0, #0
 800806a:	f7f9 f829 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 800806e:	482e      	ldr	r0, [pc, #184]	; (8008128 <cppLoop+0x5f0>)
 8008070:	f7fb fdd2 	bl	8003c18 <_ZN9LineTrace9getKiSlowEv>
 8008074:	eeb0 7a40 	vmov.f32	s14, s0
 8008078:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800816c <cppLoop+0x634>
 800807c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008080:	eeb0 0a67 	vmov.f32	s0, s15
 8008084:	f7fa fcd6 	bl	8002a34 <_ZSt3absf>
 8008088:	ee10 3a10 	vmov	r3, s0
 800808c:	4618      	mov	r0, r3
 800808e:	f7f8 fa73 	bl	8000578 <__aeabi_f2d>
 8008092:	4605      	mov	r5, r0
 8008094:	460e      	mov	r6, r1
 8008096:	4824      	ldr	r0, [pc, #144]	; (8008128 <cppLoop+0x5f0>)
 8008098:	f7fb fdcd 	bl	8003c36 <_ZN9LineTrace9getKdSlowEv>
 800809c:	eeb0 7a40 	vmov.f32	s14, s0
 80080a0:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008170 <cppLoop+0x638>
 80080a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a8:	eeb0 0a67 	vmov.f32	s0, s15
 80080ac:	f7fa fcc2 	bl	8002a34 <_ZSt3absf>
 80080b0:	ee10 3a10 	vmov	r3, s0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7f8 fa5f 	bl	8000578 <__aeabi_f2d>
 80080ba:	4603      	mov	r3, r0
 80080bc:	460c      	mov	r4, r1
 80080be:	e9cd 3400 	strd	r3, r4, [sp]
 80080c2:	462a      	mov	r2, r5
 80080c4:	4633      	mov	r3, r6
 80080c6:	482b      	ldr	r0, [pc, #172]	; (8008174 <cppLoop+0x63c>)
 80080c8:	f7f9 f824 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80080cc:	482a      	ldr	r0, [pc, #168]	; (8008178 <cppLoop+0x640>)
 80080ce:	f7fa f821 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	bf0c      	ite	eq
 80080d8:	2301      	moveq	r3, #1
 80080da:	2300      	movne	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d04e      	beq.n	8008180 <cppLoop+0x648>
			led.LR(-1, 1);
 80080e2:	2201      	movs	r2, #1
 80080e4:	f04f 31ff 	mov.w	r1, #4294967295
 80080e8:	481d      	ldr	r0, [pc, #116]	; (8008160 <cppLoop+0x628>)
 80080ea:	f7fa f933 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080f2:	f001 fe2d 	bl	8009d50 <HAL_Delay>

			selector++;
 80080f6:	4b21      	ldr	r3, [pc, #132]	; (800817c <cppLoop+0x644>)
 80080f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3301      	adds	r3, #1
 8008100:	b29b      	uxth	r3, r3
 8008102:	b21a      	sxth	r2, r3
 8008104:	4b1d      	ldr	r3, [pc, #116]	; (800817c <cppLoop+0x644>)
 8008106:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008108:	4b1c      	ldr	r3, [pc, #112]	; (800817c <cppLoop+0x644>)
 800810a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800810e:	2b02      	cmp	r3, #2
 8008110:	dd02      	ble.n	8008118 <cppLoop+0x5e0>
 8008112:	4b1a      	ldr	r3, [pc, #104]	; (800817c <cppLoop+0x644>)
 8008114:	2200      	movs	r2, #0
 8008116:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008118:	2200      	movs	r2, #0
 800811a:	f04f 31ff 	mov.w	r1, #4294967295
 800811e:	4810      	ldr	r0, [pc, #64]	; (8008160 <cppLoop+0x628>)
 8008120:	f7fa f918 	bl	8002354 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008124:	f001 bccc 	b.w	8009ac0 <cppLoop+0x1f88>
 8008128:	2001db5c 	.word	0x2001db5c
 800812c:	2004228c 	.word	0x2004228c
 8008130:	20042290 	.word	0x20042290
 8008134:	20042298 	.word	0x20042298
 8008138:	20042294 	.word	0x20042294
 800813c:	200422a0 	.word	0x200422a0
 8008140:	2004229c 	.word	0x2004229c
 8008144:	200422a8 	.word	0x200422a8
 8008148:	200422a4 	.word	0x200422a4
 800814c:	200422b0 	.word	0x200422b0
 8008150:	200422ac 	.word	0x200422ac
 8008154:	200422b8 	.word	0x200422b8
 8008158:	200422b4 	.word	0x200422b4
 800815c:	200005c4 	.word	0x200005c4
 8008160:	200005cc 	.word	0x200005cc
 8008164:	447a0000 	.word	0x447a0000
 8008168:	08019e28 	.word	0x08019e28
 800816c:	42c80000 	.word	0x42c80000
 8008170:	461c4000 	.word	0x461c4000
 8008174:	08019e34 	.word	0x08019e34
 8008178:	200005c0 	.word	0x200005c0
 800817c:	2004223a 	.word	0x2004223a
		else if(joy_stick.getValue() == JOY_R){
 8008180:	48bd      	ldr	r0, [pc, #756]	; (8008478 <cppLoop+0x940>)
 8008182:	f7f9 ffc7 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008186:	4603      	mov	r3, r0
 8008188:	2b10      	cmp	r3, #16
 800818a:	bf0c      	ite	eq
 800818c:	2301      	moveq	r3, #1
 800818e:	2300      	movne	r3, #0
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d059      	beq.n	800824a <cppLoop+0x712>
			led.LR(-1, 1);
 8008196:	2201      	movs	r2, #1
 8008198:	f04f 31ff 	mov.w	r1, #4294967295
 800819c:	48b7      	ldr	r0, [pc, #732]	; (800847c <cppLoop+0x944>)
 800819e:	f7fa f8d9 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081a2:	2064      	movs	r0, #100	; 0x64
 80081a4:	f001 fdd4 	bl	8009d50 <HAL_Delay>
			if(selector == 0){
 80081a8:	4bb5      	ldr	r3, [pc, #724]	; (8008480 <cppLoop+0x948>)
 80081aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d113      	bne.n	80081da <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80081b2:	4bb4      	ldr	r3, [pc, #720]	; (8008484 <cppLoop+0x94c>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7f8 f9de 	bl	8000578 <__aeabi_f2d>
 80081bc:	a3a8      	add	r3, pc, #672	; (adr r3, 8008460 <cppLoop+0x928>)
 80081be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c2:	f7f8 f87b 	bl	80002bc <__adddf3>
 80081c6:	4603      	mov	r3, r0
 80081c8:	460c      	mov	r4, r1
 80081ca:	4618      	mov	r0, r3
 80081cc:	4621      	mov	r1, r4
 80081ce:	f7f8 fd23 	bl	8000c18 <__aeabi_d2f>
 80081d2:	4602      	mov	r2, r0
 80081d4:	4bab      	ldr	r3, [pc, #684]	; (8008484 <cppLoop+0x94c>)
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	e02b      	b.n	8008232 <cppLoop+0x6fa>
			else if(selector == 1){
 80081da:	4ba9      	ldr	r3, [pc, #676]	; (8008480 <cppLoop+0x948>)
 80081dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d113      	bne.n	800820c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80081e4:	4ba8      	ldr	r3, [pc, #672]	; (8008488 <cppLoop+0x950>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7f8 f9c5 	bl	8000578 <__aeabi_f2d>
 80081ee:	a39e      	add	r3, pc, #632	; (adr r3, 8008468 <cppLoop+0x930>)
 80081f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f4:	f7f8 f862 	bl	80002bc <__adddf3>
 80081f8:	4603      	mov	r3, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	4618      	mov	r0, r3
 80081fe:	4621      	mov	r1, r4
 8008200:	f7f8 fd0a 	bl	8000c18 <__aeabi_d2f>
 8008204:	4602      	mov	r2, r0
 8008206:	4ba0      	ldr	r3, [pc, #640]	; (8008488 <cppLoop+0x950>)
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	e012      	b.n	8008232 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 800820c:	4b9f      	ldr	r3, [pc, #636]	; (800848c <cppLoop+0x954>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4618      	mov	r0, r3
 8008212:	f7f8 f9b1 	bl	8000578 <__aeabi_f2d>
 8008216:	a396      	add	r3, pc, #600	; (adr r3, 8008470 <cppLoop+0x938>)
 8008218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821c:	f7f8 f84e 	bl	80002bc <__adddf3>
 8008220:	4603      	mov	r3, r0
 8008222:	460c      	mov	r4, r1
 8008224:	4618      	mov	r0, r3
 8008226:	4621      	mov	r1, r4
 8008228:	f7f8 fcf6 	bl	8000c18 <__aeabi_d2f>
 800822c:	4602      	mov	r2, r0
 800822e:	4b97      	ldr	r3, [pc, #604]	; (800848c <cppLoop+0x954>)
 8008230:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008232:	2152      	movs	r1, #82	; 0x52
 8008234:	4891      	ldr	r0, [pc, #580]	; (800847c <cppLoop+0x944>)
 8008236:	f7f9 ffd1 	bl	80021dc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800823a:	2200      	movs	r2, #0
 800823c:	f04f 31ff 	mov.w	r1, #4294967295
 8008240:	488e      	ldr	r0, [pc, #568]	; (800847c <cppLoop+0x944>)
 8008242:	f7fa f887 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008246:	f001 bc3b 	b.w	8009ac0 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_L){
 800824a:	488b      	ldr	r0, [pc, #556]	; (8008478 <cppLoop+0x940>)
 800824c:	f7f9 ff62 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008250:	4603      	mov	r3, r0
 8008252:	2b01      	cmp	r3, #1
 8008254:	bf0c      	ite	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	2300      	movne	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d059      	beq.n	8008314 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008260:	2201      	movs	r2, #1
 8008262:	f04f 31ff 	mov.w	r1, #4294967295
 8008266:	4885      	ldr	r0, [pc, #532]	; (800847c <cppLoop+0x944>)
 8008268:	f7fa f874 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800826c:	2064      	movs	r0, #100	; 0x64
 800826e:	f001 fd6f 	bl	8009d50 <HAL_Delay>
			if(selector == 0){
 8008272:	4b83      	ldr	r3, [pc, #524]	; (8008480 <cppLoop+0x948>)
 8008274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d113      	bne.n	80082a4 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 800827c:	4b81      	ldr	r3, [pc, #516]	; (8008484 <cppLoop+0x94c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f7f8 f979 	bl	8000578 <__aeabi_f2d>
 8008286:	a376      	add	r3, pc, #472	; (adr r3, 8008460 <cppLoop+0x928>)
 8008288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800828c:	f7f8 f814 	bl	80002b8 <__aeabi_dsub>
 8008290:	4603      	mov	r3, r0
 8008292:	460c      	mov	r4, r1
 8008294:	4618      	mov	r0, r3
 8008296:	4621      	mov	r1, r4
 8008298:	f7f8 fcbe 	bl	8000c18 <__aeabi_d2f>
 800829c:	4602      	mov	r2, r0
 800829e:	4b79      	ldr	r3, [pc, #484]	; (8008484 <cppLoop+0x94c>)
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e02b      	b.n	80082fc <cppLoop+0x7c4>
			else if(selector == 1){
 80082a4:	4b76      	ldr	r3, [pc, #472]	; (8008480 <cppLoop+0x948>)
 80082a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d113      	bne.n	80082d6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 80082ae:	4b76      	ldr	r3, [pc, #472]	; (8008488 <cppLoop+0x950>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f8 f960 	bl	8000578 <__aeabi_f2d>
 80082b8:	a36b      	add	r3, pc, #428	; (adr r3, 8008468 <cppLoop+0x930>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f7f7 fffb 	bl	80002b8 <__aeabi_dsub>
 80082c2:	4603      	mov	r3, r0
 80082c4:	460c      	mov	r4, r1
 80082c6:	4618      	mov	r0, r3
 80082c8:	4621      	mov	r1, r4
 80082ca:	f7f8 fca5 	bl	8000c18 <__aeabi_d2f>
 80082ce:	4602      	mov	r2, r0
 80082d0:	4b6d      	ldr	r3, [pc, #436]	; (8008488 <cppLoop+0x950>)
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e012      	b.n	80082fc <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80082d6:	4b6d      	ldr	r3, [pc, #436]	; (800848c <cppLoop+0x954>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f8 f94c 	bl	8000578 <__aeabi_f2d>
 80082e0:	a363      	add	r3, pc, #396	; (adr r3, 8008470 <cppLoop+0x938>)
 80082e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e6:	f7f7 ffe7 	bl	80002b8 <__aeabi_dsub>
 80082ea:	4603      	mov	r3, r0
 80082ec:	460c      	mov	r4, r1
 80082ee:	4618      	mov	r0, r3
 80082f0:	4621      	mov	r1, r4
 80082f2:	f7f8 fc91 	bl	8000c18 <__aeabi_d2f>
 80082f6:	4602      	mov	r2, r0
 80082f8:	4b64      	ldr	r3, [pc, #400]	; (800848c <cppLoop+0x954>)
 80082fa:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80082fc:	2152      	movs	r1, #82	; 0x52
 80082fe:	485f      	ldr	r0, [pc, #380]	; (800847c <cppLoop+0x944>)
 8008300:	f7f9 ff6c 	bl	80021dc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	f04f 31ff 	mov.w	r1, #4294967295
 800830a:	485c      	ldr	r0, [pc, #368]	; (800847c <cppLoop+0x944>)
 800830c:	f7fa f822 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008310:	f001 bbd6 	b.w	8009ac0 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_C){
 8008314:	4858      	ldr	r0, [pc, #352]	; (8008478 <cppLoop+0x940>)
 8008316:	f7f9 fefd 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800831a:	4603      	mov	r3, r0
 800831c:	2b02      	cmp	r3, #2
 800831e:	bf0c      	ite	eq
 8008320:	2301      	moveq	r3, #1
 8008322:	2300      	movne	r3, #0
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	f001 83ca 	beq.w	8009ac0 <cppLoop+0x1f88>
			led.LR(-1, 1);
 800832c:	2201      	movs	r2, #1
 800832e:	f04f 31ff 	mov.w	r1, #4294967295
 8008332:	4852      	ldr	r0, [pc, #328]	; (800847c <cppLoop+0x944>)
 8008334:	f7fa f80e 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008338:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800833c:	f001 fd08 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008340:	2300      	movs	r3, #0
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	4b4f      	ldr	r3, [pc, #316]	; (8008484 <cppLoop+0x94c>)
 8008346:	2201      	movs	r2, #1
 8008348:	4951      	ldr	r1, [pc, #324]	; (8008490 <cppLoop+0x958>)
 800834a:	4852      	ldr	r0, [pc, #328]	; (8008494 <cppLoop+0x95c>)
 800834c:	f7f9 fa96 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008350:	2300      	movs	r3, #0
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	4b4c      	ldr	r3, [pc, #304]	; (8008488 <cppLoop+0x950>)
 8008356:	2201      	movs	r2, #1
 8008358:	494f      	ldr	r1, [pc, #316]	; (8008498 <cppLoop+0x960>)
 800835a:	484e      	ldr	r0, [pc, #312]	; (8008494 <cppLoop+0x95c>)
 800835c:	f7f9 fa8e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008360:	2300      	movs	r3, #0
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4b49      	ldr	r3, [pc, #292]	; (800848c <cppLoop+0x954>)
 8008366:	2201      	movs	r2, #1
 8008368:	494c      	ldr	r1, [pc, #304]	; (800849c <cppLoop+0x964>)
 800836a:	484a      	ldr	r0, [pc, #296]	; (8008494 <cppLoop+0x95c>)
 800836c:	f7f9 fa86 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008370:	4b44      	ldr	r3, [pc, #272]	; (8008484 <cppLoop+0x94c>)
 8008372:	edd3 7a00 	vldr	s15, [r3]
 8008376:	4b44      	ldr	r3, [pc, #272]	; (8008488 <cppLoop+0x950>)
 8008378:	ed93 7a00 	vldr	s14, [r3]
 800837c:	4b43      	ldr	r3, [pc, #268]	; (800848c <cppLoop+0x954>)
 800837e:	edd3 6a00 	vldr	s13, [r3]
 8008382:	eeb0 1a66 	vmov.f32	s2, s13
 8008386:	eef0 0a47 	vmov.f32	s1, s14
 800838a:	eeb0 0a67 	vmov.f32	s0, s15
 800838e:	4844      	ldr	r0, [pc, #272]	; (80084a0 <cppLoop+0x968>)
 8008390:	f7fb fc1a 	bl	8003bc8 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008394:	2200      	movs	r2, #0
 8008396:	f04f 31ff 	mov.w	r1, #4294967295
 800839a:	4838      	ldr	r0, [pc, #224]	; (800847c <cppLoop+0x944>)
 800839c:	f7f9 ffda 	bl	8002354 <_ZN3LED2LREaa>
		break;
 80083a0:	f001 bb8e 	b.w	8009ac0 <cppLoop+0x1f88>

	case 1:
		led.fullColor('C');
 80083a4:	2143      	movs	r1, #67	; 0x43
 80083a6:	4835      	ldr	r0, [pc, #212]	; (800847c <cppLoop+0x944>)
 80083a8:	f7f9 ff18 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 80083ac:	f7f8 fe78 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083b0:	2100      	movs	r1, #0
 80083b2:	2000      	movs	r0, #0
 80083b4:	f7f8 fe84 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80083b8:	483a      	ldr	r0, [pc, #232]	; (80084a4 <cppLoop+0x96c>)
 80083ba:	f7f8 feab 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80083be:	2101      	movs	r1, #1
 80083c0:	2000      	movs	r0, #0
 80083c2:	f7f8 fe7d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80083c6:	4b38      	ldr	r3, [pc, #224]	; (80084a8 <cppLoop+0x970>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f8 f8d4 	bl	8000578 <__aeabi_f2d>
 80083d0:	4603      	mov	r3, r0
 80083d2:	460c      	mov	r4, r1
 80083d4:	461a      	mov	r2, r3
 80083d6:	4623      	mov	r3, r4
 80083d8:	4834      	ldr	r0, [pc, #208]	; (80084ac <cppLoop+0x974>)
 80083da:	f7f8 fe9b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80083de:	4826      	ldr	r0, [pc, #152]	; (8008478 <cppLoop+0x940>)
 80083e0:	f7f9 fe98 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	bf0c      	ite	eq
 80083ea:	2301      	moveq	r3, #1
 80083ec:	2300      	movne	r3, #0
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	f001 8367 	beq.w	8009ac4 <cppLoop+0x1f8c>
			HAL_Delay(500);
 80083f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80083fa:	f001 fca9 	bl	8009d50 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80083fe:	4b2a      	ldr	r3, [pc, #168]	; (80084a8 <cppLoop+0x970>)
 8008400:	edd3 7a00 	vldr	s15, [r3]
 8008404:	eeb0 0a67 	vmov.f32	s0, s15
 8008408:	4825      	ldr	r0, [pc, #148]	; (80084a0 <cppLoop+0x968>)
 800840a:	f7fb fc32 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800840e:	f04f 32ff 	mov.w	r2, #4294967295
 8008412:	2101      	movs	r1, #1
 8008414:	4819      	ldr	r0, [pc, #100]	; (800847c <cppLoop+0x944>)
 8008416:	f7f9 ff9d 	bl	8002354 <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800841a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800841e:	f001 fc97 	bl	8009d50 <HAL_Delay>
			logger.start();
 8008422:	4823      	ldr	r0, [pc, #140]	; (80084b0 <cppLoop+0x978>)
 8008424:	f7fc fbcd 	bl	8004bc2 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008428:	2100      	movs	r1, #0
 800842a:	481d      	ldr	r0, [pc, #116]	; (80084a0 <cppLoop+0x968>)
 800842c:	f7fb fe4e 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008430:	481b      	ldr	r0, [pc, #108]	; (80084a0 <cppLoop+0x968>)
 8008432:	f7fb fe89 	bl	8004148 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 8008436:	481e      	ldr	r0, [pc, #120]	; (80084b0 <cppLoop+0x978>)
 8008438:	f7fc fbd3 	bl	8004be2 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <cppLoop+0x97c>)
 800843e:	491e      	ldr	r1, [pc, #120]	; (80084b8 <cppLoop+0x980>)
 8008440:	481b      	ldr	r0, [pc, #108]	; (80084b0 <cppLoop+0x978>)
 8008442:	f7fc fac9 	bl	80049d8 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 8008446:	4a1d      	ldr	r2, [pc, #116]	; (80084bc <cppLoop+0x984>)
 8008448:	491b      	ldr	r1, [pc, #108]	; (80084b8 <cppLoop+0x980>)
 800844a:	4819      	ldr	r0, [pc, #100]	; (80084b0 <cppLoop+0x978>)
 800844c:	f7fc fada 	bl	8004a04 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008450:	f04f 32ff 	mov.w	r2, #4294967295
 8008454:	2100      	movs	r1, #0
 8008456:	4809      	ldr	r0, [pc, #36]	; (800847c <cppLoop+0x944>)
 8008458:	f7f9 ff7c 	bl	8002354 <_ZN3LED2LREaa>
		}

		break;
 800845c:	f001 bb32 	b.w	8009ac4 <cppLoop+0x1f8c>
 8008460:	88e368f1 	.word	0x88e368f1
 8008464:	3ee4f8b5 	.word	0x3ee4f8b5
 8008468:	eb1c432d 	.word	0xeb1c432d
 800846c:	3f1a36e2 	.word	0x3f1a36e2
 8008470:	a0b5ed8d 	.word	0xa0b5ed8d
 8008474:	3eb0c6f7 	.word	0x3eb0c6f7
 8008478:	200005c0 	.word	0x200005c0
 800847c:	200005cc 	.word	0x200005cc
 8008480:	2004223a 	.word	0x2004223a
 8008484:	2004225c 	.word	0x2004225c
 8008488:	20042264 	.word	0x20042264
 800848c:	2004226c 	.word	0x2004226c
 8008490:	08019e44 	.word	0x08019e44
 8008494:	08019e50 	.word	0x08019e50
 8008498:	08019e58 	.word	0x08019e58
 800849c:	08019e64 	.word	0x08019e64
 80084a0:	2001db5c 	.word	0x2001db5c
 80084a4:	08019e70 	.word	0x08019e70
 80084a8:	20042274 	.word	0x20042274
 80084ac:	08019e7c 	.word	0x08019e7c
 80084b0:	200005f0 	.word	0x200005f0
 80084b4:	08019e88 	.word	0x08019e88
 80084b8:	08019e94 	.word	0x08019e94
 80084bc:	08019ea0 	.word	0x08019ea0

	case 2:
		led.fullColor('B');
 80084c0:	2142      	movs	r1, #66	; 0x42
 80084c2:	48c1      	ldr	r0, [pc, #772]	; (80087c8 <cppLoop+0xc90>)
 80084c4:	f7f9 fe8a 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 80084c8:	f7f8 fdea 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084cc:	2100      	movs	r1, #0
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f8 fdf6 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80084d4:	48bd      	ldr	r0, [pc, #756]	; (80087cc <cppLoop+0xc94>)
 80084d6:	f7f8 fe1d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084da:	2101      	movs	r1, #1
 80084dc:	2000      	movs	r0, #0
 80084de:	f7f8 fdef 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80084e2:	4bbb      	ldr	r3, [pc, #748]	; (80087d0 <cppLoop+0xc98>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7f8 f846 	bl	8000578 <__aeabi_f2d>
 80084ec:	4603      	mov	r3, r0
 80084ee:	460c      	mov	r4, r1
 80084f0:	461a      	mov	r2, r3
 80084f2:	4623      	mov	r3, r4
 80084f4:	48b7      	ldr	r0, [pc, #732]	; (80087d4 <cppLoop+0xc9c>)
 80084f6:	f7f8 fe0d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80084fa:	48b7      	ldr	r0, [pc, #732]	; (80087d8 <cppLoop+0xca0>)
 80084fc:	f7f9 fe0a 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008500:	4603      	mov	r3, r0
 8008502:	2b10      	cmp	r3, #16
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d023      	beq.n	8008558 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008510:	2201      	movs	r2, #1
 8008512:	f04f 31ff 	mov.w	r1, #4294967295
 8008516:	48ac      	ldr	r0, [pc, #688]	; (80087c8 <cppLoop+0xc90>)
 8008518:	f7f9 ff1c 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800851c:	2064      	movs	r0, #100	; 0x64
 800851e:	f001 fc17 	bl	8009d50 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008522:	4bab      	ldr	r3, [pc, #684]	; (80087d0 <cppLoop+0xc98>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4618      	mov	r0, r3
 8008528:	f7f8 f826 	bl	8000578 <__aeabi_f2d>
 800852c:	a3a4      	add	r3, pc, #656	; (adr r3, 80087c0 <cppLoop+0xc88>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f7 fec3 	bl	80002bc <__adddf3>
 8008536:	4603      	mov	r3, r0
 8008538:	460c      	mov	r4, r1
 800853a:	4618      	mov	r0, r3
 800853c:	4621      	mov	r1, r4
 800853e:	f7f8 fb6b 	bl	8000c18 <__aeabi_d2f>
 8008542:	4602      	mov	r2, r0
 8008544:	4ba2      	ldr	r3, [pc, #648]	; (80087d0 <cppLoop+0xc98>)
 8008546:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008548:	2200      	movs	r2, #0
 800854a:	f04f 31ff 	mov.w	r1, #4294967295
 800854e:	489e      	ldr	r0, [pc, #632]	; (80087c8 <cppLoop+0xc90>)
 8008550:	f7f9 ff00 	bl	8002354 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008554:	f001 bab8 	b.w	8009ac8 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_L){
 8008558:	489f      	ldr	r0, [pc, #636]	; (80087d8 <cppLoop+0xca0>)
 800855a:	f7f9 fddb 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800855e:	4603      	mov	r3, r0
 8008560:	2b01      	cmp	r3, #1
 8008562:	bf0c      	ite	eq
 8008564:	2301      	moveq	r3, #1
 8008566:	2300      	movne	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d023      	beq.n	80085b6 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800856e:	2201      	movs	r2, #1
 8008570:	f04f 31ff 	mov.w	r1, #4294967295
 8008574:	4894      	ldr	r0, [pc, #592]	; (80087c8 <cppLoop+0xc90>)
 8008576:	f7f9 feed 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800857a:	2064      	movs	r0, #100	; 0x64
 800857c:	f001 fbe8 	bl	8009d50 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008580:	4b93      	ldr	r3, [pc, #588]	; (80087d0 <cppLoop+0xc98>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f7f7 fff7 	bl	8000578 <__aeabi_f2d>
 800858a:	a38d      	add	r3, pc, #564	; (adr r3, 80087c0 <cppLoop+0xc88>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f7 fe92 	bl	80002b8 <__aeabi_dsub>
 8008594:	4603      	mov	r3, r0
 8008596:	460c      	mov	r4, r1
 8008598:	4618      	mov	r0, r3
 800859a:	4621      	mov	r1, r4
 800859c:	f7f8 fb3c 	bl	8000c18 <__aeabi_d2f>
 80085a0:	4602      	mov	r2, r0
 80085a2:	4b8b      	ldr	r3, [pc, #556]	; (80087d0 <cppLoop+0xc98>)
 80085a4:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80085a6:	2200      	movs	r2, #0
 80085a8:	f04f 31ff 	mov.w	r1, #4294967295
 80085ac:	4886      	ldr	r0, [pc, #536]	; (80087c8 <cppLoop+0xc90>)
 80085ae:	f7f9 fed1 	bl	8002354 <_ZN3LED2LREaa>
		break;
 80085b2:	f001 ba89 	b.w	8009ac8 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_C){
 80085b6:	4888      	ldr	r0, [pc, #544]	; (80087d8 <cppLoop+0xca0>)
 80085b8:	f7f9 fdac 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b02      	cmp	r3, #2
 80085c0:	bf0c      	ite	eq
 80085c2:	2301      	moveq	r3, #1
 80085c4:	2300      	movne	r3, #0
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f001 827d 	beq.w	8009ac8 <cppLoop+0x1f90>
			led.LR(-1, 1);
 80085ce:	2201      	movs	r2, #1
 80085d0:	f04f 31ff 	mov.w	r1, #4294967295
 80085d4:	487c      	ldr	r0, [pc, #496]	; (80087c8 <cppLoop+0xc90>)
 80085d6:	f7f9 febd 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80085de:	f001 fbb7 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80085e2:	2300      	movs	r3, #0
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	4b7a      	ldr	r3, [pc, #488]	; (80087d0 <cppLoop+0xc98>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	497c      	ldr	r1, [pc, #496]	; (80087dc <cppLoop+0xca4>)
 80085ec:	487c      	ldr	r0, [pc, #496]	; (80087e0 <cppLoop+0xca8>)
 80085ee:	f7f9 f945 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80085f2:	4b77      	ldr	r3, [pc, #476]	; (80087d0 <cppLoop+0xc98>)
 80085f4:	edd3 7a00 	vldr	s15, [r3]
 80085f8:	eeb0 0a67 	vmov.f32	s0, s15
 80085fc:	4879      	ldr	r0, [pc, #484]	; (80087e4 <cppLoop+0xcac>)
 80085fe:	f7fb fb38 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008602:	2200      	movs	r2, #0
 8008604:	f04f 31ff 	mov.w	r1, #4294967295
 8008608:	486f      	ldr	r0, [pc, #444]	; (80087c8 <cppLoop+0xc90>)
 800860a:	f7f9 fea3 	bl	8002354 <_ZN3LED2LREaa>
		break;
 800860e:	f001 ba5b 	b.w	8009ac8 <cppLoop+0x1f90>

	case 3:
		led.fullColor('Y');
 8008612:	2159      	movs	r1, #89	; 0x59
 8008614:	486c      	ldr	r0, [pc, #432]	; (80087c8 <cppLoop+0xc90>)
 8008616:	f7f9 fde1 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 800861a:	f7f8 fd41 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800861e:	2100      	movs	r1, #0
 8008620:	2000      	movs	r0, #0
 8008622:	f7f8 fd4d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008626:	4b70      	ldr	r3, [pc, #448]	; (80087e8 <cppLoop+0xcb0>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4618      	mov	r0, r3
 800862c:	f7f7 ffa4 	bl	8000578 <__aeabi_f2d>
 8008630:	4603      	mov	r3, r0
 8008632:	460c      	mov	r4, r1
 8008634:	461a      	mov	r2, r3
 8008636:	4623      	mov	r3, r4
 8008638:	486c      	ldr	r0, [pc, #432]	; (80087ec <cppLoop+0xcb4>)
 800863a:	f7f8 fd6b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800863e:	2101      	movs	r1, #1
 8008640:	2000      	movs	r0, #0
 8008642:	f7f8 fd3d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008646:	4b6a      	ldr	r3, [pc, #424]	; (80087f0 <cppLoop+0xcb8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4618      	mov	r0, r3
 800864c:	f7f7 ff94 	bl	8000578 <__aeabi_f2d>
 8008650:	4603      	mov	r3, r0
 8008652:	460c      	mov	r4, r1
 8008654:	461a      	mov	r2, r3
 8008656:	4623      	mov	r3, r4
 8008658:	4866      	ldr	r0, [pc, #408]	; (80087f4 <cppLoop+0xcbc>)
 800865a:	f7f8 fd5b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800865e:	485e      	ldr	r0, [pc, #376]	; (80087d8 <cppLoop+0xca0>)
 8008660:	f7f9 fd58 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008664:	4603      	mov	r3, r0
 8008666:	2b02      	cmp	r3, #2
 8008668:	bf0c      	ite	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2300      	movne	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	f001 822b 	beq.w	8009acc <cppLoop+0x1f94>
			HAL_Delay(500);
 8008676:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800867a:	f001 fb69 	bl	8009d50 <HAL_Delay>

			led.LR(1, -1);
 800867e:	f04f 32ff 	mov.w	r2, #4294967295
 8008682:	2101      	movs	r1, #1
 8008684:	4850      	ldr	r0, [pc, #320]	; (80087c8 <cppLoop+0xc90>)
 8008686:	f7f9 fe65 	bl	8002354 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800868a:	2101      	movs	r1, #1
 800868c:	4855      	ldr	r0, [pc, #340]	; (80087e4 <cppLoop+0xcac>)
 800868e:	f7fb fd1d 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008692:	4b57      	ldr	r3, [pc, #348]	; (80087f0 <cppLoop+0xcb8>)
 8008694:	edd3 7a00 	vldr	s15, [r3]
 8008698:	eeb0 0a67 	vmov.f32	s0, s15
 800869c:	4851      	ldr	r0, [pc, #324]	; (80087e4 <cppLoop+0xcac>)
 800869e:	f7fb fae8 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80086a2:	4b51      	ldr	r3, [pc, #324]	; (80087e8 <cppLoop+0xcb0>)
 80086a4:	edd3 7a00 	vldr	s15, [r3]
 80086a8:	eeb0 0a67 	vmov.f32	s0, s15
 80086ac:	484d      	ldr	r0, [pc, #308]	; (80087e4 <cppLoop+0xcac>)
 80086ae:	f7fb faf0 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80086b2:	4b4f      	ldr	r3, [pc, #316]	; (80087f0 <cppLoop+0xcb8>)
 80086b4:	edd3 7a00 	vldr	s15, [r3]
 80086b8:	eeb0 0a67 	vmov.f32	s0, s15
 80086bc:	4849      	ldr	r0, [pc, #292]	; (80087e4 <cppLoop+0xcac>)
 80086be:	f7fb fb08 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80086c2:	4848      	ldr	r0, [pc, #288]	; (80087e4 <cppLoop+0xcac>)
 80086c4:	f7fb fe2a 	bl	800431c <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(3000);
 80086c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80086cc:	f001 fb40 	bl	8009d50 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80086d0:	eddf 1a49 	vldr	s3, [pc, #292]	; 80087f8 <cppLoop+0xcc0>
 80086d4:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80087f8 <cppLoop+0xcc0>
 80086d8:	eddf 0a47 	vldr	s1, [pc, #284]	; 80087f8 <cppLoop+0xcc0>
 80086dc:	ed9f 0a46 	vldr	s0, [pc, #280]	; 80087f8 <cppLoop+0xcc0>
 80086e0:	4846      	ldr	r0, [pc, #280]	; (80087fc <cppLoop+0xcc4>)
 80086e2:	f7f8 fdb5 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80086e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086ea:	f001 fb31 	bl	8009d50 <HAL_Delay>

			line_trace.running();
 80086ee:	483d      	ldr	r0, [pc, #244]	; (80087e4 <cppLoop+0xcac>)
 80086f0:	f7fb fd2a 	bl	8004148 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80086f4:	4841      	ldr	r0, [pc, #260]	; (80087fc <cppLoop+0xcc4>)
 80086f6:	f7f8 fe45 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	2100      	movs	r1, #0
 8008700:	4831      	ldr	r0, [pc, #196]	; (80087c8 <cppLoop+0xc90>)
 8008702:	f7f9 fe27 	bl	8002354 <_ZN3LED2LREaa>
		}

		break;
 8008706:	f001 b9e1 	b.w	8009acc <cppLoop+0x1f94>

	case 4:
		led.fullColor('G');
 800870a:	2147      	movs	r1, #71	; 0x47
 800870c:	482e      	ldr	r0, [pc, #184]	; (80087c8 <cppLoop+0xc90>)
 800870e:	f7f9 fd65 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008712:	f7f8 fcc5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008716:	2100      	movs	r1, #0
 8008718:	2000      	movs	r0, #0
 800871a:	f7f8 fcd1 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800871e:	4831      	ldr	r0, [pc, #196]	; (80087e4 <cppLoop+0xcac>)
 8008720:	f7fb fb07 	bl	8003d32 <_ZN9LineTrace14getMaxVelocityEv>
 8008724:	ee10 3a10 	vmov	r3, s0
 8008728:	4618      	mov	r0, r3
 800872a:	f7f7 ff25 	bl	8000578 <__aeabi_f2d>
 800872e:	4603      	mov	r3, r0
 8008730:	460c      	mov	r4, r1
 8008732:	461a      	mov	r2, r3
 8008734:	4623      	mov	r3, r4
 8008736:	482d      	ldr	r0, [pc, #180]	; (80087ec <cppLoop+0xcb4>)
 8008738:	f7f8 fcec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800873c:	2101      	movs	r1, #1
 800873e:	2000      	movs	r0, #0
 8008740:	f7f8 fcbe 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008744:	4827      	ldr	r0, [pc, #156]	; (80087e4 <cppLoop+0xcac>)
 8008746:	f7fb fb14 	bl	8003d72 <_ZN9LineTrace14getMinVelocityEv>
 800874a:	ee10 3a10 	vmov	r3, s0
 800874e:	4618      	mov	r0, r3
 8008750:	f7f7 ff12 	bl	8000578 <__aeabi_f2d>
 8008754:	4603      	mov	r3, r0
 8008756:	460c      	mov	r4, r1
 8008758:	461a      	mov	r2, r3
 800875a:	4623      	mov	r3, r4
 800875c:	481d      	ldr	r0, [pc, #116]	; (80087d4 <cppLoop+0xc9c>)
 800875e:	f7f8 fcd9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008762:	481d      	ldr	r0, [pc, #116]	; (80087d8 <cppLoop+0xca0>)
 8008764:	f7f9 fcd6 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008768:	4603      	mov	r3, r0
 800876a:	2b08      	cmp	r3, #8
 800876c:	bf0c      	ite	eq
 800876e:	2301      	moveq	r3, #1
 8008770:	2300      	movne	r3, #0
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b00      	cmp	r3, #0
 8008776:	d045      	beq.n	8008804 <cppLoop+0xccc>
			led.LR(-1, 1);
 8008778:	2201      	movs	r2, #1
 800877a:	f04f 31ff 	mov.w	r1, #4294967295
 800877e:	4812      	ldr	r0, [pc, #72]	; (80087c8 <cppLoop+0xc90>)
 8008780:	f7f9 fde8 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008784:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008788:	f001 fae2 	bl	8009d50 <HAL_Delay>

			selector_vel++;
 800878c:	4b1c      	ldr	r3, [pc, #112]	; (8008800 <cppLoop+0xcc8>)
 800878e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008792:	b29b      	uxth	r3, r3
 8008794:	3301      	adds	r3, #1
 8008796:	b29b      	uxth	r3, r3
 8008798:	b21a      	sxth	r2, r3
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <cppLoop+0xcc8>)
 800879c:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800879e:	4b18      	ldr	r3, [pc, #96]	; (8008800 <cppLoop+0xcc8>)
 80087a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	dd02      	ble.n	80087ae <cppLoop+0xc76>
 80087a8:	4b15      	ldr	r3, [pc, #84]	; (8008800 <cppLoop+0xcc8>)
 80087aa:	2200      	movs	r2, #0
 80087ac:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80087ae:	2200      	movs	r2, #0
 80087b0:	f04f 31ff 	mov.w	r1, #4294967295
 80087b4:	4804      	ldr	r0, [pc, #16]	; (80087c8 <cppLoop+0xc90>)
 80087b6:	f7f9 fdcd 	bl	8002354 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80087ba:	f001 b989 	b.w	8009ad0 <cppLoop+0x1f98>
 80087be:	bf00      	nop
 80087c0:	9999999a 	.word	0x9999999a
 80087c4:	3fb99999 	.word	0x3fb99999
 80087c8:	200005cc 	.word	0x200005cc
 80087cc:	08019e70 	.word	0x08019e70
 80087d0:	20042274 	.word	0x20042274
 80087d4:	08019eac 	.word	0x08019eac
 80087d8:	200005c0 	.word	0x200005c0
 80087dc:	08019eb8 	.word	0x08019eb8
 80087e0:	08019e50 	.word	0x08019e50
 80087e4:	2001db5c 	.word	0x2001db5c
 80087e8:	2004227c 	.word	0x2004227c
 80087ec:	08019ec4 	.word	0x08019ec4
 80087f0:	2004228c 	.word	0x2004228c
 80087f4:	08019e7c 	.word	0x08019e7c
 80087f8:	3e99999a 	.word	0x3e99999a
 80087fc:	2001db58 	.word	0x2001db58
 8008800:	20042240 	.word	0x20042240
		else if(joy_stick.getValue() == JOY_R){
 8008804:	48a4      	ldr	r0, [pc, #656]	; (8008a98 <cppLoop+0xf60>)
 8008806:	f7f9 fc85 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800880a:	4603      	mov	r3, r0
 800880c:	2b10      	cmp	r3, #16
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d03c      	beq.n	8008894 <cppLoop+0xd5c>
			led.LR(-1, 1);
 800881a:	2201      	movs	r2, #1
 800881c:	f04f 31ff 	mov.w	r1, #4294967295
 8008820:	489e      	ldr	r0, [pc, #632]	; (8008a9c <cppLoop+0xf64>)
 8008822:	f7f9 fd97 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008826:	2064      	movs	r0, #100	; 0x64
 8008828:	f001 fa92 	bl	8009d50 <HAL_Delay>
			if(selector_vel == 0)
 800882c:	4b9c      	ldr	r3, [pc, #624]	; (8008aa0 <cppLoop+0xf68>)
 800882e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d113      	bne.n	800885e <cppLoop+0xd26>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008836:	4b9b      	ldr	r3, [pc, #620]	; (8008aa4 <cppLoop+0xf6c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fe9c 	bl	8000578 <__aeabi_f2d>
 8008840:	a393      	add	r3, pc, #588	; (adr r3, 8008a90 <cppLoop+0xf58>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fd39 	bl	80002bc <__adddf3>
 800884a:	4603      	mov	r3, r0
 800884c:	460c      	mov	r4, r1
 800884e:	4618      	mov	r0, r3
 8008850:	4621      	mov	r1, r4
 8008852:	f7f8 f9e1 	bl	8000c18 <__aeabi_d2f>
 8008856:	4602      	mov	r2, r0
 8008858:	4b92      	ldr	r3, [pc, #584]	; (8008aa4 <cppLoop+0xf6c>)
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e012      	b.n	8008884 <cppLoop+0xd4c>
				adj_min_velocity = adj_min_velocity + 0.1;
 800885e:	4b92      	ldr	r3, [pc, #584]	; (8008aa8 <cppLoop+0xf70>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f7f7 fe88 	bl	8000578 <__aeabi_f2d>
 8008868:	a389      	add	r3, pc, #548	; (adr r3, 8008a90 <cppLoop+0xf58>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fd25 	bl	80002bc <__adddf3>
 8008872:	4603      	mov	r3, r0
 8008874:	460c      	mov	r4, r1
 8008876:	4618      	mov	r0, r3
 8008878:	4621      	mov	r1, r4
 800887a:	f7f8 f9cd 	bl	8000c18 <__aeabi_d2f>
 800887e:	4602      	mov	r2, r0
 8008880:	4b89      	ldr	r3, [pc, #548]	; (8008aa8 <cppLoop+0xf70>)
 8008882:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008884:	2200      	movs	r2, #0
 8008886:	f04f 31ff 	mov.w	r1, #4294967295
 800888a:	4884      	ldr	r0, [pc, #528]	; (8008a9c <cppLoop+0xf64>)
 800888c:	f7f9 fd62 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008890:	f001 b91e 	b.w	8009ad0 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_L){
 8008894:	4880      	ldr	r0, [pc, #512]	; (8008a98 <cppLoop+0xf60>)
 8008896:	f7f9 fc3d 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800889a:	4603      	mov	r3, r0
 800889c:	2b01      	cmp	r3, #1
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d03c      	beq.n	8008924 <cppLoop+0xdec>
			led.LR(-1, 1);
 80088aa:	2201      	movs	r2, #1
 80088ac:	f04f 31ff 	mov.w	r1, #4294967295
 80088b0:	487a      	ldr	r0, [pc, #488]	; (8008a9c <cppLoop+0xf64>)
 80088b2:	f7f9 fd4f 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80088b6:	2064      	movs	r0, #100	; 0x64
 80088b8:	f001 fa4a 	bl	8009d50 <HAL_Delay>
			if(selector_vel == 0)
 80088bc:	4b78      	ldr	r3, [pc, #480]	; (8008aa0 <cppLoop+0xf68>)
 80088be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d113      	bne.n	80088ee <cppLoop+0xdb6>
				adj_max_velocity = adj_max_velocity - 0.1;
 80088c6:	4b77      	ldr	r3, [pc, #476]	; (8008aa4 <cppLoop+0xf6c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7f7 fe54 	bl	8000578 <__aeabi_f2d>
 80088d0:	a36f      	add	r3, pc, #444	; (adr r3, 8008a90 <cppLoop+0xf58>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	f7f7 fcef 	bl	80002b8 <__aeabi_dsub>
 80088da:	4603      	mov	r3, r0
 80088dc:	460c      	mov	r4, r1
 80088de:	4618      	mov	r0, r3
 80088e0:	4621      	mov	r1, r4
 80088e2:	f7f8 f999 	bl	8000c18 <__aeabi_d2f>
 80088e6:	4602      	mov	r2, r0
 80088e8:	4b6e      	ldr	r3, [pc, #440]	; (8008aa4 <cppLoop+0xf6c>)
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	e012      	b.n	8008914 <cppLoop+0xddc>
				adj_min_velocity = adj_min_velocity - 0.1;
 80088ee:	4b6e      	ldr	r3, [pc, #440]	; (8008aa8 <cppLoop+0xf70>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7f7 fe40 	bl	8000578 <__aeabi_f2d>
 80088f8:	a365      	add	r3, pc, #404	; (adr r3, 8008a90 <cppLoop+0xf58>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fcdb 	bl	80002b8 <__aeabi_dsub>
 8008902:	4603      	mov	r3, r0
 8008904:	460c      	mov	r4, r1
 8008906:	4618      	mov	r0, r3
 8008908:	4621      	mov	r1, r4
 800890a:	f7f8 f985 	bl	8000c18 <__aeabi_d2f>
 800890e:	4602      	mov	r2, r0
 8008910:	4b65      	ldr	r3, [pc, #404]	; (8008aa8 <cppLoop+0xf70>)
 8008912:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008914:	2200      	movs	r2, #0
 8008916:	f04f 31ff 	mov.w	r1, #4294967295
 800891a:	4860      	ldr	r0, [pc, #384]	; (8008a9c <cppLoop+0xf64>)
 800891c:	f7f9 fd1a 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008920:	f001 b8d6 	b.w	8009ad0 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_C){
 8008924:	485c      	ldr	r0, [pc, #368]	; (8008a98 <cppLoop+0xf60>)
 8008926:	f7f9 fbf5 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800892a:	4603      	mov	r3, r0
 800892c:	2b02      	cmp	r3, #2
 800892e:	bf0c      	ite	eq
 8008930:	2301      	moveq	r3, #1
 8008932:	2300      	movne	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	f001 80ca 	beq.w	8009ad0 <cppLoop+0x1f98>
			led.LR(-1, 1);
 800893c:	2201      	movs	r2, #1
 800893e:	f04f 31ff 	mov.w	r1, #4294967295
 8008942:	4856      	ldr	r0, [pc, #344]	; (8008a9c <cppLoop+0xf64>)
 8008944:	f7f9 fd06 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008948:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800894c:	f001 fa00 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008950:	2300      	movs	r3, #0
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	4b53      	ldr	r3, [pc, #332]	; (8008aa4 <cppLoop+0xf6c>)
 8008956:	2201      	movs	r2, #1
 8008958:	4954      	ldr	r1, [pc, #336]	; (8008aac <cppLoop+0xf74>)
 800895a:	4855      	ldr	r0, [pc, #340]	; (8008ab0 <cppLoop+0xf78>)
 800895c:	f7f8 ff8e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008960:	2300      	movs	r3, #0
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4b50      	ldr	r3, [pc, #320]	; (8008aa8 <cppLoop+0xf70>)
 8008966:	2201      	movs	r2, #1
 8008968:	4952      	ldr	r1, [pc, #328]	; (8008ab4 <cppLoop+0xf7c>)
 800896a:	4851      	ldr	r0, [pc, #324]	; (8008ab0 <cppLoop+0xf78>)
 800896c:	f7f8 ff86 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008970:	4b4c      	ldr	r3, [pc, #304]	; (8008aa4 <cppLoop+0xf6c>)
 8008972:	edd3 7a00 	vldr	s15, [r3]
 8008976:	eeb0 0a67 	vmov.f32	s0, s15
 800897a:	484f      	ldr	r0, [pc, #316]	; (8008ab8 <cppLoop+0xf80>)
 800897c:	f7fb f989 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008980:	4b49      	ldr	r3, [pc, #292]	; (8008aa8 <cppLoop+0xf70>)
 8008982:	edd3 7a00 	vldr	s15, [r3]
 8008986:	eeb0 0a67 	vmov.f32	s0, s15
 800898a:	484b      	ldr	r0, [pc, #300]	; (8008ab8 <cppLoop+0xf80>)
 800898c:	f7fb f9a1 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008990:	2200      	movs	r2, #0
 8008992:	f04f 31ff 	mov.w	r1, #4294967295
 8008996:	4841      	ldr	r0, [pc, #260]	; (8008a9c <cppLoop+0xf64>)
 8008998:	f7f9 fcdc 	bl	8002354 <_ZN3LED2LREaa>
		break;
 800899c:	f001 b898 	b.w	8009ad0 <cppLoop+0x1f98>

	case 5:
		led.fullColor('M');
 80089a0:	214d      	movs	r1, #77	; 0x4d
 80089a2:	483e      	ldr	r0, [pc, #248]	; (8008a9c <cppLoop+0xf64>)
 80089a4:	f7f9 fc1a 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 80089a8:	f7f8 fb7a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80089ac:	2100      	movs	r1, #0
 80089ae:	2000      	movs	r0, #0
 80089b0:	f7f8 fb86 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80089b4:	4b41      	ldr	r3, [pc, #260]	; (8008abc <cppLoop+0xf84>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7f7 fddd 	bl	8000578 <__aeabi_f2d>
 80089be:	4603      	mov	r3, r0
 80089c0:	460c      	mov	r4, r1
 80089c2:	461a      	mov	r2, r3
 80089c4:	4623      	mov	r3, r4
 80089c6:	483e      	ldr	r0, [pc, #248]	; (8008ac0 <cppLoop+0xf88>)
 80089c8:	f7f8 fba4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80089cc:	2101      	movs	r1, #1
 80089ce:	2000      	movs	r0, #0
 80089d0:	f7f8 fb76 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80089d4:	4b3b      	ldr	r3, [pc, #236]	; (8008ac4 <cppLoop+0xf8c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7f7 fdcd 	bl	8000578 <__aeabi_f2d>
 80089de:	4603      	mov	r3, r0
 80089e0:	460c      	mov	r4, r1
 80089e2:	461a      	mov	r2, r3
 80089e4:	4623      	mov	r3, r4
 80089e6:	4838      	ldr	r0, [pc, #224]	; (8008ac8 <cppLoop+0xf90>)
 80089e8:	f7f8 fb94 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80089ec:	482a      	ldr	r0, [pc, #168]	; (8008a98 <cppLoop+0xf60>)
 80089ee:	f7f9 fb91 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b02      	cmp	r3, #2
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f001 8068 	beq.w	8009ad4 <cppLoop+0x1f9c>
			HAL_Delay(500);
 8008a04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a08:	f001 f9a2 	bl	8009d50 <HAL_Delay>

			led.LR(1, -1);
 8008a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a10:	2101      	movs	r1, #1
 8008a12:	4822      	ldr	r0, [pc, #136]	; (8008a9c <cppLoop+0xf64>)
 8008a14:	f7f9 fc9e 	bl	8002354 <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008a18:	4b2c      	ldr	r3, [pc, #176]	; (8008acc <cppLoop+0xf94>)
 8008a1a:	edd3 7a00 	vldr	s15, [r3]
 8008a1e:	4b2c      	ldr	r3, [pc, #176]	; (8008ad0 <cppLoop+0xf98>)
 8008a20:	ed93 7a00 	vldr	s14, [r3]
 8008a24:	4b2b      	ldr	r3, [pc, #172]	; (8008ad4 <cppLoop+0xf9c>)
 8008a26:	edd3 6a00 	vldr	s13, [r3]
 8008a2a:	eeb0 1a66 	vmov.f32	s2, s13
 8008a2e:	eef0 0a47 	vmov.f32	s1, s14
 8008a32:	eeb0 0a67 	vmov.f32	s0, s15
 8008a36:	4820      	ldr	r0, [pc, #128]	; (8008ab8 <cppLoop+0xf80>)
 8008a38:	f7fb f880 	bl	8003b3c <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008a3c:	2102      	movs	r1, #2
 8008a3e:	481e      	ldr	r0, [pc, #120]	; (8008ab8 <cppLoop+0xf80>)
 8008a40:	f7fb fb44 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008a44:	4b1f      	ldr	r3, [pc, #124]	; (8008ac4 <cppLoop+0xf8c>)
 8008a46:	edd3 7a00 	vldr	s15, [r3]
 8008a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a4e:	481a      	ldr	r0, [pc, #104]	; (8008ab8 <cppLoop+0xf80>)
 8008a50:	f7fb f90f 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008a54:	4b19      	ldr	r3, [pc, #100]	; (8008abc <cppLoop+0xf84>)
 8008a56:	edd3 7a00 	vldr	s15, [r3]
 8008a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a5e:	4816      	ldr	r0, [pc, #88]	; (8008ab8 <cppLoop+0xf80>)
 8008a60:	f7fb f927 	bl	8003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008a64:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <cppLoop+0xf8c>)
 8008a66:	edd3 7a00 	vldr	s15, [r3]
 8008a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6e:	4812      	ldr	r0, [pc, #72]	; (8008ab8 <cppLoop+0xf80>)
 8008a70:	f7fb f93f 	bl	8003cf2 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008a74:	4810      	ldr	r0, [pc, #64]	; (8008ab8 <cppLoop+0xf80>)
 8008a76:	f7fb fc51 	bl	800431c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008a7a:	480f      	ldr	r0, [pc, #60]	; (8008ab8 <cppLoop+0xf80>)
 8008a7c:	f7fb fb64 	bl	8004148 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008a80:	f04f 32ff 	mov.w	r2, #4294967295
 8008a84:	2100      	movs	r1, #0
 8008a86:	4805      	ldr	r0, [pc, #20]	; (8008a9c <cppLoop+0xf64>)
 8008a88:	f7f9 fc64 	bl	8002354 <_ZN3LED2LREaa>
		}

		break;
 8008a8c:	f001 b822 	b.w	8009ad4 <cppLoop+0x1f9c>
 8008a90:	9999999a 	.word	0x9999999a
 8008a94:	3fb99999 	.word	0x3fb99999
 8008a98:	200005c0 	.word	0x200005c0
 8008a9c:	200005cc 	.word	0x200005cc
 8008aa0:	20042240 	.word	0x20042240
 8008aa4:	2004227c 	.word	0x2004227c
 8008aa8:	2004228c 	.word	0x2004228c
 8008aac:	08019ed0 	.word	0x08019ed0
 8008ab0:	08019e50 	.word	0x08019e50
 8008ab4:	08019edc 	.word	0x08019edc
 8008ab8:	2001db5c 	.word	0x2001db5c
 8008abc:	20042284 	.word	0x20042284
 8008ac0:	08019ee8 	.word	0x08019ee8
 8008ac4:	20042294 	.word	0x20042294
 8008ac8:	08019e7c 	.word	0x08019e7c
 8008acc:	20042244 	.word	0x20042244
 8008ad0:	2004224c 	.word	0x2004224c
 8008ad4:	20042254 	.word	0x20042254

	case 6:
		led.fullColor('R');
 8008ad8:	2152      	movs	r1, #82	; 0x52
 8008ada:	4895      	ldr	r0, [pc, #596]	; (8008d30 <cppLoop+0x11f8>)
 8008adc:	f7f9 fb7e 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ae0:	f7f8 fade 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f7f8 faea 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008aec:	4891      	ldr	r0, [pc, #580]	; (8008d34 <cppLoop+0x11fc>)
 8008aee:	f7fb f930 	bl	8003d52 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008af2:	ee10 3a10 	vmov	r3, s0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f7 fd3e 	bl	8000578 <__aeabi_f2d>
 8008afc:	4603      	mov	r3, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	461a      	mov	r2, r3
 8008b02:	4623      	mov	r3, r4
 8008b04:	488c      	ldr	r0, [pc, #560]	; (8008d38 <cppLoop+0x1200>)
 8008b06:	f7f8 fb05 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f7f8 fad7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008b12:	4888      	ldr	r0, [pc, #544]	; (8008d34 <cppLoop+0x11fc>)
 8008b14:	f7fb f93d 	bl	8003d92 <_ZN9LineTrace15getMinVelocity2Ev>
 8008b18:	ee10 3a10 	vmov	r3, s0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7f7 fd2b 	bl	8000578 <__aeabi_f2d>
 8008b22:	4603      	mov	r3, r0
 8008b24:	460c      	mov	r4, r1
 8008b26:	461a      	mov	r2, r3
 8008b28:	4623      	mov	r3, r4
 8008b2a:	4884      	ldr	r0, [pc, #528]	; (8008d3c <cppLoop+0x1204>)
 8008b2c:	f7f8 faf2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b30:	4883      	ldr	r0, [pc, #524]	; (8008d40 <cppLoop+0x1208>)
 8008b32:	f7f9 faef 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2301      	moveq	r3, #1
 8008b3e:	2300      	movne	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d022      	beq.n	8008b8c <cppLoop+0x1054>
			led.LR(-1, 1);
 8008b46:	2201      	movs	r2, #1
 8008b48:	f04f 31ff 	mov.w	r1, #4294967295
 8008b4c:	4878      	ldr	r0, [pc, #480]	; (8008d30 <cppLoop+0x11f8>)
 8008b4e:	f7f9 fc01 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b56:	f001 f8fb 	bl	8009d50 <HAL_Delay>

			selector_vel2++;
 8008b5a:	4b7a      	ldr	r3, [pc, #488]	; (8008d44 <cppLoop+0x120c>)
 8008b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	3301      	adds	r3, #1
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	b21a      	sxth	r2, r3
 8008b68:	4b76      	ldr	r3, [pc, #472]	; (8008d44 <cppLoop+0x120c>)
 8008b6a:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008b6c:	4b75      	ldr	r3, [pc, #468]	; (8008d44 <cppLoop+0x120c>)
 8008b6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	dd02      	ble.n	8008b7c <cppLoop+0x1044>
 8008b76:	4b73      	ldr	r3, [pc, #460]	; (8008d44 <cppLoop+0x120c>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b82:	486b      	ldr	r0, [pc, #428]	; (8008d30 <cppLoop+0x11f8>)
 8008b84:	f7f9 fbe6 	bl	8002354 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008b88:	f000 bfa6 	b.w	8009ad8 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_R){
 8008b8c:	486c      	ldr	r0, [pc, #432]	; (8008d40 <cppLoop+0x1208>)
 8008b8e:	f7f9 fac1 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b10      	cmp	r3, #16
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d03c      	beq.n	8008c1c <cppLoop+0x10e4>
			led.LR(-1, 1);
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ba8:	4861      	ldr	r0, [pc, #388]	; (8008d30 <cppLoop+0x11f8>)
 8008baa:	f7f9 fbd3 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bae:	2064      	movs	r0, #100	; 0x64
 8008bb0:	f001 f8ce 	bl	8009d50 <HAL_Delay>
			if(selector_vel2 == 0)
 8008bb4:	4b63      	ldr	r3, [pc, #396]	; (8008d44 <cppLoop+0x120c>)
 8008bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d113      	bne.n	8008be6 <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008bbe:	4b62      	ldr	r3, [pc, #392]	; (8008d48 <cppLoop+0x1210>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f7 fcd8 	bl	8000578 <__aeabi_f2d>
 8008bc8:	a357      	add	r3, pc, #348	; (adr r3, 8008d28 <cppLoop+0x11f0>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb75 	bl	80002bc <__adddf3>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7f8 f81d 	bl	8000c18 <__aeabi_d2f>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b59      	ldr	r3, [pc, #356]	; (8008d48 <cppLoop+0x1210>)
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e012      	b.n	8008c0c <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008be6:	4b59      	ldr	r3, [pc, #356]	; (8008d4c <cppLoop+0x1214>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f7 fcc4 	bl	8000578 <__aeabi_f2d>
 8008bf0:	a34d      	add	r3, pc, #308	; (adr r3, 8008d28 <cppLoop+0x11f0>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb61 	bl	80002bc <__adddf3>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4618      	mov	r0, r3
 8008c00:	4621      	mov	r1, r4
 8008c02:	f7f8 f809 	bl	8000c18 <__aeabi_d2f>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b50      	ldr	r3, [pc, #320]	; (8008d4c <cppLoop+0x1214>)
 8008c0a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c12:	4847      	ldr	r0, [pc, #284]	; (8008d30 <cppLoop+0x11f8>)
 8008c14:	f7f9 fb9e 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008c18:	f000 bf5e 	b.w	8009ad8 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_L){
 8008c1c:	4848      	ldr	r0, [pc, #288]	; (8008d40 <cppLoop+0x1208>)
 8008c1e:	f7f9 fa79 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	bf0c      	ite	eq
 8008c28:	2301      	moveq	r3, #1
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d03c      	beq.n	8008cac <cppLoop+0x1174>
			led.LR(-1, 1);
 8008c32:	2201      	movs	r2, #1
 8008c34:	f04f 31ff 	mov.w	r1, #4294967295
 8008c38:	483d      	ldr	r0, [pc, #244]	; (8008d30 <cppLoop+0x11f8>)
 8008c3a:	f7f9 fb8b 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c3e:	2064      	movs	r0, #100	; 0x64
 8008c40:	f001 f886 	bl	8009d50 <HAL_Delay>
			if(selector_vel2 == 0)
 8008c44:	4b3f      	ldr	r3, [pc, #252]	; (8008d44 <cppLoop+0x120c>)
 8008c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d113      	bne.n	8008c76 <cppLoop+0x113e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008c4e:	4b3e      	ldr	r3, [pc, #248]	; (8008d48 <cppLoop+0x1210>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7f7 fc90 	bl	8000578 <__aeabi_f2d>
 8008c58:	a333      	add	r3, pc, #204	; (adr r3, 8008d28 <cppLoop+0x11f0>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fb2b 	bl	80002b8 <__aeabi_dsub>
 8008c62:	4603      	mov	r3, r0
 8008c64:	460c      	mov	r4, r1
 8008c66:	4618      	mov	r0, r3
 8008c68:	4621      	mov	r1, r4
 8008c6a:	f7f7 ffd5 	bl	8000c18 <__aeabi_d2f>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	4b35      	ldr	r3, [pc, #212]	; (8008d48 <cppLoop+0x1210>)
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	e012      	b.n	8008c9c <cppLoop+0x1164>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008c76:	4b35      	ldr	r3, [pc, #212]	; (8008d4c <cppLoop+0x1214>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7f7 fc7c 	bl	8000578 <__aeabi_f2d>
 8008c80:	a329      	add	r3, pc, #164	; (adr r3, 8008d28 <cppLoop+0x11f0>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fb17 	bl	80002b8 <__aeabi_dsub>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	460c      	mov	r4, r1
 8008c8e:	4618      	mov	r0, r3
 8008c90:	4621      	mov	r1, r4
 8008c92:	f7f7 ffc1 	bl	8000c18 <__aeabi_d2f>
 8008c96:	4602      	mov	r2, r0
 8008c98:	4b2c      	ldr	r3, [pc, #176]	; (8008d4c <cppLoop+0x1214>)
 8008c9a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca2:	4823      	ldr	r0, [pc, #140]	; (8008d30 <cppLoop+0x11f8>)
 8008ca4:	f7f9 fb56 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008ca8:	f000 bf16 	b.w	8009ad8 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_C){
 8008cac:	4824      	ldr	r0, [pc, #144]	; (8008d40 <cppLoop+0x1208>)
 8008cae:	f7f9 fa31 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	bf0c      	ite	eq
 8008cb8:	2301      	moveq	r3, #1
 8008cba:	2300      	movne	r3, #0
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f000 870a 	beq.w	8009ad8 <cppLoop+0x1fa0>
			led.LR(-1, 1);
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8008cca:	4819      	ldr	r0, [pc, #100]	; (8008d30 <cppLoop+0x11f8>)
 8008ccc:	f7f9 fb42 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cd0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008cd4:	f001 f83c 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008cd8:	2300      	movs	r3, #0
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	; (8008d48 <cppLoop+0x1210>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	491b      	ldr	r1, [pc, #108]	; (8008d50 <cppLoop+0x1218>)
 8008ce2:	481c      	ldr	r0, [pc, #112]	; (8008d54 <cppLoop+0x121c>)
 8008ce4:	f7f8 fdca 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008ce8:	2300      	movs	r3, #0
 8008cea:	9300      	str	r3, [sp, #0]
 8008cec:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <cppLoop+0x1214>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4919      	ldr	r1, [pc, #100]	; (8008d58 <cppLoop+0x1220>)
 8008cf2:	4818      	ldr	r0, [pc, #96]	; (8008d54 <cppLoop+0x121c>)
 8008cf4:	f7f8 fdc2 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008cf8:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <cppLoop+0x1210>)
 8008cfa:	edd3 7a00 	vldr	s15, [r3]
 8008cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8008d02:	480c      	ldr	r0, [pc, #48]	; (8008d34 <cppLoop+0x11fc>)
 8008d04:	f7fa ffd5 	bl	8003cb2 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008d08:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <cppLoop+0x1214>)
 8008d0a:	edd3 7a00 	vldr	s15, [r3]
 8008d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d12:	4808      	ldr	r0, [pc, #32]	; (8008d34 <cppLoop+0x11fc>)
 8008d14:	f7fa ffed 	bl	8003cf2 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d1e:	4804      	ldr	r0, [pc, #16]	; (8008d30 <cppLoop+0x11f8>)
 8008d20:	f7f9 fb18 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008d24:	f000 bed8 	b.w	8009ad8 <cppLoop+0x1fa0>
 8008d28:	9999999a 	.word	0x9999999a
 8008d2c:	3fb99999 	.word	0x3fb99999
 8008d30:	200005cc 	.word	0x200005cc
 8008d34:	2001db5c 	.word	0x2001db5c
 8008d38:	08019ee8 	.word	0x08019ee8
 8008d3c:	08019eac 	.word	0x08019eac
 8008d40:	200005c0 	.word	0x200005c0
 8008d44:	20042242 	.word	0x20042242
 8008d48:	20042284 	.word	0x20042284
 8008d4c:	20042294 	.word	0x20042294
 8008d50:	08019ef4 	.word	0x08019ef4
 8008d54:	08019e50 	.word	0x08019e50
 8008d58:	08019f00 	.word	0x08019f00

	case 7:
		led.fullColor('W');
 8008d5c:	2157      	movs	r1, #87	; 0x57
 8008d5e:	48c2      	ldr	r0, [pc, #776]	; (8009068 <cppLoop+0x1530>)
 8008d60:	f7f9 fa3c 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d64:	f7f8 f99c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d68:	2100      	movs	r1, #0
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	f7f8 f9a8 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008d70:	48be      	ldr	r0, [pc, #760]	; (800906c <cppLoop+0x1534>)
 8008d72:	f7fb f852 	bl	8003e1a <_ZN9LineTrace9getMaxAccEv>
 8008d76:	ee10 3a10 	vmov	r3, s0
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f7f7 fbfc 	bl	8000578 <__aeabi_f2d>
 8008d80:	4603      	mov	r3, r0
 8008d82:	460c      	mov	r4, r1
 8008d84:	461a      	mov	r2, r3
 8008d86:	4623      	mov	r3, r4
 8008d88:	48b9      	ldr	r0, [pc, #740]	; (8009070 <cppLoop+0x1538>)
 8008d8a:	f7f8 f9c3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d8e:	2101      	movs	r1, #1
 8008d90:	2000      	movs	r0, #0
 8008d92:	f7f8 f995 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008d96:	48b5      	ldr	r0, [pc, #724]	; (800906c <cppLoop+0x1534>)
 8008d98:	f7fb f875 	bl	8003e86 <_ZN9LineTrace9getMaxDecEv>
 8008d9c:	ee10 3a10 	vmov	r3, s0
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7f7 fbe9 	bl	8000578 <__aeabi_f2d>
 8008da6:	4603      	mov	r3, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	461a      	mov	r2, r3
 8008dac:	4623      	mov	r3, r4
 8008dae:	48b1      	ldr	r0, [pc, #708]	; (8009074 <cppLoop+0x153c>)
 8008db0:	f7f8 f9b0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008db4:	48b0      	ldr	r0, [pc, #704]	; (8009078 <cppLoop+0x1540>)
 8008db6:	f7f9 f9ad 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	bf0c      	ite	eq
 8008dc0:	2301      	moveq	r3, #1
 8008dc2:	2300      	movne	r3, #0
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d022      	beq.n	8008e10 <cppLoop+0x12d8>
			led.LR(-1, 1);
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8008dd0:	48a5      	ldr	r0, [pc, #660]	; (8009068 <cppLoop+0x1530>)
 8008dd2:	f7f9 fabf 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008dd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008dda:	f000 ffb9 	bl	8009d50 <HAL_Delay>

			selector_acc++;
 8008dde:	4ba7      	ldr	r3, [pc, #668]	; (800907c <cppLoop+0x1544>)
 8008de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	3301      	adds	r3, #1
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	b21a      	sxth	r2, r3
 8008dec:	4ba3      	ldr	r3, [pc, #652]	; (800907c <cppLoop+0x1544>)
 8008dee:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008df0:	4ba2      	ldr	r3, [pc, #648]	; (800907c <cppLoop+0x1544>)
 8008df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008df6:	2b01      	cmp	r3, #1
 8008df8:	dd02      	ble.n	8008e00 <cppLoop+0x12c8>
 8008dfa:	4ba0      	ldr	r3, [pc, #640]	; (800907c <cppLoop+0x1544>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e00:	2200      	movs	r2, #0
 8008e02:	f04f 31ff 	mov.w	r1, #4294967295
 8008e06:	4898      	ldr	r0, [pc, #608]	; (8009068 <cppLoop+0x1530>)
 8008e08:	f7f9 faa4 	bl	8002354 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008e0c:	f000 be66 	b.w	8009adc <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_R){
 8008e10:	4899      	ldr	r0, [pc, #612]	; (8009078 <cppLoop+0x1540>)
 8008e12:	f7f9 f97f 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d03c      	beq.n	8008ea0 <cppLoop+0x1368>
			led.LR(-1, 1);
 8008e26:	2201      	movs	r2, #1
 8008e28:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2c:	488e      	ldr	r0, [pc, #568]	; (8009068 <cppLoop+0x1530>)
 8008e2e:	f7f9 fa91 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e32:	2064      	movs	r0, #100	; 0x64
 8008e34:	f000 ff8c 	bl	8009d50 <HAL_Delay>
			if(selector_acc == 0){
 8008e38:	4b90      	ldr	r3, [pc, #576]	; (800907c <cppLoop+0x1544>)
 8008e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d113      	bne.n	8008e6a <cppLoop+0x1332>
				adj_acc = adj_acc + 0.1;
 8008e42:	4b8f      	ldr	r3, [pc, #572]	; (8009080 <cppLoop+0x1548>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fb96 	bl	8000578 <__aeabi_f2d>
 8008e4c:	a384      	add	r3, pc, #528	; (adr r3, 8009060 <cppLoop+0x1528>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa33 	bl	80002bc <__adddf3>
 8008e56:	4603      	mov	r3, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	f7f7 fedb 	bl	8000c18 <__aeabi_d2f>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b86      	ldr	r3, [pc, #536]	; (8009080 <cppLoop+0x1548>)
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	e012      	b.n	8008e90 <cppLoop+0x1358>
				adj_dec = adj_dec + 0.1;
 8008e6a:	4b86      	ldr	r3, [pc, #536]	; (8009084 <cppLoop+0x154c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f7 fb82 	bl	8000578 <__aeabi_f2d>
 8008e74:	a37a      	add	r3, pc, #488	; (adr r3, 8009060 <cppLoop+0x1528>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fa1f 	bl	80002bc <__adddf3>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	4618      	mov	r0, r3
 8008e84:	4621      	mov	r1, r4
 8008e86:	f7f7 fec7 	bl	8000c18 <__aeabi_d2f>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b7d      	ldr	r3, [pc, #500]	; (8009084 <cppLoop+0x154c>)
 8008e8e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e90:	2200      	movs	r2, #0
 8008e92:	f04f 31ff 	mov.w	r1, #4294967295
 8008e96:	4874      	ldr	r0, [pc, #464]	; (8009068 <cppLoop+0x1530>)
 8008e98:	f7f9 fa5c 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008e9c:	f000 be1e 	b.w	8009adc <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_L){
 8008ea0:	4875      	ldr	r0, [pc, #468]	; (8009078 <cppLoop+0x1540>)
 8008ea2:	f7f9 f937 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d03c      	beq.n	8008f30 <cppLoop+0x13f8>
			led.LR(-1, 1);
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ebc:	486a      	ldr	r0, [pc, #424]	; (8009068 <cppLoop+0x1530>)
 8008ebe:	f7f9 fa49 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ec2:	2064      	movs	r0, #100	; 0x64
 8008ec4:	f000 ff44 	bl	8009d50 <HAL_Delay>
			if(selector_acc == 0){
 8008ec8:	4b6c      	ldr	r3, [pc, #432]	; (800907c <cppLoop+0x1544>)
 8008eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d113      	bne.n	8008efa <cppLoop+0x13c2>
				adj_acc = adj_acc - 0.1;
 8008ed2:	4b6b      	ldr	r3, [pc, #428]	; (8009080 <cppLoop+0x1548>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7f7 fb4e 	bl	8000578 <__aeabi_f2d>
 8008edc:	a360      	add	r3, pc, #384	; (adr r3, 8009060 <cppLoop+0x1528>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9e9 	bl	80002b8 <__aeabi_dsub>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	460c      	mov	r4, r1
 8008eea:	4618      	mov	r0, r3
 8008eec:	4621      	mov	r1, r4
 8008eee:	f7f7 fe93 	bl	8000c18 <__aeabi_d2f>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b62      	ldr	r3, [pc, #392]	; (8009080 <cppLoop+0x1548>)
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e012      	b.n	8008f20 <cppLoop+0x13e8>
				adj_dec = adj_dec - 0.1;
 8008efa:	4b62      	ldr	r3, [pc, #392]	; (8009084 <cppLoop+0x154c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f7 fb3a 	bl	8000578 <__aeabi_f2d>
 8008f04:	a356      	add	r3, pc, #344	; (adr r3, 8009060 <cppLoop+0x1528>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 f9d5 	bl	80002b8 <__aeabi_dsub>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	460c      	mov	r4, r1
 8008f12:	4618      	mov	r0, r3
 8008f14:	4621      	mov	r1, r4
 8008f16:	f7f7 fe7f 	bl	8000c18 <__aeabi_d2f>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	4b59      	ldr	r3, [pc, #356]	; (8009084 <cppLoop+0x154c>)
 8008f1e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f20:	2200      	movs	r2, #0
 8008f22:	f04f 31ff 	mov.w	r1, #4294967295
 8008f26:	4850      	ldr	r0, [pc, #320]	; (8009068 <cppLoop+0x1530>)
 8008f28:	f7f9 fa14 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008f2c:	f000 bdd6 	b.w	8009adc <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_C){
 8008f30:	4851      	ldr	r0, [pc, #324]	; (8009078 <cppLoop+0x1540>)
 8008f32:	f7f9 f8ef 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	bf0c      	ite	eq
 8008f3c:	2301      	moveq	r3, #1
 8008f3e:	2300      	movne	r3, #0
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 85ca 	beq.w	8009adc <cppLoop+0x1fa4>
			led.LR(-1, 1);
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f4e:	4846      	ldr	r0, [pc, #280]	; (8009068 <cppLoop+0x1530>)
 8008f50:	f7f9 fa00 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f58:	f000 fefa 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	9300      	str	r3, [sp, #0]
 8008f60:	4b47      	ldr	r3, [pc, #284]	; (8009080 <cppLoop+0x1548>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	4948      	ldr	r1, [pc, #288]	; (8009088 <cppLoop+0x1550>)
 8008f66:	4849      	ldr	r0, [pc, #292]	; (800908c <cppLoop+0x1554>)
 8008f68:	f7f8 fc88 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	4b44      	ldr	r3, [pc, #272]	; (8009084 <cppLoop+0x154c>)
 8008f72:	2201      	movs	r2, #1
 8008f74:	4946      	ldr	r1, [pc, #280]	; (8009090 <cppLoop+0x1558>)
 8008f76:	4845      	ldr	r0, [pc, #276]	; (800908c <cppLoop+0x1554>)
 8008f78:	f7f8 fc80 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008f7c:	4b40      	ldr	r3, [pc, #256]	; (8009080 <cppLoop+0x1548>)
 8008f7e:	edd3 7a00 	vldr	s15, [r3]
 8008f82:	4b40      	ldr	r3, [pc, #256]	; (8009084 <cppLoop+0x154c>)
 8008f84:	ed93 7a00 	vldr	s14, [r3]
 8008f88:	eef0 0a47 	vmov.f32	s1, s14
 8008f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f90:	4836      	ldr	r0, [pc, #216]	; (800906c <cppLoop+0x1534>)
 8008f92:	f7fa ff0e 	bl	8003db2 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008f96:	2200      	movs	r2, #0
 8008f98:	f04f 31ff 	mov.w	r1, #4294967295
 8008f9c:	4832      	ldr	r0, [pc, #200]	; (8009068 <cppLoop+0x1530>)
 8008f9e:	f7f9 f9d9 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8008fa2:	f000 bd9b 	b.w	8009adc <cppLoop+0x1fa4>

	case 8:
		led.fullColor('W');
 8008fa6:	2157      	movs	r1, #87	; 0x57
 8008fa8:	482f      	ldr	r0, [pc, #188]	; (8009068 <cppLoop+0x1530>)
 8008faa:	f7f9 f917 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fae:	f7f8 f877 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f7f8 f883 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008fba:	482c      	ldr	r0, [pc, #176]	; (800906c <cppLoop+0x1534>)
 8008fbc:	f7fa ff51 	bl	8003e62 <_ZN9LineTrace10getMaxAcc2Ev>
 8008fc0:	ee10 3a10 	vmov	r3, s0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7f7 fad7 	bl	8000578 <__aeabi_f2d>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	461a      	mov	r2, r3
 8008fd0:	4623      	mov	r3, r4
 8008fd2:	4830      	ldr	r0, [pc, #192]	; (8009094 <cppLoop+0x155c>)
 8008fd4:	f7f8 f89e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fd8:	2101      	movs	r1, #1
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f7f8 f870 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008fe0:	4822      	ldr	r0, [pc, #136]	; (800906c <cppLoop+0x1534>)
 8008fe2:	f7fa ff2c 	bl	8003e3e <_ZN9LineTrace10getMaxDec2Ev>
 8008fe6:	ee10 3a10 	vmov	r3, s0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f7 fac4 	bl	8000578 <__aeabi_f2d>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	4623      	mov	r3, r4
 8008ff8:	4827      	ldr	r0, [pc, #156]	; (8009098 <cppLoop+0x1560>)
 8008ffa:	f7f8 f88b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008ffe:	481e      	ldr	r0, [pc, #120]	; (8009078 <cppLoop+0x1540>)
 8009000:	f7f9 f888 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009004:	4603      	mov	r3, r0
 8009006:	2b08      	cmp	r3, #8
 8009008:	bf0c      	ite	eq
 800900a:	2301      	moveq	r3, #1
 800900c:	2300      	movne	r3, #0
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d045      	beq.n	80090a0 <cppLoop+0x1568>
			led.LR(-1, 1);
 8009014:	2201      	movs	r2, #1
 8009016:	f04f 31ff 	mov.w	r1, #4294967295
 800901a:	4813      	ldr	r0, [pc, #76]	; (8009068 <cppLoop+0x1530>)
 800901c:	f7f9 f99a 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009020:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009024:	f000 fe94 	bl	8009d50 <HAL_Delay>

			selector_acc2++;
 8009028:	4b1c      	ldr	r3, [pc, #112]	; (800909c <cppLoop+0x1564>)
 800902a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800902e:	b29b      	uxth	r3, r3
 8009030:	3301      	adds	r3, #1
 8009032:	b29b      	uxth	r3, r3
 8009034:	b21a      	sxth	r2, r3
 8009036:	4b19      	ldr	r3, [pc, #100]	; (800909c <cppLoop+0x1564>)
 8009038:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 800903a:	4b18      	ldr	r3, [pc, #96]	; (800909c <cppLoop+0x1564>)
 800903c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009040:	2b01      	cmp	r3, #1
 8009042:	dd02      	ble.n	800904a <cppLoop+0x1512>
 8009044:	4b15      	ldr	r3, [pc, #84]	; (800909c <cppLoop+0x1564>)
 8009046:	2200      	movs	r2, #0
 8009048:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800904a:	2200      	movs	r2, #0
 800904c:	f04f 31ff 	mov.w	r1, #4294967295
 8009050:	4805      	ldr	r0, [pc, #20]	; (8009068 <cppLoop+0x1530>)
 8009052:	f7f9 f97f 	bl	8002354 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8009056:	f000 bd43 	b.w	8009ae0 <cppLoop+0x1fa8>
 800905a:	bf00      	nop
 800905c:	f3af 8000 	nop.w
 8009060:	9999999a 	.word	0x9999999a
 8009064:	3fb99999 	.word	0x3fb99999
 8009068:	200005cc 	.word	0x200005cc
 800906c:	2001db5c 	.word	0x2001db5c
 8009070:	08019f0c 	.word	0x08019f0c
 8009074:	08019f18 	.word	0x08019f18
 8009078:	200005c0 	.word	0x200005c0
 800907c:	2004223c 	.word	0x2004223c
 8009080:	2004229c 	.word	0x2004229c
 8009084:	200422a4 	.word	0x200422a4
 8009088:	08019f24 	.word	0x08019f24
 800908c:	08019e50 	.word	0x08019e50
 8009090:	08019f2c 	.word	0x08019f2c
 8009094:	08019f34 	.word	0x08019f34
 8009098:	08019f40 	.word	0x08019f40
 800909c:	2004223e 	.word	0x2004223e
		else if(joy_stick.getValue() == JOY_R){
 80090a0:	48bf      	ldr	r0, [pc, #764]	; (80093a0 <cppLoop+0x1868>)
 80090a2:	f7f9 f837 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	bf0c      	ite	eq
 80090ac:	2301      	moveq	r3, #1
 80090ae:	2300      	movne	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d03c      	beq.n	8009130 <cppLoop+0x15f8>
			led.LR(-1, 1);
 80090b6:	2201      	movs	r2, #1
 80090b8:	f04f 31ff 	mov.w	r1, #4294967295
 80090bc:	48b9      	ldr	r0, [pc, #740]	; (80093a4 <cppLoop+0x186c>)
 80090be:	f7f9 f949 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090c2:	2064      	movs	r0, #100	; 0x64
 80090c4:	f000 fe44 	bl	8009d50 <HAL_Delay>
			if(selector_acc2 == 0){
 80090c8:	4bb7      	ldr	r3, [pc, #732]	; (80093a8 <cppLoop+0x1870>)
 80090ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d113      	bne.n	80090fa <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 + 0.1;
 80090d2:	4bb6      	ldr	r3, [pc, #728]	; (80093ac <cppLoop+0x1874>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f7 fa4e 	bl	8000578 <__aeabi_f2d>
 80090dc:	a3ae      	add	r3, pc, #696	; (adr r3, 8009398 <cppLoop+0x1860>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 f8eb 	bl	80002bc <__adddf3>
 80090e6:	4603      	mov	r3, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	4618      	mov	r0, r3
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7f7 fd93 	bl	8000c18 <__aeabi_d2f>
 80090f2:	4602      	mov	r2, r0
 80090f4:	4bad      	ldr	r3, [pc, #692]	; (80093ac <cppLoop+0x1874>)
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e012      	b.n	8009120 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 + 0.1;
 80090fa:	4bad      	ldr	r3, [pc, #692]	; (80093b0 <cppLoop+0x1878>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 fa3a 	bl	8000578 <__aeabi_f2d>
 8009104:	a3a4      	add	r3, pc, #656	; (adr r3, 8009398 <cppLoop+0x1860>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f8d7 	bl	80002bc <__adddf3>
 800910e:	4603      	mov	r3, r0
 8009110:	460c      	mov	r4, r1
 8009112:	4618      	mov	r0, r3
 8009114:	4621      	mov	r1, r4
 8009116:	f7f7 fd7f 	bl	8000c18 <__aeabi_d2f>
 800911a:	4602      	mov	r2, r0
 800911c:	4ba4      	ldr	r3, [pc, #656]	; (80093b0 <cppLoop+0x1878>)
 800911e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009120:	2200      	movs	r2, #0
 8009122:	f04f 31ff 	mov.w	r1, #4294967295
 8009126:	489f      	ldr	r0, [pc, #636]	; (80093a4 <cppLoop+0x186c>)
 8009128:	f7f9 f914 	bl	8002354 <_ZN3LED2LREaa>
		break;
 800912c:	f000 bcd8 	b.w	8009ae0 <cppLoop+0x1fa8>
		else if(joy_stick.getValue() == JOY_L){
 8009130:	489b      	ldr	r0, [pc, #620]	; (80093a0 <cppLoop+0x1868>)
 8009132:	f7f8 ffef 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009136:	4603      	mov	r3, r0
 8009138:	2b01      	cmp	r3, #1
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d03c      	beq.n	80091c0 <cppLoop+0x1688>
			led.LR(-1, 1);
 8009146:	2201      	movs	r2, #1
 8009148:	f04f 31ff 	mov.w	r1, #4294967295
 800914c:	4895      	ldr	r0, [pc, #596]	; (80093a4 <cppLoop+0x186c>)
 800914e:	f7f9 f901 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009152:	2064      	movs	r0, #100	; 0x64
 8009154:	f000 fdfc 	bl	8009d50 <HAL_Delay>
			if(selector_acc2 == 0){
 8009158:	4b93      	ldr	r3, [pc, #588]	; (80093a8 <cppLoop+0x1870>)
 800915a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d113      	bne.n	800918a <cppLoop+0x1652>
				adj_acc2 = adj_acc2 - 0.1;
 8009162:	4b92      	ldr	r3, [pc, #584]	; (80093ac <cppLoop+0x1874>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f7 fa06 	bl	8000578 <__aeabi_f2d>
 800916c:	a38a      	add	r3, pc, #552	; (adr r3, 8009398 <cppLoop+0x1860>)
 800916e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009172:	f7f7 f8a1 	bl	80002b8 <__aeabi_dsub>
 8009176:	4603      	mov	r3, r0
 8009178:	460c      	mov	r4, r1
 800917a:	4618      	mov	r0, r3
 800917c:	4621      	mov	r1, r4
 800917e:	f7f7 fd4b 	bl	8000c18 <__aeabi_d2f>
 8009182:	4602      	mov	r2, r0
 8009184:	4b89      	ldr	r3, [pc, #548]	; (80093ac <cppLoop+0x1874>)
 8009186:	601a      	str	r2, [r3, #0]
 8009188:	e012      	b.n	80091b0 <cppLoop+0x1678>
				adj_dec2 = adj_dec2 - 0.1;
 800918a:	4b89      	ldr	r3, [pc, #548]	; (80093b0 <cppLoop+0x1878>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f7f7 f9f2 	bl	8000578 <__aeabi_f2d>
 8009194:	a380      	add	r3, pc, #512	; (adr r3, 8009398 <cppLoop+0x1860>)
 8009196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919a:	f7f7 f88d 	bl	80002b8 <__aeabi_dsub>
 800919e:	4603      	mov	r3, r0
 80091a0:	460c      	mov	r4, r1
 80091a2:	4618      	mov	r0, r3
 80091a4:	4621      	mov	r1, r4
 80091a6:	f7f7 fd37 	bl	8000c18 <__aeabi_d2f>
 80091aa:	4602      	mov	r2, r0
 80091ac:	4b80      	ldr	r3, [pc, #512]	; (80093b0 <cppLoop+0x1878>)
 80091ae:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80091b0:	2200      	movs	r2, #0
 80091b2:	f04f 31ff 	mov.w	r1, #4294967295
 80091b6:	487b      	ldr	r0, [pc, #492]	; (80093a4 <cppLoop+0x186c>)
 80091b8:	f7f9 f8cc 	bl	8002354 <_ZN3LED2LREaa>
		break;
 80091bc:	f000 bc90 	b.w	8009ae0 <cppLoop+0x1fa8>
		else if(joy_stick.getValue() == JOY_C){
 80091c0:	4877      	ldr	r0, [pc, #476]	; (80093a0 <cppLoop+0x1868>)
 80091c2:	f7f8 ffa7 	bl	8002114 <_ZN8JoyStick8getValueEv>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	bf0c      	ite	eq
 80091cc:	2301      	moveq	r3, #1
 80091ce:	2300      	movne	r3, #0
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8484 	beq.w	8009ae0 <cppLoop+0x1fa8>
			led.LR(-1, 1);
 80091d8:	2201      	movs	r2, #1
 80091da:	f04f 31ff 	mov.w	r1, #4294967295
 80091de:	4871      	ldr	r0, [pc, #452]	; (80093a4 <cppLoop+0x186c>)
 80091e0:	f7f9 f8b8 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80091e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80091e8:	f000 fdb2 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80091ec:	2300      	movs	r3, #0
 80091ee:	9300      	str	r3, [sp, #0]
 80091f0:	4b6e      	ldr	r3, [pc, #440]	; (80093ac <cppLoop+0x1874>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	496f      	ldr	r1, [pc, #444]	; (80093b4 <cppLoop+0x187c>)
 80091f6:	4870      	ldr	r0, [pc, #448]	; (80093b8 <cppLoop+0x1880>)
 80091f8:	f7f8 fb40 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80091fc:	2300      	movs	r3, #0
 80091fe:	9300      	str	r3, [sp, #0]
 8009200:	4b6b      	ldr	r3, [pc, #428]	; (80093b0 <cppLoop+0x1878>)
 8009202:	2201      	movs	r2, #1
 8009204:	496d      	ldr	r1, [pc, #436]	; (80093bc <cppLoop+0x1884>)
 8009206:	486c      	ldr	r0, [pc, #432]	; (80093b8 <cppLoop+0x1880>)
 8009208:	f7f8 fb38 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800920c:	4b67      	ldr	r3, [pc, #412]	; (80093ac <cppLoop+0x1874>)
 800920e:	edd3 7a00 	vldr	s15, [r3]
 8009212:	4b67      	ldr	r3, [pc, #412]	; (80093b0 <cppLoop+0x1878>)
 8009214:	ed93 7a00 	vldr	s14, [r3]
 8009218:	eef0 0a47 	vmov.f32	s1, s14
 800921c:	eeb0 0a67 	vmov.f32	s0, s15
 8009220:	4867      	ldr	r0, [pc, #412]	; (80093c0 <cppLoop+0x1888>)
 8009222:	f7fa fde0 	bl	8003de6 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009226:	2200      	movs	r2, #0
 8009228:	f04f 31ff 	mov.w	r1, #4294967295
 800922c:	485d      	ldr	r0, [pc, #372]	; (80093a4 <cppLoop+0x186c>)
 800922e:	f7f9 f891 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8009232:	f000 bc55 	b.w	8009ae0 <cppLoop+0x1fa8>

	case 9:
		led.fullColor('~');
 8009236:	217e      	movs	r1, #126	; 0x7e
 8009238:	485a      	ldr	r0, [pc, #360]	; (80093a4 <cppLoop+0x186c>)
 800923a:	f7f8 ffcf 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 800923e:	f7f7 ff2f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009242:	2100      	movs	r1, #0
 8009244:	2000      	movs	r0, #0
 8009246:	f7f7 ff3b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800924a:	485e      	ldr	r0, [pc, #376]	; (80093c4 <cppLoop+0x188c>)
 800924c:	f7f7 ff62 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009250:	2101      	movs	r1, #1
 8009252:	2000      	movs	r0, #0
 8009254:	f7f7 ff34 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009258:	485b      	ldr	r0, [pc, #364]	; (80093c8 <cppLoop+0x1890>)
 800925a:	f7f7 ff5b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800925e:	4850      	ldr	r0, [pc, #320]	; (80093a0 <cppLoop+0x1868>)
 8009260:	f7f8 ff58 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009264:	4603      	mov	r3, r0
 8009266:	2b02      	cmp	r3, #2
 8009268:	bf0c      	ite	eq
 800926a:	2301      	moveq	r3, #1
 800926c:	2300      	movne	r3, #0
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	f000 8437 	beq.w	8009ae4 <cppLoop+0x1fac>
			led.LR(-1, 1);
 8009276:	2201      	movs	r2, #1
 8009278:	f04f 31ff 	mov.w	r1, #4294967295
 800927c:	4849      	ldr	r0, [pc, #292]	; (80093a4 <cppLoop+0x186c>)
 800927e:	f7f9 f869 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8009282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009286:	f000 fd63 	bl	8009d50 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 800928a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80093cc <cppLoop+0x1894>
 800928e:	484c      	ldr	r0, [pc, #304]	; (80093c0 <cppLoop+0x1888>)
 8009290:	f7fa fce0 	bl	8003c54 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009294:	484a      	ldr	r0, [pc, #296]	; (80093c0 <cppLoop+0x1888>)
 8009296:	f7fa ff2b 	bl	80040f0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800929a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800929e:	f000 fd57 	bl	8009d50 <HAL_Delay>

			led.fullColor('R');
 80092a2:	2152      	movs	r1, #82	; 0x52
 80092a4:	483f      	ldr	r0, [pc, #252]	; (80093a4 <cppLoop+0x186c>)
 80092a6:	f7f8 ff99 	bl	80021dc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80092aa:	4849      	ldr	r0, [pc, #292]	; (80093d0 <cppLoop+0x1898>)
 80092ac:	f7f8 fa38 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80092b0:	f242 7010 	movw	r0, #10000	; 0x2710
 80092b4:	f000 fd4c 	bl	8009d50 <HAL_Delay>

			line_trace.stop();
 80092b8:	4841      	ldr	r0, [pc, #260]	; (80093c0 <cppLoop+0x1888>)
 80092ba:	f7fa ffb9 	bl	8004230 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80092be:	4945      	ldr	r1, [pc, #276]	; (80093d4 <cppLoop+0x189c>)
 80092c0:	4845      	ldr	r0, [pc, #276]	; (80093d8 <cppLoop+0x18a0>)
 80092c2:	f7f8 fa66 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 80092c6:	4842      	ldr	r0, [pc, #264]	; (80093d0 <cppLoop+0x1898>)
 80092c8:	f7f8 f9ee 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80092cc:	eef0 7a40 	vmov.f32	s15, s0
 80092d0:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80092d4:	1d3b      	adds	r3, r7, #4
 80092d6:	2201      	movs	r2, #1
 80092d8:	4619      	mov	r1, r3
 80092da:	2001      	movs	r0, #1
 80092dc:	f7f8 fa7c 	bl	80017d8 <sd_write_float>
			user_fclose();
 80092e0:	f7f8 fa6a 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80092e4:	2200      	movs	r2, #0
 80092e6:	f04f 31ff 	mov.w	r1, #4294967295
 80092ea:	482e      	ldr	r0, [pc, #184]	; (80093a4 <cppLoop+0x186c>)
 80092ec:	f7f9 f832 	bl	8002354 <_ZN3LED2LREaa>
		}
		break;
 80092f0:	e3f8      	b.n	8009ae4 <cppLoop+0x1fac>

	case 10:
		led.fullColor('~');
 80092f2:	217e      	movs	r1, #126	; 0x7e
 80092f4:	482b      	ldr	r0, [pc, #172]	; (80093a4 <cppLoop+0x186c>)
 80092f6:	f7f8 ff71 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 80092fa:	f7f7 fed1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092fe:	2100      	movs	r1, #0
 8009300:	2000      	movs	r0, #0
 8009302:	f7f7 fedd 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009306:	4835      	ldr	r0, [pc, #212]	; (80093dc <cppLoop+0x18a4>)
 8009308:	f7f7 ff04 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800930c:	2101      	movs	r1, #1
 800930e:	2000      	movs	r0, #0
 8009310:	f7f7 fed6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009314:	4832      	ldr	r0, [pc, #200]	; (80093e0 <cppLoop+0x18a8>)
 8009316:	f7f7 fefd 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800931a:	4821      	ldr	r0, [pc, #132]	; (80093a0 <cppLoop+0x1868>)
 800931c:	f7f8 fefa 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009320:	4603      	mov	r3, r0
 8009322:	2b02      	cmp	r3, #2
 8009324:	bf0c      	ite	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	2300      	movne	r3, #0
 800932a:	b2db      	uxtb	r3, r3
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 83db 	beq.w	8009ae8 <cppLoop+0x1fb0>
			HAL_Delay(500);
 8009332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009336:	f000 fd0b 	bl	8009d50 <HAL_Delay>
			led.LR(-1, 1);
 800933a:	2201      	movs	r2, #1
 800933c:	f04f 31ff 	mov.w	r1, #4294967295
 8009340:	4818      	ldr	r0, [pc, #96]	; (80093a4 <cppLoop+0x186c>)
 8009342:	f7f9 f807 	bl	8002354 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009346:	2102      	movs	r1, #2
 8009348:	481d      	ldr	r0, [pc, #116]	; (80093c0 <cppLoop+0x1888>)
 800934a:	f7fa febf 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 800934e:	4b25      	ldr	r3, [pc, #148]	; (80093e4 <cppLoop+0x18ac>)
 8009350:	edd3 7a00 	vldr	s15, [r3]
 8009354:	eeb0 0a67 	vmov.f32	s0, s15
 8009358:	4819      	ldr	r0, [pc, #100]	; (80093c0 <cppLoop+0x1888>)
 800935a:	f7fa fc8a 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800935e:	4b21      	ldr	r3, [pc, #132]	; (80093e4 <cppLoop+0x18ac>)
 8009360:	edd3 7a00 	vldr	s15, [r3]
 8009364:	eeb0 0a67 	vmov.f32	s0, s15
 8009368:	4815      	ldr	r0, [pc, #84]	; (80093c0 <cppLoop+0x1888>)
 800936a:	f7fa fc92 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800936e:	4b1d      	ldr	r3, [pc, #116]	; (80093e4 <cppLoop+0x18ac>)
 8009370:	edd3 7a00 	vldr	s15, [r3]
 8009374:	eeb0 0a67 	vmov.f32	s0, s15
 8009378:	4811      	ldr	r0, [pc, #68]	; (80093c0 <cppLoop+0x1888>)
 800937a:	f7fa fcaa 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800937e:	4810      	ldr	r0, [pc, #64]	; (80093c0 <cppLoop+0x1888>)
 8009380:	f7fb f89a 	bl	80044b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8009384:	2200      	movs	r2, #0
 8009386:	f04f 31ff 	mov.w	r1, #4294967295
 800938a:	4806      	ldr	r0, [pc, #24]	; (80093a4 <cppLoop+0x186c>)
 800938c:	f7f8 ffe2 	bl	8002354 <_ZN3LED2LREaa>
		}

		break;
 8009390:	e3aa      	b.n	8009ae8 <cppLoop+0x1fb0>
 8009392:	bf00      	nop
 8009394:	f3af 8000 	nop.w
 8009398:	9999999a 	.word	0x9999999a
 800939c:	3fb99999 	.word	0x3fb99999
 80093a0:	200005c0 	.word	0x200005c0
 80093a4:	200005cc 	.word	0x200005cc
 80093a8:	2004223e 	.word	0x2004223e
 80093ac:	200422ac 	.word	0x200422ac
 80093b0:	200422b4 	.word	0x200422b4
 80093b4:	08019f4c 	.word	0x08019f4c
 80093b8:	08019e50 	.word	0x08019e50
 80093bc:	08019f58 	.word	0x08019f58
 80093c0:	2001db5c 	.word	0x2001db5c
 80093c4:	08019f64 	.word	0x08019f64
 80093c8:	08019f6c 	.word	0x08019f6c
 80093cc:	00000000 	.word	0x00000000
 80093d0:	2001dabc 	.word	0x2001dabc
 80093d4:	08019f78 	.word	0x08019f78
 80093d8:	08019f80 	.word	0x08019f80
 80093dc:	08019f8c 	.word	0x08019f8c
 80093e0:	08019f98 	.word	0x08019f98
 80093e4:	20042284 	.word	0x20042284

	case 11:
		led.fullColor('~');
 80093e8:	217e      	movs	r1, #126	; 0x7e
 80093ea:	48c4      	ldr	r0, [pc, #784]	; (80096fc <cppLoop+0x1bc4>)
 80093ec:	f7f8 fef6 	bl	80021dc <_ZN3LED9fullColorEc>

lcd_clear();
 80093f0:	f7f7 fe56 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093f4:	2100      	movs	r1, #0
 80093f6:	2000      	movs	r0, #0
 80093f8:	f7f7 fe62 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80093fc:	48c0      	ldr	r0, [pc, #768]	; (8009700 <cppLoop+0x1bc8>)
 80093fe:	f7f7 fe89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009402:	2101      	movs	r1, #1
 8009404:	2000      	movs	r0, #0
 8009406:	f7f7 fe5b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800940a:	48be      	ldr	r0, [pc, #760]	; (8009704 <cppLoop+0x1bcc>)
 800940c:	f7f7 fe82 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009410:	48bd      	ldr	r0, [pc, #756]	; (8009708 <cppLoop+0x1bd0>)
 8009412:	f7f8 fe7f 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009416:	4603      	mov	r3, r0
 8009418:	2b02      	cmp	r3, #2
 800941a:	bf0c      	ite	eq
 800941c:	2301      	moveq	r3, #1
 800941e:	2300      	movne	r3, #0
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8362 	beq.w	8009aec <cppLoop+0x1fb4>
			HAL_Delay(1000);
 8009428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800942c:	f000 fc90 	bl	8009d50 <HAL_Delay>
			led.LR(-1, 1);
 8009430:	2201      	movs	r2, #1
 8009432:	f04f 31ff 	mov.w	r1, #4294967295
 8009436:	48b1      	ldr	r0, [pc, #708]	; (80096fc <cppLoop+0x1bc4>)
 8009438:	f7f8 ff8c 	bl	8002354 <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800943c:	eddf 1ab3 	vldr	s3, [pc, #716]	; 800970c <cppLoop+0x1bd4>
 8009440:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 800970c <cppLoop+0x1bd4>
 8009444:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800970c <cppLoop+0x1bd4>
 8009448:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800970c <cppLoop+0x1bd4>
 800944c:	48b0      	ldr	r0, [pc, #704]	; (8009710 <cppLoop+0x1bd8>)
 800944e:	f7f7 feff 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8009452:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009456:	f000 fc7b 	bl	8009d50 <HAL_Delay>
			esc.off();
 800945a:	48ad      	ldr	r0, [pc, #692]	; (8009710 <cppLoop+0x1bd8>)
 800945c:	f7f7 ff92 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009460:	2200      	movs	r2, #0
 8009462:	f04f 31ff 	mov.w	r1, #4294967295
 8009466:	48a5      	ldr	r0, [pc, #660]	; (80096fc <cppLoop+0x1bc4>)
 8009468:	f7f8 ff74 	bl	8002354 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 800946c:	e33e      	b.n	8009aec <cppLoop+0x1fb4>

	case 12:
		led.fullColor('~');
 800946e:	217e      	movs	r1, #126	; 0x7e
 8009470:	48a2      	ldr	r0, [pc, #648]	; (80096fc <cppLoop+0x1bc4>)
 8009472:	f7f8 feb3 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8009476:	f7f7 fe13 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800947a:	2100      	movs	r1, #0
 800947c:	2000      	movs	r0, #0
 800947e:	f7f7 fe1f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009482:	48a4      	ldr	r0, [pc, #656]	; (8009714 <cppLoop+0x1bdc>)
 8009484:	f7f7 fe46 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009488:	2101      	movs	r1, #1
 800948a:	2000      	movs	r0, #0
 800948c:	f7f7 fe18 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009490:	48a1      	ldr	r0, [pc, #644]	; (8009718 <cppLoop+0x1be0>)
 8009492:	f7f7 fe3f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009496:	489c      	ldr	r0, [pc, #624]	; (8009708 <cppLoop+0x1bd0>)
 8009498:	f7f8 fe3c 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800949c:	4603      	mov	r3, r0
 800949e:	2b02      	cmp	r3, #2
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 8321 	beq.w	8009af0 <cppLoop+0x1fb8>
			HAL_Delay(1500);
 80094ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80094b2:	f000 fc4d 	bl	8009d50 <HAL_Delay>
			led.LR(-1, 1);
 80094b6:	2201      	movs	r2, #1
 80094b8:	f04f 31ff 	mov.w	r1, #4294967295
 80094bc:	488f      	ldr	r0, [pc, #572]	; (80096fc <cppLoop+0x1bc4>)
 80094be:	f7f8 ff49 	bl	8002354 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80094c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80094c6:	f000 fc43 	bl	8009d50 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80094ca:	eddf 1a90 	vldr	s3, [pc, #576]	; 800970c <cppLoop+0x1bd4>
 80094ce:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800970c <cppLoop+0x1bd4>
 80094d2:	eddf 0a8e 	vldr	s1, [pc, #568]	; 800970c <cppLoop+0x1bd4>
 80094d6:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800970c <cppLoop+0x1bd4>
 80094da:	488d      	ldr	r0, [pc, #564]	; (8009710 <cppLoop+0x1bd8>)
 80094dc:	f7f7 feb8 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80094e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094e4:	f000 fc34 	bl	8009d50 <HAL_Delay>

			logger.start();
 80094e8:	488c      	ldr	r0, [pc, #560]	; (800971c <cppLoop+0x1be4>)
 80094ea:	f7fb fb6a 	bl	8004bc2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80094ee:	488c      	ldr	r0, [pc, #560]	; (8009720 <cppLoop+0x1be8>)
 80094f0:	f7fc fc9f 	bl	8005e32 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80094f4:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8009724 <cppLoop+0x1bec>
 80094f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80094fc:	4888      	ldr	r0, [pc, #544]	; (8009720 <cppLoop+0x1be8>)
 80094fe:	f7fc fc2b 	bl	8005d58 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009506:	f000 fc23 	bl	8009d50 <HAL_Delay>

			logger.stop();
 800950a:	4884      	ldr	r0, [pc, #528]	; (800971c <cppLoop+0x1be4>)
 800950c:	f7fb fb69 	bl	8004be2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009510:	4883      	ldr	r0, [pc, #524]	; (8009720 <cppLoop+0x1be8>)
 8009512:	f7fc fca1 	bl	8005e58 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009516:	487e      	ldr	r0, [pc, #504]	; (8009710 <cppLoop+0x1bd8>)
 8009518:	f7f7 ff34 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800951c:	4a82      	ldr	r2, [pc, #520]	; (8009728 <cppLoop+0x1bf0>)
 800951e:	4983      	ldr	r1, [pc, #524]	; (800972c <cppLoop+0x1bf4>)
 8009520:	487e      	ldr	r0, [pc, #504]	; (800971c <cppLoop+0x1be4>)
 8009522:	f7fb fa45 	bl	80049b0 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009526:	2200      	movs	r2, #0
 8009528:	f04f 31ff 	mov.w	r1, #4294967295
 800952c:	4873      	ldr	r0, [pc, #460]	; (80096fc <cppLoop+0x1bc4>)
 800952e:	f7f8 ff11 	bl	8002354 <_ZN3LED2LREaa>
		}
		break;
 8009532:	e2dd      	b.n	8009af0 <cppLoop+0x1fb8>

	case 13:

		led.fullColor('W');
 8009534:	2157      	movs	r1, #87	; 0x57
 8009536:	4871      	ldr	r0, [pc, #452]	; (80096fc <cppLoop+0x1bc4>)
 8009538:	f7f8 fe50 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 800953c:	f7f7 fdb0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009540:	2100      	movs	r1, #0
 8009542:	2000      	movs	r0, #0
 8009544:	f7f7 fdbc 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009548:	4879      	ldr	r0, [pc, #484]	; (8009730 <cppLoop+0x1bf8>)
 800954a:	f7f7 fde3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800954e:	2101      	movs	r1, #1
 8009550:	2000      	movs	r0, #0
 8009552:	f7f7 fdb5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009556:	4b77      	ldr	r3, [pc, #476]	; (8009734 <cppLoop+0x1bfc>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	f7f7 f80c 	bl	8000578 <__aeabi_f2d>
 8009560:	4603      	mov	r3, r0
 8009562:	460c      	mov	r4, r1
 8009564:	461a      	mov	r2, r3
 8009566:	4623      	mov	r3, r4
 8009568:	4873      	ldr	r0, [pc, #460]	; (8009738 <cppLoop+0x1c00>)
 800956a:	f7f7 fdd3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800956e:	4866      	ldr	r0, [pc, #408]	; (8009708 <cppLoop+0x1bd0>)
 8009570:	f7f8 fdd0 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009574:	4603      	mov	r3, r0
 8009576:	2b02      	cmp	r3, #2
 8009578:	bf0c      	ite	eq
 800957a:	2301      	moveq	r3, #1
 800957c:	2300      	movne	r3, #0
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b00      	cmp	r3, #0
 8009582:	f000 82b7 	beq.w	8009af4 <cppLoop+0x1fbc>
			HAL_Delay(500);
 8009586:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800958a:	f000 fbe1 	bl	8009d50 <HAL_Delay>

			led.LR(1, -1);
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	2101      	movs	r1, #1
 8009594:	4859      	ldr	r0, [pc, #356]	; (80096fc <cppLoop+0x1bc4>)
 8009596:	f7f8 fedd 	bl	8002354 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800959a:	2102      	movs	r1, #2
 800959c:	4867      	ldr	r0, [pc, #412]	; (800973c <cppLoop+0x1c04>)
 800959e:	f7fa fd95 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80095a2:	4b67      	ldr	r3, [pc, #412]	; (8009740 <cppLoop+0x1c08>)
 80095a4:	edd3 7a00 	vldr	s15, [r3]
 80095a8:	eeb0 0a67 	vmov.f32	s0, s15
 80095ac:	4863      	ldr	r0, [pc, #396]	; (800973c <cppLoop+0x1c04>)
 80095ae:	f7fa fb60 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80095b2:	4b60      	ldr	r3, [pc, #384]	; (8009734 <cppLoop+0x1bfc>)
 80095b4:	edd3 7a00 	vldr	s15, [r3]
 80095b8:	eeb0 0a67 	vmov.f32	s0, s15
 80095bc:	485f      	ldr	r0, [pc, #380]	; (800973c <cppLoop+0x1c04>)
 80095be:	f7fa fb68 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80095c2:	4b5c      	ldr	r3, [pc, #368]	; (8009734 <cppLoop+0x1bfc>)
 80095c4:	edd3 7a00 	vldr	s15, [r3]
 80095c8:	eeb0 0a67 	vmov.f32	s0, s15
 80095cc:	485b      	ldr	r0, [pc, #364]	; (800973c <cppLoop+0x1c04>)
 80095ce:	f7fa fb80 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80095d2:	485a      	ldr	r0, [pc, #360]	; (800973c <cppLoop+0x1c04>)
 80095d4:	f7fa ff70 	bl	80044b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 80095d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80095dc:	f000 fbb8 	bl	8009d50 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80095e0:	eddf 1a4a 	vldr	s3, [pc, #296]	; 800970c <cppLoop+0x1bd4>
 80095e4:	ed9f 1a49 	vldr	s2, [pc, #292]	; 800970c <cppLoop+0x1bd4>
 80095e8:	eddf 0a48 	vldr	s1, [pc, #288]	; 800970c <cppLoop+0x1bd4>
 80095ec:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800970c <cppLoop+0x1bd4>
 80095f0:	4847      	ldr	r0, [pc, #284]	; (8009710 <cppLoop+0x1bd8>)
 80095f2:	f7f7 fe2d 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80095f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095fa:	f000 fba9 	bl	8009d50 <HAL_Delay>

			line_trace.running();
 80095fe:	484f      	ldr	r0, [pc, #316]	; (800973c <cppLoop+0x1c04>)
 8009600:	f7fa fda2 	bl	8004148 <_ZN9LineTrace7runningEv>

			esc.off();
 8009604:	4842      	ldr	r0, [pc, #264]	; (8009710 <cppLoop+0x1bd8>)
 8009606:	f7f7 febd 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800960a:	f04f 32ff 	mov.w	r2, #4294967295
 800960e:	2100      	movs	r1, #0
 8009610:	483a      	ldr	r0, [pc, #232]	; (80096fc <cppLoop+0x1bc4>)
 8009612:	f7f8 fe9f 	bl	8002354 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009616:	e26d      	b.n	8009af4 <cppLoop+0x1fbc>

	case 14:
		led.fullColor('W');
 8009618:	2157      	movs	r1, #87	; 0x57
 800961a:	4838      	ldr	r0, [pc, #224]	; (80096fc <cppLoop+0x1bc4>)
 800961c:	f7f8 fdde 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8009620:	f7f7 fd3e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009624:	2100      	movs	r1, #0
 8009626:	2000      	movs	r0, #0
 8009628:	f7f7 fd4a 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800962c:	4845      	ldr	r0, [pc, #276]	; (8009744 <cppLoop+0x1c0c>)
 800962e:	f7f7 fd71 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009632:	2101      	movs	r1, #1
 8009634:	2000      	movs	r0, #0
 8009636:	f7f7 fd43 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800963a:	4b43      	ldr	r3, [pc, #268]	; (8009748 <cppLoop+0x1c10>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4618      	mov	r0, r3
 8009640:	f7f6 ff9a 	bl	8000578 <__aeabi_f2d>
 8009644:	4603      	mov	r3, r0
 8009646:	460c      	mov	r4, r1
 8009648:	461a      	mov	r2, r3
 800964a:	4623      	mov	r3, r4
 800964c:	483a      	ldr	r0, [pc, #232]	; (8009738 <cppLoop+0x1c00>)
 800964e:	f7f7 fd61 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009652:	482d      	ldr	r0, [pc, #180]	; (8009708 <cppLoop+0x1bd0>)
 8009654:	f7f8 fd5e 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009658:	4603      	mov	r3, r0
 800965a:	2b02      	cmp	r3, #2
 800965c:	bf0c      	ite	eq
 800965e:	2301      	moveq	r3, #1
 8009660:	2300      	movne	r3, #0
 8009662:	b2db      	uxtb	r3, r3
 8009664:	2b00      	cmp	r3, #0
 8009666:	f000 8247 	beq.w	8009af8 <cppLoop+0x1fc0>
			HAL_Delay(500);
 800966a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800966e:	f000 fb6f 	bl	8009d50 <HAL_Delay>

			led.LR(1, -1);
 8009672:	f04f 32ff 	mov.w	r2, #4294967295
 8009676:	2101      	movs	r1, #1
 8009678:	4820      	ldr	r0, [pc, #128]	; (80096fc <cppLoop+0x1bc4>)
 800967a:	f7f8 fe6b 	bl	8002354 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800967e:	2101      	movs	r1, #1
 8009680:	482e      	ldr	r0, [pc, #184]	; (800973c <cppLoop+0x1c04>)
 8009682:	f7fa fd23 	bl	80040cc <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009686:	4b31      	ldr	r3, [pc, #196]	; (800974c <cppLoop+0x1c14>)
 8009688:	edd3 7a00 	vldr	s15, [r3]
 800968c:	eeb0 0a67 	vmov.f32	s0, s15
 8009690:	482a      	ldr	r0, [pc, #168]	; (800973c <cppLoop+0x1c04>)
 8009692:	f7fa faee 	bl	8003c72 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009696:	4b2c      	ldr	r3, [pc, #176]	; (8009748 <cppLoop+0x1c10>)
 8009698:	edd3 7a00 	vldr	s15, [r3]
 800969c:	eeb0 0a67 	vmov.f32	s0, s15
 80096a0:	4826      	ldr	r0, [pc, #152]	; (800973c <cppLoop+0x1c04>)
 80096a2:	f7fa faf6 	bl	8003c92 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80096a6:	4b29      	ldr	r3, [pc, #164]	; (800974c <cppLoop+0x1c14>)
 80096a8:	edd3 7a00 	vldr	s15, [r3]
 80096ac:	eeb0 0a67 	vmov.f32	s0, s15
 80096b0:	4822      	ldr	r0, [pc, #136]	; (800973c <cppLoop+0x1c04>)
 80096b2:	f7fa fb0e 	bl	8003cd2 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096b6:	4821      	ldr	r0, [pc, #132]	; (800973c <cppLoop+0x1c04>)
 80096b8:	f7fa fefe 	bl	80044b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 80096bc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80096c0:	f000 fb46 	bl	8009d50 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80096c4:	eddf 1a11 	vldr	s3, [pc, #68]	; 800970c <cppLoop+0x1bd4>
 80096c8:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800970c <cppLoop+0x1bd4>
 80096cc:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800970c <cppLoop+0x1bd4>
 80096d0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800970c <cppLoop+0x1bd4>
 80096d4:	480e      	ldr	r0, [pc, #56]	; (8009710 <cppLoop+0x1bd8>)
 80096d6:	f7f7 fdbb 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80096da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096de:	f000 fb37 	bl	8009d50 <HAL_Delay>

			line_trace.running();
 80096e2:	4816      	ldr	r0, [pc, #88]	; (800973c <cppLoop+0x1c04>)
 80096e4:	f7fa fd30 	bl	8004148 <_ZN9LineTrace7runningEv>

			esc.off();
 80096e8:	4809      	ldr	r0, [pc, #36]	; (8009710 <cppLoop+0x1bd8>)
 80096ea:	f7f7 fe4b 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80096ee:	f04f 32ff 	mov.w	r2, #4294967295
 80096f2:	2100      	movs	r1, #0
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <cppLoop+0x1bc4>)
 80096f6:	f7f8 fe2d 	bl	8002354 <_ZN3LED2LREaa>
		}

		break;
 80096fa:	e1fd      	b.n	8009af8 <cppLoop+0x1fc0>
 80096fc:	200005cc 	.word	0x200005cc
 8009700:	08019fa4 	.word	0x08019fa4
 8009704:	08019fa8 	.word	0x08019fa8
 8009708:	200005c0 	.word	0x200005c0
 800970c:	3e99999a 	.word	0x3e99999a
 8009710:	2001db58 	.word	0x2001db58
 8009714:	08019fb0 	.word	0x08019fb0
 8009718:	08019fb4 	.word	0x08019fb4
 800971c:	200005f0 	.word	0x200005f0
 8009720:	2001dadc 	.word	0x2001dadc
 8009724:	00000000 	.word	0x00000000
 8009728:	08019fc0 	.word	0x08019fc0
 800972c:	08019fcc 	.word	0x08019fcc
 8009730:	08019fd8 	.word	0x08019fd8
 8009734:	20042284 	.word	0x20042284
 8009738:	08019e7c 	.word	0x08019e7c
 800973c:	2001db5c 	.word	0x2001db5c
 8009740:	20042294 	.word	0x20042294
 8009744:	08019fe4 	.word	0x08019fe4
 8009748:	2004227c 	.word	0x2004227c
 800974c:	2004228c 	.word	0x2004228c

	case 15:
		led.fullColor('W');
 8009750:	2157      	movs	r1, #87	; 0x57
 8009752:	48ab      	ldr	r0, [pc, #684]	; (8009a00 <cppLoop+0x1ec8>)
 8009754:	f7f8 fd42 	bl	80021dc <_ZN3LED9fullColorEc>

		lcd_clear();
 8009758:	f7f7 fca2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800975c:	2100      	movs	r1, #0
 800975e:	2000      	movs	r0, #0
 8009760:	f7f7 fcae 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009764:	48a7      	ldr	r0, [pc, #668]	; (8009a04 <cppLoop+0x1ecc>)
 8009766:	f7fa fa02 	bl	8003b6e <_ZN9LineTrace5getKpEv>
 800976a:	eeb0 7a40 	vmov.f32	s14, s0
 800976e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8009a08 <cppLoop+0x1ed0>
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	eeb0 0a67 	vmov.f32	s0, s15
 800977a:	f7f9 f95b 	bl	8002a34 <_ZSt3absf>
 800977e:	ee10 3a10 	vmov	r3, s0
 8009782:	4618      	mov	r0, r3
 8009784:	f7f6 fef8 	bl	8000578 <__aeabi_f2d>
 8009788:	4603      	mov	r3, r0
 800978a:	460c      	mov	r4, r1
 800978c:	461a      	mov	r2, r3
 800978e:	4623      	mov	r3, r4
 8009790:	489e      	ldr	r0, [pc, #632]	; (8009a0c <cppLoop+0x1ed4>)
 8009792:	f7f7 fcbf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009796:	2101      	movs	r1, #1
 8009798:	2000      	movs	r0, #0
 800979a:	f7f7 fc91 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800979e:	4899      	ldr	r0, [pc, #612]	; (8009a04 <cppLoop+0x1ecc>)
 80097a0:	f7fa f9f4 	bl	8003b8c <_ZN9LineTrace5getKiEv>
 80097a4:	eeb0 7a40 	vmov.f32	s14, s0
 80097a8:	eddf 7a99 	vldr	s15, [pc, #612]	; 8009a10 <cppLoop+0x1ed8>
 80097ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b0:	eeb0 0a67 	vmov.f32	s0, s15
 80097b4:	f7f9 f93e 	bl	8002a34 <_ZSt3absf>
 80097b8:	ee10 3a10 	vmov	r3, s0
 80097bc:	4618      	mov	r0, r3
 80097be:	f7f6 fedb 	bl	8000578 <__aeabi_f2d>
 80097c2:	4605      	mov	r5, r0
 80097c4:	460e      	mov	r6, r1
 80097c6:	488f      	ldr	r0, [pc, #572]	; (8009a04 <cppLoop+0x1ecc>)
 80097c8:	f7fa f9ef 	bl	8003baa <_ZN9LineTrace5getKdEv>
 80097cc:	eeb0 7a40 	vmov.f32	s14, s0
 80097d0:	eddf 7a90 	vldr	s15, [pc, #576]	; 8009a14 <cppLoop+0x1edc>
 80097d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d8:	eeb0 0a67 	vmov.f32	s0, s15
 80097dc:	f7f9 f92a 	bl	8002a34 <_ZSt3absf>
 80097e0:	ee10 3a10 	vmov	r3, s0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7f6 fec7 	bl	8000578 <__aeabi_f2d>
 80097ea:	4603      	mov	r3, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	e9cd 3400 	strd	r3, r4, [sp]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4633      	mov	r3, r6
 80097f6:	4888      	ldr	r0, [pc, #544]	; (8009a18 <cppLoop+0x1ee0>)
 80097f8:	f7f7 fc8c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80097fc:	4887      	ldr	r0, [pc, #540]	; (8009a1c <cppLoop+0x1ee4>)
 80097fe:	f7f8 fc89 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009802:	4603      	mov	r3, r0
 8009804:	2b08      	cmp	r3, #8
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d021      	beq.n	8009856 <cppLoop+0x1d1e>
			led.LR(-1, 1);
 8009812:	2201      	movs	r2, #1
 8009814:	f04f 31ff 	mov.w	r1, #4294967295
 8009818:	4879      	ldr	r0, [pc, #484]	; (8009a00 <cppLoop+0x1ec8>)
 800981a:	f7f8 fd9b 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800981e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009822:	f000 fa95 	bl	8009d50 <HAL_Delay>

			selector++;
 8009826:	4b7e      	ldr	r3, [pc, #504]	; (8009a20 <cppLoop+0x1ee8>)
 8009828:	f9b3 3000 	ldrsh.w	r3, [r3]
 800982c:	b29b      	uxth	r3, r3
 800982e:	3301      	adds	r3, #1
 8009830:	b29b      	uxth	r3, r3
 8009832:	b21a      	sxth	r2, r3
 8009834:	4b7a      	ldr	r3, [pc, #488]	; (8009a20 <cppLoop+0x1ee8>)
 8009836:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8009838:	4b79      	ldr	r3, [pc, #484]	; (8009a20 <cppLoop+0x1ee8>)
 800983a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800983e:	2b02      	cmp	r3, #2
 8009840:	dd02      	ble.n	8009848 <cppLoop+0x1d10>
 8009842:	4b77      	ldr	r3, [pc, #476]	; (8009a20 <cppLoop+0x1ee8>)
 8009844:	2200      	movs	r2, #0
 8009846:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009848:	2200      	movs	r2, #0
 800984a:	f04f 31ff 	mov.w	r1, #4294967295
 800984e:	486c      	ldr	r0, [pc, #432]	; (8009a00 <cppLoop+0x1ec8>)
 8009850:	f7f8 fd80 	bl	8002354 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009854:	e152      	b.n	8009afc <cppLoop+0x1fc4>
		else if(joy_stick.getValue() == JOY_R){
 8009856:	4871      	ldr	r0, [pc, #452]	; (8009a1c <cppLoop+0x1ee4>)
 8009858:	f7f8 fc5c 	bl	8002114 <_ZN8JoyStick8getValueEv>
 800985c:	4603      	mov	r3, r0
 800985e:	2b10      	cmp	r3, #16
 8009860:	bf0c      	ite	eq
 8009862:	2301      	moveq	r3, #1
 8009864:	2300      	movne	r3, #0
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b00      	cmp	r3, #0
 800986a:	d058      	beq.n	800991e <cppLoop+0x1de6>
			led.LR(-1, 1);
 800986c:	2201      	movs	r2, #1
 800986e:	f04f 31ff 	mov.w	r1, #4294967295
 8009872:	4863      	ldr	r0, [pc, #396]	; (8009a00 <cppLoop+0x1ec8>)
 8009874:	f7f8 fd6e 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009878:	2064      	movs	r0, #100	; 0x64
 800987a:	f000 fa69 	bl	8009d50 <HAL_Delay>
			if(selector == 0){
 800987e:	4b68      	ldr	r3, [pc, #416]	; (8009a20 <cppLoop+0x1ee8>)
 8009880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d113      	bne.n	80098b0 <cppLoop+0x1d78>
				adj_kp = adj_kp + 0.00001;
 8009888:	4b66      	ldr	r3, [pc, #408]	; (8009a24 <cppLoop+0x1eec>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f7f6 fe73 	bl	8000578 <__aeabi_f2d>
 8009892:	a355      	add	r3, pc, #340	; (adr r3, 80099e8 <cppLoop+0x1eb0>)
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	f7f6 fd10 	bl	80002bc <__adddf3>
 800989c:	4603      	mov	r3, r0
 800989e:	460c      	mov	r4, r1
 80098a0:	4618      	mov	r0, r3
 80098a2:	4621      	mov	r1, r4
 80098a4:	f7f7 f9b8 	bl	8000c18 <__aeabi_d2f>
 80098a8:	4602      	mov	r2, r0
 80098aa:	4b5e      	ldr	r3, [pc, #376]	; (8009a24 <cppLoop+0x1eec>)
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	e02b      	b.n	8009908 <cppLoop+0x1dd0>
			else if(selector == 1){
 80098b0:	4b5b      	ldr	r3, [pc, #364]	; (8009a20 <cppLoop+0x1ee8>)
 80098b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d113      	bne.n	80098e2 <cppLoop+0x1daa>
				adj_ki = adj_ki + 0.0001;
 80098ba:	4b5b      	ldr	r3, [pc, #364]	; (8009a28 <cppLoop+0x1ef0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7f6 fe5a 	bl	8000578 <__aeabi_f2d>
 80098c4:	a34a      	add	r3, pc, #296	; (adr r3, 80099f0 <cppLoop+0x1eb8>)
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f7f6 fcf7 	bl	80002bc <__adddf3>
 80098ce:	4603      	mov	r3, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	4618      	mov	r0, r3
 80098d4:	4621      	mov	r1, r4
 80098d6:	f7f7 f99f 	bl	8000c18 <__aeabi_d2f>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b52      	ldr	r3, [pc, #328]	; (8009a28 <cppLoop+0x1ef0>)
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	e012      	b.n	8009908 <cppLoop+0x1dd0>
				adj_kd = adj_kd + 0.000001;
 80098e2:	4b52      	ldr	r3, [pc, #328]	; (8009a2c <cppLoop+0x1ef4>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f7f6 fe46 	bl	8000578 <__aeabi_f2d>
 80098ec:	a342      	add	r3, pc, #264	; (adr r3, 80099f8 <cppLoop+0x1ec0>)
 80098ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f2:	f7f6 fce3 	bl	80002bc <__adddf3>
 80098f6:	4603      	mov	r3, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	4618      	mov	r0, r3
 80098fc:	4621      	mov	r1, r4
 80098fe:	f7f7 f98b 	bl	8000c18 <__aeabi_d2f>
 8009902:	4602      	mov	r2, r0
 8009904:	4b49      	ldr	r3, [pc, #292]	; (8009a2c <cppLoop+0x1ef4>)
 8009906:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009908:	2152      	movs	r1, #82	; 0x52
 800990a:	483d      	ldr	r0, [pc, #244]	; (8009a00 <cppLoop+0x1ec8>)
 800990c:	f7f8 fc66 	bl	80021dc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009910:	2200      	movs	r2, #0
 8009912:	f04f 31ff 	mov.w	r1, #4294967295
 8009916:	483a      	ldr	r0, [pc, #232]	; (8009a00 <cppLoop+0x1ec8>)
 8009918:	f7f8 fd1c 	bl	8002354 <_ZN3LED2LREaa>
		break;
 800991c:	e0ee      	b.n	8009afc <cppLoop+0x1fc4>
		else if(joy_stick.getValue() == JOY_L){
 800991e:	483f      	ldr	r0, [pc, #252]	; (8009a1c <cppLoop+0x1ee4>)
 8009920:	f7f8 fbf8 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009924:	4603      	mov	r3, r0
 8009926:	2b01      	cmp	r3, #1
 8009928:	bf0c      	ite	eq
 800992a:	2301      	moveq	r3, #1
 800992c:	2300      	movne	r3, #0
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b00      	cmp	r3, #0
 8009932:	d07d      	beq.n	8009a30 <cppLoop+0x1ef8>
			led.LR(-1, 1);
 8009934:	2201      	movs	r2, #1
 8009936:	f04f 31ff 	mov.w	r1, #4294967295
 800993a:	4831      	ldr	r0, [pc, #196]	; (8009a00 <cppLoop+0x1ec8>)
 800993c:	f7f8 fd0a 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009940:	2064      	movs	r0, #100	; 0x64
 8009942:	f000 fa05 	bl	8009d50 <HAL_Delay>
			if(selector == 0){
 8009946:	4b36      	ldr	r3, [pc, #216]	; (8009a20 <cppLoop+0x1ee8>)
 8009948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d113      	bne.n	8009978 <cppLoop+0x1e40>
				adj_kp = adj_kp - 0.00001;
 8009950:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <cppLoop+0x1eec>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4618      	mov	r0, r3
 8009956:	f7f6 fe0f 	bl	8000578 <__aeabi_f2d>
 800995a:	a323      	add	r3, pc, #140	; (adr r3, 80099e8 <cppLoop+0x1eb0>)
 800995c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009960:	f7f6 fcaa 	bl	80002b8 <__aeabi_dsub>
 8009964:	4603      	mov	r3, r0
 8009966:	460c      	mov	r4, r1
 8009968:	4618      	mov	r0, r3
 800996a:	4621      	mov	r1, r4
 800996c:	f7f7 f954 	bl	8000c18 <__aeabi_d2f>
 8009970:	4602      	mov	r2, r0
 8009972:	4b2c      	ldr	r3, [pc, #176]	; (8009a24 <cppLoop+0x1eec>)
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e02b      	b.n	80099d0 <cppLoop+0x1e98>
			else if(selector == 1){
 8009978:	4b29      	ldr	r3, [pc, #164]	; (8009a20 <cppLoop+0x1ee8>)
 800997a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d113      	bne.n	80099aa <cppLoop+0x1e72>
				adj_ki = adj_ki - 0.0001;
 8009982:	4b29      	ldr	r3, [pc, #164]	; (8009a28 <cppLoop+0x1ef0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4618      	mov	r0, r3
 8009988:	f7f6 fdf6 	bl	8000578 <__aeabi_f2d>
 800998c:	a318      	add	r3, pc, #96	; (adr r3, 80099f0 <cppLoop+0x1eb8>)
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f7f6 fc91 	bl	80002b8 <__aeabi_dsub>
 8009996:	4603      	mov	r3, r0
 8009998:	460c      	mov	r4, r1
 800999a:	4618      	mov	r0, r3
 800999c:	4621      	mov	r1, r4
 800999e:	f7f7 f93b 	bl	8000c18 <__aeabi_d2f>
 80099a2:	4602      	mov	r2, r0
 80099a4:	4b20      	ldr	r3, [pc, #128]	; (8009a28 <cppLoop+0x1ef0>)
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	e012      	b.n	80099d0 <cppLoop+0x1e98>
				adj_kd = adj_kd - 0.000001;
 80099aa:	4b20      	ldr	r3, [pc, #128]	; (8009a2c <cppLoop+0x1ef4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7f6 fde2 	bl	8000578 <__aeabi_f2d>
 80099b4:	a310      	add	r3, pc, #64	; (adr r3, 80099f8 <cppLoop+0x1ec0>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f7f6 fc7d 	bl	80002b8 <__aeabi_dsub>
 80099be:	4603      	mov	r3, r0
 80099c0:	460c      	mov	r4, r1
 80099c2:	4618      	mov	r0, r3
 80099c4:	4621      	mov	r1, r4
 80099c6:	f7f7 f927 	bl	8000c18 <__aeabi_d2f>
 80099ca:	4602      	mov	r2, r0
 80099cc:	4b17      	ldr	r3, [pc, #92]	; (8009a2c <cppLoop+0x1ef4>)
 80099ce:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80099d0:	2152      	movs	r1, #82	; 0x52
 80099d2:	480b      	ldr	r0, [pc, #44]	; (8009a00 <cppLoop+0x1ec8>)
 80099d4:	f7f8 fc02 	bl	80021dc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80099d8:	2200      	movs	r2, #0
 80099da:	f04f 31ff 	mov.w	r1, #4294967295
 80099de:	4808      	ldr	r0, [pc, #32]	; (8009a00 <cppLoop+0x1ec8>)
 80099e0:	f7f8 fcb8 	bl	8002354 <_ZN3LED2LREaa>
		break;
 80099e4:	e08a      	b.n	8009afc <cppLoop+0x1fc4>
 80099e6:	bf00      	nop
 80099e8:	88e368f1 	.word	0x88e368f1
 80099ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80099f0:	eb1c432d 	.word	0xeb1c432d
 80099f4:	3f1a36e2 	.word	0x3f1a36e2
 80099f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80099fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8009a00:	200005cc 	.word	0x200005cc
 8009a04:	2001db5c 	.word	0x2001db5c
 8009a08:	447a0000 	.word	0x447a0000
 8009a0c:	08019ff0 	.word	0x08019ff0
 8009a10:	42c80000 	.word	0x42c80000
 8009a14:	461c4000 	.word	0x461c4000
 8009a18:	08019e34 	.word	0x08019e34
 8009a1c:	200005c0 	.word	0x200005c0
 8009a20:	2004223a 	.word	0x2004223a
 8009a24:	20042244 	.word	0x20042244
 8009a28:	2004224c 	.word	0x2004224c
 8009a2c:	20042254 	.word	0x20042254
		else if(joy_stick.getValue() == JOY_C){
 8009a30:	4836      	ldr	r0, [pc, #216]	; (8009b0c <cppLoop+0x1fd4>)
 8009a32:	f7f8 fb6f 	bl	8002114 <_ZN8JoyStick8getValueEv>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2301      	moveq	r3, #1
 8009a3e:	2300      	movne	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d05a      	beq.n	8009afc <cppLoop+0x1fc4>
			led.LR(-1, 1);
 8009a46:	2201      	movs	r2, #1
 8009a48:	f04f 31ff 	mov.w	r1, #4294967295
 8009a4c:	4830      	ldr	r0, [pc, #192]	; (8009b10 <cppLoop+0x1fd8>)
 8009a4e:	f7f8 fc81 	bl	8002354 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009a52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a56:	f000 f97b 	bl	8009d50 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	4b2d      	ldr	r3, [pc, #180]	; (8009b14 <cppLoop+0x1fdc>)
 8009a60:	2201      	movs	r2, #1
 8009a62:	492d      	ldr	r1, [pc, #180]	; (8009b18 <cppLoop+0x1fe0>)
 8009a64:	482d      	ldr	r0, [pc, #180]	; (8009b1c <cppLoop+0x1fe4>)
 8009a66:	f7f7 ff09 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <cppLoop+0x1fe8>)
 8009a70:	2201      	movs	r2, #1
 8009a72:	492c      	ldr	r1, [pc, #176]	; (8009b24 <cppLoop+0x1fec>)
 8009a74:	4829      	ldr	r0, [pc, #164]	; (8009b1c <cppLoop+0x1fe4>)
 8009a76:	f7f7 ff01 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	4b2a      	ldr	r3, [pc, #168]	; (8009b28 <cppLoop+0x1ff0>)
 8009a80:	2201      	movs	r2, #1
 8009a82:	492a      	ldr	r1, [pc, #168]	; (8009b2c <cppLoop+0x1ff4>)
 8009a84:	4825      	ldr	r0, [pc, #148]	; (8009b1c <cppLoop+0x1fe4>)
 8009a86:	f7f7 fef9 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009a8a:	4b22      	ldr	r3, [pc, #136]	; (8009b14 <cppLoop+0x1fdc>)
 8009a8c:	edd3 7a00 	vldr	s15, [r3]
 8009a90:	4b23      	ldr	r3, [pc, #140]	; (8009b20 <cppLoop+0x1fe8>)
 8009a92:	ed93 7a00 	vldr	s14, [r3]
 8009a96:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <cppLoop+0x1ff0>)
 8009a98:	edd3 6a00 	vldr	s13, [r3]
 8009a9c:	eeb0 1a66 	vmov.f32	s2, s13
 8009aa0:	eef0 0a47 	vmov.f32	s1, s14
 8009aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8009aa8:	4821      	ldr	r0, [pc, #132]	; (8009b30 <cppLoop+0x1ff8>)
 8009aaa:	f7fa f847 	bl	8003b3c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ab4:	4816      	ldr	r0, [pc, #88]	; (8009b10 <cppLoop+0x1fd8>)
 8009ab6:	f7f8 fc4d 	bl	8002354 <_ZN3LED2LREaa>
		break;
 8009aba:	e01f      	b.n	8009afc <cppLoop+0x1fc4>

	default:
		break;
 8009abc:	bf00      	nop
 8009abe:	e01e      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ac0:	bf00      	nop
 8009ac2:	e01c      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ac4:	bf00      	nop
 8009ac6:	e01a      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ac8:	bf00      	nop
 8009aca:	e018      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009acc:	bf00      	nop
 8009ace:	e016      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ad0:	bf00      	nop
 8009ad2:	e014      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ad4:	bf00      	nop
 8009ad6:	e012      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ad8:	bf00      	nop
 8009ada:	e010      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009adc:	bf00      	nop
 8009ade:	e00e      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ae0:	bf00      	nop
 8009ae2:	e00c      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ae4:	bf00      	nop
 8009ae6:	e00a      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009ae8:	bf00      	nop
 8009aea:	e008      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009aec:	bf00      	nop
 8009aee:	e006      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009af0:	bf00      	nop
 8009af2:	e004      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009af4:	bf00      	nop
 8009af6:	e002      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009af8:	bf00      	nop
 8009afa:	e000      	b.n	8009afe <cppLoop+0x1fc6>
		break;
 8009afc:	bf00      	nop

	}

	HAL_Delay(30);
 8009afe:	201e      	movs	r0, #30
 8009b00:	f000 f926 	bl	8009d50 <HAL_Delay>

}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b0c:	200005c0 	.word	0x200005c0
 8009b10:	200005cc 	.word	0x200005cc
 8009b14:	20042244 	.word	0x20042244
 8009b18:	08019ffc 	.word	0x08019ffc
 8009b1c:	08019e50 	.word	0x08019e50
 8009b20:	2004224c 	.word	0x2004224c
 8009b24:	0801a004 	.word	0x0801a004
 8009b28:	20042254 	.word	0x20042254
 8009b2c:	0801a00c 	.word	0x0801a00c
 8009b30:	2001db5c 	.word	0x2001db5c

08009b34 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b088      	sub	sp, #32
 8009b38:	af06      	add	r7, sp, #24
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d142      	bne.n	8009bca <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d13d      	bne.n	8009bca <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009b4e:	4821      	ldr	r0, [pc, #132]	; (8009bd4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b50:	f7f8 fc38 	bl	80023c4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009b54:	4820      	ldr	r0, [pc, #128]	; (8009bd8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b56:	f7fb fc43 	bl	80053e0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009b5a:	4820      	ldr	r0, [pc, #128]	; (8009bdc <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009b5c:	f7f8 face 	bl	80020fc <_ZN8JoyStickC1Ev>
Motor motor;
 8009b60:	481f      	ldr	r0, [pc, #124]	; (8009be0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b62:	f7fb f84e 	bl	8004c02 <_ZN5MotorC1Ev>
IMU imu;
 8009b66:	481f      	ldr	r0, [pc, #124]	; (8009be4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b68:	f7f8 f900 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009b6c:	481e      	ldr	r0, [pc, #120]	; (8009be8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b6e:	f7fa fd93 	bl	8004698 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009b72:	481e      	ldr	r0, [pc, #120]	; (8009bec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b74:	f7f7 fc2a 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009b78:	4b1a      	ldr	r3, [pc, #104]	; (8009be4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b7a:	4a1c      	ldr	r2, [pc, #112]	; (8009bec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b7c:	4918      	ldr	r1, [pc, #96]	; (8009be0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b7e:	481c      	ldr	r0, [pc, #112]	; (8009bf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b80:	f7fb ffb6 	bl	8005af0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009b84:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b86:	4a17      	ldr	r2, [pc, #92]	; (8009be4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b88:	4918      	ldr	r1, [pc, #96]	; (8009bec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b8a:	481a      	ldr	r0, [pc, #104]	; (8009bf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009b8c:	f7fb f938 	bl	8004e00 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009b90:	4819      	ldr	r0, [pc, #100]	; (8009bf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b92:	f7f7 fb1f 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009b96:	4b18      	ldr	r3, [pc, #96]	; (8009bf8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	4b12      	ldr	r3, [pc, #72]	; (8009be8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009ba0:	9303      	str	r3, [sp, #12]
 8009ba2:	4b14      	ldr	r3, [pc, #80]	; (8009bf4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009ba4:	9302      	str	r3, [sp, #8]
 8009ba6:	4b11      	ldr	r3, [pc, #68]	; (8009bec <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009bb0:	4a08      	ldr	r2, [pc, #32]	; (8009bd4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009bb2:	490b      	ldr	r1, [pc, #44]	; (8009be0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bb4:	4811      	ldr	r0, [pc, #68]	; (8009bfc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009bb6:	f7f8 ff4d 	bl	8002a54 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009bba:	4a09      	ldr	r2, [pc, #36]	; (8009be0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bbc:	490a      	ldr	r1, [pc, #40]	; (8009be8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009bbe:	4810      	ldr	r0, [pc, #64]	; (8009c00 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009bc0:	f7fb fd7c 	bl	80056bc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009bc4:	480f      	ldr	r0, [pc, #60]	; (8009c04 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009bc6:	f7fb fa9d 	bl	8005104 <_ZN13PathFollowingC1Ev>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200002bc 	.word	0x200002bc
 8009bd8:	200005b4 	.word	0x200005b4
 8009bdc:	200005c0 	.word	0x200005c0
 8009be0:	200005c8 	.word	0x200005c8
 8009be4:	200005dc 	.word	0x200005dc
 8009be8:	200005f0 	.word	0x200005f0
 8009bec:	2001dabc 	.word	0x2001dabc
 8009bf0:	2001dadc 	.word	0x2001dadc
 8009bf4:	2001db18 	.word	0x2001db18
 8009bf8:	2001db58 	.word	0x2001db58
 8009bfc:	2001db5c 	.word	0x2001db5c
 8009c00:	2002a904 	.word	0x2002a904
 8009c04:	2002ab10 	.word	0x2002ab10

08009c08 <_GLOBAL__sub_I_line_sensor>:
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c10:	2001      	movs	r0, #1
 8009c12:	f7ff ff8f 	bl	8009b34 <_Z41__static_initialization_and_destruction_0ii>
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c1e:	e003      	b.n	8009c28 <LoopCopyDataInit>

08009c20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c20:	4b0c      	ldr	r3, [pc, #48]	; (8009c54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c26:	3104      	adds	r1, #4

08009c28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c28:	480b      	ldr	r0, [pc, #44]	; (8009c58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c2a:	4b0c      	ldr	r3, [pc, #48]	; (8009c5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009c2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009c2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009c30:	d3f6      	bcc.n	8009c20 <CopyDataInit>
  ldr  r2, =_sbss
 8009c32:	4a0b      	ldr	r2, [pc, #44]	; (8009c60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009c34:	e002      	b.n	8009c3c <LoopFillZerobss>

08009c36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009c36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009c38:	f842 3b04 	str.w	r3, [r2], #4

08009c3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009c3c:	4b09      	ldr	r3, [pc, #36]	; (8009c64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009c3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009c40:	d3f9      	bcc.n	8009c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009c42:	f7fd fe57 	bl	80078f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c46:	f00b fdd3 	bl	80157f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c4a:	f7fc f991 	bl	8005f70 <main>
  bx  lr    
 8009c4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009c50:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009c54:	0801a600 	.word	0x0801a600
  ldr  r0, =_sdata
 8009c58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009c5c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009c60:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009c64:	20046c98 	.word	0x20046c98

08009c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c68:	e7fe      	b.n	8009c68 <ADC_IRQHandler>
	...

08009c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c70:	4b0e      	ldr	r3, [pc, #56]	; (8009cac <HAL_Init+0x40>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <HAL_Init+0x40>)
 8009c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <HAL_Init+0x40>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <HAL_Init+0x40>)
 8009c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c88:	4b08      	ldr	r3, [pc, #32]	; (8009cac <HAL_Init+0x40>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a07      	ldr	r2, [pc, #28]	; (8009cac <HAL_Init+0x40>)
 8009c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c94:	2003      	movs	r0, #3
 8009c96:	f000 fd51 	bl	800a73c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	f000 f808 	bl	8009cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009ca0:	f7fd f878 	bl	8006d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	40023c00 	.word	0x40023c00

08009cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cb8:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <HAL_InitTick+0x54>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <HAL_InitTick+0x58>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fd69 	bl	800a7a6 <HAL_SYSTICK_Config>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e00e      	b.n	8009cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b0f      	cmp	r3, #15
 8009ce2:	d80a      	bhi.n	8009cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	6879      	ldr	r1, [r7, #4]
 8009ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cec:	f000 fd31 	bl	800a752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cf0:	4a06      	ldr	r2, [pc, #24]	; (8009d0c <HAL_InitTick+0x5c>)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e000      	b.n	8009cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000000 	.word	0x20000000
 8009d08:	20000008 	.word	0x20000008
 8009d0c:	20000004 	.word	0x20000004

08009d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d10:	b480      	push	{r7}
 8009d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <HAL_IncTick+0x20>)
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <HAL_IncTick+0x24>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4413      	add	r3, r2
 8009d20:	4a04      	ldr	r2, [pc, #16]	; (8009d34 <HAL_IncTick+0x24>)
 8009d22:	6013      	str	r3, [r2, #0]
}
 8009d24:	bf00      	nop
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	20000008 	.word	0x20000008
 8009d34:	20044c20 	.word	0x20044c20

08009d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8009d3c:	4b03      	ldr	r3, [pc, #12]	; (8009d4c <HAL_GetTick+0x14>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	20044c20 	.word	0x20044c20

08009d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d58:	f7ff ffee 	bl	8009d38 <HAL_GetTick>
 8009d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d68:	d005      	beq.n	8009d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d6a:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <HAL_Delay+0x40>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4413      	add	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d76:	bf00      	nop
 8009d78:	f7ff ffde 	bl	8009d38 <HAL_GetTick>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d8f7      	bhi.n	8009d78 <HAL_Delay+0x28>
  {
  }
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	20000008 	.word	0x20000008

08009d94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e033      	b.n	8009e12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d109      	bne.n	8009dc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7fd f816 	bl	8006de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d118      	bne.n	8009e04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009dda:	f023 0302 	bic.w	r3, r3, #2
 8009dde:	f043 0202 	orr.w	r2, r3, #2
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fa5a 	bl	800a2a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	f023 0303 	bic.w	r3, r3, #3
 8009dfa:	f043 0201 	orr.w	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	641a      	str	r2, [r3, #64]	; 0x40
 8009e02:	e001      	b.n	8009e08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <HAL_ADC_Start_DMA+0x1e>
 8009e36:	2302      	movs	r3, #2
 8009e38:	e0cc      	b.n	8009fd4 <HAL_ADC_Start_DMA+0x1b8>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d018      	beq.n	8009e82 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	689a      	ldr	r2, [r3, #8]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0201 	orr.w	r2, r2, #1
 8009e5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009e60:	4b5e      	ldr	r3, [pc, #376]	; (8009fdc <HAL_ADC_Start_DMA+0x1c0>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a5e      	ldr	r2, [pc, #376]	; (8009fe0 <HAL_ADC_Start_DMA+0x1c4>)
 8009e66:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6a:	0c9a      	lsrs	r2, r3, #18
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	005b      	lsls	r3, r3, #1
 8009e70:	4413      	add	r3, r2
 8009e72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e74:	e002      	b.n	8009e7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1f9      	bne.n	8009e76 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	f003 0301 	and.w	r3, r3, #1
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	f040 80a0 	bne.w	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e9a:	f023 0301 	bic.w	r3, r3, #1
 8009e9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d007      	beq.n	8009ec4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ebc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ed0:	d106      	bne.n	8009ee0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed6:	f023 0206 	bic.w	r2, r3, #6
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	645a      	str	r2, [r3, #68]	; 0x44
 8009ede:	e002      	b.n	8009ee6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009eee:	4b3d      	ldr	r3, [pc, #244]	; (8009fe4 <HAL_ADC_Start_DMA+0x1c8>)
 8009ef0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef6:	4a3c      	ldr	r2, [pc, #240]	; (8009fe8 <HAL_ADC_Start_DMA+0x1cc>)
 8009ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009efe:	4a3b      	ldr	r2, [pc, #236]	; (8009fec <HAL_ADC_Start_DMA+0x1d0>)
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f06:	4a3a      	ldr	r2, [pc, #232]	; (8009ff0 <HAL_ADC_Start_DMA+0x1d4>)
 8009f08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009f12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009f22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	334c      	adds	r3, #76	; 0x4c
 8009f3e:	4619      	mov	r1, r3
 8009f40:	68ba      	ldr	r2, [r7, #8]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f000 fcea 	bl	800a91c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f003 031f 	and.w	r3, r3, #31
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d12a      	bne.n	8009faa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a26      	ldr	r2, [pc, #152]	; (8009ff4 <HAL_ADC_Start_DMA+0x1d8>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d015      	beq.n	8009f8a <HAL_ADC_Start_DMA+0x16e>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a25      	ldr	r2, [pc, #148]	; (8009ff8 <HAL_ADC_Start_DMA+0x1dc>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d105      	bne.n	8009f74 <HAL_ADC_Start_DMA+0x158>
 8009f68:	4b1e      	ldr	r3, [pc, #120]	; (8009fe4 <HAL_ADC_Start_DMA+0x1c8>)
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f003 031f 	and.w	r3, r3, #31
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d00a      	beq.n	8009f8a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a20      	ldr	r2, [pc, #128]	; (8009ffc <HAL_ADC_Start_DMA+0x1e0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d129      	bne.n	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
 8009f7e:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <HAL_ADC_Start_DMA+0x1c8>)
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f003 031f 	and.w	r3, r3, #31
 8009f86:	2b0f      	cmp	r3, #15
 8009f88:	d823      	bhi.n	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d11c      	bne.n	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	689a      	ldr	r2, [r3, #8]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009fa6:	609a      	str	r2, [r3, #8]
 8009fa8:	e013      	b.n	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a11      	ldr	r2, [pc, #68]	; (8009ff4 <HAL_ADC_Start_DMA+0x1d8>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d10e      	bne.n	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d107      	bne.n	8009fd2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689a      	ldr	r2, [r3, #8]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009fd0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	20000000 	.word	0x20000000
 8009fe0:	431bde83 	.word	0x431bde83
 8009fe4:	40012300 	.word	0x40012300
 8009fe8:	0800a499 	.word	0x0800a499
 8009fec:	0800a553 	.word	0x0800a553
 8009ff0:	0800a56f 	.word	0x0800a56f
 8009ff4:	40012000 	.word	0x40012000
 8009ff8:	40012100 	.word	0x40012100
 8009ffc:	40012200 	.word	0x40012200

0800a000 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a050:	2b01      	cmp	r3, #1
 800a052:	d101      	bne.n	800a058 <HAL_ADC_ConfigChannel+0x1c>
 800a054:	2302      	movs	r3, #2
 800a056:	e113      	b.n	800a280 <HAL_ADC_ConfigChannel+0x244>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2b09      	cmp	r3, #9
 800a066:	d925      	bls.n	800a0b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68d9      	ldr	r1, [r3, #12]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	b29b      	uxth	r3, r3
 800a074:	461a      	mov	r2, r3
 800a076:	4613      	mov	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4413      	add	r3, r2
 800a07c:	3b1e      	subs	r3, #30
 800a07e:	2207      	movs	r2, #7
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	43da      	mvns	r2, r3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	400a      	ands	r2, r1
 800a08c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68d9      	ldr	r1, [r3, #12]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	689a      	ldr	r2, [r3, #8]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	4618      	mov	r0, r3
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	005b      	lsls	r3, r3, #1
 800a0a4:	4403      	add	r3, r0
 800a0a6:	3b1e      	subs	r3, #30
 800a0a8:	409a      	lsls	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	60da      	str	r2, [r3, #12]
 800a0b2:	e022      	b.n	800a0fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6919      	ldr	r1, [r3, #16]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	2207      	movs	r2, #7
 800a0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ce:	43da      	mvns	r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	400a      	ands	r2, r1
 800a0d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6919      	ldr	r1, [r3, #16]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4403      	add	r3, r0
 800a0f0:	409a      	lsls	r2, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	2b06      	cmp	r3, #6
 800a100:	d824      	bhi.n	800a14c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	4613      	mov	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	4413      	add	r3, r2
 800a112:	3b05      	subs	r3, #5
 800a114:	221f      	movs	r2, #31
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	43da      	mvns	r2, r3
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	400a      	ands	r2, r1
 800a122:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4618      	mov	r0, r3
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685a      	ldr	r2, [r3, #4]
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	3b05      	subs	r3, #5
 800a13e:	fa00 f203 	lsl.w	r2, r0, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	635a      	str	r2, [r3, #52]	; 0x34
 800a14a:	e04c      	b.n	800a1e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2b0c      	cmp	r3, #12
 800a152:	d824      	bhi.n	800a19e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	3b23      	subs	r3, #35	; 0x23
 800a166:	221f      	movs	r2, #31
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	43da      	mvns	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	400a      	ands	r2, r1
 800a174:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	b29b      	uxth	r3, r3
 800a182:	4618      	mov	r0, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	3b23      	subs	r3, #35	; 0x23
 800a190:	fa00 f203 	lsl.w	r2, r0, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	430a      	orrs	r2, r1
 800a19a:	631a      	str	r2, [r3, #48]	; 0x30
 800a19c:	e023      	b.n	800a1e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	3b41      	subs	r3, #65	; 0x41
 800a1b0:	221f      	movs	r2, #31
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	43da      	mvns	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	400a      	ands	r2, r1
 800a1be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	685a      	ldr	r2, [r3, #4]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3b41      	subs	r3, #65	; 0x41
 800a1da:	fa00 f203 	lsl.w	r2, r0, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a1e6:	4b29      	ldr	r3, [pc, #164]	; (800a28c <HAL_ADC_ConfigChannel+0x250>)
 800a1e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a28      	ldr	r2, [pc, #160]	; (800a290 <HAL_ADC_ConfigChannel+0x254>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d10f      	bne.n	800a214 <HAL_ADC_ConfigChannel+0x1d8>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b12      	cmp	r3, #18
 800a1fa:	d10b      	bne.n	800a214 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a1d      	ldr	r2, [pc, #116]	; (800a290 <HAL_ADC_ConfigChannel+0x254>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d12b      	bne.n	800a276 <HAL_ADC_ConfigChannel+0x23a>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a1c      	ldr	r2, [pc, #112]	; (800a294 <HAL_ADC_ConfigChannel+0x258>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d003      	beq.n	800a230 <HAL_ADC_ConfigChannel+0x1f4>
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b11      	cmp	r3, #17
 800a22e:	d122      	bne.n	800a276 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a11      	ldr	r2, [pc, #68]	; (800a294 <HAL_ADC_ConfigChannel+0x258>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d111      	bne.n	800a276 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a252:	4b11      	ldr	r3, [pc, #68]	; (800a298 <HAL_ADC_ConfigChannel+0x25c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a11      	ldr	r2, [pc, #68]	; (800a29c <HAL_ADC_ConfigChannel+0x260>)
 800a258:	fba2 2303 	umull	r2, r3, r2, r3
 800a25c:	0c9a      	lsrs	r2, r3, #18
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	005b      	lsls	r3, r3, #1
 800a266:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a268:	e002      	b.n	800a270 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1f9      	bne.n	800a26a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2200      	movs	r2, #0
 800a27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	40012300 	.word	0x40012300
 800a290:	40012000 	.word	0x40012000
 800a294:	10000012 	.word	0x10000012
 800a298:	20000000 	.word	0x20000000
 800a29c:	431bde83 	.word	0x431bde83

0800a2a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a2a8:	4b79      	ldr	r3, [pc, #484]	; (800a490 <ADC_Init+0x1f0>)
 800a2aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6859      	ldr	r1, [r3, #4]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	021a      	lsls	r2, r3, #8
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	430a      	orrs	r2, r1
 800a2e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a2f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6859      	ldr	r1, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	430a      	orrs	r2, r1
 800a30a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689a      	ldr	r2, [r3, #8]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a31a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	6899      	ldr	r1, [r3, #8]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a332:	4a58      	ldr	r2, [pc, #352]	; (800a494 <ADC_Init+0x1f4>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d022      	beq.n	800a37e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6899      	ldr	r1, [r3, #8]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	689a      	ldr	r2, [r3, #8]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6899      	ldr	r1, [r3, #8]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	609a      	str	r2, [r3, #8]
 800a37c:	e00f      	b.n	800a39e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	689a      	ldr	r2, [r3, #8]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a38c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	689a      	ldr	r2, [r3, #8]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a39c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 0202 	bic.w	r2, r2, #2
 800a3ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6899      	ldr	r1, [r3, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	7e1b      	ldrb	r3, [r3, #24]
 800a3b8:	005a      	lsls	r2, r3, #1
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01b      	beq.n	800a404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685a      	ldr	r2, [r3, #4]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a3ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6859      	ldr	r1, [r3, #4]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	035a      	lsls	r2, r3, #13
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	605a      	str	r2, [r3, #4]
 800a402:	e007      	b.n	800a414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	3b01      	subs	r3, #1
 800a430:	051a      	lsls	r2, r3, #20
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	6899      	ldr	r1, [r3, #8]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a456:	025a      	lsls	r2, r3, #9
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689a      	ldr	r2, [r3, #8]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a46e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6899      	ldr	r1, [r3, #8]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	695b      	ldr	r3, [r3, #20]
 800a47a:	029a      	lsls	r2, r3, #10
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	430a      	orrs	r2, r1
 800a482:	609a      	str	r2, [r3, #8]
}
 800a484:	bf00      	nop
 800a486:	3714      	adds	r7, #20
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	40012300 	.word	0x40012300
 800a494:	0f000001 	.word	0x0f000001

0800a498 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d13c      	bne.n	800a52c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d12b      	bne.n	800a524 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d127      	bne.n	800a524 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d006      	beq.n	800a4f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d119      	bne.n	800a524 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685a      	ldr	r2, [r3, #4]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f022 0220 	bic.w	r2, r2, #32
 800a4fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a514:	2b00      	cmp	r3, #0
 800a516:	d105      	bne.n	800a524 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51c:	f043 0201 	orr.w	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f7ff fd6b 	bl	800a000 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a52a:	e00e      	b.n	800a54a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a530:	f003 0310 	and.w	r3, r3, #16
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff fd75 	bl	800a028 <HAL_ADC_ErrorCallback>
}
 800a53e:	e004      	b.n	800a54a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	4798      	blx	r3
}
 800a54a:	bf00      	nop
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fd57 	bl	800a014 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a566:	bf00      	nop
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b084      	sub	sp, #16
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2240      	movs	r2, #64	; 0x40
 800a580:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a586:	f043 0204 	orr.w	r2, r3, #4
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fd4a 	bl	800a028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a594:	bf00      	nop
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f003 0307 	and.w	r3, r3, #7
 800a5aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5ac:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <__NVIC_SetPriorityGrouping+0x44>)
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a5b8:	4013      	ands	r3, r2
 800a5ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a5c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a5c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a5ce:	4a04      	ldr	r2, [pc, #16]	; (800a5e0 <__NVIC_SetPriorityGrouping+0x44>)
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	60d3      	str	r3, [r2, #12]
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	e000ed00 	.word	0xe000ed00

0800a5e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a5e8:	4b04      	ldr	r3, [pc, #16]	; (800a5fc <__NVIC_GetPriorityGrouping+0x18>)
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	0a1b      	lsrs	r3, r3, #8
 800a5ee:	f003 0307 	and.w	r3, r3, #7
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	4603      	mov	r3, r0
 800a608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	db0b      	blt.n	800a62a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a612:	79fb      	ldrb	r3, [r7, #7]
 800a614:	f003 021f 	and.w	r2, r3, #31
 800a618:	4907      	ldr	r1, [pc, #28]	; (800a638 <__NVIC_EnableIRQ+0x38>)
 800a61a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	2001      	movs	r0, #1
 800a622:	fa00 f202 	lsl.w	r2, r0, r2
 800a626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	e000e100 	.word	0xe000e100

0800a63c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	4603      	mov	r3, r0
 800a644:	6039      	str	r1, [r7, #0]
 800a646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	db0a      	blt.n	800a666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	b2da      	uxtb	r2, r3
 800a654:	490c      	ldr	r1, [pc, #48]	; (800a688 <__NVIC_SetPriority+0x4c>)
 800a656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a65a:	0112      	lsls	r2, r2, #4
 800a65c:	b2d2      	uxtb	r2, r2
 800a65e:	440b      	add	r3, r1
 800a660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a664:	e00a      	b.n	800a67c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	4908      	ldr	r1, [pc, #32]	; (800a68c <__NVIC_SetPriority+0x50>)
 800a66c:	79fb      	ldrb	r3, [r7, #7]
 800a66e:	f003 030f 	and.w	r3, r3, #15
 800a672:	3b04      	subs	r3, #4
 800a674:	0112      	lsls	r2, r2, #4
 800a676:	b2d2      	uxtb	r2, r2
 800a678:	440b      	add	r3, r1
 800a67a:	761a      	strb	r2, [r3, #24]
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	e000e100 	.word	0xe000e100
 800a68c:	e000ed00 	.word	0xe000ed00

0800a690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a690:	b480      	push	{r7}
 800a692:	b089      	sub	sp, #36	; 0x24
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f1c3 0307 	rsb	r3, r3, #7
 800a6aa:	2b04      	cmp	r3, #4
 800a6ac:	bf28      	it	cs
 800a6ae:	2304      	movcs	r3, #4
 800a6b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	2b06      	cmp	r3, #6
 800a6b8:	d902      	bls.n	800a6c0 <NVIC_EncodePriority+0x30>
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	3b03      	subs	r3, #3
 800a6be:	e000      	b.n	800a6c2 <NVIC_EncodePriority+0x32>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ce:	43da      	mvns	r2, r3
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a6d8:	f04f 31ff 	mov.w	r1, #4294967295
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e2:	43d9      	mvns	r1, r3
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6e8:	4313      	orrs	r3, r2
         );
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3724      	adds	r7, #36	; 0x24
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3b01      	subs	r3, #1
 800a704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a708:	d301      	bcc.n	800a70e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a70a:	2301      	movs	r3, #1
 800a70c:	e00f      	b.n	800a72e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a70e:	4a0a      	ldr	r2, [pc, #40]	; (800a738 <SysTick_Config+0x40>)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	3b01      	subs	r3, #1
 800a714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a716:	210f      	movs	r1, #15
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	f7ff ff8e 	bl	800a63c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a720:	4b05      	ldr	r3, [pc, #20]	; (800a738 <SysTick_Config+0x40>)
 800a722:	2200      	movs	r2, #0
 800a724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a726:	4b04      	ldr	r3, [pc, #16]	; (800a738 <SysTick_Config+0x40>)
 800a728:	2207      	movs	r2, #7
 800a72a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	e000e010 	.word	0xe000e010

0800a73c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f7ff ff29 	bl	800a59c <__NVIC_SetPriorityGrouping>
}
 800a74a:	bf00      	nop
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}

0800a752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a752:	b580      	push	{r7, lr}
 800a754:	b086      	sub	sp, #24
 800a756:	af00      	add	r7, sp, #0
 800a758:	4603      	mov	r3, r0
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
 800a75e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a760:	2300      	movs	r3, #0
 800a762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a764:	f7ff ff3e 	bl	800a5e4 <__NVIC_GetPriorityGrouping>
 800a768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	6978      	ldr	r0, [r7, #20]
 800a770:	f7ff ff8e 	bl	800a690 <NVIC_EncodePriority>
 800a774:	4602      	mov	r2, r0
 800a776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a77a:	4611      	mov	r1, r2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f7ff ff5d 	bl	800a63c <__NVIC_SetPriority>
}
 800a782:	bf00      	nop
 800a784:	3718      	adds	r7, #24
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b082      	sub	sp, #8
 800a78e:	af00      	add	r7, sp, #0
 800a790:	4603      	mov	r3, r0
 800a792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a798:	4618      	mov	r0, r3
 800a79a:	f7ff ff31 	bl	800a600 <__NVIC_EnableIRQ>
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7ff ffa2 	bl	800a6f8 <SysTick_Config>
 800a7b4:	4603      	mov	r3, r0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
	...

0800a7c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a7cc:	f7ff fab4 	bl	8009d38 <HAL_GetTick>
 800a7d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d101      	bne.n	800a7dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e099      	b.n	800a910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 0201 	bic.w	r2, r2, #1
 800a7fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a7fc:	e00f      	b.n	800a81e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a7fe:	f7ff fa9b 	bl	8009d38 <HAL_GetTick>
 800a802:	4602      	mov	r2, r0
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	2b05      	cmp	r3, #5
 800a80a:	d908      	bls.n	800a81e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2220      	movs	r2, #32
 800a810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2203      	movs	r2, #3
 800a816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e078      	b.n	800a910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0301 	and.w	r3, r3, #1
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d1e8      	bne.n	800a7fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4b38      	ldr	r3, [pc, #224]	; (800a918 <HAL_DMA_Init+0x158>)
 800a838:	4013      	ands	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a84a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a1b      	ldr	r3, [r3, #32]
 800a868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	2b04      	cmp	r3, #4
 800a876:	d107      	bne.n	800a888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a880:	4313      	orrs	r3, r2
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	4313      	orrs	r3, r2
 800a886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	695b      	ldr	r3, [r3, #20]
 800a896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f023 0307 	bic.w	r3, r3, #7
 800a89e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a4:	697a      	ldr	r2, [r7, #20]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b04      	cmp	r3, #4
 800a8b0:	d117      	bne.n	800a8e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b6:	697a      	ldr	r2, [r7, #20]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00e      	beq.n	800a8e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fa9d 	bl	800ae04 <DMA_CheckFifoParam>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d008      	beq.n	800a8e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2240      	movs	r2, #64	; 0x40
 800a8d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e016      	b.n	800a910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fa54 	bl	800ad98 <DMA_CalcBaseAndBitshift>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8f8:	223f      	movs	r2, #63	; 0x3f
 800a8fa:	409a      	lsls	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2200      	movs	r2, #0
 800a904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	f010803f 	.word	0xf010803f

0800a91c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d101      	bne.n	800a942 <HAL_DMA_Start_IT+0x26>
 800a93e:	2302      	movs	r3, #2
 800a940:	e040      	b.n	800a9c4 <HAL_DMA_Start_IT+0xa8>
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b01      	cmp	r3, #1
 800a954:	d12f      	bne.n	800a9b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2202      	movs	r2, #2
 800a95a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2200      	movs	r2, #0
 800a962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	68b9      	ldr	r1, [r7, #8]
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 f9e6 	bl	800ad3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a974:	223f      	movs	r2, #63	; 0x3f
 800a976:	409a      	lsls	r2, r3
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f042 0216 	orr.w	r2, r2, #22
 800a98a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a990:	2b00      	cmp	r3, #0
 800a992:	d007      	beq.n	800a9a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0208 	orr.w	r2, r2, #8
 800a9a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f042 0201 	orr.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]
 800a9b4:	e005      	b.n	800a9c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a9be:	2302      	movs	r3, #2
 800a9c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d004      	beq.n	800a9ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2280      	movs	r2, #128	; 0x80
 800a9e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e00c      	b.n	800aa04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2205      	movs	r2, #5
 800a9ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f022 0201 	bic.w	r2, r2, #1
 800aa00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa1c:	4b92      	ldr	r3, [pc, #584]	; (800ac68 <HAL_DMA_IRQHandler+0x258>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a92      	ldr	r2, [pc, #584]	; (800ac6c <HAL_DMA_IRQHandler+0x25c>)
 800aa22:	fba2 2303 	umull	r2, r3, r2, r3
 800aa26:	0a9b      	lsrs	r3, r3, #10
 800aa28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa3a:	2208      	movs	r2, #8
 800aa3c:	409a      	lsls	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d01a      	beq.n	800aa7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d013      	beq.n	800aa7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 0204 	bic.w	r2, r2, #4
 800aa62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa68:	2208      	movs	r2, #8
 800aa6a:	409a      	lsls	r2, r3
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa74:	f043 0201 	orr.w	r2, r3, #1
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa80:	2201      	movs	r2, #1
 800aa82:	409a      	lsls	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4013      	ands	r3, r2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d012      	beq.n	800aab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00b      	beq.n	800aab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	409a      	lsls	r2, r3
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaaa:	f043 0202 	orr.w	r2, r3, #2
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aab6:	2204      	movs	r2, #4
 800aab8:	409a      	lsls	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4013      	ands	r3, r2
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d012      	beq.n	800aae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00b      	beq.n	800aae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aad4:	2204      	movs	r2, #4
 800aad6:	409a      	lsls	r2, r3
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aae0:	f043 0204 	orr.w	r2, r3, #4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaec:	2210      	movs	r2, #16
 800aaee:	409a      	lsls	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d043      	beq.n	800ab80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f003 0308 	and.w	r3, r3, #8
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d03c      	beq.n	800ab80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab0a:	2210      	movs	r2, #16
 800ab0c:	409a      	lsls	r2, r3
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d018      	beq.n	800ab52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d108      	bne.n	800ab40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d024      	beq.n	800ab80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	4798      	blx	r3
 800ab3e:	e01f      	b.n	800ab80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d01b      	beq.n	800ab80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	4798      	blx	r3
 800ab50:	e016      	b.n	800ab80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d107      	bne.n	800ab70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f022 0208 	bic.w	r2, r2, #8
 800ab6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d003      	beq.n	800ab80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab84:	2220      	movs	r2, #32
 800ab86:	409a      	lsls	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f000 808e 	beq.w	800acae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0310 	and.w	r3, r3, #16
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 8086 	beq.w	800acae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba6:	2220      	movs	r2, #32
 800aba8:	409a      	lsls	r2, r3
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b05      	cmp	r3, #5
 800abb8:	d136      	bne.n	800ac28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f022 0216 	bic.w	r2, r2, #22
 800abc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	695a      	ldr	r2, [r3, #20]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d103      	bne.n	800abea <HAL_DMA_IRQHandler+0x1da>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d007      	beq.n	800abfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f022 0208 	bic.w	r2, r2, #8
 800abf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abfe:	223f      	movs	r2, #63	; 0x3f
 800ac00:	409a      	lsls	r2, r3
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d07d      	beq.n	800ad1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
        }
        return;
 800ac26:	e078      	b.n	800ad1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d01c      	beq.n	800ac70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d108      	bne.n	800ac56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d030      	beq.n	800acae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
 800ac54:	e02b      	b.n	800acae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d027      	beq.n	800acae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
 800ac66:	e022      	b.n	800acae <HAL_DMA_IRQHandler+0x29e>
 800ac68:	20000000 	.word	0x20000000
 800ac6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10f      	bne.n	800ac9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f022 0210 	bic.w	r2, r2, #16
 800ac8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d032      	beq.n	800ad1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d022      	beq.n	800ad08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2205      	movs	r2, #5
 800acc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f022 0201 	bic.w	r2, r2, #1
 800acd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	3301      	adds	r3, #1
 800acde:	60bb      	str	r3, [r7, #8]
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d307      	bcc.n	800acf6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 0301 	and.w	r3, r3, #1
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1f2      	bne.n	800acda <HAL_DMA_IRQHandler+0x2ca>
 800acf4:	e000      	b.n	800acf8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800acf6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	4798      	blx	r3
 800ad18:	e000      	b.n	800ad1c <HAL_DMA_IRQHandler+0x30c>
        return;
 800ad1a:	bf00      	nop
    }
  }
}
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop

0800ad24 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	2b40      	cmp	r3, #64	; 0x40
 800ad68:	d108      	bne.n	800ad7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad7a:	e007      	b.n	800ad8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]
}
 800ad8c:	bf00      	nop
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	3b10      	subs	r3, #16
 800ada8:	4a14      	ldr	r2, [pc, #80]	; (800adfc <DMA_CalcBaseAndBitshift+0x64>)
 800adaa:	fba2 2303 	umull	r2, r3, r2, r3
 800adae:	091b      	lsrs	r3, r3, #4
 800adb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800adb2:	4a13      	ldr	r2, [pc, #76]	; (800ae00 <DMA_CalcBaseAndBitshift+0x68>)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d909      	bls.n	800adda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	1d1a      	adds	r2, r3, #4
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	659a      	str	r2, [r3, #88]	; 0x58
 800add8:	e007      	b.n	800adea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	aaaaaaab 	.word	0xaaaaaaab
 800ae00:	0801a048 	.word	0x0801a048

0800ae04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d11f      	bne.n	800ae5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d855      	bhi.n	800aed0 <DMA_CheckFifoParam+0xcc>
 800ae24:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <DMA_CheckFifoParam+0x28>)
 800ae26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2a:	bf00      	nop
 800ae2c:	0800ae3d 	.word	0x0800ae3d
 800ae30:	0800ae4f 	.word	0x0800ae4f
 800ae34:	0800ae3d 	.word	0x0800ae3d
 800ae38:	0800aed1 	.word	0x0800aed1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d045      	beq.n	800aed4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae4c:	e042      	b.n	800aed4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae56:	d13f      	bne.n	800aed8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae5c:	e03c      	b.n	800aed8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae66:	d121      	bne.n	800aeac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d836      	bhi.n	800aedc <DMA_CheckFifoParam+0xd8>
 800ae6e:	a201      	add	r2, pc, #4	; (adr r2, 800ae74 <DMA_CheckFifoParam+0x70>)
 800ae70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae74:	0800ae85 	.word	0x0800ae85
 800ae78:	0800ae8b 	.word	0x0800ae8b
 800ae7c:	0800ae85 	.word	0x0800ae85
 800ae80:	0800ae9d 	.word	0x0800ae9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e02f      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d024      	beq.n	800aee0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae9a:	e021      	b.n	800aee0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aea4:	d11e      	bne.n	800aee4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aeaa:	e01b      	b.n	800aee4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d902      	bls.n	800aeb8 <DMA_CheckFifoParam+0xb4>
 800aeb2:	2b03      	cmp	r3, #3
 800aeb4:	d003      	beq.n	800aebe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aeb6:	e018      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	73fb      	strb	r3, [r7, #15]
      break;
 800aebc:	e015      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00e      	beq.n	800aee8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	73fb      	strb	r3, [r7, #15]
      break;
 800aece:	e00b      	b.n	800aee8 <DMA_CheckFifoParam+0xe4>
      break;
 800aed0:	bf00      	nop
 800aed2:	e00a      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;
 800aed4:	bf00      	nop
 800aed6:	e008      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;
 800aed8:	bf00      	nop
 800aeda:	e006      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;
 800aedc:	bf00      	nop
 800aede:	e004      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;
 800aee0:	bf00      	nop
 800aee2:	e002      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;   
 800aee4:	bf00      	nop
 800aee6:	e000      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;
 800aee8:	bf00      	nop
    }
  } 
  
  return status; 
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b089      	sub	sp, #36	; 0x24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af02:	2300      	movs	r3, #0
 800af04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af06:	2300      	movs	r3, #0
 800af08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af0e:	2300      	movs	r3, #0
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e177      	b.n	800b204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af14:	2201      	movs	r2, #1
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	fa02 f303 	lsl.w	r3, r2, r3
 800af1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4013      	ands	r3, r2
 800af26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af28:	693a      	ldr	r2, [r7, #16]
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	f040 8166 	bne.w	800b1fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d00b      	beq.n	800af52 <HAL_GPIO_Init+0x5a>
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d007      	beq.n	800af52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af46:	2b11      	cmp	r3, #17
 800af48:	d003      	beq.n	800af52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	2b12      	cmp	r3, #18
 800af50:	d130      	bne.n	800afb4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	005b      	lsls	r3, r3, #1
 800af5c:	2203      	movs	r2, #3
 800af5e:	fa02 f303 	lsl.w	r3, r2, r3
 800af62:	43db      	mvns	r3, r3
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	4013      	ands	r3, r2
 800af68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	005b      	lsls	r3, r3, #1
 800af72:	fa02 f303 	lsl.w	r3, r2, r3
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	4313      	orrs	r3, r2
 800af7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af88:	2201      	movs	r2, #1
 800af8a:	69fb      	ldr	r3, [r7, #28]
 800af8c:	fa02 f303 	lsl.w	r3, r2, r3
 800af90:	43db      	mvns	r3, r3
 800af92:	69ba      	ldr	r2, [r7, #24]
 800af94:	4013      	ands	r3, r2
 800af96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	091b      	lsrs	r3, r3, #4
 800af9e:	f003 0201 	and.w	r2, r3, #1
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	fa02 f303 	lsl.w	r3, r2, r3
 800afa8:	69ba      	ldr	r2, [r7, #24]
 800afaa:	4313      	orrs	r3, r2
 800afac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	69ba      	ldr	r2, [r7, #24]
 800afb2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	005b      	lsls	r3, r3, #1
 800afbe:	2203      	movs	r2, #3
 800afc0:	fa02 f303 	lsl.w	r3, r2, r3
 800afc4:	43db      	mvns	r3, r3
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	4013      	ands	r3, r2
 800afca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	689a      	ldr	r2, [r3, #8]
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	005b      	lsls	r3, r3, #1
 800afd4:	fa02 f303 	lsl.w	r3, r2, r3
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	4313      	orrs	r3, r2
 800afdc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d003      	beq.n	800aff4 <HAL_GPIO_Init+0xfc>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	2b12      	cmp	r3, #18
 800aff2:	d123      	bne.n	800b03c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	08da      	lsrs	r2, r3, #3
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	3208      	adds	r2, #8
 800affc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	220f      	movs	r2, #15
 800b00c:	fa02 f303 	lsl.w	r3, r2, r3
 800b010:	43db      	mvns	r3, r3
 800b012:	69ba      	ldr	r2, [r7, #24]
 800b014:	4013      	ands	r3, r2
 800b016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	691a      	ldr	r2, [r3, #16]
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	f003 0307 	and.w	r3, r3, #7
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	fa02 f303 	lsl.w	r3, r2, r3
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	08da      	lsrs	r2, r3, #3
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	3208      	adds	r2, #8
 800b036:	69b9      	ldr	r1, [r7, #24]
 800b038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	2203      	movs	r2, #3
 800b048:	fa02 f303 	lsl.w	r3, r2, r3
 800b04c:	43db      	mvns	r3, r3
 800b04e:	69ba      	ldr	r2, [r7, #24]
 800b050:	4013      	ands	r3, r2
 800b052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f003 0203 	and.w	r2, r3, #3
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	005b      	lsls	r3, r3, #1
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	69ba      	ldr	r2, [r7, #24]
 800b066:	4313      	orrs	r3, r2
 800b068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 80c0 	beq.w	800b1fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b07e:	2300      	movs	r3, #0
 800b080:	60fb      	str	r3, [r7, #12]
 800b082:	4b65      	ldr	r3, [pc, #404]	; (800b218 <HAL_GPIO_Init+0x320>)
 800b084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b086:	4a64      	ldr	r2, [pc, #400]	; (800b218 <HAL_GPIO_Init+0x320>)
 800b088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b08c:	6453      	str	r3, [r2, #68]	; 0x44
 800b08e:	4b62      	ldr	r3, [pc, #392]	; (800b218 <HAL_GPIO_Init+0x320>)
 800b090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b096:	60fb      	str	r3, [r7, #12]
 800b098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b09a:	4a60      	ldr	r2, [pc, #384]	; (800b21c <HAL_GPIO_Init+0x324>)
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	089b      	lsrs	r3, r3, #2
 800b0a0:	3302      	adds	r3, #2
 800b0a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	f003 0303 	and.w	r3, r3, #3
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	220f      	movs	r2, #15
 800b0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b6:	43db      	mvns	r3, r3
 800b0b8:	69ba      	ldr	r2, [r7, #24]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a57      	ldr	r2, [pc, #348]	; (800b220 <HAL_GPIO_Init+0x328>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d037      	beq.n	800b136 <HAL_GPIO_Init+0x23e>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a56      	ldr	r2, [pc, #344]	; (800b224 <HAL_GPIO_Init+0x32c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d031      	beq.n	800b132 <HAL_GPIO_Init+0x23a>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a55      	ldr	r2, [pc, #340]	; (800b228 <HAL_GPIO_Init+0x330>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d02b      	beq.n	800b12e <HAL_GPIO_Init+0x236>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a54      	ldr	r2, [pc, #336]	; (800b22c <HAL_GPIO_Init+0x334>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d025      	beq.n	800b12a <HAL_GPIO_Init+0x232>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a53      	ldr	r2, [pc, #332]	; (800b230 <HAL_GPIO_Init+0x338>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d01f      	beq.n	800b126 <HAL_GPIO_Init+0x22e>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a52      	ldr	r2, [pc, #328]	; (800b234 <HAL_GPIO_Init+0x33c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d019      	beq.n	800b122 <HAL_GPIO_Init+0x22a>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a51      	ldr	r2, [pc, #324]	; (800b238 <HAL_GPIO_Init+0x340>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d013      	beq.n	800b11e <HAL_GPIO_Init+0x226>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a50      	ldr	r2, [pc, #320]	; (800b23c <HAL_GPIO_Init+0x344>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d00d      	beq.n	800b11a <HAL_GPIO_Init+0x222>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a4f      	ldr	r2, [pc, #316]	; (800b240 <HAL_GPIO_Init+0x348>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d007      	beq.n	800b116 <HAL_GPIO_Init+0x21e>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a4e      	ldr	r2, [pc, #312]	; (800b244 <HAL_GPIO_Init+0x34c>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d101      	bne.n	800b112 <HAL_GPIO_Init+0x21a>
 800b10e:	2309      	movs	r3, #9
 800b110:	e012      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b112:	230a      	movs	r3, #10
 800b114:	e010      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b116:	2308      	movs	r3, #8
 800b118:	e00e      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b11a:	2307      	movs	r3, #7
 800b11c:	e00c      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b11e:	2306      	movs	r3, #6
 800b120:	e00a      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b122:	2305      	movs	r3, #5
 800b124:	e008      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b126:	2304      	movs	r3, #4
 800b128:	e006      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b12a:	2303      	movs	r3, #3
 800b12c:	e004      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b12e:	2302      	movs	r3, #2
 800b130:	e002      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <HAL_GPIO_Init+0x240>
 800b136:	2300      	movs	r3, #0
 800b138:	69fa      	ldr	r2, [r7, #28]
 800b13a:	f002 0203 	and.w	r2, r2, #3
 800b13e:	0092      	lsls	r2, r2, #2
 800b140:	4093      	lsls	r3, r2
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	4313      	orrs	r3, r2
 800b146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b148:	4934      	ldr	r1, [pc, #208]	; (800b21c <HAL_GPIO_Init+0x324>)
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	089b      	lsrs	r3, r3, #2
 800b14e:	3302      	adds	r3, #2
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b156:	4b3c      	ldr	r3, [pc, #240]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	43db      	mvns	r3, r3
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	4013      	ands	r3, r2
 800b164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	4313      	orrs	r3, r2
 800b178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b17a:	4a33      	ldr	r2, [pc, #204]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b180:	4b31      	ldr	r3, [pc, #196]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	43db      	mvns	r3, r3
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	4013      	ands	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1a4:	4a28      	ldr	r2, [pc, #160]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b1aa:	4b27      	ldr	r3, [pc, #156]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d003      	beq.n	800b1ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b1ce:	4a1e      	ldr	r2, [pc, #120]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b1d4:	4b1c      	ldr	r3, [pc, #112]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	43db      	mvns	r3, r3
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b1f0:	69ba      	ldr	r2, [r7, #24]
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b1f8:	4a13      	ldr	r2, [pc, #76]	; (800b248 <HAL_GPIO_Init+0x350>)
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	3301      	adds	r3, #1
 800b202:	61fb      	str	r3, [r7, #28]
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	2b0f      	cmp	r3, #15
 800b208:	f67f ae84 	bls.w	800af14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b20c:	bf00      	nop
 800b20e:	3724      	adds	r7, #36	; 0x24
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	40023800 	.word	0x40023800
 800b21c:	40013800 	.word	0x40013800
 800b220:	40020000 	.word	0x40020000
 800b224:	40020400 	.word	0x40020400
 800b228:	40020800 	.word	0x40020800
 800b22c:	40020c00 	.word	0x40020c00
 800b230:	40021000 	.word	0x40021000
 800b234:	40021400 	.word	0x40021400
 800b238:	40021800 	.word	0x40021800
 800b23c:	40021c00 	.word	0x40021c00
 800b240:	40022000 	.word	0x40022000
 800b244:	40022400 	.word	0x40022400
 800b248:	40013c00 	.word	0x40013c00

0800b24c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	887b      	ldrh	r3, [r7, #2]
 800b25e:	4013      	ands	r3, r2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b264:	2301      	movs	r3, #1
 800b266:	73fb      	strb	r3, [r7, #15]
 800b268:	e001      	b.n	800b26e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	807b      	strh	r3, [r7, #2]
 800b288:	4613      	mov	r3, r2
 800b28a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b28c:	787b      	ldrb	r3, [r7, #1]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b292:	887a      	ldrh	r2, [r7, #2]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b298:	e003      	b.n	800b2a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b29a:	887b      	ldrh	r3, [r7, #2]
 800b29c:	041a      	lsls	r2, r3, #16
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	619a      	str	r2, [r3, #24]
}
 800b2a2:	bf00      	nop
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
	...

0800b2b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e11f      	b.n	800b502 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d106      	bne.n	800b2dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f7fb fe36 	bl	8006f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2224      	movs	r2, #36	; 0x24
 800b2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f022 0201 	bic.w	r2, r2, #1
 800b2f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b314:	f001 f96e 	bl	800c5f4 <HAL_RCC_GetPCLK1Freq>
 800b318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	4a7b      	ldr	r2, [pc, #492]	; (800b50c <HAL_I2C_Init+0x25c>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d807      	bhi.n	800b334 <HAL_I2C_Init+0x84>
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	4a7a      	ldr	r2, [pc, #488]	; (800b510 <HAL_I2C_Init+0x260>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	bf94      	ite	ls
 800b32c:	2301      	movls	r3, #1
 800b32e:	2300      	movhi	r3, #0
 800b330:	b2db      	uxtb	r3, r3
 800b332:	e006      	b.n	800b342 <HAL_I2C_Init+0x92>
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	4a77      	ldr	r2, [pc, #476]	; (800b514 <HAL_I2C_Init+0x264>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	bf94      	ite	ls
 800b33c:	2301      	movls	r3, #1
 800b33e:	2300      	movhi	r3, #0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b346:	2301      	movs	r3, #1
 800b348:	e0db      	b.n	800b502 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	4a72      	ldr	r2, [pc, #456]	; (800b518 <HAL_I2C_Init+0x268>)
 800b34e:	fba2 2303 	umull	r2, r3, r2, r3
 800b352:	0c9b      	lsrs	r3, r3, #18
 800b354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	430a      	orrs	r2, r1
 800b368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6a1b      	ldr	r3, [r3, #32]
 800b370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	4a64      	ldr	r2, [pc, #400]	; (800b50c <HAL_I2C_Init+0x25c>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d802      	bhi.n	800b384 <HAL_I2C_Init+0xd4>
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	3301      	adds	r3, #1
 800b382:	e009      	b.n	800b398 <HAL_I2C_Init+0xe8>
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b38a:	fb02 f303 	mul.w	r3, r2, r3
 800b38e:	4a63      	ldr	r2, [pc, #396]	; (800b51c <HAL_I2C_Init+0x26c>)
 800b390:	fba2 2303 	umull	r2, r3, r2, r3
 800b394:	099b      	lsrs	r3, r3, #6
 800b396:	3301      	adds	r3, #1
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	6812      	ldr	r2, [r2, #0]
 800b39c:	430b      	orrs	r3, r1
 800b39e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b3aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	4956      	ldr	r1, [pc, #344]	; (800b50c <HAL_I2C_Init+0x25c>)
 800b3b4:	428b      	cmp	r3, r1
 800b3b6:	d80d      	bhi.n	800b3d4 <HAL_I2C_Init+0x124>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	1e59      	subs	r1, r3, #1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	005b      	lsls	r3, r3, #1
 800b3c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3cc:	2b04      	cmp	r3, #4
 800b3ce:	bf38      	it	cc
 800b3d0:	2304      	movcc	r3, #4
 800b3d2:	e04f      	b.n	800b474 <HAL_I2C_Init+0x1c4>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d111      	bne.n	800b400 <HAL_I2C_Init+0x150>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	1e58      	subs	r0, r3, #1
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6859      	ldr	r1, [r3, #4]
 800b3e4:	460b      	mov	r3, r1
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	440b      	add	r3, r1
 800b3ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	bf0c      	ite	eq
 800b3f8:	2301      	moveq	r3, #1
 800b3fa:	2300      	movne	r3, #0
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	e012      	b.n	800b426 <HAL_I2C_Init+0x176>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	1e58      	subs	r0, r3, #1
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6859      	ldr	r1, [r3, #4]
 800b408:	460b      	mov	r3, r1
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	440b      	add	r3, r1
 800b40e:	0099      	lsls	r1, r3, #2
 800b410:	440b      	add	r3, r1
 800b412:	fbb0 f3f3 	udiv	r3, r0, r3
 800b416:	3301      	adds	r3, #1
 800b418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bf0c      	ite	eq
 800b420:	2301      	moveq	r3, #1
 800b422:	2300      	movne	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <HAL_I2C_Init+0x17e>
 800b42a:	2301      	movs	r3, #1
 800b42c:	e022      	b.n	800b474 <HAL_I2C_Init+0x1c4>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	689b      	ldr	r3, [r3, #8]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10e      	bne.n	800b454 <HAL_I2C_Init+0x1a4>
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	1e58      	subs	r0, r3, #1
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6859      	ldr	r1, [r3, #4]
 800b43e:	460b      	mov	r3, r1
 800b440:	005b      	lsls	r3, r3, #1
 800b442:	440b      	add	r3, r1
 800b444:	fbb0 f3f3 	udiv	r3, r0, r3
 800b448:	3301      	adds	r3, #1
 800b44a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b44e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b452:	e00f      	b.n	800b474 <HAL_I2C_Init+0x1c4>
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	1e58      	subs	r0, r3, #1
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6859      	ldr	r1, [r3, #4]
 800b45c:	460b      	mov	r3, r1
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	0099      	lsls	r1, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	fbb0 f3f3 	udiv	r3, r0, r3
 800b46a:	3301      	adds	r3, #1
 800b46c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b474:	6879      	ldr	r1, [r7, #4]
 800b476:	6809      	ldr	r1, [r1, #0]
 800b478:	4313      	orrs	r3, r2
 800b47a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	69da      	ldr	r2, [r3, #28]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6a1b      	ldr	r3, [r3, #32]
 800b48e:	431a      	orrs	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b4a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6911      	ldr	r1, [r2, #16]
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	68d2      	ldr	r2, [r2, #12]
 800b4ae:	4311      	orrs	r1, r2
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6812      	ldr	r2, [r2, #0]
 800b4b4:	430b      	orrs	r3, r1
 800b4b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	695a      	ldr	r2, [r3, #20]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	431a      	orrs	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2220      	movs	r2, #32
 800b4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	000186a0 	.word	0x000186a0
 800b510:	001e847f 	.word	0x001e847f
 800b514:	003d08ff 	.word	0x003d08ff
 800b518:	431bde83 	.word	0x431bde83
 800b51c:	10624dd3 	.word	0x10624dd3

0800b520 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b088      	sub	sp, #32
 800b524:	af02      	add	r7, sp, #8
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	607a      	str	r2, [r7, #4]
 800b52a:	461a      	mov	r2, r3
 800b52c:	460b      	mov	r3, r1
 800b52e:	817b      	strh	r3, [r7, #10]
 800b530:	4613      	mov	r3, r2
 800b532:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b534:	f7fe fc00 	bl	8009d38 <HAL_GetTick>
 800b538:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b20      	cmp	r3, #32
 800b544:	f040 80e0 	bne.w	800b708 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2319      	movs	r3, #25
 800b54e:	2201      	movs	r2, #1
 800b550:	4970      	ldr	r1, [pc, #448]	; (800b714 <HAL_I2C_Master_Transmit+0x1f4>)
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 fc58 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b55e:	2302      	movs	r3, #2
 800b560:	e0d3      	b.n	800b70a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d101      	bne.n	800b570 <HAL_I2C_Master_Transmit+0x50>
 800b56c:	2302      	movs	r3, #2
 800b56e:	e0cc      	b.n	800b70a <HAL_I2C_Master_Transmit+0x1ea>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b01      	cmp	r3, #1
 800b584:	d007      	beq.n	800b596 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f042 0201 	orr.w	r2, r2, #1
 800b594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2221      	movs	r2, #33	; 0x21
 800b5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2210      	movs	r2, #16
 800b5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	893a      	ldrh	r2, [r7, #8]
 800b5c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a50      	ldr	r2, [pc, #320]	; (800b718 <HAL_I2C_Master_Transmit+0x1f8>)
 800b5d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b5d8:	8979      	ldrh	r1, [r7, #10]
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	6a3a      	ldr	r2, [r7, #32]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 fac2 	bl	800bb68 <I2C_MasterRequestWrite>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e08d      	b.n	800b70a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	613b      	str	r3, [r7, #16]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	613b      	str	r3, [r7, #16]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	613b      	str	r3, [r7, #16]
 800b602:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b604:	e066      	b.n	800b6d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	6a39      	ldr	r1, [r7, #32]
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f000 fcd2 	bl	800bfb4 <I2C_WaitOnTXEFlagUntilTimeout>
 800b610:	4603      	mov	r3, r0
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00d      	beq.n	800b632 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b61a:	2b04      	cmp	r3, #4
 800b61c:	d107      	bne.n	800b62e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681a      	ldr	r2, [r3, #0]
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b62c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e06b      	b.n	800b70a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b636:	781a      	ldrb	r2, [r3, #0]
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	3b01      	subs	r3, #1
 800b650:	b29a      	uxth	r2, r3
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b65a:	3b01      	subs	r3, #1
 800b65c:	b29a      	uxth	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	f003 0304 	and.w	r3, r3, #4
 800b66c:	2b04      	cmp	r3, #4
 800b66e:	d11b      	bne.n	800b6a8 <HAL_I2C_Master_Transmit+0x188>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b674:	2b00      	cmp	r3, #0
 800b676:	d017      	beq.n	800b6a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b67c:	781a      	ldrb	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b688:	1c5a      	adds	r2, r3, #1
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b692:	b29b      	uxth	r3, r3
 800b694:	3b01      	subs	r3, #1
 800b696:	b29a      	uxth	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	6a39      	ldr	r1, [r7, #32]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 fcc2 	bl	800c036 <I2C_WaitOnBTFFlagUntilTimeout>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00d      	beq.n	800b6d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6bc:	2b04      	cmp	r3, #4
 800b6be:	d107      	bne.n	800b6d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e01a      	b.n	800b70a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d194      	bne.n	800b606 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2220      	movs	r2, #32
 800b6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b704:	2300      	movs	r3, #0
 800b706:	e000      	b.n	800b70a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b708:	2302      	movs	r3, #2
  }
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	00100002 	.word	0x00100002
 800b718:	ffff0000 	.word	0xffff0000

0800b71c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b08c      	sub	sp, #48	; 0x30
 800b720:	af02      	add	r7, sp, #8
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	607a      	str	r2, [r7, #4]
 800b726:	461a      	mov	r2, r3
 800b728:	460b      	mov	r3, r1
 800b72a:	817b      	strh	r3, [r7, #10]
 800b72c:	4613      	mov	r3, r2
 800b72e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b730:	f7fe fb02 	bl	8009d38 <HAL_GetTick>
 800b734:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	2b20      	cmp	r3, #32
 800b740:	f040 820b 	bne.w	800bb5a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	2319      	movs	r3, #25
 800b74a:	2201      	movs	r2, #1
 800b74c:	497c      	ldr	r1, [pc, #496]	; (800b940 <HAL_I2C_Master_Receive+0x224>)
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f000 fb5a 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b75a:	2302      	movs	r3, #2
 800b75c:	e1fe      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_I2C_Master_Receive+0x50>
 800b768:	2302      	movs	r3, #2
 800b76a:	e1f7      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2201      	movs	r2, #1
 800b770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d007      	beq.n	800b792 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681a      	ldr	r2, [r3, #0]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f042 0201 	orr.w	r2, r2, #1
 800b790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2222      	movs	r2, #34	; 0x22
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2210      	movs	r2, #16
 800b7ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	893a      	ldrh	r2, [r7, #8]
 800b7c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	4a5c      	ldr	r2, [pc, #368]	; (800b944 <HAL_I2C_Master_Receive+0x228>)
 800b7d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b7d4:	8979      	ldrh	r1, [r7, #10]
 800b7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7da:	68f8      	ldr	r0, [r7, #12]
 800b7dc:	f000 fa46 	bl	800bc6c <I2C_MasterRequestRead>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d001      	beq.n	800b7ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e1b8      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d113      	bne.n	800b81a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	623b      	str	r3, [r7, #32]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	623b      	str	r3, [r7, #32]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	623b      	str	r3, [r7, #32]
 800b806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	e18c      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d11b      	bne.n	800b85a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b832:	2300      	movs	r3, #0
 800b834:	61fb      	str	r3, [r7, #28]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	61fb      	str	r3, [r7, #28]
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	61fb      	str	r3, [r7, #28]
 800b846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b856:	601a      	str	r2, [r3, #0]
 800b858:	e16c      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b85e:	2b02      	cmp	r3, #2
 800b860:	d11b      	bne.n	800b89a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b882:	2300      	movs	r3, #0
 800b884:	61bb      	str	r3, [r7, #24]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	61bb      	str	r3, [r7, #24]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	61bb      	str	r3, [r7, #24]
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	e14c      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	617b      	str	r3, [r7, #20]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	617b      	str	r3, [r7, #20]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	617b      	str	r3, [r7, #20]
 800b8be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b8c0:	e138      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	f200 80f1 	bhi.w	800baae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d123      	bne.n	800b91c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 fbed 	bl	800c0b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e139      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691a      	ldr	r2, [r3, #16]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f2:	b2d2      	uxtb	r2, r2
 800b8f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b904:	3b01      	subs	r3, #1
 800b906:	b29a      	uxth	r2, r3
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b910:	b29b      	uxth	r3, r3
 800b912:	3b01      	subs	r3, #1
 800b914:	b29a      	uxth	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b91a:	e10b      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b920:	2b02      	cmp	r3, #2
 800b922:	d14e      	bne.n	800b9c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	9300      	str	r3, [sp, #0]
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	2200      	movs	r2, #0
 800b92c:	4906      	ldr	r1, [pc, #24]	; (800b948 <HAL_I2C_Master_Receive+0x22c>)
 800b92e:	68f8      	ldr	r0, [r7, #12]
 800b930:	f000 fa6a 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800b934:	4603      	mov	r3, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	d008      	beq.n	800b94c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b93a:	2301      	movs	r3, #1
 800b93c:	e10e      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
 800b93e:	bf00      	nop
 800b940:	00100002 	.word	0x00100002
 800b944:	ffff0000 	.word	0xffff0000
 800b948:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b95a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	691a      	ldr	r2, [r3, #16]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	691a      	ldr	r2, [r3, #16]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b998:	b2d2      	uxtb	r2, r2
 800b99a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	b29a      	uxth	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9c0:	e0b8      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	4966      	ldr	r1, [pc, #408]	; (800bb64 <HAL_I2C_Master_Receive+0x448>)
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 fa1b 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e0bf      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	691a      	ldr	r2, [r3, #16]
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f6:	b2d2      	uxtb	r2, r2
 800b9f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fe:	1c5a      	adds	r2, r3, #1
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	b29a      	uxth	r2, r3
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	3b01      	subs	r3, #1
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba24:	2200      	movs	r2, #0
 800ba26:	494f      	ldr	r1, [pc, #316]	; (800bb64 <HAL_I2C_Master_Receive+0x448>)
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f000 f9ed 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e091      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	691a      	ldr	r2, [r3, #16]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba52:	b2d2      	uxtb	r2, r2
 800ba54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	1c5a      	adds	r2, r3, #1
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba64:	3b01      	subs	r3, #1
 800ba66:	b29a      	uxth	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	3b01      	subs	r3, #1
 800ba74:	b29a      	uxth	r2, r3
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	691a      	ldr	r2, [r3, #16]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	b2d2      	uxtb	r2, r2
 800ba86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba8c:	1c5a      	adds	r2, r3, #1
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba96:	3b01      	subs	r3, #1
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	3b01      	subs	r3, #1
 800baa6:	b29a      	uxth	r2, r3
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baac:	e042      	b.n	800bb34 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800baae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f000 fb00 	bl	800c0b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e04c      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	691a      	ldr	r2, [r3, #16]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bacc:	b2d2      	uxtb	r2, r2
 800bace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bade:	3b01      	subs	r3, #1
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baea:	b29b      	uxth	r3, r3
 800baec:	3b01      	subs	r3, #1
 800baee:	b29a      	uxth	r2, r3
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	f003 0304 	and.w	r3, r3, #4
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d118      	bne.n	800bb34 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	691a      	ldr	r2, [r3, #16]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0c:	b2d2      	uxtb	r2, r2
 800bb0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb14:	1c5a      	adds	r2, r3, #1
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb2a:	b29b      	uxth	r3, r3
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	b29a      	uxth	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f47f aec2 	bne.w	800b8c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2220      	movs	r2, #32
 800bb42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bb56:	2300      	movs	r3, #0
 800bb58:	e000      	b.n	800bb5c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb5a:	2302      	movs	r3, #2
  }
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3728      	adds	r7, #40	; 0x28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	00010004 	.word	0x00010004

0800bb68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af02      	add	r7, sp, #8
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	607a      	str	r2, [r7, #4]
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	460b      	mov	r3, r1
 800bb76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	2b08      	cmp	r3, #8
 800bb82:	d006      	beq.n	800bb92 <I2C_MasterRequestWrite+0x2a>
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d003      	beq.n	800bb92 <I2C_MasterRequestWrite+0x2a>
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb90:	d108      	bne.n	800bba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	e00b      	b.n	800bbbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba8:	2b12      	cmp	r3, #18
 800bbaa:	d107      	bne.n	800bbbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f000 f91d 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00d      	beq.n	800bbf0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe2:	d103      	bne.n	800bbec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bbec:	2303      	movs	r3, #3
 800bbee:	e035      	b.n	800bc5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbf8:	d108      	bne.n	800bc0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bbfa:	897b      	ldrh	r3, [r7, #10]
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	461a      	mov	r2, r3
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bc08:	611a      	str	r2, [r3, #16]
 800bc0a:	e01b      	b.n	800bc44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bc0c:	897b      	ldrh	r3, [r7, #10]
 800bc0e:	11db      	asrs	r3, r3, #7
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	f003 0306 	and.w	r3, r3, #6
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f063 030f 	orn	r3, r3, #15
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	490e      	ldr	r1, [pc, #56]	; (800bc64 <I2C_MasterRequestWrite+0xfc>)
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f943 	bl	800beb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e010      	b.n	800bc5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc3a:	897b      	ldrh	r3, [r7, #10]
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	4907      	ldr	r1, [pc, #28]	; (800bc68 <I2C_MasterRequestWrite+0x100>)
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 f933 	bl	800beb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d001      	beq.n	800bc5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e000      	b.n	800bc5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}
 800bc64:	00010008 	.word	0x00010008
 800bc68:	00010002 	.word	0x00010002

0800bc6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af02      	add	r7, sp, #8
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	607a      	str	r2, [r7, #4]
 800bc76:	603b      	str	r3, [r7, #0]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d006      	beq.n	800bca6 <I2C_MasterRequestRead+0x3a>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	2b01      	cmp	r3, #1
 800bc9c:	d003      	beq.n	800bca6 <I2C_MasterRequestRead+0x3a>
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bca4:	d108      	bne.n	800bcb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681a      	ldr	r2, [r3, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	e00b      	b.n	800bcd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcbc:	2b11      	cmp	r3, #17
 800bcbe:	d107      	bne.n	800bcd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 f893 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00d      	beq.n	800bd04 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcf6:	d103      	bne.n	800bd00 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd00:	2303      	movs	r3, #3
 800bd02:	e079      	b.n	800bdf8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd0c:	d108      	bne.n	800bd20 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bd0e:	897b      	ldrh	r3, [r7, #10]
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	f043 0301 	orr.w	r3, r3, #1
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	611a      	str	r2, [r3, #16]
 800bd1e:	e05f      	b.n	800bde0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd20:	897b      	ldrh	r3, [r7, #10]
 800bd22:	11db      	asrs	r3, r3, #7
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	f003 0306 	and.w	r3, r3, #6
 800bd2a:	b2db      	uxtb	r3, r3
 800bd2c:	f063 030f 	orn	r3, r3, #15
 800bd30:	b2da      	uxtb	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	4930      	ldr	r1, [pc, #192]	; (800be00 <I2C_MasterRequestRead+0x194>)
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 f8b9 	bl	800beb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d001      	beq.n	800bd4e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e054      	b.n	800bdf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd4e:	897b      	ldrh	r3, [r7, #10]
 800bd50:	b2da      	uxtb	r2, r3
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	4929      	ldr	r1, [pc, #164]	; (800be04 <I2C_MasterRequestRead+0x198>)
 800bd5e:	68f8      	ldr	r0, [r7, #12]
 800bd60:	f000 f8a9 	bl	800beb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd64:	4603      	mov	r3, r0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d001      	beq.n	800bd6e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e044      	b.n	800bdf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd6e:	2300      	movs	r3, #0
 800bd70:	613b      	str	r3, [r7, #16]
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	613b      	str	r3, [r7, #16]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	613b      	str	r3, [r7, #16]
 800bd82:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd92:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 f831 	bl	800be08 <I2C_WaitOnFlagUntilTimeout>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00d      	beq.n	800bdc8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdba:	d103      	bne.n	800bdc4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdc2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e017      	b.n	800bdf8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bdc8:	897b      	ldrh	r3, [r7, #10]
 800bdca:	11db      	asrs	r3, r3, #7
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	f003 0306 	and.w	r3, r3, #6
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	f063 030e 	orn	r3, r3, #14
 800bdd8:	b2da      	uxtb	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	4907      	ldr	r1, [pc, #28]	; (800be04 <I2C_MasterRequestRead+0x198>)
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 f865 	bl	800beb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d001      	beq.n	800bdf6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e000      	b.n	800bdf8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	00010008 	.word	0x00010008
 800be04:	00010002 	.word	0x00010002

0800be08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	4613      	mov	r3, r2
 800be16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be18:	e025      	b.n	800be66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be20:	d021      	beq.n	800be66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be22:	f7fd ff89 	bl	8009d38 <HAL_GetTick>
 800be26:	4602      	mov	r2, r0
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	683a      	ldr	r2, [r7, #0]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d302      	bcc.n	800be38 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d116      	bne.n	800be66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2220      	movs	r2, #32
 800be42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be52:	f043 0220 	orr.w	r2, r3, #32
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e023      	b.n	800beae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	0c1b      	lsrs	r3, r3, #16
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d10d      	bne.n	800be8c <I2C_WaitOnFlagUntilTimeout+0x84>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	695b      	ldr	r3, [r3, #20]
 800be76:	43da      	mvns	r2, r3
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	4013      	ands	r3, r2
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	2b00      	cmp	r3, #0
 800be80:	bf0c      	ite	eq
 800be82:	2301      	moveq	r3, #1
 800be84:	2300      	movne	r3, #0
 800be86:	b2db      	uxtb	r3, r3
 800be88:	461a      	mov	r2, r3
 800be8a:	e00c      	b.n	800bea6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	43da      	mvns	r2, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	4013      	ands	r3, r2
 800be98:	b29b      	uxth	r3, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	bf0c      	ite	eq
 800be9e:	2301      	moveq	r3, #1
 800bea0:	2300      	movne	r3, #0
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	461a      	mov	r2, r3
 800bea6:	79fb      	ldrb	r3, [r7, #7]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d0b6      	beq.n	800be1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}

0800beb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800beb6:	b580      	push	{r7, lr}
 800beb8:	b084      	sub	sp, #16
 800beba:	af00      	add	r7, sp, #0
 800bebc:	60f8      	str	r0, [r7, #12]
 800bebe:	60b9      	str	r1, [r7, #8]
 800bec0:	607a      	str	r2, [r7, #4]
 800bec2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bec4:	e051      	b.n	800bf6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bed4:	d123      	bne.n	800bf1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bee4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800beee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2220      	movs	r2, #32
 800befa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	f043 0204 	orr.w	r2, r3, #4
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e046      	b.n	800bfac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf24:	d021      	beq.n	800bf6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf26:	f7fd ff07 	bl	8009d38 <HAL_GetTick>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d302      	bcc.n	800bf3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d116      	bne.n	800bf6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	f043 0220 	orr.w	r2, r3, #32
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	e020      	b.n	800bfac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	0c1b      	lsrs	r3, r3, #16
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d10c      	bne.n	800bf8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	695b      	ldr	r3, [r3, #20]
 800bf7a:	43da      	mvns	r2, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bf14      	ite	ne
 800bf86:	2301      	movne	r3, #1
 800bf88:	2300      	moveq	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	e00b      	b.n	800bfa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	43da      	mvns	r2, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	4013      	ands	r3, r2
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	bf14      	ite	ne
 800bfa0:	2301      	movne	r3, #1
 800bfa2:	2300      	moveq	r3, #0
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d18d      	bne.n	800bec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bfc0:	e02d      	b.n	800c01e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f000 f8ce 	bl	800c164 <I2C_IsAcknowledgeFailed>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e02d      	b.n	800c02e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd8:	d021      	beq.n	800c01e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfda:	f7fd fead 	bl	8009d38 <HAL_GetTick>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	68ba      	ldr	r2, [r7, #8]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d302      	bcc.n	800bff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d116      	bne.n	800c01e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2220      	movs	r2, #32
 800bffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	f043 0220 	orr.w	r2, r3, #32
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	e007      	b.n	800c02e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c028:	2b80      	cmp	r3, #128	; 0x80
 800c02a:	d1ca      	bne.n	800bfc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c036:	b580      	push	{r7, lr}
 800c038:	b084      	sub	sp, #16
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	60f8      	str	r0, [r7, #12]
 800c03e:	60b9      	str	r1, [r7, #8]
 800c040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c042:	e02d      	b.n	800c0a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c044:	68f8      	ldr	r0, [r7, #12]
 800c046:	f000 f88d 	bl	800c164 <I2C_IsAcknowledgeFailed>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d001      	beq.n	800c054 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c050:	2301      	movs	r3, #1
 800c052:	e02d      	b.n	800c0b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05a:	d021      	beq.n	800c0a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c05c:	f7fd fe6c 	bl	8009d38 <HAL_GetTick>
 800c060:	4602      	mov	r2, r0
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	1ad3      	subs	r3, r2, r3
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d302      	bcc.n	800c072 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d116      	bne.n	800c0a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2200      	movs	r2, #0
 800c076:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2220      	movs	r2, #32
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c08c:	f043 0220 	orr.w	r2, r3, #32
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c09c:	2301      	movs	r3, #1
 800c09e:	e007      	b.n	800c0b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	695b      	ldr	r3, [r3, #20]
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d1ca      	bne.n	800c044 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c0ae:	2300      	movs	r3, #0
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0c4:	e042      	b.n	800c14c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	f003 0310 	and.w	r3, r3, #16
 800c0d0:	2b10      	cmp	r3, #16
 800c0d2:	d119      	bne.n	800c108 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f06f 0210 	mvn.w	r2, #16
 800c0dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2220      	movs	r2, #32
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e029      	b.n	800c15c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c108:	f7fd fe16 	bl	8009d38 <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	429a      	cmp	r2, r3
 800c116:	d302      	bcc.n	800c11e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d116      	bne.n	800c14c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2220      	movs	r2, #32
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c138:	f043 0220 	orr.w	r2, r3, #32
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e007      	b.n	800c15c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c156:	2b40      	cmp	r3, #64	; 0x40
 800c158:	d1b5      	bne.n	800c0c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	695b      	ldr	r3, [r3, #20]
 800c172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c17a:	d11b      	bne.n	800c1b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c184:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2200      	movs	r2, #0
 800c18a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2220      	movs	r2, #32
 800c190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a0:	f043 0204 	orr.w	r2, r3, #4
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e000      	b.n	800c1b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
	...

0800c1c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	603b      	str	r3, [r7, #0]
 800c1d2:	4b20      	ldr	r3, [pc, #128]	; (800c254 <HAL_PWREx_EnableOverDrive+0x90>)
 800c1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d6:	4a1f      	ldr	r2, [pc, #124]	; (800c254 <HAL_PWREx_EnableOverDrive+0x90>)
 800c1d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c1dc:	6413      	str	r3, [r2, #64]	; 0x40
 800c1de:	4b1d      	ldr	r3, [pc, #116]	; (800c254 <HAL_PWREx_EnableOverDrive+0x90>)
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1e6:	603b      	str	r3, [r7, #0]
 800c1e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c1ea:	4b1b      	ldr	r3, [pc, #108]	; (800c258 <HAL_PWREx_EnableOverDrive+0x94>)
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c1f0:	f7fd fda2 	bl	8009d38 <HAL_GetTick>
 800c1f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c1f6:	e009      	b.n	800c20c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c1f8:	f7fd fd9e 	bl	8009d38 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c206:	d901      	bls.n	800c20c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	e01f      	b.n	800c24c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c20c:	4b13      	ldr	r3, [pc, #76]	; (800c25c <HAL_PWREx_EnableOverDrive+0x98>)
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c218:	d1ee      	bne.n	800c1f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c21a:	4b11      	ldr	r3, [pc, #68]	; (800c260 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c21c:	2201      	movs	r2, #1
 800c21e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c220:	f7fd fd8a 	bl	8009d38 <HAL_GetTick>
 800c224:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c226:	e009      	b.n	800c23c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c228:	f7fd fd86 	bl	8009d38 <HAL_GetTick>
 800c22c:	4602      	mov	r2, r0
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	1ad3      	subs	r3, r2, r3
 800c232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c236:	d901      	bls.n	800c23c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c238:	2303      	movs	r3, #3
 800c23a:	e007      	b.n	800c24c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c23c:	4b07      	ldr	r3, [pc, #28]	; (800c25c <HAL_PWREx_EnableOverDrive+0x98>)
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c248:	d1ee      	bne.n	800c228 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	40023800 	.word	0x40023800
 800c258:	420e0040 	.word	0x420e0040
 800c25c:	40007000 	.word	0x40007000
 800c260:	420e0044 	.word	0x420e0044

0800c264 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e0cc      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c278:	4b68      	ldr	r3, [pc, #416]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 030f 	and.w	r3, r3, #15
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d90c      	bls.n	800c2a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c286:	4b65      	ldr	r3, [pc, #404]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c288:	683a      	ldr	r2, [r7, #0]
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c28e:	4b63      	ldr	r3, [pc, #396]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 030f 	and.w	r3, r3, #15
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d001      	beq.n	800c2a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e0b8      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0302 	and.w	r3, r3, #2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d020      	beq.n	800c2ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2b8:	4b59      	ldr	r3, [pc, #356]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ba:	689b      	ldr	r3, [r3, #8]
 800c2bc:	4a58      	ldr	r2, [pc, #352]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c2c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0308 	and.w	r3, r3, #8
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2d0:	4b53      	ldr	r3, [pc, #332]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2d2:	689b      	ldr	r3, [r3, #8]
 800c2d4:	4a52      	ldr	r2, [pc, #328]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c2da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2dc:	4b50      	ldr	r3, [pc, #320]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	494d      	ldr	r1, [pc, #308]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d044      	beq.n	800c384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d107      	bne.n	800c312 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c302:	4b47      	ldr	r3, [pc, #284]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d119      	bne.n	800c342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e07f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d003      	beq.n	800c322 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d107      	bne.n	800c332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c322:	4b3f      	ldr	r3, [pc, #252]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d109      	bne.n	800c342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e06f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c332:	4b3b      	ldr	r3, [pc, #236]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f003 0302 	and.w	r3, r3, #2
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e067      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c342:	4b37      	ldr	r3, [pc, #220]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c344:	689b      	ldr	r3, [r3, #8]
 800c346:	f023 0203 	bic.w	r2, r3, #3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	4934      	ldr	r1, [pc, #208]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c350:	4313      	orrs	r3, r2
 800c352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c354:	f7fd fcf0 	bl	8009d38 <HAL_GetTick>
 800c358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c35a:	e00a      	b.n	800c372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c35c:	f7fd fcec 	bl	8009d38 <HAL_GetTick>
 800c360:	4602      	mov	r2, r0
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	1ad3      	subs	r3, r2, r3
 800c366:	f241 3288 	movw	r2, #5000	; 0x1388
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e04f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c372:	4b2b      	ldr	r3, [pc, #172]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	f003 020c 	and.w	r2, r3, #12
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	429a      	cmp	r2, r3
 800c382:	d1eb      	bne.n	800c35c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c384:	4b25      	ldr	r3, [pc, #148]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 030f 	and.w	r3, r3, #15
 800c38c:	683a      	ldr	r2, [r7, #0]
 800c38e:	429a      	cmp	r2, r3
 800c390:	d20c      	bcs.n	800c3ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c392:	4b22      	ldr	r3, [pc, #136]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c39a:	4b20      	ldr	r3, [pc, #128]	; (800c41c <HAL_RCC_ClockConfig+0x1b8>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 030f 	and.w	r3, r3, #15
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d001      	beq.n	800c3ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e032      	b.n	800c412 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3b8:	4b19      	ldr	r3, [pc, #100]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	4916      	ldr	r1, [pc, #88]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 0308 	and.w	r3, r3, #8
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d009      	beq.n	800c3ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3d6:	4b12      	ldr	r3, [pc, #72]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	490e      	ldr	r1, [pc, #56]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c3ea:	f000 f821 	bl	800c430 <HAL_RCC_GetSysClockFreq>
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <HAL_RCC_ClockConfig+0x1bc>)
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	091b      	lsrs	r3, r3, #4
 800c3f6:	f003 030f 	and.w	r3, r3, #15
 800c3fa:	4a0a      	ldr	r2, [pc, #40]	; (800c424 <HAL_RCC_ClockConfig+0x1c0>)
 800c3fc:	5cd3      	ldrb	r3, [r2, r3]
 800c3fe:	fa21 f303 	lsr.w	r3, r1, r3
 800c402:	4a09      	ldr	r2, [pc, #36]	; (800c428 <HAL_RCC_ClockConfig+0x1c4>)
 800c404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c406:	4b09      	ldr	r3, [pc, #36]	; (800c42c <HAL_RCC_ClockConfig+0x1c8>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd fc50 	bl	8009cb0 <HAL_InitTick>

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	40023c00 	.word	0x40023c00
 800c420:	40023800 	.word	0x40023800
 800c424:	0801a030 	.word	0x0801a030
 800c428:	20000000 	.word	0x20000000
 800c42c:	20000004 	.word	0x20000004

0800c430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c430:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	607b      	str	r3, [r7, #4]
 800c43a:	2300      	movs	r3, #0
 800c43c:	60fb      	str	r3, [r7, #12]
 800c43e:	2300      	movs	r3, #0
 800c440:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c442:	2300      	movs	r3, #0
 800c444:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c446:	4b63      	ldr	r3, [pc, #396]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 030c 	and.w	r3, r3, #12
 800c44e:	2b04      	cmp	r3, #4
 800c450:	d007      	beq.n	800c462 <HAL_RCC_GetSysClockFreq+0x32>
 800c452:	2b08      	cmp	r3, #8
 800c454:	d008      	beq.n	800c468 <HAL_RCC_GetSysClockFreq+0x38>
 800c456:	2b00      	cmp	r3, #0
 800c458:	f040 80b4 	bne.w	800c5c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c45c:	4b5e      	ldr	r3, [pc, #376]	; (800c5d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c45e:	60bb      	str	r3, [r7, #8]
       break;
 800c460:	e0b3      	b.n	800c5ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c462:	4b5d      	ldr	r3, [pc, #372]	; (800c5d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c464:	60bb      	str	r3, [r7, #8]
      break;
 800c466:	e0b0      	b.n	800c5ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c468:	4b5a      	ldr	r3, [pc, #360]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c470:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c472:	4b58      	ldr	r3, [pc, #352]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d04a      	beq.n	800c514 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c47e:	4b55      	ldr	r3, [pc, #340]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	099b      	lsrs	r3, r3, #6
 800c484:	f04f 0400 	mov.w	r4, #0
 800c488:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c48c:	f04f 0200 	mov.w	r2, #0
 800c490:	ea03 0501 	and.w	r5, r3, r1
 800c494:	ea04 0602 	and.w	r6, r4, r2
 800c498:	4629      	mov	r1, r5
 800c49a:	4632      	mov	r2, r6
 800c49c:	f04f 0300 	mov.w	r3, #0
 800c4a0:	f04f 0400 	mov.w	r4, #0
 800c4a4:	0154      	lsls	r4, r2, #5
 800c4a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c4aa:	014b      	lsls	r3, r1, #5
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	1b49      	subs	r1, r1, r5
 800c4b2:	eb62 0206 	sbc.w	r2, r2, r6
 800c4b6:	f04f 0300 	mov.w	r3, #0
 800c4ba:	f04f 0400 	mov.w	r4, #0
 800c4be:	0194      	lsls	r4, r2, #6
 800c4c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c4c4:	018b      	lsls	r3, r1, #6
 800c4c6:	1a5b      	subs	r3, r3, r1
 800c4c8:	eb64 0402 	sbc.w	r4, r4, r2
 800c4cc:	f04f 0100 	mov.w	r1, #0
 800c4d0:	f04f 0200 	mov.w	r2, #0
 800c4d4:	00e2      	lsls	r2, r4, #3
 800c4d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c4da:	00d9      	lsls	r1, r3, #3
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4614      	mov	r4, r2
 800c4e0:	195b      	adds	r3, r3, r5
 800c4e2:	eb44 0406 	adc.w	r4, r4, r6
 800c4e6:	f04f 0100 	mov.w	r1, #0
 800c4ea:	f04f 0200 	mov.w	r2, #0
 800c4ee:	02a2      	lsls	r2, r4, #10
 800c4f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c4f4:	0299      	lsls	r1, r3, #10
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	4614      	mov	r4, r2
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	4621      	mov	r1, r4
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f04f 0400 	mov.w	r4, #0
 800c504:	461a      	mov	r2, r3
 800c506:	4623      	mov	r3, r4
 800c508:	f7f4 fbd6 	bl	8000cb8 <__aeabi_uldivmod>
 800c50c:	4603      	mov	r3, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e049      	b.n	800c5a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c514:	4b2f      	ldr	r3, [pc, #188]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c516:	685b      	ldr	r3, [r3, #4]
 800c518:	099b      	lsrs	r3, r3, #6
 800c51a:	f04f 0400 	mov.w	r4, #0
 800c51e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c522:	f04f 0200 	mov.w	r2, #0
 800c526:	ea03 0501 	and.w	r5, r3, r1
 800c52a:	ea04 0602 	and.w	r6, r4, r2
 800c52e:	4629      	mov	r1, r5
 800c530:	4632      	mov	r2, r6
 800c532:	f04f 0300 	mov.w	r3, #0
 800c536:	f04f 0400 	mov.w	r4, #0
 800c53a:	0154      	lsls	r4, r2, #5
 800c53c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c540:	014b      	lsls	r3, r1, #5
 800c542:	4619      	mov	r1, r3
 800c544:	4622      	mov	r2, r4
 800c546:	1b49      	subs	r1, r1, r5
 800c548:	eb62 0206 	sbc.w	r2, r2, r6
 800c54c:	f04f 0300 	mov.w	r3, #0
 800c550:	f04f 0400 	mov.w	r4, #0
 800c554:	0194      	lsls	r4, r2, #6
 800c556:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c55a:	018b      	lsls	r3, r1, #6
 800c55c:	1a5b      	subs	r3, r3, r1
 800c55e:	eb64 0402 	sbc.w	r4, r4, r2
 800c562:	f04f 0100 	mov.w	r1, #0
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	00e2      	lsls	r2, r4, #3
 800c56c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c570:	00d9      	lsls	r1, r3, #3
 800c572:	460b      	mov	r3, r1
 800c574:	4614      	mov	r4, r2
 800c576:	195b      	adds	r3, r3, r5
 800c578:	eb44 0406 	adc.w	r4, r4, r6
 800c57c:	f04f 0100 	mov.w	r1, #0
 800c580:	f04f 0200 	mov.w	r2, #0
 800c584:	02a2      	lsls	r2, r4, #10
 800c586:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c58a:	0299      	lsls	r1, r3, #10
 800c58c:	460b      	mov	r3, r1
 800c58e:	4614      	mov	r4, r2
 800c590:	4618      	mov	r0, r3
 800c592:	4621      	mov	r1, r4
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f04f 0400 	mov.w	r4, #0
 800c59a:	461a      	mov	r2, r3
 800c59c:	4623      	mov	r3, r4
 800c59e:	f7f4 fb8b 	bl	8000cb8 <__aeabi_uldivmod>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	460c      	mov	r4, r1
 800c5a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c5a8:	4b0a      	ldr	r3, [pc, #40]	; (800c5d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5aa:	685b      	ldr	r3, [r3, #4]
 800c5ac:	0c1b      	lsrs	r3, r3, #16
 800c5ae:	f003 0303 	and.w	r3, r3, #3
 800c5b2:	3301      	adds	r3, #1
 800c5b4:	005b      	lsls	r3, r3, #1
 800c5b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5c0:	60bb      	str	r3, [r7, #8]
      break;
 800c5c2:	e002      	b.n	800c5ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5c4:	4b04      	ldr	r3, [pc, #16]	; (800c5d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c5c6:	60bb      	str	r3, [r7, #8]
      break;
 800c5c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3714      	adds	r7, #20
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5d4:	40023800 	.word	0x40023800
 800c5d8:	00f42400 	.word	0x00f42400

0800c5dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c5e0:	4b03      	ldr	r3, [pc, #12]	; (800c5f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20000000 	.word	0x20000000

0800c5f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c5f8:	f7ff fff0 	bl	800c5dc <HAL_RCC_GetHCLKFreq>
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	4b05      	ldr	r3, [pc, #20]	; (800c614 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	0a9b      	lsrs	r3, r3, #10
 800c604:	f003 0307 	and.w	r3, r3, #7
 800c608:	4a03      	ldr	r2, [pc, #12]	; (800c618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c60a:	5cd3      	ldrb	r3, [r2, r3]
 800c60c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c610:	4618      	mov	r0, r3
 800c612:	bd80      	pop	{r7, pc}
 800c614:	40023800 	.word	0x40023800
 800c618:	0801a040 	.word	0x0801a040

0800c61c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c620:	f7ff ffdc 	bl	800c5dc <HAL_RCC_GetHCLKFreq>
 800c624:	4601      	mov	r1, r0
 800c626:	4b05      	ldr	r3, [pc, #20]	; (800c63c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	0b5b      	lsrs	r3, r3, #13
 800c62c:	f003 0307 	and.w	r3, r3, #7
 800c630:	4a03      	ldr	r2, [pc, #12]	; (800c640 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c632:	5cd3      	ldrb	r3, [r2, r3]
 800c634:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c638:	4618      	mov	r0, r3
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	40023800 	.word	0x40023800
 800c640:	0801a040 	.word	0x0801a040

0800c644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b088      	sub	sp, #32
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c64c:	2300      	movs	r3, #0
 800c64e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c650:	2300      	movs	r3, #0
 800c652:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c654:	2300      	movs	r3, #0
 800c656:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c65c:	2300      	movs	r3, #0
 800c65e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00a      	beq.n	800c682 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c66c:	4b66      	ldr	r3, [pc, #408]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c66e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c672:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67a:	4963      	ldr	r1, [pc, #396]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c67c:	4313      	orrs	r3, r2
 800c67e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00a      	beq.n	800c6a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c68e:	4b5e      	ldr	r3, [pc, #376]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c694:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c69c:	495a      	ldr	r1, [pc, #360]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10b      	bne.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d105      	bne.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d075      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c6c8:	4b50      	ldr	r3, [pc, #320]	; (800c80c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6ce:	f7fd fb33 	bl	8009d38 <HAL_GetTick>
 800c6d2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6d4:	e008      	b.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c6d6:	f7fd fb2f 	bl	8009d38 <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d901      	bls.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	e1dc      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6e8:	4b47      	ldr	r3, [pc, #284]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1f0      	bne.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d009      	beq.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	019a      	lsls	r2, r3, #6
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	071b      	lsls	r3, r3, #28
 800c70c:	493e      	ldr	r1, [pc, #248]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c70e:	4313      	orrs	r3, r2
 800c710:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f003 0302 	and.w	r3, r3, #2
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d01f      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c720:	4b39      	ldr	r3, [pc, #228]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c726:	0f1b      	lsrs	r3, r3, #28
 800c728:	f003 0307 	and.w	r3, r3, #7
 800c72c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	019a      	lsls	r2, r3, #6
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68db      	ldr	r3, [r3, #12]
 800c738:	061b      	lsls	r3, r3, #24
 800c73a:	431a      	orrs	r2, r3
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	071b      	lsls	r3, r3, #28
 800c740:	4931      	ldr	r1, [pc, #196]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c742:	4313      	orrs	r3, r2
 800c744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c748:	4b2f      	ldr	r3, [pc, #188]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c74e:	f023 021f 	bic.w	r2, r3, #31
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a1b      	ldr	r3, [r3, #32]
 800c756:	3b01      	subs	r3, #1
 800c758:	492b      	ldr	r1, [pc, #172]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c75a:	4313      	orrs	r3, r2
 800c75c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00d      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	019a      	lsls	r2, r3, #6
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68db      	ldr	r3, [r3, #12]
 800c776:	061b      	lsls	r3, r3, #24
 800c778:	431a      	orrs	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	071b      	lsls	r3, r3, #28
 800c780:	4921      	ldr	r1, [pc, #132]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c788:	4b20      	ldr	r3, [pc, #128]	; (800c80c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c78e:	f7fd fad3 	bl	8009d38 <HAL_GetTick>
 800c792:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c794:	e008      	b.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c796:	f7fd facf 	bl	8009d38 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d901      	bls.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e17c      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7a8:	4b17      	ldr	r3, [pc, #92]	; (800c808 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d0f0      	beq.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d112      	bne.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10c      	bne.n	800c7e6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 80ce 	beq.w	800c976 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c7de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7e2:	f040 80c8 	bne.w	800c976 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c7e6:	4b0a      	ldr	r3, [pc, #40]	; (800c810 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7ec:	f7fd faa4 	bl	8009d38 <HAL_GetTick>
 800c7f0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c7f2:	e00f      	b.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c7f4:	f7fd faa0 	bl	8009d38 <HAL_GetTick>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d908      	bls.n	800c814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e14d      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c806:	bf00      	nop
 800c808:	40023800 	.word	0x40023800
 800c80c:	42470068 	.word	0x42470068
 800c810:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c814:	4ba5      	ldr	r3, [pc, #660]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c81c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c820:	d0e8      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d02e      	beq.n	800c88c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c82e:	4b9f      	ldr	r3, [pc, #636]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c834:	0c1b      	lsrs	r3, r3, #16
 800c836:	f003 0303 	and.w	r3, r3, #3
 800c83a:	3301      	adds	r3, #1
 800c83c:	005b      	lsls	r3, r3, #1
 800c83e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c840:	4b9a      	ldr	r3, [pc, #616]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c846:	0f1b      	lsrs	r3, r3, #28
 800c848:	f003 0307 	and.w	r3, r3, #7
 800c84c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	019a      	lsls	r2, r3, #6
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	085b      	lsrs	r3, r3, #1
 800c858:	3b01      	subs	r3, #1
 800c85a:	041b      	lsls	r3, r3, #16
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	061b      	lsls	r3, r3, #24
 800c864:	431a      	orrs	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	071b      	lsls	r3, r3, #28
 800c86a:	4990      	ldr	r1, [pc, #576]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c86c:	4313      	orrs	r3, r2
 800c86e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c872:	4b8e      	ldr	r3, [pc, #568]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c878:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c880:	3b01      	subs	r3, #1
 800c882:	021b      	lsls	r3, r3, #8
 800c884:	4989      	ldr	r1, [pc, #548]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c886:	4313      	orrs	r3, r2
 800c888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 0308 	and.w	r3, r3, #8
 800c894:	2b00      	cmp	r3, #0
 800c896:	d02c      	beq.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c898:	4b84      	ldr	r3, [pc, #528]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c89e:	0c1b      	lsrs	r3, r3, #16
 800c8a0:	f003 0303 	and.w	r3, r3, #3
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8aa:	4b80      	ldr	r3, [pc, #512]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b0:	0e1b      	lsrs	r3, r3, #24
 800c8b2:	f003 030f 	and.w	r3, r3, #15
 800c8b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	019a      	lsls	r2, r3, #6
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	085b      	lsrs	r3, r3, #1
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	041b      	lsls	r3, r3, #16
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	061b      	lsls	r3, r3, #24
 800c8cc:	431a      	orrs	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	071b      	lsls	r3, r3, #28
 800c8d4:	4975      	ldr	r1, [pc, #468]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c8dc:	4b73      	ldr	r3, [pc, #460]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ea:	4970      	ldr	r1, [pc, #448]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d024      	beq.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c902:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c906:	d11f      	bne.n	800c948 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c908:	4b68      	ldr	r3, [pc, #416]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c90a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c90e:	0e1b      	lsrs	r3, r3, #24
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c916:	4b65      	ldr	r3, [pc, #404]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c91c:	0f1b      	lsrs	r3, r3, #28
 800c91e:	f003 0307 	and.w	r3, r3, #7
 800c922:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	019a      	lsls	r2, r3, #6
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	695b      	ldr	r3, [r3, #20]
 800c92e:	085b      	lsrs	r3, r3, #1
 800c930:	3b01      	subs	r3, #1
 800c932:	041b      	lsls	r3, r3, #16
 800c934:	431a      	orrs	r2, r3
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	061b      	lsls	r3, r3, #24
 800c93a:	431a      	orrs	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	071b      	lsls	r3, r3, #28
 800c940:	495a      	ldr	r1, [pc, #360]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c942:	4313      	orrs	r3, r2
 800c944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c948:	4b59      	ldr	r3, [pc, #356]	; (800cab0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c94a:	2201      	movs	r2, #1
 800c94c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c94e:	f7fd f9f3 	bl	8009d38 <HAL_GetTick>
 800c952:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c954:	e008      	b.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c956:	f7fd f9ef 	bl	8009d38 <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	2b02      	cmp	r3, #2
 800c962:	d901      	bls.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c964:	2303      	movs	r3, #3
 800c966:	e09c      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c968:	4b50      	ldr	r3, [pc, #320]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c974:	d1ef      	bne.n	800c956 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f003 0320 	and.w	r3, r3, #32
 800c97e:	2b00      	cmp	r3, #0
 800c980:	f000 8083 	beq.w	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c984:	2300      	movs	r3, #0
 800c986:	60bb      	str	r3, [r7, #8]
 800c988:	4b48      	ldr	r3, [pc, #288]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c98c:	4a47      	ldr	r2, [pc, #284]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c98e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c992:	6413      	str	r3, [r2, #64]	; 0x40
 800c994:	4b45      	ldr	r3, [pc, #276]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c99c:	60bb      	str	r3, [r7, #8]
 800c99e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c9a0:	4b44      	ldr	r3, [pc, #272]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a43      	ldr	r2, [pc, #268]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9aa:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9ac:	f7fd f9c4 	bl	8009d38 <HAL_GetTick>
 800c9b0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9b2:	e008      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c9b4:	f7fd f9c0 	bl	8009d38 <HAL_GetTick>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	69fb      	ldr	r3, [r7, #28]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e06d      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9c6:	4b3b      	ldr	r3, [pc, #236]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0f0      	beq.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c9d2:	4b36      	ldr	r3, [pc, #216]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9da:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d02f      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ea:	69ba      	ldr	r2, [r7, #24]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d028      	beq.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9f0:	4b2e      	ldr	r3, [pc, #184]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9f8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c9fa:	4b2f      	ldr	r3, [pc, #188]	; (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ca00:	4b2d      	ldr	r3, [pc, #180]	; (800cab8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ca06:	4a29      	ldr	r2, [pc, #164]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ca0c:	4b27      	ldr	r3, [pc, #156]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca10:	f003 0301 	and.w	r3, r3, #1
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d114      	bne.n	800ca42 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ca18:	f7fd f98e 	bl	8009d38 <HAL_GetTick>
 800ca1c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca1e:	e00a      	b.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca20:	f7fd f98a 	bl	8009d38 <HAL_GetTick>
 800ca24:	4602      	mov	r2, r0
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	1ad3      	subs	r3, r2, r3
 800ca2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d901      	bls.n	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ca32:	2303      	movs	r3, #3
 800ca34:	e035      	b.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca36:	4b1d      	ldr	r3, [pc, #116]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3a:	f003 0302 	and.w	r3, r3, #2
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d0ee      	beq.n	800ca20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca4e:	d10d      	bne.n	800ca6c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ca50:	4b16      	ldr	r3, [pc, #88]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca64:	4911      	ldr	r1, [pc, #68]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	608b      	str	r3, [r1, #8]
 800ca6a:	e005      	b.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ca6c:	4b0f      	ldr	r3, [pc, #60]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	4a0e      	ldr	r2, [pc, #56]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca76:	6093      	str	r3, [r2, #8]
 800ca78:	4b0c      	ldr	r3, [pc, #48]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca84:	4909      	ldr	r1, [pc, #36]	; (800caac <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca86:	4313      	orrs	r3, r2
 800ca88:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 0310 	and.w	r3, r3, #16
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d004      	beq.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca9c:	4b07      	ldr	r3, [pc, #28]	; (800cabc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ca9e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3720      	adds	r7, #32
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
 800caaa:	bf00      	nop
 800caac:	40023800 	.word	0x40023800
 800cab0:	42470070 	.word	0x42470070
 800cab4:	40007000 	.word	0x40007000
 800cab8:	42470e40 	.word	0x42470e40
 800cabc:	424711e0 	.word	0x424711e0

0800cac0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b086      	sub	sp, #24
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cac8:	2300      	movs	r3, #0
 800caca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d075      	beq.n	800cbc4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cad8:	4ba2      	ldr	r3, [pc, #648]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	f003 030c 	and.w	r3, r3, #12
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	d00c      	beq.n	800cafe <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cae4:	4b9f      	ldr	r3, [pc, #636]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800caec:	2b08      	cmp	r3, #8
 800caee:	d112      	bne.n	800cb16 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800caf0:	4b9c      	ldr	r3, [pc, #624]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cafc:	d10b      	bne.n	800cb16 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cafe:	4b99      	ldr	r3, [pc, #612]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d05b      	beq.n	800cbc2 <HAL_RCC_OscConfig+0x102>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d157      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e20b      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb1e:	d106      	bne.n	800cb2e <HAL_RCC_OscConfig+0x6e>
 800cb20:	4b90      	ldr	r3, [pc, #576]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a8f      	ldr	r2, [pc, #572]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb2a:	6013      	str	r3, [r2, #0]
 800cb2c:	e01d      	b.n	800cb6a <HAL_RCC_OscConfig+0xaa>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb36:	d10c      	bne.n	800cb52 <HAL_RCC_OscConfig+0x92>
 800cb38:	4b8a      	ldr	r3, [pc, #552]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a89      	ldr	r2, [pc, #548]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb42:	6013      	str	r3, [r2, #0]
 800cb44:	4b87      	ldr	r3, [pc, #540]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a86      	ldr	r2, [pc, #536]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	e00b      	b.n	800cb6a <HAL_RCC_OscConfig+0xaa>
 800cb52:	4b84      	ldr	r3, [pc, #528]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a83      	ldr	r2, [pc, #524]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb5c:	6013      	str	r3, [r2, #0]
 800cb5e:	4b81      	ldr	r3, [pc, #516]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4a80      	ldr	r2, [pc, #512]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d013      	beq.n	800cb9a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb72:	f7fd f8e1 	bl	8009d38 <HAL_GetTick>
 800cb76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb78:	e008      	b.n	800cb8c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb7a:	f7fd f8dd 	bl	8009d38 <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b64      	cmp	r3, #100	; 0x64
 800cb86:	d901      	bls.n	800cb8c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e1d0      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cb8c:	4b75      	ldr	r3, [pc, #468]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d0f0      	beq.n	800cb7a <HAL_RCC_OscConfig+0xba>
 800cb98:	e014      	b.n	800cbc4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb9a:	f7fd f8cd 	bl	8009d38 <HAL_GetTick>
 800cb9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cba0:	e008      	b.n	800cbb4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cba2:	f7fd f8c9 	bl	8009d38 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b64      	cmp	r3, #100	; 0x64
 800cbae:	d901      	bls.n	800cbb4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e1bc      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cbb4:	4b6b      	ldr	r3, [pc, #428]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1f0      	bne.n	800cba2 <HAL_RCC_OscConfig+0xe2>
 800cbc0:	e000      	b.n	800cbc4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbc2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 0302 	and.w	r3, r3, #2
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d063      	beq.n	800cc98 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cbd0:	4b64      	ldr	r3, [pc, #400]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	f003 030c 	and.w	r3, r3, #12
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00b      	beq.n	800cbf4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cbdc:	4b61      	ldr	r3, [pc, #388]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	d11c      	bne.n	800cc22 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cbe8:	4b5e      	ldr	r3, [pc, #376]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d116      	bne.n	800cc22 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cbf4:	4b5b      	ldr	r3, [pc, #364]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 0302 	and.w	r3, r3, #2
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d005      	beq.n	800cc0c <HAL_RCC_OscConfig+0x14c>
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d001      	beq.n	800cc0c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e190      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc0c:	4b55      	ldr	r3, [pc, #340]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	4952      	ldr	r1, [pc, #328]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc20:	e03a      	b.n	800cc98 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d020      	beq.n	800cc6c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cc2a:	4b4f      	ldr	r3, [pc, #316]	; (800cd68 <HAL_RCC_OscConfig+0x2a8>)
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc30:	f7fd f882 	bl	8009d38 <HAL_GetTick>
 800cc34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc36:	e008      	b.n	800cc4a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc38:	f7fd f87e 	bl	8009d38 <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	d901      	bls.n	800cc4a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cc46:	2303      	movs	r3, #3
 800cc48:	e171      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc4a:	4b46      	ldr	r3, [pc, #280]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0302 	and.w	r3, r3, #2
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d0f0      	beq.n	800cc38 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc56:	4b43      	ldr	r3, [pc, #268]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	00db      	lsls	r3, r3, #3
 800cc64:	493f      	ldr	r1, [pc, #252]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cc66:	4313      	orrs	r3, r2
 800cc68:	600b      	str	r3, [r1, #0]
 800cc6a:	e015      	b.n	800cc98 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc6c:	4b3e      	ldr	r3, [pc, #248]	; (800cd68 <HAL_RCC_OscConfig+0x2a8>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc72:	f7fd f861 	bl	8009d38 <HAL_GetTick>
 800cc76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc78:	e008      	b.n	800cc8c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc7a:	f7fd f85d 	bl	8009d38 <HAL_GetTick>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d901      	bls.n	800cc8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	e150      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cc8c:	4b35      	ldr	r3, [pc, #212]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f003 0302 	and.w	r3, r3, #2
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1f0      	bne.n	800cc7a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f003 0308 	and.w	r3, r3, #8
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d030      	beq.n	800cd06 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d016      	beq.n	800ccda <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ccac:	4b2f      	ldr	r3, [pc, #188]	; (800cd6c <HAL_RCC_OscConfig+0x2ac>)
 800ccae:	2201      	movs	r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccb2:	f7fd f841 	bl	8009d38 <HAL_GetTick>
 800ccb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ccb8:	e008      	b.n	800cccc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ccba:	f7fd f83d 	bl	8009d38 <HAL_GetTick>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	d901      	bls.n	800cccc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e130      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cccc:	4b25      	ldr	r3, [pc, #148]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800ccce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccd0:	f003 0302 	and.w	r3, r3, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d0f0      	beq.n	800ccba <HAL_RCC_OscConfig+0x1fa>
 800ccd8:	e015      	b.n	800cd06 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ccda:	4b24      	ldr	r3, [pc, #144]	; (800cd6c <HAL_RCC_OscConfig+0x2ac>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cce0:	f7fd f82a 	bl	8009d38 <HAL_GetTick>
 800cce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cce6:	e008      	b.n	800ccfa <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cce8:	f7fd f826 	bl	8009d38 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	2b02      	cmp	r3, #2
 800ccf4:	d901      	bls.n	800ccfa <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e119      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ccfa:	4b1a      	ldr	r3, [pc, #104]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800ccfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccfe:	f003 0302 	and.w	r3, r3, #2
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d1f0      	bne.n	800cce8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f003 0304 	and.w	r3, r3, #4
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 809f 	beq.w	800ce52 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd14:	2300      	movs	r3, #0
 800cd16:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd18:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cd1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10f      	bne.n	800cd44 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd24:	2300      	movs	r3, #0
 800cd26:	60fb      	str	r3, [r7, #12]
 800cd28:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cd2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2c:	4a0d      	ldr	r2, [pc, #52]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cd2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd32:	6413      	str	r3, [r2, #64]	; 0x40
 800cd34:	4b0b      	ldr	r3, [pc, #44]	; (800cd64 <HAL_RCC_OscConfig+0x2a4>)
 800cd36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cd40:	2301      	movs	r3, #1
 800cd42:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd44:	4b0a      	ldr	r3, [pc, #40]	; (800cd70 <HAL_RCC_OscConfig+0x2b0>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d120      	bne.n	800cd92 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd50:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <HAL_RCC_OscConfig+0x2b0>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a06      	ldr	r2, [pc, #24]	; (800cd70 <HAL_RCC_OscConfig+0x2b0>)
 800cd56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd5c:	f7fc ffec 	bl	8009d38 <HAL_GetTick>
 800cd60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd62:	e010      	b.n	800cd86 <HAL_RCC_OscConfig+0x2c6>
 800cd64:	40023800 	.word	0x40023800
 800cd68:	42470000 	.word	0x42470000
 800cd6c:	42470e80 	.word	0x42470e80
 800cd70:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd74:	f7fc ffe0 	bl	8009d38 <HAL_GetTick>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d901      	bls.n	800cd86 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e0d3      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd86:	4b6c      	ldr	r3, [pc, #432]	; (800cf38 <HAL_RCC_OscConfig+0x478>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d0f0      	beq.n	800cd74 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d106      	bne.n	800cda8 <HAL_RCC_OscConfig+0x2e8>
 800cd9a:	4b68      	ldr	r3, [pc, #416]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cd9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd9e:	4a67      	ldr	r2, [pc, #412]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cda0:	f043 0301 	orr.w	r3, r3, #1
 800cda4:	6713      	str	r3, [r2, #112]	; 0x70
 800cda6:	e01c      	b.n	800cde2 <HAL_RCC_OscConfig+0x322>
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	2b05      	cmp	r3, #5
 800cdae:	d10c      	bne.n	800cdca <HAL_RCC_OscConfig+0x30a>
 800cdb0:	4b62      	ldr	r3, [pc, #392]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdb4:	4a61      	ldr	r2, [pc, #388]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdb6:	f043 0304 	orr.w	r3, r3, #4
 800cdba:	6713      	str	r3, [r2, #112]	; 0x70
 800cdbc:	4b5f      	ldr	r3, [pc, #380]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc0:	4a5e      	ldr	r2, [pc, #376]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdc2:	f043 0301 	orr.w	r3, r3, #1
 800cdc6:	6713      	str	r3, [r2, #112]	; 0x70
 800cdc8:	e00b      	b.n	800cde2 <HAL_RCC_OscConfig+0x322>
 800cdca:	4b5c      	ldr	r3, [pc, #368]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdce:	4a5b      	ldr	r2, [pc, #364]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdd0:	f023 0301 	bic.w	r3, r3, #1
 800cdd4:	6713      	str	r3, [r2, #112]	; 0x70
 800cdd6:	4b59      	ldr	r3, [pc, #356]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdda:	4a58      	ldr	r2, [pc, #352]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cddc:	f023 0304 	bic.w	r3, r3, #4
 800cde0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d015      	beq.n	800ce16 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdea:	f7fc ffa5 	bl	8009d38 <HAL_GetTick>
 800cdee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cdf0:	e00a      	b.n	800ce08 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cdf2:	f7fc ffa1 	bl	8009d38 <HAL_GetTick>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	1ad3      	subs	r3, r2, r3
 800cdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce00:	4293      	cmp	r3, r2
 800ce02:	d901      	bls.n	800ce08 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ce04:	2303      	movs	r3, #3
 800ce06:	e092      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce08:	4b4c      	ldr	r3, [pc, #304]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ce0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce0c:	f003 0302 	and.w	r3, r3, #2
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0ee      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x332>
 800ce14:	e014      	b.n	800ce40 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce16:	f7fc ff8f 	bl	8009d38 <HAL_GetTick>
 800ce1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce1c:	e00a      	b.n	800ce34 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce1e:	f7fc ff8b 	bl	8009d38 <HAL_GetTick>
 800ce22:	4602      	mov	r2, r0
 800ce24:	693b      	ldr	r3, [r7, #16]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d901      	bls.n	800ce34 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ce30:	2303      	movs	r3, #3
 800ce32:	e07c      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce34:	4b41      	ldr	r3, [pc, #260]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ce36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1ee      	bne.n	800ce1e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce40:	7dfb      	ldrb	r3, [r7, #23]
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d105      	bne.n	800ce52 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce46:	4b3d      	ldr	r3, [pc, #244]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ce48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce4a:	4a3c      	ldr	r2, [pc, #240]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ce4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	699b      	ldr	r3, [r3, #24]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d068      	beq.n	800cf2c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ce5a:	4b38      	ldr	r3, [pc, #224]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f003 030c 	and.w	r3, r3, #12
 800ce62:	2b08      	cmp	r3, #8
 800ce64:	d060      	beq.n	800cf28 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	699b      	ldr	r3, [r3, #24]
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d145      	bne.n	800cefa <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce6e:	4b34      	ldr	r3, [pc, #208]	; (800cf40 <HAL_RCC_OscConfig+0x480>)
 800ce70:	2200      	movs	r2, #0
 800ce72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce74:	f7fc ff60 	bl	8009d38 <HAL_GetTick>
 800ce78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce7a:	e008      	b.n	800ce8e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce7c:	f7fc ff5c 	bl	8009d38 <HAL_GetTick>
 800ce80:	4602      	mov	r2, r0
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	d901      	bls.n	800ce8e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	e04f      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce8e:	4b2b      	ldr	r3, [pc, #172]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1f0      	bne.n	800ce7c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	69da      	ldr	r2, [r3, #28]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	431a      	orrs	r2, r3
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea8:	019b      	lsls	r3, r3, #6
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb0:	085b      	lsrs	r3, r3, #1
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	041b      	lsls	r3, r3, #16
 800ceb6:	431a      	orrs	r2, r3
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	061b      	lsls	r3, r3, #24
 800cebe:	431a      	orrs	r2, r3
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec4:	071b      	lsls	r3, r3, #28
 800cec6:	491d      	ldr	r1, [pc, #116]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cec8:	4313      	orrs	r3, r2
 800ceca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cecc:	4b1c      	ldr	r3, [pc, #112]	; (800cf40 <HAL_RCC_OscConfig+0x480>)
 800cece:	2201      	movs	r2, #1
 800ced0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced2:	f7fc ff31 	bl	8009d38 <HAL_GetTick>
 800ced6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ced8:	e008      	b.n	800ceec <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ceda:	f7fc ff2d 	bl	8009d38 <HAL_GetTick>
 800cede:	4602      	mov	r2, r0
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d901      	bls.n	800ceec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cee8:	2303      	movs	r3, #3
 800ceea:	e020      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ceec:	4b13      	ldr	r3, [pc, #76]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0f0      	beq.n	800ceda <HAL_RCC_OscConfig+0x41a>
 800cef8:	e018      	b.n	800cf2c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cefa:	4b11      	ldr	r3, [pc, #68]	; (800cf40 <HAL_RCC_OscConfig+0x480>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf00:	f7fc ff1a 	bl	8009d38 <HAL_GetTick>
 800cf04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf06:	e008      	b.n	800cf1a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf08:	f7fc ff16 	bl	8009d38 <HAL_GetTick>
 800cf0c:	4602      	mov	r2, r0
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b02      	cmp	r3, #2
 800cf14:	d901      	bls.n	800cf1a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e009      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf1a:	4b08      	ldr	r3, [pc, #32]	; (800cf3c <HAL_RCC_OscConfig+0x47c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d1f0      	bne.n	800cf08 <HAL_RCC_OscConfig+0x448>
 800cf26:	e001      	b.n	800cf2c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cf28:	2301      	movs	r3, #1
 800cf2a:	e000      	b.n	800cf2e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3718      	adds	r7, #24
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	40007000 	.word	0x40007000
 800cf3c:	40023800 	.word	0x40023800
 800cf40:	42470060 	.word	0x42470060

0800cf44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf52:	2301      	movs	r3, #1
 800cf54:	e022      	b.n	800cf9c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d105      	bne.n	800cf6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7fa f869 	bl	8007040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2203      	movs	r2, #3
 800cf72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 f814 	bl	800cfa4 <HAL_SD_InitCard>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d001      	beq.n	800cf86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e00a      	b.n	800cf9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cf9a:	2300      	movs	r3, #0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfa4:	b5b0      	push	{r4, r5, r7, lr}
 800cfa6:	b08e      	sub	sp, #56	; 0x38
 800cfa8:	af04      	add	r7, sp, #16
 800cfaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cfac:	2300      	movs	r3, #0
 800cfae:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cfc0:	2376      	movs	r3, #118	; 0x76
 800cfc2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681d      	ldr	r5, [r3, #0]
 800cfc8:	466c      	mov	r4, sp
 800cfca:	f107 0314 	add.w	r3, r7, #20
 800cfce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cfd6:	f107 0308 	add.w	r3, r7, #8
 800cfda:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f003 fa87 	bl	80104f0 <SDIO_Init>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cfe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e031      	b.n	800d058 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cff4:	4b1a      	ldr	r3, [pc, #104]	; (800d060 <HAL_SD_InitCard+0xbc>)
 800cff6:	2200      	movs	r2, #0
 800cff8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4618      	mov	r0, r3
 800d000:	f003 fabf 	bl	8010582 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d004:	4b16      	ldr	r3, [pc, #88]	; (800d060 <HAL_SD_InitCard+0xbc>)
 800d006:	2201      	movs	r2, #1
 800d008:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 ffc6 	bl	800df9c <SD_PowerON>
 800d010:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d012:	6a3b      	ldr	r3, [r7, #32]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00b      	beq.n	800d030 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	431a      	orrs	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d02c:	2301      	movs	r3, #1
 800d02e:	e013      	b.n	800d058 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 fee5 	bl	800de00 <SD_InitCard>
 800d036:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d038:	6a3b      	ldr	r3, [r7, #32]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00b      	beq.n	800d056 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	431a      	orrs	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	e000      	b.n	800d058 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d056:	2300      	movs	r3, #0
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3728      	adds	r7, #40	; 0x28
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bdb0      	pop	{r4, r5, r7, pc}
 800d060:	422580a0 	.word	0x422580a0

0800d064 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b08c      	sub	sp, #48	; 0x30
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	60b9      	str	r1, [r7, #8]
 800d06e:	607a      	str	r2, [r7, #4]
 800d070:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d107      	bne.n	800d08c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d080:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e0c7      	b.n	800d21c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b01      	cmp	r3, #1
 800d096:	f040 80c0 	bne.w	800d21a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	441a      	add	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d907      	bls.n	800d0be <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e0ae      	b.n	800d21c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2203      	movs	r2, #3
 800d0c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d0dc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	4a50      	ldr	r2, [pc, #320]	; (800d224 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d0e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ea:	4a4f      	ldr	r2, [pc, #316]	; (800d228 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d0ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	3380      	adds	r3, #128	; 0x80
 800d100:	4619      	mov	r1, r3
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	025b      	lsls	r3, r3, #9
 800d108:	089b      	lsrs	r3, r3, #2
 800d10a:	f7fd fc07 	bl	800a91c <HAL_DMA_Start_IT>
 800d10e:	4603      	mov	r3, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	d017      	beq.n	800d144 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d122:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a40      	ldr	r2, [pc, #256]	; (800d22c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d12a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d130:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e06b      	b.n	800d21c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d144:	4b3a      	ldr	r3, [pc, #232]	; (800d230 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d146:	2201      	movs	r2, #1
 800d148:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d002      	beq.n	800d158 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	025b      	lsls	r3, r3, #9
 800d156:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d160:	4618      	mov	r0, r3
 800d162:	f003 faa1 	bl	80106a8 <SDMMC_CmdBlockLength>
 800d166:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00f      	beq.n	800d18e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a2e      	ldr	r2, [pc, #184]	; (800d22c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d174:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	431a      	orrs	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	e046      	b.n	800d21c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d18e:	f04f 33ff 	mov.w	r3, #4294967295
 800d192:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	025b      	lsls	r3, r3, #9
 800d198:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d19a:	2390      	movs	r3, #144	; 0x90
 800d19c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d19e:	2302      	movs	r3, #2
 800d1a0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d1a6:	2301      	movs	r3, #1
 800d1a8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f107 0210 	add.w	r2, r7, #16
 800d1b2:	4611      	mov	r1, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f003 fa4b 	bl	8010650 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d90a      	bls.n	800d1d6 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2282      	movs	r2, #130	; 0x82
 800d1c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f003 faaf 	bl	8010730 <SDMMC_CmdReadMultiBlock>
 800d1d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1d4:	e009      	b.n	800d1ea <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	2281      	movs	r2, #129	; 0x81
 800d1da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f003 fa82 	bl	80106ec <SDMMC_CmdReadSingleBlock>
 800d1e8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d012      	beq.n	800d216 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a0d      	ldr	r2, [pc, #52]	; (800d22c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1fe:	431a      	orrs	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d212:	2301      	movs	r3, #1
 800d214:	e002      	b.n	800d21c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	e000      	b.n	800d21c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d21a:	2302      	movs	r3, #2
  }
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3730      	adds	r7, #48	; 0x30
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	0800dc0f 	.word	0x0800dc0f
 800d228:	0800dc81 	.word	0x0800dc81
 800d22c:	004005ff 	.word	0x004005ff
 800d230:	4225858c 	.word	0x4225858c

0800d234 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08c      	sub	sp, #48	; 0x30
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d107      	bne.n	800d25c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d250:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e0ca      	b.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b01      	cmp	r3, #1
 800d266:	f040 80c3 	bne.w	800d3f0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d907      	bls.n	800d28e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d282:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e0b1      	b.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2203      	movs	r2, #3
 800d292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2200      	movs	r2, #0
 800d29c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f042 021a 	orr.w	r2, r2, #26
 800d2ac:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2b2:	4a52      	ldr	r2, [pc, #328]	; (800d3fc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d2b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ba:	4a51      	ldr	r2, [pc, #324]	; (800d400 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d2bc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d002      	beq.n	800d2d4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d0:	025b      	lsls	r3, r3, #9
 800d2d2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f003 f9e3 	bl	80106a8 <SDMMC_CmdBlockLength>
 800d2e2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00f      	beq.n	800d30a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a45      	ldr	r2, [pc, #276]	; (800d404 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d2f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2f8:	431a      	orrs	r2, r3
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	e073      	b.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d90a      	bls.n	800d326 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	22a0      	movs	r2, #160	; 0xa0
 800d314:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d31c:	4618      	mov	r0, r3
 800d31e:	f003 fa4b 	bl	80107b8 <SDMMC_CmdWriteMultiBlock>
 800d322:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d324:	e009      	b.n	800d33a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2290      	movs	r2, #144	; 0x90
 800d32a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d332:	4618      	mov	r0, r3
 800d334:	f003 fa1e 	bl	8010774 <SDMMC_CmdWriteSingleBlock>
 800d338:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d012      	beq.n	800d366 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	4a2f      	ldr	r2, [pc, #188]	; (800d404 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34e:	431a      	orrs	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e045      	b.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d366:	4b28      	ldr	r3, [pc, #160]	; (800d408 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d368:	2201      	movs	r2, #1
 800d36a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d370:	68b9      	ldr	r1, [r7, #8]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3380      	adds	r3, #128	; 0x80
 800d378:	461a      	mov	r2, r3
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	025b      	lsls	r3, r3, #9
 800d37e:	089b      	lsrs	r3, r3, #2
 800d380:	f7fd facc 	bl	800a91c <HAL_DMA_Start_IT>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d01a      	beq.n	800d3c0 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f022 021a 	bic.w	r2, r2, #26
 800d398:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a19      	ldr	r2, [pc, #100]	; (800d404 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d3a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2201      	movs	r2, #1
 800d3b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e018      	b.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	025b      	lsls	r3, r3, #9
 800d3ca:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d3cc:	2390      	movs	r3, #144	; 0x90
 800d3ce:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f107 0210 	add.w	r2, r7, #16
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f003 f932 	bl	8010650 <SDIO_ConfigData>

      return HAL_OK;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	e000      	b.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3f0:	2302      	movs	r3, #2
  }
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3730      	adds	r7, #48	; 0x30
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0800dbe5 	.word	0x0800dbe5
 800d400:	0800dc81 	.word	0x0800dc81
 800d404:	004005ff 	.word	0x004005ff
 800d408:	4225858c 	.word	0x4225858c

0800d40c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d418:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d008      	beq.n	800d43a <HAL_SD_IRQHandler+0x2e>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f003 0308 	and.w	r3, r3, #8
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 ffc8 	bl	800e3c8 <SD_Read_IT>
 800d438:	e155      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 808f 	beq.w	800d568 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d452:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45a:	687a      	ldr	r2, [r7, #4]
 800d45c:	6812      	ldr	r2, [r2, #0]
 800d45e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d462:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d466:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f022 0201 	bic.w	r2, r2, #1
 800d476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f003 0308 	and.w	r3, r3, #8
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d039      	beq.n	800d4f6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f003 0302 	and.w	r3, r3, #2
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d104      	bne.n	800d496 <HAL_SD_IRQHandler+0x8a>
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	f003 0320 	and.w	r3, r3, #32
 800d492:	2b00      	cmp	r3, #0
 800d494:	d011      	beq.n	800d4ba <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f003 f9ae 	bl	80107fc <SDMMC_CmdStopTransfer>
 800d4a0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d008      	beq.n	800d4ba <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	431a      	orrs	r2, r3
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f000 f91f 	bl	800d6f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d104      	bne.n	800d4e6 <HAL_SD_IRQHandler+0xda>
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f003 0302 	and.w	r3, r3, #2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f003 fe04 	bl	80110f4 <HAL_SD_RxCpltCallback>
 800d4ec:	e0fb      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f003 fdf6 	bl	80110e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4f4:	e0f7      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 80f2 	beq.w	800d6e6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f003 0320 	and.w	r3, r3, #32
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d011      	beq.n	800d530 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4618      	mov	r0, r3
 800d512:	f003 f973 	bl	80107fc <SDMMC_CmdStopTransfer>
 800d516:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d008      	beq.n	800d530 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	431a      	orrs	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 f8e4 	bl	800d6f8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	f040 80d5 	bne.w	800d6e6 <HAL_SD_IRQHandler+0x2da>
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f003 0302 	and.w	r3, r3, #2
 800d542:	2b00      	cmp	r3, #0
 800d544:	f040 80cf 	bne.w	800d6e6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f022 0208 	bic.w	r2, r2, #8
 800d556:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f003 fdbd 	bl	80110e0 <HAL_SD_TxCpltCallback>
}
 800d566:	e0be      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d572:	2b00      	cmp	r3, #0
 800d574:	d008      	beq.n	800d588 <HAL_SD_IRQHandler+0x17c>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f003 0308 	and.w	r3, r3, #8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d003      	beq.n	800d588 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f000 ff72 	bl	800e46a <SD_Write_IT>
 800d586:	e0ae      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d592:	2b00      	cmp	r3, #0
 800d594:	f000 80a7 	beq.w	800d6e6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59e:	f003 0302 	and.w	r3, r3, #2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d005      	beq.n	800d5b2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5aa:	f043 0202 	orr.w	r2, r3, #2
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b8:	f003 0308 	and.w	r3, r3, #8
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d005      	beq.n	800d5cc <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c4:	f043 0208 	orr.w	r2, r3, #8
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d2:	f003 0320 	and.w	r3, r3, #32
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5de:	f043 0220 	orr.w	r2, r3, #32
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ec:	f003 0310 	and.w	r3, r3, #16
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d005      	beq.n	800d600 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f8:	f043 0210 	orr.w	r2, r3, #16
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f240 523a 	movw	r2, #1338	; 0x53a
 800d608:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d618:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4618      	mov	r0, r3
 800d620:	f003 f8ec 	bl	80107fc <SDMMC_CmdStopTransfer>
 800d624:	4602      	mov	r2, r0
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62a:	431a      	orrs	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f003 0308 	and.w	r3, r3, #8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d00a      	beq.n	800d650 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f855 	bl	800d6f8 <HAL_SD_ErrorCallback>
}
 800d64e:	e04a      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d656:	2b00      	cmp	r3, #0
 800d658:	d045      	beq.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f003 0310 	and.w	r3, r3, #16
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <HAL_SD_IRQHandler+0x262>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0320 	and.w	r3, r3, #32
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d011      	beq.n	800d692 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d672:	4a1f      	ldr	r2, [pc, #124]	; (800d6f0 <HAL_SD_IRQHandler+0x2e4>)
 800d674:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7fd f9a6 	bl	800a9cc <HAL_DMA_Abort_IT>
 800d680:	4603      	mov	r3, r0
 800d682:	2b00      	cmp	r3, #0
 800d684:	d02f      	beq.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 fb4a 	bl	800dd24 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d690:	e029      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f003 0301 	and.w	r3, r3, #1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d104      	bne.n	800d6a6 <HAL_SD_IRQHandler+0x29a>
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0302 	and.w	r3, r3, #2
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d011      	beq.n	800d6ca <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6aa:	4a12      	ldr	r2, [pc, #72]	; (800d6f4 <HAL_SD_IRQHandler+0x2e8>)
 800d6ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fd f98a 	bl	800a9cc <HAL_DMA_Abort_IT>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d013      	beq.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fb65 	bl	800dd92 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6c8:	e00d      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f003 fcf4 	bl	80110cc <HAL_SD_AbortCallback>
}
 800d6e4:	e7ff      	b.n	800d6e6 <HAL_SD_IRQHandler+0x2da>
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	0800dd25 	.word	0x0800dd25
 800d6f4:	0800dd93 	.word	0x0800dd93

0800d6f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d71a:	0f9b      	lsrs	r3, r3, #30
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d726:	0e9b      	lsrs	r3, r3, #26
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d738:	0e1b      	lsrs	r3, r3, #24
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	f003 0303 	and.w	r3, r3, #3
 800d740:	b2da      	uxtb	r2, r3
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d74a:	0c1b      	lsrs	r3, r3, #16
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d762:	b2da      	uxtb	r2, r3
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d76c:	0d1b      	lsrs	r3, r3, #20
 800d76e:	b29a      	uxth	r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d778:	0c1b      	lsrs	r3, r3, #16
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	f003 030f 	and.w	r3, r3, #15
 800d780:	b2da      	uxtb	r2, r3
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d78a:	0bdb      	lsrs	r3, r3, #15
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	f003 0301 	and.w	r3, r3, #1
 800d792:	b2da      	uxtb	r2, r3
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d79c:	0b9b      	lsrs	r3, r3, #14
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7ae:	0b5b      	lsrs	r3, r3, #13
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c0:	0b1b      	lsrs	r3, r3, #12
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d163      	bne.n	800d8a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e0:	009a      	lsls	r2, r3, #2
 800d7e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d7ec:	0f92      	lsrs	r2, r2, #30
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f8:	0edb      	lsrs	r3, r3, #27
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 0307 	and.w	r3, r3, #7
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d80a:	0e1b      	lsrs	r3, r3, #24
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 0307 	and.w	r3, r3, #7
 800d812:	b2da      	uxtb	r2, r3
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d81c:	0d5b      	lsrs	r3, r3, #21
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	f003 0307 	and.w	r3, r3, #7
 800d824:	b2da      	uxtb	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82e:	0c9b      	lsrs	r3, r3, #18
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 0307 	and.w	r3, r3, #7
 800d836:	b2da      	uxtb	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d840:	0bdb      	lsrs	r3, r3, #15
 800d842:	b2db      	uxtb	r3, r3
 800d844:	f003 0307 	and.w	r3, r3, #7
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	1c5a      	adds	r2, r3, #1
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	7e1b      	ldrb	r3, [r3, #24]
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 0307 	and.w	r3, r3, #7
 800d862:	3302      	adds	r3, #2
 800d864:	2201      	movs	r2, #1
 800d866:	fa02 f303 	lsl.w	r3, r2, r3
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d86e:	fb02 f203 	mul.w	r2, r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	7a1b      	ldrb	r3, [r3, #8]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 030f 	and.w	r3, r3, #15
 800d880:	2201      	movs	r2, #1
 800d882:	409a      	lsls	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d890:	0a52      	lsrs	r2, r2, #9
 800d892:	fb02 f203 	mul.w	r2, r2, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8a0:	661a      	str	r2, [r3, #96]	; 0x60
 800d8a2:	e031      	b.n	800d908 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d11d      	bne.n	800d8e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8b0:	041b      	lsls	r3, r3, #16
 800d8b2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ba:	0c1b      	lsrs	r3, r3, #16
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	029a      	lsls	r2, r3, #10
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8dc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	661a      	str	r2, [r3, #96]	; 0x60
 800d8e6:	e00f      	b.n	800d908 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a58      	ldr	r2, [pc, #352]	; (800da50 <HAL_SD_GetCardCSD+0x344>)
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d904:	2301      	movs	r3, #1
 800d906:	e09d      	b.n	800da44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d90c:	0b9b      	lsrs	r3, r3, #14
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	b2da      	uxtb	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d91e:	09db      	lsrs	r3, r3, #7
 800d920:	b2db      	uxtb	r3, r3
 800d922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d926:	b2da      	uxtb	r2, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d930:	b2db      	uxtb	r3, r3
 800d932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d936:	b2da      	uxtb	r2, r3
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d940:	0fdb      	lsrs	r3, r3, #31
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94c:	0f5b      	lsrs	r3, r3, #29
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f003 0303 	and.w	r3, r3, #3
 800d954:	b2da      	uxtb	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d95e:	0e9b      	lsrs	r3, r3, #26
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 0307 	and.w	r3, r3, #7
 800d966:	b2da      	uxtb	r2, r3
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d970:	0d9b      	lsrs	r3, r3, #22
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 030f 	and.w	r3, r3, #15
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	0d5b      	lsrs	r3, r3, #21
 800d984:	b2db      	uxtb	r3, r3
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99e:	0c1b      	lsrs	r3, r3, #16
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b2:	0bdb      	lsrs	r3, r3, #15
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c6:	0b9b      	lsrs	r3, r3, #14
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9da:	0b5b      	lsrs	r3, r3, #13
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ee:	0b1b      	lsrs	r3, r3, #12
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da02:	0a9b      	lsrs	r3, r3, #10
 800da04:	b2db      	uxtb	r3, r3
 800da06:	f003 0303 	and.w	r3, r3, #3
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da16:	0a1b      	lsrs	r3, r3, #8
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 0303 	and.w	r3, r3, #3
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da2a:	085b      	lsrs	r3, r3, #1
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	004005ff 	.word	0x004005ff

0800da54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800daac:	b5b0      	push	{r4, r5, r7, lr}
 800daae:	b08e      	sub	sp, #56	; 0x38
 800dab0:	af04      	add	r7, sp, #16
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2203      	movs	r2, #3
 800daba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dac2:	2b03      	cmp	r3, #3
 800dac4:	d02e      	beq.n	800db24 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dacc:	d106      	bne.n	800dadc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	639a      	str	r2, [r3, #56]	; 0x38
 800dada:	e029      	b.n	800db30 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dae2:	d10a      	bne.n	800dafa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f000 fb0f 	bl	800e108 <SD_WideBus_Enable>
 800daea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	431a      	orrs	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	639a      	str	r2, [r3, #56]	; 0x38
 800daf8:	e01a      	b.n	800db30 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10a      	bne.n	800db16 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 fb4c 	bl	800e19e <SD_WideBus_Disable>
 800db06:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0e:	431a      	orrs	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	639a      	str	r2, [r3, #56]	; 0x38
 800db14:	e00c      	b.n	800db30 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	639a      	str	r2, [r3, #56]	; 0x38
 800db22:	e005      	b.n	800db30 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	2b00      	cmp	r3, #0
 800db36:	d009      	beq.n	800db4c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a18      	ldr	r2, [pc, #96]	; (800dba0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800db3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	e024      	b.n	800db96 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	68db      	ldr	r3, [r3, #12]
 800db5c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	699b      	ldr	r3, [r3, #24]
 800db6c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681d      	ldr	r5, [r3, #0]
 800db72:	466c      	mov	r4, sp
 800db74:	f107 0318 	add.w	r3, r7, #24
 800db78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800db7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800db80:	f107 030c 	add.w	r3, r7, #12
 800db84:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db86:	4628      	mov	r0, r5
 800db88:	f002 fcb2 	bl	80104f0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3728      	adds	r7, #40	; 0x28
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bdb0      	pop	{r4, r5, r7, pc}
 800db9e:	bf00      	nop
 800dba0:	004005ff 	.word	0x004005ff

0800dba4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b086      	sub	sp, #24
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dbb0:	f107 030c 	add.w	r3, r7, #12
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fa7e 	bl	800e0b8 <SD_SendStatus>
 800dbbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d005      	beq.n	800dbd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	431a      	orrs	r2, r3
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	0a5b      	lsrs	r3, r3, #9
 800dbd4:	f003 030f 	and.w	r3, r3, #15
 800dbd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dbda:	693b      	ldr	r3, [r7, #16]
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3718      	adds	r7, #24
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}

0800dbe4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b085      	sub	sp, #20
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc00:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dc02:	bf00      	nop
 800dc04:	3714      	adds	r7, #20
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr

0800dc0e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc0e:	b580      	push	{r7, lr}
 800dc10:	b084      	sub	sp, #16
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc20:	2b82      	cmp	r3, #130	; 0x82
 800dc22:	d111      	bne.n	800dc48 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f002 fde7 	bl	80107fc <SDMMC_CmdStopTransfer>
 800dc2e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d008      	beq.n	800dc48 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	431a      	orrs	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dc42:	68f8      	ldr	r0, [r7, #12]
 800dc44:	f7ff fd58 	bl	800d6f8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f022 0208 	bic.w	r2, r2, #8
 800dc56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc60:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2201      	movs	r2, #1
 800dc66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f003 fa3f 	bl	80110f4 <HAL_SD_RxCpltCallback>
#endif
}
 800dc76:	bf00      	nop
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
	...

0800dc80 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc8c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7fd f848 	bl	800ad24 <HAL_DMA_GetError>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d03e      	beq.n	800dd18 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dca8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d002      	beq.n	800dcb6 <SD_DMAError+0x36>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d12d      	bne.n	800dd12 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	4a19      	ldr	r2, [pc, #100]	; (800dd20 <SD_DMAError+0xa0>)
 800dcbc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dccc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dcce:	697b      	ldr	r3, [r7, #20]
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dcda:	6978      	ldr	r0, [r7, #20]
 800dcdc:	f7ff ff62 	bl	800dba4 <HAL_SD_GetCardState>
 800dce0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	2b06      	cmp	r3, #6
 800dce6:	d002      	beq.n	800dcee <SD_DMAError+0x6e>
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2b05      	cmp	r3, #5
 800dcec:	d10a      	bne.n	800dd04 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f002 fd82 	bl	80107fc <SDMMC_CmdStopTransfer>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfe:	431a      	orrs	r2, r3
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2201      	movs	r2, #1
 800dd08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dd12:	6978      	ldr	r0, [r7, #20]
 800dd14:	f7ff fcf0 	bl	800d6f8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dd18:	bf00      	nop
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	004005ff 	.word	0x004005ff

0800dd24 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b084      	sub	sp, #16
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd30:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd3a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7ff ff31 	bl	800dba4 <HAL_SD_GetCardState>
 800dd42:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	2b06      	cmp	r3, #6
 800dd56:	d002      	beq.n	800dd5e <SD_DMATxAbort+0x3a>
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b05      	cmp	r3, #5
 800dd5c:	d10a      	bne.n	800dd74 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f002 fd4a 	bl	80107fc <SDMMC_CmdStopTransfer>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d103      	bne.n	800dd84 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f003 f9a5 	bl	80110cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd82:	e002      	b.n	800dd8a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f7ff fcb7 	bl	800d6f8 <HAL_SD_ErrorCallback>
}
 800dd8a:	bf00      	nop
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}

0800dd92 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dd92:	b580      	push	{r7, lr}
 800dd94:	b084      	sub	sp, #16
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f240 523a 	movw	r2, #1338	; 0x53a
 800dda8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff fefa 	bl	800dba4 <HAL_SD_GetCardState>
 800ddb0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2201      	movs	r2, #1
 800ddb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b06      	cmp	r3, #6
 800ddc4:	d002      	beq.n	800ddcc <SD_DMARxAbort+0x3a>
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	2b05      	cmp	r3, #5
 800ddca:	d10a      	bne.n	800dde2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f002 fd13 	bl	80107fc <SDMMC_CmdStopTransfer>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dddc:	431a      	orrs	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d103      	bne.n	800ddf2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f003 f96e 	bl	80110cc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ddf0:	e002      	b.n	800ddf8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7ff fc80 	bl	800d6f8 <HAL_SD_ErrorCallback>
}
 800ddf8:	bf00      	nop
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de00:	b5b0      	push	{r4, r5, r7, lr}
 800de02:	b094      	sub	sp, #80	; 0x50
 800de04:	af04      	add	r7, sp, #16
 800de06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800de08:	2301      	movs	r3, #1
 800de0a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4618      	mov	r0, r3
 800de12:	f002 fbc5 	bl	80105a0 <SDIO_GetPowerState>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d102      	bne.n	800de22 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de20:	e0b7      	b.n	800df92 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de26:	2b03      	cmp	r3, #3
 800de28:	d02f      	beq.n	800de8a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4618      	mov	r0, r3
 800de30:	f002 fdee 	bl	8010a10 <SDMMC_CmdSendCID>
 800de34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <SD_InitCard+0x40>
    {
      return errorstate;
 800de3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de3e:	e0a8      	b.n	800df92 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2100      	movs	r1, #0
 800de46:	4618      	mov	r0, r3
 800de48:	f002 fbef 	bl	801062a <SDIO_GetResponse>
 800de4c:	4602      	mov	r2, r0
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	2104      	movs	r1, #4
 800de58:	4618      	mov	r0, r3
 800de5a:	f002 fbe6 	bl	801062a <SDIO_GetResponse>
 800de5e:	4602      	mov	r2, r0
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	2108      	movs	r1, #8
 800de6a:	4618      	mov	r0, r3
 800de6c:	f002 fbdd 	bl	801062a <SDIO_GetResponse>
 800de70:	4602      	mov	r2, r0
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	210c      	movs	r1, #12
 800de7c:	4618      	mov	r0, r3
 800de7e:	f002 fbd4 	bl	801062a <SDIO_GetResponse>
 800de82:	4602      	mov	r2, r0
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8e:	2b03      	cmp	r3, #3
 800de90:	d00d      	beq.n	800deae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f107 020e 	add.w	r2, r7, #14
 800de9a:	4611      	mov	r1, r2
 800de9c:	4618      	mov	r0, r3
 800de9e:	f002 fdf4 	bl	8010a8a <SDMMC_CmdSetRelAdd>
 800dea2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <SD_InitCard+0xae>
    {
      return errorstate;
 800deaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deac:	e071      	b.n	800df92 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deb2:	2b03      	cmp	r3, #3
 800deb4:	d036      	beq.n	800df24 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800deb6:	89fb      	ldrh	r3, [r7, #14]
 800deb8:	461a      	mov	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec6:	041b      	lsls	r3, r3, #16
 800dec8:	4619      	mov	r1, r3
 800deca:	4610      	mov	r0, r2
 800decc:	f002 fdbe 	bl	8010a4c <SDMMC_CmdSendCSD>
 800ded0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ded2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d001      	beq.n	800dedc <SD_InitCard+0xdc>
    {
      return errorstate;
 800ded8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deda:	e05a      	b.n	800df92 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2100      	movs	r1, #0
 800dee2:	4618      	mov	r0, r3
 800dee4:	f002 fba1 	bl	801062a <SDIO_GetResponse>
 800dee8:	4602      	mov	r2, r0
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2104      	movs	r1, #4
 800def4:	4618      	mov	r0, r3
 800def6:	f002 fb98 	bl	801062a <SDIO_GetResponse>
 800defa:	4602      	mov	r2, r0
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2108      	movs	r1, #8
 800df06:	4618      	mov	r0, r3
 800df08:	f002 fb8f 	bl	801062a <SDIO_GetResponse>
 800df0c:	4602      	mov	r2, r0
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	210c      	movs	r1, #12
 800df18:	4618      	mov	r0, r3
 800df1a:	f002 fb86 	bl	801062a <SDIO_GetResponse>
 800df1e:	4602      	mov	r2, r0
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2104      	movs	r1, #4
 800df2a:	4618      	mov	r0, r3
 800df2c:	f002 fb7d 	bl	801062a <SDIO_GetResponse>
 800df30:	4603      	mov	r3, r0
 800df32:	0d1a      	lsrs	r2, r3, #20
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df38:	f107 0310 	add.w	r3, r7, #16
 800df3c:	4619      	mov	r1, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f7ff fbe4 	bl	800d70c <HAL_SD_GetCardCSD>
 800df44:	4603      	mov	r3, r0
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df4e:	e020      	b.n	800df92 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6819      	ldr	r1, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df58:	041b      	lsls	r3, r3, #16
 800df5a:	f04f 0400 	mov.w	r4, #0
 800df5e:	461a      	mov	r2, r3
 800df60:	4623      	mov	r3, r4
 800df62:	4608      	mov	r0, r1
 800df64:	f002 fc6c 	bl	8010840 <SDMMC_CmdSelDesel>
 800df68:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d001      	beq.n	800df74 <SD_InitCard+0x174>
  {
    return errorstate;
 800df70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df72:	e00e      	b.n	800df92 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681d      	ldr	r5, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	466c      	mov	r4, sp
 800df7c:	f103 0210 	add.w	r2, r3, #16
 800df80:	ca07      	ldmia	r2, {r0, r1, r2}
 800df82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df86:	3304      	adds	r3, #4
 800df88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df8a:	4628      	mov	r0, r5
 800df8c:	f002 fab0 	bl	80104f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800df90:	2300      	movs	r3, #0
}
 800df92:	4618      	mov	r0, r3
 800df94:	3740      	adds	r7, #64	; 0x40
 800df96:	46bd      	mov	sp, r7
 800df98:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	617b      	str	r3, [r7, #20]
 800dfac:	2300      	movs	r3, #0
 800dfae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f002 fc66 	bl	8010886 <SDMMC_CmdGoIdleState>
 800dfba:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	e072      	b.n	800e0ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f002 fc79 	bl	80108c2 <SDMMC_CmdOperCond>
 800dfd0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d00d      	beq.n	800dff4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f002 fc4f 	bl	8010886 <SDMMC_CmdGoIdleState>
 800dfe8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d004      	beq.n	800dffa <SD_PowerON+0x5e>
    {
      return errorstate;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	e05b      	b.n	800e0ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2201      	movs	r2, #1
 800dff8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d137      	bne.n	800e072 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2100      	movs	r1, #0
 800e008:	4618      	mov	r0, r3
 800e00a:	f002 fc79 	bl	8010900 <SDMMC_CmdAppCommand>
 800e00e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d02d      	beq.n	800e072 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e016:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e01a:	e047      	b.n	800e0ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	2100      	movs	r1, #0
 800e022:	4618      	mov	r0, r3
 800e024:	f002 fc6c 	bl	8010900 <SDMMC_CmdAppCommand>
 800e028:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <SD_PowerON+0x98>
    {
      return errorstate;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	e03b      	b.n	800e0ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	491e      	ldr	r1, [pc, #120]	; (800e0b4 <SD_PowerON+0x118>)
 800e03a:	4618      	mov	r0, r3
 800e03c:	f002 fc82 	bl	8010944 <SDMMC_CmdAppOperCommand>
 800e040:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d002      	beq.n	800e04e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e048:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e04c:	e02e      	b.n	800e0ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2100      	movs	r1, #0
 800e054:	4618      	mov	r0, r3
 800e056:	f002 fae8 	bl	801062a <SDIO_GetResponse>
 800e05a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e05c:	697b      	ldr	r3, [r7, #20]
 800e05e:	0fdb      	lsrs	r3, r3, #31
 800e060:	2b01      	cmp	r3, #1
 800e062:	d101      	bne.n	800e068 <SD_PowerON+0xcc>
 800e064:	2301      	movs	r3, #1
 800e066:	e000      	b.n	800e06a <SD_PowerON+0xce>
 800e068:	2300      	movs	r3, #0
 800e06a:	613b      	str	r3, [r7, #16]

    count++;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	3301      	adds	r3, #1
 800e070:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e078:	4293      	cmp	r3, r2
 800e07a:	d802      	bhi.n	800e082 <SD_PowerON+0xe6>
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d0cc      	beq.n	800e01c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e088:	4293      	cmp	r3, r2
 800e08a:	d902      	bls.n	800e092 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e08c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e090:	e00c      	b.n	800e0ac <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d003      	beq.n	800e0a4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	645a      	str	r2, [r3, #68]	; 0x44
 800e0a2:	e002      	b.n	800e0aa <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	c1100000 	.word	0xc1100000

0800e0b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d102      	bne.n	800e0ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e0c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0cc:	e018      	b.n	800e100 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d6:	041b      	lsls	r3, r3, #16
 800e0d8:	4619      	mov	r1, r3
 800e0da:	4610      	mov	r0, r2
 800e0dc:	f002 fcf6 	bl	8010acc <SDMMC_CmdSendStatus>
 800e0e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d001      	beq.n	800e0ec <SD_SendStatus+0x34>
  {
    return errorstate;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	e009      	b.n	800e100 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f002 fa99 	bl	801062a <SDIO_GetResponse>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e110:	2300      	movs	r3, #0
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2100      	movs	r1, #0
 800e11e:	4618      	mov	r0, r3
 800e120:	f002 fa83 	bl	801062a <SDIO_GetResponse>
 800e124:	4603      	mov	r3, r0
 800e126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e12a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e12e:	d102      	bne.n	800e136 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e134:	e02f      	b.n	800e196 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e136:	f107 030c 	add.w	r3, r7, #12
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f000 f879 	bl	800e234 <SD_FindSCR>
 800e142:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d001      	beq.n	800e14e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	e023      	b.n	800e196 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e154:	2b00      	cmp	r3, #0
 800e156:	d01c      	beq.n	800e192 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e160:	041b      	lsls	r3, r3, #16
 800e162:	4619      	mov	r1, r3
 800e164:	4610      	mov	r0, r2
 800e166:	f002 fbcb 	bl	8010900 <SDMMC_CmdAppCommand>
 800e16a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	e00f      	b.n	800e196 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2102      	movs	r1, #2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f002 fc04 	bl	801098a <SDMMC_CmdBusWidth>
 800e182:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d001      	beq.n	800e18e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	e003      	b.n	800e196 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e18e:	2300      	movs	r3, #0
 800e190:	e001      	b.n	800e196 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e192:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e196:	4618      	mov	r0, r3
 800e198:	3718      	adds	r7, #24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b086      	sub	sp, #24
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	2100      	movs	r1, #0
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f002 fa38 	bl	801062a <SDIO_GetResponse>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1c4:	d102      	bne.n	800e1cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1ca:	e02f      	b.n	800e22c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1cc:	f107 030c 	add.w	r3, r7, #12
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	6878      	ldr	r0, [r7, #4]
 800e1d4:	f000 f82e 	bl	800e234 <SD_FindSCR>
 800e1d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d001      	beq.n	800e1e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	e023      	b.n	800e22c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d01c      	beq.n	800e228 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1f6:	041b      	lsls	r3, r3, #16
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	f002 fb80 	bl	8010900 <SDMMC_CmdAppCommand>
 800e200:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	e00f      	b.n	800e22c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f002 fbb9 	bl	801098a <SDMMC_CmdBusWidth>
 800e218:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e21a:	697b      	ldr	r3, [r7, #20]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	e003      	b.n	800e22c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e224:	2300      	movs	r3, #0
 800e226:	e001      	b.n	800e22c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3718      	adds	r7, #24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e234:	b590      	push	{r4, r7, lr}
 800e236:	b08f      	sub	sp, #60	; 0x3c
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e23e:	f7fb fd7b 	bl	8009d38 <HAL_GetTick>
 800e242:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e244:	2300      	movs	r3, #0
 800e246:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e248:	2300      	movs	r3, #0
 800e24a:	60bb      	str	r3, [r7, #8]
 800e24c:	2300      	movs	r3, #0
 800e24e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2108      	movs	r1, #8
 800e25a:	4618      	mov	r0, r3
 800e25c:	f002 fa24 	bl	80106a8 <SDMMC_CmdBlockLength>
 800e260:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	e0a9      	b.n	800e3c0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681a      	ldr	r2, [r3, #0]
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e274:	041b      	lsls	r3, r3, #16
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f002 fb41 	bl	8010900 <SDMMC_CmdAppCommand>
 800e27e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e288:	e09a      	b.n	800e3c0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e28a:	f04f 33ff 	mov.w	r3, #4294967295
 800e28e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e290:	2308      	movs	r3, #8
 800e292:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e294:	2330      	movs	r3, #48	; 0x30
 800e296:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e298:	2302      	movs	r3, #2
 800e29a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e29c:	2300      	movs	r3, #0
 800e29e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	f107 0210 	add.w	r2, r7, #16
 800e2ac:	4611      	mov	r1, r2
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f002 f9ce 	bl	8010650 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f002 fb88 	bl	80109ce <SDMMC_CmdSendSCR>
 800e2be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d022      	beq.n	800e30c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c8:	e07a      	b.n	800e3c0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d00e      	beq.n	800e2f6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6819      	ldr	r1, [r3, #0]
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	f107 0208 	add.w	r2, r7, #8
 800e2e4:	18d4      	adds	r4, r2, r3
 800e2e6:	4608      	mov	r0, r1
 800e2e8:	f002 f92d 	bl	8010546 <SDIO_ReadFIFO>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	6023      	str	r3, [r4, #0]
      index++;
 800e2f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2f6:	f7fb fd1f 	bl	8009d38 <HAL_GetTick>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d102      	bne.n	800e30c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e306:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e30a:	e059      	b.n	800e3c0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e312:	f240 432a 	movw	r3, #1066	; 0x42a
 800e316:	4013      	ands	r3, r2
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d0d6      	beq.n	800e2ca <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e322:	f003 0308 	and.w	r3, r3, #8
 800e326:	2b00      	cmp	r3, #0
 800e328:	d005      	beq.n	800e336 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2208      	movs	r2, #8
 800e330:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e332:	2308      	movs	r3, #8
 800e334:	e044      	b.n	800e3c0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33c:	f003 0302 	and.w	r3, r3, #2
 800e340:	2b00      	cmp	r3, #0
 800e342:	d005      	beq.n	800e350 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	2202      	movs	r2, #2
 800e34a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e34c:	2302      	movs	r3, #2
 800e34e:	e037      	b.n	800e3c0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e356:	f003 0320 	and.w	r3, r3, #32
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d005      	beq.n	800e36a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2220      	movs	r2, #32
 800e364:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e366:	2320      	movs	r3, #32
 800e368:	e02a      	b.n	800e3c0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e372:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	061a      	lsls	r2, r3, #24
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	021b      	lsls	r3, r3, #8
 800e37c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e380:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	0a1b      	lsrs	r3, r3, #8
 800e386:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e38a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	0e1b      	lsrs	r3, r3, #24
 800e390:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e394:	601a      	str	r2, [r3, #0]
    scr++;
 800e396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e398:	3304      	adds	r3, #4
 800e39a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	061a      	lsls	r2, r3, #24
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	021b      	lsls	r3, r3, #8
 800e3a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	0a1b      	lsrs	r3, r3, #8
 800e3ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	0e1b      	lsrs	r3, r3, #24
 800e3b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e3be:	2300      	movs	r3, #0
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	373c      	adds	r7, #60	; 0x3c
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd90      	pop	{r4, r7, pc}

0800e3c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3da:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d03f      	beq.n	800e462 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	617b      	str	r3, [r7, #20]
 800e3e6:	e033      	b.n	800e450 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f002 f8aa 	bl	8010546 <SDIO_ReadFIFO>
 800e3f2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	b2da      	uxtb	r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	3301      	adds	r3, #1
 800e400:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	3b01      	subs	r3, #1
 800e406:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	0a1b      	lsrs	r3, r3, #8
 800e40c:	b2da      	uxtb	r2, r3
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3301      	adds	r3, #1
 800e416:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	3b01      	subs	r3, #1
 800e41c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	0c1b      	lsrs	r3, r3, #16
 800e422:	b2da      	uxtb	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	3301      	adds	r3, #1
 800e42c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	3b01      	subs	r3, #1
 800e432:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	0e1b      	lsrs	r3, r3, #24
 800e438:	b2da      	uxtb	r2, r3
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3301      	adds	r3, #1
 800e442:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	3b01      	subs	r3, #1
 800e448:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	3301      	adds	r3, #1
 800e44e:	617b      	str	r3, [r7, #20]
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	2b07      	cmp	r3, #7
 800e454:	d9c8      	bls.n	800e3e8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e462:	bf00      	nop
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}

0800e46a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e46a:	b580      	push	{r7, lr}
 800e46c:	b086      	sub	sp, #24
 800e46e:	af00      	add	r7, sp, #0
 800e470:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6a1b      	ldr	r3, [r3, #32]
 800e476:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e47e:	693b      	ldr	r3, [r7, #16]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d043      	beq.n	800e50c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e484:	2300      	movs	r3, #0
 800e486:	617b      	str	r3, [r7, #20]
 800e488:	e037      	b.n	800e4fa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	3301      	adds	r3, #1
 800e494:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	3b01      	subs	r3, #1
 800e49a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	021a      	lsls	r2, r3, #8
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	041a      	lsls	r2, r3, #16
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	4313      	orrs	r3, r2
 800e4be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	3301      	adds	r3, #1
 800e4c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	061a      	lsls	r2, r3, #24
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	3301      	adds	r3, #1
 800e4dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	3b01      	subs	r3, #1
 800e4e2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f107 0208 	add.w	r2, r7, #8
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f002 f836 	bl	8010560 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	617b      	str	r3, [r7, #20]
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	2b07      	cmp	r3, #7
 800e4fe:	d9c4      	bls.n	800e48a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	693a      	ldr	r2, [r7, #16]
 800e50a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e50c:	bf00      	nop
 800e50e:	3718      	adds	r7, #24
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d101      	bne.n	800e526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e522:	2301      	movs	r3, #1
 800e524:	e056      	b.n	800e5d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b00      	cmp	r3, #0
 800e536:	d106      	bne.n	800e546 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7f8 fe6f 	bl	8007224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	2202      	movs	r2, #2
 800e54a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e55c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	685a      	ldr	r2, [r3, #4]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	431a      	orrs	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	431a      	orrs	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	431a      	orrs	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	431a      	orrs	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	699b      	ldr	r3, [r3, #24]
 800e57e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e582:	431a      	orrs	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	69db      	ldr	r3, [r3, #28]
 800e588:	431a      	orrs	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6a1b      	ldr	r3, [r3, #32]
 800e58e:	ea42 0103 	orr.w	r1, r2, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	430a      	orrs	r2, r1
 800e59c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	0c1b      	lsrs	r3, r3, #16
 800e5a4:	f003 0104 	and.w	r1, r3, #4
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	430a      	orrs	r2, r1
 800e5b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	69da      	ldr	r2, [r3, #28]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e5d2:	2300      	movs	r3, #0
}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b088      	sub	sp, #32
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	603b      	str	r3, [r7, #0]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d101      	bne.n	800e5fe <HAL_SPI_Transmit+0x22>
 800e5fa:	2302      	movs	r3, #2
 800e5fc:	e11e      	b.n	800e83c <HAL_SPI_Transmit+0x260>
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e606:	f7fb fb97 	bl	8009d38 <HAL_GetTick>
 800e60a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e60c:	88fb      	ldrh	r3, [r7, #6]
 800e60e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e616:	b2db      	uxtb	r3, r3
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d002      	beq.n	800e622 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e61c:	2302      	movs	r3, #2
 800e61e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e620:	e103      	b.n	800e82a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <HAL_SPI_Transmit+0x52>
 800e628:	88fb      	ldrh	r3, [r7, #6]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d102      	bne.n	800e634 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e632:	e0fa      	b.n	800e82a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2203      	movs	r2, #3
 800e638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68ba      	ldr	r2, [r7, #8]
 800e646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	88fa      	ldrh	r2, [r7, #6]
 800e64c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	88fa      	ldrh	r2, [r7, #6]
 800e652:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	2200      	movs	r2, #0
 800e65e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	689b      	ldr	r3, [r3, #8]
 800e676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e67a:	d107      	bne.n	800e68c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	681a      	ldr	r2, [r3, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e68a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e696:	2b40      	cmp	r3, #64	; 0x40
 800e698:	d007      	beq.n	800e6aa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	68db      	ldr	r3, [r3, #12]
 800e6ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6b2:	d14b      	bne.n	800e74c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	685b      	ldr	r3, [r3, #4]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d002      	beq.n	800e6c2 <HAL_SPI_Transmit+0xe6>
 800e6bc:	8afb      	ldrh	r3, [r7, #22]
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d13e      	bne.n	800e740 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c6:	881a      	ldrh	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d2:	1c9a      	adds	r2, r3, #2
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e6e6:	e02b      	b.n	800e740 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	f003 0302 	and.w	r3, r3, #2
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d112      	bne.n	800e71c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	881a      	ldrh	r2, [r3, #0]
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e706:	1c9a      	adds	r2, r3, #2
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e710:	b29b      	uxth	r3, r3
 800e712:	3b01      	subs	r3, #1
 800e714:	b29a      	uxth	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	86da      	strh	r2, [r3, #54]	; 0x36
 800e71a:	e011      	b.n	800e740 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e71c:	f7fb fb0c 	bl	8009d38 <HAL_GetTick>
 800e720:	4602      	mov	r2, r0
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	683a      	ldr	r2, [r7, #0]
 800e728:	429a      	cmp	r2, r3
 800e72a:	d803      	bhi.n	800e734 <HAL_SPI_Transmit+0x158>
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e732:	d102      	bne.n	800e73a <HAL_SPI_Transmit+0x15e>
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d102      	bne.n	800e740 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e73a:	2303      	movs	r3, #3
 800e73c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e73e:	e074      	b.n	800e82a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e744:	b29b      	uxth	r3, r3
 800e746:	2b00      	cmp	r3, #0
 800e748:	d1ce      	bne.n	800e6e8 <HAL_SPI_Transmit+0x10c>
 800e74a:	e04c      	b.n	800e7e6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d002      	beq.n	800e75a <HAL_SPI_Transmit+0x17e>
 800e754:	8afb      	ldrh	r3, [r7, #22]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d140      	bne.n	800e7dc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	330c      	adds	r3, #12
 800e764:	7812      	ldrb	r2, [r2, #0]
 800e766:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e776:	b29b      	uxth	r3, r3
 800e778:	3b01      	subs	r3, #1
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e780:	e02c      	b.n	800e7dc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	f003 0302 	and.w	r3, r3, #2
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	d113      	bne.n	800e7b8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	330c      	adds	r3, #12
 800e79a:	7812      	ldrb	r2, [r2, #0]
 800e79c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a2:	1c5a      	adds	r2, r3, #1
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	86da      	strh	r2, [r3, #54]	; 0x36
 800e7b6:	e011      	b.n	800e7dc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7b8:	f7fb fabe 	bl	8009d38 <HAL_GetTick>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d803      	bhi.n	800e7d0 <HAL_SPI_Transmit+0x1f4>
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ce:	d102      	bne.n	800e7d6 <HAL_SPI_Transmit+0x1fa>
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d102      	bne.n	800e7dc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e7d6:	2303      	movs	r3, #3
 800e7d8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e7da:	e026      	b.n	800e82a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7e0:	b29b      	uxth	r3, r3
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d1cd      	bne.n	800e782 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7e6:	69ba      	ldr	r2, [r7, #24]
 800e7e8:	6839      	ldr	r1, [r7, #0]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f000 fba4 	bl	800ef38 <SPI_EndRxTxTransaction>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2220      	movs	r2, #32
 800e7fa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	689b      	ldr	r3, [r3, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e804:	2300      	movs	r3, #0
 800e806:	613b      	str	r3, [r7, #16]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	613b      	str	r3, [r7, #16]
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	613b      	str	r3, [r7, #16]
 800e818:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d002      	beq.n	800e828 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e822:	2301      	movs	r3, #1
 800e824:	77fb      	strb	r3, [r7, #31]
 800e826:	e000      	b.n	800e82a <HAL_SPI_Transmit+0x24e>
  }

error:
 800e828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2201      	movs	r2, #1
 800e82e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e83a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e83c:	4618      	mov	r0, r3
 800e83e:	3720      	adds	r7, #32
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b088      	sub	sp, #32
 800e848:	af02      	add	r7, sp, #8
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	603b      	str	r3, [r7, #0]
 800e850:	4613      	mov	r3, r2
 800e852:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	685b      	ldr	r3, [r3, #4]
 800e85c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e860:	d112      	bne.n	800e888 <HAL_SPI_Receive+0x44>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10e      	bne.n	800e888 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2204      	movs	r2, #4
 800e86e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e872:	88fa      	ldrh	r2, [r7, #6]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	4613      	mov	r3, r2
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f000 f8e9 	bl	800ea56 <HAL_SPI_TransmitReceive>
 800e884:	4603      	mov	r3, r0
 800e886:	e0e2      	b.n	800ea4e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d101      	bne.n	800e896 <HAL_SPI_Receive+0x52>
 800e892:	2302      	movs	r3, #2
 800e894:	e0db      	b.n	800ea4e <HAL_SPI_Receive+0x20a>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e89e:	f7fb fa4b 	bl	8009d38 <HAL_GetTick>
 800e8a2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d002      	beq.n	800e8b6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8b4:	e0c2      	b.n	800ea3c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d002      	beq.n	800e8c2 <HAL_SPI_Receive+0x7e>
 800e8bc:	88fb      	ldrh	r3, [r7, #6]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d102      	bne.n	800e8c8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8c6:	e0b9      	b.n	800ea3c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	2204      	movs	r2, #4
 800e8cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	68ba      	ldr	r2, [r7, #8]
 800e8da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	88fa      	ldrh	r2, [r7, #6]
 800e8e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	88fa      	ldrh	r2, [r7, #6]
 800e8e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2200      	movs	r2, #0
 800e904:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e90e:	d107      	bne.n	800e920 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e91e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e92a:	2b40      	cmp	r3, #64	; 0x40
 800e92c:	d007      	beq.n	800e93e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	681a      	ldr	r2, [r3, #0]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e93c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d162      	bne.n	800ea0c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e946:	e02e      	b.n	800e9a6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b01      	cmp	r3, #1
 800e954:	d115      	bne.n	800e982 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f103 020c 	add.w	r2, r3, #12
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e962:	7812      	ldrb	r2, [r2, #0]
 800e964:	b2d2      	uxtb	r2, r2
 800e966:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96c:	1c5a      	adds	r2, r3, #1
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e976:	b29b      	uxth	r3, r3
 800e978:	3b01      	subs	r3, #1
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e980:	e011      	b.n	800e9a6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e982:	f7fb f9d9 	bl	8009d38 <HAL_GetTick>
 800e986:	4602      	mov	r2, r0
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	1ad3      	subs	r3, r2, r3
 800e98c:	683a      	ldr	r2, [r7, #0]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d803      	bhi.n	800e99a <HAL_SPI_Receive+0x156>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e998:	d102      	bne.n	800e9a0 <HAL_SPI_Receive+0x15c>
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d102      	bne.n	800e9a6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e9a0:	2303      	movs	r3, #3
 800e9a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e9a4:	e04a      	b.n	800ea3c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9aa:	b29b      	uxth	r3, r3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1cb      	bne.n	800e948 <HAL_SPI_Receive+0x104>
 800e9b0:	e031      	b.n	800ea16 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	f003 0301 	and.w	r3, r3, #1
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d113      	bne.n	800e9e8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ca:	b292      	uxth	r2, r2
 800e9cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d2:	1c9a      	adds	r2, r3, #2
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	3b01      	subs	r3, #1
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9e6:	e011      	b.n	800ea0c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9e8:	f7fb f9a6 	bl	8009d38 <HAL_GetTick>
 800e9ec:	4602      	mov	r2, r0
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	683a      	ldr	r2, [r7, #0]
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d803      	bhi.n	800ea00 <HAL_SPI_Receive+0x1bc>
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fe:	d102      	bne.n	800ea06 <HAL_SPI_Receive+0x1c2>
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d102      	bne.n	800ea0c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ea06:	2303      	movs	r3, #3
 800ea08:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ea0a:	e017      	b.n	800ea3c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d1cd      	bne.n	800e9b2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea16:	693a      	ldr	r2, [r7, #16]
 800ea18:	6839      	ldr	r1, [r7, #0]
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	f000 fa27 	bl	800ee6e <SPI_EndRxTransaction>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d002      	beq.n	800ea2c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2220      	movs	r2, #32
 800ea2a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d002      	beq.n	800ea3a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	75fb      	strb	r3, [r7, #23]
 800ea38:	e000      	b.n	800ea3c <HAL_SPI_Receive+0x1f8>
  }

error :
 800ea3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2200      	movs	r2, #0
 800ea48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}

0800ea56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea56:	b580      	push	{r7, lr}
 800ea58:	b08c      	sub	sp, #48	; 0x30
 800ea5a:	af00      	add	r7, sp, #0
 800ea5c:	60f8      	str	r0, [r7, #12]
 800ea5e:	60b9      	str	r1, [r7, #8]
 800ea60:	607a      	str	r2, [r7, #4]
 800ea62:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea64:	2301      	movs	r3, #1
 800ea66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d101      	bne.n	800ea7c <HAL_SPI_TransmitReceive+0x26>
 800ea78:	2302      	movs	r3, #2
 800ea7a:	e18a      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x33c>
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea84:	f7fb f958 	bl	8009d38 <HAL_GetTick>
 800ea88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ea9a:	887b      	ldrh	r3, [r7, #2]
 800ea9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaa2:	2b01      	cmp	r3, #1
 800eaa4:	d00f      	beq.n	800eac6 <HAL_SPI_TransmitReceive+0x70>
 800eaa6:	69fb      	ldr	r3, [r7, #28]
 800eaa8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaac:	d107      	bne.n	800eabe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	689b      	ldr	r3, [r3, #8]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d103      	bne.n	800eabe <HAL_SPI_TransmitReceive+0x68>
 800eab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	d003      	beq.n	800eac6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eabe:	2302      	movs	r3, #2
 800eac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eac4:	e15b      	b.n	800ed7e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d005      	beq.n	800ead8 <HAL_SPI_TransmitReceive+0x82>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d002      	beq.n	800ead8 <HAL_SPI_TransmitReceive+0x82>
 800ead2:	887b      	ldrh	r3, [r7, #2]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d103      	bne.n	800eae0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ead8:	2301      	movs	r3, #1
 800eada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eade:	e14e      	b.n	800ed7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	2b04      	cmp	r3, #4
 800eaea:	d003      	beq.n	800eaf4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2205      	movs	r2, #5
 800eaf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	687a      	ldr	r2, [r7, #4]
 800eafe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	887a      	ldrh	r2, [r7, #2]
 800eb04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	887a      	ldrh	r2, [r7, #2]
 800eb0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	887a      	ldrh	r2, [r7, #2]
 800eb16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	887a      	ldrh	r2, [r7, #2]
 800eb1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2200      	movs	r2, #0
 800eb22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2200      	movs	r2, #0
 800eb28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb34:	2b40      	cmp	r3, #64	; 0x40
 800eb36:	d007      	beq.n	800eb48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb50:	d178      	bne.n	800ec44 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <HAL_SPI_TransmitReceive+0x10a>
 800eb5a:	8b7b      	ldrh	r3, [r7, #26]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d166      	bne.n	800ec2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb64:	881a      	ldrh	r2, [r3, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb70:	1c9a      	adds	r2, r3, #2
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	3b01      	subs	r3, #1
 800eb7e:	b29a      	uxth	r2, r3
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb84:	e053      	b.n	800ec2e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d11b      	bne.n	800ebcc <HAL_SPI_TransmitReceive+0x176>
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d016      	beq.n	800ebcc <HAL_SPI_TransmitReceive+0x176>
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d113      	bne.n	800ebcc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba8:	881a      	ldrh	r2, [r3, #0]
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebb4:	1c9a      	adds	r2, r3, #2
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebbe:	b29b      	uxth	r3, r3
 800ebc0:	3b01      	subs	r3, #1
 800ebc2:	b29a      	uxth	r2, r3
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b01      	cmp	r3, #1
 800ebd8:	d119      	bne.n	800ec0e <HAL_SPI_TransmitReceive+0x1b8>
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d014      	beq.n	800ec0e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	68da      	ldr	r2, [r3, #12]
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebee:	b292      	uxth	r2, r2
 800ebf0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf6:	1c9a      	adds	r2, r3, #2
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	3b01      	subs	r3, #1
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ec0e:	f7fb f893 	bl	8009d38 <HAL_GetTick>
 800ec12:	4602      	mov	r2, r0
 800ec14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d807      	bhi.n	800ec2e <HAL_SPI_TransmitReceive+0x1d8>
 800ec1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec24:	d003      	beq.n	800ec2e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ec26:	2303      	movs	r3, #3
 800ec28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec2c:	e0a7      	b.n	800ed7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec32:	b29b      	uxth	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1a6      	bne.n	800eb86 <HAL_SPI_TransmitReceive+0x130>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec3c:	b29b      	uxth	r3, r3
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d1a1      	bne.n	800eb86 <HAL_SPI_TransmitReceive+0x130>
 800ec42:	e07c      	b.n	800ed3e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d002      	beq.n	800ec52 <HAL_SPI_TransmitReceive+0x1fc>
 800ec4c:	8b7b      	ldrh	r3, [r7, #26]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d16b      	bne.n	800ed2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	330c      	adds	r3, #12
 800ec5c:	7812      	ldrb	r2, [r2, #0]
 800ec5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	3b01      	subs	r3, #1
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec78:	e057      	b.n	800ed2a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f003 0302 	and.w	r3, r3, #2
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	d11c      	bne.n	800ecc2 <HAL_SPI_TransmitReceive+0x26c>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d017      	beq.n	800ecc2 <HAL_SPI_TransmitReceive+0x26c>
 800ec92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d114      	bne.n	800ecc2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	330c      	adds	r3, #12
 800eca2:	7812      	ldrb	r2, [r2, #0]
 800eca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	d119      	bne.n	800ed04 <HAL_SPI_TransmitReceive+0x2ae>
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d014      	beq.n	800ed04 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	68da      	ldr	r2, [r3, #12]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece4:	b2d2      	uxtb	r2, r2
 800ece6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecec:	1c5a      	adds	r2, r3, #1
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecf6:	b29b      	uxth	r3, r3
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed00:	2301      	movs	r3, #1
 800ed02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ed04:	f7fb f818 	bl	8009d38 <HAL_GetTick>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d803      	bhi.n	800ed1c <HAL_SPI_TransmitReceive+0x2c6>
 800ed14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed1a:	d102      	bne.n	800ed22 <HAL_SPI_TransmitReceive+0x2cc>
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d103      	bne.n	800ed2a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ed22:	2303      	movs	r3, #3
 800ed24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed28:	e029      	b.n	800ed7e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d1a2      	bne.n	800ec7a <HAL_SPI_TransmitReceive+0x224>
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d19d      	bne.n	800ec7a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed42:	68f8      	ldr	r0, [r7, #12]
 800ed44:	f000 f8f8 	bl	800ef38 <SPI_EndRxTxTransaction>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d006      	beq.n	800ed5c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	2220      	movs	r2, #32
 800ed58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ed5a:	e010      	b.n	800ed7e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d10b      	bne.n	800ed7c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed64:	2300      	movs	r3, #0
 800ed66:	617b      	str	r3, [r7, #20]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	617b      	str	r3, [r7, #20]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	617b      	str	r3, [r7, #20]
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	e000      	b.n	800ed7e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ed7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ed8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3730      	adds	r7, #48	; 0x30
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b084      	sub	sp, #16
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	60f8      	str	r0, [r7, #12]
 800eda2:	60b9      	str	r1, [r7, #8]
 800eda4:	603b      	str	r3, [r7, #0]
 800eda6:	4613      	mov	r3, r2
 800eda8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800edaa:	e04c      	b.n	800ee46 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edb2:	d048      	beq.n	800ee46 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800edb4:	f7fa ffc0 	bl	8009d38 <HAL_GetTick>
 800edb8:	4602      	mov	r2, r0
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	683a      	ldr	r2, [r7, #0]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d902      	bls.n	800edca <SPI_WaitFlagStateUntilTimeout+0x30>
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d13d      	bne.n	800ee46 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	685a      	ldr	r2, [r3, #4]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800edd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ede2:	d111      	bne.n	800ee08 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	689b      	ldr	r3, [r3, #8]
 800ede8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edec:	d004      	beq.n	800edf8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	689b      	ldr	r3, [r3, #8]
 800edf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edf6:	d107      	bne.n	800ee08 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee10:	d10f      	bne.n	800ee32 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee20:	601a      	str	r2, [r3, #0]
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ee42:	2303      	movs	r3, #3
 800ee44:	e00f      	b.n	800ee66 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	689a      	ldr	r2, [r3, #8]
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	4013      	ands	r3, r2
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	bf0c      	ite	eq
 800ee56:	2301      	moveq	r3, #1
 800ee58:	2300      	movne	r3, #0
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	461a      	mov	r2, r3
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d1a3      	bne.n	800edac <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b086      	sub	sp, #24
 800ee72:	af02      	add	r7, sp, #8
 800ee74:	60f8      	str	r0, [r7, #12]
 800ee76:	60b9      	str	r1, [r7, #8]
 800ee78:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee82:	d111      	bne.n	800eea8 <SPI_EndRxTransaction+0x3a>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	689b      	ldr	r3, [r3, #8]
 800ee88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee8c:	d004      	beq.n	800ee98 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee96:	d107      	bne.n	800eea8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eea6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	685b      	ldr	r3, [r3, #4]
 800eeac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eeb0:	d12a      	bne.n	800ef08 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeba:	d012      	beq.n	800eee2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	9300      	str	r3, [sp, #0]
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	2200      	movs	r2, #0
 800eec4:	2180      	movs	r1, #128	; 0x80
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f7ff ff67 	bl	800ed9a <SPI_WaitFlagStateUntilTimeout>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d02d      	beq.n	800ef2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eed6:	f043 0220 	orr.w	r2, r3, #32
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800eede:	2303      	movs	r3, #3
 800eee0:	e026      	b.n	800ef30 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	2200      	movs	r2, #0
 800eeea:	2101      	movs	r1, #1
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f7ff ff54 	bl	800ed9a <SPI_WaitFlagStateUntilTimeout>
 800eef2:	4603      	mov	r3, r0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d01a      	beq.n	800ef2e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefc:	f043 0220 	orr.w	r2, r3, #32
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef04:	2303      	movs	r3, #3
 800ef06:	e013      	b.n	800ef30 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	9300      	str	r3, [sp, #0]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	2101      	movs	r1, #1
 800ef12:	68f8      	ldr	r0, [r7, #12]
 800ef14:	f7ff ff41 	bl	800ed9a <SPI_WaitFlagStateUntilTimeout>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d007      	beq.n	800ef2e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef22:	f043 0220 	orr.w	r2, r3, #32
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef2a:	2303      	movs	r3, #3
 800ef2c:	e000      	b.n	800ef30 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af02      	add	r7, sp, #8
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef44:	4b1b      	ldr	r3, [pc, #108]	; (800efb4 <SPI_EndRxTxTransaction+0x7c>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	4a1b      	ldr	r2, [pc, #108]	; (800efb8 <SPI_EndRxTxTransaction+0x80>)
 800ef4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef4e:	0d5b      	lsrs	r3, r3, #21
 800ef50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef54:	fb02 f303 	mul.w	r3, r2, r3
 800ef58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef62:	d112      	bne.n	800ef8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	2180      	movs	r1, #128	; 0x80
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	f7ff ff13 	bl	800ed9a <SPI_WaitFlagStateUntilTimeout>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d016      	beq.n	800efa8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef7e:	f043 0220 	orr.w	r2, r3, #32
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef86:	2303      	movs	r3, #3
 800ef88:	e00f      	b.n	800efaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d00a      	beq.n	800efa6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	3b01      	subs	r3, #1
 800ef94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efa0:	2b80      	cmp	r3, #128	; 0x80
 800efa2:	d0f2      	beq.n	800ef8a <SPI_EndRxTxTransaction+0x52>
 800efa4:	e000      	b.n	800efa8 <SPI_EndRxTxTransaction+0x70>
        break;
 800efa6:	bf00      	nop
  }

  return HAL_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3718      	adds	r7, #24
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	20000000 	.word	0x20000000
 800efb8:	165e9f81 	.word	0x165e9f81

0800efbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d101      	bne.n	800efce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e01d      	b.n	800f00a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7f8 f9da 	bl	800739c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2202      	movs	r2, #2
 800efec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3304      	adds	r3, #4
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f000 fb56 	bl	800f6ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f012:	b480      	push	{r7}
 800f014:	b085      	sub	sp, #20
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68da      	ldr	r2, [r3, #12]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f042 0201 	orr.w	r2, r2, #1
 800f028:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	689b      	ldr	r3, [r3, #8]
 800f030:	f003 0307 	and.w	r3, r3, #7
 800f034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b06      	cmp	r3, #6
 800f03a:	d007      	beq.n	800f04c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f042 0201 	orr.w	r2, r2, #1
 800f04a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3714      	adds	r7, #20
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr

0800f05a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f05a:	b580      	push	{r7, lr}
 800f05c:	b082      	sub	sp, #8
 800f05e:	af00      	add	r7, sp, #0
 800f060:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d101      	bne.n	800f06c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	e01d      	b.n	800f0a8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f072:	b2db      	uxtb	r3, r3
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f7f8 f917 	bl	80072b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2202      	movs	r2, #2
 800f08a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	3304      	adds	r3, #4
 800f096:	4619      	mov	r1, r3
 800f098:	4610      	mov	r0, r2
 800f09a:	f000 fb07 	bl	800f6ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0a6:	2300      	movs	r3, #0
}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3708      	adds	r7, #8
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 fd42 	bl	800fb4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a15      	ldr	r2, [pc, #84]	; (800f124 <HAL_TIM_PWM_Start+0x74>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d004      	beq.n	800f0dc <HAL_TIM_PWM_Start+0x2c>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a14      	ldr	r2, [pc, #80]	; (800f128 <HAL_TIM_PWM_Start+0x78>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d101      	bne.n	800f0e0 <HAL_TIM_PWM_Start+0x30>
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <HAL_TIM_PWM_Start+0x32>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d007      	beq.n	800f0f6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f0f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	f003 0307 	and.w	r3, r3, #7
 800f100:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b06      	cmp	r3, #6
 800f106:	d007      	beq.n	800f118 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f042 0201 	orr.w	r2, r2, #1
 800f116:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	40010000 	.word	0x40010000
 800f128:	40010400 	.word	0x40010400

0800f12c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b086      	sub	sp, #24
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d101      	bne.n	800f140 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f13c:	2301      	movs	r3, #1
 800f13e:	e083      	b.n	800f248 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f146:	b2db      	uxtb	r3, r3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d106      	bne.n	800f15a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7f8 f9b1 	bl	80074bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	2202      	movs	r2, #2
 800f15e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	6812      	ldr	r2, [r2, #0]
 800f16c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f170:	f023 0307 	bic.w	r3, r3, #7
 800f174:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3304      	adds	r3, #4
 800f17e:	4619      	mov	r1, r3
 800f180:	4610      	mov	r0, r2
 800f182:	f000 fa93 	bl	800f6ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	699b      	ldr	r3, [r3, #24]
 800f194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	6a1b      	ldr	r3, [r3, #32]
 800f19c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	4313      	orrs	r3, r2
 800f1a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1ae:	f023 0303 	bic.w	r3, r3, #3
 800f1b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	689a      	ldr	r2, [r3, #8]
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	021b      	lsls	r3, r3, #8
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	693a      	ldr	r2, [r7, #16]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f1cc:	f023 030c 	bic.w	r3, r3, #12
 800f1d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f1d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f1dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	68da      	ldr	r2, [r3, #12]
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	69db      	ldr	r3, [r3, #28]
 800f1e6:	021b      	lsls	r3, r3, #8
 800f1e8:	4313      	orrs	r3, r2
 800f1ea:	693a      	ldr	r2, [r7, #16]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	691b      	ldr	r3, [r3, #16]
 800f1f4:	011a      	lsls	r2, r3, #4
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	6a1b      	ldr	r3, [r3, #32]
 800f1fa:	031b      	lsls	r3, r3, #12
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	693a      	ldr	r2, [r7, #16]
 800f200:	4313      	orrs	r3, r2
 800f202:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f20a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f212:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	685a      	ldr	r2, [r3, #4]
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	695b      	ldr	r3, [r3, #20]
 800f21c:	011b      	lsls	r3, r3, #4
 800f21e:	4313      	orrs	r3, r2
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	4313      	orrs	r3, r2
 800f224:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	697a      	ldr	r2, [r7, #20]
 800f22c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	693a      	ldr	r2, [r7, #16]
 800f234:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2201      	movs	r2, #1
 800f242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3718      	adds	r7, #24
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b082      	sub	sp, #8
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <HAL_TIM_Encoder_Start+0x16>
 800f260:	2b04      	cmp	r3, #4
 800f262:	d008      	beq.n	800f276 <HAL_TIM_Encoder_Start+0x26>
 800f264:	e00f      	b.n	800f286 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	2201      	movs	r2, #1
 800f26c:	2100      	movs	r1, #0
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 fc6c 	bl	800fb4c <TIM_CCxChannelCmd>
      break;
 800f274:	e016      	b.n	800f2a4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2201      	movs	r2, #1
 800f27c:	2104      	movs	r1, #4
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 fc64 	bl	800fb4c <TIM_CCxChannelCmd>
      break;
 800f284:	e00e      	b.n	800f2a4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2201      	movs	r2, #1
 800f28c:	2100      	movs	r1, #0
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 fc5c 	bl	800fb4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2201      	movs	r2, #1
 800f29a:	2104      	movs	r1, #4
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 fc55 	bl	800fb4c <TIM_CCxChannelCmd>
      break;
 800f2a2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	f042 0201 	orr.w	r2, r2, #1
 800f2b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3708      	adds	r7, #8
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}

0800f2be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f2be:	b580      	push	{r7, lr}
 800f2c0:	b082      	sub	sp, #8
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	691b      	ldr	r3, [r3, #16]
 800f2cc:	f003 0302 	and.w	r3, r3, #2
 800f2d0:	2b02      	cmp	r3, #2
 800f2d2:	d122      	bne.n	800f31a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	f003 0302 	and.w	r3, r3, #2
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d11b      	bne.n	800f31a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f06f 0202 	mvn.w	r2, #2
 800f2ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	f003 0303 	and.w	r3, r3, #3
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f300:	6878      	ldr	r0, [r7, #4]
 800f302:	f000 f9b5 	bl	800f670 <HAL_TIM_IC_CaptureCallback>
 800f306:	e005      	b.n	800f314 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 f9a7 	bl	800f65c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f9b8 	bl	800f684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	691b      	ldr	r3, [r3, #16]
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b04      	cmp	r3, #4
 800f326:	d122      	bne.n	800f36e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	f003 0304 	and.w	r3, r3, #4
 800f332:	2b04      	cmp	r3, #4
 800f334:	d11b      	bne.n	800f36e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f06f 0204 	mvn.w	r2, #4
 800f33e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2202      	movs	r2, #2
 800f344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	699b      	ldr	r3, [r3, #24]
 800f34c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f350:	2b00      	cmp	r3, #0
 800f352:	d003      	beq.n	800f35c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 f98b 	bl	800f670 <HAL_TIM_IC_CaptureCallback>
 800f35a:	e005      	b.n	800f368 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f97d 	bl	800f65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f000 f98e 	bl	800f684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2200      	movs	r2, #0
 800f36c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	f003 0308 	and.w	r3, r3, #8
 800f378:	2b08      	cmp	r3, #8
 800f37a:	d122      	bne.n	800f3c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	68db      	ldr	r3, [r3, #12]
 800f382:	f003 0308 	and.w	r3, r3, #8
 800f386:	2b08      	cmp	r3, #8
 800f388:	d11b      	bne.n	800f3c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f06f 0208 	mvn.w	r2, #8
 800f392:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2204      	movs	r2, #4
 800f398:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	f003 0303 	and.w	r3, r3, #3
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d003      	beq.n	800f3b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f000 f961 	bl	800f670 <HAL_TIM_IC_CaptureCallback>
 800f3ae:	e005      	b.n	800f3bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f953 	bl	800f65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 f964 	bl	800f684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	691b      	ldr	r3, [r3, #16]
 800f3c8:	f003 0310 	and.w	r3, r3, #16
 800f3cc:	2b10      	cmp	r3, #16
 800f3ce:	d122      	bne.n	800f416 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	f003 0310 	and.w	r3, r3, #16
 800f3da:	2b10      	cmp	r3, #16
 800f3dc:	d11b      	bne.n	800f416 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	f06f 0210 	mvn.w	r2, #16
 800f3e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2208      	movs	r2, #8
 800f3ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	69db      	ldr	r3, [r3, #28]
 800f3f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d003      	beq.n	800f404 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 f937 	bl	800f670 <HAL_TIM_IC_CaptureCallback>
 800f402:	e005      	b.n	800f410 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f929 	bl	800f65c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 f93a 	bl	800f684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2200      	movs	r2, #0
 800f414:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	691b      	ldr	r3, [r3, #16]
 800f41c:	f003 0301 	and.w	r3, r3, #1
 800f420:	2b01      	cmp	r3, #1
 800f422:	d10e      	bne.n	800f442 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	f003 0301 	and.w	r3, r3, #1
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d107      	bne.n	800f442 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f06f 0201 	mvn.w	r2, #1
 800f43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7f6 fd27 	bl	8005e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	691b      	ldr	r3, [r3, #16]
 800f448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f44c:	2b80      	cmp	r3, #128	; 0x80
 800f44e:	d10e      	bne.n	800f46e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f45a:	2b80      	cmp	r3, #128	; 0x80
 800f45c:	d107      	bne.n	800f46e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fc6d 	bl	800fd48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f478:	2b40      	cmp	r3, #64	; 0x40
 800f47a:	d10e      	bne.n	800f49a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f486:	2b40      	cmp	r3, #64	; 0x40
 800f488:	d107      	bne.n	800f49a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f8ff 	bl	800f698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	691b      	ldr	r3, [r3, #16]
 800f4a0:	f003 0320 	and.w	r3, r3, #32
 800f4a4:	2b20      	cmp	r3, #32
 800f4a6:	d10e      	bne.n	800f4c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	f003 0320 	and.w	r3, r3, #32
 800f4b2:	2b20      	cmp	r3, #32
 800f4b4:	d107      	bne.n	800f4c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f06f 0220 	mvn.w	r2, #32
 800f4be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fc37 	bl	800fd34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4c6:	bf00      	nop
 800f4c8:	3708      	adds	r7, #8
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
	...

0800f4d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d101      	bne.n	800f4ea <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f4e6:	2302      	movs	r3, #2
 800f4e8:	e0b4      	b.n	800f654 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2201      	movs	r2, #1
 800f4ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2b0c      	cmp	r3, #12
 800f4fe:	f200 809f 	bhi.w	800f640 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f502:	a201      	add	r2, pc, #4	; (adr r2, 800f508 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f508:	0800f53d 	.word	0x0800f53d
 800f50c:	0800f641 	.word	0x0800f641
 800f510:	0800f641 	.word	0x0800f641
 800f514:	0800f641 	.word	0x0800f641
 800f518:	0800f57d 	.word	0x0800f57d
 800f51c:	0800f641 	.word	0x0800f641
 800f520:	0800f641 	.word	0x0800f641
 800f524:	0800f641 	.word	0x0800f641
 800f528:	0800f5bf 	.word	0x0800f5bf
 800f52c:	0800f641 	.word	0x0800f641
 800f530:	0800f641 	.word	0x0800f641
 800f534:	0800f641 	.word	0x0800f641
 800f538:	0800f5ff 	.word	0x0800f5ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68b9      	ldr	r1, [r7, #8]
 800f542:	4618      	mov	r0, r3
 800f544:	f000 f952 	bl	800f7ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	699a      	ldr	r2, [r3, #24]
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f042 0208 	orr.w	r2, r2, #8
 800f556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	699a      	ldr	r2, [r3, #24]
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f022 0204 	bic.w	r2, r2, #4
 800f566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	6999      	ldr	r1, [r3, #24]
 800f56e:	68bb      	ldr	r3, [r7, #8]
 800f570:	691a      	ldr	r2, [r3, #16]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	430a      	orrs	r2, r1
 800f578:	619a      	str	r2, [r3, #24]
      break;
 800f57a:	e062      	b.n	800f642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	68b9      	ldr	r1, [r7, #8]
 800f582:	4618      	mov	r0, r3
 800f584:	f000 f9a2 	bl	800f8cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	699a      	ldr	r2, [r3, #24]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	699a      	ldr	r2, [r3, #24]
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	6999      	ldr	r1, [r3, #24]
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	021a      	lsls	r2, r3, #8
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	430a      	orrs	r2, r1
 800f5ba:	619a      	str	r2, [r3, #24]
      break;
 800f5bc:	e041      	b.n	800f642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68b9      	ldr	r1, [r7, #8]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f000 f9f7 	bl	800f9b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	69da      	ldr	r2, [r3, #28]
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f042 0208 	orr.w	r2, r2, #8
 800f5d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	69da      	ldr	r2, [r3, #28]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f022 0204 	bic.w	r2, r2, #4
 800f5e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	69d9      	ldr	r1, [r3, #28]
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	691a      	ldr	r2, [r3, #16]
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	430a      	orrs	r2, r1
 800f5fa:	61da      	str	r2, [r3, #28]
      break;
 800f5fc:	e021      	b.n	800f642 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	68b9      	ldr	r1, [r7, #8]
 800f604:	4618      	mov	r0, r3
 800f606:	f000 fa4b 	bl	800faa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	69da      	ldr	r2, [r3, #28]
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	69da      	ldr	r2, [r3, #28]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	69d9      	ldr	r1, [r3, #28]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	691b      	ldr	r3, [r3, #16]
 800f634:	021a      	lsls	r2, r3, #8
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	430a      	orrs	r2, r1
 800f63c:	61da      	str	r2, [r3, #28]
      break;
 800f63e:	e000      	b.n	800f642 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f640:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2201      	movs	r2, #1
 800f646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f652:	2300      	movs	r3, #0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3710      	adds	r7, #16
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}

0800f65c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b083      	sub	sp, #12
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f664:	bf00      	nop
 800f666:	370c      	adds	r7, #12
 800f668:	46bd      	mov	sp, r7
 800f66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66e:	4770      	bx	lr

0800f670 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f670:	b480      	push	{r7}
 800f672:	b083      	sub	sp, #12
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f678:	bf00      	nop
 800f67a:	370c      	adds	r7, #12
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr

0800f684 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a40      	ldr	r2, [pc, #256]	; (800f7c0 <TIM_Base_SetConfig+0x114>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d013      	beq.n	800f6ec <TIM_Base_SetConfig+0x40>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6ca:	d00f      	beq.n	800f6ec <TIM_Base_SetConfig+0x40>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a3d      	ldr	r2, [pc, #244]	; (800f7c4 <TIM_Base_SetConfig+0x118>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d00b      	beq.n	800f6ec <TIM_Base_SetConfig+0x40>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a3c      	ldr	r2, [pc, #240]	; (800f7c8 <TIM_Base_SetConfig+0x11c>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d007      	beq.n	800f6ec <TIM_Base_SetConfig+0x40>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a3b      	ldr	r2, [pc, #236]	; (800f7cc <TIM_Base_SetConfig+0x120>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d003      	beq.n	800f6ec <TIM_Base_SetConfig+0x40>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a3a      	ldr	r2, [pc, #232]	; (800f7d0 <TIM_Base_SetConfig+0x124>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d108      	bne.n	800f6fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	685b      	ldr	r3, [r3, #4]
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	4a2f      	ldr	r2, [pc, #188]	; (800f7c0 <TIM_Base_SetConfig+0x114>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d02b      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f70c:	d027      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	4a2c      	ldr	r2, [pc, #176]	; (800f7c4 <TIM_Base_SetConfig+0x118>)
 800f712:	4293      	cmp	r3, r2
 800f714:	d023      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4a2b      	ldr	r2, [pc, #172]	; (800f7c8 <TIM_Base_SetConfig+0x11c>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d01f      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	4a2a      	ldr	r2, [pc, #168]	; (800f7cc <TIM_Base_SetConfig+0x120>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d01b      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a29      	ldr	r2, [pc, #164]	; (800f7d0 <TIM_Base_SetConfig+0x124>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d017      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	4a28      	ldr	r2, [pc, #160]	; (800f7d4 <TIM_Base_SetConfig+0x128>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d013      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a27      	ldr	r2, [pc, #156]	; (800f7d8 <TIM_Base_SetConfig+0x12c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d00f      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a26      	ldr	r2, [pc, #152]	; (800f7dc <TIM_Base_SetConfig+0x130>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d00b      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a25      	ldr	r2, [pc, #148]	; (800f7e0 <TIM_Base_SetConfig+0x134>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d007      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a24      	ldr	r2, [pc, #144]	; (800f7e4 <TIM_Base_SetConfig+0x138>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d003      	beq.n	800f75e <TIM_Base_SetConfig+0xb2>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a23      	ldr	r2, [pc, #140]	; (800f7e8 <TIM_Base_SetConfig+0x13c>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d108      	bne.n	800f770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	68db      	ldr	r3, [r3, #12]
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	695b      	ldr	r3, [r3, #20]
 800f77a:	4313      	orrs	r3, r2
 800f77c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	689a      	ldr	r2, [r3, #8]
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a0a      	ldr	r2, [pc, #40]	; (800f7c0 <TIM_Base_SetConfig+0x114>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d003      	beq.n	800f7a4 <TIM_Base_SetConfig+0xf8>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a0c      	ldr	r2, [pc, #48]	; (800f7d0 <TIM_Base_SetConfig+0x124>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d103      	bne.n	800f7ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	691a      	ldr	r2, [r3, #16]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2201      	movs	r2, #1
 800f7b0:	615a      	str	r2, [r3, #20]
}
 800f7b2:	bf00      	nop
 800f7b4:	3714      	adds	r7, #20
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	40010000 	.word	0x40010000
 800f7c4:	40000400 	.word	0x40000400
 800f7c8:	40000800 	.word	0x40000800
 800f7cc:	40000c00 	.word	0x40000c00
 800f7d0:	40010400 	.word	0x40010400
 800f7d4:	40014000 	.word	0x40014000
 800f7d8:	40014400 	.word	0x40014400
 800f7dc:	40014800 	.word	0x40014800
 800f7e0:	40001800 	.word	0x40001800
 800f7e4:	40001c00 	.word	0x40001c00
 800f7e8:	40002000 	.word	0x40002000

0800f7ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b087      	sub	sp, #28
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6a1b      	ldr	r3, [r3, #32]
 800f7fa:	f023 0201 	bic.w	r2, r3, #1
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a1b      	ldr	r3, [r3, #32]
 800f806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	685b      	ldr	r3, [r3, #4]
 800f80c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	699b      	ldr	r3, [r3, #24]
 800f812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f81a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f023 0303 	bic.w	r3, r3, #3
 800f822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	68fa      	ldr	r2, [r7, #12]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	f023 0302 	bic.w	r3, r3, #2
 800f834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	689b      	ldr	r3, [r3, #8]
 800f83a:	697a      	ldr	r2, [r7, #20]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	4a20      	ldr	r2, [pc, #128]	; (800f8c4 <TIM_OC1_SetConfig+0xd8>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d003      	beq.n	800f850 <TIM_OC1_SetConfig+0x64>
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	4a1f      	ldr	r2, [pc, #124]	; (800f8c8 <TIM_OC1_SetConfig+0xdc>)
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d10c      	bne.n	800f86a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	f023 0308 	bic.w	r3, r3, #8
 800f856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	697a      	ldr	r2, [r7, #20]
 800f85e:	4313      	orrs	r3, r2
 800f860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	f023 0304 	bic.w	r3, r3, #4
 800f868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4a15      	ldr	r2, [pc, #84]	; (800f8c4 <TIM_OC1_SetConfig+0xd8>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d003      	beq.n	800f87a <TIM_OC1_SetConfig+0x8e>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	4a14      	ldr	r2, [pc, #80]	; (800f8c8 <TIM_OC1_SetConfig+0xdc>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d111      	bne.n	800f89e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	695b      	ldr	r3, [r3, #20]
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	4313      	orrs	r3, r2
 800f892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	693a      	ldr	r2, [r7, #16]
 800f89a:	4313      	orrs	r3, r2
 800f89c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	693a      	ldr	r2, [r7, #16]
 800f8a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	685a      	ldr	r2, [r3, #4]
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	697a      	ldr	r2, [r7, #20]
 800f8b6:	621a      	str	r2, [r3, #32]
}
 800f8b8:	bf00      	nop
 800f8ba:	371c      	adds	r7, #28
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c2:	4770      	bx	lr
 800f8c4:	40010000 	.word	0x40010000
 800f8c8:	40010400 	.word	0x40010400

0800f8cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b087      	sub	sp, #28
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	f023 0210 	bic.w	r2, r3, #16
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	6a1b      	ldr	r3, [r3, #32]
 800f8e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	699b      	ldr	r3, [r3, #24]
 800f8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f8fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	021b      	lsls	r3, r3, #8
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	4313      	orrs	r3, r2
 800f90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	f023 0320 	bic.w	r3, r3, #32
 800f916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	011b      	lsls	r3, r3, #4
 800f91e:	697a      	ldr	r2, [r7, #20]
 800f920:	4313      	orrs	r3, r2
 800f922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	4a22      	ldr	r2, [pc, #136]	; (800f9b0 <TIM_OC2_SetConfig+0xe4>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d003      	beq.n	800f934 <TIM_OC2_SetConfig+0x68>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	4a21      	ldr	r2, [pc, #132]	; (800f9b4 <TIM_OC2_SetConfig+0xe8>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d10d      	bne.n	800f950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f93a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f93c:	683b      	ldr	r3, [r7, #0]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	011b      	lsls	r3, r3, #4
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	4313      	orrs	r3, r2
 800f946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f94e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a17      	ldr	r2, [pc, #92]	; (800f9b0 <TIM_OC2_SetConfig+0xe4>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d003      	beq.n	800f960 <TIM_OC2_SetConfig+0x94>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a16      	ldr	r2, [pc, #88]	; (800f9b4 <TIM_OC2_SetConfig+0xe8>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d113      	bne.n	800f988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f96e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	4313      	orrs	r3, r2
 800f97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	693a      	ldr	r2, [r7, #16]
 800f984:	4313      	orrs	r3, r2
 800f986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f994:	683b      	ldr	r3, [r7, #0]
 800f996:	685a      	ldr	r2, [r3, #4]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	697a      	ldr	r2, [r7, #20]
 800f9a0:	621a      	str	r2, [r3, #32]
}
 800f9a2:	bf00      	nop
 800f9a4:	371c      	adds	r7, #28
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr
 800f9ae:	bf00      	nop
 800f9b0:	40010000 	.word	0x40010000
 800f9b4:	40010400 	.word	0x40010400

0800f9b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b087      	sub	sp, #28
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a1b      	ldr	r3, [r3, #32]
 800f9c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	69db      	ldr	r3, [r3, #28]
 800f9de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f023 0303 	bic.w	r3, r3, #3
 800f9ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	689b      	ldr	r3, [r3, #8]
 800fa06:	021b      	lsls	r3, r3, #8
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	4313      	orrs	r3, r2
 800fa0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a21      	ldr	r2, [pc, #132]	; (800fa98 <TIM_OC3_SetConfig+0xe0>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d003      	beq.n	800fa1e <TIM_OC3_SetConfig+0x66>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a20      	ldr	r2, [pc, #128]	; (800fa9c <TIM_OC3_SetConfig+0xe4>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d10d      	bne.n	800fa3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	68db      	ldr	r3, [r3, #12]
 800fa2a:	021b      	lsls	r3, r3, #8
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	4313      	orrs	r3, r2
 800fa30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	4a16      	ldr	r2, [pc, #88]	; (800fa98 <TIM_OC3_SetConfig+0xe0>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d003      	beq.n	800fa4a <TIM_OC3_SetConfig+0x92>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a15      	ldr	r2, [pc, #84]	; (800fa9c <TIM_OC3_SetConfig+0xe4>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d113      	bne.n	800fa72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	695b      	ldr	r3, [r3, #20]
 800fa5e:	011b      	lsls	r3, r3, #4
 800fa60:	693a      	ldr	r2, [r7, #16]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	693a      	ldr	r2, [r7, #16]
 800fa76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	621a      	str	r2, [r3, #32]
}
 800fa8c:	bf00      	nop
 800fa8e:	371c      	adds	r7, #28
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr
 800fa98:	40010000 	.word	0x40010000
 800fa9c:	40010400 	.word	0x40010400

0800faa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a1b      	ldr	r3, [r3, #32]
 800faae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a1b      	ldr	r3, [r3, #32]
 800faba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	69db      	ldr	r3, [r3, #28]
 800fac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800face:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	021b      	lsls	r3, r3, #8
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	4313      	orrs	r3, r2
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fae4:	693b      	ldr	r3, [r7, #16]
 800fae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800faea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	689b      	ldr	r3, [r3, #8]
 800faf0:	031b      	lsls	r3, r3, #12
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	4313      	orrs	r3, r2
 800faf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a12      	ldr	r2, [pc, #72]	; (800fb44 <TIM_OC4_SetConfig+0xa4>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d003      	beq.n	800fb08 <TIM_OC4_SetConfig+0x68>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a11      	ldr	r2, [pc, #68]	; (800fb48 <TIM_OC4_SetConfig+0xa8>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d109      	bne.n	800fb1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	695b      	ldr	r3, [r3, #20]
 800fb14:	019b      	lsls	r3, r3, #6
 800fb16:	697a      	ldr	r2, [r7, #20]
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68fa      	ldr	r2, [r7, #12]
 800fb26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	685a      	ldr	r2, [r3, #4]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	693a      	ldr	r2, [r7, #16]
 800fb34:	621a      	str	r2, [r3, #32]
}
 800fb36:	bf00      	nop
 800fb38:	371c      	adds	r7, #28
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	40010000 	.word	0x40010000
 800fb48:	40010400 	.word	0x40010400

0800fb4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b087      	sub	sp, #28
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	f003 031f 	and.w	r3, r3, #31
 800fb5e:	2201      	movs	r2, #1
 800fb60:	fa02 f303 	lsl.w	r3, r2, r3
 800fb64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	6a1a      	ldr	r2, [r3, #32]
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	43db      	mvns	r3, r3
 800fb6e:	401a      	ands	r2, r3
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	6a1a      	ldr	r2, [r3, #32]
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	f003 031f 	and.w	r3, r3, #31
 800fb7e:	6879      	ldr	r1, [r7, #4]
 800fb80:	fa01 f303 	lsl.w	r3, r1, r3
 800fb84:	431a      	orrs	r2, r3
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	621a      	str	r2, [r3, #32]
}
 800fb8a:	bf00      	nop
 800fb8c:	371c      	adds	r7, #28
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
	...

0800fb98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d101      	bne.n	800fbb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbac:	2302      	movs	r3, #2
 800fbae:	e05a      	b.n	800fc66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2202      	movs	r2, #2
 800fbbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a21      	ldr	r2, [pc, #132]	; (800fc74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d022      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbfc:	d01d      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	4a1d      	ldr	r2, [pc, #116]	; (800fc78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d018      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	4a1b      	ldr	r2, [pc, #108]	; (800fc7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fc0e:	4293      	cmp	r3, r2
 800fc10:	d013      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a1a      	ldr	r2, [pc, #104]	; (800fc80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d00e      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a18      	ldr	r2, [pc, #96]	; (800fc84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d009      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a17      	ldr	r2, [pc, #92]	; (800fc88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d004      	beq.n	800fc3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a15      	ldr	r2, [pc, #84]	; (800fc8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d10c      	bne.n	800fc54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	68ba      	ldr	r2, [r7, #8]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68ba      	ldr	r2, [r7, #8]
 800fc52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2201      	movs	r2, #1
 800fc58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc64:	2300      	movs	r3, #0
}
 800fc66:	4618      	mov	r0, r3
 800fc68:	3714      	adds	r7, #20
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	40010000 	.word	0x40010000
 800fc78:	40000400 	.word	0x40000400
 800fc7c:	40000800 	.word	0x40000800
 800fc80:	40000c00 	.word	0x40000c00
 800fc84:	40010400 	.word	0x40010400
 800fc88:	40014000 	.word	0x40014000
 800fc8c:	40001800 	.word	0x40001800

0800fc90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b085      	sub	sp, #20
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d101      	bne.n	800fcac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fca8:	2302      	movs	r3, #2
 800fcaa:	e03d      	b.n	800fd28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2201      	movs	r2, #1
 800fcb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	4313      	orrs	r3, r2
 800fcc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	685b      	ldr	r3, [r3, #4]
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	695b      	ldr	r3, [r3, #20]
 800fd04:	4313      	orrs	r3, r2
 800fd06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	69db      	ldr	r3, [r3, #28]
 800fd12:	4313      	orrs	r3, r2
 800fd14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	68fa      	ldr	r2, [r7, #12]
 800fd1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd26:	2300      	movs	r3, #0
}
 800fd28:	4618      	mov	r0, r3
 800fd2a:	3714      	adds	r7, #20
 800fd2c:	46bd      	mov	sp, r7
 800fd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd32:	4770      	bx	lr

0800fd34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd3c:	bf00      	nop
 800fd3e:	370c      	adds	r7, #12
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr

0800fd48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd48:	b480      	push	{r7}
 800fd4a:	b083      	sub	sp, #12
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd50:	bf00      	nop
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr

0800fd5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d101      	bne.n	800fd6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	e03f      	b.n	800fdee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d106      	bne.n	800fd88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	f7f7 fcc4 	bl	8007710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2224      	movs	r2, #36	; 0x24
 800fd8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68da      	ldr	r2, [r3, #12]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fd9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f829 	bl	800fdf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	691a      	ldr	r2, [r3, #16]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fdb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	695a      	ldr	r2, [r3, #20]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fdc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	68da      	ldr	r2, [r3, #12]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fdd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2220      	movs	r2, #32
 800fde0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2220      	movs	r2, #32
 800fde8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3708      	adds	r7, #8
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
	...

0800fdf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdfc:	b085      	sub	sp, #20
 800fdfe:	af00      	add	r7, sp, #0
 800fe00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	691b      	ldr	r3, [r3, #16]
 800fe08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	68da      	ldr	r2, [r3, #12]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	430a      	orrs	r2, r1
 800fe16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	689a      	ldr	r2, [r3, #8]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	431a      	orrs	r2, r3
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	695b      	ldr	r3, [r3, #20]
 800fe26:	431a      	orrs	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	69db      	ldr	r3, [r3, #28]
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fe3a:	f023 030c 	bic.w	r3, r3, #12
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	6812      	ldr	r2, [r2, #0]
 800fe42:	68f9      	ldr	r1, [r7, #12]
 800fe44:	430b      	orrs	r3, r1
 800fe46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	699a      	ldr	r2, [r3, #24]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	430a      	orrs	r2, r1
 800fe5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	69db      	ldr	r3, [r3, #28]
 800fe62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe66:	f040 818b 	bne.w	8010180 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4ac1      	ldr	r2, [pc, #772]	; (8010174 <UART_SetConfig+0x37c>)
 800fe70:	4293      	cmp	r3, r2
 800fe72:	d005      	beq.n	800fe80 <UART_SetConfig+0x88>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4abf      	ldr	r2, [pc, #764]	; (8010178 <UART_SetConfig+0x380>)
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	f040 80bd 	bne.w	800fffa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fe80:	f7fc fbcc 	bl	800c61c <HAL_RCC_GetPCLK2Freq>
 800fe84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	461d      	mov	r5, r3
 800fe8a:	f04f 0600 	mov.w	r6, #0
 800fe8e:	46a8      	mov	r8, r5
 800fe90:	46b1      	mov	r9, r6
 800fe92:	eb18 0308 	adds.w	r3, r8, r8
 800fe96:	eb49 0409 	adc.w	r4, r9, r9
 800fe9a:	4698      	mov	r8, r3
 800fe9c:	46a1      	mov	r9, r4
 800fe9e:	eb18 0805 	adds.w	r8, r8, r5
 800fea2:	eb49 0906 	adc.w	r9, r9, r6
 800fea6:	f04f 0100 	mov.w	r1, #0
 800feaa:	f04f 0200 	mov.w	r2, #0
 800feae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800feb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800feb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800feba:	4688      	mov	r8, r1
 800febc:	4691      	mov	r9, r2
 800febe:	eb18 0005 	adds.w	r0, r8, r5
 800fec2:	eb49 0106 	adc.w	r1, r9, r6
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	461d      	mov	r5, r3
 800fecc:	f04f 0600 	mov.w	r6, #0
 800fed0:	196b      	adds	r3, r5, r5
 800fed2:	eb46 0406 	adc.w	r4, r6, r6
 800fed6:	461a      	mov	r2, r3
 800fed8:	4623      	mov	r3, r4
 800feda:	f7f0 feed 	bl	8000cb8 <__aeabi_uldivmod>
 800fede:	4603      	mov	r3, r0
 800fee0:	460c      	mov	r4, r1
 800fee2:	461a      	mov	r2, r3
 800fee4:	4ba5      	ldr	r3, [pc, #660]	; (801017c <UART_SetConfig+0x384>)
 800fee6:	fba3 2302 	umull	r2, r3, r3, r2
 800feea:	095b      	lsrs	r3, r3, #5
 800feec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	461d      	mov	r5, r3
 800fef4:	f04f 0600 	mov.w	r6, #0
 800fef8:	46a9      	mov	r9, r5
 800fefa:	46b2      	mov	sl, r6
 800fefc:	eb19 0309 	adds.w	r3, r9, r9
 800ff00:	eb4a 040a 	adc.w	r4, sl, sl
 800ff04:	4699      	mov	r9, r3
 800ff06:	46a2      	mov	sl, r4
 800ff08:	eb19 0905 	adds.w	r9, r9, r5
 800ff0c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff10:	f04f 0100 	mov.w	r1, #0
 800ff14:	f04f 0200 	mov.w	r2, #0
 800ff18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff24:	4689      	mov	r9, r1
 800ff26:	4692      	mov	sl, r2
 800ff28:	eb19 0005 	adds.w	r0, r9, r5
 800ff2c:	eb4a 0106 	adc.w	r1, sl, r6
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	461d      	mov	r5, r3
 800ff36:	f04f 0600 	mov.w	r6, #0
 800ff3a:	196b      	adds	r3, r5, r5
 800ff3c:	eb46 0406 	adc.w	r4, r6, r6
 800ff40:	461a      	mov	r2, r3
 800ff42:	4623      	mov	r3, r4
 800ff44:	f7f0 feb8 	bl	8000cb8 <__aeabi_uldivmod>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	460c      	mov	r4, r1
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	4b8b      	ldr	r3, [pc, #556]	; (801017c <UART_SetConfig+0x384>)
 800ff50:	fba3 1302 	umull	r1, r3, r3, r2
 800ff54:	095b      	lsrs	r3, r3, #5
 800ff56:	2164      	movs	r1, #100	; 0x64
 800ff58:	fb01 f303 	mul.w	r3, r1, r3
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	00db      	lsls	r3, r3, #3
 800ff60:	3332      	adds	r3, #50	; 0x32
 800ff62:	4a86      	ldr	r2, [pc, #536]	; (801017c <UART_SetConfig+0x384>)
 800ff64:	fba2 2303 	umull	r2, r3, r2, r3
 800ff68:	095b      	lsrs	r3, r3, #5
 800ff6a:	005b      	lsls	r3, r3, #1
 800ff6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ff70:	4498      	add	r8, r3
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	461d      	mov	r5, r3
 800ff76:	f04f 0600 	mov.w	r6, #0
 800ff7a:	46a9      	mov	r9, r5
 800ff7c:	46b2      	mov	sl, r6
 800ff7e:	eb19 0309 	adds.w	r3, r9, r9
 800ff82:	eb4a 040a 	adc.w	r4, sl, sl
 800ff86:	4699      	mov	r9, r3
 800ff88:	46a2      	mov	sl, r4
 800ff8a:	eb19 0905 	adds.w	r9, r9, r5
 800ff8e:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff92:	f04f 0100 	mov.w	r1, #0
 800ff96:	f04f 0200 	mov.w	r2, #0
 800ff9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffa2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffa6:	4689      	mov	r9, r1
 800ffa8:	4692      	mov	sl, r2
 800ffaa:	eb19 0005 	adds.w	r0, r9, r5
 800ffae:	eb4a 0106 	adc.w	r1, sl, r6
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	461d      	mov	r5, r3
 800ffb8:	f04f 0600 	mov.w	r6, #0
 800ffbc:	196b      	adds	r3, r5, r5
 800ffbe:	eb46 0406 	adc.w	r4, r6, r6
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4623      	mov	r3, r4
 800ffc6:	f7f0 fe77 	bl	8000cb8 <__aeabi_uldivmod>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	460c      	mov	r4, r1
 800ffce:	461a      	mov	r2, r3
 800ffd0:	4b6a      	ldr	r3, [pc, #424]	; (801017c <UART_SetConfig+0x384>)
 800ffd2:	fba3 1302 	umull	r1, r3, r3, r2
 800ffd6:	095b      	lsrs	r3, r3, #5
 800ffd8:	2164      	movs	r1, #100	; 0x64
 800ffda:	fb01 f303 	mul.w	r3, r1, r3
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	00db      	lsls	r3, r3, #3
 800ffe2:	3332      	adds	r3, #50	; 0x32
 800ffe4:	4a65      	ldr	r2, [pc, #404]	; (801017c <UART_SetConfig+0x384>)
 800ffe6:	fba2 2303 	umull	r2, r3, r2, r3
 800ffea:	095b      	lsrs	r3, r3, #5
 800ffec:	f003 0207 	and.w	r2, r3, #7
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4442      	add	r2, r8
 800fff6:	609a      	str	r2, [r3, #8]
 800fff8:	e26f      	b.n	80104da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fffa:	f7fc fafb 	bl	800c5f4 <HAL_RCC_GetPCLK1Freq>
 800fffe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	461d      	mov	r5, r3
 8010004:	f04f 0600 	mov.w	r6, #0
 8010008:	46a8      	mov	r8, r5
 801000a:	46b1      	mov	r9, r6
 801000c:	eb18 0308 	adds.w	r3, r8, r8
 8010010:	eb49 0409 	adc.w	r4, r9, r9
 8010014:	4698      	mov	r8, r3
 8010016:	46a1      	mov	r9, r4
 8010018:	eb18 0805 	adds.w	r8, r8, r5
 801001c:	eb49 0906 	adc.w	r9, r9, r6
 8010020:	f04f 0100 	mov.w	r1, #0
 8010024:	f04f 0200 	mov.w	r2, #0
 8010028:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801002c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010030:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010034:	4688      	mov	r8, r1
 8010036:	4691      	mov	r9, r2
 8010038:	eb18 0005 	adds.w	r0, r8, r5
 801003c:	eb49 0106 	adc.w	r1, r9, r6
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	461d      	mov	r5, r3
 8010046:	f04f 0600 	mov.w	r6, #0
 801004a:	196b      	adds	r3, r5, r5
 801004c:	eb46 0406 	adc.w	r4, r6, r6
 8010050:	461a      	mov	r2, r3
 8010052:	4623      	mov	r3, r4
 8010054:	f7f0 fe30 	bl	8000cb8 <__aeabi_uldivmod>
 8010058:	4603      	mov	r3, r0
 801005a:	460c      	mov	r4, r1
 801005c:	461a      	mov	r2, r3
 801005e:	4b47      	ldr	r3, [pc, #284]	; (801017c <UART_SetConfig+0x384>)
 8010060:	fba3 2302 	umull	r2, r3, r3, r2
 8010064:	095b      	lsrs	r3, r3, #5
 8010066:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	461d      	mov	r5, r3
 801006e:	f04f 0600 	mov.w	r6, #0
 8010072:	46a9      	mov	r9, r5
 8010074:	46b2      	mov	sl, r6
 8010076:	eb19 0309 	adds.w	r3, r9, r9
 801007a:	eb4a 040a 	adc.w	r4, sl, sl
 801007e:	4699      	mov	r9, r3
 8010080:	46a2      	mov	sl, r4
 8010082:	eb19 0905 	adds.w	r9, r9, r5
 8010086:	eb4a 0a06 	adc.w	sl, sl, r6
 801008a:	f04f 0100 	mov.w	r1, #0
 801008e:	f04f 0200 	mov.w	r2, #0
 8010092:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010096:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801009a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801009e:	4689      	mov	r9, r1
 80100a0:	4692      	mov	sl, r2
 80100a2:	eb19 0005 	adds.w	r0, r9, r5
 80100a6:	eb4a 0106 	adc.w	r1, sl, r6
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	685b      	ldr	r3, [r3, #4]
 80100ae:	461d      	mov	r5, r3
 80100b0:	f04f 0600 	mov.w	r6, #0
 80100b4:	196b      	adds	r3, r5, r5
 80100b6:	eb46 0406 	adc.w	r4, r6, r6
 80100ba:	461a      	mov	r2, r3
 80100bc:	4623      	mov	r3, r4
 80100be:	f7f0 fdfb 	bl	8000cb8 <__aeabi_uldivmod>
 80100c2:	4603      	mov	r3, r0
 80100c4:	460c      	mov	r4, r1
 80100c6:	461a      	mov	r2, r3
 80100c8:	4b2c      	ldr	r3, [pc, #176]	; (801017c <UART_SetConfig+0x384>)
 80100ca:	fba3 1302 	umull	r1, r3, r3, r2
 80100ce:	095b      	lsrs	r3, r3, #5
 80100d0:	2164      	movs	r1, #100	; 0x64
 80100d2:	fb01 f303 	mul.w	r3, r1, r3
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	00db      	lsls	r3, r3, #3
 80100da:	3332      	adds	r3, #50	; 0x32
 80100dc:	4a27      	ldr	r2, [pc, #156]	; (801017c <UART_SetConfig+0x384>)
 80100de:	fba2 2303 	umull	r2, r3, r2, r3
 80100e2:	095b      	lsrs	r3, r3, #5
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80100ea:	4498      	add	r8, r3
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	461d      	mov	r5, r3
 80100f0:	f04f 0600 	mov.w	r6, #0
 80100f4:	46a9      	mov	r9, r5
 80100f6:	46b2      	mov	sl, r6
 80100f8:	eb19 0309 	adds.w	r3, r9, r9
 80100fc:	eb4a 040a 	adc.w	r4, sl, sl
 8010100:	4699      	mov	r9, r3
 8010102:	46a2      	mov	sl, r4
 8010104:	eb19 0905 	adds.w	r9, r9, r5
 8010108:	eb4a 0a06 	adc.w	sl, sl, r6
 801010c:	f04f 0100 	mov.w	r1, #0
 8010110:	f04f 0200 	mov.w	r2, #0
 8010114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010118:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801011c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010120:	4689      	mov	r9, r1
 8010122:	4692      	mov	sl, r2
 8010124:	eb19 0005 	adds.w	r0, r9, r5
 8010128:	eb4a 0106 	adc.w	r1, sl, r6
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	461d      	mov	r5, r3
 8010132:	f04f 0600 	mov.w	r6, #0
 8010136:	196b      	adds	r3, r5, r5
 8010138:	eb46 0406 	adc.w	r4, r6, r6
 801013c:	461a      	mov	r2, r3
 801013e:	4623      	mov	r3, r4
 8010140:	f7f0 fdba 	bl	8000cb8 <__aeabi_uldivmod>
 8010144:	4603      	mov	r3, r0
 8010146:	460c      	mov	r4, r1
 8010148:	461a      	mov	r2, r3
 801014a:	4b0c      	ldr	r3, [pc, #48]	; (801017c <UART_SetConfig+0x384>)
 801014c:	fba3 1302 	umull	r1, r3, r3, r2
 8010150:	095b      	lsrs	r3, r3, #5
 8010152:	2164      	movs	r1, #100	; 0x64
 8010154:	fb01 f303 	mul.w	r3, r1, r3
 8010158:	1ad3      	subs	r3, r2, r3
 801015a:	00db      	lsls	r3, r3, #3
 801015c:	3332      	adds	r3, #50	; 0x32
 801015e:	4a07      	ldr	r2, [pc, #28]	; (801017c <UART_SetConfig+0x384>)
 8010160:	fba2 2303 	umull	r2, r3, r2, r3
 8010164:	095b      	lsrs	r3, r3, #5
 8010166:	f003 0207 	and.w	r2, r3, #7
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4442      	add	r2, r8
 8010170:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010172:	e1b2      	b.n	80104da <UART_SetConfig+0x6e2>
 8010174:	40011000 	.word	0x40011000
 8010178:	40011400 	.word	0x40011400
 801017c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4ad7      	ldr	r2, [pc, #860]	; (80104e4 <UART_SetConfig+0x6ec>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d005      	beq.n	8010196 <UART_SetConfig+0x39e>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	4ad6      	ldr	r2, [pc, #856]	; (80104e8 <UART_SetConfig+0x6f0>)
 8010190:	4293      	cmp	r3, r2
 8010192:	f040 80d1 	bne.w	8010338 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010196:	f7fc fa41 	bl	800c61c <HAL_RCC_GetPCLK2Freq>
 801019a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	469a      	mov	sl, r3
 80101a0:	f04f 0b00 	mov.w	fp, #0
 80101a4:	46d0      	mov	r8, sl
 80101a6:	46d9      	mov	r9, fp
 80101a8:	eb18 0308 	adds.w	r3, r8, r8
 80101ac:	eb49 0409 	adc.w	r4, r9, r9
 80101b0:	4698      	mov	r8, r3
 80101b2:	46a1      	mov	r9, r4
 80101b4:	eb18 080a 	adds.w	r8, r8, sl
 80101b8:	eb49 090b 	adc.w	r9, r9, fp
 80101bc:	f04f 0100 	mov.w	r1, #0
 80101c0:	f04f 0200 	mov.w	r2, #0
 80101c4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101c8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80101cc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101d0:	4688      	mov	r8, r1
 80101d2:	4691      	mov	r9, r2
 80101d4:	eb1a 0508 	adds.w	r5, sl, r8
 80101d8:	eb4b 0609 	adc.w	r6, fp, r9
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	685b      	ldr	r3, [r3, #4]
 80101e0:	4619      	mov	r1, r3
 80101e2:	f04f 0200 	mov.w	r2, #0
 80101e6:	f04f 0300 	mov.w	r3, #0
 80101ea:	f04f 0400 	mov.w	r4, #0
 80101ee:	0094      	lsls	r4, r2, #2
 80101f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101f4:	008b      	lsls	r3, r1, #2
 80101f6:	461a      	mov	r2, r3
 80101f8:	4623      	mov	r3, r4
 80101fa:	4628      	mov	r0, r5
 80101fc:	4631      	mov	r1, r6
 80101fe:	f7f0 fd5b 	bl	8000cb8 <__aeabi_uldivmod>
 8010202:	4603      	mov	r3, r0
 8010204:	460c      	mov	r4, r1
 8010206:	461a      	mov	r2, r3
 8010208:	4bb8      	ldr	r3, [pc, #736]	; (80104ec <UART_SetConfig+0x6f4>)
 801020a:	fba3 2302 	umull	r2, r3, r3, r2
 801020e:	095b      	lsrs	r3, r3, #5
 8010210:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	469b      	mov	fp, r3
 8010218:	f04f 0c00 	mov.w	ip, #0
 801021c:	46d9      	mov	r9, fp
 801021e:	46e2      	mov	sl, ip
 8010220:	eb19 0309 	adds.w	r3, r9, r9
 8010224:	eb4a 040a 	adc.w	r4, sl, sl
 8010228:	4699      	mov	r9, r3
 801022a:	46a2      	mov	sl, r4
 801022c:	eb19 090b 	adds.w	r9, r9, fp
 8010230:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010234:	f04f 0100 	mov.w	r1, #0
 8010238:	f04f 0200 	mov.w	r2, #0
 801023c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010240:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010244:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010248:	4689      	mov	r9, r1
 801024a:	4692      	mov	sl, r2
 801024c:	eb1b 0509 	adds.w	r5, fp, r9
 8010250:	eb4c 060a 	adc.w	r6, ip, sl
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	4619      	mov	r1, r3
 801025a:	f04f 0200 	mov.w	r2, #0
 801025e:	f04f 0300 	mov.w	r3, #0
 8010262:	f04f 0400 	mov.w	r4, #0
 8010266:	0094      	lsls	r4, r2, #2
 8010268:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801026c:	008b      	lsls	r3, r1, #2
 801026e:	461a      	mov	r2, r3
 8010270:	4623      	mov	r3, r4
 8010272:	4628      	mov	r0, r5
 8010274:	4631      	mov	r1, r6
 8010276:	f7f0 fd1f 	bl	8000cb8 <__aeabi_uldivmod>
 801027a:	4603      	mov	r3, r0
 801027c:	460c      	mov	r4, r1
 801027e:	461a      	mov	r2, r3
 8010280:	4b9a      	ldr	r3, [pc, #616]	; (80104ec <UART_SetConfig+0x6f4>)
 8010282:	fba3 1302 	umull	r1, r3, r3, r2
 8010286:	095b      	lsrs	r3, r3, #5
 8010288:	2164      	movs	r1, #100	; 0x64
 801028a:	fb01 f303 	mul.w	r3, r1, r3
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	011b      	lsls	r3, r3, #4
 8010292:	3332      	adds	r3, #50	; 0x32
 8010294:	4a95      	ldr	r2, [pc, #596]	; (80104ec <UART_SetConfig+0x6f4>)
 8010296:	fba2 2303 	umull	r2, r3, r2, r3
 801029a:	095b      	lsrs	r3, r3, #5
 801029c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102a0:	4498      	add	r8, r3
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	469b      	mov	fp, r3
 80102a6:	f04f 0c00 	mov.w	ip, #0
 80102aa:	46d9      	mov	r9, fp
 80102ac:	46e2      	mov	sl, ip
 80102ae:	eb19 0309 	adds.w	r3, r9, r9
 80102b2:	eb4a 040a 	adc.w	r4, sl, sl
 80102b6:	4699      	mov	r9, r3
 80102b8:	46a2      	mov	sl, r4
 80102ba:	eb19 090b 	adds.w	r9, r9, fp
 80102be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102c2:	f04f 0100 	mov.w	r1, #0
 80102c6:	f04f 0200 	mov.w	r2, #0
 80102ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102d6:	4689      	mov	r9, r1
 80102d8:	4692      	mov	sl, r2
 80102da:	eb1b 0509 	adds.w	r5, fp, r9
 80102de:	eb4c 060a 	adc.w	r6, ip, sl
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	685b      	ldr	r3, [r3, #4]
 80102e6:	4619      	mov	r1, r3
 80102e8:	f04f 0200 	mov.w	r2, #0
 80102ec:	f04f 0300 	mov.w	r3, #0
 80102f0:	f04f 0400 	mov.w	r4, #0
 80102f4:	0094      	lsls	r4, r2, #2
 80102f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102fa:	008b      	lsls	r3, r1, #2
 80102fc:	461a      	mov	r2, r3
 80102fe:	4623      	mov	r3, r4
 8010300:	4628      	mov	r0, r5
 8010302:	4631      	mov	r1, r6
 8010304:	f7f0 fcd8 	bl	8000cb8 <__aeabi_uldivmod>
 8010308:	4603      	mov	r3, r0
 801030a:	460c      	mov	r4, r1
 801030c:	461a      	mov	r2, r3
 801030e:	4b77      	ldr	r3, [pc, #476]	; (80104ec <UART_SetConfig+0x6f4>)
 8010310:	fba3 1302 	umull	r1, r3, r3, r2
 8010314:	095b      	lsrs	r3, r3, #5
 8010316:	2164      	movs	r1, #100	; 0x64
 8010318:	fb01 f303 	mul.w	r3, r1, r3
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	011b      	lsls	r3, r3, #4
 8010320:	3332      	adds	r3, #50	; 0x32
 8010322:	4a72      	ldr	r2, [pc, #456]	; (80104ec <UART_SetConfig+0x6f4>)
 8010324:	fba2 2303 	umull	r2, r3, r2, r3
 8010328:	095b      	lsrs	r3, r3, #5
 801032a:	f003 020f 	and.w	r2, r3, #15
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4442      	add	r2, r8
 8010334:	609a      	str	r2, [r3, #8]
 8010336:	e0d0      	b.n	80104da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010338:	f7fc f95c 	bl	800c5f4 <HAL_RCC_GetPCLK1Freq>
 801033c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	469a      	mov	sl, r3
 8010342:	f04f 0b00 	mov.w	fp, #0
 8010346:	46d0      	mov	r8, sl
 8010348:	46d9      	mov	r9, fp
 801034a:	eb18 0308 	adds.w	r3, r8, r8
 801034e:	eb49 0409 	adc.w	r4, r9, r9
 8010352:	4698      	mov	r8, r3
 8010354:	46a1      	mov	r9, r4
 8010356:	eb18 080a 	adds.w	r8, r8, sl
 801035a:	eb49 090b 	adc.w	r9, r9, fp
 801035e:	f04f 0100 	mov.w	r1, #0
 8010362:	f04f 0200 	mov.w	r2, #0
 8010366:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801036a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801036e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010372:	4688      	mov	r8, r1
 8010374:	4691      	mov	r9, r2
 8010376:	eb1a 0508 	adds.w	r5, sl, r8
 801037a:	eb4b 0609 	adc.w	r6, fp, r9
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	685b      	ldr	r3, [r3, #4]
 8010382:	4619      	mov	r1, r3
 8010384:	f04f 0200 	mov.w	r2, #0
 8010388:	f04f 0300 	mov.w	r3, #0
 801038c:	f04f 0400 	mov.w	r4, #0
 8010390:	0094      	lsls	r4, r2, #2
 8010392:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010396:	008b      	lsls	r3, r1, #2
 8010398:	461a      	mov	r2, r3
 801039a:	4623      	mov	r3, r4
 801039c:	4628      	mov	r0, r5
 801039e:	4631      	mov	r1, r6
 80103a0:	f7f0 fc8a 	bl	8000cb8 <__aeabi_uldivmod>
 80103a4:	4603      	mov	r3, r0
 80103a6:	460c      	mov	r4, r1
 80103a8:	461a      	mov	r2, r3
 80103aa:	4b50      	ldr	r3, [pc, #320]	; (80104ec <UART_SetConfig+0x6f4>)
 80103ac:	fba3 2302 	umull	r2, r3, r3, r2
 80103b0:	095b      	lsrs	r3, r3, #5
 80103b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	469b      	mov	fp, r3
 80103ba:	f04f 0c00 	mov.w	ip, #0
 80103be:	46d9      	mov	r9, fp
 80103c0:	46e2      	mov	sl, ip
 80103c2:	eb19 0309 	adds.w	r3, r9, r9
 80103c6:	eb4a 040a 	adc.w	r4, sl, sl
 80103ca:	4699      	mov	r9, r3
 80103cc:	46a2      	mov	sl, r4
 80103ce:	eb19 090b 	adds.w	r9, r9, fp
 80103d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103d6:	f04f 0100 	mov.w	r1, #0
 80103da:	f04f 0200 	mov.w	r2, #0
 80103de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103ea:	4689      	mov	r9, r1
 80103ec:	4692      	mov	sl, r2
 80103ee:	eb1b 0509 	adds.w	r5, fp, r9
 80103f2:	eb4c 060a 	adc.w	r6, ip, sl
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	685b      	ldr	r3, [r3, #4]
 80103fa:	4619      	mov	r1, r3
 80103fc:	f04f 0200 	mov.w	r2, #0
 8010400:	f04f 0300 	mov.w	r3, #0
 8010404:	f04f 0400 	mov.w	r4, #0
 8010408:	0094      	lsls	r4, r2, #2
 801040a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801040e:	008b      	lsls	r3, r1, #2
 8010410:	461a      	mov	r2, r3
 8010412:	4623      	mov	r3, r4
 8010414:	4628      	mov	r0, r5
 8010416:	4631      	mov	r1, r6
 8010418:	f7f0 fc4e 	bl	8000cb8 <__aeabi_uldivmod>
 801041c:	4603      	mov	r3, r0
 801041e:	460c      	mov	r4, r1
 8010420:	461a      	mov	r2, r3
 8010422:	4b32      	ldr	r3, [pc, #200]	; (80104ec <UART_SetConfig+0x6f4>)
 8010424:	fba3 1302 	umull	r1, r3, r3, r2
 8010428:	095b      	lsrs	r3, r3, #5
 801042a:	2164      	movs	r1, #100	; 0x64
 801042c:	fb01 f303 	mul.w	r3, r1, r3
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	011b      	lsls	r3, r3, #4
 8010434:	3332      	adds	r3, #50	; 0x32
 8010436:	4a2d      	ldr	r2, [pc, #180]	; (80104ec <UART_SetConfig+0x6f4>)
 8010438:	fba2 2303 	umull	r2, r3, r2, r3
 801043c:	095b      	lsrs	r3, r3, #5
 801043e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010442:	4498      	add	r8, r3
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	469b      	mov	fp, r3
 8010448:	f04f 0c00 	mov.w	ip, #0
 801044c:	46d9      	mov	r9, fp
 801044e:	46e2      	mov	sl, ip
 8010450:	eb19 0309 	adds.w	r3, r9, r9
 8010454:	eb4a 040a 	adc.w	r4, sl, sl
 8010458:	4699      	mov	r9, r3
 801045a:	46a2      	mov	sl, r4
 801045c:	eb19 090b 	adds.w	r9, r9, fp
 8010460:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010464:	f04f 0100 	mov.w	r1, #0
 8010468:	f04f 0200 	mov.w	r2, #0
 801046c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010470:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010474:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010478:	4689      	mov	r9, r1
 801047a:	4692      	mov	sl, r2
 801047c:	eb1b 0509 	adds.w	r5, fp, r9
 8010480:	eb4c 060a 	adc.w	r6, ip, sl
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	4619      	mov	r1, r3
 801048a:	f04f 0200 	mov.w	r2, #0
 801048e:	f04f 0300 	mov.w	r3, #0
 8010492:	f04f 0400 	mov.w	r4, #0
 8010496:	0094      	lsls	r4, r2, #2
 8010498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801049c:	008b      	lsls	r3, r1, #2
 801049e:	461a      	mov	r2, r3
 80104a0:	4623      	mov	r3, r4
 80104a2:	4628      	mov	r0, r5
 80104a4:	4631      	mov	r1, r6
 80104a6:	f7f0 fc07 	bl	8000cb8 <__aeabi_uldivmod>
 80104aa:	4603      	mov	r3, r0
 80104ac:	460c      	mov	r4, r1
 80104ae:	461a      	mov	r2, r3
 80104b0:	4b0e      	ldr	r3, [pc, #56]	; (80104ec <UART_SetConfig+0x6f4>)
 80104b2:	fba3 1302 	umull	r1, r3, r3, r2
 80104b6:	095b      	lsrs	r3, r3, #5
 80104b8:	2164      	movs	r1, #100	; 0x64
 80104ba:	fb01 f303 	mul.w	r3, r1, r3
 80104be:	1ad3      	subs	r3, r2, r3
 80104c0:	011b      	lsls	r3, r3, #4
 80104c2:	3332      	adds	r3, #50	; 0x32
 80104c4:	4a09      	ldr	r2, [pc, #36]	; (80104ec <UART_SetConfig+0x6f4>)
 80104c6:	fba2 2303 	umull	r2, r3, r2, r3
 80104ca:	095b      	lsrs	r3, r3, #5
 80104cc:	f003 020f 	and.w	r2, r3, #15
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	4442      	add	r2, r8
 80104d6:	609a      	str	r2, [r3, #8]
}
 80104d8:	e7ff      	b.n	80104da <UART_SetConfig+0x6e2>
 80104da:	bf00      	nop
 80104dc:	3714      	adds	r7, #20
 80104de:	46bd      	mov	sp, r7
 80104e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e4:	40011000 	.word	0x40011000
 80104e8:	40011400 	.word	0x40011400
 80104ec:	51eb851f 	.word	0x51eb851f

080104f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80104f0:	b084      	sub	sp, #16
 80104f2:	b480      	push	{r7}
 80104f4:	b085      	sub	sp, #20
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	f107 001c 	add.w	r0, r7, #28
 80104fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010506:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010508:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801050a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801050c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801050e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010510:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010512:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010516:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801051a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801051c:	68fa      	ldr	r2, [r7, #12]
 801051e:	4313      	orrs	r3, r2
 8010520:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801052a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	431a      	orrs	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010536:	2300      	movs	r3, #0
}
 8010538:	4618      	mov	r0, r3
 801053a:	3714      	adds	r7, #20
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	b004      	add	sp, #16
 8010544:	4770      	bx	lr

08010546 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010546:	b480      	push	{r7}
 8010548:	b083      	sub	sp, #12
 801054a:	af00      	add	r7, sp, #0
 801054c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010554:	4618      	mov	r0, r3
 8010556:	370c      	adds	r7, #12
 8010558:	46bd      	mov	sp, r7
 801055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055e:	4770      	bx	lr

08010560 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010560:	b480      	push	{r7}
 8010562:	b083      	sub	sp, #12
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	681a      	ldr	r2, [r3, #0]
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	370c      	adds	r7, #12
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010582:	b580      	push	{r7, lr}
 8010584:	b082      	sub	sp, #8
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2203      	movs	r2, #3
 801058e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010590:	2002      	movs	r0, #2
 8010592:	f7f9 fbdd 	bl	8009d50 <HAL_Delay>
  
  return HAL_OK;
 8010596:	2300      	movs	r3, #0
}
 8010598:	4618      	mov	r0, r3
 801059a:	3708      	adds	r7, #8
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80105a0:	b480      	push	{r7}
 80105a2:	b083      	sub	sp, #12
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	f003 0303 	and.w	r3, r3, #3
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	370c      	adds	r7, #12
 80105b4:	46bd      	mov	sp, r7
 80105b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ba:	4770      	bx	lr

080105bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
 80105c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105c6:	2300      	movs	r3, #0
 80105c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80105e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80105e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105e8:	68fa      	ldr	r2, [r7, #12]
 80105ea:	4313      	orrs	r3, r2
 80105ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80105f6:	f023 030f 	bic.w	r3, r3, #15
 80105fa:	68fa      	ldr	r2, [r7, #12]
 80105fc:	431a      	orrs	r2, r3
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010602:	2300      	movs	r3, #0
}
 8010604:	4618      	mov	r0, r3
 8010606:	3714      	adds	r7, #20
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010610:	b480      	push	{r7}
 8010612:	b083      	sub	sp, #12
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	691b      	ldr	r3, [r3, #16]
 801061c:	b2db      	uxtb	r3, r3
}
 801061e:	4618      	mov	r0, r3
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr

0801062a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801062a:	b480      	push	{r7}
 801062c:	b085      	sub	sp, #20
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
 8010632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	3314      	adds	r3, #20
 8010638:	461a      	mov	r2, r3
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	4413      	add	r3, r2
 801063e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
}  
 8010644:	4618      	mov	r0, r3
 8010646:	3714      	adds	r7, #20
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801065a:	2300      	movs	r3, #0
 801065c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	681a      	ldr	r2, [r3, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	685a      	ldr	r2, [r3, #4]
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010676:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010678:	683b      	ldr	r3, [r7, #0]
 801067a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801067c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010682:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	4313      	orrs	r3, r2
 8010688:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801068e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	431a      	orrs	r2, r3
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801069a:	2300      	movs	r3, #0

}
 801069c:	4618      	mov	r0, r3
 801069e:	3714      	adds	r7, #20
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b088      	sub	sp, #32
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80106b6:	2310      	movs	r3, #16
 80106b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106ba:	2340      	movs	r3, #64	; 0x40
 80106bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106be:	2300      	movs	r3, #0
 80106c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106c8:	f107 0308 	add.w	r3, r7, #8
 80106cc:	4619      	mov	r1, r3
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f7ff ff74 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80106d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80106d8:	2110      	movs	r1, #16
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f000 fa40 	bl	8010b60 <SDMMC_GetCmdResp1>
 80106e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106e2:	69fb      	ldr	r3, [r7, #28]
}
 80106e4:	4618      	mov	r0, r3
 80106e6:	3720      	adds	r7, #32
 80106e8:	46bd      	mov	sp, r7
 80106ea:	bd80      	pop	{r7, pc}

080106ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b088      	sub	sp, #32
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
 80106f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80106fa:	2311      	movs	r3, #17
 80106fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106fe:	2340      	movs	r3, #64	; 0x40
 8010700:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010702:	2300      	movs	r3, #0
 8010704:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801070a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801070c:	f107 0308 	add.w	r3, r7, #8
 8010710:	4619      	mov	r1, r3
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f7ff ff52 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010718:	f241 3288 	movw	r2, #5000	; 0x1388
 801071c:	2111      	movs	r1, #17
 801071e:	6878      	ldr	r0, [r7, #4]
 8010720:	f000 fa1e 	bl	8010b60 <SDMMC_GetCmdResp1>
 8010724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010726:	69fb      	ldr	r3, [r7, #28]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3720      	adds	r7, #32
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801073a:	683b      	ldr	r3, [r7, #0]
 801073c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801073e:	2312      	movs	r3, #18
 8010740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010742:	2340      	movs	r3, #64	; 0x40
 8010744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010746:	2300      	movs	r3, #0
 8010748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801074a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801074e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010750:	f107 0308 	add.w	r3, r7, #8
 8010754:	4619      	mov	r1, r3
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f7ff ff30 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801075c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010760:	2112      	movs	r1, #18
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f000 f9fc 	bl	8010b60 <SDMMC_GetCmdResp1>
 8010768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801076a:	69fb      	ldr	r3, [r7, #28]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3720      	adds	r7, #32
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b088      	sub	sp, #32
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010782:	2318      	movs	r3, #24
 8010784:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010786:	2340      	movs	r3, #64	; 0x40
 8010788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801078a:	2300      	movs	r3, #0
 801078c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801078e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010792:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010794:	f107 0308 	add.w	r3, r7, #8
 8010798:	4619      	mov	r1, r3
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f7ff ff0e 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80107a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80107a4:	2118      	movs	r1, #24
 80107a6:	6878      	ldr	r0, [r7, #4]
 80107a8:	f000 f9da 	bl	8010b60 <SDMMC_GetCmdResp1>
 80107ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107ae:	69fb      	ldr	r3, [r7, #28]
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3720      	adds	r7, #32
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b088      	sub	sp, #32
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80107c6:	2319      	movs	r3, #25
 80107c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107ca:	2340      	movs	r3, #64	; 0x40
 80107cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107ce:	2300      	movs	r3, #0
 80107d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107d8:	f107 0308 	add.w	r3, r7, #8
 80107dc:	4619      	mov	r1, r3
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f7ff feec 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80107e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80107e8:	2119      	movs	r1, #25
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f000 f9b8 	bl	8010b60 <SDMMC_GetCmdResp1>
 80107f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107f2:	69fb      	ldr	r3, [r7, #28]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3720      	adds	r7, #32
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b088      	sub	sp, #32
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010804:	2300      	movs	r3, #0
 8010806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010808:	230c      	movs	r3, #12
 801080a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801080c:	2340      	movs	r3, #64	; 0x40
 801080e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010810:	2300      	movs	r3, #0
 8010812:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010814:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010818:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801081a:	f107 0308 	add.w	r3, r7, #8
 801081e:	4619      	mov	r1, r3
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f7ff fecb 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010826:	4a05      	ldr	r2, [pc, #20]	; (801083c <SDMMC_CmdStopTransfer+0x40>)
 8010828:	210c      	movs	r1, #12
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f000 f998 	bl	8010b60 <SDMMC_GetCmdResp1>
 8010830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010832:	69fb      	ldr	r3, [r7, #28]
}
 8010834:	4618      	mov	r0, r3
 8010836:	3720      	adds	r7, #32
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	05f5e100 	.word	0x05f5e100

08010840 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b08a      	sub	sp, #40	; 0x28
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010850:	2307      	movs	r3, #7
 8010852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010854:	2340      	movs	r3, #64	; 0x40
 8010856:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010858:	2300      	movs	r3, #0
 801085a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801085c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010860:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010862:	f107 0310 	add.w	r3, r7, #16
 8010866:	4619      	mov	r1, r3
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f7ff fea7 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801086e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010872:	2107      	movs	r1, #7
 8010874:	68f8      	ldr	r0, [r7, #12]
 8010876:	f000 f973 	bl	8010b60 <SDMMC_GetCmdResp1>
 801087a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801087e:	4618      	mov	r0, r3
 8010880:	3728      	adds	r7, #40	; 0x28
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b088      	sub	sp, #32
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801088e:	2300      	movs	r3, #0
 8010890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010892:	2300      	movs	r3, #0
 8010894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010896:	2300      	movs	r3, #0
 8010898:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801089a:	2300      	movs	r3, #0
 801089c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108a4:	f107 0308 	add.w	r3, r7, #8
 80108a8:	4619      	mov	r1, r3
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f7ff fe86 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 f92d 	bl	8010b10 <SDMMC_GetCmdError>
 80108b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b8:	69fb      	ldr	r3, [r7, #28]
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3720      	adds	r7, #32
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b088      	sub	sp, #32
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80108ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80108ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80108d0:	2308      	movs	r3, #8
 80108d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108d4:	2340      	movs	r3, #64	; 0x40
 80108d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d8:	2300      	movs	r3, #0
 80108da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108e2:	f107 0308 	add.w	r3, r7, #8
 80108e6:	4619      	mov	r1, r3
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7ff fe67 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 fb16 	bl	8010f20 <SDMMC_GetCmdResp7>
 80108f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f6:	69fb      	ldr	r3, [r7, #28]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3720      	adds	r7, #32
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b088      	sub	sp, #32
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
 8010908:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801090e:	2337      	movs	r3, #55	; 0x37
 8010910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010912:	2340      	movs	r3, #64	; 0x40
 8010914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010916:	2300      	movs	r3, #0
 8010918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801091a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801091e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010920:	f107 0308 	add.w	r3, r7, #8
 8010924:	4619      	mov	r1, r3
 8010926:	6878      	ldr	r0, [r7, #4]
 8010928:	f7ff fe48 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801092c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010930:	2137      	movs	r1, #55	; 0x37
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f000 f914 	bl	8010b60 <SDMMC_GetCmdResp1>
 8010938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801093a:	69fb      	ldr	r3, [r7, #28]
}
 801093c:	4618      	mov	r0, r3
 801093e:	3720      	adds	r7, #32
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b088      	sub	sp, #32
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801095a:	2329      	movs	r3, #41	; 0x29
 801095c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801095e:	2340      	movs	r3, #64	; 0x40
 8010960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010962:	2300      	movs	r3, #0
 8010964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801096a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801096c:	f107 0308 	add.w	r3, r7, #8
 8010970:	4619      	mov	r1, r3
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff fe22 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f000 fa23 	bl	8010dc4 <SDMMC_GetCmdResp3>
 801097e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010980:	69fb      	ldr	r3, [r7, #28]
}
 8010982:	4618      	mov	r0, r3
 8010984:	3720      	adds	r7, #32
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801098a:	b580      	push	{r7, lr}
 801098c:	b088      	sub	sp, #32
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010998:	2306      	movs	r3, #6
 801099a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801099c:	2340      	movs	r3, #64	; 0x40
 801099e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109a0:	2300      	movs	r3, #0
 80109a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109aa:	f107 0308 	add.w	r3, r7, #8
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f7ff fe03 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80109b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80109ba:	2106      	movs	r1, #6
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 f8cf 	bl	8010b60 <SDMMC_GetCmdResp1>
 80109c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109c4:	69fb      	ldr	r3, [r7, #28]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3720      	adds	r7, #32
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}

080109ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80109ce:	b580      	push	{r7, lr}
 80109d0:	b088      	sub	sp, #32
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80109d6:	2300      	movs	r3, #0
 80109d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80109da:	2333      	movs	r3, #51	; 0x33
 80109dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109de:	2340      	movs	r3, #64	; 0x40
 80109e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109e2:	2300      	movs	r3, #0
 80109e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109ec:	f107 0308 	add.w	r3, r7, #8
 80109f0:	4619      	mov	r1, r3
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff fde2 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80109f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80109fc:	2133      	movs	r1, #51	; 0x33
 80109fe:	6878      	ldr	r0, [r7, #4]
 8010a00:	f000 f8ae 	bl	8010b60 <SDMMC_GetCmdResp1>
 8010a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a06:	69fb      	ldr	r3, [r7, #28]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010a1c:	2302      	movs	r3, #2
 8010a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a20:	23c0      	movs	r3, #192	; 0xc0
 8010a22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a24:	2300      	movs	r3, #0
 8010a26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a2e:	f107 0308 	add.w	r3, r7, #8
 8010a32:	4619      	mov	r1, r3
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f7ff fdc1 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 f97c 	bl	8010d38 <SDMMC_GetCmdResp2>
 8010a40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a42:	69fb      	ldr	r3, [r7, #28]
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3720      	adds	r7, #32
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b088      	sub	sp, #32
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010a5a:	2309      	movs	r3, #9
 8010a5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a5e:	23c0      	movs	r3, #192	; 0xc0
 8010a60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a62:	2300      	movs	r3, #0
 8010a64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a6c:	f107 0308 	add.w	r3, r7, #8
 8010a70:	4619      	mov	r1, r3
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7ff fda2 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 f95d 	bl	8010d38 <SDMMC_GetCmdResp2>
 8010a7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a80:	69fb      	ldr	r3, [r7, #28]
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3720      	adds	r7, #32
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}

08010a8a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b088      	sub	sp, #32
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a94:	2300      	movs	r3, #0
 8010a96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010a98:	2303      	movs	r3, #3
 8010a9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a9c:	2340      	movs	r3, #64	; 0x40
 8010a9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aa8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aaa:	f107 0308 	add.w	r3, r7, #8
 8010aae:	4619      	mov	r1, r3
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fd83 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010ab6:	683a      	ldr	r2, [r7, #0]
 8010ab8:	2103      	movs	r1, #3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 f9bc 	bl	8010e38 <SDMMC_GetCmdResp6>
 8010ac0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ac2:	69fb      	ldr	r3, [r7, #28]
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3720      	adds	r7, #32
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b088      	sub	sp, #32
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
 8010ad4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010ada:	230d      	movs	r3, #13
 8010adc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ade:	2340      	movs	r3, #64	; 0x40
 8010ae0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aec:	f107 0308 	add.w	r3, r7, #8
 8010af0:	4619      	mov	r1, r3
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f7ff fd62 	bl	80105bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010afc:	210d      	movs	r1, #13
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f82e 	bl	8010b60 <SDMMC_GetCmdResp1>
 8010b04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b06:	69fb      	ldr	r3, [r7, #28]
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3720      	adds	r7, #32
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}

08010b10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010b10:	b490      	push	{r4, r7}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b18:	4b0f      	ldr	r3, [pc, #60]	; (8010b58 <SDMMC_GetCmdError+0x48>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	4a0f      	ldr	r2, [pc, #60]	; (8010b5c <SDMMC_GetCmdError+0x4c>)
 8010b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8010b22:	0a5b      	lsrs	r3, r3, #9
 8010b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b2c:	4623      	mov	r3, r4
 8010b2e:	1e5c      	subs	r4, r3, #1
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d102      	bne.n	8010b3a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b38:	e009      	b.n	8010b4e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d0f2      	beq.n	8010b2c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	22c5      	movs	r2, #197	; 0xc5
 8010b4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010b4c:	2300      	movs	r3, #0
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bc90      	pop	{r4, r7}
 8010b56:	4770      	bx	lr
 8010b58:	20000000 	.word	0x20000000
 8010b5c:	10624dd3 	.word	0x10624dd3

08010b60 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b60:	b590      	push	{r4, r7, lr}
 8010b62:	b087      	sub	sp, #28
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	60f8      	str	r0, [r7, #12]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	607a      	str	r2, [r7, #4]
 8010b6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010b6e:	4b6f      	ldr	r3, [pc, #444]	; (8010d2c <SDMMC_GetCmdResp1+0x1cc>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	4a6f      	ldr	r2, [pc, #444]	; (8010d30 <SDMMC_GetCmdResp1+0x1d0>)
 8010b74:	fba2 2303 	umull	r2, r3, r2, r3
 8010b78:	0a5b      	lsrs	r3, r3, #9
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b80:	4623      	mov	r3, r4
 8010b82:	1e5c      	subs	r4, r3, #1
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d102      	bne.n	8010b8e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b8c:	e0c9      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b92:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d0f0      	beq.n	8010b80 <SDMMC_GetCmdResp1+0x20>
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1eb      	bne.n	8010b80 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bac:	f003 0304 	and.w	r3, r3, #4
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d004      	beq.n	8010bbe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	2204      	movs	r2, #4
 8010bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010bba:	2304      	movs	r3, #4
 8010bbc:	e0b1      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bc2:	f003 0301 	and.w	r3, r3, #1
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d004      	beq.n	8010bd4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	e0a6      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	22c5      	movs	r2, #197	; 0xc5
 8010bd8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f7ff fd18 	bl	8010610 <SDIO_GetCommandResponse>
 8010be0:	4603      	mov	r3, r0
 8010be2:	461a      	mov	r2, r3
 8010be4:	7afb      	ldrb	r3, [r7, #11]
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d001      	beq.n	8010bee <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e099      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010bee:	2100      	movs	r1, #0
 8010bf0:	68f8      	ldr	r0, [r7, #12]
 8010bf2:	f7ff fd1a 	bl	801062a <SDIO_GetResponse>
 8010bf6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010bf8:	693a      	ldr	r2, [r7, #16]
 8010bfa:	4b4e      	ldr	r3, [pc, #312]	; (8010d34 <SDMMC_GetCmdResp1+0x1d4>)
 8010bfc:	4013      	ands	r3, r2
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d101      	bne.n	8010c06 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010c02:	2300      	movs	r3, #0
 8010c04:	e08d      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	da02      	bge.n	8010c12 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010c10:	e087      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010c1c:	2340      	movs	r3, #64	; 0x40
 8010c1e:	e080      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d001      	beq.n	8010c2e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010c2a:	2380      	movs	r3, #128	; 0x80
 8010c2c:	e079      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c3c:	e071      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c4c:	e069      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c5c:	e061      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c6c:	e059      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c7c:	e051      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d002      	beq.n	8010c8e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010c8c:	e049      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d002      	beq.n	8010c9e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010c98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010c9c:	e041      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010cac:	e039      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010cb8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010cbc:	e031      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d002      	beq.n	8010cce <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010cc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010ccc:	e029      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010cd8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010cdc:	e021      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010cde:	693b      	ldr	r3, [r7, #16]
 8010ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d002      	beq.n	8010cee <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ce8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010cec:	e019      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d002      	beq.n	8010cfe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010cf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010cfc:	e011      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010d08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d0c:	e009      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	f003 0308 	and.w	r3, r3, #8
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d002      	beq.n	8010d1e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010d18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010d1c:	e001      	b.n	8010d22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	371c      	adds	r7, #28
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd90      	pop	{r4, r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	20000000 	.word	0x20000000
 8010d30:	10624dd3 	.word	0x10624dd3
 8010d34:	fdffe008 	.word	0xfdffe008

08010d38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010d38:	b490      	push	{r4, r7}
 8010d3a:	b084      	sub	sp, #16
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d40:	4b1e      	ldr	r3, [pc, #120]	; (8010dbc <SDMMC_GetCmdResp2+0x84>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	4a1e      	ldr	r2, [pc, #120]	; (8010dc0 <SDMMC_GetCmdResp2+0x88>)
 8010d46:	fba2 2303 	umull	r2, r3, r2, r3
 8010d4a:	0a5b      	lsrs	r3, r3, #9
 8010d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d54:	4623      	mov	r3, r4
 8010d56:	1e5c      	subs	r4, r3, #1
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d102      	bne.n	8010d62 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d60:	e026      	b.n	8010db0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d0f0      	beq.n	8010d54 <SDMMC_GetCmdResp2+0x1c>
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d1eb      	bne.n	8010d54 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d80:	f003 0304 	and.w	r3, r3, #4
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d004      	beq.n	8010d92 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2204      	movs	r2, #4
 8010d8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d8e:	2304      	movs	r3, #4
 8010d90:	e00e      	b.n	8010db0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d96:	f003 0301 	and.w	r3, r3, #1
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d004      	beq.n	8010da8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2201      	movs	r2, #1
 8010da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010da4:	2301      	movs	r3, #1
 8010da6:	e003      	b.n	8010db0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	22c5      	movs	r2, #197	; 0xc5
 8010dac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010dae:	2300      	movs	r3, #0
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	3710      	adds	r7, #16
 8010db4:	46bd      	mov	sp, r7
 8010db6:	bc90      	pop	{r4, r7}
 8010db8:	4770      	bx	lr
 8010dba:	bf00      	nop
 8010dbc:	20000000 	.word	0x20000000
 8010dc0:	10624dd3 	.word	0x10624dd3

08010dc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010dc4:	b490      	push	{r4, r7}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010dcc:	4b18      	ldr	r3, [pc, #96]	; (8010e30 <SDMMC_GetCmdResp3+0x6c>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4a18      	ldr	r2, [pc, #96]	; (8010e34 <SDMMC_GetCmdResp3+0x70>)
 8010dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8010dd6:	0a5b      	lsrs	r3, r3, #9
 8010dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ddc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010de0:	4623      	mov	r3, r4
 8010de2:	1e5c      	subs	r4, r3, #1
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d102      	bne.n	8010dee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010de8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010dec:	e01b      	b.n	8010e26 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010df2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d0f0      	beq.n	8010de0 <SDMMC_GetCmdResp3+0x1c>
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d1eb      	bne.n	8010de0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0c:	f003 0304 	and.w	r3, r3, #4
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d004      	beq.n	8010e1e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2204      	movs	r2, #4
 8010e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e1a:	2304      	movs	r3, #4
 8010e1c:	e003      	b.n	8010e26 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	22c5      	movs	r2, #197	; 0xc5
 8010e22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e24:	2300      	movs	r3, #0
}
 8010e26:	4618      	mov	r0, r3
 8010e28:	3710      	adds	r7, #16
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	bc90      	pop	{r4, r7}
 8010e2e:	4770      	bx	lr
 8010e30:	20000000 	.word	0x20000000
 8010e34:	10624dd3 	.word	0x10624dd3

08010e38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010e38:	b590      	push	{r4, r7, lr}
 8010e3a:	b087      	sub	sp, #28
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	60f8      	str	r0, [r7, #12]
 8010e40:	460b      	mov	r3, r1
 8010e42:	607a      	str	r2, [r7, #4]
 8010e44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e46:	4b34      	ldr	r3, [pc, #208]	; (8010f18 <SDMMC_GetCmdResp6+0xe0>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a34      	ldr	r2, [pc, #208]	; (8010f1c <SDMMC_GetCmdResp6+0xe4>)
 8010e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8010e50:	0a5b      	lsrs	r3, r3, #9
 8010e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e56:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e5a:	4623      	mov	r3, r4
 8010e5c:	1e5c      	subs	r4, r3, #1
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d102      	bne.n	8010e68 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e66:	e052      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e6c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d0f0      	beq.n	8010e5a <SDMMC_GetCmdResp6+0x22>
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d1eb      	bne.n	8010e5a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e86:	f003 0304 	and.w	r3, r3, #4
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d004      	beq.n	8010e98 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	2204      	movs	r2, #4
 8010e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e94:	2304      	movs	r3, #4
 8010e96:	e03a      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e9c:	f003 0301 	and.w	r3, r3, #1
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d004      	beq.n	8010eae <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	2201      	movs	r2, #1
 8010ea8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e02f      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f7ff fbae 	bl	8010610 <SDIO_GetCommandResponse>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	7afb      	ldrb	r3, [r7, #11]
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d001      	beq.n	8010ec2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e025      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	22c5      	movs	r2, #197	; 0xc5
 8010ec6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ec8:	2100      	movs	r1, #0
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f7ff fbad 	bl	801062a <SDIO_GetResponse>
 8010ed0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d106      	bne.n	8010eea <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	0c1b      	lsrs	r3, r3, #16
 8010ee0:	b29a      	uxth	r2, r3
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e011      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010eea:	693b      	ldr	r3, [r7, #16]
 8010eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d002      	beq.n	8010efa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010ef8:	e009      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f08:	e001      	b.n	8010f0e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	371c      	adds	r7, #28
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd90      	pop	{r4, r7, pc}
 8010f16:	bf00      	nop
 8010f18:	20000000 	.word	0x20000000
 8010f1c:	10624dd3 	.word	0x10624dd3

08010f20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010f20:	b490      	push	{r4, r7}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f28:	4b21      	ldr	r3, [pc, #132]	; (8010fb0 <SDMMC_GetCmdResp7+0x90>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4a21      	ldr	r2, [pc, #132]	; (8010fb4 <SDMMC_GetCmdResp7+0x94>)
 8010f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f32:	0a5b      	lsrs	r3, r3, #9
 8010f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f3c:	4623      	mov	r3, r4
 8010f3e:	1e5c      	subs	r4, r3, #1
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d102      	bne.n	8010f4a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f48:	e02c      	b.n	8010fa4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d0f0      	beq.n	8010f3c <SDMMC_GetCmdResp7+0x1c>
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1eb      	bne.n	8010f3c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f68:	f003 0304 	and.w	r3, r3, #4
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d004      	beq.n	8010f7a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2204      	movs	r2, #4
 8010f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f76:	2304      	movs	r3, #4
 8010f78:	e014      	b.n	8010fa4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f7e:	f003 0301 	and.w	r3, r3, #1
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d004      	beq.n	8010f90 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	e009      	b.n	8010fa4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2240      	movs	r2, #64	; 0x40
 8010fa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fa2:	2300      	movs	r3, #0
  
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3710      	adds	r7, #16
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bc90      	pop	{r4, r7}
 8010fac:	4770      	bx	lr
 8010fae:	bf00      	nop
 8010fb0:	20000000 	.word	0x20000000
 8010fb4:	10624dd3 	.word	0x10624dd3

08010fb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010fbc:	4904      	ldr	r1, [pc, #16]	; (8010fd0 <MX_FATFS_Init+0x18>)
 8010fbe:	4805      	ldr	r0, [pc, #20]	; (8010fd4 <MX_FATFS_Init+0x1c>)
 8010fc0:	f003 fb9c 	bl	80146fc <FATFS_LinkDriver>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	461a      	mov	r2, r3
 8010fc8:	4b03      	ldr	r3, [pc, #12]	; (8010fd8 <MX_FATFS_Init+0x20>)
 8010fca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010fcc:	bf00      	nop
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	20044c28 	.word	0x20044c28
 8010fd4:	0801a050 	.word	0x0801a050
 8010fd8:	20044c24 	.word	0x20044c24

08010fdc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b082      	sub	sp, #8
 8010fe0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010fe6:	f000 f896 	bl	8011116 <BSP_SD_IsDetected>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b01      	cmp	r3, #1
 8010fee:	d001      	beq.n	8010ff4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e012      	b.n	801101a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010ff4:	480b      	ldr	r0, [pc, #44]	; (8011024 <BSP_SD_Init+0x48>)
 8010ff6:	f7fb ffa5 	bl	800cf44 <HAL_SD_Init>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010ffe:	79fb      	ldrb	r3, [r7, #7]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d109      	bne.n	8011018 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011004:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011008:	4806      	ldr	r0, [pc, #24]	; (8011024 <BSP_SD_Init+0x48>)
 801100a:	f7fc fd4f 	bl	800daac <HAL_SD_ConfigWideBusOperation>
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d001      	beq.n	8011018 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011014:	2301      	movs	r3, #1
 8011016:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011018:	79fb      	ldrb	r3, [r7, #7]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	20044a24 	.word	0x20044a24

08011028 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b086      	sub	sp, #24
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	68f9      	ldr	r1, [r7, #12]
 801103e:	4806      	ldr	r0, [pc, #24]	; (8011058 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011040:	f7fc f810 	bl	800d064 <HAL_SD_ReadBlocks_DMA>
 8011044:	4603      	mov	r3, r0
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801104a:	2301      	movs	r3, #1
 801104c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801104e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3718      	adds	r7, #24
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	20044a24 	.word	0x20044a24

0801105c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b086      	sub	sp, #24
 8011060:	af00      	add	r7, sp, #0
 8011062:	60f8      	str	r0, [r7, #12]
 8011064:	60b9      	str	r1, [r7, #8]
 8011066:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011068:	2300      	movs	r3, #0
 801106a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	68f9      	ldr	r1, [r7, #12]
 8011072:	4806      	ldr	r0, [pc, #24]	; (801108c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011074:	f7fc f8de 	bl	800d234 <HAL_SD_WriteBlocks_DMA>
 8011078:	4603      	mov	r3, r0
 801107a:	2b00      	cmp	r3, #0
 801107c:	d001      	beq.n	8011082 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011082:	7dfb      	ldrb	r3, [r7, #23]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3718      	adds	r7, #24
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	20044a24 	.word	0x20044a24

08011090 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011094:	4805      	ldr	r0, [pc, #20]	; (80110ac <BSP_SD_GetCardState+0x1c>)
 8011096:	f7fc fd85 	bl	800dba4 <HAL_SD_GetCardState>
 801109a:	4603      	mov	r3, r0
 801109c:	2b04      	cmp	r3, #4
 801109e:	bf14      	ite	ne
 80110a0:	2301      	movne	r3, #1
 80110a2:	2300      	moveq	r3, #0
 80110a4:	b2db      	uxtb	r3, r3
}
 80110a6:	4618      	mov	r0, r3
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	20044a24 	.word	0x20044a24

080110b0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b082      	sub	sp, #8
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80110b8:	6879      	ldr	r1, [r7, #4]
 80110ba:	4803      	ldr	r0, [pc, #12]	; (80110c8 <BSP_SD_GetCardInfo+0x18>)
 80110bc:	f7fc fcca 	bl	800da54 <HAL_SD_GetCardInfo>
}
 80110c0:	bf00      	nop
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	20044a24 	.word	0x20044a24

080110cc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b082      	sub	sp, #8
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80110d4:	f000 f818 	bl	8011108 <BSP_SD_AbortCallback>
}
 80110d8:	bf00      	nop
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80110e8:	f000 f9a8 	bl	801143c <BSP_SD_WriteCpltCallback>
}
 80110ec:	bf00      	nop
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80110fc:	f000 f9aa 	bl	8011454 <BSP_SD_ReadCpltCallback>
}
 8011100:	bf00      	nop
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011108:	b480      	push	{r7}
 801110a:	af00      	add	r7, sp, #0

}
 801110c:	bf00      	nop
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b082      	sub	sp, #8
 801111a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801111c:	2301      	movs	r3, #1
 801111e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011120:	f000 f80c 	bl	801113c <BSP_PlatformIsDetected>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d101      	bne.n	801112e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801112a:	2300      	movs	r3, #0
 801112c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801112e:	79fb      	ldrb	r3, [r7, #7]
 8011130:	b2db      	uxtb	r3, r3
}
 8011132:	4618      	mov	r0, r3
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
	...

0801113c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011142:	2301      	movs	r3, #1
 8011144:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801114a:	4806      	ldr	r0, [pc, #24]	; (8011164 <BSP_PlatformIsDetected+0x28>)
 801114c:	f7fa f87e 	bl	800b24c <HAL_GPIO_ReadPin>
 8011150:	4603      	mov	r3, r0
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011156:	2300      	movs	r3, #0
 8011158:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801115a:	79fb      	ldrb	r3, [r7, #7]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	40020000 	.word	0x40020000

08011168 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b084      	sub	sp, #16
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011170:	f7f8 fde2 	bl	8009d38 <HAL_GetTick>
 8011174:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011176:	e006      	b.n	8011186 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011178:	f7ff ff8a 	bl	8011090 <BSP_SD_GetCardState>
 801117c:	4603      	mov	r3, r0
 801117e:	2b00      	cmp	r3, #0
 8011180:	d101      	bne.n	8011186 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011182:	2300      	movs	r3, #0
 8011184:	e009      	b.n	801119a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011186:	f7f8 fdd7 	bl	8009d38 <HAL_GetTick>
 801118a:	4602      	mov	r2, r0
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	1ad3      	subs	r3, r2, r3
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	429a      	cmp	r2, r3
 8011194:	d8f0      	bhi.n	8011178 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011196:	f04f 33ff 	mov.w	r3, #4294967295
}
 801119a:	4618      	mov	r0, r3
 801119c:	3710      	adds	r7, #16
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
	...

080111a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	4603      	mov	r3, r0
 80111ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80111ae:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <SD_CheckStatus+0x38>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80111b4:	f7ff ff6c 	bl	8011090 <BSP_SD_GetCardState>
 80111b8:	4603      	mov	r3, r0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d107      	bne.n	80111ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80111be:	4b07      	ldr	r3, [pc, #28]	; (80111dc <SD_CheckStatus+0x38>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	b2db      	uxtb	r3, r3
 80111c4:	f023 0301 	bic.w	r3, r3, #1
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	4b04      	ldr	r3, [pc, #16]	; (80111dc <SD_CheckStatus+0x38>)
 80111cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80111ce:	4b03      	ldr	r3, [pc, #12]	; (80111dc <SD_CheckStatus+0x38>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	b2db      	uxtb	r3, r3
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}
 80111dc:	20000009 	.word	0x20000009

080111e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	4603      	mov	r3, r0
 80111e8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80111ea:	f7ff fef7 	bl	8010fdc <BSP_SD_Init>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d107      	bne.n	8011204 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80111f4:	79fb      	ldrb	r3, [r7, #7]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff ffd4 	bl	80111a4 <SD_CheckStatus>
 80111fc:	4603      	mov	r3, r0
 80111fe:	461a      	mov	r2, r3
 8011200:	4b04      	ldr	r3, [pc, #16]	; (8011214 <SD_initialize+0x34>)
 8011202:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011204:	4b03      	ldr	r3, [pc, #12]	; (8011214 <SD_initialize+0x34>)
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	b2db      	uxtb	r3, r3
}
 801120a:	4618      	mov	r0, r3
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20000009 	.word	0x20000009

08011218 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	4603      	mov	r3, r0
 8011220:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011222:	79fb      	ldrb	r3, [r7, #7]
 8011224:	4618      	mov	r0, r3
 8011226:	f7ff ffbd 	bl	80111a4 <SD_CheckStatus>
 801122a:	4603      	mov	r3, r0
}
 801122c:	4618      	mov	r0, r3
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	60b9      	str	r1, [r7, #8]
 801123c:	607a      	str	r2, [r7, #4]
 801123e:	603b      	str	r3, [r7, #0]
 8011240:	4603      	mov	r3, r0
 8011242:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011244:	2301      	movs	r3, #1
 8011246:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011248:	f247 5030 	movw	r0, #30000	; 0x7530
 801124c:	f7ff ff8c 	bl	8011168 <SD_CheckStatusWithTimeout>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	da01      	bge.n	801125a <SD_read+0x26>
  {
    return res;
 8011256:	7dfb      	ldrb	r3, [r7, #23]
 8011258:	e03b      	b.n	80112d2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801125a:	683a      	ldr	r2, [r7, #0]
 801125c:	6879      	ldr	r1, [r7, #4]
 801125e:	68b8      	ldr	r0, [r7, #8]
 8011260:	f7ff fee2 	bl	8011028 <BSP_SD_ReadBlocks_DMA>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d132      	bne.n	80112d0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801126a:	4b1c      	ldr	r3, [pc, #112]	; (80112dc <SD_read+0xa8>)
 801126c:	2200      	movs	r2, #0
 801126e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011270:	f7f8 fd62 	bl	8009d38 <HAL_GetTick>
 8011274:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011276:	bf00      	nop
 8011278:	4b18      	ldr	r3, [pc, #96]	; (80112dc <SD_read+0xa8>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d108      	bne.n	8011292 <SD_read+0x5e>
 8011280:	f7f8 fd5a 	bl	8009d38 <HAL_GetTick>
 8011284:	4602      	mov	r2, r0
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	1ad3      	subs	r3, r2, r3
 801128a:	f247 522f 	movw	r2, #29999	; 0x752f
 801128e:	4293      	cmp	r3, r2
 8011290:	d9f2      	bls.n	8011278 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011292:	4b12      	ldr	r3, [pc, #72]	; (80112dc <SD_read+0xa8>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	75fb      	strb	r3, [r7, #23]
 801129e:	e017      	b.n	80112d0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80112a0:	4b0e      	ldr	r3, [pc, #56]	; (80112dc <SD_read+0xa8>)
 80112a2:	2200      	movs	r2, #0
 80112a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80112a6:	f7f8 fd47 	bl	8009d38 <HAL_GetTick>
 80112aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112ac:	e007      	b.n	80112be <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112ae:	f7ff feef 	bl	8011090 <BSP_SD_GetCardState>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d102      	bne.n	80112be <SD_read+0x8a>
          {
            res = RES_OK;
 80112b8:	2300      	movs	r3, #0
 80112ba:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80112bc:	e008      	b.n	80112d0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112be:	f7f8 fd3b 	bl	8009d38 <HAL_GetTick>
 80112c2:	4602      	mov	r2, r0
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	1ad3      	subs	r3, r2, r3
 80112c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d9ee      	bls.n	80112ae <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80112d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3718      	adds	r7, #24
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	200422c0 	.word	0x200422c0

080112e0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b086      	sub	sp, #24
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	60b9      	str	r1, [r7, #8]
 80112e8:	607a      	str	r2, [r7, #4]
 80112ea:	603b      	str	r3, [r7, #0]
 80112ec:	4603      	mov	r3, r0
 80112ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80112f0:	2301      	movs	r3, #1
 80112f2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80112f4:	4b24      	ldr	r3, [pc, #144]	; (8011388 <SD_write+0xa8>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80112fa:	f247 5030 	movw	r0, #30000	; 0x7530
 80112fe:	f7ff ff33 	bl	8011168 <SD_CheckStatusWithTimeout>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	da01      	bge.n	801130c <SD_write+0x2c>
  {
    return res;
 8011308:	7dfb      	ldrb	r3, [r7, #23]
 801130a:	e038      	b.n	801137e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801130c:	683a      	ldr	r2, [r7, #0]
 801130e:	6879      	ldr	r1, [r7, #4]
 8011310:	68b8      	ldr	r0, [r7, #8]
 8011312:	f7ff fea3 	bl	801105c <BSP_SD_WriteBlocks_DMA>
 8011316:	4603      	mov	r3, r0
 8011318:	2b00      	cmp	r3, #0
 801131a:	d12f      	bne.n	801137c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801131c:	f7f8 fd0c 	bl	8009d38 <HAL_GetTick>
 8011320:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011322:	bf00      	nop
 8011324:	4b18      	ldr	r3, [pc, #96]	; (8011388 <SD_write+0xa8>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d108      	bne.n	801133e <SD_write+0x5e>
 801132c:	f7f8 fd04 	bl	8009d38 <HAL_GetTick>
 8011330:	4602      	mov	r2, r0
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	f247 522f 	movw	r2, #29999	; 0x752f
 801133a:	4293      	cmp	r3, r2
 801133c:	d9f2      	bls.n	8011324 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801133e:	4b12      	ldr	r3, [pc, #72]	; (8011388 <SD_write+0xa8>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d102      	bne.n	801134c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011346:	2301      	movs	r3, #1
 8011348:	75fb      	strb	r3, [r7, #23]
 801134a:	e017      	b.n	801137c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801134c:	4b0e      	ldr	r3, [pc, #56]	; (8011388 <SD_write+0xa8>)
 801134e:	2200      	movs	r2, #0
 8011350:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011352:	f7f8 fcf1 	bl	8009d38 <HAL_GetTick>
 8011356:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011358:	e007      	b.n	801136a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801135a:	f7ff fe99 	bl	8011090 <BSP_SD_GetCardState>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d102      	bne.n	801136a <SD_write+0x8a>
          {
            res = RES_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	75fb      	strb	r3, [r7, #23]
            break;
 8011368:	e008      	b.n	801137c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801136a:	f7f8 fce5 	bl	8009d38 <HAL_GetTick>
 801136e:	4602      	mov	r2, r0
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	f247 522f 	movw	r2, #29999	; 0x752f
 8011378:	4293      	cmp	r3, r2
 801137a:	d9ee      	bls.n	801135a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801137c:	7dfb      	ldrb	r3, [r7, #23]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3718      	adds	r7, #24
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	200422bc 	.word	0x200422bc

0801138c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b08c      	sub	sp, #48	; 0x30
 8011390:	af00      	add	r7, sp, #0
 8011392:	4603      	mov	r3, r0
 8011394:	603a      	str	r2, [r7, #0]
 8011396:	71fb      	strb	r3, [r7, #7]
 8011398:	460b      	mov	r3, r1
 801139a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801139c:	2301      	movs	r3, #1
 801139e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80113a2:	4b25      	ldr	r3, [pc, #148]	; (8011438 <SD_ioctl+0xac>)
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	b2db      	uxtb	r3, r3
 80113a8:	f003 0301 	and.w	r3, r3, #1
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d001      	beq.n	80113b4 <SD_ioctl+0x28>
 80113b0:	2303      	movs	r3, #3
 80113b2:	e03c      	b.n	801142e <SD_ioctl+0xa2>

  switch (cmd)
 80113b4:	79bb      	ldrb	r3, [r7, #6]
 80113b6:	2b03      	cmp	r3, #3
 80113b8:	d834      	bhi.n	8011424 <SD_ioctl+0x98>
 80113ba:	a201      	add	r2, pc, #4	; (adr r2, 80113c0 <SD_ioctl+0x34>)
 80113bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c0:	080113d1 	.word	0x080113d1
 80113c4:	080113d9 	.word	0x080113d9
 80113c8:	080113f1 	.word	0x080113f1
 80113cc:	0801140b 	.word	0x0801140b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80113d0:	2300      	movs	r3, #0
 80113d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113d6:	e028      	b.n	801142a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80113d8:	f107 030c 	add.w	r3, r7, #12
 80113dc:	4618      	mov	r0, r3
 80113de:	f7ff fe67 	bl	80110b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80113e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113ee:	e01c      	b.n	801142a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113f0:	f107 030c 	add.w	r3, r7, #12
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff fe5b 	bl	80110b0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80113fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011402:	2300      	movs	r3, #0
 8011404:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011408:	e00f      	b.n	801142a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801140a:	f107 030c 	add.w	r3, r7, #12
 801140e:	4618      	mov	r0, r3
 8011410:	f7ff fe4e 	bl	80110b0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011416:	0a5a      	lsrs	r2, r3, #9
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011422:	e002      	b.n	801142a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011424:	2304      	movs	r3, #4
 8011426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801142a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801142e:	4618      	mov	r0, r3
 8011430:	3730      	adds	r7, #48	; 0x30
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	20000009 	.word	0x20000009

0801143c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801143c:	b480      	push	{r7}
 801143e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011440:	4b03      	ldr	r3, [pc, #12]	; (8011450 <BSP_SD_WriteCpltCallback+0x14>)
 8011442:	2201      	movs	r2, #1
 8011444:	601a      	str	r2, [r3, #0]
}
 8011446:	bf00      	nop
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr
 8011450:	200422bc 	.word	0x200422bc

08011454 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011454:	b480      	push	{r7}
 8011456:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011458:	4b03      	ldr	r3, [pc, #12]	; (8011468 <BSP_SD_ReadCpltCallback+0x14>)
 801145a:	2201      	movs	r2, #1
 801145c:	601a      	str	r2, [r3, #0]
}
 801145e:	bf00      	nop
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr
 8011468:	200422c0 	.word	0x200422c0

0801146c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011476:	79fb      	ldrb	r3, [r7, #7]
 8011478:	4a08      	ldr	r2, [pc, #32]	; (801149c <disk_status+0x30>)
 801147a:	009b      	lsls	r3, r3, #2
 801147c:	4413      	add	r3, r2
 801147e:	685b      	ldr	r3, [r3, #4]
 8011480:	685b      	ldr	r3, [r3, #4]
 8011482:	79fa      	ldrb	r2, [r7, #7]
 8011484:	4905      	ldr	r1, [pc, #20]	; (801149c <disk_status+0x30>)
 8011486:	440a      	add	r2, r1
 8011488:	7a12      	ldrb	r2, [r2, #8]
 801148a:	4610      	mov	r0, r2
 801148c:	4798      	blx	r3
 801148e:	4603      	mov	r3, r0
 8011490:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011492:	7bfb      	ldrb	r3, [r7, #15]
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}
 801149c:	200422ec 	.word	0x200422ec

080114a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b084      	sub	sp, #16
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	4603      	mov	r3, r0
 80114a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80114ae:	79fb      	ldrb	r3, [r7, #7]
 80114b0:	4a0d      	ldr	r2, [pc, #52]	; (80114e8 <disk_initialize+0x48>)
 80114b2:	5cd3      	ldrb	r3, [r2, r3]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d111      	bne.n	80114dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80114b8:	79fb      	ldrb	r3, [r7, #7]
 80114ba:	4a0b      	ldr	r2, [pc, #44]	; (80114e8 <disk_initialize+0x48>)
 80114bc:	2101      	movs	r1, #1
 80114be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80114c0:	79fb      	ldrb	r3, [r7, #7]
 80114c2:	4a09      	ldr	r2, [pc, #36]	; (80114e8 <disk_initialize+0x48>)
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	4413      	add	r3, r2
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	79fa      	ldrb	r2, [r7, #7]
 80114ce:	4906      	ldr	r1, [pc, #24]	; (80114e8 <disk_initialize+0x48>)
 80114d0:	440a      	add	r2, r1
 80114d2:	7a12      	ldrb	r2, [r2, #8]
 80114d4:	4610      	mov	r0, r2
 80114d6:	4798      	blx	r3
 80114d8:	4603      	mov	r3, r0
 80114da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3710      	adds	r7, #16
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	200422ec 	.word	0x200422ec

080114ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80114ec:	b590      	push	{r4, r7, lr}
 80114ee:	b087      	sub	sp, #28
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	60b9      	str	r1, [r7, #8]
 80114f4:	607a      	str	r2, [r7, #4]
 80114f6:	603b      	str	r3, [r7, #0]
 80114f8:	4603      	mov	r3, r0
 80114fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80114fc:	7bfb      	ldrb	r3, [r7, #15]
 80114fe:	4a0a      	ldr	r2, [pc, #40]	; (8011528 <disk_read+0x3c>)
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	689c      	ldr	r4, [r3, #8]
 8011508:	7bfb      	ldrb	r3, [r7, #15]
 801150a:	4a07      	ldr	r2, [pc, #28]	; (8011528 <disk_read+0x3c>)
 801150c:	4413      	add	r3, r2
 801150e:	7a18      	ldrb	r0, [r3, #8]
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	68b9      	ldr	r1, [r7, #8]
 8011516:	47a0      	blx	r4
 8011518:	4603      	mov	r3, r0
 801151a:	75fb      	strb	r3, [r7, #23]
  return res;
 801151c:	7dfb      	ldrb	r3, [r7, #23]
}
 801151e:	4618      	mov	r0, r3
 8011520:	371c      	adds	r7, #28
 8011522:	46bd      	mov	sp, r7
 8011524:	bd90      	pop	{r4, r7, pc}
 8011526:	bf00      	nop
 8011528:	200422ec 	.word	0x200422ec

0801152c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801152c:	b590      	push	{r4, r7, lr}
 801152e:	b087      	sub	sp, #28
 8011530:	af00      	add	r7, sp, #0
 8011532:	60b9      	str	r1, [r7, #8]
 8011534:	607a      	str	r2, [r7, #4]
 8011536:	603b      	str	r3, [r7, #0]
 8011538:	4603      	mov	r3, r0
 801153a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801153c:	7bfb      	ldrb	r3, [r7, #15]
 801153e:	4a0a      	ldr	r2, [pc, #40]	; (8011568 <disk_write+0x3c>)
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	4413      	add	r3, r2
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	68dc      	ldr	r4, [r3, #12]
 8011548:	7bfb      	ldrb	r3, [r7, #15]
 801154a:	4a07      	ldr	r2, [pc, #28]	; (8011568 <disk_write+0x3c>)
 801154c:	4413      	add	r3, r2
 801154e:	7a18      	ldrb	r0, [r3, #8]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	687a      	ldr	r2, [r7, #4]
 8011554:	68b9      	ldr	r1, [r7, #8]
 8011556:	47a0      	blx	r4
 8011558:	4603      	mov	r3, r0
 801155a:	75fb      	strb	r3, [r7, #23]
  return res;
 801155c:	7dfb      	ldrb	r3, [r7, #23]
}
 801155e:	4618      	mov	r0, r3
 8011560:	371c      	adds	r7, #28
 8011562:	46bd      	mov	sp, r7
 8011564:	bd90      	pop	{r4, r7, pc}
 8011566:	bf00      	nop
 8011568:	200422ec 	.word	0x200422ec

0801156c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	4603      	mov	r3, r0
 8011574:	603a      	str	r2, [r7, #0]
 8011576:	71fb      	strb	r3, [r7, #7]
 8011578:	460b      	mov	r3, r1
 801157a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801157c:	79fb      	ldrb	r3, [r7, #7]
 801157e:	4a09      	ldr	r2, [pc, #36]	; (80115a4 <disk_ioctl+0x38>)
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	685b      	ldr	r3, [r3, #4]
 8011586:	691b      	ldr	r3, [r3, #16]
 8011588:	79fa      	ldrb	r2, [r7, #7]
 801158a:	4906      	ldr	r1, [pc, #24]	; (80115a4 <disk_ioctl+0x38>)
 801158c:	440a      	add	r2, r1
 801158e:	7a10      	ldrb	r0, [r2, #8]
 8011590:	79b9      	ldrb	r1, [r7, #6]
 8011592:	683a      	ldr	r2, [r7, #0]
 8011594:	4798      	blx	r3
 8011596:	4603      	mov	r3, r0
 8011598:	73fb      	strb	r3, [r7, #15]
  return res;
 801159a:	7bfb      	ldrb	r3, [r7, #15]
}
 801159c:	4618      	mov	r0, r3
 801159e:	3710      	adds	r7, #16
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	200422ec 	.word	0x200422ec

080115a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80115a8:	b480      	push	{r7}
 80115aa:	b085      	sub	sp, #20
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	3301      	adds	r3, #1
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80115b8:	89fb      	ldrh	r3, [r7, #14]
 80115ba:	021b      	lsls	r3, r3, #8
 80115bc:	b21a      	sxth	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	b21b      	sxth	r3, r3
 80115c4:	4313      	orrs	r3, r2
 80115c6:	b21b      	sxth	r3, r3
 80115c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80115ca:	89fb      	ldrh	r3, [r7, #14]
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3714      	adds	r7, #20
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3303      	adds	r3, #3
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	021b      	lsls	r3, r3, #8
 80115ec:	687a      	ldr	r2, [r7, #4]
 80115ee:	3202      	adds	r2, #2
 80115f0:	7812      	ldrb	r2, [r2, #0]
 80115f2:	4313      	orrs	r3, r2
 80115f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	021b      	lsls	r3, r3, #8
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	3201      	adds	r2, #1
 80115fe:	7812      	ldrb	r2, [r2, #0]
 8011600:	4313      	orrs	r3, r2
 8011602:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	021b      	lsls	r3, r3, #8
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	7812      	ldrb	r2, [r2, #0]
 801160c:	4313      	orrs	r3, r2
 801160e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011610:	68fb      	ldr	r3, [r7, #12]
}
 8011612:	4618      	mov	r0, r3
 8011614:	3714      	adds	r7, #20
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr

0801161e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801161e:	b480      	push	{r7}
 8011620:	b083      	sub	sp, #12
 8011622:	af00      	add	r7, sp, #0
 8011624:	6078      	str	r0, [r7, #4]
 8011626:	460b      	mov	r3, r1
 8011628:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	1c5a      	adds	r2, r3, #1
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	887a      	ldrh	r2, [r7, #2]
 8011632:	b2d2      	uxtb	r2, r2
 8011634:	701a      	strb	r2, [r3, #0]
 8011636:	887b      	ldrh	r3, [r7, #2]
 8011638:	0a1b      	lsrs	r3, r3, #8
 801163a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	1c5a      	adds	r2, r3, #1
 8011640:	607a      	str	r2, [r7, #4]
 8011642:	887a      	ldrh	r2, [r7, #2]
 8011644:	b2d2      	uxtb	r2, r2
 8011646:	701a      	strb	r2, [r3, #0]
}
 8011648:	bf00      	nop
 801164a:	370c      	adds	r7, #12
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011654:	b480      	push	{r7}
 8011656:	b083      	sub	sp, #12
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	1c5a      	adds	r2, r3, #1
 8011662:	607a      	str	r2, [r7, #4]
 8011664:	683a      	ldr	r2, [r7, #0]
 8011666:	b2d2      	uxtb	r2, r2
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	0a1b      	lsrs	r3, r3, #8
 801166e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	1c5a      	adds	r2, r3, #1
 8011674:	607a      	str	r2, [r7, #4]
 8011676:	683a      	ldr	r2, [r7, #0]
 8011678:	b2d2      	uxtb	r2, r2
 801167a:	701a      	strb	r2, [r3, #0]
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	0a1b      	lsrs	r3, r3, #8
 8011680:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	1c5a      	adds	r2, r3, #1
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	683a      	ldr	r2, [r7, #0]
 801168a:	b2d2      	uxtb	r2, r2
 801168c:	701a      	strb	r2, [r3, #0]
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	0a1b      	lsrs	r3, r3, #8
 8011692:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	1c5a      	adds	r2, r3, #1
 8011698:	607a      	str	r2, [r7, #4]
 801169a:	683a      	ldr	r2, [r7, #0]
 801169c:	b2d2      	uxtb	r2, r2
 801169e:	701a      	strb	r2, [r3, #0]
}
 80116a0:	bf00      	nop
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80116ac:	b480      	push	{r7}
 80116ae:	b087      	sub	sp, #28
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80116bc:	68bb      	ldr	r3, [r7, #8]
 80116be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d00d      	beq.n	80116e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	1c53      	adds	r3, r2, #1
 80116ca:	613b      	str	r3, [r7, #16]
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	1c59      	adds	r1, r3, #1
 80116d0:	6179      	str	r1, [r7, #20]
 80116d2:	7812      	ldrb	r2, [r2, #0]
 80116d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	3b01      	subs	r3, #1
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1f1      	bne.n	80116c6 <mem_cpy+0x1a>
	}
}
 80116e2:	bf00      	nop
 80116e4:	371c      	adds	r7, #28
 80116e6:	46bd      	mov	sp, r7
 80116e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ec:	4770      	bx	lr

080116ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80116ee:	b480      	push	{r7}
 80116f0:	b087      	sub	sp, #28
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	60f8      	str	r0, [r7, #12]
 80116f6:	60b9      	str	r1, [r7, #8]
 80116f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	1c5a      	adds	r2, r3, #1
 8011702:	617a      	str	r2, [r7, #20]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	b2d2      	uxtb	r2, r2
 8011708:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	3b01      	subs	r3, #1
 801170e:	607b      	str	r3, [r7, #4]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d1f3      	bne.n	80116fe <mem_set+0x10>
}
 8011716:	bf00      	nop
 8011718:	371c      	adds	r7, #28
 801171a:	46bd      	mov	sp, r7
 801171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011720:	4770      	bx	lr

08011722 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011722:	b480      	push	{r7}
 8011724:	b089      	sub	sp, #36	; 0x24
 8011726:	af00      	add	r7, sp, #0
 8011728:	60f8      	str	r0, [r7, #12]
 801172a:	60b9      	str	r1, [r7, #8]
 801172c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	61fb      	str	r3, [r7, #28]
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	1c5a      	adds	r2, r3, #1
 801173e:	61fa      	str	r2, [r7, #28]
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	4619      	mov	r1, r3
 8011744:	69bb      	ldr	r3, [r7, #24]
 8011746:	1c5a      	adds	r2, r3, #1
 8011748:	61ba      	str	r2, [r7, #24]
 801174a:	781b      	ldrb	r3, [r3, #0]
 801174c:	1acb      	subs	r3, r1, r3
 801174e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3b01      	subs	r3, #1
 8011754:	607b      	str	r3, [r7, #4]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <mem_cmp+0x40>
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d0eb      	beq.n	801173a <mem_cmp+0x18>

	return r;
 8011762:	697b      	ldr	r3, [r7, #20]
}
 8011764:	4618      	mov	r0, r3
 8011766:	3724      	adds	r7, #36	; 0x24
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801177a:	e002      	b.n	8011782 <chk_chr+0x12>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	3301      	adds	r3, #1
 8011780:	607b      	str	r3, [r7, #4]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	781b      	ldrb	r3, [r3, #0]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d005      	beq.n	8011796 <chk_chr+0x26>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	4293      	cmp	r3, r2
 8011794:	d1f2      	bne.n	801177c <chk_chr+0xc>
	return *str;
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	781b      	ldrb	r3, [r3, #0]
}
 801179a:	4618      	mov	r0, r3
 801179c:	370c      	adds	r7, #12
 801179e:	46bd      	mov	sp, r7
 80117a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a4:	4770      	bx	lr
	...

080117a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b085      	sub	sp, #20
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
 80117b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117b2:	2300      	movs	r3, #0
 80117b4:	60bb      	str	r3, [r7, #8]
 80117b6:	68bb      	ldr	r3, [r7, #8]
 80117b8:	60fb      	str	r3, [r7, #12]
 80117ba:	e029      	b.n	8011810 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80117bc:	4a27      	ldr	r2, [pc, #156]	; (801185c <chk_lock+0xb4>)
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	011b      	lsls	r3, r3, #4
 80117c2:	4413      	add	r3, r2
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d01d      	beq.n	8011806 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117ca:	4a24      	ldr	r2, [pc, #144]	; (801185c <chk_lock+0xb4>)
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	011b      	lsls	r3, r3, #4
 80117d0:	4413      	add	r3, r2
 80117d2:	681a      	ldr	r2, [r3, #0]
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	429a      	cmp	r2, r3
 80117da:	d116      	bne.n	801180a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80117dc:	4a1f      	ldr	r2, [pc, #124]	; (801185c <chk_lock+0xb4>)
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	011b      	lsls	r3, r3, #4
 80117e2:	4413      	add	r3, r2
 80117e4:	3304      	adds	r3, #4
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117ec:	429a      	cmp	r2, r3
 80117ee:	d10c      	bne.n	801180a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80117f0:	4a1a      	ldr	r2, [pc, #104]	; (801185c <chk_lock+0xb4>)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	011b      	lsls	r3, r3, #4
 80117f6:	4413      	add	r3, r2
 80117f8:	3308      	adds	r3, #8
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011800:	429a      	cmp	r2, r3
 8011802:	d102      	bne.n	801180a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011804:	e007      	b.n	8011816 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011806:	2301      	movs	r3, #1
 8011808:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	3301      	adds	r3, #1
 801180e:	60fb      	str	r3, [r7, #12]
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	2b01      	cmp	r3, #1
 8011814:	d9d2      	bls.n	80117bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2b02      	cmp	r3, #2
 801181a:	d109      	bne.n	8011830 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d102      	bne.n	8011828 <chk_lock+0x80>
 8011822:	683b      	ldr	r3, [r7, #0]
 8011824:	2b02      	cmp	r3, #2
 8011826:	d101      	bne.n	801182c <chk_lock+0x84>
 8011828:	2300      	movs	r3, #0
 801182a:	e010      	b.n	801184e <chk_lock+0xa6>
 801182c:	2312      	movs	r3, #18
 801182e:	e00e      	b.n	801184e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d108      	bne.n	8011848 <chk_lock+0xa0>
 8011836:	4a09      	ldr	r2, [pc, #36]	; (801185c <chk_lock+0xb4>)
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	011b      	lsls	r3, r3, #4
 801183c:	4413      	add	r3, r2
 801183e:	330c      	adds	r3, #12
 8011840:	881b      	ldrh	r3, [r3, #0]
 8011842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011846:	d101      	bne.n	801184c <chk_lock+0xa4>
 8011848:	2310      	movs	r3, #16
 801184a:	e000      	b.n	801184e <chk_lock+0xa6>
 801184c:	2300      	movs	r3, #0
}
 801184e:	4618      	mov	r0, r3
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	200422cc 	.word	0x200422cc

08011860 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011860:	b480      	push	{r7}
 8011862:	b083      	sub	sp, #12
 8011864:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011866:	2300      	movs	r3, #0
 8011868:	607b      	str	r3, [r7, #4]
 801186a:	e002      	b.n	8011872 <enq_lock+0x12>
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	3301      	adds	r3, #1
 8011870:	607b      	str	r3, [r7, #4]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2b01      	cmp	r3, #1
 8011876:	d806      	bhi.n	8011886 <enq_lock+0x26>
 8011878:	4a09      	ldr	r2, [pc, #36]	; (80118a0 <enq_lock+0x40>)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	011b      	lsls	r3, r3, #4
 801187e:	4413      	add	r3, r2
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d1f2      	bne.n	801186c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	2b02      	cmp	r3, #2
 801188a:	bf14      	ite	ne
 801188c:	2301      	movne	r3, #1
 801188e:	2300      	moveq	r3, #0
 8011890:	b2db      	uxtb	r3, r3
}
 8011892:	4618      	mov	r0, r3
 8011894:	370c      	adds	r7, #12
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	200422cc 	.word	0x200422cc

080118a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118ae:	2300      	movs	r3, #0
 80118b0:	60fb      	str	r3, [r7, #12]
 80118b2:	e01f      	b.n	80118f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80118b4:	4a41      	ldr	r2, [pc, #260]	; (80119bc <inc_lock+0x118>)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	011b      	lsls	r3, r3, #4
 80118ba:	4413      	add	r3, r2
 80118bc:	681a      	ldr	r2, [r3, #0]
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	429a      	cmp	r2, r3
 80118c4:	d113      	bne.n	80118ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80118c6:	4a3d      	ldr	r2, [pc, #244]	; (80119bc <inc_lock+0x118>)
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	011b      	lsls	r3, r3, #4
 80118cc:	4413      	add	r3, r2
 80118ce:	3304      	adds	r3, #4
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d109      	bne.n	80118ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80118da:	4a38      	ldr	r2, [pc, #224]	; (80119bc <inc_lock+0x118>)
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	011b      	lsls	r3, r3, #4
 80118e0:	4413      	add	r3, r2
 80118e2:	3308      	adds	r3, #8
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d006      	beq.n	80118fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	3301      	adds	r3, #1
 80118f2:	60fb      	str	r3, [r7, #12]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d9dc      	bls.n	80118b4 <inc_lock+0x10>
 80118fa:	e000      	b.n	80118fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80118fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	2b02      	cmp	r3, #2
 8011902:	d132      	bne.n	801196a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011904:	2300      	movs	r3, #0
 8011906:	60fb      	str	r3, [r7, #12]
 8011908:	e002      	b.n	8011910 <inc_lock+0x6c>
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	3301      	adds	r3, #1
 801190e:	60fb      	str	r3, [r7, #12]
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	2b01      	cmp	r3, #1
 8011914:	d806      	bhi.n	8011924 <inc_lock+0x80>
 8011916:	4a29      	ldr	r2, [pc, #164]	; (80119bc <inc_lock+0x118>)
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	011b      	lsls	r3, r3, #4
 801191c:	4413      	add	r3, r2
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d1f2      	bne.n	801190a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	2b02      	cmp	r3, #2
 8011928:	d101      	bne.n	801192e <inc_lock+0x8a>
 801192a:	2300      	movs	r3, #0
 801192c:	e040      	b.n	80119b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681a      	ldr	r2, [r3, #0]
 8011932:	4922      	ldr	r1, [pc, #136]	; (80119bc <inc_lock+0x118>)
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	011b      	lsls	r3, r3, #4
 8011938:	440b      	add	r3, r1
 801193a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	689a      	ldr	r2, [r3, #8]
 8011940:	491e      	ldr	r1, [pc, #120]	; (80119bc <inc_lock+0x118>)
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	011b      	lsls	r3, r3, #4
 8011946:	440b      	add	r3, r1
 8011948:	3304      	adds	r3, #4
 801194a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	695a      	ldr	r2, [r3, #20]
 8011950:	491a      	ldr	r1, [pc, #104]	; (80119bc <inc_lock+0x118>)
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	011b      	lsls	r3, r3, #4
 8011956:	440b      	add	r3, r1
 8011958:	3308      	adds	r3, #8
 801195a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801195c:	4a17      	ldr	r2, [pc, #92]	; (80119bc <inc_lock+0x118>)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	011b      	lsls	r3, r3, #4
 8011962:	4413      	add	r3, r2
 8011964:	330c      	adds	r3, #12
 8011966:	2200      	movs	r2, #0
 8011968:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d009      	beq.n	8011984 <inc_lock+0xe0>
 8011970:	4a12      	ldr	r2, [pc, #72]	; (80119bc <inc_lock+0x118>)
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	011b      	lsls	r3, r3, #4
 8011976:	4413      	add	r3, r2
 8011978:	330c      	adds	r3, #12
 801197a:	881b      	ldrh	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d001      	beq.n	8011984 <inc_lock+0xe0>
 8011980:	2300      	movs	r3, #0
 8011982:	e015      	b.n	80119b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d108      	bne.n	801199c <inc_lock+0xf8>
 801198a:	4a0c      	ldr	r2, [pc, #48]	; (80119bc <inc_lock+0x118>)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	011b      	lsls	r3, r3, #4
 8011990:	4413      	add	r3, r2
 8011992:	330c      	adds	r3, #12
 8011994:	881b      	ldrh	r3, [r3, #0]
 8011996:	3301      	adds	r3, #1
 8011998:	b29a      	uxth	r2, r3
 801199a:	e001      	b.n	80119a0 <inc_lock+0xfc>
 801199c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119a0:	4906      	ldr	r1, [pc, #24]	; (80119bc <inc_lock+0x118>)
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	011b      	lsls	r3, r3, #4
 80119a6:	440b      	add	r3, r1
 80119a8:	330c      	adds	r3, #12
 80119aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	3301      	adds	r3, #1
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3714      	adds	r7, #20
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	200422cc 	.word	0x200422cc

080119c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80119c0:	b480      	push	{r7}
 80119c2:	b085      	sub	sp, #20
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	3b01      	subs	r3, #1
 80119cc:	607b      	str	r3, [r7, #4]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d825      	bhi.n	8011a20 <dec_lock+0x60>
		n = Files[i].ctr;
 80119d4:	4a17      	ldr	r2, [pc, #92]	; (8011a34 <dec_lock+0x74>)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	011b      	lsls	r3, r3, #4
 80119da:	4413      	add	r3, r2
 80119dc:	330c      	adds	r3, #12
 80119de:	881b      	ldrh	r3, [r3, #0]
 80119e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80119e2:	89fb      	ldrh	r3, [r7, #14]
 80119e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119e8:	d101      	bne.n	80119ee <dec_lock+0x2e>
 80119ea:	2300      	movs	r3, #0
 80119ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80119ee:	89fb      	ldrh	r3, [r7, #14]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d002      	beq.n	80119fa <dec_lock+0x3a>
 80119f4:	89fb      	ldrh	r3, [r7, #14]
 80119f6:	3b01      	subs	r3, #1
 80119f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80119fa:	4a0e      	ldr	r2, [pc, #56]	; (8011a34 <dec_lock+0x74>)
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	011b      	lsls	r3, r3, #4
 8011a00:	4413      	add	r3, r2
 8011a02:	330c      	adds	r3, #12
 8011a04:	89fa      	ldrh	r2, [r7, #14]
 8011a06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a08:	89fb      	ldrh	r3, [r7, #14]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d105      	bne.n	8011a1a <dec_lock+0x5a>
 8011a0e:	4a09      	ldr	r2, [pc, #36]	; (8011a34 <dec_lock+0x74>)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	011b      	lsls	r3, r3, #4
 8011a14:	4413      	add	r3, r2
 8011a16:	2200      	movs	r2, #0
 8011a18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	737b      	strb	r3, [r7, #13]
 8011a1e:	e001      	b.n	8011a24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a20:	2302      	movs	r3, #2
 8011a22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a24:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	200422cc 	.word	0x200422cc

08011a38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b085      	sub	sp, #20
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011a40:	2300      	movs	r3, #0
 8011a42:	60fb      	str	r3, [r7, #12]
 8011a44:	e010      	b.n	8011a68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a46:	4a0d      	ldr	r2, [pc, #52]	; (8011a7c <clear_lock+0x44>)
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	011b      	lsls	r3, r3, #4
 8011a4c:	4413      	add	r3, r2
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d105      	bne.n	8011a62 <clear_lock+0x2a>
 8011a56:	4a09      	ldr	r2, [pc, #36]	; (8011a7c <clear_lock+0x44>)
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	011b      	lsls	r3, r3, #4
 8011a5c:	4413      	add	r3, r2
 8011a5e:	2200      	movs	r2, #0
 8011a60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	3301      	adds	r3, #1
 8011a66:	60fb      	str	r3, [r7, #12]
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d9eb      	bls.n	8011a46 <clear_lock+0xe>
	}
}
 8011a6e:	bf00      	nop
 8011a70:	3714      	adds	r7, #20
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	200422cc 	.word	0x200422cc

08011a80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b086      	sub	sp, #24
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	78db      	ldrb	r3, [r3, #3]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d034      	beq.n	8011afe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	7858      	ldrb	r0, [r3, #1]
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	697a      	ldr	r2, [r7, #20]
 8011aa8:	f7ff fd40 	bl	801152c <disk_write>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d002      	beq.n	8011ab8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	73fb      	strb	r3, [r7, #15]
 8011ab6:	e022      	b.n	8011afe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2200      	movs	r2, #0
 8011abc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ac2:	697a      	ldr	r2, [r7, #20]
 8011ac4:	1ad2      	subs	r2, r2, r3
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	6a1b      	ldr	r3, [r3, #32]
 8011aca:	429a      	cmp	r2, r3
 8011acc:	d217      	bcs.n	8011afe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	789b      	ldrb	r3, [r3, #2]
 8011ad2:	613b      	str	r3, [r7, #16]
 8011ad4:	e010      	b.n	8011af8 <sync_window+0x78>
					wsect += fs->fsize;
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	697a      	ldr	r2, [r7, #20]
 8011adc:	4413      	add	r3, r2
 8011ade:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	7858      	ldrb	r0, [r3, #1]
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011aea:	2301      	movs	r3, #1
 8011aec:	697a      	ldr	r2, [r7, #20]
 8011aee:	f7ff fd1d 	bl	801152c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	3b01      	subs	r3, #1
 8011af6:	613b      	str	r3, [r7, #16]
 8011af8:	693b      	ldr	r3, [r7, #16]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d8eb      	bhi.n	8011ad6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b00:	4618      	mov	r0, r3
 8011b02:	3718      	adds	r7, #24
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd80      	pop	{r7, pc}

08011b08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b08:	b580      	push	{r7, lr}
 8011b0a:	b084      	sub	sp, #16
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b12:	2300      	movs	r3, #0
 8011b14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b1a:	683a      	ldr	r2, [r7, #0]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d01b      	beq.n	8011b58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b20:	6878      	ldr	r0, [r7, #4]
 8011b22:	f7ff ffad 	bl	8011a80 <sync_window>
 8011b26:	4603      	mov	r3, r0
 8011b28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b2a:	7bfb      	ldrb	r3, [r7, #15]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d113      	bne.n	8011b58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	7858      	ldrb	r0, [r3, #1]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	683a      	ldr	r2, [r7, #0]
 8011b3e:	f7ff fcd5 	bl	80114ec <disk_read>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d004      	beq.n	8011b52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011b48:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011b4e:	2301      	movs	r3, #1
 8011b50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	683a      	ldr	r2, [r7, #0]
 8011b56:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3710      	adds	r7, #16
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
	...

08011b64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011b6c:	6878      	ldr	r0, [r7, #4]
 8011b6e:	f7ff ff87 	bl	8011a80 <sync_window>
 8011b72:	4603      	mov	r3, r0
 8011b74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b76:	7bfb      	ldrb	r3, [r7, #15]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d159      	bne.n	8011c30 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	2b03      	cmp	r3, #3
 8011b82:	d149      	bne.n	8011c18 <sync_fs+0xb4>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	791b      	ldrb	r3, [r3, #4]
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	d145      	bne.n	8011c18 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	899b      	ldrh	r3, [r3, #12]
 8011b96:	461a      	mov	r2, r3
 8011b98:	2100      	movs	r1, #0
 8011b9a:	f7ff fda8 	bl	80116ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	3338      	adds	r3, #56	; 0x38
 8011ba2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011ba6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7ff fd37 	bl	801161e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	3338      	adds	r3, #56	; 0x38
 8011bb4:	4921      	ldr	r1, [pc, #132]	; (8011c3c <sync_fs+0xd8>)
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7ff fd4c 	bl	8011654 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	3338      	adds	r3, #56	; 0x38
 8011bc0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011bc4:	491e      	ldr	r1, [pc, #120]	; (8011c40 <sync_fs+0xdc>)
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f7ff fd44 	bl	8011654 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3338      	adds	r3, #56	; 0x38
 8011bd0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	4619      	mov	r1, r3
 8011bda:	4610      	mov	r0, r2
 8011bdc:	f7ff fd3a 	bl	8011654 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	3338      	adds	r3, #56	; 0x38
 8011be4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	691b      	ldr	r3, [r3, #16]
 8011bec:	4619      	mov	r1, r3
 8011bee:	4610      	mov	r0, r2
 8011bf0:	f7ff fd30 	bl	8011654 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	7858      	ldrb	r0, [r3, #1]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c0c:	2301      	movs	r3, #1
 8011c0e:	f7ff fc8d 	bl	801152c <disk_write>
			fs->fsi_flag = 0;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	2200      	movs	r2, #0
 8011c16:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	785b      	ldrb	r3, [r3, #1]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	2100      	movs	r1, #0
 8011c20:	4618      	mov	r0, r3
 8011c22:	f7ff fca3 	bl	801156c <disk_ioctl>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d001      	beq.n	8011c30 <sync_fs+0xcc>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3710      	adds	r7, #16
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	41615252 	.word	0x41615252
 8011c40:	61417272 	.word	0x61417272

08011c44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
 8011c4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	3b02      	subs	r3, #2
 8011c52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	69db      	ldr	r3, [r3, #28]
 8011c58:	3b02      	subs	r3, #2
 8011c5a:	683a      	ldr	r2, [r7, #0]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d301      	bcc.n	8011c64 <clust2sect+0x20>
 8011c60:	2300      	movs	r3, #0
 8011c62:	e008      	b.n	8011c76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	895b      	ldrh	r3, [r3, #10]
 8011c68:	461a      	mov	r2, r3
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	fb03 f202 	mul.w	r2, r3, r2
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c74:	4413      	add	r3, r2
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	370c      	adds	r7, #12
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr

08011c82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b086      	sub	sp, #24
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	6078      	str	r0, [r7, #4]
 8011c8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	2b01      	cmp	r3, #1
 8011c96:	d904      	bls.n	8011ca2 <get_fat+0x20>
 8011c98:	693b      	ldr	r3, [r7, #16]
 8011c9a:	69db      	ldr	r3, [r3, #28]
 8011c9c:	683a      	ldr	r2, [r7, #0]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d302      	bcc.n	8011ca8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	617b      	str	r3, [r7, #20]
 8011ca6:	e0b7      	b.n	8011e18 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	2b02      	cmp	r3, #2
 8011cb4:	d05a      	beq.n	8011d6c <get_fat+0xea>
 8011cb6:	2b03      	cmp	r3, #3
 8011cb8:	d07d      	beq.n	8011db6 <get_fat+0x134>
 8011cba:	2b01      	cmp	r3, #1
 8011cbc:	f040 80a2 	bne.w	8011e04 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	60fb      	str	r3, [r7, #12]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	085b      	lsrs	r3, r3, #1
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	4413      	add	r3, r2
 8011ccc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	4619      	mov	r1, r3
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cde:	4413      	add	r3, r2
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	6938      	ldr	r0, [r7, #16]
 8011ce4:	f7ff ff10 	bl	8011b08 <move_window>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f040 808d 	bne.w	8011e0a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	60fa      	str	r2, [r7, #12]
 8011cf6:	693a      	ldr	r2, [r7, #16]
 8011cf8:	8992      	ldrh	r2, [r2, #12]
 8011cfa:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cfe:	fb02 f201 	mul.w	r2, r2, r1
 8011d02:	1a9b      	subs	r3, r3, r2
 8011d04:	693a      	ldr	r2, [r7, #16]
 8011d06:	4413      	add	r3, r2
 8011d08:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	899b      	ldrh	r3, [r3, #12]
 8011d16:	4619      	mov	r1, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d1e:	4413      	add	r3, r2
 8011d20:	4619      	mov	r1, r3
 8011d22:	6938      	ldr	r0, [r7, #16]
 8011d24:	f7ff fef0 	bl	8011b08 <move_window>
 8011d28:	4603      	mov	r3, r0
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d16f      	bne.n	8011e0e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	899b      	ldrh	r3, [r3, #12]
 8011d32:	461a      	mov	r2, r3
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d3a:	fb02 f201 	mul.w	r2, r2, r1
 8011d3e:	1a9b      	subs	r3, r3, r2
 8011d40:	693a      	ldr	r2, [r7, #16]
 8011d42:	4413      	add	r3, r2
 8011d44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d48:	021b      	lsls	r3, r3, #8
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	4313      	orrs	r3, r2
 8011d50:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	f003 0301 	and.w	r3, r3, #1
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d002      	beq.n	8011d62 <get_fat+0xe0>
 8011d5c:	68bb      	ldr	r3, [r7, #8]
 8011d5e:	091b      	lsrs	r3, r3, #4
 8011d60:	e002      	b.n	8011d68 <get_fat+0xe6>
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d68:	617b      	str	r3, [r7, #20]
			break;
 8011d6a:	e055      	b.n	8011e18 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d6c:	693b      	ldr	r3, [r7, #16]
 8011d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	899b      	ldrh	r3, [r3, #12]
 8011d74:	085b      	lsrs	r3, r3, #1
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	4619      	mov	r1, r3
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d80:	4413      	add	r3, r2
 8011d82:	4619      	mov	r1, r3
 8011d84:	6938      	ldr	r0, [r7, #16]
 8011d86:	f7ff febf 	bl	8011b08 <move_window>
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d140      	bne.n	8011e12 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011d90:	693b      	ldr	r3, [r7, #16]
 8011d92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	005b      	lsls	r3, r3, #1
 8011d9a:	693a      	ldr	r2, [r7, #16]
 8011d9c:	8992      	ldrh	r2, [r2, #12]
 8011d9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011da2:	fb02 f200 	mul.w	r2, r2, r0
 8011da6:	1a9b      	subs	r3, r3, r2
 8011da8:	440b      	add	r3, r1
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7ff fbfc 	bl	80115a8 <ld_word>
 8011db0:	4603      	mov	r3, r0
 8011db2:	617b      	str	r3, [r7, #20]
			break;
 8011db4:	e030      	b.n	8011e18 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	899b      	ldrh	r3, [r3, #12]
 8011dbe:	089b      	lsrs	r3, r3, #2
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dca:	4413      	add	r3, r2
 8011dcc:	4619      	mov	r1, r3
 8011dce:	6938      	ldr	r0, [r7, #16]
 8011dd0:	f7ff fe9a 	bl	8011b08 <move_window>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d11d      	bne.n	8011e16 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	693a      	ldr	r2, [r7, #16]
 8011de6:	8992      	ldrh	r2, [r2, #12]
 8011de8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dec:	fb02 f200 	mul.w	r2, r2, r0
 8011df0:	1a9b      	subs	r3, r3, r2
 8011df2:	440b      	add	r3, r1
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7ff fbef 	bl	80115d8 <ld_dword>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011e00:	617b      	str	r3, [r7, #20]
			break;
 8011e02:	e009      	b.n	8011e18 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e04:	2301      	movs	r3, #1
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e006      	b.n	8011e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e0a:	bf00      	nop
 8011e0c:	e004      	b.n	8011e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e0e:	bf00      	nop
 8011e10:	e002      	b.n	8011e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e12:	bf00      	nop
 8011e14:	e000      	b.n	8011e18 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e16:	bf00      	nop
		}
	}

	return val;
 8011e18:	697b      	ldr	r3, [r7, #20]
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3718      	adds	r7, #24
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e22:	b590      	push	{r4, r7, lr}
 8011e24:	b089      	sub	sp, #36	; 0x24
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	60f8      	str	r0, [r7, #12]
 8011e2a:	60b9      	str	r1, [r7, #8]
 8011e2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e2e:	2302      	movs	r3, #2
 8011e30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	f240 8106 	bls.w	8012046 <put_fat+0x224>
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	69db      	ldr	r3, [r3, #28]
 8011e3e:	68ba      	ldr	r2, [r7, #8]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	f080 8100 	bcs.w	8012046 <put_fat+0x224>
		switch (fs->fs_type) {
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	781b      	ldrb	r3, [r3, #0]
 8011e4a:	2b02      	cmp	r3, #2
 8011e4c:	f000 8088 	beq.w	8011f60 <put_fat+0x13e>
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	f000 80b0 	beq.w	8011fb6 <put_fat+0x194>
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	f040 80f5 	bne.w	8012046 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	61bb      	str	r3, [r7, #24]
 8011e60:	69bb      	ldr	r3, [r7, #24]
 8011e62:	085b      	lsrs	r3, r3, #1
 8011e64:	69ba      	ldr	r2, [r7, #24]
 8011e66:	4413      	add	r3, r2
 8011e68:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e6a:	68fb      	ldr	r3, [r7, #12]
 8011e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	899b      	ldrh	r3, [r3, #12]
 8011e72:	4619      	mov	r1, r3
 8011e74:	69bb      	ldr	r3, [r7, #24]
 8011e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e7a:	4413      	add	r3, r2
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	68f8      	ldr	r0, [r7, #12]
 8011e80:	f7ff fe42 	bl	8011b08 <move_window>
 8011e84:	4603      	mov	r3, r0
 8011e86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e88:	7ffb      	ldrb	r3, [r7, #31]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	f040 80d4 	bne.w	8012038 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e96:	69bb      	ldr	r3, [r7, #24]
 8011e98:	1c5a      	adds	r2, r3, #1
 8011e9a:	61ba      	str	r2, [r7, #24]
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	8992      	ldrh	r2, [r2, #12]
 8011ea0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ea4:	fb02 f200 	mul.w	r2, r2, r0
 8011ea8:	1a9b      	subs	r3, r3, r2
 8011eaa:	440b      	add	r3, r1
 8011eac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	f003 0301 	and.w	r3, r3, #1
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d00d      	beq.n	8011ed4 <put_fat+0xb2>
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	b25b      	sxtb	r3, r3
 8011ebe:	f003 030f 	and.w	r3, r3, #15
 8011ec2:	b25a      	sxtb	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	011b      	lsls	r3, r3, #4
 8011eca:	b25b      	sxtb	r3, r3
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	b25b      	sxtb	r3, r3
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	e001      	b.n	8011ed8 <put_fat+0xb6>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	697a      	ldr	r2, [r7, #20]
 8011eda:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2201      	movs	r2, #1
 8011ee0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	899b      	ldrh	r3, [r3, #12]
 8011eea:	4619      	mov	r1, r3
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ef2:	4413      	add	r3, r2
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	68f8      	ldr	r0, [r7, #12]
 8011ef8:	f7ff fe06 	bl	8011b08 <move_window>
 8011efc:	4603      	mov	r3, r0
 8011efe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f00:	7ffb      	ldrb	r3, [r7, #31]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	f040 809a 	bne.w	801203c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	899b      	ldrh	r3, [r3, #12]
 8011f12:	461a      	mov	r2, r3
 8011f14:	69bb      	ldr	r3, [r7, #24]
 8011f16:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f1a:	fb02 f200 	mul.w	r2, r2, r0
 8011f1e:	1a9b      	subs	r3, r3, r2
 8011f20:	440b      	add	r3, r1
 8011f22:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	f003 0301 	and.w	r3, r3, #1
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d003      	beq.n	8011f36 <put_fat+0x114>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	091b      	lsrs	r3, r3, #4
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	e00e      	b.n	8011f54 <put_fat+0x132>
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	b25b      	sxtb	r3, r3
 8011f3c:	f023 030f 	bic.w	r3, r3, #15
 8011f40:	b25a      	sxtb	r2, r3
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	0a1b      	lsrs	r3, r3, #8
 8011f46:	b25b      	sxtb	r3, r3
 8011f48:	f003 030f 	and.w	r3, r3, #15
 8011f4c:	b25b      	sxtb	r3, r3
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	b25b      	sxtb	r3, r3
 8011f52:	b2db      	uxtb	r3, r3
 8011f54:	697a      	ldr	r2, [r7, #20]
 8011f56:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2201      	movs	r2, #1
 8011f5c:	70da      	strb	r2, [r3, #3]
			break;
 8011f5e:	e072      	b.n	8012046 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	899b      	ldrh	r3, [r3, #12]
 8011f68:	085b      	lsrs	r3, r3, #1
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	4619      	mov	r1, r3
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f74:	4413      	add	r3, r2
 8011f76:	4619      	mov	r1, r3
 8011f78:	68f8      	ldr	r0, [r7, #12]
 8011f7a:	f7ff fdc5 	bl	8011b08 <move_window>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f82:	7ffb      	ldrb	r3, [r7, #31]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d15b      	bne.n	8012040 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f8e:	68bb      	ldr	r3, [r7, #8]
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	8992      	ldrh	r2, [r2, #12]
 8011f96:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f9a:	fb02 f200 	mul.w	r2, r2, r0
 8011f9e:	1a9b      	subs	r3, r3, r2
 8011fa0:	440b      	add	r3, r1
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	b292      	uxth	r2, r2
 8011fa6:	4611      	mov	r1, r2
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7ff fb38 	bl	801161e <st_word>
			fs->wflag = 1;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	2201      	movs	r2, #1
 8011fb2:	70da      	strb	r2, [r3, #3]
			break;
 8011fb4:	e047      	b.n	8012046 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	899b      	ldrh	r3, [r3, #12]
 8011fbe:	089b      	lsrs	r3, r3, #2
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fca:	4413      	add	r3, r2
 8011fcc:	4619      	mov	r1, r3
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	f7ff fd9a 	bl	8011b08 <move_window>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fd8:	7ffb      	ldrb	r3, [r7, #31]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d132      	bne.n	8012044 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	68fa      	ldr	r2, [r7, #12]
 8011ff0:	8992      	ldrh	r2, [r2, #12]
 8011ff2:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ff6:	fb02 f200 	mul.w	r2, r2, r0
 8011ffa:	1a9b      	subs	r3, r3, r2
 8011ffc:	440b      	add	r3, r1
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7ff faea 	bl	80115d8 <ld_dword>
 8012004:	4603      	mov	r3, r0
 8012006:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801200a:	4323      	orrs	r3, r4
 801200c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012014:	68bb      	ldr	r3, [r7, #8]
 8012016:	009b      	lsls	r3, r3, #2
 8012018:	68fa      	ldr	r2, [r7, #12]
 801201a:	8992      	ldrh	r2, [r2, #12]
 801201c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012020:	fb02 f200 	mul.w	r2, r2, r0
 8012024:	1a9b      	subs	r3, r3, r2
 8012026:	440b      	add	r3, r1
 8012028:	6879      	ldr	r1, [r7, #4]
 801202a:	4618      	mov	r0, r3
 801202c:	f7ff fb12 	bl	8011654 <st_dword>
			fs->wflag = 1;
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2201      	movs	r2, #1
 8012034:	70da      	strb	r2, [r3, #3]
			break;
 8012036:	e006      	b.n	8012046 <put_fat+0x224>
			if (res != FR_OK) break;
 8012038:	bf00      	nop
 801203a:	e004      	b.n	8012046 <put_fat+0x224>
			if (res != FR_OK) break;
 801203c:	bf00      	nop
 801203e:	e002      	b.n	8012046 <put_fat+0x224>
			if (res != FR_OK) break;
 8012040:	bf00      	nop
 8012042:	e000      	b.n	8012046 <put_fat+0x224>
			if (res != FR_OK) break;
 8012044:	bf00      	nop
		}
	}
	return res;
 8012046:	7ffb      	ldrb	r3, [r7, #31]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3724      	adds	r7, #36	; 0x24
 801204c:	46bd      	mov	sp, r7
 801204e:	bd90      	pop	{r4, r7, pc}

08012050 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af00      	add	r7, sp, #0
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	60b9      	str	r1, [r7, #8]
 801205a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801205c:	2300      	movs	r3, #0
 801205e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	2b01      	cmp	r3, #1
 801206a:	d904      	bls.n	8012076 <remove_chain+0x26>
 801206c:	69bb      	ldr	r3, [r7, #24]
 801206e:	69db      	ldr	r3, [r3, #28]
 8012070:	68ba      	ldr	r2, [r7, #8]
 8012072:	429a      	cmp	r2, r3
 8012074:	d301      	bcc.n	801207a <remove_chain+0x2a>
 8012076:	2302      	movs	r3, #2
 8012078:	e04b      	b.n	8012112 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00c      	beq.n	801209a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012080:	f04f 32ff 	mov.w	r2, #4294967295
 8012084:	6879      	ldr	r1, [r7, #4]
 8012086:	69b8      	ldr	r0, [r7, #24]
 8012088:	f7ff fecb 	bl	8011e22 <put_fat>
 801208c:	4603      	mov	r3, r0
 801208e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012090:	7ffb      	ldrb	r3, [r7, #31]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d001      	beq.n	801209a <remove_chain+0x4a>
 8012096:	7ffb      	ldrb	r3, [r7, #31]
 8012098:	e03b      	b.n	8012112 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801209a:	68b9      	ldr	r1, [r7, #8]
 801209c:	68f8      	ldr	r0, [r7, #12]
 801209e:	f7ff fdf0 	bl	8011c82 <get_fat>
 80120a2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d031      	beq.n	801210e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	2b01      	cmp	r3, #1
 80120ae:	d101      	bne.n	80120b4 <remove_chain+0x64>
 80120b0:	2302      	movs	r3, #2
 80120b2:	e02e      	b.n	8012112 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120b4:	697b      	ldr	r3, [r7, #20]
 80120b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ba:	d101      	bne.n	80120c0 <remove_chain+0x70>
 80120bc:	2301      	movs	r3, #1
 80120be:	e028      	b.n	8012112 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120c0:	2200      	movs	r2, #0
 80120c2:	68b9      	ldr	r1, [r7, #8]
 80120c4:	69b8      	ldr	r0, [r7, #24]
 80120c6:	f7ff feac 	bl	8011e22 <put_fat>
 80120ca:	4603      	mov	r3, r0
 80120cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120ce:	7ffb      	ldrb	r3, [r7, #31]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d001      	beq.n	80120d8 <remove_chain+0x88>
 80120d4:	7ffb      	ldrb	r3, [r7, #31]
 80120d6:	e01c      	b.n	8012112 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80120d8:	69bb      	ldr	r3, [r7, #24]
 80120da:	695a      	ldr	r2, [r3, #20]
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	3b02      	subs	r3, #2
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d20b      	bcs.n	80120fe <remove_chain+0xae>
			fs->free_clst++;
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	695b      	ldr	r3, [r3, #20]
 80120ea:	1c5a      	adds	r2, r3, #1
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	791b      	ldrb	r3, [r3, #4]
 80120f4:	f043 0301 	orr.w	r3, r3, #1
 80120f8:	b2da      	uxtb	r2, r3
 80120fa:	69bb      	ldr	r3, [r7, #24]
 80120fc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	69db      	ldr	r3, [r3, #28]
 8012106:	68ba      	ldr	r2, [r7, #8]
 8012108:	429a      	cmp	r2, r3
 801210a:	d3c6      	bcc.n	801209a <remove_chain+0x4a>
 801210c:	e000      	b.n	8012110 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801210e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012110:	2300      	movs	r3, #0
}
 8012112:	4618      	mov	r0, r3
 8012114:	3720      	adds	r7, #32
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b088      	sub	sp, #32
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
 8012122:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801212a:	683b      	ldr	r3, [r7, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d10d      	bne.n	801214c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012130:	693b      	ldr	r3, [r7, #16]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d004      	beq.n	8012146 <create_chain+0x2c>
 801213c:	693b      	ldr	r3, [r7, #16]
 801213e:	69db      	ldr	r3, [r3, #28]
 8012140:	69ba      	ldr	r2, [r7, #24]
 8012142:	429a      	cmp	r2, r3
 8012144:	d31b      	bcc.n	801217e <create_chain+0x64>
 8012146:	2301      	movs	r3, #1
 8012148:	61bb      	str	r3, [r7, #24]
 801214a:	e018      	b.n	801217e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801214c:	6839      	ldr	r1, [r7, #0]
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f7ff fd97 	bl	8011c82 <get_fat>
 8012154:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	2b01      	cmp	r3, #1
 801215a:	d801      	bhi.n	8012160 <create_chain+0x46>
 801215c:	2301      	movs	r3, #1
 801215e:	e070      	b.n	8012242 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012166:	d101      	bne.n	801216c <create_chain+0x52>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	e06a      	b.n	8012242 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801216c:	693b      	ldr	r3, [r7, #16]
 801216e:	69db      	ldr	r3, [r3, #28]
 8012170:	68fa      	ldr	r2, [r7, #12]
 8012172:	429a      	cmp	r2, r3
 8012174:	d201      	bcs.n	801217a <create_chain+0x60>
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	e063      	b.n	8012242 <create_chain+0x128>
		scl = clst;
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801217e:	69bb      	ldr	r3, [r7, #24]
 8012180:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	3301      	adds	r3, #1
 8012186:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	69db      	ldr	r3, [r3, #28]
 801218c:	69fa      	ldr	r2, [r7, #28]
 801218e:	429a      	cmp	r2, r3
 8012190:	d307      	bcc.n	80121a2 <create_chain+0x88>
				ncl = 2;
 8012192:	2302      	movs	r3, #2
 8012194:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012196:	69fa      	ldr	r2, [r7, #28]
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	429a      	cmp	r2, r3
 801219c:	d901      	bls.n	80121a2 <create_chain+0x88>
 801219e:	2300      	movs	r3, #0
 80121a0:	e04f      	b.n	8012242 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121a2:	69f9      	ldr	r1, [r7, #28]
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f7ff fd6c 	bl	8011c82 <get_fat>
 80121aa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d00e      	beq.n	80121d0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d003      	beq.n	80121c0 <create_chain+0xa6>
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121be:	d101      	bne.n	80121c4 <create_chain+0xaa>
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	e03e      	b.n	8012242 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121c4:	69fa      	ldr	r2, [r7, #28]
 80121c6:	69bb      	ldr	r3, [r7, #24]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d1da      	bne.n	8012182 <create_chain+0x68>
 80121cc:	2300      	movs	r3, #0
 80121ce:	e038      	b.n	8012242 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121d0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121d2:	f04f 32ff 	mov.w	r2, #4294967295
 80121d6:	69f9      	ldr	r1, [r7, #28]
 80121d8:	6938      	ldr	r0, [r7, #16]
 80121da:	f7ff fe22 	bl	8011e22 <put_fat>
 80121de:	4603      	mov	r3, r0
 80121e0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80121e2:	7dfb      	ldrb	r3, [r7, #23]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d109      	bne.n	80121fc <create_chain+0xe2>
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d006      	beq.n	80121fc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80121ee:	69fa      	ldr	r2, [r7, #28]
 80121f0:	6839      	ldr	r1, [r7, #0]
 80121f2:	6938      	ldr	r0, [r7, #16]
 80121f4:	f7ff fe15 	bl	8011e22 <put_fat>
 80121f8:	4603      	mov	r3, r0
 80121fa:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80121fc:	7dfb      	ldrb	r3, [r7, #23]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d116      	bne.n	8012230 <create_chain+0x116>
		fs->last_clst = ncl;
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	69fa      	ldr	r2, [r7, #28]
 8012206:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012208:	693b      	ldr	r3, [r7, #16]
 801220a:	695a      	ldr	r2, [r3, #20]
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	69db      	ldr	r3, [r3, #28]
 8012210:	3b02      	subs	r3, #2
 8012212:	429a      	cmp	r2, r3
 8012214:	d804      	bhi.n	8012220 <create_chain+0x106>
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	695b      	ldr	r3, [r3, #20]
 801221a:	1e5a      	subs	r2, r3, #1
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	791b      	ldrb	r3, [r3, #4]
 8012224:	f043 0301 	orr.w	r3, r3, #1
 8012228:	b2da      	uxtb	r2, r3
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	711a      	strb	r2, [r3, #4]
 801222e:	e007      	b.n	8012240 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012230:	7dfb      	ldrb	r3, [r7, #23]
 8012232:	2b01      	cmp	r3, #1
 8012234:	d102      	bne.n	801223c <create_chain+0x122>
 8012236:	f04f 33ff 	mov.w	r3, #4294967295
 801223a:	e000      	b.n	801223e <create_chain+0x124>
 801223c:	2301      	movs	r3, #1
 801223e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012240:	69fb      	ldr	r3, [r7, #28]
}
 8012242:	4618      	mov	r0, r3
 8012244:	3720      	adds	r7, #32
 8012246:	46bd      	mov	sp, r7
 8012248:	bd80      	pop	{r7, pc}

0801224a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801224a:	b480      	push	{r7}
 801224c:	b087      	sub	sp, #28
 801224e:	af00      	add	r7, sp, #0
 8012250:	6078      	str	r0, [r7, #4]
 8012252:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801225e:	3304      	adds	r3, #4
 8012260:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	899b      	ldrh	r3, [r3, #12]
 8012266:	461a      	mov	r2, r3
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	fbb3 f3f2 	udiv	r3, r3, r2
 801226e:	68fa      	ldr	r2, [r7, #12]
 8012270:	8952      	ldrh	r2, [r2, #10]
 8012272:	fbb3 f3f2 	udiv	r3, r3, r2
 8012276:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	1d1a      	adds	r2, r3, #4
 801227c:	613a      	str	r2, [r7, #16]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d101      	bne.n	801228c <clmt_clust+0x42>
 8012288:	2300      	movs	r3, #0
 801228a:	e010      	b.n	80122ae <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801228c:	697a      	ldr	r2, [r7, #20]
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	429a      	cmp	r2, r3
 8012292:	d307      	bcc.n	80122a4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012294:	697a      	ldr	r2, [r7, #20]
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	1ad3      	subs	r3, r2, r3
 801229a:	617b      	str	r3, [r7, #20]
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	3304      	adds	r3, #4
 80122a0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122a2:	e7e9      	b.n	8012278 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80122a4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	4413      	add	r3, r2
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	371c      	adds	r7, #28
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr

080122ba <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b086      	sub	sp, #24
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
 80122c2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122d0:	d204      	bcs.n	80122dc <dir_sdi+0x22>
 80122d2:	683b      	ldr	r3, [r7, #0]
 80122d4:	f003 031f 	and.w	r3, r3, #31
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d001      	beq.n	80122e0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80122dc:	2302      	movs	r3, #2
 80122de:	e071      	b.n	80123c4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	683a      	ldr	r2, [r7, #0]
 80122e4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	689b      	ldr	r3, [r3, #8]
 80122ea:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d106      	bne.n	8012300 <dir_sdi+0x46>
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	781b      	ldrb	r3, [r3, #0]
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	d902      	bls.n	8012300 <dir_sdi+0x46>
		clst = fs->dirbase;
 80122fa:	693b      	ldr	r3, [r7, #16]
 80122fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fe:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	2b00      	cmp	r3, #0
 8012304:	d10c      	bne.n	8012320 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012306:	683b      	ldr	r3, [r7, #0]
 8012308:	095b      	lsrs	r3, r3, #5
 801230a:	693a      	ldr	r2, [r7, #16]
 801230c:	8912      	ldrh	r2, [r2, #8]
 801230e:	4293      	cmp	r3, r2
 8012310:	d301      	bcc.n	8012316 <dir_sdi+0x5c>
 8012312:	2302      	movs	r3, #2
 8012314:	e056      	b.n	80123c4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	61da      	str	r2, [r3, #28]
 801231e:	e02d      	b.n	801237c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012320:	693b      	ldr	r3, [r7, #16]
 8012322:	895b      	ldrh	r3, [r3, #10]
 8012324:	461a      	mov	r2, r3
 8012326:	693b      	ldr	r3, [r7, #16]
 8012328:	899b      	ldrh	r3, [r3, #12]
 801232a:	fb03 f302 	mul.w	r3, r3, r2
 801232e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012330:	e019      	b.n	8012366 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6979      	ldr	r1, [r7, #20]
 8012336:	4618      	mov	r0, r3
 8012338:	f7ff fca3 	bl	8011c82 <get_fat>
 801233c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012344:	d101      	bne.n	801234a <dir_sdi+0x90>
 8012346:	2301      	movs	r3, #1
 8012348:	e03c      	b.n	80123c4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d904      	bls.n	801235a <dir_sdi+0xa0>
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	69db      	ldr	r3, [r3, #28]
 8012354:	697a      	ldr	r2, [r7, #20]
 8012356:	429a      	cmp	r2, r3
 8012358:	d301      	bcc.n	801235e <dir_sdi+0xa4>
 801235a:	2302      	movs	r3, #2
 801235c:	e032      	b.n	80123c4 <dir_sdi+0x10a>
			ofs -= csz;
 801235e:	683a      	ldr	r2, [r7, #0]
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012366:	683a      	ldr	r2, [r7, #0]
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	429a      	cmp	r2, r3
 801236c:	d2e1      	bcs.n	8012332 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801236e:	6979      	ldr	r1, [r7, #20]
 8012370:	6938      	ldr	r0, [r7, #16]
 8012372:	f7ff fc67 	bl	8011c44 <clust2sect>
 8012376:	4602      	mov	r2, r0
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	697a      	ldr	r2, [r7, #20]
 8012380:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	69db      	ldr	r3, [r3, #28]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d101      	bne.n	801238e <dir_sdi+0xd4>
 801238a:	2302      	movs	r3, #2
 801238c:	e01a      	b.n	80123c4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	69da      	ldr	r2, [r3, #28]
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	899b      	ldrh	r3, [r3, #12]
 8012396:	4619      	mov	r1, r3
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	fbb3 f3f1 	udiv	r3, r3, r1
 801239e:	441a      	add	r2, r3
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123aa:	693b      	ldr	r3, [r7, #16]
 80123ac:	899b      	ldrh	r3, [r3, #12]
 80123ae:	461a      	mov	r2, r3
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80123b6:	fb02 f200 	mul.w	r2, r2, r0
 80123ba:	1a9b      	subs	r3, r3, r2
 80123bc:	18ca      	adds	r2, r1, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123c2:	2300      	movs	r3, #0
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3718      	adds	r7, #24
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b086      	sub	sp, #24
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	695b      	ldr	r3, [r3, #20]
 80123e0:	3320      	adds	r3, #32
 80123e2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	69db      	ldr	r3, [r3, #28]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d003      	beq.n	80123f4 <dir_next+0x28>
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80123f2:	d301      	bcc.n	80123f8 <dir_next+0x2c>
 80123f4:	2304      	movs	r3, #4
 80123f6:	e0bb      	b.n	8012570 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	899b      	ldrh	r3, [r3, #12]
 80123fc:	461a      	mov	r2, r3
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	fbb3 f1f2 	udiv	r1, r3, r2
 8012404:	fb02 f201 	mul.w	r2, r2, r1
 8012408:	1a9b      	subs	r3, r3, r2
 801240a:	2b00      	cmp	r3, #0
 801240c:	f040 809d 	bne.w	801254a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	69db      	ldr	r3, [r3, #28]
 8012414:	1c5a      	adds	r2, r3, #1
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	699b      	ldr	r3, [r3, #24]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d10b      	bne.n	801243a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	095b      	lsrs	r3, r3, #5
 8012426:	68fa      	ldr	r2, [r7, #12]
 8012428:	8912      	ldrh	r2, [r2, #8]
 801242a:	4293      	cmp	r3, r2
 801242c:	f0c0 808d 	bcc.w	801254a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2200      	movs	r2, #0
 8012434:	61da      	str	r2, [r3, #28]
 8012436:	2304      	movs	r3, #4
 8012438:	e09a      	b.n	8012570 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	899b      	ldrh	r3, [r3, #12]
 801243e:	461a      	mov	r2, r3
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	fbb3 f3f2 	udiv	r3, r3, r2
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	8952      	ldrh	r2, [r2, #10]
 801244a:	3a01      	subs	r2, #1
 801244c:	4013      	ands	r3, r2
 801244e:	2b00      	cmp	r3, #0
 8012450:	d17b      	bne.n	801254a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	699b      	ldr	r3, [r3, #24]
 8012458:	4619      	mov	r1, r3
 801245a:	4610      	mov	r0, r2
 801245c:	f7ff fc11 	bl	8011c82 <get_fat>
 8012460:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	2b01      	cmp	r3, #1
 8012466:	d801      	bhi.n	801246c <dir_next+0xa0>
 8012468:	2302      	movs	r3, #2
 801246a:	e081      	b.n	8012570 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012472:	d101      	bne.n	8012478 <dir_next+0xac>
 8012474:	2301      	movs	r3, #1
 8012476:	e07b      	b.n	8012570 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	69db      	ldr	r3, [r3, #28]
 801247c:	697a      	ldr	r2, [r7, #20]
 801247e:	429a      	cmp	r2, r3
 8012480:	d359      	bcc.n	8012536 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d104      	bne.n	8012492 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	61da      	str	r2, [r3, #28]
 801248e:	2304      	movs	r3, #4
 8012490:	e06e      	b.n	8012570 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	699b      	ldr	r3, [r3, #24]
 8012498:	4619      	mov	r1, r3
 801249a:	4610      	mov	r0, r2
 801249c:	f7ff fe3d 	bl	801211a <create_chain>
 80124a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80124a2:	697b      	ldr	r3, [r7, #20]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d101      	bne.n	80124ac <dir_next+0xe0>
 80124a8:	2307      	movs	r3, #7
 80124aa:	e061      	b.n	8012570 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	2b01      	cmp	r3, #1
 80124b0:	d101      	bne.n	80124b6 <dir_next+0xea>
 80124b2:	2302      	movs	r3, #2
 80124b4:	e05c      	b.n	8012570 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124b6:	697b      	ldr	r3, [r7, #20]
 80124b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124bc:	d101      	bne.n	80124c2 <dir_next+0xf6>
 80124be:	2301      	movs	r3, #1
 80124c0:	e056      	b.n	8012570 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f7ff fadc 	bl	8011a80 <sync_window>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d001      	beq.n	80124d2 <dir_next+0x106>
 80124ce:	2301      	movs	r3, #1
 80124d0:	e04e      	b.n	8012570 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	899b      	ldrh	r3, [r3, #12]
 80124dc:	461a      	mov	r2, r3
 80124de:	2100      	movs	r1, #0
 80124e0:	f7ff f905 	bl	80116ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80124e4:	2300      	movs	r3, #0
 80124e6:	613b      	str	r3, [r7, #16]
 80124e8:	6979      	ldr	r1, [r7, #20]
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f7ff fbaa 	bl	8011c44 <clust2sect>
 80124f0:	4602      	mov	r2, r0
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	635a      	str	r2, [r3, #52]	; 0x34
 80124f6:	e012      	b.n	801251e <dir_next+0x152>
						fs->wflag = 1;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	2201      	movs	r2, #1
 80124fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7ff fabe 	bl	8011a80 <sync_window>
 8012504:	4603      	mov	r3, r0
 8012506:	2b00      	cmp	r3, #0
 8012508:	d001      	beq.n	801250e <dir_next+0x142>
 801250a:	2301      	movs	r3, #1
 801250c:	e030      	b.n	8012570 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	3301      	adds	r3, #1
 8012512:	613b      	str	r3, [r7, #16]
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012518:	1c5a      	adds	r2, r3, #1
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	635a      	str	r2, [r3, #52]	; 0x34
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	895b      	ldrh	r3, [r3, #10]
 8012522:	461a      	mov	r2, r3
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	4293      	cmp	r3, r2
 8012528:	d3e6      	bcc.n	80124f8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	1ad2      	subs	r2, r2, r3
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	697a      	ldr	r2, [r7, #20]
 801253a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801253c:	6979      	ldr	r1, [r7, #20]
 801253e:	68f8      	ldr	r0, [r7, #12]
 8012540:	f7ff fb80 	bl	8011c44 <clust2sect>
 8012544:	4602      	mov	r2, r0
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	68ba      	ldr	r2, [r7, #8]
 801254e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	899b      	ldrh	r3, [r3, #12]
 801255a:	461a      	mov	r2, r3
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012562:	fb02 f200 	mul.w	r2, r2, r0
 8012566:	1a9b      	subs	r3, r3, r2
 8012568:	18ca      	adds	r2, r1, r3
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801256e:	2300      	movs	r3, #0
}
 8012570:	4618      	mov	r0, r3
 8012572:	3718      	adds	r7, #24
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b086      	sub	sp, #24
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
 8012580:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012588:	2100      	movs	r1, #0
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7ff fe95 	bl	80122ba <dir_sdi>
 8012590:	4603      	mov	r3, r0
 8012592:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012594:	7dfb      	ldrb	r3, [r7, #23]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d12b      	bne.n	80125f2 <dir_alloc+0x7a>
		n = 0;
 801259a:	2300      	movs	r3, #0
 801259c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	69db      	ldr	r3, [r3, #28]
 80125a2:	4619      	mov	r1, r3
 80125a4:	68f8      	ldr	r0, [r7, #12]
 80125a6:	f7ff faaf 	bl	8011b08 <move_window>
 80125aa:	4603      	mov	r3, r0
 80125ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125ae:	7dfb      	ldrb	r3, [r7, #23]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d11d      	bne.n	80125f0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6a1b      	ldr	r3, [r3, #32]
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	2be5      	cmp	r3, #229	; 0xe5
 80125bc:	d004      	beq.n	80125c8 <dir_alloc+0x50>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	6a1b      	ldr	r3, [r3, #32]
 80125c2:	781b      	ldrb	r3, [r3, #0]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d107      	bne.n	80125d8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	3301      	adds	r3, #1
 80125cc:	613b      	str	r3, [r7, #16]
 80125ce:	693a      	ldr	r2, [r7, #16]
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d102      	bne.n	80125dc <dir_alloc+0x64>
 80125d6:	e00c      	b.n	80125f2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80125d8:	2300      	movs	r3, #0
 80125da:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80125dc:	2101      	movs	r1, #1
 80125de:	6878      	ldr	r0, [r7, #4]
 80125e0:	f7ff fef4 	bl	80123cc <dir_next>
 80125e4:	4603      	mov	r3, r0
 80125e6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80125e8:	7dfb      	ldrb	r3, [r7, #23]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d0d7      	beq.n	801259e <dir_alloc+0x26>
 80125ee:	e000      	b.n	80125f2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80125f0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80125f2:	7dfb      	ldrb	r3, [r7, #23]
 80125f4:	2b04      	cmp	r3, #4
 80125f6:	d101      	bne.n	80125fc <dir_alloc+0x84>
 80125f8:	2307      	movs	r3, #7
 80125fa:	75fb      	strb	r3, [r7, #23]
	return res;
 80125fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125fe:	4618      	mov	r0, r3
 8012600:	3718      	adds	r7, #24
 8012602:	46bd      	mov	sp, r7
 8012604:	bd80      	pop	{r7, pc}

08012606 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012606:	b580      	push	{r7, lr}
 8012608:	b084      	sub	sp, #16
 801260a:	af00      	add	r7, sp, #0
 801260c:	6078      	str	r0, [r7, #4]
 801260e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	331a      	adds	r3, #26
 8012614:	4618      	mov	r0, r3
 8012616:	f7fe ffc7 	bl	80115a8 <ld_word>
 801261a:	4603      	mov	r3, r0
 801261c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	781b      	ldrb	r3, [r3, #0]
 8012622:	2b03      	cmp	r3, #3
 8012624:	d109      	bne.n	801263a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	3314      	adds	r3, #20
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe ffbc 	bl	80115a8 <ld_word>
 8012630:	4603      	mov	r3, r0
 8012632:	041b      	lsls	r3, r3, #16
 8012634:	68fa      	ldr	r2, [r7, #12]
 8012636:	4313      	orrs	r3, r2
 8012638:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801263a:	68fb      	ldr	r3, [r7, #12]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	331a      	adds	r3, #26
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	b292      	uxth	r2, r2
 8012658:	4611      	mov	r1, r2
 801265a:	4618      	mov	r0, r3
 801265c:	f7fe ffdf 	bl	801161e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	2b03      	cmp	r3, #3
 8012666:	d109      	bne.n	801267c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012668:	68bb      	ldr	r3, [r7, #8]
 801266a:	f103 0214 	add.w	r2, r3, #20
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	0c1b      	lsrs	r3, r3, #16
 8012672:	b29b      	uxth	r3, r3
 8012674:	4619      	mov	r1, r3
 8012676:	4610      	mov	r0, r2
 8012678:	f7fe ffd1 	bl	801161e <st_word>
	}
}
 801267c:	bf00      	nop
 801267e:	3710      	adds	r7, #16
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b086      	sub	sp, #24
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801268e:	2304      	movs	r3, #4
 8012690:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012698:	e03c      	b.n	8012714 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	69db      	ldr	r3, [r3, #28]
 801269e:	4619      	mov	r1, r3
 80126a0:	6938      	ldr	r0, [r7, #16]
 80126a2:	f7ff fa31 	bl	8011b08 <move_window>
 80126a6:	4603      	mov	r3, r0
 80126a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126aa:	7dfb      	ldrb	r3, [r7, #23]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d136      	bne.n	801271e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6a1b      	ldr	r3, [r3, #32]
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80126b8:	7bfb      	ldrb	r3, [r7, #15]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d102      	bne.n	80126c4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80126be:	2304      	movs	r3, #4
 80126c0:	75fb      	strb	r3, [r7, #23]
 80126c2:	e031      	b.n	8012728 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6a1b      	ldr	r3, [r3, #32]
 80126c8:	330b      	adds	r3, #11
 80126ca:	781b      	ldrb	r3, [r3, #0]
 80126cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126d0:	73bb      	strb	r3, [r7, #14]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	7bba      	ldrb	r2, [r7, #14]
 80126d6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80126d8:	7bfb      	ldrb	r3, [r7, #15]
 80126da:	2be5      	cmp	r3, #229	; 0xe5
 80126dc:	d011      	beq.n	8012702 <dir_read+0x7e>
 80126de:	7bfb      	ldrb	r3, [r7, #15]
 80126e0:	2b2e      	cmp	r3, #46	; 0x2e
 80126e2:	d00e      	beq.n	8012702 <dir_read+0x7e>
 80126e4:	7bbb      	ldrb	r3, [r7, #14]
 80126e6:	2b0f      	cmp	r3, #15
 80126e8:	d00b      	beq.n	8012702 <dir_read+0x7e>
 80126ea:	7bbb      	ldrb	r3, [r7, #14]
 80126ec:	f023 0320 	bic.w	r3, r3, #32
 80126f0:	2b08      	cmp	r3, #8
 80126f2:	bf0c      	ite	eq
 80126f4:	2301      	moveq	r3, #1
 80126f6:	2300      	movne	r3, #0
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	461a      	mov	r2, r3
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	4293      	cmp	r3, r2
 8012700:	d00f      	beq.n	8012722 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012702:	2100      	movs	r1, #0
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7ff fe61 	bl	80123cc <dir_next>
 801270a:	4603      	mov	r3, r0
 801270c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801270e:	7dfb      	ldrb	r3, [r7, #23]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d108      	bne.n	8012726 <dir_read+0xa2>
	while (dp->sect) {
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	69db      	ldr	r3, [r3, #28]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1be      	bne.n	801269a <dir_read+0x16>
 801271c:	e004      	b.n	8012728 <dir_read+0xa4>
		if (res != FR_OK) break;
 801271e:	bf00      	nop
 8012720:	e002      	b.n	8012728 <dir_read+0xa4>
				break;
 8012722:	bf00      	nop
 8012724:	e000      	b.n	8012728 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012726:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012728:	7dfb      	ldrb	r3, [r7, #23]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d002      	beq.n	8012734 <dir_read+0xb0>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2200      	movs	r2, #0
 8012732:	61da      	str	r2, [r3, #28]
	return res;
 8012734:	7dfb      	ldrb	r3, [r7, #23]
}
 8012736:	4618      	mov	r0, r3
 8012738:	3718      	adds	r7, #24
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}

0801273e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b086      	sub	sp, #24
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801274c:	2100      	movs	r1, #0
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7ff fdb3 	bl	80122ba <dir_sdi>
 8012754:	4603      	mov	r3, r0
 8012756:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012758:	7dfb      	ldrb	r3, [r7, #23]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <dir_find+0x24>
 801275e:	7dfb      	ldrb	r3, [r7, #23]
 8012760:	e03e      	b.n	80127e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	69db      	ldr	r3, [r3, #28]
 8012766:	4619      	mov	r1, r3
 8012768:	6938      	ldr	r0, [r7, #16]
 801276a:	f7ff f9cd 	bl	8011b08 <move_window>
 801276e:	4603      	mov	r3, r0
 8012770:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d12f      	bne.n	80127d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6a1b      	ldr	r3, [r3, #32]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012780:	7bfb      	ldrb	r3, [r7, #15]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d102      	bne.n	801278c <dir_find+0x4e>
 8012786:	2304      	movs	r3, #4
 8012788:	75fb      	strb	r3, [r7, #23]
 801278a:	e028      	b.n	80127de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a1b      	ldr	r3, [r3, #32]
 8012790:	330b      	adds	r3, #11
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012798:	b2da      	uxtb	r2, r3
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6a1b      	ldr	r3, [r3, #32]
 80127a2:	330b      	adds	r3, #11
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	f003 0308 	and.w	r3, r3, #8
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d10a      	bne.n	80127c4 <dir_find+0x86>
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	6a18      	ldr	r0, [r3, #32]
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	3324      	adds	r3, #36	; 0x24
 80127b6:	220b      	movs	r2, #11
 80127b8:	4619      	mov	r1, r3
 80127ba:	f7fe ffb2 	bl	8011722 <mem_cmp>
 80127be:	4603      	mov	r3, r0
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d00b      	beq.n	80127dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80127c4:	2100      	movs	r1, #0
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7ff fe00 	bl	80123cc <dir_next>
 80127cc:	4603      	mov	r3, r0
 80127ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80127d0:	7dfb      	ldrb	r3, [r7, #23]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0c5      	beq.n	8012762 <dir_find+0x24>
 80127d6:	e002      	b.n	80127de <dir_find+0xa0>
		if (res != FR_OK) break;
 80127d8:	bf00      	nop
 80127da:	e000      	b.n	80127de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80127dc:	bf00      	nop

	return res;
 80127de:	7dfb      	ldrb	r3, [r7, #23]
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3718      	adds	r7, #24
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}

080127e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b084      	sub	sp, #16
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80127f6:	2101      	movs	r1, #1
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7ff febd 	bl	8012578 <dir_alloc>
 80127fe:	4603      	mov	r3, r0
 8012800:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012802:	7bfb      	ldrb	r3, [r7, #15]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d11c      	bne.n	8012842 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	69db      	ldr	r3, [r3, #28]
 801280c:	4619      	mov	r1, r3
 801280e:	68b8      	ldr	r0, [r7, #8]
 8012810:	f7ff f97a 	bl	8011b08 <move_window>
 8012814:	4603      	mov	r3, r0
 8012816:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012818:	7bfb      	ldrb	r3, [r7, #15]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d111      	bne.n	8012842 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6a1b      	ldr	r3, [r3, #32]
 8012822:	2220      	movs	r2, #32
 8012824:	2100      	movs	r1, #0
 8012826:	4618      	mov	r0, r3
 8012828:	f7fe ff61 	bl	80116ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a18      	ldr	r0, [r3, #32]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3324      	adds	r3, #36	; 0x24
 8012834:	220b      	movs	r2, #11
 8012836:	4619      	mov	r1, r3
 8012838:	f7fe ff38 	bl	80116ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	2201      	movs	r2, #1
 8012840:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012842:	7bfb      	ldrb	r3, [r7, #15]
}
 8012844:	4618      	mov	r0, r3
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	69db      	ldr	r3, [r3, #28]
 801285e:	4619      	mov	r1, r3
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f7ff f951 	bl	8011b08 <move_window>
 8012866:	4603      	mov	r3, r0
 8012868:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801286a:	7afb      	ldrb	r3, [r7, #11]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d106      	bne.n	801287e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	6a1b      	ldr	r3, [r3, #32]
 8012874:	22e5      	movs	r2, #229	; 0xe5
 8012876:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	2201      	movs	r2, #1
 801287c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801287e:	7afb      	ldrb	r3, [r7, #11]
}
 8012880:	4618      	mov	r0, r3
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}

08012888 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b088      	sub	sp, #32
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012892:	683b      	ldr	r3, [r7, #0]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	60fb      	str	r3, [r7, #12]
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	3324      	adds	r3, #36	; 0x24
 801289c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801289e:	220b      	movs	r2, #11
 80128a0:	2120      	movs	r1, #32
 80128a2:	68b8      	ldr	r0, [r7, #8]
 80128a4:	f7fe ff23 	bl	80116ee <mem_set>
	si = i = 0; ni = 8;
 80128a8:	2300      	movs	r3, #0
 80128aa:	613b      	str	r3, [r7, #16]
 80128ac:	693b      	ldr	r3, [r7, #16]
 80128ae:	617b      	str	r3, [r7, #20]
 80128b0:	2308      	movs	r3, #8
 80128b2:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80128b4:	68fa      	ldr	r2, [r7, #12]
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	4413      	add	r3, r2
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	2b2e      	cmp	r3, #46	; 0x2e
 80128be:	d12f      	bne.n	8012920 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80128c0:	697b      	ldr	r3, [r7, #20]
 80128c2:	1c5a      	adds	r2, r3, #1
 80128c4:	617a      	str	r2, [r7, #20]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	4413      	add	r3, r2
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80128ce:	7ffb      	ldrb	r3, [r7, #31]
 80128d0:	2b2e      	cmp	r3, #46	; 0x2e
 80128d2:	d10a      	bne.n	80128ea <create_name+0x62>
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	2b02      	cmp	r3, #2
 80128d8:	d807      	bhi.n	80128ea <create_name+0x62>
			sfn[i++] = c;
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	1c5a      	adds	r2, r3, #1
 80128de:	613a      	str	r2, [r7, #16]
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	4413      	add	r3, r2
 80128e4:	7ffa      	ldrb	r2, [r7, #31]
 80128e6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80128e8:	e7ea      	b.n	80128c0 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80128ea:	7ffb      	ldrb	r3, [r7, #31]
 80128ec:	2b2f      	cmp	r3, #47	; 0x2f
 80128ee:	d007      	beq.n	8012900 <create_name+0x78>
 80128f0:	7ffb      	ldrb	r3, [r7, #31]
 80128f2:	2b5c      	cmp	r3, #92	; 0x5c
 80128f4:	d004      	beq.n	8012900 <create_name+0x78>
 80128f6:	7ffb      	ldrb	r3, [r7, #31]
 80128f8:	2b20      	cmp	r3, #32
 80128fa:	d901      	bls.n	8012900 <create_name+0x78>
 80128fc:	2306      	movs	r3, #6
 80128fe:	e084      	b.n	8012a0a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012900:	68fa      	ldr	r2, [r7, #12]
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	441a      	add	r2, r3
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801290a:	7ffb      	ldrb	r3, [r7, #31]
 801290c:	2b20      	cmp	r3, #32
 801290e:	d801      	bhi.n	8012914 <create_name+0x8c>
 8012910:	2224      	movs	r2, #36	; 0x24
 8012912:	e000      	b.n	8012916 <create_name+0x8e>
 8012914:	2220      	movs	r2, #32
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	330b      	adds	r3, #11
 801291a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801291c:	2300      	movs	r3, #0
 801291e:	e074      	b.n	8012a0a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	617a      	str	r2, [r7, #20]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	4413      	add	r3, r2
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801292e:	7ffb      	ldrb	r3, [r7, #31]
 8012930:	2b20      	cmp	r3, #32
 8012932:	d94e      	bls.n	80129d2 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012934:	7ffb      	ldrb	r3, [r7, #31]
 8012936:	2b2f      	cmp	r3, #47	; 0x2f
 8012938:	d006      	beq.n	8012948 <create_name+0xc0>
 801293a:	7ffb      	ldrb	r3, [r7, #31]
 801293c:	2b5c      	cmp	r3, #92	; 0x5c
 801293e:	d110      	bne.n	8012962 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012940:	e002      	b.n	8012948 <create_name+0xc0>
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	3301      	adds	r3, #1
 8012946:	617b      	str	r3, [r7, #20]
 8012948:	68fa      	ldr	r2, [r7, #12]
 801294a:	697b      	ldr	r3, [r7, #20]
 801294c:	4413      	add	r3, r2
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	2b2f      	cmp	r3, #47	; 0x2f
 8012952:	d0f6      	beq.n	8012942 <create_name+0xba>
 8012954:	68fa      	ldr	r2, [r7, #12]
 8012956:	697b      	ldr	r3, [r7, #20]
 8012958:	4413      	add	r3, r2
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2b5c      	cmp	r3, #92	; 0x5c
 801295e:	d0f0      	beq.n	8012942 <create_name+0xba>
			break;
 8012960:	e038      	b.n	80129d4 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012962:	7ffb      	ldrb	r3, [r7, #31]
 8012964:	2b2e      	cmp	r3, #46	; 0x2e
 8012966:	d003      	beq.n	8012970 <create_name+0xe8>
 8012968:	693a      	ldr	r2, [r7, #16]
 801296a:	69bb      	ldr	r3, [r7, #24]
 801296c:	429a      	cmp	r2, r3
 801296e:	d30c      	bcc.n	801298a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012970:	69bb      	ldr	r3, [r7, #24]
 8012972:	2b0b      	cmp	r3, #11
 8012974:	d002      	beq.n	801297c <create_name+0xf4>
 8012976:	7ffb      	ldrb	r3, [r7, #31]
 8012978:	2b2e      	cmp	r3, #46	; 0x2e
 801297a:	d001      	beq.n	8012980 <create_name+0xf8>
 801297c:	2306      	movs	r3, #6
 801297e:	e044      	b.n	8012a0a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012980:	2308      	movs	r3, #8
 8012982:	613b      	str	r3, [r7, #16]
 8012984:	230b      	movs	r3, #11
 8012986:	61bb      	str	r3, [r7, #24]
			continue;
 8012988:	e022      	b.n	80129d0 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 801298a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801298e:	2b00      	cmp	r3, #0
 8012990:	da04      	bge.n	801299c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012992:	7ffb      	ldrb	r3, [r7, #31]
 8012994:	3b80      	subs	r3, #128	; 0x80
 8012996:	4a1f      	ldr	r2, [pc, #124]	; (8012a14 <create_name+0x18c>)
 8012998:	5cd3      	ldrb	r3, [r2, r3]
 801299a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801299c:	7ffb      	ldrb	r3, [r7, #31]
 801299e:	4619      	mov	r1, r3
 80129a0:	481d      	ldr	r0, [pc, #116]	; (8012a18 <create_name+0x190>)
 80129a2:	f7fe fee5 	bl	8011770 <chk_chr>
 80129a6:	4603      	mov	r3, r0
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d001      	beq.n	80129b0 <create_name+0x128>
 80129ac:	2306      	movs	r3, #6
 80129ae:	e02c      	b.n	8012a0a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80129b0:	7ffb      	ldrb	r3, [r7, #31]
 80129b2:	2b60      	cmp	r3, #96	; 0x60
 80129b4:	d905      	bls.n	80129c2 <create_name+0x13a>
 80129b6:	7ffb      	ldrb	r3, [r7, #31]
 80129b8:	2b7a      	cmp	r3, #122	; 0x7a
 80129ba:	d802      	bhi.n	80129c2 <create_name+0x13a>
 80129bc:	7ffb      	ldrb	r3, [r7, #31]
 80129be:	3b20      	subs	r3, #32
 80129c0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	1c5a      	adds	r2, r3, #1
 80129c6:	613a      	str	r2, [r7, #16]
 80129c8:	68ba      	ldr	r2, [r7, #8]
 80129ca:	4413      	add	r3, r2
 80129cc:	7ffa      	ldrb	r2, [r7, #31]
 80129ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80129d0:	e7a6      	b.n	8012920 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80129d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80129d4:	68fa      	ldr	r2, [r7, #12]
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	441a      	add	r2, r3
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d101      	bne.n	80129e8 <create_name+0x160>
 80129e4:	2306      	movs	r3, #6
 80129e6:	e010      	b.n	8012a0a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	2be5      	cmp	r3, #229	; 0xe5
 80129ee:	d102      	bne.n	80129f6 <create_name+0x16e>
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	2205      	movs	r2, #5
 80129f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80129f6:	7ffb      	ldrb	r3, [r7, #31]
 80129f8:	2b20      	cmp	r3, #32
 80129fa:	d801      	bhi.n	8012a00 <create_name+0x178>
 80129fc:	2204      	movs	r2, #4
 80129fe:	e000      	b.n	8012a02 <create_name+0x17a>
 8012a00:	2200      	movs	r2, #0
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	330b      	adds	r3, #11
 8012a06:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012a08:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3720      	adds	r7, #32
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	0801a064 	.word	0x0801a064
 8012a18:	0801a014 	.word	0x0801a014

08012a1c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	781b      	ldrb	r3, [r3, #0]
 8012a34:	2b2f      	cmp	r3, #47	; 0x2f
 8012a36:	d00b      	beq.n	8012a50 <follow_path+0x34>
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8012a3e:	d007      	beq.n	8012a50 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	699a      	ldr	r2, [r3, #24]
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	609a      	str	r2, [r3, #8]
 8012a48:	e00d      	b.n	8012a66 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	603b      	str	r3, [r7, #0]
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	2b2f      	cmp	r3, #47	; 0x2f
 8012a56:	d0f8      	beq.n	8012a4a <follow_path+0x2e>
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8012a5e:	d0f4      	beq.n	8012a4a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	2200      	movs	r2, #0
 8012a64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a66:	683b      	ldr	r3, [r7, #0]
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	2b1f      	cmp	r3, #31
 8012a6c:	d80a      	bhi.n	8012a84 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	2280      	movs	r2, #128	; 0x80
 8012a72:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012a76:	2100      	movs	r1, #0
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f7ff fc1e 	bl	80122ba <dir_sdi>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	75fb      	strb	r3, [r7, #23]
 8012a82:	e05b      	b.n	8012b3c <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a84:	463b      	mov	r3, r7
 8012a86:	4619      	mov	r1, r3
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7ff fefd 	bl	8012888 <create_name>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a92:	7dfb      	ldrb	r3, [r7, #23]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d14c      	bne.n	8012b32 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7ff fe50 	bl	801273e <dir_find>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012aa8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012aaa:	7dfb      	ldrb	r3, [r7, #23]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d01b      	beq.n	8012ae8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012ab0:	7dfb      	ldrb	r3, [r7, #23]
 8012ab2:	2b04      	cmp	r3, #4
 8012ab4:	d13f      	bne.n	8012b36 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012ab6:	7afb      	ldrb	r3, [r7, #11]
 8012ab8:	f003 0320 	and.w	r3, r3, #32
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d00b      	beq.n	8012ad8 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012ac0:	7afb      	ldrb	r3, [r7, #11]
 8012ac2:	f003 0304 	and.w	r3, r3, #4
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d031      	beq.n	8012b2e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2280      	movs	r2, #128	; 0x80
 8012ace:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012ad6:	e02e      	b.n	8012b36 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012ad8:	7afb      	ldrb	r3, [r7, #11]
 8012ada:	f003 0304 	and.w	r3, r3, #4
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d129      	bne.n	8012b36 <follow_path+0x11a>
 8012ae2:	2305      	movs	r3, #5
 8012ae4:	75fb      	strb	r3, [r7, #23]
				break;
 8012ae6:	e026      	b.n	8012b36 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ae8:	7afb      	ldrb	r3, [r7, #11]
 8012aea:	f003 0304 	and.w	r3, r3, #4
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d123      	bne.n	8012b3a <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	799b      	ldrb	r3, [r3, #6]
 8012af6:	f003 0310 	and.w	r3, r3, #16
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d102      	bne.n	8012b04 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012afe:	2305      	movs	r3, #5
 8012b00:	75fb      	strb	r3, [r7, #23]
 8012b02:	e01b      	b.n	8012b3c <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	695b      	ldr	r3, [r3, #20]
 8012b0e:	68fa      	ldr	r2, [r7, #12]
 8012b10:	8992      	ldrh	r2, [r2, #12]
 8012b12:	fbb3 f0f2 	udiv	r0, r3, r2
 8012b16:	fb02 f200 	mul.w	r2, r2, r0
 8012b1a:	1a9b      	subs	r3, r3, r2
 8012b1c:	440b      	add	r3, r1
 8012b1e:	4619      	mov	r1, r3
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f7ff fd70 	bl	8012606 <ld_clust>
 8012b26:	4602      	mov	r2, r0
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	609a      	str	r2, [r3, #8]
 8012b2c:	e7aa      	b.n	8012a84 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012b2e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b30:	e7a8      	b.n	8012a84 <follow_path+0x68>
			if (res != FR_OK) break;
 8012b32:	bf00      	nop
 8012b34:	e002      	b.n	8012b3c <follow_path+0x120>
				break;
 8012b36:	bf00      	nop
 8012b38:	e000      	b.n	8012b3c <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b3a:	bf00      	nop
			}
		}
	}

	return res;
 8012b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3718      	adds	r7, #24
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}

08012b46 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012b46:	b480      	push	{r7}
 8012b48:	b087      	sub	sp, #28
 8012b4a:	af00      	add	r7, sp, #0
 8012b4c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b52:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d031      	beq.n	8012bc0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	e002      	b.n	8012b6a <get_ldnumber+0x24>
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	3301      	adds	r3, #1
 8012b68:	617b      	str	r3, [r7, #20]
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	2b20      	cmp	r3, #32
 8012b70:	d903      	bls.n	8012b7a <get_ldnumber+0x34>
 8012b72:	697b      	ldr	r3, [r7, #20]
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	2b3a      	cmp	r3, #58	; 0x3a
 8012b78:	d1f4      	bne.n	8012b64 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	781b      	ldrb	r3, [r3, #0]
 8012b7e:	2b3a      	cmp	r3, #58	; 0x3a
 8012b80:	d11c      	bne.n	8012bbc <get_ldnumber+0x76>
			tp = *path;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	1c5a      	adds	r2, r3, #1
 8012b8c:	60fa      	str	r2, [r7, #12]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	3b30      	subs	r3, #48	; 0x30
 8012b92:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	2b09      	cmp	r3, #9
 8012b98:	d80e      	bhi.n	8012bb8 <get_ldnumber+0x72>
 8012b9a:	68fa      	ldr	r2, [r7, #12]
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d10a      	bne.n	8012bb8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d107      	bne.n	8012bb8 <get_ldnumber+0x72>
					vol = (int)i;
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	3301      	adds	r3, #1
 8012bb0:	617b      	str	r3, [r7, #20]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	697a      	ldr	r2, [r7, #20]
 8012bb6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	e002      	b.n	8012bc2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012bc0:	693b      	ldr	r3, [r7, #16]
}
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	371c      	adds	r7, #28
 8012bc6:	46bd      	mov	sp, r7
 8012bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bcc:	4770      	bx	lr
	...

08012bd0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	6078      	str	r0, [r7, #4]
 8012bd8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	70da      	strb	r2, [r3, #3]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f04f 32ff 	mov.w	r2, #4294967295
 8012be6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012be8:	6839      	ldr	r1, [r7, #0]
 8012bea:	6878      	ldr	r0, [r7, #4]
 8012bec:	f7fe ff8c 	bl	8011b08 <move_window>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d001      	beq.n	8012bfa <check_fs+0x2a>
 8012bf6:	2304      	movs	r3, #4
 8012bf8:	e038      	b.n	8012c6c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	3338      	adds	r3, #56	; 0x38
 8012bfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fe fcd0 	bl	80115a8 <ld_word>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012c10:	429a      	cmp	r2, r3
 8012c12:	d001      	beq.n	8012c18 <check_fs+0x48>
 8012c14:	2303      	movs	r3, #3
 8012c16:	e029      	b.n	8012c6c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c1e:	2be9      	cmp	r3, #233	; 0xe9
 8012c20:	d009      	beq.n	8012c36 <check_fs+0x66>
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c28:	2beb      	cmp	r3, #235	; 0xeb
 8012c2a:	d11e      	bne.n	8012c6a <check_fs+0x9a>
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c32:	2b90      	cmp	r3, #144	; 0x90
 8012c34:	d119      	bne.n	8012c6a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	3338      	adds	r3, #56	; 0x38
 8012c3a:	3336      	adds	r3, #54	; 0x36
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	f7fe fccb 	bl	80115d8 <ld_dword>
 8012c42:	4603      	mov	r3, r0
 8012c44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012c48:	4a0a      	ldr	r2, [pc, #40]	; (8012c74 <check_fs+0xa4>)
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	d101      	bne.n	8012c52 <check_fs+0x82>
 8012c4e:	2300      	movs	r3, #0
 8012c50:	e00c      	b.n	8012c6c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	3338      	adds	r3, #56	; 0x38
 8012c56:	3352      	adds	r3, #82	; 0x52
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f7fe fcbd 	bl	80115d8 <ld_dword>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	4b05      	ldr	r3, [pc, #20]	; (8012c78 <check_fs+0xa8>)
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d101      	bne.n	8012c6a <check_fs+0x9a>
 8012c66:	2300      	movs	r3, #0
 8012c68:	e000      	b.n	8012c6c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012c6a:	2302      	movs	r3, #2
}
 8012c6c:	4618      	mov	r0, r3
 8012c6e:	3708      	adds	r7, #8
 8012c70:	46bd      	mov	sp, r7
 8012c72:	bd80      	pop	{r7, pc}
 8012c74:	00544146 	.word	0x00544146
 8012c78:	33544146 	.word	0x33544146

08012c7c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b096      	sub	sp, #88	; 0x58
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	60f8      	str	r0, [r7, #12]
 8012c84:	60b9      	str	r1, [r7, #8]
 8012c86:	4613      	mov	r3, r2
 8012c88:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012c90:	68f8      	ldr	r0, [r7, #12]
 8012c92:	f7ff ff58 	bl	8012b46 <get_ldnumber>
 8012c96:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	da01      	bge.n	8012ca2 <find_volume+0x26>
 8012c9e:	230b      	movs	r3, #11
 8012ca0:	e268      	b.n	8013174 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012ca2:	4ab0      	ldr	r2, [pc, #704]	; (8012f64 <find_volume+0x2e8>)
 8012ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012caa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d101      	bne.n	8012cb6 <find_volume+0x3a>
 8012cb2:	230c      	movs	r3, #12
 8012cb4:	e25e      	b.n	8013174 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cba:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012cbc:	79fb      	ldrb	r3, [r7, #7]
 8012cbe:	f023 0301 	bic.w	r3, r3, #1
 8012cc2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cc6:	781b      	ldrb	r3, [r3, #0]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d01a      	beq.n	8012d02 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cce:	785b      	ldrb	r3, [r3, #1]
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	f7fe fbcb 	bl	801146c <disk_status>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ce0:	f003 0301 	and.w	r3, r3, #1
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d10c      	bne.n	8012d02 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012ce8:	79fb      	ldrb	r3, [r7, #7]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d007      	beq.n	8012cfe <find_volume+0x82>
 8012cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cf2:	f003 0304 	and.w	r3, r3, #4
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d001      	beq.n	8012cfe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012cfa:	230a      	movs	r3, #10
 8012cfc:	e23a      	b.n	8013174 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012cfe:	2300      	movs	r3, #0
 8012d00:	e238      	b.n	8013174 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d04:	2200      	movs	r2, #0
 8012d06:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d0a:	b2da      	uxtb	r2, r3
 8012d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d0e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d12:	785b      	ldrb	r3, [r3, #1]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f7fe fbc3 	bl	80114a0 <disk_initialize>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012d20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d24:	f003 0301 	and.w	r3, r3, #1
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d001      	beq.n	8012d30 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012d2c:	2303      	movs	r3, #3
 8012d2e:	e221      	b.n	8013174 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012d30:	79fb      	ldrb	r3, [r7, #7]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d007      	beq.n	8012d46 <find_volume+0xca>
 8012d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d3a:	f003 0304 	and.w	r3, r3, #4
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d001      	beq.n	8012d46 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012d42:	230a      	movs	r3, #10
 8012d44:	e216      	b.n	8013174 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d48:	7858      	ldrb	r0, [r3, #1]
 8012d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4c:	330c      	adds	r3, #12
 8012d4e:	461a      	mov	r2, r3
 8012d50:	2102      	movs	r1, #2
 8012d52:	f7fe fc0b 	bl	801156c <disk_ioctl>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d001      	beq.n	8012d60 <find_volume+0xe4>
 8012d5c:	2301      	movs	r3, #1
 8012d5e:	e209      	b.n	8013174 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d62:	899b      	ldrh	r3, [r3, #12]
 8012d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d68:	d80d      	bhi.n	8012d86 <find_volume+0x10a>
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6c:	899b      	ldrh	r3, [r3, #12]
 8012d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d72:	d308      	bcc.n	8012d86 <find_volume+0x10a>
 8012d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d76:	899b      	ldrh	r3, [r3, #12]
 8012d78:	461a      	mov	r2, r3
 8012d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7c:	899b      	ldrh	r3, [r3, #12]
 8012d7e:	3b01      	subs	r3, #1
 8012d80:	4013      	ands	r3, r2
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d001      	beq.n	8012d8a <find_volume+0x10e>
 8012d86:	2301      	movs	r3, #1
 8012d88:	e1f4      	b.n	8013174 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012d8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d92:	f7ff ff1d 	bl	8012bd0 <check_fs>
 8012d96:	4603      	mov	r3, r0
 8012d98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012d9c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012da0:	2b02      	cmp	r3, #2
 8012da2:	d14b      	bne.n	8012e3c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012da4:	2300      	movs	r3, #0
 8012da6:	643b      	str	r3, [r7, #64]	; 0x40
 8012da8:	e01f      	b.n	8012dea <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012db2:	011b      	lsls	r3, r3, #4
 8012db4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012db8:	4413      	add	r3, r2
 8012dba:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dbe:	3304      	adds	r3, #4
 8012dc0:	781b      	ldrb	r3, [r3, #0]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d006      	beq.n	8012dd4 <find_volume+0x158>
 8012dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc8:	3308      	adds	r3, #8
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7fe fc04 	bl	80115d8 <ld_dword>
 8012dd0:	4602      	mov	r2, r0
 8012dd2:	e000      	b.n	8012dd6 <find_volume+0x15a>
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dd8:	009b      	lsls	r3, r3, #2
 8012dda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012dde:	440b      	add	r3, r1
 8012de0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012de6:	3301      	adds	r3, #1
 8012de8:	643b      	str	r3, [r7, #64]	; 0x40
 8012dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dec:	2b03      	cmp	r3, #3
 8012dee:	d9dc      	bls.n	8012daa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012df0:	2300      	movs	r3, #0
 8012df2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d002      	beq.n	8012e00 <find_volume+0x184>
 8012dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e02:	009b      	lsls	r3, r3, #2
 8012e04:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012e08:	4413      	add	r3, r2
 8012e0a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012e0e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d005      	beq.n	8012e22 <find_volume+0x1a6>
 8012e16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e1a:	f7ff fed9 	bl	8012bd0 <check_fs>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	e000      	b.n	8012e24 <find_volume+0x1a8>
 8012e22:	2303      	movs	r3, #3
 8012e24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012e28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e2c:	2b01      	cmp	r3, #1
 8012e2e:	d905      	bls.n	8012e3c <find_volume+0x1c0>
 8012e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e32:	3301      	adds	r3, #1
 8012e34:	643b      	str	r3, [r7, #64]	; 0x40
 8012e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e38:	2b03      	cmp	r3, #3
 8012e3a:	d9e1      	bls.n	8012e00 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012e3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e40:	2b04      	cmp	r3, #4
 8012e42:	d101      	bne.n	8012e48 <find_volume+0x1cc>
 8012e44:	2301      	movs	r3, #1
 8012e46:	e195      	b.n	8013174 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d901      	bls.n	8012e54 <find_volume+0x1d8>
 8012e50:	230d      	movs	r3, #13
 8012e52:	e18f      	b.n	8013174 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e56:	3338      	adds	r3, #56	; 0x38
 8012e58:	330b      	adds	r3, #11
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7fe fba4 	bl	80115a8 <ld_word>
 8012e60:	4603      	mov	r3, r0
 8012e62:	461a      	mov	r2, r3
 8012e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e66:	899b      	ldrh	r3, [r3, #12]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d001      	beq.n	8012e70 <find_volume+0x1f4>
 8012e6c:	230d      	movs	r3, #13
 8012e6e:	e181      	b.n	8013174 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e72:	3338      	adds	r3, #56	; 0x38
 8012e74:	3316      	adds	r3, #22
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7fe fb96 	bl	80115a8 <ld_word>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d106      	bne.n	8012e94 <find_volume+0x218>
 8012e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e88:	3338      	adds	r3, #56	; 0x38
 8012e8a:	3324      	adds	r3, #36	; 0x24
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f7fe fba3 	bl	80115d8 <ld_dword>
 8012e92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e98:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea6:	789b      	ldrb	r3, [r3, #2]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d005      	beq.n	8012eb8 <find_volume+0x23c>
 8012eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eae:	789b      	ldrb	r3, [r3, #2]
 8012eb0:	2b02      	cmp	r3, #2
 8012eb2:	d001      	beq.n	8012eb8 <find_volume+0x23c>
 8012eb4:	230d      	movs	r3, #13
 8012eb6:	e15d      	b.n	8013174 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eba:	789b      	ldrb	r3, [r3, #2]
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ec0:	fb02 f303 	mul.w	r3, r2, r3
 8012ec4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed4:	895b      	ldrh	r3, [r3, #10]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d008      	beq.n	8012eec <find_volume+0x270>
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	895b      	ldrh	r3, [r3, #10]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee2:	895b      	ldrh	r3, [r3, #10]
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	4013      	ands	r3, r2
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d001      	beq.n	8012ef0 <find_volume+0x274>
 8012eec:	230d      	movs	r3, #13
 8012eee:	e141      	b.n	8013174 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef2:	3338      	adds	r3, #56	; 0x38
 8012ef4:	3311      	adds	r3, #17
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f7fe fb56 	bl	80115a8 <ld_word>
 8012efc:	4603      	mov	r3, r0
 8012efe:	461a      	mov	r2, r3
 8012f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f06:	891b      	ldrh	r3, [r3, #8]
 8012f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f0a:	8992      	ldrh	r2, [r2, #12]
 8012f0c:	0952      	lsrs	r2, r2, #5
 8012f0e:	b292      	uxth	r2, r2
 8012f10:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f14:	fb02 f201 	mul.w	r2, r2, r1
 8012f18:	1a9b      	subs	r3, r3, r2
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d001      	beq.n	8012f24 <find_volume+0x2a8>
 8012f20:	230d      	movs	r3, #13
 8012f22:	e127      	b.n	8013174 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	3338      	adds	r3, #56	; 0x38
 8012f28:	3313      	adds	r3, #19
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7fe fb3c 	bl	80115a8 <ld_word>
 8012f30:	4603      	mov	r3, r0
 8012f32:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d106      	bne.n	8012f48 <find_volume+0x2cc>
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	3338      	adds	r3, #56	; 0x38
 8012f3e:	3320      	adds	r3, #32
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fe fb49 	bl	80115d8 <ld_dword>
 8012f46:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4a:	3338      	adds	r3, #56	; 0x38
 8012f4c:	330e      	adds	r3, #14
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fe fb2a 	bl	80115a8 <ld_word>
 8012f54:	4603      	mov	r3, r0
 8012f56:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012f58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d104      	bne.n	8012f68 <find_volume+0x2ec>
 8012f5e:	230d      	movs	r3, #13
 8012f60:	e108      	b.n	8013174 <find_volume+0x4f8>
 8012f62:	bf00      	nop
 8012f64:	200422c4 	.word	0x200422c4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012f68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f6c:	4413      	add	r3, r2
 8012f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f70:	8911      	ldrh	r1, [r2, #8]
 8012f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f74:	8992      	ldrh	r2, [r2, #12]
 8012f76:	0952      	lsrs	r2, r2, #5
 8012f78:	b292      	uxth	r2, r2
 8012f7a:	fbb1 f2f2 	udiv	r2, r1, r2
 8012f7e:	b292      	uxth	r2, r2
 8012f80:	4413      	add	r3, r2
 8012f82:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012f84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d201      	bcs.n	8012f90 <find_volume+0x314>
 8012f8c:	230d      	movs	r3, #13
 8012f8e:	e0f1      	b.n	8013174 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f94:	1ad3      	subs	r3, r2, r3
 8012f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f98:	8952      	ldrh	r2, [r2, #10]
 8012f9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f9e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d101      	bne.n	8012faa <find_volume+0x32e>
 8012fa6:	230d      	movs	r3, #13
 8012fa8:	e0e4      	b.n	8013174 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012faa:	2303      	movs	r3, #3
 8012fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d802      	bhi.n	8012fc0 <find_volume+0x344>
 8012fba:	2302      	movs	r3, #2
 8012fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fc2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d802      	bhi.n	8012fd0 <find_volume+0x354>
 8012fca:	2301      	movs	r3, #1
 8012fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd2:	1c9a      	adds	r2, r3, #2
 8012fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd6:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012fdc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012fde:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fe2:	441a      	add	r2, r3
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012fe8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fec:	441a      	add	r2, r3
 8012fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ff0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012ff2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ff6:	2b03      	cmp	r3, #3
 8012ff8:	d11e      	bne.n	8013038 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	3338      	adds	r3, #56	; 0x38
 8012ffe:	332a      	adds	r3, #42	; 0x2a
 8013000:	4618      	mov	r0, r3
 8013002:	f7fe fad1 	bl	80115a8 <ld_word>
 8013006:	4603      	mov	r3, r0
 8013008:	2b00      	cmp	r3, #0
 801300a:	d001      	beq.n	8013010 <find_volume+0x394>
 801300c:	230d      	movs	r3, #13
 801300e:	e0b1      	b.n	8013174 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013012:	891b      	ldrh	r3, [r3, #8]
 8013014:	2b00      	cmp	r3, #0
 8013016:	d001      	beq.n	801301c <find_volume+0x3a0>
 8013018:	230d      	movs	r3, #13
 801301a:	e0ab      	b.n	8013174 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301e:	3338      	adds	r3, #56	; 0x38
 8013020:	332c      	adds	r3, #44	; 0x2c
 8013022:	4618      	mov	r0, r3
 8013024:	f7fe fad8 	bl	80115d8 <ld_dword>
 8013028:	4602      	mov	r2, r0
 801302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801302e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013030:	69db      	ldr	r3, [r3, #28]
 8013032:	009b      	lsls	r3, r3, #2
 8013034:	647b      	str	r3, [r7, #68]	; 0x44
 8013036:	e01f      	b.n	8013078 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303a:	891b      	ldrh	r3, [r3, #8]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d101      	bne.n	8013044 <find_volume+0x3c8>
 8013040:	230d      	movs	r3, #13
 8013042:	e097      	b.n	8013174 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801304a:	441a      	add	r2, r3
 801304c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013054:	2b02      	cmp	r3, #2
 8013056:	d103      	bne.n	8013060 <find_volume+0x3e4>
 8013058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801305a:	69db      	ldr	r3, [r3, #28]
 801305c:	005b      	lsls	r3, r3, #1
 801305e:	e00a      	b.n	8013076 <find_volume+0x3fa>
 8013060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013062:	69da      	ldr	r2, [r3, #28]
 8013064:	4613      	mov	r3, r2
 8013066:	005b      	lsls	r3, r3, #1
 8013068:	4413      	add	r3, r2
 801306a:	085a      	lsrs	r2, r3, #1
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	69db      	ldr	r3, [r3, #28]
 8013070:	f003 0301 	and.w	r3, r3, #1
 8013074:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013076:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307a:	6a1a      	ldr	r2, [r3, #32]
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	899b      	ldrh	r3, [r3, #12]
 8013080:	4619      	mov	r1, r3
 8013082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013084:	440b      	add	r3, r1
 8013086:	3b01      	subs	r3, #1
 8013088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801308a:	8989      	ldrh	r1, [r1, #12]
 801308c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013090:	429a      	cmp	r2, r3
 8013092:	d201      	bcs.n	8013098 <find_volume+0x41c>
 8013094:	230d      	movs	r3, #13
 8013096:	e06d      	b.n	8013174 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309a:	f04f 32ff 	mov.w	r2, #4294967295
 801309e:	615a      	str	r2, [r3, #20]
 80130a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a2:	695a      	ldr	r2, [r3, #20]
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80130a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130aa:	2280      	movs	r2, #128	; 0x80
 80130ac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80130ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130b2:	2b03      	cmp	r3, #3
 80130b4:	d149      	bne.n	801314a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80130b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b8:	3338      	adds	r3, #56	; 0x38
 80130ba:	3330      	adds	r3, #48	; 0x30
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fe fa73 	bl	80115a8 <ld_word>
 80130c2:	4603      	mov	r3, r0
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d140      	bne.n	801314a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80130c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130ca:	3301      	adds	r3, #1
 80130cc:	4619      	mov	r1, r3
 80130ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130d0:	f7fe fd1a 	bl	8011b08 <move_window>
 80130d4:	4603      	mov	r3, r0
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d137      	bne.n	801314a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80130da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130dc:	2200      	movs	r2, #0
 80130de:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80130e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e2:	3338      	adds	r3, #56	; 0x38
 80130e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7fe fa5d 	bl	80115a8 <ld_word>
 80130ee:	4603      	mov	r3, r0
 80130f0:	461a      	mov	r2, r3
 80130f2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80130f6:	429a      	cmp	r2, r3
 80130f8:	d127      	bne.n	801314a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80130fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fc:	3338      	adds	r3, #56	; 0x38
 80130fe:	4618      	mov	r0, r3
 8013100:	f7fe fa6a 	bl	80115d8 <ld_dword>
 8013104:	4602      	mov	r2, r0
 8013106:	4b1d      	ldr	r3, [pc, #116]	; (801317c <find_volume+0x500>)
 8013108:	429a      	cmp	r2, r3
 801310a:	d11e      	bne.n	801314a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	3338      	adds	r3, #56	; 0x38
 8013110:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013114:	4618      	mov	r0, r3
 8013116:	f7fe fa5f 	bl	80115d8 <ld_dword>
 801311a:	4602      	mov	r2, r0
 801311c:	4b18      	ldr	r3, [pc, #96]	; (8013180 <find_volume+0x504>)
 801311e:	429a      	cmp	r2, r3
 8013120:	d113      	bne.n	801314a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013124:	3338      	adds	r3, #56	; 0x38
 8013126:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801312a:	4618      	mov	r0, r3
 801312c:	f7fe fa54 	bl	80115d8 <ld_dword>
 8013130:	4602      	mov	r2, r0
 8013132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013134:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013138:	3338      	adds	r3, #56	; 0x38
 801313a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe fa4a 	bl	80115d8 <ld_dword>
 8013144:	4602      	mov	r2, r0
 8013146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013148:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013150:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013152:	4b0c      	ldr	r3, [pc, #48]	; (8013184 <find_volume+0x508>)
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	3301      	adds	r3, #1
 8013158:	b29a      	uxth	r2, r3
 801315a:	4b0a      	ldr	r3, [pc, #40]	; (8013184 <find_volume+0x508>)
 801315c:	801a      	strh	r2, [r3, #0]
 801315e:	4b09      	ldr	r3, [pc, #36]	; (8013184 <find_volume+0x508>)
 8013160:	881a      	ldrh	r2, [r3, #0]
 8013162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013164:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013168:	2200      	movs	r2, #0
 801316a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801316c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801316e:	f7fe fc63 	bl	8011a38 <clear_lock>
#endif
	return FR_OK;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	3758      	adds	r7, #88	; 0x58
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}
 801317c:	41615252 	.word	0x41615252
 8013180:	61417272 	.word	0x61417272
 8013184:	200422c8 	.word	0x200422c8

08013188 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b084      	sub	sp, #16
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
 8013190:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013192:	2309      	movs	r3, #9
 8013194:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d01c      	beq.n	80131d6 <validate+0x4e>
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d018      	beq.n	80131d6 <validate+0x4e>
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	781b      	ldrb	r3, [r3, #0]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d013      	beq.n	80131d6 <validate+0x4e>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	889a      	ldrh	r2, [r3, #4]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	88db      	ldrh	r3, [r3, #6]
 80131b8:	429a      	cmp	r2, r3
 80131ba:	d10c      	bne.n	80131d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	785b      	ldrb	r3, [r3, #1]
 80131c2:	4618      	mov	r0, r3
 80131c4:	f7fe f952 	bl	801146c <disk_status>
 80131c8:	4603      	mov	r3, r0
 80131ca:	f003 0301 	and.w	r3, r3, #1
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d101      	bne.n	80131d6 <validate+0x4e>
			res = FR_OK;
 80131d2:	2300      	movs	r3, #0
 80131d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80131d6:	7bfb      	ldrb	r3, [r7, #15]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d102      	bne.n	80131e2 <validate+0x5a>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	e000      	b.n	80131e4 <validate+0x5c>
 80131e2:	2300      	movs	r3, #0
 80131e4:	683a      	ldr	r2, [r7, #0]
 80131e6:	6013      	str	r3, [r2, #0]
	return res;
 80131e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3710      	adds	r7, #16
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
	...

080131f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b088      	sub	sp, #32
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	4613      	mov	r3, r2
 8013200:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013206:	f107 0310 	add.w	r3, r7, #16
 801320a:	4618      	mov	r0, r3
 801320c:	f7ff fc9b 	bl	8012b46 <get_ldnumber>
 8013210:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	2b00      	cmp	r3, #0
 8013216:	da01      	bge.n	801321c <f_mount+0x28>
 8013218:	230b      	movs	r3, #11
 801321a:	e02b      	b.n	8013274 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801321c:	4a17      	ldr	r2, [pc, #92]	; (801327c <f_mount+0x88>)
 801321e:	69fb      	ldr	r3, [r7, #28]
 8013220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013224:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013226:	69bb      	ldr	r3, [r7, #24]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d005      	beq.n	8013238 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801322c:	69b8      	ldr	r0, [r7, #24]
 801322e:	f7fe fc03 	bl	8011a38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	2200      	movs	r2, #0
 8013236:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d002      	beq.n	8013244 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	2200      	movs	r2, #0
 8013242:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013244:	68fa      	ldr	r2, [r7, #12]
 8013246:	490d      	ldr	r1, [pc, #52]	; (801327c <f_mount+0x88>)
 8013248:	69fb      	ldr	r3, [r7, #28]
 801324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d002      	beq.n	801325a <f_mount+0x66>
 8013254:	79fb      	ldrb	r3, [r7, #7]
 8013256:	2b01      	cmp	r3, #1
 8013258:	d001      	beq.n	801325e <f_mount+0x6a>
 801325a:	2300      	movs	r3, #0
 801325c:	e00a      	b.n	8013274 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801325e:	f107 010c 	add.w	r1, r7, #12
 8013262:	f107 0308 	add.w	r3, r7, #8
 8013266:	2200      	movs	r2, #0
 8013268:	4618      	mov	r0, r3
 801326a:	f7ff fd07 	bl	8012c7c <find_volume>
 801326e:	4603      	mov	r3, r0
 8013270:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013272:	7dfb      	ldrb	r3, [r7, #23]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3720      	adds	r7, #32
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}
 801327c:	200422c4 	.word	0x200422c4

08013280 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b098      	sub	sp, #96	; 0x60
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	4613      	mov	r3, r2
 801328c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d101      	bne.n	8013298 <f_open+0x18>
 8013294:	2309      	movs	r3, #9
 8013296:	e1ba      	b.n	801360e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013298:	79fb      	ldrb	r3, [r7, #7]
 801329a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801329e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80132a0:	79fa      	ldrb	r2, [r7, #7]
 80132a2:	f107 0110 	add.w	r1, r7, #16
 80132a6:	f107 0308 	add.w	r3, r7, #8
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7ff fce6 	bl	8012c7c <find_volume>
 80132b0:	4603      	mov	r3, r0
 80132b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80132b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	f040 819e 	bne.w	80135fc <f_open+0x37c>
		dj.obj.fs = fs;
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80132c4:	68ba      	ldr	r2, [r7, #8]
 80132c6:	f107 0314 	add.w	r3, r7, #20
 80132ca:	4611      	mov	r1, r2
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7ff fba5 	bl	8012a1c <follow_path>
 80132d2:	4603      	mov	r3, r0
 80132d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80132d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d11a      	bne.n	8013316 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80132e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80132e4:	b25b      	sxtb	r3, r3
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	da03      	bge.n	80132f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80132ea:	2306      	movs	r3, #6
 80132ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132f0:	e011      	b.n	8013316 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80132f2:	79fb      	ldrb	r3, [r7, #7]
 80132f4:	f023 0301 	bic.w	r3, r3, #1
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	bf14      	ite	ne
 80132fc:	2301      	movne	r3, #1
 80132fe:	2300      	moveq	r3, #0
 8013300:	b2db      	uxtb	r3, r3
 8013302:	461a      	mov	r2, r3
 8013304:	f107 0314 	add.w	r3, r7, #20
 8013308:	4611      	mov	r1, r2
 801330a:	4618      	mov	r0, r3
 801330c:	f7fe fa4c 	bl	80117a8 <chk_lock>
 8013310:	4603      	mov	r3, r0
 8013312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013316:	79fb      	ldrb	r3, [r7, #7]
 8013318:	f003 031c 	and.w	r3, r3, #28
 801331c:	2b00      	cmp	r3, #0
 801331e:	d07e      	beq.n	801341e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013324:	2b00      	cmp	r3, #0
 8013326:	d017      	beq.n	8013358 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013328:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801332c:	2b04      	cmp	r3, #4
 801332e:	d10e      	bne.n	801334e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013330:	f7fe fa96 	bl	8011860 <enq_lock>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d006      	beq.n	8013348 <f_open+0xc8>
 801333a:	f107 0314 	add.w	r3, r7, #20
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff fa52 	bl	80127e8 <dir_register>
 8013344:	4603      	mov	r3, r0
 8013346:	e000      	b.n	801334a <f_open+0xca>
 8013348:	2312      	movs	r3, #18
 801334a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801334e:	79fb      	ldrb	r3, [r7, #7]
 8013350:	f043 0308 	orr.w	r3, r3, #8
 8013354:	71fb      	strb	r3, [r7, #7]
 8013356:	e010      	b.n	801337a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013358:	7ebb      	ldrb	r3, [r7, #26]
 801335a:	f003 0311 	and.w	r3, r3, #17
 801335e:	2b00      	cmp	r3, #0
 8013360:	d003      	beq.n	801336a <f_open+0xea>
					res = FR_DENIED;
 8013362:	2307      	movs	r3, #7
 8013364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013368:	e007      	b.n	801337a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801336a:	79fb      	ldrb	r3, [r7, #7]
 801336c:	f003 0304 	and.w	r3, r3, #4
 8013370:	2b00      	cmp	r3, #0
 8013372:	d002      	beq.n	801337a <f_open+0xfa>
 8013374:	2308      	movs	r3, #8
 8013376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801337a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801337e:	2b00      	cmp	r3, #0
 8013380:	d167      	bne.n	8013452 <f_open+0x1d2>
 8013382:	79fb      	ldrb	r3, [r7, #7]
 8013384:	f003 0308 	and.w	r3, r3, #8
 8013388:	2b00      	cmp	r3, #0
 801338a:	d062      	beq.n	8013452 <f_open+0x1d2>
				dw = GET_FATTIME();
 801338c:	4ba2      	ldr	r3, [pc, #648]	; (8013618 <f_open+0x398>)
 801338e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013392:	330e      	adds	r3, #14
 8013394:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013396:	4618      	mov	r0, r3
 8013398:	f7fe f95c 	bl	8011654 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801339c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801339e:	3316      	adds	r3, #22
 80133a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133a2:	4618      	mov	r0, r3
 80133a4:	f7fe f956 	bl	8011654 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80133a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133aa:	330b      	adds	r3, #11
 80133ac:	2220      	movs	r2, #32
 80133ae:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80133b0:	693b      	ldr	r3, [r7, #16]
 80133b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133b4:	4611      	mov	r1, r2
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff f925 	bl	8012606 <ld_clust>
 80133bc:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133c2:	2200      	movs	r2, #0
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7ff f93d 	bl	8012644 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80133ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133cc:	331c      	adds	r3, #28
 80133ce:	2100      	movs	r1, #0
 80133d0:	4618      	mov	r0, r3
 80133d2:	f7fe f93f 	bl	8011654 <st_dword>
					fs->wflag = 1;
 80133d6:	693b      	ldr	r3, [r7, #16]
 80133d8:	2201      	movs	r2, #1
 80133da:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80133dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d037      	beq.n	8013452 <f_open+0x1d2>
						dw = fs->winsect;
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133e6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80133e8:	f107 0314 	add.w	r3, r7, #20
 80133ec:	2200      	movs	r2, #0
 80133ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7fe fe2d 	bl	8012050 <remove_chain>
 80133f6:	4603      	mov	r3, r0
 80133f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80133fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013400:	2b00      	cmp	r3, #0
 8013402:	d126      	bne.n	8013452 <f_open+0x1d2>
							res = move_window(fs, dw);
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013408:	4618      	mov	r0, r3
 801340a:	f7fe fb7d 	bl	8011b08 <move_window>
 801340e:	4603      	mov	r3, r0
 8013410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013418:	3a01      	subs	r2, #1
 801341a:	611a      	str	r2, [r3, #16]
 801341c:	e019      	b.n	8013452 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801341e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013422:	2b00      	cmp	r3, #0
 8013424:	d115      	bne.n	8013452 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013426:	7ebb      	ldrb	r3, [r7, #26]
 8013428:	f003 0310 	and.w	r3, r3, #16
 801342c:	2b00      	cmp	r3, #0
 801342e:	d003      	beq.n	8013438 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013430:	2304      	movs	r3, #4
 8013432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013436:	e00c      	b.n	8013452 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013438:	79fb      	ldrb	r3, [r7, #7]
 801343a:	f003 0302 	and.w	r3, r3, #2
 801343e:	2b00      	cmp	r3, #0
 8013440:	d007      	beq.n	8013452 <f_open+0x1d2>
 8013442:	7ebb      	ldrb	r3, [r7, #26]
 8013444:	f003 0301 	and.w	r3, r3, #1
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <f_open+0x1d2>
						res = FR_DENIED;
 801344c:	2307      	movs	r3, #7
 801344e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013452:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013456:	2b00      	cmp	r3, #0
 8013458:	d128      	bne.n	80134ac <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801345a:	79fb      	ldrb	r3, [r7, #7]
 801345c:	f003 0308 	and.w	r3, r3, #8
 8013460:	2b00      	cmp	r3, #0
 8013462:	d003      	beq.n	801346c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013464:	79fb      	ldrb	r3, [r7, #7]
 8013466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801346a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801347a:	79fb      	ldrb	r3, [r7, #7]
 801347c:	f023 0301 	bic.w	r3, r3, #1
 8013480:	2b00      	cmp	r3, #0
 8013482:	bf14      	ite	ne
 8013484:	2301      	movne	r3, #1
 8013486:	2300      	moveq	r3, #0
 8013488:	b2db      	uxtb	r3, r3
 801348a:	461a      	mov	r2, r3
 801348c:	f107 0314 	add.w	r3, r7, #20
 8013490:	4611      	mov	r1, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7fe fa06 	bl	80118a4 <inc_lock>
 8013498:	4602      	mov	r2, r0
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d102      	bne.n	80134ac <f_open+0x22c>
 80134a6:	2302      	movs	r3, #2
 80134a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80134ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f040 80a3 	bne.w	80135fc <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134ba:	4611      	mov	r1, r2
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff f8a2 	bl	8012606 <ld_clust>
 80134c2:	4602      	mov	r2, r0
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80134c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134ca:	331c      	adds	r3, #28
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7fe f883 	bl	80115d8 <ld_dword>
 80134d2:	4602      	mov	r2, r0
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80134de:	693a      	ldr	r2, [r7, #16]
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	88da      	ldrh	r2, [r3, #6]
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	79fa      	ldrb	r2, [r7, #7]
 80134f0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	2200      	movs	r2, #0
 80134f6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	2200      	movs	r2, #0
 80134fc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	2200      	movs	r2, #0
 8013502:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	3330      	adds	r3, #48	; 0x30
 8013508:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801350c:	2100      	movs	r1, #0
 801350e:	4618      	mov	r0, r3
 8013510:	f7fe f8ed 	bl	80116ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013514:	79fb      	ldrb	r3, [r7, #7]
 8013516:	f003 0320 	and.w	r3, r3, #32
 801351a:	2b00      	cmp	r3, #0
 801351c:	d06e      	beq.n	80135fc <f_open+0x37c>
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d06a      	beq.n	80135fc <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	68da      	ldr	r2, [r3, #12]
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	895b      	ldrh	r3, [r3, #10]
 8013532:	461a      	mov	r2, r3
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	899b      	ldrh	r3, [r3, #12]
 8013538:	fb03 f302 	mul.w	r3, r3, r2
 801353c:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	689b      	ldr	r3, [r3, #8]
 8013542:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	657b      	str	r3, [r7, #84]	; 0x54
 801354a:	e016      	b.n	801357a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013550:	4618      	mov	r0, r3
 8013552:	f7fe fb96 	bl	8011c82 <get_fat>
 8013556:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801355a:	2b01      	cmp	r3, #1
 801355c:	d802      	bhi.n	8013564 <f_open+0x2e4>
 801355e:	2302      	movs	r3, #2
 8013560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801356a:	d102      	bne.n	8013572 <f_open+0x2f2>
 801356c:	2301      	movs	r3, #1
 801356e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013572:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013576:	1ad3      	subs	r3, r2, r3
 8013578:	657b      	str	r3, [r7, #84]	; 0x54
 801357a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801357e:	2b00      	cmp	r3, #0
 8013580:	d103      	bne.n	801358a <f_open+0x30a>
 8013582:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013586:	429a      	cmp	r2, r3
 8013588:	d8e0      	bhi.n	801354c <f_open+0x2cc>
				}
				fp->clust = clst;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801358e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013594:	2b00      	cmp	r3, #0
 8013596:	d131      	bne.n	80135fc <f_open+0x37c>
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	899b      	ldrh	r3, [r3, #12]
 801359c:	461a      	mov	r2, r3
 801359e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80135a4:	fb02 f201 	mul.w	r2, r2, r1
 80135a8:	1a9b      	subs	r3, r3, r2
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d026      	beq.n	80135fc <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80135b2:	4618      	mov	r0, r3
 80135b4:	f7fe fb46 	bl	8011c44 <clust2sect>
 80135b8:	6478      	str	r0, [r7, #68]	; 0x44
 80135ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d103      	bne.n	80135c8 <f_open+0x348>
						res = FR_INT_ERR;
 80135c0:	2302      	movs	r3, #2
 80135c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135c6:	e019      	b.n	80135fc <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80135c8:	693b      	ldr	r3, [r7, #16]
 80135ca:	899b      	ldrh	r3, [r3, #12]
 80135cc:	461a      	mov	r2, r3
 80135ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80135d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135d6:	441a      	add	r2, r3
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	7858      	ldrb	r0, [r3, #1]
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	6a1a      	ldr	r2, [r3, #32]
 80135ea:	2301      	movs	r3, #1
 80135ec:	f7fd ff7e 	bl	80114ec <disk_read>
 80135f0:	4603      	mov	r3, r0
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d002      	beq.n	80135fc <f_open+0x37c>
 80135f6:	2301      	movs	r3, #1
 80135f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80135fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <f_open+0x38a>
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801360a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801360e:	4618      	mov	r0, r3
 8013610:	3760      	adds	r7, #96	; 0x60
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	274a0000 	.word	0x274a0000

0801361c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08e      	sub	sp, #56	; 0x38
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
 8013628:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801362e:	683b      	ldr	r3, [r7, #0]
 8013630:	2200      	movs	r2, #0
 8013632:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	f107 0214 	add.w	r2, r7, #20
 801363a:	4611      	mov	r1, r2
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fda3 	bl	8013188 <validate>
 8013642:	4603      	mov	r3, r0
 8013644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013648:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801364c:	2b00      	cmp	r3, #0
 801364e:	d107      	bne.n	8013660 <f_read+0x44>
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	7d5b      	ldrb	r3, [r3, #21]
 8013654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801365c:	2b00      	cmp	r3, #0
 801365e:	d002      	beq.n	8013666 <f_read+0x4a>
 8013660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013664:	e135      	b.n	80138d2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	7d1b      	ldrb	r3, [r3, #20]
 801366a:	f003 0301 	and.w	r3, r3, #1
 801366e:	2b00      	cmp	r3, #0
 8013670:	d101      	bne.n	8013676 <f_read+0x5a>
 8013672:	2307      	movs	r3, #7
 8013674:	e12d      	b.n	80138d2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	68da      	ldr	r2, [r3, #12]
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	699b      	ldr	r3, [r3, #24]
 801367e:	1ad3      	subs	r3, r2, r3
 8013680:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013682:	687a      	ldr	r2, [r7, #4]
 8013684:	6a3b      	ldr	r3, [r7, #32]
 8013686:	429a      	cmp	r2, r3
 8013688:	f240 811e 	bls.w	80138c8 <f_read+0x2ac>
 801368c:	6a3b      	ldr	r3, [r7, #32]
 801368e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013690:	e11a      	b.n	80138c8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	699b      	ldr	r3, [r3, #24]
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	8992      	ldrh	r2, [r2, #12]
 801369a:	fbb3 f1f2 	udiv	r1, r3, r2
 801369e:	fb02 f201 	mul.w	r2, r2, r1
 80136a2:	1a9b      	subs	r3, r3, r2
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f040 80d5 	bne.w	8013854 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	699b      	ldr	r3, [r3, #24]
 80136ae:	697a      	ldr	r2, [r7, #20]
 80136b0:	8992      	ldrh	r2, [r2, #12]
 80136b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80136b6:	697a      	ldr	r2, [r7, #20]
 80136b8:	8952      	ldrh	r2, [r2, #10]
 80136ba:	3a01      	subs	r2, #1
 80136bc:	4013      	ands	r3, r2
 80136be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80136c0:	69fb      	ldr	r3, [r7, #28]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d12f      	bne.n	8013726 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d103      	bne.n	80136d6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	689b      	ldr	r3, [r3, #8]
 80136d2:	633b      	str	r3, [r7, #48]	; 0x30
 80136d4:	e013      	b.n	80136fe <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d007      	beq.n	80136ee <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	699b      	ldr	r3, [r3, #24]
 80136e2:	4619      	mov	r1, r3
 80136e4:	68f8      	ldr	r0, [r7, #12]
 80136e6:	f7fe fdb0 	bl	801224a <clmt_clust>
 80136ea:	6338      	str	r0, [r7, #48]	; 0x30
 80136ec:	e007      	b.n	80136fe <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80136ee:	68fa      	ldr	r2, [r7, #12]
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	69db      	ldr	r3, [r3, #28]
 80136f4:	4619      	mov	r1, r3
 80136f6:	4610      	mov	r0, r2
 80136f8:	f7fe fac3 	bl	8011c82 <get_fat>
 80136fc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80136fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013700:	2b01      	cmp	r3, #1
 8013702:	d804      	bhi.n	801370e <f_read+0xf2>
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	2202      	movs	r2, #2
 8013708:	755a      	strb	r2, [r3, #21]
 801370a:	2302      	movs	r3, #2
 801370c:	e0e1      	b.n	80138d2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013714:	d104      	bne.n	8013720 <f_read+0x104>
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	2201      	movs	r2, #1
 801371a:	755a      	strb	r2, [r3, #21]
 801371c:	2301      	movs	r3, #1
 801371e:	e0d8      	b.n	80138d2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013724:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013726:	697a      	ldr	r2, [r7, #20]
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	69db      	ldr	r3, [r3, #28]
 801372c:	4619      	mov	r1, r3
 801372e:	4610      	mov	r0, r2
 8013730:	f7fe fa88 	bl	8011c44 <clust2sect>
 8013734:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d104      	bne.n	8013746 <f_read+0x12a>
 801373c:	68fb      	ldr	r3, [r7, #12]
 801373e:	2202      	movs	r2, #2
 8013740:	755a      	strb	r2, [r3, #21]
 8013742:	2302      	movs	r3, #2
 8013744:	e0c5      	b.n	80138d2 <f_read+0x2b6>
			sect += csect;
 8013746:	69ba      	ldr	r2, [r7, #24]
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	4413      	add	r3, r2
 801374c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801374e:	697b      	ldr	r3, [r7, #20]
 8013750:	899b      	ldrh	r3, [r3, #12]
 8013752:	461a      	mov	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	fbb3 f3f2 	udiv	r3, r3, r2
 801375a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375e:	2b00      	cmp	r3, #0
 8013760:	d041      	beq.n	80137e6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013762:	69fa      	ldr	r2, [r7, #28]
 8013764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013766:	4413      	add	r3, r2
 8013768:	697a      	ldr	r2, [r7, #20]
 801376a:	8952      	ldrh	r2, [r2, #10]
 801376c:	4293      	cmp	r3, r2
 801376e:	d905      	bls.n	801377c <f_read+0x160>
					cc = fs->csize - csect;
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	895b      	ldrh	r3, [r3, #10]
 8013774:	461a      	mov	r2, r3
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	1ad3      	subs	r3, r2, r3
 801377a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	7858      	ldrb	r0, [r3, #1]
 8013780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013782:	69ba      	ldr	r2, [r7, #24]
 8013784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013786:	f7fd feb1 	bl	80114ec <disk_read>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d004      	beq.n	801379a <f_read+0x17e>
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2201      	movs	r2, #1
 8013794:	755a      	strb	r2, [r3, #21]
 8013796:	2301      	movs	r3, #1
 8013798:	e09b      	b.n	80138d2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	7d1b      	ldrb	r3, [r3, #20]
 801379e:	b25b      	sxtb	r3, r3
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	da18      	bge.n	80137d6 <f_read+0x1ba>
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	6a1a      	ldr	r2, [r3, #32]
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137ae:	429a      	cmp	r2, r3
 80137b0:	d911      	bls.n	80137d6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80137b2:	68fb      	ldr	r3, [r7, #12]
 80137b4:	6a1a      	ldr	r2, [r3, #32]
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	1ad3      	subs	r3, r2, r3
 80137ba:	697a      	ldr	r2, [r7, #20]
 80137bc:	8992      	ldrh	r2, [r2, #12]
 80137be:	fb02 f303 	mul.w	r3, r2, r3
 80137c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137c4:	18d0      	adds	r0, r2, r3
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	899b      	ldrh	r3, [r3, #12]
 80137d0:	461a      	mov	r2, r3
 80137d2:	f7fd ff6b 	bl	80116ac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	899b      	ldrh	r3, [r3, #12]
 80137da:	461a      	mov	r2, r3
 80137dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137de:	fb02 f303 	mul.w	r3, r2, r3
 80137e2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80137e4:	e05c      	b.n	80138a0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	6a1b      	ldr	r3, [r3, #32]
 80137ea:	69ba      	ldr	r2, [r7, #24]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d02e      	beq.n	801384e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	7d1b      	ldrb	r3, [r3, #20]
 80137f4:	b25b      	sxtb	r3, r3
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	da18      	bge.n	801382c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	7858      	ldrb	r0, [r3, #1]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6a1a      	ldr	r2, [r3, #32]
 8013808:	2301      	movs	r3, #1
 801380a:	f7fd fe8f 	bl	801152c <disk_write>
 801380e:	4603      	mov	r3, r0
 8013810:	2b00      	cmp	r3, #0
 8013812:	d004      	beq.n	801381e <f_read+0x202>
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	2201      	movs	r2, #1
 8013818:	755a      	strb	r2, [r3, #21]
 801381a:	2301      	movs	r3, #1
 801381c:	e059      	b.n	80138d2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	7d1b      	ldrb	r3, [r3, #20]
 8013822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013826:	b2da      	uxtb	r2, r3
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	7858      	ldrb	r0, [r3, #1]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013836:	2301      	movs	r3, #1
 8013838:	69ba      	ldr	r2, [r7, #24]
 801383a:	f7fd fe57 	bl	80114ec <disk_read>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	d004      	beq.n	801384e <f_read+0x232>
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	2201      	movs	r2, #1
 8013848:	755a      	strb	r2, [r3, #21]
 801384a:	2301      	movs	r3, #1
 801384c:	e041      	b.n	80138d2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	69ba      	ldr	r2, [r7, #24]
 8013852:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	899b      	ldrh	r3, [r3, #12]
 8013858:	4618      	mov	r0, r3
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	699b      	ldr	r3, [r3, #24]
 801385e:	697a      	ldr	r2, [r7, #20]
 8013860:	8992      	ldrh	r2, [r2, #12]
 8013862:	fbb3 f1f2 	udiv	r1, r3, r2
 8013866:	fb02 f201 	mul.w	r2, r2, r1
 801386a:	1a9b      	subs	r3, r3, r2
 801386c:	1ac3      	subs	r3, r0, r3
 801386e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	429a      	cmp	r2, r3
 8013876:	d901      	bls.n	801387c <f_read+0x260>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	699b      	ldr	r3, [r3, #24]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	8992      	ldrh	r2, [r2, #12]
 801388a:	fbb3 f0f2 	udiv	r0, r3, r2
 801388e:	fb02 f200 	mul.w	r2, r2, r0
 8013892:	1a9b      	subs	r3, r3, r2
 8013894:	440b      	add	r3, r1
 8013896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013898:	4619      	mov	r1, r3
 801389a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801389c:	f7fd ff06 	bl	80116ac <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80138a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138a4:	4413      	add	r3, r2
 80138a6:	627b      	str	r3, [r7, #36]	; 0x24
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	699a      	ldr	r2, [r3, #24]
 80138ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ae:	441a      	add	r2, r3
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	619a      	str	r2, [r3, #24]
 80138b4:	683b      	ldr	r3, [r7, #0]
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ba:	441a      	add	r2, r3
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	601a      	str	r2, [r3, #0]
 80138c0:	687a      	ldr	r2, [r7, #4]
 80138c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f47f aee1 	bne.w	8013692 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80138d0:	2300      	movs	r3, #0
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3738      	adds	r7, #56	; 0x38
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}

080138da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80138da:	b580      	push	{r7, lr}
 80138dc:	b08c      	sub	sp, #48	; 0x30
 80138de:	af00      	add	r7, sp, #0
 80138e0:	60f8      	str	r0, [r7, #12]
 80138e2:	60b9      	str	r1, [r7, #8]
 80138e4:	607a      	str	r2, [r7, #4]
 80138e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80138e8:	68bb      	ldr	r3, [r7, #8]
 80138ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	2200      	movs	r2, #0
 80138f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f107 0210 	add.w	r2, r7, #16
 80138f8:	4611      	mov	r1, r2
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7ff fc44 	bl	8013188 <validate>
 8013900:	4603      	mov	r3, r0
 8013902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801390a:	2b00      	cmp	r3, #0
 801390c:	d107      	bne.n	801391e <f_write+0x44>
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	7d5b      	ldrb	r3, [r3, #21]
 8013912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801391a:	2b00      	cmp	r3, #0
 801391c:	d002      	beq.n	8013924 <f_write+0x4a>
 801391e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013922:	e16a      	b.n	8013bfa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	7d1b      	ldrb	r3, [r3, #20]
 8013928:	f003 0302 	and.w	r3, r3, #2
 801392c:	2b00      	cmp	r3, #0
 801392e:	d101      	bne.n	8013934 <f_write+0x5a>
 8013930:	2307      	movs	r3, #7
 8013932:	e162      	b.n	8013bfa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	699a      	ldr	r2, [r3, #24]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	441a      	add	r2, r3
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	699b      	ldr	r3, [r3, #24]
 8013940:	429a      	cmp	r2, r3
 8013942:	f080 814c 	bcs.w	8013bde <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	699b      	ldr	r3, [r3, #24]
 801394a:	43db      	mvns	r3, r3
 801394c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801394e:	e146      	b.n	8013bde <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	699b      	ldr	r3, [r3, #24]
 8013954:	693a      	ldr	r2, [r7, #16]
 8013956:	8992      	ldrh	r2, [r2, #12]
 8013958:	fbb3 f1f2 	udiv	r1, r3, r2
 801395c:	fb02 f201 	mul.w	r2, r2, r1
 8013960:	1a9b      	subs	r3, r3, r2
 8013962:	2b00      	cmp	r3, #0
 8013964:	f040 80f1 	bne.w	8013b4a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	699b      	ldr	r3, [r3, #24]
 801396c:	693a      	ldr	r2, [r7, #16]
 801396e:	8992      	ldrh	r2, [r2, #12]
 8013970:	fbb3 f3f2 	udiv	r3, r3, r2
 8013974:	693a      	ldr	r2, [r7, #16]
 8013976:	8952      	ldrh	r2, [r2, #10]
 8013978:	3a01      	subs	r2, #1
 801397a:	4013      	ands	r3, r2
 801397c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d143      	bne.n	8013a0c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	699b      	ldr	r3, [r3, #24]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10c      	bne.n	80139a6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	689b      	ldr	r3, [r3, #8]
 8013990:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013994:	2b00      	cmp	r3, #0
 8013996:	d11a      	bne.n	80139ce <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	2100      	movs	r1, #0
 801399c:	4618      	mov	r0, r3
 801399e:	f7fe fbbc 	bl	801211a <create_chain>
 80139a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80139a4:	e013      	b.n	80139ce <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d007      	beq.n	80139be <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	699b      	ldr	r3, [r3, #24]
 80139b2:	4619      	mov	r1, r3
 80139b4:	68f8      	ldr	r0, [r7, #12]
 80139b6:	f7fe fc48 	bl	801224a <clmt_clust>
 80139ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80139bc:	e007      	b.n	80139ce <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80139be:	68fa      	ldr	r2, [r7, #12]
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	69db      	ldr	r3, [r3, #28]
 80139c4:	4619      	mov	r1, r3
 80139c6:	4610      	mov	r0, r2
 80139c8:	f7fe fba7 	bl	801211a <create_chain>
 80139cc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80139ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	f000 8109 	beq.w	8013be8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80139d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d104      	bne.n	80139e6 <f_write+0x10c>
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2202      	movs	r2, #2
 80139e0:	755a      	strb	r2, [r3, #21]
 80139e2:	2302      	movs	r3, #2
 80139e4:	e109      	b.n	8013bfa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80139e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139ec:	d104      	bne.n	80139f8 <f_write+0x11e>
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2201      	movs	r2, #1
 80139f2:	755a      	strb	r2, [r3, #21]
 80139f4:	2301      	movs	r3, #1
 80139f6:	e100      	b.n	8013bfa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	689b      	ldr	r3, [r3, #8]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d102      	bne.n	8013a0c <f_write+0x132>
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a0a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	7d1b      	ldrb	r3, [r3, #20]
 8013a10:	b25b      	sxtb	r3, r3
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	da18      	bge.n	8013a48 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a16:	693b      	ldr	r3, [r7, #16]
 8013a18:	7858      	ldrb	r0, [r3, #1]
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	6a1a      	ldr	r2, [r3, #32]
 8013a24:	2301      	movs	r3, #1
 8013a26:	f7fd fd81 	bl	801152c <disk_write>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d004      	beq.n	8013a3a <f_write+0x160>
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2201      	movs	r2, #1
 8013a34:	755a      	strb	r2, [r3, #21]
 8013a36:	2301      	movs	r3, #1
 8013a38:	e0df      	b.n	8013bfa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	7d1b      	ldrb	r3, [r3, #20]
 8013a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a42:	b2da      	uxtb	r2, r3
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013a48:	693a      	ldr	r2, [r7, #16]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	69db      	ldr	r3, [r3, #28]
 8013a4e:	4619      	mov	r1, r3
 8013a50:	4610      	mov	r0, r2
 8013a52:	f7fe f8f7 	bl	8011c44 <clust2sect>
 8013a56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d104      	bne.n	8013a68 <f_write+0x18e>
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	2202      	movs	r2, #2
 8013a62:	755a      	strb	r2, [r3, #21]
 8013a64:	2302      	movs	r3, #2
 8013a66:	e0c8      	b.n	8013bfa <f_write+0x320>
			sect += csect;
 8013a68:	697a      	ldr	r2, [r7, #20]
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	899b      	ldrh	r3, [r3, #12]
 8013a74:	461a      	mov	r2, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013a7e:	6a3b      	ldr	r3, [r7, #32]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d043      	beq.n	8013b0c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013a84:	69ba      	ldr	r2, [r7, #24]
 8013a86:	6a3b      	ldr	r3, [r7, #32]
 8013a88:	4413      	add	r3, r2
 8013a8a:	693a      	ldr	r2, [r7, #16]
 8013a8c:	8952      	ldrh	r2, [r2, #10]
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d905      	bls.n	8013a9e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	895b      	ldrh	r3, [r3, #10]
 8013a96:	461a      	mov	r2, r3
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	1ad3      	subs	r3, r2, r3
 8013a9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	7858      	ldrb	r0, [r3, #1]
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	697a      	ldr	r2, [r7, #20]
 8013aa6:	69f9      	ldr	r1, [r7, #28]
 8013aa8:	f7fd fd40 	bl	801152c <disk_write>
 8013aac:	4603      	mov	r3, r0
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d004      	beq.n	8013abc <f_write+0x1e2>
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2201      	movs	r2, #1
 8013ab6:	755a      	strb	r2, [r3, #21]
 8013ab8:	2301      	movs	r3, #1
 8013aba:	e09e      	b.n	8013bfa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6a1a      	ldr	r2, [r3, #32]
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	6a3a      	ldr	r2, [r7, #32]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d918      	bls.n	8013afc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	6a1a      	ldr	r2, [r3, #32]
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	693a      	ldr	r2, [r7, #16]
 8013ada:	8992      	ldrh	r2, [r2, #12]
 8013adc:	fb02 f303 	mul.w	r3, r2, r3
 8013ae0:	69fa      	ldr	r2, [r7, #28]
 8013ae2:	18d1      	adds	r1, r2, r3
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	899b      	ldrh	r3, [r3, #12]
 8013ae8:	461a      	mov	r2, r3
 8013aea:	f7fd fddf 	bl	80116ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	7d1b      	ldrb	r3, [r3, #20]
 8013af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013af6:	b2da      	uxtb	r2, r3
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	899b      	ldrh	r3, [r3, #12]
 8013b00:	461a      	mov	r2, r3
 8013b02:	6a3b      	ldr	r3, [r7, #32]
 8013b04:	fb02 f303 	mul.w	r3, r2, r3
 8013b08:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013b0a:	e04b      	b.n	8013ba4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6a1b      	ldr	r3, [r3, #32]
 8013b10:	697a      	ldr	r2, [r7, #20]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d016      	beq.n	8013b44 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	699a      	ldr	r2, [r3, #24]
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d210      	bcs.n	8013b44 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	7858      	ldrb	r0, [r3, #1]
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	697a      	ldr	r2, [r7, #20]
 8013b30:	f7fd fcdc 	bl	80114ec <disk_read>
 8013b34:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d004      	beq.n	8013b44 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2201      	movs	r2, #1
 8013b3e:	755a      	strb	r2, [r3, #21]
 8013b40:	2301      	movs	r3, #1
 8013b42:	e05a      	b.n	8013bfa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	697a      	ldr	r2, [r7, #20]
 8013b48:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	899b      	ldrh	r3, [r3, #12]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	699b      	ldr	r3, [r3, #24]
 8013b54:	693a      	ldr	r2, [r7, #16]
 8013b56:	8992      	ldrh	r2, [r2, #12]
 8013b58:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b5c:	fb02 f201 	mul.w	r2, r2, r1
 8013b60:	1a9b      	subs	r3, r3, r2
 8013b62:	1ac3      	subs	r3, r0, r3
 8013b64:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d901      	bls.n	8013b72 <f_write+0x298>
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	693a      	ldr	r2, [r7, #16]
 8013b7e:	8992      	ldrh	r2, [r2, #12]
 8013b80:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b84:	fb02 f200 	mul.w	r2, r2, r0
 8013b88:	1a9b      	subs	r3, r3, r2
 8013b8a:	440b      	add	r3, r1
 8013b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b8e:	69f9      	ldr	r1, [r7, #28]
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7fd fd8b 	bl	80116ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	7d1b      	ldrb	r3, [r3, #20]
 8013b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b9e:	b2da      	uxtb	r2, r3
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013ba4:	69fa      	ldr	r2, [r7, #28]
 8013ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba8:	4413      	add	r3, r2
 8013baa:	61fb      	str	r3, [r7, #28]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	699a      	ldr	r2, [r3, #24]
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb2:	441a      	add	r2, r3
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	619a      	str	r2, [r3, #24]
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	68da      	ldr	r2, [r3, #12]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	699b      	ldr	r3, [r3, #24]
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	bf38      	it	cc
 8013bc4:	461a      	movcc	r2, r3
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	60da      	str	r2, [r3, #12]
 8013bca:	683b      	ldr	r3, [r7, #0]
 8013bcc:	681a      	ldr	r2, [r3, #0]
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	441a      	add	r2, r3
 8013bd2:	683b      	ldr	r3, [r7, #0]
 8013bd4:	601a      	str	r2, [r3, #0]
 8013bd6:	687a      	ldr	r2, [r7, #4]
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bda:	1ad3      	subs	r3, r2, r3
 8013bdc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f47f aeb5 	bne.w	8013950 <f_write+0x76>
 8013be6:	e000      	b.n	8013bea <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013be8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	7d1b      	ldrb	r3, [r3, #20]
 8013bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bf2:	b2da      	uxtb	r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013bf8:	2300      	movs	r3, #0
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3730      	adds	r7, #48	; 0x30
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}
	...

08013c04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	f107 0208 	add.w	r2, r7, #8
 8013c12:	4611      	mov	r1, r2
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7ff fab7 	bl	8013188 <validate>
 8013c1a:	4603      	mov	r3, r0
 8013c1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c1e:	7dfb      	ldrb	r3, [r7, #23]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d167      	bne.n	8013cf4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	7d1b      	ldrb	r3, [r3, #20]
 8013c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d061      	beq.n	8013cf4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	7d1b      	ldrb	r3, [r3, #20]
 8013c34:	b25b      	sxtb	r3, r3
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	da15      	bge.n	8013c66 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013c3a:	68bb      	ldr	r3, [r7, #8]
 8013c3c:	7858      	ldrb	r0, [r3, #1]
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6a1a      	ldr	r2, [r3, #32]
 8013c48:	2301      	movs	r3, #1
 8013c4a:	f7fd fc6f 	bl	801152c <disk_write>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d001      	beq.n	8013c58 <f_sync+0x54>
 8013c54:	2301      	movs	r3, #1
 8013c56:	e04e      	b.n	8013cf6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7d1b      	ldrb	r3, [r3, #20]
 8013c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c60:	b2da      	uxtb	r2, r3
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c66:	4b26      	ldr	r3, [pc, #152]	; (8013d00 <f_sync+0xfc>)
 8013c68:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c70:	4619      	mov	r1, r3
 8013c72:	4610      	mov	r0, r2
 8013c74:	f7fd ff48 	bl	8011b08 <move_window>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013c7c:	7dfb      	ldrb	r3, [r7, #23]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d138      	bne.n	8013cf4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c86:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	330b      	adds	r3, #11
 8013c8c:	781a      	ldrb	r2, [r3, #0]
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	330b      	adds	r3, #11
 8013c92:	f042 0220 	orr.w	r2, r2, #32
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6818      	ldr	r0, [r3, #0]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	689b      	ldr	r3, [r3, #8]
 8013ca2:	461a      	mov	r2, r3
 8013ca4:	68f9      	ldr	r1, [r7, #12]
 8013ca6:	f7fe fccd 	bl	8012644 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f103 021c 	add.w	r2, r3, #28
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	4619      	mov	r1, r3
 8013cb6:	4610      	mov	r0, r2
 8013cb8:	f7fd fccc 	bl	8011654 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	3316      	adds	r3, #22
 8013cc0:	6939      	ldr	r1, [r7, #16]
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fd fcc6 	bl	8011654 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	3312      	adds	r3, #18
 8013ccc:	2100      	movs	r1, #0
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fd fca5 	bl	801161e <st_word>
					fs->wflag = 1;
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f7fd ff41 	bl	8011b64 <sync_fs>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	7d1b      	ldrb	r3, [r3, #20]
 8013cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cee:	b2da      	uxtb	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3718      	adds	r7, #24
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	274a0000 	.word	0x274a0000

08013d04 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f7ff ff79 	bl	8013c04 <f_sync>
 8013d12:	4603      	mov	r3, r0
 8013d14:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d16:	7bfb      	ldrb	r3, [r7, #15]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d118      	bne.n	8013d4e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	f107 0208 	add.w	r2, r7, #8
 8013d22:	4611      	mov	r1, r2
 8013d24:	4618      	mov	r0, r3
 8013d26:	f7ff fa2f 	bl	8013188 <validate>
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d2e:	7bfb      	ldrb	r3, [r7, #15]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d10c      	bne.n	8013d4e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	691b      	ldr	r3, [r3, #16]
 8013d38:	4618      	mov	r0, r3
 8013d3a:	f7fd fe41 	bl	80119c0 <dec_lock>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013d42:	7bfb      	ldrb	r3, [r7, #15]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d102      	bne.n	8013d4e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3710      	adds	r7, #16
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013d58:	b590      	push	{r4, r7, lr}
 8013d5a:	b091      	sub	sp, #68	; 0x44
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013d60:	f107 0108 	add.w	r1, r7, #8
 8013d64:	1d3b      	adds	r3, r7, #4
 8013d66:	2200      	movs	r2, #0
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fe ff87 	bl	8012c7c <find_volume>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013d74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d131      	bne.n	8013de0 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013d80:	687a      	ldr	r2, [r7, #4]
 8013d82:	f107 030c 	add.w	r3, r7, #12
 8013d86:	4611      	mov	r1, r2
 8013d88:	4618      	mov	r0, r3
 8013d8a:	f7fe fe47 	bl	8012a1c <follow_path>
 8013d8e:	4603      	mov	r3, r0
 8013d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d11a      	bne.n	8013dd2 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013da0:	b25b      	sxtb	r3, r3
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	da03      	bge.n	8013dae <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	697a      	ldr	r2, [r7, #20]
 8013daa:	619a      	str	r2, [r3, #24]
 8013dac:	e011      	b.n	8013dd2 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013dae:	7cbb      	ldrb	r3, [r7, #18]
 8013db0:	f003 0310 	and.w	r3, r3, #16
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d009      	beq.n	8013dcc <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dbc:	68bc      	ldr	r4, [r7, #8]
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7fe fc20 	bl	8012606 <ld_clust>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	61a3      	str	r3, [r4, #24]
 8013dca:	e002      	b.n	8013dd2 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013dcc:	2305      	movs	r3, #5
 8013dce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013dd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dd6:	2b04      	cmp	r3, #4
 8013dd8:	d102      	bne.n	8013de0 <f_chdir+0x88>
 8013dda:	2305      	movs	r3, #5
 8013ddc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013de0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	3744      	adds	r7, #68	; 0x44
 8013de8:	46bd      	mov	sp, r7
 8013dea:	bd90      	pop	{r4, r7, pc}

08013dec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b090      	sub	sp, #64	; 0x40
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f107 0208 	add.w	r2, r7, #8
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7ff f9c2 	bl	8013188 <validate>
 8013e04:	4603      	mov	r3, r0
 8013e06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d103      	bne.n	8013e1a <f_lseek+0x2e>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	7d5b      	ldrb	r3, [r3, #21]
 8013e16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013e1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d002      	beq.n	8013e28 <f_lseek+0x3c>
 8013e22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e26:	e201      	b.n	801422c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	f000 80d9 	beq.w	8013fe4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013e32:	683b      	ldr	r3, [r7, #0]
 8013e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e38:	d15a      	bne.n	8013ef0 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e3e:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e42:	1d1a      	adds	r2, r3, #4
 8013e44:	627a      	str	r2, [r7, #36]	; 0x24
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	617b      	str	r3, [r7, #20]
 8013e4a:	2302      	movs	r3, #2
 8013e4c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	689b      	ldr	r3, [r3, #8]
 8013e52:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d03a      	beq.n	8013ed0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5c:	613b      	str	r3, [r7, #16]
 8013e5e:	2300      	movs	r3, #0
 8013e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e64:	3302      	adds	r3, #2
 8013e66:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e6a:	60fb      	str	r3, [r7, #12]
 8013e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e6e:	3301      	adds	r3, #1
 8013e70:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7fd ff03 	bl	8011c82 <get_fat>
 8013e7c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e80:	2b01      	cmp	r3, #1
 8013e82:	d804      	bhi.n	8013e8e <f_lseek+0xa2>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2202      	movs	r2, #2
 8013e88:	755a      	strb	r2, [r3, #21]
 8013e8a:	2302      	movs	r3, #2
 8013e8c:	e1ce      	b.n	801422c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e94:	d104      	bne.n	8013ea0 <f_lseek+0xb4>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	2201      	movs	r2, #1
 8013e9a:	755a      	strb	r2, [r3, #21]
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	e1c5      	b.n	801422c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d0de      	beq.n	8013e68 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d809      	bhi.n	8013ec6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb4:	1d1a      	adds	r2, r3, #4
 8013eb6:	627a      	str	r2, [r7, #36]	; 0x24
 8013eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013eba:	601a      	str	r2, [r3, #0]
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ebe:	1d1a      	adds	r2, r3, #4
 8013ec0:	627a      	str	r2, [r7, #36]	; 0x24
 8013ec2:	693a      	ldr	r2, [r7, #16]
 8013ec4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	69db      	ldr	r3, [r3, #28]
 8013eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d3c4      	bcc.n	8013e5a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ed6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013eda:	697b      	ldr	r3, [r7, #20]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d803      	bhi.n	8013ee8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	e19f      	b.n	8014228 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013ee8:	2311      	movs	r3, #17
 8013eea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013eee:	e19b      	b.n	8014228 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d902      	bls.n	8013f00 <f_lseek+0x114>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	68db      	ldr	r3, [r3, #12]
 8013efe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	683a      	ldr	r2, [r7, #0]
 8013f04:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	f000 818d 	beq.w	8014228 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013f0e:	683b      	ldr	r3, [r7, #0]
 8013f10:	3b01      	subs	r3, #1
 8013f12:	4619      	mov	r1, r3
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7fe f998 	bl	801224a <clmt_clust>
 8013f1a:	4602      	mov	r2, r0
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013f20:	68ba      	ldr	r2, [r7, #8]
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	69db      	ldr	r3, [r3, #28]
 8013f26:	4619      	mov	r1, r3
 8013f28:	4610      	mov	r0, r2
 8013f2a:	f7fd fe8b 	bl	8011c44 <clust2sect>
 8013f2e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d104      	bne.n	8013f40 <f_lseek+0x154>
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2202      	movs	r2, #2
 8013f3a:	755a      	strb	r2, [r3, #21]
 8013f3c:	2302      	movs	r3, #2
 8013f3e:	e175      	b.n	801422c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	3b01      	subs	r3, #1
 8013f44:	68ba      	ldr	r2, [r7, #8]
 8013f46:	8992      	ldrh	r2, [r2, #12]
 8013f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	8952      	ldrh	r2, [r2, #10]
 8013f50:	3a01      	subs	r2, #1
 8013f52:	4013      	ands	r3, r2
 8013f54:	69ba      	ldr	r2, [r7, #24]
 8013f56:	4413      	add	r3, r2
 8013f58:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	699b      	ldr	r3, [r3, #24]
 8013f5e:	68ba      	ldr	r2, [r7, #8]
 8013f60:	8992      	ldrh	r2, [r2, #12]
 8013f62:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f66:	fb02 f201 	mul.w	r2, r2, r1
 8013f6a:	1a9b      	subs	r3, r3, r2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 815b 	beq.w	8014228 <f_lseek+0x43c>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6a1b      	ldr	r3, [r3, #32]
 8013f76:	69ba      	ldr	r2, [r7, #24]
 8013f78:	429a      	cmp	r2, r3
 8013f7a:	f000 8155 	beq.w	8014228 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	7d1b      	ldrb	r3, [r3, #20]
 8013f82:	b25b      	sxtb	r3, r3
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	da18      	bge.n	8013fba <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	7858      	ldrb	r0, [r3, #1]
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6a1a      	ldr	r2, [r3, #32]
 8013f96:	2301      	movs	r3, #1
 8013f98:	f7fd fac8 	bl	801152c <disk_write>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d004      	beq.n	8013fac <f_lseek+0x1c0>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2201      	movs	r2, #1
 8013fa6:	755a      	strb	r2, [r3, #21]
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e13f      	b.n	801422c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	7d1b      	ldrb	r3, [r3, #20]
 8013fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fb4:	b2da      	uxtb	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	7858      	ldrb	r0, [r3, #1]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	69ba      	ldr	r2, [r7, #24]
 8013fc8:	f7fd fa90 	bl	80114ec <disk_read>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d004      	beq.n	8013fdc <f_lseek+0x1f0>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2201      	movs	r2, #1
 8013fd6:	755a      	strb	r2, [r3, #21]
 8013fd8:	2301      	movs	r3, #1
 8013fda:	e127      	b.n	801422c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	69ba      	ldr	r2, [r7, #24]
 8013fe0:	621a      	str	r2, [r3, #32]
 8013fe2:	e121      	b.n	8014228 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	68db      	ldr	r3, [r3, #12]
 8013fe8:	683a      	ldr	r2, [r7, #0]
 8013fea:	429a      	cmp	r2, r3
 8013fec:	d908      	bls.n	8014000 <f_lseek+0x214>
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	7d1b      	ldrb	r3, [r3, #20]
 8013ff2:	f003 0302 	and.w	r3, r3, #2
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d102      	bne.n	8014000 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	68db      	ldr	r3, [r3, #12]
 8013ffe:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	699b      	ldr	r3, [r3, #24]
 8014004:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014006:	2300      	movs	r3, #0
 8014008:	637b      	str	r3, [r7, #52]	; 0x34
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801400e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	2b00      	cmp	r3, #0
 8014014:	f000 80b5 	beq.w	8014182 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014018:	68bb      	ldr	r3, [r7, #8]
 801401a:	895b      	ldrh	r3, [r3, #10]
 801401c:	461a      	mov	r2, r3
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	899b      	ldrh	r3, [r3, #12]
 8014022:	fb03 f302 	mul.w	r3, r3, r2
 8014026:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014028:	6a3b      	ldr	r3, [r7, #32]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d01b      	beq.n	8014066 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801402e:	683b      	ldr	r3, [r7, #0]
 8014030:	1e5a      	subs	r2, r3, #1
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	fbb2 f2f3 	udiv	r2, r2, r3
 8014038:	6a3b      	ldr	r3, [r7, #32]
 801403a:	1e59      	subs	r1, r3, #1
 801403c:	69fb      	ldr	r3, [r7, #28]
 801403e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014042:	429a      	cmp	r2, r3
 8014044:	d30f      	bcc.n	8014066 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014046:	6a3b      	ldr	r3, [r7, #32]
 8014048:	1e5a      	subs	r2, r3, #1
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	425b      	negs	r3, r3
 801404e:	401a      	ands	r2, r3
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	699b      	ldr	r3, [r3, #24]
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	1ad3      	subs	r3, r2, r3
 801405c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	69db      	ldr	r3, [r3, #28]
 8014062:	63bb      	str	r3, [r7, #56]	; 0x38
 8014064:	e022      	b.n	80140ac <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	689b      	ldr	r3, [r3, #8]
 801406a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801406c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801406e:	2b00      	cmp	r3, #0
 8014070:	d119      	bne.n	80140a6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	2100      	movs	r1, #0
 8014076:	4618      	mov	r0, r3
 8014078:	f7fe f84f 	bl	801211a <create_chain>
 801407c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014080:	2b01      	cmp	r3, #1
 8014082:	d104      	bne.n	801408e <f_lseek+0x2a2>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2202      	movs	r2, #2
 8014088:	755a      	strb	r2, [r3, #21]
 801408a:	2302      	movs	r3, #2
 801408c:	e0ce      	b.n	801422c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801408e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014094:	d104      	bne.n	80140a0 <f_lseek+0x2b4>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	2201      	movs	r2, #1
 801409a:	755a      	strb	r2, [r3, #21]
 801409c:	2301      	movs	r3, #1
 801409e:	e0c5      	b.n	801422c <f_lseek+0x440>
					fp->obj.sclust = clst;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140a4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140aa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80140ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d067      	beq.n	8014182 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80140b2:	e03a      	b.n	801412a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80140b4:	683a      	ldr	r2, [r7, #0]
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	1ad3      	subs	r3, r2, r3
 80140ba:	603b      	str	r3, [r7, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	699a      	ldr	r2, [r3, #24]
 80140c0:	69fb      	ldr	r3, [r7, #28]
 80140c2:	441a      	add	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	7d1b      	ldrb	r3, [r3, #20]
 80140cc:	f003 0302 	and.w	r3, r3, #2
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d00b      	beq.n	80140ec <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140d8:	4618      	mov	r0, r3
 80140da:	f7fe f81e 	bl	801211a <create_chain>
 80140de:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80140e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d108      	bne.n	80140f8 <f_lseek+0x30c>
							ofs = 0; break;
 80140e6:	2300      	movs	r3, #0
 80140e8:	603b      	str	r3, [r7, #0]
 80140ea:	e022      	b.n	8014132 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7fd fdc6 	bl	8011c82 <get_fat>
 80140f6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140fe:	d104      	bne.n	801410a <f_lseek+0x31e>
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2201      	movs	r2, #1
 8014104:	755a      	strb	r2, [r3, #21]
 8014106:	2301      	movs	r3, #1
 8014108:	e090      	b.n	801422c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	2b01      	cmp	r3, #1
 801410e:	d904      	bls.n	801411a <f_lseek+0x32e>
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	69db      	ldr	r3, [r3, #28]
 8014114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014116:	429a      	cmp	r2, r3
 8014118:	d304      	bcc.n	8014124 <f_lseek+0x338>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	2202      	movs	r2, #2
 801411e:	755a      	strb	r2, [r3, #21]
 8014120:	2302      	movs	r3, #2
 8014122:	e083      	b.n	801422c <f_lseek+0x440>
					fp->clust = clst;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014128:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801412a:	683a      	ldr	r2, [r7, #0]
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	429a      	cmp	r2, r3
 8014130:	d8c0      	bhi.n	80140b4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	699a      	ldr	r2, [r3, #24]
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	441a      	add	r2, r3
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	899b      	ldrh	r3, [r3, #12]
 8014142:	461a      	mov	r2, r3
 8014144:	683b      	ldr	r3, [r7, #0]
 8014146:	fbb3 f1f2 	udiv	r1, r3, r2
 801414a:	fb02 f201 	mul.w	r2, r2, r1
 801414e:	1a9b      	subs	r3, r3, r2
 8014150:	2b00      	cmp	r3, #0
 8014152:	d016      	beq.n	8014182 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014158:	4618      	mov	r0, r3
 801415a:	f7fd fd73 	bl	8011c44 <clust2sect>
 801415e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014162:	2b00      	cmp	r3, #0
 8014164:	d104      	bne.n	8014170 <f_lseek+0x384>
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2202      	movs	r2, #2
 801416a:	755a      	strb	r2, [r3, #21]
 801416c:	2302      	movs	r3, #2
 801416e:	e05d      	b.n	801422c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	899b      	ldrh	r3, [r3, #12]
 8014174:	461a      	mov	r2, r3
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	fbb3 f3f2 	udiv	r3, r3, r2
 801417c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801417e:	4413      	add	r3, r2
 8014180:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	699a      	ldr	r2, [r3, #24]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	429a      	cmp	r2, r3
 801418c:	d90a      	bls.n	80141a4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	699a      	ldr	r2, [r3, #24]
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	7d1b      	ldrb	r3, [r3, #20]
 801419a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801419e:	b2da      	uxtb	r2, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	699b      	ldr	r3, [r3, #24]
 80141a8:	68ba      	ldr	r2, [r7, #8]
 80141aa:	8992      	ldrh	r2, [r2, #12]
 80141ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80141b0:	fb02 f201 	mul.w	r2, r2, r1
 80141b4:	1a9b      	subs	r3, r3, r2
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d036      	beq.n	8014228 <f_lseek+0x43c>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a1b      	ldr	r3, [r3, #32]
 80141be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d031      	beq.n	8014228 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	7d1b      	ldrb	r3, [r3, #20]
 80141c8:	b25b      	sxtb	r3, r3
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	da18      	bge.n	8014200 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141ce:	68bb      	ldr	r3, [r7, #8]
 80141d0:	7858      	ldrb	r0, [r3, #1]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6a1a      	ldr	r2, [r3, #32]
 80141dc:	2301      	movs	r3, #1
 80141de:	f7fd f9a5 	bl	801152c <disk_write>
 80141e2:	4603      	mov	r3, r0
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d004      	beq.n	80141f2 <f_lseek+0x406>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2201      	movs	r2, #1
 80141ec:	755a      	strb	r2, [r3, #21]
 80141ee:	2301      	movs	r3, #1
 80141f0:	e01c      	b.n	801422c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	7d1b      	ldrb	r3, [r3, #20]
 80141f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80141fa:	b2da      	uxtb	r2, r3
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	7858      	ldrb	r0, [r3, #1]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801420a:	2301      	movs	r3, #1
 801420c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801420e:	f7fd f96d 	bl	80114ec <disk_read>
 8014212:	4603      	mov	r3, r0
 8014214:	2b00      	cmp	r3, #0
 8014216:	d004      	beq.n	8014222 <f_lseek+0x436>
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	2201      	movs	r2, #1
 801421c:	755a      	strb	r2, [r3, #21]
 801421e:	2301      	movs	r3, #1
 8014220:	e004      	b.n	801422c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014226:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014228:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801422c:	4618      	mov	r0, r3
 801422e:	3740      	adds	r7, #64	; 0x40
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}

08014234 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b09e      	sub	sp, #120	; 0x78
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014240:	f107 010c 	add.w	r1, r7, #12
 8014244:	1d3b      	adds	r3, r7, #4
 8014246:	2202      	movs	r2, #2
 8014248:	4618      	mov	r0, r3
 801424a:	f7fe fd17 	bl	8012c7c <find_volume>
 801424e:	4603      	mov	r3, r0
 8014250:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014258:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801425c:	2b00      	cmp	r3, #0
 801425e:	f040 80a4 	bne.w	80143aa <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014262:	687a      	ldr	r2, [r7, #4]
 8014264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014268:	4611      	mov	r1, r2
 801426a:	4618      	mov	r0, r3
 801426c:	f7fe fbd6 	bl	8012a1c <follow_path>
 8014270:	4603      	mov	r3, r0
 8014272:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014276:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801427a:	2b00      	cmp	r3, #0
 801427c:	d108      	bne.n	8014290 <f_unlink+0x5c>
 801427e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014282:	f003 0320 	and.w	r3, r3, #32
 8014286:	2b00      	cmp	r3, #0
 8014288:	d002      	beq.n	8014290 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801428a:	2306      	movs	r3, #6
 801428c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014290:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014294:	2b00      	cmp	r3, #0
 8014296:	d108      	bne.n	80142aa <f_unlink+0x76>
 8014298:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801429c:	2102      	movs	r1, #2
 801429e:	4618      	mov	r0, r3
 80142a0:	f7fd fa82 	bl	80117a8 <chk_lock>
 80142a4:	4603      	mov	r3, r0
 80142a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80142aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d17b      	bne.n	80143aa <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80142b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142b6:	b25b      	sxtb	r3, r3
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	da03      	bge.n	80142c4 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80142bc:	2306      	movs	r3, #6
 80142be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80142c2:	e008      	b.n	80142d6 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80142c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80142c8:	f003 0301 	and.w	r3, r3, #1
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d002      	beq.n	80142d6 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80142d0:	2307      	movs	r3, #7
 80142d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80142d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d13d      	bne.n	801435a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142e2:	4611      	mov	r1, r2
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7fe f98e 	bl	8012606 <ld_clust>
 80142ea:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80142ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80142f0:	f003 0310 	and.w	r3, r3, #16
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d030      	beq.n	801435a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	699b      	ldr	r3, [r3, #24]
 80142fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80142fe:	429a      	cmp	r2, r3
 8014300:	d103      	bne.n	801430a <f_unlink+0xd6>
						res = FR_DENIED;
 8014302:	2307      	movs	r3, #7
 8014304:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014308:	e027      	b.n	801435a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801430e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014310:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014312:	f107 0310 	add.w	r3, r7, #16
 8014316:	2100      	movs	r1, #0
 8014318:	4618      	mov	r0, r3
 801431a:	f7fd ffce 	bl	80122ba <dir_sdi>
 801431e:	4603      	mov	r3, r0
 8014320:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8014324:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014328:	2b00      	cmp	r3, #0
 801432a:	d116      	bne.n	801435a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801432c:	f107 0310 	add.w	r3, r7, #16
 8014330:	2100      	movs	r1, #0
 8014332:	4618      	mov	r0, r3
 8014334:	f7fe f9a6 	bl	8012684 <dir_read>
 8014338:	4603      	mov	r3, r0
 801433a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801433e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014342:	2b00      	cmp	r3, #0
 8014344:	d102      	bne.n	801434c <f_unlink+0x118>
 8014346:	2307      	movs	r3, #7
 8014348:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801434c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014350:	2b04      	cmp	r3, #4
 8014352:	d102      	bne.n	801435a <f_unlink+0x126>
 8014354:	2300      	movs	r3, #0
 8014356:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801435a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801435e:	2b00      	cmp	r3, #0
 8014360:	d123      	bne.n	80143aa <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014362:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014366:	4618      	mov	r0, r3
 8014368:	f7fe fa70 	bl	801284c <dir_remove>
 801436c:	4603      	mov	r3, r0
 801436e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014372:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014376:	2b00      	cmp	r3, #0
 8014378:	d10c      	bne.n	8014394 <f_unlink+0x160>
 801437a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801437c:	2b00      	cmp	r3, #0
 801437e:	d009      	beq.n	8014394 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014384:	2200      	movs	r2, #0
 8014386:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014388:	4618      	mov	r0, r3
 801438a:	f7fd fe61 	bl	8012050 <remove_chain>
 801438e:	4603      	mov	r3, r0
 8014390:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014394:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014398:	2b00      	cmp	r3, #0
 801439a:	d106      	bne.n	80143aa <f_unlink+0x176>
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fd fbe0 	bl	8011b64 <sync_fs>
 80143a4:	4603      	mov	r3, r0
 80143a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80143aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80143ae:	4618      	mov	r0, r3
 80143b0:	3778      	adds	r7, #120	; 0x78
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}
	...

080143b8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b096      	sub	sp, #88	; 0x58
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143c0:	f107 0108 	add.w	r1, r7, #8
 80143c4:	1d3b      	adds	r3, r7, #4
 80143c6:	2202      	movs	r2, #2
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fe fc57 	bl	8012c7c <find_volume>
 80143ce:	4603      	mov	r3, r0
 80143d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80143d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143dc:	2b00      	cmp	r3, #0
 80143de:	f040 80fe 	bne.w	80145de <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	f107 030c 	add.w	r3, r7, #12
 80143e8:	4611      	mov	r1, r2
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fe fb16 	bl	8012a1c <follow_path>
 80143f0:	4603      	mov	r3, r0
 80143f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80143f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d102      	bne.n	8014404 <f_mkdir+0x4c>
 80143fe:	2308      	movs	r3, #8
 8014400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014404:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014408:	2b04      	cmp	r3, #4
 801440a:	d108      	bne.n	801441e <f_mkdir+0x66>
 801440c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014410:	f003 0320 	and.w	r3, r3, #32
 8014414:	2b00      	cmp	r3, #0
 8014416:	d002      	beq.n	801441e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014418:	2306      	movs	r3, #6
 801441a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801441e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014422:	2b04      	cmp	r3, #4
 8014424:	f040 80db 	bne.w	80145de <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014428:	f107 030c 	add.w	r3, r7, #12
 801442c:	2100      	movs	r1, #0
 801442e:	4618      	mov	r0, r3
 8014430:	f7fd fe73 	bl	801211a <create_chain>
 8014434:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	895b      	ldrh	r3, [r3, #10]
 801443a:	461a      	mov	r2, r3
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	899b      	ldrh	r3, [r3, #12]
 8014440:	fb03 f302 	mul.w	r3, r3, r2
 8014444:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014446:	2300      	movs	r3, #0
 8014448:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801444c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801444e:	2b00      	cmp	r3, #0
 8014450:	d102      	bne.n	8014458 <f_mkdir+0xa0>
 8014452:	2307      	movs	r3, #7
 8014454:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801445a:	2b01      	cmp	r3, #1
 801445c:	d102      	bne.n	8014464 <f_mkdir+0xac>
 801445e:	2302      	movs	r3, #2
 8014460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801446a:	d102      	bne.n	8014472 <f_mkdir+0xba>
 801446c:	2301      	movs	r3, #1
 801446e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014472:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014476:	2b00      	cmp	r3, #0
 8014478:	d106      	bne.n	8014488 <f_mkdir+0xd0>
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	4618      	mov	r0, r3
 801447e:	f7fd faff 	bl	8011a80 <sync_window>
 8014482:	4603      	mov	r3, r0
 8014484:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014488:	4b58      	ldr	r3, [pc, #352]	; (80145ec <f_mkdir+0x234>)
 801448a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801448c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014490:	2b00      	cmp	r3, #0
 8014492:	d16c      	bne.n	801456e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014498:	4618      	mov	r0, r3
 801449a:	f7fd fbd3 	bl	8011c44 <clust2sect>
 801449e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	3338      	adds	r3, #56	; 0x38
 80144a4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	899b      	ldrh	r3, [r3, #12]
 80144aa:	461a      	mov	r2, r3
 80144ac:	2100      	movs	r1, #0
 80144ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144b0:	f7fd f91d 	bl	80116ee <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80144b4:	220b      	movs	r2, #11
 80144b6:	2120      	movs	r1, #32
 80144b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144ba:	f7fd f918 	bl	80116ee <mem_set>
					dir[DIR_Name] = '.';
 80144be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144c0:	222e      	movs	r2, #46	; 0x2e
 80144c2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80144c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144c6:	330b      	adds	r3, #11
 80144c8:	2210      	movs	r2, #16
 80144ca:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80144cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ce:	3316      	adds	r3, #22
 80144d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fd f8be 	bl	8011654 <st_dword>
					st_clust(fs, dir, dcl);
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80144dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80144de:	4618      	mov	r0, r3
 80144e0:	f7fe f8b0 	bl	8012644 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80144e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144e6:	3320      	adds	r3, #32
 80144e8:	2220      	movs	r2, #32
 80144ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7fd f8dd 	bl	80116ac <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80144f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144f4:	3321      	adds	r3, #33	; 0x21
 80144f6:	222e      	movs	r2, #46	; 0x2e
 80144f8:	701a      	strb	r2, [r3, #0]
 80144fa:	697b      	ldr	r3, [r7, #20]
 80144fc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	2b03      	cmp	r3, #3
 8014504:	d106      	bne.n	8014514 <f_mkdir+0x15c>
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801450c:	429a      	cmp	r2, r3
 801450e:	d101      	bne.n	8014514 <f_mkdir+0x15c>
 8014510:	2300      	movs	r3, #0
 8014512:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014514:	68b8      	ldr	r0, [r7, #8]
 8014516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014518:	3320      	adds	r3, #32
 801451a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801451c:	4619      	mov	r1, r3
 801451e:	f7fe f891 	bl	8012644 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	895b      	ldrh	r3, [r3, #10]
 8014526:	653b      	str	r3, [r7, #80]	; 0x50
 8014528:	e01c      	b.n	8014564 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801452a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801452c:	1c5a      	adds	r2, r3, #1
 801452e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014530:	68ba      	ldr	r2, [r7, #8]
 8014532:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014534:	68bb      	ldr	r3, [r7, #8]
 8014536:	2201      	movs	r2, #1
 8014538:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd fa9f 	bl	8011a80 <sync_window>
 8014542:	4603      	mov	r3, r0
 8014544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014548:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801454c:	2b00      	cmp	r3, #0
 801454e:	d10d      	bne.n	801456c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	899b      	ldrh	r3, [r3, #12]
 8014554:	461a      	mov	r2, r3
 8014556:	2100      	movs	r1, #0
 8014558:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801455a:	f7fd f8c8 	bl	80116ee <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801455e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014560:	3b01      	subs	r3, #1
 8014562:	653b      	str	r3, [r7, #80]	; 0x50
 8014564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014566:	2b00      	cmp	r3, #0
 8014568:	d1df      	bne.n	801452a <f_mkdir+0x172>
 801456a:	e000      	b.n	801456e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801456c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801456e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014572:	2b00      	cmp	r3, #0
 8014574:	d107      	bne.n	8014586 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014576:	f107 030c 	add.w	r3, r7, #12
 801457a:	4618      	mov	r0, r3
 801457c:	f7fe f934 	bl	80127e8 <dir_register>
 8014580:	4603      	mov	r3, r0
 8014582:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014586:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801458a:	2b00      	cmp	r3, #0
 801458c:	d120      	bne.n	80145d0 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014590:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014594:	3316      	adds	r3, #22
 8014596:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014598:	4618      	mov	r0, r3
 801459a:	f7fd f85b 	bl	8011654 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fe f84d 	bl	8012644 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80145aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ac:	330b      	adds	r3, #11
 80145ae:	2210      	movs	r2, #16
 80145b0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80145b2:	68bb      	ldr	r3, [r7, #8]
 80145b4:	2201      	movs	r2, #1
 80145b6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80145b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d10e      	bne.n	80145de <f_mkdir+0x226>
					res = sync_fs(fs);
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fd face 	bl	8011b64 <sync_fs>
 80145c8:	4603      	mov	r3, r0
 80145ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80145ce:	e006      	b.n	80145de <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80145d0:	f107 030c 	add.w	r3, r7, #12
 80145d4:	2200      	movs	r2, #0
 80145d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80145d8:	4618      	mov	r0, r3
 80145da:	f7fd fd39 	bl	8012050 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80145de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	3758      	adds	r7, #88	; 0x58
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}
 80145ea:	bf00      	nop
 80145ec:	274a0000 	.word	0x274a0000

080145f0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b088      	sub	sp, #32
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
	int n = 0;
 80145fc:	2300      	movs	r3, #0
 80145fe:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014604:	e017      	b.n	8014636 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014606:	f107 0310 	add.w	r3, r7, #16
 801460a:	f107 0114 	add.w	r1, r7, #20
 801460e:	2201      	movs	r2, #1
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f7ff f803 	bl	801361c <f_read>
		if (rc != 1) break;
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	2b01      	cmp	r3, #1
 801461a:	d112      	bne.n	8014642 <f_gets+0x52>
		c = s[0];
 801461c:	7d3b      	ldrb	r3, [r7, #20]
 801461e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014620:	69bb      	ldr	r3, [r7, #24]
 8014622:	1c5a      	adds	r2, r3, #1
 8014624:	61ba      	str	r2, [r7, #24]
 8014626:	7dfa      	ldrb	r2, [r7, #23]
 8014628:	701a      	strb	r2, [r3, #0]
		n++;
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	3301      	adds	r3, #1
 801462e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014630:	7dfb      	ldrb	r3, [r7, #23]
 8014632:	2b0a      	cmp	r3, #10
 8014634:	d007      	beq.n	8014646 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	3b01      	subs	r3, #1
 801463a:	69fa      	ldr	r2, [r7, #28]
 801463c:	429a      	cmp	r2, r3
 801463e:	dbe2      	blt.n	8014606 <f_gets+0x16>
 8014640:	e002      	b.n	8014648 <f_gets+0x58>
		if (rc != 1) break;
 8014642:	bf00      	nop
 8014644:	e000      	b.n	8014648 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014646:	bf00      	nop
	}
	*p = 0;
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	2200      	movs	r2, #0
 801464c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801464e:	69fb      	ldr	r3, [r7, #28]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d001      	beq.n	8014658 <f_gets+0x68>
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	e000      	b.n	801465a <f_gets+0x6a>
 8014658:	2300      	movs	r3, #0
}
 801465a:	4618      	mov	r0, r3
 801465c:	3720      	adds	r7, #32
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
	...

08014664 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014664:	b480      	push	{r7}
 8014666:	b087      	sub	sp, #28
 8014668:	af00      	add	r7, sp, #0
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	60b9      	str	r1, [r7, #8]
 801466e:	4613      	mov	r3, r2
 8014670:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014672:	2301      	movs	r3, #1
 8014674:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014676:	2300      	movs	r3, #0
 8014678:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801467a:	4b1f      	ldr	r3, [pc, #124]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 801467c:	7a5b      	ldrb	r3, [r3, #9]
 801467e:	b2db      	uxtb	r3, r3
 8014680:	2b00      	cmp	r3, #0
 8014682:	d131      	bne.n	80146e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014684:	4b1c      	ldr	r3, [pc, #112]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 8014686:	7a5b      	ldrb	r3, [r3, #9]
 8014688:	b2db      	uxtb	r3, r3
 801468a:	461a      	mov	r2, r3
 801468c:	4b1a      	ldr	r3, [pc, #104]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 801468e:	2100      	movs	r1, #0
 8014690:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014692:	4b19      	ldr	r3, [pc, #100]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 8014694:	7a5b      	ldrb	r3, [r3, #9]
 8014696:	b2db      	uxtb	r3, r3
 8014698:	4a17      	ldr	r2, [pc, #92]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	4413      	add	r3, r2
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80146a2:	4b15      	ldr	r3, [pc, #84]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 80146a4:	7a5b      	ldrb	r3, [r3, #9]
 80146a6:	b2db      	uxtb	r3, r3
 80146a8:	461a      	mov	r2, r3
 80146aa:	4b13      	ldr	r3, [pc, #76]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 80146ac:	4413      	add	r3, r2
 80146ae:	79fa      	ldrb	r2, [r7, #7]
 80146b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80146b2:	4b11      	ldr	r3, [pc, #68]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 80146b4:	7a5b      	ldrb	r3, [r3, #9]
 80146b6:	b2db      	uxtb	r3, r3
 80146b8:	1c5a      	adds	r2, r3, #1
 80146ba:	b2d1      	uxtb	r1, r2
 80146bc:	4a0e      	ldr	r2, [pc, #56]	; (80146f8 <FATFS_LinkDriverEx+0x94>)
 80146be:	7251      	strb	r1, [r2, #9]
 80146c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80146c2:	7dbb      	ldrb	r3, [r7, #22]
 80146c4:	3330      	adds	r3, #48	; 0x30
 80146c6:	b2da      	uxtb	r2, r3
 80146c8:	68bb      	ldr	r3, [r7, #8]
 80146ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80146cc:	68bb      	ldr	r3, [r7, #8]
 80146ce:	3301      	adds	r3, #1
 80146d0:	223a      	movs	r2, #58	; 0x3a
 80146d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80146d4:	68bb      	ldr	r3, [r7, #8]
 80146d6:	3302      	adds	r3, #2
 80146d8:	222f      	movs	r2, #47	; 0x2f
 80146da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	3303      	adds	r3, #3
 80146e0:	2200      	movs	r2, #0
 80146e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80146e4:	2300      	movs	r3, #0
 80146e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80146e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	371c      	adds	r7, #28
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	200422ec 	.word	0x200422ec

080146fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
 8014704:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014706:	2200      	movs	r2, #0
 8014708:	6839      	ldr	r1, [r7, #0]
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f7ff ffaa 	bl	8014664 <FATFS_LinkDriverEx>
 8014710:	4603      	mov	r3, r0
}
 8014712:	4618      	mov	r0, r3
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <__cxa_guard_acquire>:
 801471a:	6803      	ldr	r3, [r0, #0]
 801471c:	07db      	lsls	r3, r3, #31
 801471e:	d406      	bmi.n	801472e <__cxa_guard_acquire+0x14>
 8014720:	7843      	ldrb	r3, [r0, #1]
 8014722:	b103      	cbz	r3, 8014726 <__cxa_guard_acquire+0xc>
 8014724:	deff      	udf	#255	; 0xff
 8014726:	2301      	movs	r3, #1
 8014728:	7043      	strb	r3, [r0, #1]
 801472a:	4618      	mov	r0, r3
 801472c:	4770      	bx	lr
 801472e:	2000      	movs	r0, #0
 8014730:	4770      	bx	lr

08014732 <__cxa_guard_release>:
 8014732:	2301      	movs	r3, #1
 8014734:	6003      	str	r3, [r0, #0]
 8014736:	4770      	bx	lr

08014738 <cos>:
 8014738:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801473a:	ec51 0b10 	vmov	r0, r1, d0
 801473e:	4a1e      	ldr	r2, [pc, #120]	; (80147b8 <cos+0x80>)
 8014740:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014744:	4293      	cmp	r3, r2
 8014746:	dc06      	bgt.n	8014756 <cos+0x1e>
 8014748:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80147b0 <cos+0x78>
 801474c:	f000 fa74 	bl	8014c38 <__kernel_cos>
 8014750:	ec51 0b10 	vmov	r0, r1, d0
 8014754:	e007      	b.n	8014766 <cos+0x2e>
 8014756:	4a19      	ldr	r2, [pc, #100]	; (80147bc <cos+0x84>)
 8014758:	4293      	cmp	r3, r2
 801475a:	dd09      	ble.n	8014770 <cos+0x38>
 801475c:	ee10 2a10 	vmov	r2, s0
 8014760:	460b      	mov	r3, r1
 8014762:	f7eb fda9 	bl	80002b8 <__aeabi_dsub>
 8014766:	ec41 0b10 	vmov	d0, r0, r1
 801476a:	b005      	add	sp, #20
 801476c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014770:	4668      	mov	r0, sp
 8014772:	f000 f86d 	bl	8014850 <__ieee754_rem_pio2>
 8014776:	f000 0003 	and.w	r0, r0, #3
 801477a:	2801      	cmp	r0, #1
 801477c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014780:	ed9d 0b00 	vldr	d0, [sp]
 8014784:	d007      	beq.n	8014796 <cos+0x5e>
 8014786:	2802      	cmp	r0, #2
 8014788:	d00e      	beq.n	80147a8 <cos+0x70>
 801478a:	2800      	cmp	r0, #0
 801478c:	d0de      	beq.n	801474c <cos+0x14>
 801478e:	2001      	movs	r0, #1
 8014790:	f000 fe5a 	bl	8015448 <__kernel_sin>
 8014794:	e7dc      	b.n	8014750 <cos+0x18>
 8014796:	f000 fe57 	bl	8015448 <__kernel_sin>
 801479a:	ec53 2b10 	vmov	r2, r3, d0
 801479e:	ee10 0a10 	vmov	r0, s0
 80147a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147a6:	e7de      	b.n	8014766 <cos+0x2e>
 80147a8:	f000 fa46 	bl	8014c38 <__kernel_cos>
 80147ac:	e7f5      	b.n	801479a <cos+0x62>
 80147ae:	bf00      	nop
	...
 80147b8:	3fe921fb 	.word	0x3fe921fb
 80147bc:	7fefffff 	.word	0x7fefffff

080147c0 <sin>:
 80147c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147c2:	ec51 0b10 	vmov	r0, r1, d0
 80147c6:	4a20      	ldr	r2, [pc, #128]	; (8014848 <sin+0x88>)
 80147c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80147cc:	4293      	cmp	r3, r2
 80147ce:	dc07      	bgt.n	80147e0 <sin+0x20>
 80147d0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014840 <sin+0x80>
 80147d4:	2000      	movs	r0, #0
 80147d6:	f000 fe37 	bl	8015448 <__kernel_sin>
 80147da:	ec51 0b10 	vmov	r0, r1, d0
 80147de:	e007      	b.n	80147f0 <sin+0x30>
 80147e0:	4a1a      	ldr	r2, [pc, #104]	; (801484c <sin+0x8c>)
 80147e2:	4293      	cmp	r3, r2
 80147e4:	dd09      	ble.n	80147fa <sin+0x3a>
 80147e6:	ee10 2a10 	vmov	r2, s0
 80147ea:	460b      	mov	r3, r1
 80147ec:	f7eb fd64 	bl	80002b8 <__aeabi_dsub>
 80147f0:	ec41 0b10 	vmov	d0, r0, r1
 80147f4:	b005      	add	sp, #20
 80147f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80147fa:	4668      	mov	r0, sp
 80147fc:	f000 f828 	bl	8014850 <__ieee754_rem_pio2>
 8014800:	f000 0003 	and.w	r0, r0, #3
 8014804:	2801      	cmp	r0, #1
 8014806:	ed9d 1b02 	vldr	d1, [sp, #8]
 801480a:	ed9d 0b00 	vldr	d0, [sp]
 801480e:	d004      	beq.n	801481a <sin+0x5a>
 8014810:	2802      	cmp	r0, #2
 8014812:	d005      	beq.n	8014820 <sin+0x60>
 8014814:	b970      	cbnz	r0, 8014834 <sin+0x74>
 8014816:	2001      	movs	r0, #1
 8014818:	e7dd      	b.n	80147d6 <sin+0x16>
 801481a:	f000 fa0d 	bl	8014c38 <__kernel_cos>
 801481e:	e7dc      	b.n	80147da <sin+0x1a>
 8014820:	2001      	movs	r0, #1
 8014822:	f000 fe11 	bl	8015448 <__kernel_sin>
 8014826:	ec53 2b10 	vmov	r2, r3, d0
 801482a:	ee10 0a10 	vmov	r0, s0
 801482e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014832:	e7dd      	b.n	80147f0 <sin+0x30>
 8014834:	f000 fa00 	bl	8014c38 <__kernel_cos>
 8014838:	e7f5      	b.n	8014826 <sin+0x66>
 801483a:	bf00      	nop
 801483c:	f3af 8000 	nop.w
	...
 8014848:	3fe921fb 	.word	0x3fe921fb
 801484c:	7fefffff 	.word	0x7fefffff

08014850 <__ieee754_rem_pio2>:
 8014850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014854:	ec57 6b10 	vmov	r6, r7, d0
 8014858:	4bc3      	ldr	r3, [pc, #780]	; (8014b68 <__ieee754_rem_pio2+0x318>)
 801485a:	b08d      	sub	sp, #52	; 0x34
 801485c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014860:	4598      	cmp	r8, r3
 8014862:	4604      	mov	r4, r0
 8014864:	9704      	str	r7, [sp, #16]
 8014866:	dc07      	bgt.n	8014878 <__ieee754_rem_pio2+0x28>
 8014868:	2200      	movs	r2, #0
 801486a:	2300      	movs	r3, #0
 801486c:	ed84 0b00 	vstr	d0, [r4]
 8014870:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014874:	2500      	movs	r5, #0
 8014876:	e027      	b.n	80148c8 <__ieee754_rem_pio2+0x78>
 8014878:	4bbc      	ldr	r3, [pc, #752]	; (8014b6c <__ieee754_rem_pio2+0x31c>)
 801487a:	4598      	cmp	r8, r3
 801487c:	dc75      	bgt.n	801496a <__ieee754_rem_pio2+0x11a>
 801487e:	9b04      	ldr	r3, [sp, #16]
 8014880:	4dbb      	ldr	r5, [pc, #748]	; (8014b70 <__ieee754_rem_pio2+0x320>)
 8014882:	2b00      	cmp	r3, #0
 8014884:	ee10 0a10 	vmov	r0, s0
 8014888:	a3a9      	add	r3, pc, #676	; (adr r3, 8014b30 <__ieee754_rem_pio2+0x2e0>)
 801488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801488e:	4639      	mov	r1, r7
 8014890:	dd36      	ble.n	8014900 <__ieee754_rem_pio2+0xb0>
 8014892:	f7eb fd11 	bl	80002b8 <__aeabi_dsub>
 8014896:	45a8      	cmp	r8, r5
 8014898:	4606      	mov	r6, r0
 801489a:	460f      	mov	r7, r1
 801489c:	d018      	beq.n	80148d0 <__ieee754_rem_pio2+0x80>
 801489e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014b38 <__ieee754_rem_pio2+0x2e8>)
 80148a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148a4:	f7eb fd08 	bl	80002b8 <__aeabi_dsub>
 80148a8:	4602      	mov	r2, r0
 80148aa:	460b      	mov	r3, r1
 80148ac:	e9c4 2300 	strd	r2, r3, [r4]
 80148b0:	4630      	mov	r0, r6
 80148b2:	4639      	mov	r1, r7
 80148b4:	f7eb fd00 	bl	80002b8 <__aeabi_dsub>
 80148b8:	a39f      	add	r3, pc, #636	; (adr r3, 8014b38 <__ieee754_rem_pio2+0x2e8>)
 80148ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148be:	f7eb fcfb 	bl	80002b8 <__aeabi_dsub>
 80148c2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148c6:	2501      	movs	r5, #1
 80148c8:	4628      	mov	r0, r5
 80148ca:	b00d      	add	sp, #52	; 0x34
 80148cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d0:	a39b      	add	r3, pc, #620	; (adr r3, 8014b40 <__ieee754_rem_pio2+0x2f0>)
 80148d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d6:	f7eb fcef 	bl	80002b8 <__aeabi_dsub>
 80148da:	a39b      	add	r3, pc, #620	; (adr r3, 8014b48 <__ieee754_rem_pio2+0x2f8>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	4606      	mov	r6, r0
 80148e2:	460f      	mov	r7, r1
 80148e4:	f7eb fce8 	bl	80002b8 <__aeabi_dsub>
 80148e8:	4602      	mov	r2, r0
 80148ea:	460b      	mov	r3, r1
 80148ec:	e9c4 2300 	strd	r2, r3, [r4]
 80148f0:	4630      	mov	r0, r6
 80148f2:	4639      	mov	r1, r7
 80148f4:	f7eb fce0 	bl	80002b8 <__aeabi_dsub>
 80148f8:	a393      	add	r3, pc, #588	; (adr r3, 8014b48 <__ieee754_rem_pio2+0x2f8>)
 80148fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fe:	e7de      	b.n	80148be <__ieee754_rem_pio2+0x6e>
 8014900:	f7eb fcdc 	bl	80002bc <__adddf3>
 8014904:	45a8      	cmp	r8, r5
 8014906:	4606      	mov	r6, r0
 8014908:	460f      	mov	r7, r1
 801490a:	d016      	beq.n	801493a <__ieee754_rem_pio2+0xea>
 801490c:	a38a      	add	r3, pc, #552	; (adr r3, 8014b38 <__ieee754_rem_pio2+0x2e8>)
 801490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014912:	f7eb fcd3 	bl	80002bc <__adddf3>
 8014916:	4602      	mov	r2, r0
 8014918:	460b      	mov	r3, r1
 801491a:	e9c4 2300 	strd	r2, r3, [r4]
 801491e:	4630      	mov	r0, r6
 8014920:	4639      	mov	r1, r7
 8014922:	f7eb fcc9 	bl	80002b8 <__aeabi_dsub>
 8014926:	a384      	add	r3, pc, #528	; (adr r3, 8014b38 <__ieee754_rem_pio2+0x2e8>)
 8014928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492c:	f7eb fcc6 	bl	80002bc <__adddf3>
 8014930:	f04f 35ff 	mov.w	r5, #4294967295
 8014934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014938:	e7c6      	b.n	80148c8 <__ieee754_rem_pio2+0x78>
 801493a:	a381      	add	r3, pc, #516	; (adr r3, 8014b40 <__ieee754_rem_pio2+0x2f0>)
 801493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014940:	f7eb fcbc 	bl	80002bc <__adddf3>
 8014944:	a380      	add	r3, pc, #512	; (adr r3, 8014b48 <__ieee754_rem_pio2+0x2f8>)
 8014946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494a:	4606      	mov	r6, r0
 801494c:	460f      	mov	r7, r1
 801494e:	f7eb fcb5 	bl	80002bc <__adddf3>
 8014952:	4602      	mov	r2, r0
 8014954:	460b      	mov	r3, r1
 8014956:	e9c4 2300 	strd	r2, r3, [r4]
 801495a:	4630      	mov	r0, r6
 801495c:	4639      	mov	r1, r7
 801495e:	f7eb fcab 	bl	80002b8 <__aeabi_dsub>
 8014962:	a379      	add	r3, pc, #484	; (adr r3, 8014b48 <__ieee754_rem_pio2+0x2f8>)
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014968:	e7e0      	b.n	801492c <__ieee754_rem_pio2+0xdc>
 801496a:	4b82      	ldr	r3, [pc, #520]	; (8014b74 <__ieee754_rem_pio2+0x324>)
 801496c:	4598      	cmp	r8, r3
 801496e:	f300 80d0 	bgt.w	8014b12 <__ieee754_rem_pio2+0x2c2>
 8014972:	f000 fe23 	bl	80155bc <fabs>
 8014976:	ec57 6b10 	vmov	r6, r7, d0
 801497a:	ee10 0a10 	vmov	r0, s0
 801497e:	a374      	add	r3, pc, #464	; (adr r3, 8014b50 <__ieee754_rem_pio2+0x300>)
 8014980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014984:	4639      	mov	r1, r7
 8014986:	f7eb fe4f 	bl	8000628 <__aeabi_dmul>
 801498a:	2200      	movs	r2, #0
 801498c:	4b7a      	ldr	r3, [pc, #488]	; (8014b78 <__ieee754_rem_pio2+0x328>)
 801498e:	f7eb fc95 	bl	80002bc <__adddf3>
 8014992:	f7ec f8f9 	bl	8000b88 <__aeabi_d2iz>
 8014996:	4605      	mov	r5, r0
 8014998:	f7eb fddc 	bl	8000554 <__aeabi_i2d>
 801499c:	a364      	add	r3, pc, #400	; (adr r3, 8014b30 <__ieee754_rem_pio2+0x2e0>)
 801499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149a6:	f7eb fe3f 	bl	8000628 <__aeabi_dmul>
 80149aa:	4602      	mov	r2, r0
 80149ac:	460b      	mov	r3, r1
 80149ae:	4630      	mov	r0, r6
 80149b0:	4639      	mov	r1, r7
 80149b2:	f7eb fc81 	bl	80002b8 <__aeabi_dsub>
 80149b6:	a360      	add	r3, pc, #384	; (adr r3, 8014b38 <__ieee754_rem_pio2+0x2e8>)
 80149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149bc:	4682      	mov	sl, r0
 80149be:	468b      	mov	fp, r1
 80149c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149c4:	f7eb fe30 	bl	8000628 <__aeabi_dmul>
 80149c8:	2d1f      	cmp	r5, #31
 80149ca:	4606      	mov	r6, r0
 80149cc:	460f      	mov	r7, r1
 80149ce:	dc0c      	bgt.n	80149ea <__ieee754_rem_pio2+0x19a>
 80149d0:	1e6a      	subs	r2, r5, #1
 80149d2:	4b6a      	ldr	r3, [pc, #424]	; (8014b7c <__ieee754_rem_pio2+0x32c>)
 80149d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80149d8:	4543      	cmp	r3, r8
 80149da:	d006      	beq.n	80149ea <__ieee754_rem_pio2+0x19a>
 80149dc:	4632      	mov	r2, r6
 80149de:	463b      	mov	r3, r7
 80149e0:	4650      	mov	r0, sl
 80149e2:	4659      	mov	r1, fp
 80149e4:	f7eb fc68 	bl	80002b8 <__aeabi_dsub>
 80149e8:	e00e      	b.n	8014a08 <__ieee754_rem_pio2+0x1b8>
 80149ea:	4632      	mov	r2, r6
 80149ec:	463b      	mov	r3, r7
 80149ee:	4650      	mov	r0, sl
 80149f0:	4659      	mov	r1, fp
 80149f2:	f7eb fc61 	bl	80002b8 <__aeabi_dsub>
 80149f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80149fa:	9305      	str	r3, [sp, #20]
 80149fc:	9a05      	ldr	r2, [sp, #20]
 80149fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	2b10      	cmp	r3, #16
 8014a06:	dc02      	bgt.n	8014a0e <__ieee754_rem_pio2+0x1be>
 8014a08:	e9c4 0100 	strd	r0, r1, [r4]
 8014a0c:	e039      	b.n	8014a82 <__ieee754_rem_pio2+0x232>
 8014a0e:	a34c      	add	r3, pc, #304	; (adr r3, 8014b40 <__ieee754_rem_pio2+0x2f0>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a18:	f7eb fe06 	bl	8000628 <__aeabi_dmul>
 8014a1c:	4606      	mov	r6, r0
 8014a1e:	460f      	mov	r7, r1
 8014a20:	4602      	mov	r2, r0
 8014a22:	460b      	mov	r3, r1
 8014a24:	4650      	mov	r0, sl
 8014a26:	4659      	mov	r1, fp
 8014a28:	f7eb fc46 	bl	80002b8 <__aeabi_dsub>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	460b      	mov	r3, r1
 8014a30:	4680      	mov	r8, r0
 8014a32:	4689      	mov	r9, r1
 8014a34:	4650      	mov	r0, sl
 8014a36:	4659      	mov	r1, fp
 8014a38:	f7eb fc3e 	bl	80002b8 <__aeabi_dsub>
 8014a3c:	4632      	mov	r2, r6
 8014a3e:	463b      	mov	r3, r7
 8014a40:	f7eb fc3a 	bl	80002b8 <__aeabi_dsub>
 8014a44:	a340      	add	r3, pc, #256	; (adr r3, 8014b48 <__ieee754_rem_pio2+0x2f8>)
 8014a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a4a:	4606      	mov	r6, r0
 8014a4c:	460f      	mov	r7, r1
 8014a4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a52:	f7eb fde9 	bl	8000628 <__aeabi_dmul>
 8014a56:	4632      	mov	r2, r6
 8014a58:	463b      	mov	r3, r7
 8014a5a:	f7eb fc2d 	bl	80002b8 <__aeabi_dsub>
 8014a5e:	4602      	mov	r2, r0
 8014a60:	460b      	mov	r3, r1
 8014a62:	4606      	mov	r6, r0
 8014a64:	460f      	mov	r7, r1
 8014a66:	4640      	mov	r0, r8
 8014a68:	4649      	mov	r1, r9
 8014a6a:	f7eb fc25 	bl	80002b8 <__aeabi_dsub>
 8014a6e:	9a05      	ldr	r2, [sp, #20]
 8014a70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a74:	1ad3      	subs	r3, r2, r3
 8014a76:	2b31      	cmp	r3, #49	; 0x31
 8014a78:	dc20      	bgt.n	8014abc <__ieee754_rem_pio2+0x26c>
 8014a7a:	e9c4 0100 	strd	r0, r1, [r4]
 8014a7e:	46c2      	mov	sl, r8
 8014a80:	46cb      	mov	fp, r9
 8014a82:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014a86:	4650      	mov	r0, sl
 8014a88:	4642      	mov	r2, r8
 8014a8a:	464b      	mov	r3, r9
 8014a8c:	4659      	mov	r1, fp
 8014a8e:	f7eb fc13 	bl	80002b8 <__aeabi_dsub>
 8014a92:	463b      	mov	r3, r7
 8014a94:	4632      	mov	r2, r6
 8014a96:	f7eb fc0f 	bl	80002b8 <__aeabi_dsub>
 8014a9a:	9b04      	ldr	r3, [sp, #16]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014aa2:	f6bf af11 	bge.w	80148c8 <__ieee754_rem_pio2+0x78>
 8014aa6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014aaa:	6063      	str	r3, [r4, #4]
 8014aac:	f8c4 8000 	str.w	r8, [r4]
 8014ab0:	60a0      	str	r0, [r4, #8]
 8014ab2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ab6:	60e3      	str	r3, [r4, #12]
 8014ab8:	426d      	negs	r5, r5
 8014aba:	e705      	b.n	80148c8 <__ieee754_rem_pio2+0x78>
 8014abc:	a326      	add	r3, pc, #152	; (adr r3, 8014b58 <__ieee754_rem_pio2+0x308>)
 8014abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ac6:	f7eb fdaf 	bl	8000628 <__aeabi_dmul>
 8014aca:	4606      	mov	r6, r0
 8014acc:	460f      	mov	r7, r1
 8014ace:	4602      	mov	r2, r0
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	4640      	mov	r0, r8
 8014ad4:	4649      	mov	r1, r9
 8014ad6:	f7eb fbef 	bl	80002b8 <__aeabi_dsub>
 8014ada:	4602      	mov	r2, r0
 8014adc:	460b      	mov	r3, r1
 8014ade:	4682      	mov	sl, r0
 8014ae0:	468b      	mov	fp, r1
 8014ae2:	4640      	mov	r0, r8
 8014ae4:	4649      	mov	r1, r9
 8014ae6:	f7eb fbe7 	bl	80002b8 <__aeabi_dsub>
 8014aea:	4632      	mov	r2, r6
 8014aec:	463b      	mov	r3, r7
 8014aee:	f7eb fbe3 	bl	80002b8 <__aeabi_dsub>
 8014af2:	a31b      	add	r3, pc, #108	; (adr r3, 8014b60 <__ieee754_rem_pio2+0x310>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	4606      	mov	r6, r0
 8014afa:	460f      	mov	r7, r1
 8014afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b00:	f7eb fd92 	bl	8000628 <__aeabi_dmul>
 8014b04:	4632      	mov	r2, r6
 8014b06:	463b      	mov	r3, r7
 8014b08:	f7eb fbd6 	bl	80002b8 <__aeabi_dsub>
 8014b0c:	4606      	mov	r6, r0
 8014b0e:	460f      	mov	r7, r1
 8014b10:	e764      	b.n	80149dc <__ieee754_rem_pio2+0x18c>
 8014b12:	4b1b      	ldr	r3, [pc, #108]	; (8014b80 <__ieee754_rem_pio2+0x330>)
 8014b14:	4598      	cmp	r8, r3
 8014b16:	dd35      	ble.n	8014b84 <__ieee754_rem_pio2+0x334>
 8014b18:	ee10 2a10 	vmov	r2, s0
 8014b1c:	463b      	mov	r3, r7
 8014b1e:	4630      	mov	r0, r6
 8014b20:	4639      	mov	r1, r7
 8014b22:	f7eb fbc9 	bl	80002b8 <__aeabi_dsub>
 8014b26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b2a:	e9c4 0100 	strd	r0, r1, [r4]
 8014b2e:	e6a1      	b.n	8014874 <__ieee754_rem_pio2+0x24>
 8014b30:	54400000 	.word	0x54400000
 8014b34:	3ff921fb 	.word	0x3ff921fb
 8014b38:	1a626331 	.word	0x1a626331
 8014b3c:	3dd0b461 	.word	0x3dd0b461
 8014b40:	1a600000 	.word	0x1a600000
 8014b44:	3dd0b461 	.word	0x3dd0b461
 8014b48:	2e037073 	.word	0x2e037073
 8014b4c:	3ba3198a 	.word	0x3ba3198a
 8014b50:	6dc9c883 	.word	0x6dc9c883
 8014b54:	3fe45f30 	.word	0x3fe45f30
 8014b58:	2e000000 	.word	0x2e000000
 8014b5c:	3ba3198a 	.word	0x3ba3198a
 8014b60:	252049c1 	.word	0x252049c1
 8014b64:	397b839a 	.word	0x397b839a
 8014b68:	3fe921fb 	.word	0x3fe921fb
 8014b6c:	4002d97b 	.word	0x4002d97b
 8014b70:	3ff921fb 	.word	0x3ff921fb
 8014b74:	413921fb 	.word	0x413921fb
 8014b78:	3fe00000 	.word	0x3fe00000
 8014b7c:	0801a0e4 	.word	0x0801a0e4
 8014b80:	7fefffff 	.word	0x7fefffff
 8014b84:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014b88:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014b8c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014b90:	4630      	mov	r0, r6
 8014b92:	460f      	mov	r7, r1
 8014b94:	f7eb fff8 	bl	8000b88 <__aeabi_d2iz>
 8014b98:	f7eb fcdc 	bl	8000554 <__aeabi_i2d>
 8014b9c:	4602      	mov	r2, r0
 8014b9e:	460b      	mov	r3, r1
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	4639      	mov	r1, r7
 8014ba4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014ba8:	f7eb fb86 	bl	80002b8 <__aeabi_dsub>
 8014bac:	2200      	movs	r2, #0
 8014bae:	4b1f      	ldr	r3, [pc, #124]	; (8014c2c <__ieee754_rem_pio2+0x3dc>)
 8014bb0:	f7eb fd3a 	bl	8000628 <__aeabi_dmul>
 8014bb4:	460f      	mov	r7, r1
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	f7eb ffe6 	bl	8000b88 <__aeabi_d2iz>
 8014bbc:	f7eb fcca 	bl	8000554 <__aeabi_i2d>
 8014bc0:	4602      	mov	r2, r0
 8014bc2:	460b      	mov	r3, r1
 8014bc4:	4630      	mov	r0, r6
 8014bc6:	4639      	mov	r1, r7
 8014bc8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bcc:	f7eb fb74 	bl	80002b8 <__aeabi_dsub>
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	4b16      	ldr	r3, [pc, #88]	; (8014c2c <__ieee754_rem_pio2+0x3dc>)
 8014bd4:	f7eb fd28 	bl	8000628 <__aeabi_dmul>
 8014bd8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014bdc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014be0:	f04f 0803 	mov.w	r8, #3
 8014be4:	2600      	movs	r6, #0
 8014be6:	2700      	movs	r7, #0
 8014be8:	4632      	mov	r2, r6
 8014bea:	463b      	mov	r3, r7
 8014bec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014bf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8014bf4:	f7eb ff80 	bl	8000af8 <__aeabi_dcmpeq>
 8014bf8:	b9b0      	cbnz	r0, 8014c28 <__ieee754_rem_pio2+0x3d8>
 8014bfa:	4b0d      	ldr	r3, [pc, #52]	; (8014c30 <__ieee754_rem_pio2+0x3e0>)
 8014bfc:	9301      	str	r3, [sp, #4]
 8014bfe:	2302      	movs	r3, #2
 8014c00:	9300      	str	r3, [sp, #0]
 8014c02:	462a      	mov	r2, r5
 8014c04:	4643      	mov	r3, r8
 8014c06:	4621      	mov	r1, r4
 8014c08:	a806      	add	r0, sp, #24
 8014c0a:	f000 f8dd 	bl	8014dc8 <__kernel_rem_pio2>
 8014c0e:	9b04      	ldr	r3, [sp, #16]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	4605      	mov	r5, r0
 8014c14:	f6bf ae58 	bge.w	80148c8 <__ieee754_rem_pio2+0x78>
 8014c18:	6863      	ldr	r3, [r4, #4]
 8014c1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c1e:	6063      	str	r3, [r4, #4]
 8014c20:	68e3      	ldr	r3, [r4, #12]
 8014c22:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c26:	e746      	b.n	8014ab6 <__ieee754_rem_pio2+0x266>
 8014c28:	46d0      	mov	r8, sl
 8014c2a:	e7dd      	b.n	8014be8 <__ieee754_rem_pio2+0x398>
 8014c2c:	41700000 	.word	0x41700000
 8014c30:	0801a164 	.word	0x0801a164
 8014c34:	00000000 	.word	0x00000000

08014c38 <__kernel_cos>:
 8014c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c3c:	ec59 8b10 	vmov	r8, r9, d0
 8014c40:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014c44:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014c48:	ed2d 8b02 	vpush	{d8}
 8014c4c:	eeb0 8a41 	vmov.f32	s16, s2
 8014c50:	eef0 8a61 	vmov.f32	s17, s3
 8014c54:	da07      	bge.n	8014c66 <__kernel_cos+0x2e>
 8014c56:	ee10 0a10 	vmov	r0, s0
 8014c5a:	4649      	mov	r1, r9
 8014c5c:	f7eb ff94 	bl	8000b88 <__aeabi_d2iz>
 8014c60:	2800      	cmp	r0, #0
 8014c62:	f000 8089 	beq.w	8014d78 <__kernel_cos+0x140>
 8014c66:	4642      	mov	r2, r8
 8014c68:	464b      	mov	r3, r9
 8014c6a:	4640      	mov	r0, r8
 8014c6c:	4649      	mov	r1, r9
 8014c6e:	f7eb fcdb 	bl	8000628 <__aeabi_dmul>
 8014c72:	2200      	movs	r2, #0
 8014c74:	4b4e      	ldr	r3, [pc, #312]	; (8014db0 <__kernel_cos+0x178>)
 8014c76:	4604      	mov	r4, r0
 8014c78:	460d      	mov	r5, r1
 8014c7a:	f7eb fcd5 	bl	8000628 <__aeabi_dmul>
 8014c7e:	a340      	add	r3, pc, #256	; (adr r3, 8014d80 <__kernel_cos+0x148>)
 8014c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c84:	4682      	mov	sl, r0
 8014c86:	468b      	mov	fp, r1
 8014c88:	4620      	mov	r0, r4
 8014c8a:	4629      	mov	r1, r5
 8014c8c:	f7eb fccc 	bl	8000628 <__aeabi_dmul>
 8014c90:	a33d      	add	r3, pc, #244	; (adr r3, 8014d88 <__kernel_cos+0x150>)
 8014c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c96:	f7eb fb11 	bl	80002bc <__adddf3>
 8014c9a:	4622      	mov	r2, r4
 8014c9c:	462b      	mov	r3, r5
 8014c9e:	f7eb fcc3 	bl	8000628 <__aeabi_dmul>
 8014ca2:	a33b      	add	r3, pc, #236	; (adr r3, 8014d90 <__kernel_cos+0x158>)
 8014ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca8:	f7eb fb06 	bl	80002b8 <__aeabi_dsub>
 8014cac:	4622      	mov	r2, r4
 8014cae:	462b      	mov	r3, r5
 8014cb0:	f7eb fcba 	bl	8000628 <__aeabi_dmul>
 8014cb4:	a338      	add	r3, pc, #224	; (adr r3, 8014d98 <__kernel_cos+0x160>)
 8014cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cba:	f7eb faff 	bl	80002bc <__adddf3>
 8014cbe:	4622      	mov	r2, r4
 8014cc0:	462b      	mov	r3, r5
 8014cc2:	f7eb fcb1 	bl	8000628 <__aeabi_dmul>
 8014cc6:	a336      	add	r3, pc, #216	; (adr r3, 8014da0 <__kernel_cos+0x168>)
 8014cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ccc:	f7eb faf4 	bl	80002b8 <__aeabi_dsub>
 8014cd0:	4622      	mov	r2, r4
 8014cd2:	462b      	mov	r3, r5
 8014cd4:	f7eb fca8 	bl	8000628 <__aeabi_dmul>
 8014cd8:	a333      	add	r3, pc, #204	; (adr r3, 8014da8 <__kernel_cos+0x170>)
 8014cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cde:	f7eb faed 	bl	80002bc <__adddf3>
 8014ce2:	4622      	mov	r2, r4
 8014ce4:	462b      	mov	r3, r5
 8014ce6:	f7eb fc9f 	bl	8000628 <__aeabi_dmul>
 8014cea:	4622      	mov	r2, r4
 8014cec:	462b      	mov	r3, r5
 8014cee:	f7eb fc9b 	bl	8000628 <__aeabi_dmul>
 8014cf2:	ec53 2b18 	vmov	r2, r3, d8
 8014cf6:	4604      	mov	r4, r0
 8014cf8:	460d      	mov	r5, r1
 8014cfa:	4640      	mov	r0, r8
 8014cfc:	4649      	mov	r1, r9
 8014cfe:	f7eb fc93 	bl	8000628 <__aeabi_dmul>
 8014d02:	460b      	mov	r3, r1
 8014d04:	4602      	mov	r2, r0
 8014d06:	4629      	mov	r1, r5
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f7eb fad5 	bl	80002b8 <__aeabi_dsub>
 8014d0e:	4b29      	ldr	r3, [pc, #164]	; (8014db4 <__kernel_cos+0x17c>)
 8014d10:	429e      	cmp	r6, r3
 8014d12:	4680      	mov	r8, r0
 8014d14:	4689      	mov	r9, r1
 8014d16:	dc11      	bgt.n	8014d3c <__kernel_cos+0x104>
 8014d18:	4602      	mov	r2, r0
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	4650      	mov	r0, sl
 8014d1e:	4659      	mov	r1, fp
 8014d20:	f7eb faca 	bl	80002b8 <__aeabi_dsub>
 8014d24:	460b      	mov	r3, r1
 8014d26:	4924      	ldr	r1, [pc, #144]	; (8014db8 <__kernel_cos+0x180>)
 8014d28:	4602      	mov	r2, r0
 8014d2a:	2000      	movs	r0, #0
 8014d2c:	f7eb fac4 	bl	80002b8 <__aeabi_dsub>
 8014d30:	ecbd 8b02 	vpop	{d8}
 8014d34:	ec41 0b10 	vmov	d0, r0, r1
 8014d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3c:	4b1f      	ldr	r3, [pc, #124]	; (8014dbc <__kernel_cos+0x184>)
 8014d3e:	491e      	ldr	r1, [pc, #120]	; (8014db8 <__kernel_cos+0x180>)
 8014d40:	429e      	cmp	r6, r3
 8014d42:	bfcc      	ite	gt
 8014d44:	4d1e      	ldrgt	r5, [pc, #120]	; (8014dc0 <__kernel_cos+0x188>)
 8014d46:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014d4a:	2400      	movs	r4, #0
 8014d4c:	4622      	mov	r2, r4
 8014d4e:	462b      	mov	r3, r5
 8014d50:	2000      	movs	r0, #0
 8014d52:	f7eb fab1 	bl	80002b8 <__aeabi_dsub>
 8014d56:	4622      	mov	r2, r4
 8014d58:	4606      	mov	r6, r0
 8014d5a:	460f      	mov	r7, r1
 8014d5c:	462b      	mov	r3, r5
 8014d5e:	4650      	mov	r0, sl
 8014d60:	4659      	mov	r1, fp
 8014d62:	f7eb faa9 	bl	80002b8 <__aeabi_dsub>
 8014d66:	4642      	mov	r2, r8
 8014d68:	464b      	mov	r3, r9
 8014d6a:	f7eb faa5 	bl	80002b8 <__aeabi_dsub>
 8014d6e:	4602      	mov	r2, r0
 8014d70:	460b      	mov	r3, r1
 8014d72:	4630      	mov	r0, r6
 8014d74:	4639      	mov	r1, r7
 8014d76:	e7d9      	b.n	8014d2c <__kernel_cos+0xf4>
 8014d78:	2000      	movs	r0, #0
 8014d7a:	490f      	ldr	r1, [pc, #60]	; (8014db8 <__kernel_cos+0x180>)
 8014d7c:	e7d8      	b.n	8014d30 <__kernel_cos+0xf8>
 8014d7e:	bf00      	nop
 8014d80:	be8838d4 	.word	0xbe8838d4
 8014d84:	bda8fae9 	.word	0xbda8fae9
 8014d88:	bdb4b1c4 	.word	0xbdb4b1c4
 8014d8c:	3e21ee9e 	.word	0x3e21ee9e
 8014d90:	809c52ad 	.word	0x809c52ad
 8014d94:	3e927e4f 	.word	0x3e927e4f
 8014d98:	19cb1590 	.word	0x19cb1590
 8014d9c:	3efa01a0 	.word	0x3efa01a0
 8014da0:	16c15177 	.word	0x16c15177
 8014da4:	3f56c16c 	.word	0x3f56c16c
 8014da8:	5555554c 	.word	0x5555554c
 8014dac:	3fa55555 	.word	0x3fa55555
 8014db0:	3fe00000 	.word	0x3fe00000
 8014db4:	3fd33332 	.word	0x3fd33332
 8014db8:	3ff00000 	.word	0x3ff00000
 8014dbc:	3fe90000 	.word	0x3fe90000
 8014dc0:	3fd20000 	.word	0x3fd20000
 8014dc4:	00000000 	.word	0x00000000

08014dc8 <__kernel_rem_pio2>:
 8014dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dcc:	ed2d 8b02 	vpush	{d8}
 8014dd0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014dd4:	1ed4      	subs	r4, r2, #3
 8014dd6:	9308      	str	r3, [sp, #32]
 8014dd8:	9101      	str	r1, [sp, #4]
 8014dda:	4bc5      	ldr	r3, [pc, #788]	; (80150f0 <__kernel_rem_pio2+0x328>)
 8014ddc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014dde:	9009      	str	r0, [sp, #36]	; 0x24
 8014de0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014de4:	9304      	str	r3, [sp, #16]
 8014de6:	9b08      	ldr	r3, [sp, #32]
 8014de8:	3b01      	subs	r3, #1
 8014dea:	9307      	str	r3, [sp, #28]
 8014dec:	2318      	movs	r3, #24
 8014dee:	fb94 f4f3 	sdiv	r4, r4, r3
 8014df2:	f06f 0317 	mvn.w	r3, #23
 8014df6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014dfa:	fb04 3303 	mla	r3, r4, r3, r3
 8014dfe:	eb03 0a02 	add.w	sl, r3, r2
 8014e02:	9b04      	ldr	r3, [sp, #16]
 8014e04:	9a07      	ldr	r2, [sp, #28]
 8014e06:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80150e0 <__kernel_rem_pio2+0x318>
 8014e0a:	eb03 0802 	add.w	r8, r3, r2
 8014e0e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014e10:	1aa7      	subs	r7, r4, r2
 8014e12:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014e16:	ae22      	add	r6, sp, #136	; 0x88
 8014e18:	2500      	movs	r5, #0
 8014e1a:	4545      	cmp	r5, r8
 8014e1c:	dd13      	ble.n	8014e46 <__kernel_rem_pio2+0x7e>
 8014e1e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80150e0 <__kernel_rem_pio2+0x318>
 8014e22:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014e26:	2600      	movs	r6, #0
 8014e28:	9b04      	ldr	r3, [sp, #16]
 8014e2a:	429e      	cmp	r6, r3
 8014e2c:	dc32      	bgt.n	8014e94 <__kernel_rem_pio2+0xcc>
 8014e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e30:	9302      	str	r3, [sp, #8]
 8014e32:	9b08      	ldr	r3, [sp, #32]
 8014e34:	199d      	adds	r5, r3, r6
 8014e36:	ab22      	add	r3, sp, #136	; 0x88
 8014e38:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e3c:	9306      	str	r3, [sp, #24]
 8014e3e:	ec59 8b18 	vmov	r8, r9, d8
 8014e42:	2700      	movs	r7, #0
 8014e44:	e01f      	b.n	8014e86 <__kernel_rem_pio2+0xbe>
 8014e46:	42ef      	cmn	r7, r5
 8014e48:	d407      	bmi.n	8014e5a <__kernel_rem_pio2+0x92>
 8014e4a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014e4e:	f7eb fb81 	bl	8000554 <__aeabi_i2d>
 8014e52:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e56:	3501      	adds	r5, #1
 8014e58:	e7df      	b.n	8014e1a <__kernel_rem_pio2+0x52>
 8014e5a:	ec51 0b18 	vmov	r0, r1, d8
 8014e5e:	e7f8      	b.n	8014e52 <__kernel_rem_pio2+0x8a>
 8014e60:	9906      	ldr	r1, [sp, #24]
 8014e62:	9d02      	ldr	r5, [sp, #8]
 8014e64:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014e68:	9106      	str	r1, [sp, #24]
 8014e6a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014e6e:	9502      	str	r5, [sp, #8]
 8014e70:	f7eb fbda 	bl	8000628 <__aeabi_dmul>
 8014e74:	4602      	mov	r2, r0
 8014e76:	460b      	mov	r3, r1
 8014e78:	4640      	mov	r0, r8
 8014e7a:	4649      	mov	r1, r9
 8014e7c:	f7eb fa1e 	bl	80002bc <__adddf3>
 8014e80:	3701      	adds	r7, #1
 8014e82:	4680      	mov	r8, r0
 8014e84:	4689      	mov	r9, r1
 8014e86:	9b07      	ldr	r3, [sp, #28]
 8014e88:	429f      	cmp	r7, r3
 8014e8a:	dde9      	ble.n	8014e60 <__kernel_rem_pio2+0x98>
 8014e8c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014e90:	3601      	adds	r6, #1
 8014e92:	e7c9      	b.n	8014e28 <__kernel_rem_pio2+0x60>
 8014e94:	9b04      	ldr	r3, [sp, #16]
 8014e96:	aa0e      	add	r2, sp, #56	; 0x38
 8014e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e9c:	930c      	str	r3, [sp, #48]	; 0x30
 8014e9e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ea0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014ea4:	9c04      	ldr	r4, [sp, #16]
 8014ea6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ea8:	ab9a      	add	r3, sp, #616	; 0x268
 8014eaa:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014eae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014eb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014eb6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014eba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014ebe:	ab9a      	add	r3, sp, #616	; 0x268
 8014ec0:	445b      	add	r3, fp
 8014ec2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014ec6:	2500      	movs	r5, #0
 8014ec8:	1b63      	subs	r3, r4, r5
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	dc78      	bgt.n	8014fc0 <__kernel_rem_pio2+0x1f8>
 8014ece:	4650      	mov	r0, sl
 8014ed0:	ec49 8b10 	vmov	d0, r8, r9
 8014ed4:	f000 fc00 	bl	80156d8 <scalbn>
 8014ed8:	ec57 6b10 	vmov	r6, r7, d0
 8014edc:	2200      	movs	r2, #0
 8014ede:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014ee2:	ee10 0a10 	vmov	r0, s0
 8014ee6:	4639      	mov	r1, r7
 8014ee8:	f7eb fb9e 	bl	8000628 <__aeabi_dmul>
 8014eec:	ec41 0b10 	vmov	d0, r0, r1
 8014ef0:	f000 fb6e 	bl	80155d0 <floor>
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	ec51 0b10 	vmov	r0, r1, d0
 8014efa:	4b7e      	ldr	r3, [pc, #504]	; (80150f4 <__kernel_rem_pio2+0x32c>)
 8014efc:	f7eb fb94 	bl	8000628 <__aeabi_dmul>
 8014f00:	4602      	mov	r2, r0
 8014f02:	460b      	mov	r3, r1
 8014f04:	4630      	mov	r0, r6
 8014f06:	4639      	mov	r1, r7
 8014f08:	f7eb f9d6 	bl	80002b8 <__aeabi_dsub>
 8014f0c:	460f      	mov	r7, r1
 8014f0e:	4606      	mov	r6, r0
 8014f10:	f7eb fe3a 	bl	8000b88 <__aeabi_d2iz>
 8014f14:	9006      	str	r0, [sp, #24]
 8014f16:	f7eb fb1d 	bl	8000554 <__aeabi_i2d>
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	460b      	mov	r3, r1
 8014f1e:	4630      	mov	r0, r6
 8014f20:	4639      	mov	r1, r7
 8014f22:	f7eb f9c9 	bl	80002b8 <__aeabi_dsub>
 8014f26:	f1ba 0f00 	cmp.w	sl, #0
 8014f2a:	4606      	mov	r6, r0
 8014f2c:	460f      	mov	r7, r1
 8014f2e:	dd6c      	ble.n	801500a <__kernel_rem_pio2+0x242>
 8014f30:	1e62      	subs	r2, r4, #1
 8014f32:	ab0e      	add	r3, sp, #56	; 0x38
 8014f34:	f1ca 0118 	rsb	r1, sl, #24
 8014f38:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014f3c:	9d06      	ldr	r5, [sp, #24]
 8014f3e:	fa40 f301 	asr.w	r3, r0, r1
 8014f42:	441d      	add	r5, r3
 8014f44:	408b      	lsls	r3, r1
 8014f46:	1ac0      	subs	r0, r0, r3
 8014f48:	ab0e      	add	r3, sp, #56	; 0x38
 8014f4a:	9506      	str	r5, [sp, #24]
 8014f4c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014f50:	f1ca 0317 	rsb	r3, sl, #23
 8014f54:	fa40 f303 	asr.w	r3, r0, r3
 8014f58:	9302      	str	r3, [sp, #8]
 8014f5a:	9b02      	ldr	r3, [sp, #8]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	dd62      	ble.n	8015026 <__kernel_rem_pio2+0x25e>
 8014f60:	9b06      	ldr	r3, [sp, #24]
 8014f62:	2200      	movs	r2, #0
 8014f64:	3301      	adds	r3, #1
 8014f66:	9306      	str	r3, [sp, #24]
 8014f68:	4615      	mov	r5, r2
 8014f6a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014f6e:	4294      	cmp	r4, r2
 8014f70:	f300 8095 	bgt.w	801509e <__kernel_rem_pio2+0x2d6>
 8014f74:	f1ba 0f00 	cmp.w	sl, #0
 8014f78:	dd07      	ble.n	8014f8a <__kernel_rem_pio2+0x1c2>
 8014f7a:	f1ba 0f01 	cmp.w	sl, #1
 8014f7e:	f000 80a2 	beq.w	80150c6 <__kernel_rem_pio2+0x2fe>
 8014f82:	f1ba 0f02 	cmp.w	sl, #2
 8014f86:	f000 80c1 	beq.w	801510c <__kernel_rem_pio2+0x344>
 8014f8a:	9b02      	ldr	r3, [sp, #8]
 8014f8c:	2b02      	cmp	r3, #2
 8014f8e:	d14a      	bne.n	8015026 <__kernel_rem_pio2+0x25e>
 8014f90:	4632      	mov	r2, r6
 8014f92:	463b      	mov	r3, r7
 8014f94:	2000      	movs	r0, #0
 8014f96:	4958      	ldr	r1, [pc, #352]	; (80150f8 <__kernel_rem_pio2+0x330>)
 8014f98:	f7eb f98e 	bl	80002b8 <__aeabi_dsub>
 8014f9c:	4606      	mov	r6, r0
 8014f9e:	460f      	mov	r7, r1
 8014fa0:	2d00      	cmp	r5, #0
 8014fa2:	d040      	beq.n	8015026 <__kernel_rem_pio2+0x25e>
 8014fa4:	4650      	mov	r0, sl
 8014fa6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80150e8 <__kernel_rem_pio2+0x320>
 8014faa:	f000 fb95 	bl	80156d8 <scalbn>
 8014fae:	4630      	mov	r0, r6
 8014fb0:	4639      	mov	r1, r7
 8014fb2:	ec53 2b10 	vmov	r2, r3, d0
 8014fb6:	f7eb f97f 	bl	80002b8 <__aeabi_dsub>
 8014fba:	4606      	mov	r6, r0
 8014fbc:	460f      	mov	r7, r1
 8014fbe:	e032      	b.n	8015026 <__kernel_rem_pio2+0x25e>
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	4b4e      	ldr	r3, [pc, #312]	; (80150fc <__kernel_rem_pio2+0x334>)
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	f7eb fb2e 	bl	8000628 <__aeabi_dmul>
 8014fcc:	f7eb fddc 	bl	8000b88 <__aeabi_d2iz>
 8014fd0:	f7eb fac0 	bl	8000554 <__aeabi_i2d>
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	4b4a      	ldr	r3, [pc, #296]	; (8015100 <__kernel_rem_pio2+0x338>)
 8014fd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fdc:	f7eb fb24 	bl	8000628 <__aeabi_dmul>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4640      	mov	r0, r8
 8014fe6:	4649      	mov	r1, r9
 8014fe8:	f7eb f966 	bl	80002b8 <__aeabi_dsub>
 8014fec:	f7eb fdcc 	bl	8000b88 <__aeabi_d2iz>
 8014ff0:	ab0e      	add	r3, sp, #56	; 0x38
 8014ff2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014ff6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ffe:	f7eb f95d 	bl	80002bc <__adddf3>
 8015002:	3501      	adds	r5, #1
 8015004:	4680      	mov	r8, r0
 8015006:	4689      	mov	r9, r1
 8015008:	e75e      	b.n	8014ec8 <__kernel_rem_pio2+0x100>
 801500a:	d105      	bne.n	8015018 <__kernel_rem_pio2+0x250>
 801500c:	1e63      	subs	r3, r4, #1
 801500e:	aa0e      	add	r2, sp, #56	; 0x38
 8015010:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015014:	15c3      	asrs	r3, r0, #23
 8015016:	e79f      	b.n	8014f58 <__kernel_rem_pio2+0x190>
 8015018:	2200      	movs	r2, #0
 801501a:	4b3a      	ldr	r3, [pc, #232]	; (8015104 <__kernel_rem_pio2+0x33c>)
 801501c:	f7eb fd8a 	bl	8000b34 <__aeabi_dcmpge>
 8015020:	2800      	cmp	r0, #0
 8015022:	d139      	bne.n	8015098 <__kernel_rem_pio2+0x2d0>
 8015024:	9002      	str	r0, [sp, #8]
 8015026:	2200      	movs	r2, #0
 8015028:	2300      	movs	r3, #0
 801502a:	4630      	mov	r0, r6
 801502c:	4639      	mov	r1, r7
 801502e:	f7eb fd63 	bl	8000af8 <__aeabi_dcmpeq>
 8015032:	2800      	cmp	r0, #0
 8015034:	f000 80c7 	beq.w	80151c6 <__kernel_rem_pio2+0x3fe>
 8015038:	1e65      	subs	r5, r4, #1
 801503a:	462b      	mov	r3, r5
 801503c:	2200      	movs	r2, #0
 801503e:	9904      	ldr	r1, [sp, #16]
 8015040:	428b      	cmp	r3, r1
 8015042:	da6a      	bge.n	801511a <__kernel_rem_pio2+0x352>
 8015044:	2a00      	cmp	r2, #0
 8015046:	f000 8088 	beq.w	801515a <__kernel_rem_pio2+0x392>
 801504a:	ab0e      	add	r3, sp, #56	; 0x38
 801504c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015050:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015054:	2b00      	cmp	r3, #0
 8015056:	f000 80b4 	beq.w	80151c2 <__kernel_rem_pio2+0x3fa>
 801505a:	4650      	mov	r0, sl
 801505c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80150e8 <__kernel_rem_pio2+0x320>
 8015060:	f000 fb3a 	bl	80156d8 <scalbn>
 8015064:	00ec      	lsls	r4, r5, #3
 8015066:	ab72      	add	r3, sp, #456	; 0x1c8
 8015068:	191e      	adds	r6, r3, r4
 801506a:	ec59 8b10 	vmov	r8, r9, d0
 801506e:	f106 0a08 	add.w	sl, r6, #8
 8015072:	462f      	mov	r7, r5
 8015074:	2f00      	cmp	r7, #0
 8015076:	f280 80df 	bge.w	8015238 <__kernel_rem_pio2+0x470>
 801507a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80150e0 <__kernel_rem_pio2+0x318>
 801507e:	f04f 0a00 	mov.w	sl, #0
 8015082:	eba5 030a 	sub.w	r3, r5, sl
 8015086:	2b00      	cmp	r3, #0
 8015088:	f2c0 810a 	blt.w	80152a0 <__kernel_rem_pio2+0x4d8>
 801508c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015108 <__kernel_rem_pio2+0x340>
 8015090:	ec59 8b18 	vmov	r8, r9, d8
 8015094:	2700      	movs	r7, #0
 8015096:	e0f5      	b.n	8015284 <__kernel_rem_pio2+0x4bc>
 8015098:	2302      	movs	r3, #2
 801509a:	9302      	str	r3, [sp, #8]
 801509c:	e760      	b.n	8014f60 <__kernel_rem_pio2+0x198>
 801509e:	ab0e      	add	r3, sp, #56	; 0x38
 80150a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150a4:	b94d      	cbnz	r5, 80150ba <__kernel_rem_pio2+0x2f2>
 80150a6:	b12b      	cbz	r3, 80150b4 <__kernel_rem_pio2+0x2ec>
 80150a8:	a80e      	add	r0, sp, #56	; 0x38
 80150aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80150ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80150b2:	2301      	movs	r3, #1
 80150b4:	3201      	adds	r2, #1
 80150b6:	461d      	mov	r5, r3
 80150b8:	e759      	b.n	8014f6e <__kernel_rem_pio2+0x1a6>
 80150ba:	a80e      	add	r0, sp, #56	; 0x38
 80150bc:	1acb      	subs	r3, r1, r3
 80150be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80150c2:	462b      	mov	r3, r5
 80150c4:	e7f6      	b.n	80150b4 <__kernel_rem_pio2+0x2ec>
 80150c6:	1e62      	subs	r2, r4, #1
 80150c8:	ab0e      	add	r3, sp, #56	; 0x38
 80150ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80150d2:	a90e      	add	r1, sp, #56	; 0x38
 80150d4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80150d8:	e757      	b.n	8014f8a <__kernel_rem_pio2+0x1c2>
 80150da:	bf00      	nop
 80150dc:	f3af 8000 	nop.w
	...
 80150ec:	3ff00000 	.word	0x3ff00000
 80150f0:	0801a2b0 	.word	0x0801a2b0
 80150f4:	40200000 	.word	0x40200000
 80150f8:	3ff00000 	.word	0x3ff00000
 80150fc:	3e700000 	.word	0x3e700000
 8015100:	41700000 	.word	0x41700000
 8015104:	3fe00000 	.word	0x3fe00000
 8015108:	0801a270 	.word	0x0801a270
 801510c:	1e62      	subs	r2, r4, #1
 801510e:	ab0e      	add	r3, sp, #56	; 0x38
 8015110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015114:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015118:	e7db      	b.n	80150d2 <__kernel_rem_pio2+0x30a>
 801511a:	a90e      	add	r1, sp, #56	; 0x38
 801511c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015120:	3b01      	subs	r3, #1
 8015122:	430a      	orrs	r2, r1
 8015124:	e78b      	b.n	801503e <__kernel_rem_pio2+0x276>
 8015126:	3301      	adds	r3, #1
 8015128:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801512c:	2900      	cmp	r1, #0
 801512e:	d0fa      	beq.n	8015126 <__kernel_rem_pio2+0x35e>
 8015130:	9a08      	ldr	r2, [sp, #32]
 8015132:	4422      	add	r2, r4
 8015134:	00d2      	lsls	r2, r2, #3
 8015136:	a922      	add	r1, sp, #136	; 0x88
 8015138:	18e3      	adds	r3, r4, r3
 801513a:	9206      	str	r2, [sp, #24]
 801513c:	440a      	add	r2, r1
 801513e:	9302      	str	r3, [sp, #8]
 8015140:	f10b 0108 	add.w	r1, fp, #8
 8015144:	f102 0308 	add.w	r3, r2, #8
 8015148:	1c66      	adds	r6, r4, #1
 801514a:	910a      	str	r1, [sp, #40]	; 0x28
 801514c:	2500      	movs	r5, #0
 801514e:	930d      	str	r3, [sp, #52]	; 0x34
 8015150:	9b02      	ldr	r3, [sp, #8]
 8015152:	42b3      	cmp	r3, r6
 8015154:	da04      	bge.n	8015160 <__kernel_rem_pio2+0x398>
 8015156:	461c      	mov	r4, r3
 8015158:	e6a6      	b.n	8014ea8 <__kernel_rem_pio2+0xe0>
 801515a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801515c:	2301      	movs	r3, #1
 801515e:	e7e3      	b.n	8015128 <__kernel_rem_pio2+0x360>
 8015160:	9b06      	ldr	r3, [sp, #24]
 8015162:	18ef      	adds	r7, r5, r3
 8015164:	ab22      	add	r3, sp, #136	; 0x88
 8015166:	441f      	add	r7, r3
 8015168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801516a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801516e:	f7eb f9f1 	bl	8000554 <__aeabi_i2d>
 8015172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015174:	461c      	mov	r4, r3
 8015176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015178:	e9c7 0100 	strd	r0, r1, [r7]
 801517c:	eb03 0b05 	add.w	fp, r3, r5
 8015180:	2700      	movs	r7, #0
 8015182:	f04f 0800 	mov.w	r8, #0
 8015186:	f04f 0900 	mov.w	r9, #0
 801518a:	9b07      	ldr	r3, [sp, #28]
 801518c:	429f      	cmp	r7, r3
 801518e:	dd08      	ble.n	80151a2 <__kernel_rem_pio2+0x3da>
 8015190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015192:	aa72      	add	r2, sp, #456	; 0x1c8
 8015194:	18eb      	adds	r3, r5, r3
 8015196:	4413      	add	r3, r2
 8015198:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801519c:	3601      	adds	r6, #1
 801519e:	3508      	adds	r5, #8
 80151a0:	e7d6      	b.n	8015150 <__kernel_rem_pio2+0x388>
 80151a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80151a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80151aa:	f7eb fa3d 	bl	8000628 <__aeabi_dmul>
 80151ae:	4602      	mov	r2, r0
 80151b0:	460b      	mov	r3, r1
 80151b2:	4640      	mov	r0, r8
 80151b4:	4649      	mov	r1, r9
 80151b6:	f7eb f881 	bl	80002bc <__adddf3>
 80151ba:	3701      	adds	r7, #1
 80151bc:	4680      	mov	r8, r0
 80151be:	4689      	mov	r9, r1
 80151c0:	e7e3      	b.n	801518a <__kernel_rem_pio2+0x3c2>
 80151c2:	3d01      	subs	r5, #1
 80151c4:	e741      	b.n	801504a <__kernel_rem_pio2+0x282>
 80151c6:	f1ca 0000 	rsb	r0, sl, #0
 80151ca:	ec47 6b10 	vmov	d0, r6, r7
 80151ce:	f000 fa83 	bl	80156d8 <scalbn>
 80151d2:	ec57 6b10 	vmov	r6, r7, d0
 80151d6:	2200      	movs	r2, #0
 80151d8:	4b99      	ldr	r3, [pc, #612]	; (8015440 <__kernel_rem_pio2+0x678>)
 80151da:	ee10 0a10 	vmov	r0, s0
 80151de:	4639      	mov	r1, r7
 80151e0:	f7eb fca8 	bl	8000b34 <__aeabi_dcmpge>
 80151e4:	b1f8      	cbz	r0, 8015226 <__kernel_rem_pio2+0x45e>
 80151e6:	2200      	movs	r2, #0
 80151e8:	4b96      	ldr	r3, [pc, #600]	; (8015444 <__kernel_rem_pio2+0x67c>)
 80151ea:	4630      	mov	r0, r6
 80151ec:	4639      	mov	r1, r7
 80151ee:	f7eb fa1b 	bl	8000628 <__aeabi_dmul>
 80151f2:	f7eb fcc9 	bl	8000b88 <__aeabi_d2iz>
 80151f6:	4680      	mov	r8, r0
 80151f8:	f7eb f9ac 	bl	8000554 <__aeabi_i2d>
 80151fc:	2200      	movs	r2, #0
 80151fe:	4b90      	ldr	r3, [pc, #576]	; (8015440 <__kernel_rem_pio2+0x678>)
 8015200:	f7eb fa12 	bl	8000628 <__aeabi_dmul>
 8015204:	460b      	mov	r3, r1
 8015206:	4602      	mov	r2, r0
 8015208:	4639      	mov	r1, r7
 801520a:	4630      	mov	r0, r6
 801520c:	f7eb f854 	bl	80002b8 <__aeabi_dsub>
 8015210:	f7eb fcba 	bl	8000b88 <__aeabi_d2iz>
 8015214:	1c65      	adds	r5, r4, #1
 8015216:	ab0e      	add	r3, sp, #56	; 0x38
 8015218:	f10a 0a18 	add.w	sl, sl, #24
 801521c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015220:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8015224:	e719      	b.n	801505a <__kernel_rem_pio2+0x292>
 8015226:	4630      	mov	r0, r6
 8015228:	4639      	mov	r1, r7
 801522a:	f7eb fcad 	bl	8000b88 <__aeabi_d2iz>
 801522e:	ab0e      	add	r3, sp, #56	; 0x38
 8015230:	4625      	mov	r5, r4
 8015232:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015236:	e710      	b.n	801505a <__kernel_rem_pio2+0x292>
 8015238:	ab0e      	add	r3, sp, #56	; 0x38
 801523a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801523e:	f7eb f989 	bl	8000554 <__aeabi_i2d>
 8015242:	4642      	mov	r2, r8
 8015244:	464b      	mov	r3, r9
 8015246:	f7eb f9ef 	bl	8000628 <__aeabi_dmul>
 801524a:	2200      	movs	r2, #0
 801524c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015250:	4b7c      	ldr	r3, [pc, #496]	; (8015444 <__kernel_rem_pio2+0x67c>)
 8015252:	4640      	mov	r0, r8
 8015254:	4649      	mov	r1, r9
 8015256:	f7eb f9e7 	bl	8000628 <__aeabi_dmul>
 801525a:	3f01      	subs	r7, #1
 801525c:	4680      	mov	r8, r0
 801525e:	4689      	mov	r9, r1
 8015260:	e708      	b.n	8015074 <__kernel_rem_pio2+0x2ac>
 8015262:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8015266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801526a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801526e:	f7eb f9db 	bl	8000628 <__aeabi_dmul>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	4640      	mov	r0, r8
 8015278:	4649      	mov	r1, r9
 801527a:	f7eb f81f 	bl	80002bc <__adddf3>
 801527e:	3701      	adds	r7, #1
 8015280:	4680      	mov	r8, r0
 8015282:	4689      	mov	r9, r1
 8015284:	9b04      	ldr	r3, [sp, #16]
 8015286:	429f      	cmp	r7, r3
 8015288:	dc01      	bgt.n	801528e <__kernel_rem_pio2+0x4c6>
 801528a:	45ba      	cmp	sl, r7
 801528c:	dae9      	bge.n	8015262 <__kernel_rem_pio2+0x49a>
 801528e:	ab4a      	add	r3, sp, #296	; 0x128
 8015290:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015294:	e9c3 8900 	strd	r8, r9, [r3]
 8015298:	f10a 0a01 	add.w	sl, sl, #1
 801529c:	3e08      	subs	r6, #8
 801529e:	e6f0      	b.n	8015082 <__kernel_rem_pio2+0x2ba>
 80152a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80152a2:	2b03      	cmp	r3, #3
 80152a4:	d85b      	bhi.n	801535e <__kernel_rem_pio2+0x596>
 80152a6:	e8df f003 	tbb	[pc, r3]
 80152aa:	264a      	.short	0x264a
 80152ac:	0226      	.short	0x0226
 80152ae:	ab9a      	add	r3, sp, #616	; 0x268
 80152b0:	441c      	add	r4, r3
 80152b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80152b6:	46a2      	mov	sl, r4
 80152b8:	46ab      	mov	fp, r5
 80152ba:	f1bb 0f00 	cmp.w	fp, #0
 80152be:	dc6c      	bgt.n	801539a <__kernel_rem_pio2+0x5d2>
 80152c0:	46a2      	mov	sl, r4
 80152c2:	46ab      	mov	fp, r5
 80152c4:	f1bb 0f01 	cmp.w	fp, #1
 80152c8:	f300 8086 	bgt.w	80153d8 <__kernel_rem_pio2+0x610>
 80152cc:	2000      	movs	r0, #0
 80152ce:	2100      	movs	r1, #0
 80152d0:	2d01      	cmp	r5, #1
 80152d2:	f300 80a0 	bgt.w	8015416 <__kernel_rem_pio2+0x64e>
 80152d6:	9b02      	ldr	r3, [sp, #8]
 80152d8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80152dc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	f040 809e 	bne.w	8015422 <__kernel_rem_pio2+0x65a>
 80152e6:	9b01      	ldr	r3, [sp, #4]
 80152e8:	e9c3 7800 	strd	r7, r8, [r3]
 80152ec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80152f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80152f4:	e033      	b.n	801535e <__kernel_rem_pio2+0x596>
 80152f6:	3408      	adds	r4, #8
 80152f8:	ab4a      	add	r3, sp, #296	; 0x128
 80152fa:	441c      	add	r4, r3
 80152fc:	462e      	mov	r6, r5
 80152fe:	2000      	movs	r0, #0
 8015300:	2100      	movs	r1, #0
 8015302:	2e00      	cmp	r6, #0
 8015304:	da3a      	bge.n	801537c <__kernel_rem_pio2+0x5b4>
 8015306:	9b02      	ldr	r3, [sp, #8]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d03d      	beq.n	8015388 <__kernel_rem_pio2+0x5c0>
 801530c:	4602      	mov	r2, r0
 801530e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015312:	9c01      	ldr	r4, [sp, #4]
 8015314:	e9c4 2300 	strd	r2, r3, [r4]
 8015318:	4602      	mov	r2, r0
 801531a:	460b      	mov	r3, r1
 801531c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015320:	f7ea ffca 	bl	80002b8 <__aeabi_dsub>
 8015324:	ae4c      	add	r6, sp, #304	; 0x130
 8015326:	2401      	movs	r4, #1
 8015328:	42a5      	cmp	r5, r4
 801532a:	da30      	bge.n	801538e <__kernel_rem_pio2+0x5c6>
 801532c:	9b02      	ldr	r3, [sp, #8]
 801532e:	b113      	cbz	r3, 8015336 <__kernel_rem_pio2+0x56e>
 8015330:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015334:	4619      	mov	r1, r3
 8015336:	9b01      	ldr	r3, [sp, #4]
 8015338:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801533c:	e00f      	b.n	801535e <__kernel_rem_pio2+0x596>
 801533e:	ab9a      	add	r3, sp, #616	; 0x268
 8015340:	441c      	add	r4, r3
 8015342:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015346:	2000      	movs	r0, #0
 8015348:	2100      	movs	r1, #0
 801534a:	2d00      	cmp	r5, #0
 801534c:	da10      	bge.n	8015370 <__kernel_rem_pio2+0x5a8>
 801534e:	9b02      	ldr	r3, [sp, #8]
 8015350:	b113      	cbz	r3, 8015358 <__kernel_rem_pio2+0x590>
 8015352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015356:	4619      	mov	r1, r3
 8015358:	9b01      	ldr	r3, [sp, #4]
 801535a:	e9c3 0100 	strd	r0, r1, [r3]
 801535e:	9b06      	ldr	r3, [sp, #24]
 8015360:	f003 0007 	and.w	r0, r3, #7
 8015364:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015368:	ecbd 8b02 	vpop	{d8}
 801536c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015370:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015374:	f7ea ffa2 	bl	80002bc <__adddf3>
 8015378:	3d01      	subs	r5, #1
 801537a:	e7e6      	b.n	801534a <__kernel_rem_pio2+0x582>
 801537c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015380:	f7ea ff9c 	bl	80002bc <__adddf3>
 8015384:	3e01      	subs	r6, #1
 8015386:	e7bc      	b.n	8015302 <__kernel_rem_pio2+0x53a>
 8015388:	4602      	mov	r2, r0
 801538a:	460b      	mov	r3, r1
 801538c:	e7c1      	b.n	8015312 <__kernel_rem_pio2+0x54a>
 801538e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015392:	f7ea ff93 	bl	80002bc <__adddf3>
 8015396:	3401      	adds	r4, #1
 8015398:	e7c6      	b.n	8015328 <__kernel_rem_pio2+0x560>
 801539a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801539e:	ed3a 7b02 	vldmdb	sl!, {d7}
 80153a2:	4640      	mov	r0, r8
 80153a4:	ec53 2b17 	vmov	r2, r3, d7
 80153a8:	4649      	mov	r1, r9
 80153aa:	ed8d 7b04 	vstr	d7, [sp, #16]
 80153ae:	f7ea ff85 	bl	80002bc <__adddf3>
 80153b2:	4602      	mov	r2, r0
 80153b4:	460b      	mov	r3, r1
 80153b6:	4606      	mov	r6, r0
 80153b8:	460f      	mov	r7, r1
 80153ba:	4640      	mov	r0, r8
 80153bc:	4649      	mov	r1, r9
 80153be:	f7ea ff7b 	bl	80002b8 <__aeabi_dsub>
 80153c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153c6:	f7ea ff79 	bl	80002bc <__adddf3>
 80153ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80153ce:	e9ca 0100 	strd	r0, r1, [sl]
 80153d2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80153d6:	e770      	b.n	80152ba <__kernel_rem_pio2+0x4f2>
 80153d8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80153dc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80153e0:	4630      	mov	r0, r6
 80153e2:	ec53 2b17 	vmov	r2, r3, d7
 80153e6:	4639      	mov	r1, r7
 80153e8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80153ec:	f7ea ff66 	bl	80002bc <__adddf3>
 80153f0:	4602      	mov	r2, r0
 80153f2:	460b      	mov	r3, r1
 80153f4:	4680      	mov	r8, r0
 80153f6:	4689      	mov	r9, r1
 80153f8:	4630      	mov	r0, r6
 80153fa:	4639      	mov	r1, r7
 80153fc:	f7ea ff5c 	bl	80002b8 <__aeabi_dsub>
 8015400:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015404:	f7ea ff5a 	bl	80002bc <__adddf3>
 8015408:	f10b 3bff 	add.w	fp, fp, #4294967295
 801540c:	e9ca 0100 	strd	r0, r1, [sl]
 8015410:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8015414:	e756      	b.n	80152c4 <__kernel_rem_pio2+0x4fc>
 8015416:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801541a:	f7ea ff4f 	bl	80002bc <__adddf3>
 801541e:	3d01      	subs	r5, #1
 8015420:	e756      	b.n	80152d0 <__kernel_rem_pio2+0x508>
 8015422:	9b01      	ldr	r3, [sp, #4]
 8015424:	9a01      	ldr	r2, [sp, #4]
 8015426:	601f      	str	r7, [r3, #0]
 8015428:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801542c:	605c      	str	r4, [r3, #4]
 801542e:	609d      	str	r5, [r3, #8]
 8015430:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015434:	60d3      	str	r3, [r2, #12]
 8015436:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801543a:	6110      	str	r0, [r2, #16]
 801543c:	6153      	str	r3, [r2, #20]
 801543e:	e78e      	b.n	801535e <__kernel_rem_pio2+0x596>
 8015440:	41700000 	.word	0x41700000
 8015444:	3e700000 	.word	0x3e700000

08015448 <__kernel_sin>:
 8015448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544c:	ec55 4b10 	vmov	r4, r5, d0
 8015450:	b085      	sub	sp, #20
 8015452:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015456:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801545a:	ed8d 1b00 	vstr	d1, [sp]
 801545e:	9002      	str	r0, [sp, #8]
 8015460:	da06      	bge.n	8015470 <__kernel_sin+0x28>
 8015462:	ee10 0a10 	vmov	r0, s0
 8015466:	4629      	mov	r1, r5
 8015468:	f7eb fb8e 	bl	8000b88 <__aeabi_d2iz>
 801546c:	2800      	cmp	r0, #0
 801546e:	d051      	beq.n	8015514 <__kernel_sin+0xcc>
 8015470:	4622      	mov	r2, r4
 8015472:	462b      	mov	r3, r5
 8015474:	4620      	mov	r0, r4
 8015476:	4629      	mov	r1, r5
 8015478:	f7eb f8d6 	bl	8000628 <__aeabi_dmul>
 801547c:	4682      	mov	sl, r0
 801547e:	468b      	mov	fp, r1
 8015480:	4602      	mov	r2, r0
 8015482:	460b      	mov	r3, r1
 8015484:	4620      	mov	r0, r4
 8015486:	4629      	mov	r1, r5
 8015488:	f7eb f8ce 	bl	8000628 <__aeabi_dmul>
 801548c:	a341      	add	r3, pc, #260	; (adr r3, 8015594 <__kernel_sin+0x14c>)
 801548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015492:	4680      	mov	r8, r0
 8015494:	4689      	mov	r9, r1
 8015496:	4650      	mov	r0, sl
 8015498:	4659      	mov	r1, fp
 801549a:	f7eb f8c5 	bl	8000628 <__aeabi_dmul>
 801549e:	a33f      	add	r3, pc, #252	; (adr r3, 801559c <__kernel_sin+0x154>)
 80154a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a4:	f7ea ff08 	bl	80002b8 <__aeabi_dsub>
 80154a8:	4652      	mov	r2, sl
 80154aa:	465b      	mov	r3, fp
 80154ac:	f7eb f8bc 	bl	8000628 <__aeabi_dmul>
 80154b0:	a33c      	add	r3, pc, #240	; (adr r3, 80155a4 <__kernel_sin+0x15c>)
 80154b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b6:	f7ea ff01 	bl	80002bc <__adddf3>
 80154ba:	4652      	mov	r2, sl
 80154bc:	465b      	mov	r3, fp
 80154be:	f7eb f8b3 	bl	8000628 <__aeabi_dmul>
 80154c2:	a33a      	add	r3, pc, #232	; (adr r3, 80155ac <__kernel_sin+0x164>)
 80154c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c8:	f7ea fef6 	bl	80002b8 <__aeabi_dsub>
 80154cc:	4652      	mov	r2, sl
 80154ce:	465b      	mov	r3, fp
 80154d0:	f7eb f8aa 	bl	8000628 <__aeabi_dmul>
 80154d4:	a337      	add	r3, pc, #220	; (adr r3, 80155b4 <__kernel_sin+0x16c>)
 80154d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154da:	f7ea feef 	bl	80002bc <__adddf3>
 80154de:	9b02      	ldr	r3, [sp, #8]
 80154e0:	4606      	mov	r6, r0
 80154e2:	460f      	mov	r7, r1
 80154e4:	b9db      	cbnz	r3, 801551e <__kernel_sin+0xd6>
 80154e6:	4602      	mov	r2, r0
 80154e8:	460b      	mov	r3, r1
 80154ea:	4650      	mov	r0, sl
 80154ec:	4659      	mov	r1, fp
 80154ee:	f7eb f89b 	bl	8000628 <__aeabi_dmul>
 80154f2:	a325      	add	r3, pc, #148	; (adr r3, 8015588 <__kernel_sin+0x140>)
 80154f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f8:	f7ea fede 	bl	80002b8 <__aeabi_dsub>
 80154fc:	4642      	mov	r2, r8
 80154fe:	464b      	mov	r3, r9
 8015500:	f7eb f892 	bl	8000628 <__aeabi_dmul>
 8015504:	4602      	mov	r2, r0
 8015506:	460b      	mov	r3, r1
 8015508:	4620      	mov	r0, r4
 801550a:	4629      	mov	r1, r5
 801550c:	f7ea fed6 	bl	80002bc <__adddf3>
 8015510:	4604      	mov	r4, r0
 8015512:	460d      	mov	r5, r1
 8015514:	ec45 4b10 	vmov	d0, r4, r5
 8015518:	b005      	add	sp, #20
 801551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551e:	2200      	movs	r2, #0
 8015520:	4b1b      	ldr	r3, [pc, #108]	; (8015590 <__kernel_sin+0x148>)
 8015522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015526:	f7eb f87f 	bl	8000628 <__aeabi_dmul>
 801552a:	4632      	mov	r2, r6
 801552c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015530:	463b      	mov	r3, r7
 8015532:	4640      	mov	r0, r8
 8015534:	4649      	mov	r1, r9
 8015536:	f7eb f877 	bl	8000628 <__aeabi_dmul>
 801553a:	4602      	mov	r2, r0
 801553c:	460b      	mov	r3, r1
 801553e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015542:	f7ea feb9 	bl	80002b8 <__aeabi_dsub>
 8015546:	4652      	mov	r2, sl
 8015548:	465b      	mov	r3, fp
 801554a:	f7eb f86d 	bl	8000628 <__aeabi_dmul>
 801554e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015552:	f7ea feb1 	bl	80002b8 <__aeabi_dsub>
 8015556:	a30c      	add	r3, pc, #48	; (adr r3, 8015588 <__kernel_sin+0x140>)
 8015558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555c:	4606      	mov	r6, r0
 801555e:	460f      	mov	r7, r1
 8015560:	4640      	mov	r0, r8
 8015562:	4649      	mov	r1, r9
 8015564:	f7eb f860 	bl	8000628 <__aeabi_dmul>
 8015568:	4602      	mov	r2, r0
 801556a:	460b      	mov	r3, r1
 801556c:	4630      	mov	r0, r6
 801556e:	4639      	mov	r1, r7
 8015570:	f7ea fea4 	bl	80002bc <__adddf3>
 8015574:	4602      	mov	r2, r0
 8015576:	460b      	mov	r3, r1
 8015578:	4620      	mov	r0, r4
 801557a:	4629      	mov	r1, r5
 801557c:	f7ea fe9c 	bl	80002b8 <__aeabi_dsub>
 8015580:	e7c6      	b.n	8015510 <__kernel_sin+0xc8>
 8015582:	bf00      	nop
 8015584:	f3af 8000 	nop.w
 8015588:	55555549 	.word	0x55555549
 801558c:	3fc55555 	.word	0x3fc55555
 8015590:	3fe00000 	.word	0x3fe00000
 8015594:	5acfd57c 	.word	0x5acfd57c
 8015598:	3de5d93a 	.word	0x3de5d93a
 801559c:	8a2b9ceb 	.word	0x8a2b9ceb
 80155a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80155a4:	57b1fe7d 	.word	0x57b1fe7d
 80155a8:	3ec71de3 	.word	0x3ec71de3
 80155ac:	19c161d5 	.word	0x19c161d5
 80155b0:	3f2a01a0 	.word	0x3f2a01a0
 80155b4:	1110f8a6 	.word	0x1110f8a6
 80155b8:	3f811111 	.word	0x3f811111

080155bc <fabs>:
 80155bc:	ec51 0b10 	vmov	r0, r1, d0
 80155c0:	ee10 2a10 	vmov	r2, s0
 80155c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155c8:	ec43 2b10 	vmov	d0, r2, r3
 80155cc:	4770      	bx	lr
	...

080155d0 <floor>:
 80155d0:	ec51 0b10 	vmov	r0, r1, d0
 80155d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80155dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80155e0:	2e13      	cmp	r6, #19
 80155e2:	460c      	mov	r4, r1
 80155e4:	ee10 5a10 	vmov	r5, s0
 80155e8:	4680      	mov	r8, r0
 80155ea:	dc34      	bgt.n	8015656 <floor+0x86>
 80155ec:	2e00      	cmp	r6, #0
 80155ee:	da16      	bge.n	801561e <floor+0x4e>
 80155f0:	a335      	add	r3, pc, #212	; (adr r3, 80156c8 <floor+0xf8>)
 80155f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f6:	f7ea fe61 	bl	80002bc <__adddf3>
 80155fa:	2200      	movs	r2, #0
 80155fc:	2300      	movs	r3, #0
 80155fe:	f7eb faa3 	bl	8000b48 <__aeabi_dcmpgt>
 8015602:	b148      	cbz	r0, 8015618 <floor+0x48>
 8015604:	2c00      	cmp	r4, #0
 8015606:	da59      	bge.n	80156bc <floor+0xec>
 8015608:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801560c:	4a30      	ldr	r2, [pc, #192]	; (80156d0 <floor+0x100>)
 801560e:	432b      	orrs	r3, r5
 8015610:	2500      	movs	r5, #0
 8015612:	42ab      	cmp	r3, r5
 8015614:	bf18      	it	ne
 8015616:	4614      	movne	r4, r2
 8015618:	4621      	mov	r1, r4
 801561a:	4628      	mov	r0, r5
 801561c:	e025      	b.n	801566a <floor+0x9a>
 801561e:	4f2d      	ldr	r7, [pc, #180]	; (80156d4 <floor+0x104>)
 8015620:	4137      	asrs	r7, r6
 8015622:	ea01 0307 	and.w	r3, r1, r7
 8015626:	4303      	orrs	r3, r0
 8015628:	d01f      	beq.n	801566a <floor+0x9a>
 801562a:	a327      	add	r3, pc, #156	; (adr r3, 80156c8 <floor+0xf8>)
 801562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015630:	f7ea fe44 	bl	80002bc <__adddf3>
 8015634:	2200      	movs	r2, #0
 8015636:	2300      	movs	r3, #0
 8015638:	f7eb fa86 	bl	8000b48 <__aeabi_dcmpgt>
 801563c:	2800      	cmp	r0, #0
 801563e:	d0eb      	beq.n	8015618 <floor+0x48>
 8015640:	2c00      	cmp	r4, #0
 8015642:	bfbe      	ittt	lt
 8015644:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015648:	fa43 f606 	asrlt.w	r6, r3, r6
 801564c:	19a4      	addlt	r4, r4, r6
 801564e:	ea24 0407 	bic.w	r4, r4, r7
 8015652:	2500      	movs	r5, #0
 8015654:	e7e0      	b.n	8015618 <floor+0x48>
 8015656:	2e33      	cmp	r6, #51	; 0x33
 8015658:	dd0b      	ble.n	8015672 <floor+0xa2>
 801565a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801565e:	d104      	bne.n	801566a <floor+0x9a>
 8015660:	ee10 2a10 	vmov	r2, s0
 8015664:	460b      	mov	r3, r1
 8015666:	f7ea fe29 	bl	80002bc <__adddf3>
 801566a:	ec41 0b10 	vmov	d0, r0, r1
 801566e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015672:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015676:	f04f 33ff 	mov.w	r3, #4294967295
 801567a:	fa23 f707 	lsr.w	r7, r3, r7
 801567e:	4207      	tst	r7, r0
 8015680:	d0f3      	beq.n	801566a <floor+0x9a>
 8015682:	a311      	add	r3, pc, #68	; (adr r3, 80156c8 <floor+0xf8>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7ea fe18 	bl	80002bc <__adddf3>
 801568c:	2200      	movs	r2, #0
 801568e:	2300      	movs	r3, #0
 8015690:	f7eb fa5a 	bl	8000b48 <__aeabi_dcmpgt>
 8015694:	2800      	cmp	r0, #0
 8015696:	d0bf      	beq.n	8015618 <floor+0x48>
 8015698:	2c00      	cmp	r4, #0
 801569a:	da02      	bge.n	80156a2 <floor+0xd2>
 801569c:	2e14      	cmp	r6, #20
 801569e:	d103      	bne.n	80156a8 <floor+0xd8>
 80156a0:	3401      	adds	r4, #1
 80156a2:	ea25 0507 	bic.w	r5, r5, r7
 80156a6:	e7b7      	b.n	8015618 <floor+0x48>
 80156a8:	2301      	movs	r3, #1
 80156aa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80156ae:	fa03 f606 	lsl.w	r6, r3, r6
 80156b2:	4435      	add	r5, r6
 80156b4:	4545      	cmp	r5, r8
 80156b6:	bf38      	it	cc
 80156b8:	18e4      	addcc	r4, r4, r3
 80156ba:	e7f2      	b.n	80156a2 <floor+0xd2>
 80156bc:	2500      	movs	r5, #0
 80156be:	462c      	mov	r4, r5
 80156c0:	e7aa      	b.n	8015618 <floor+0x48>
 80156c2:	bf00      	nop
 80156c4:	f3af 8000 	nop.w
 80156c8:	8800759c 	.word	0x8800759c
 80156cc:	7e37e43c 	.word	0x7e37e43c
 80156d0:	bff00000 	.word	0xbff00000
 80156d4:	000fffff 	.word	0x000fffff

080156d8 <scalbn>:
 80156d8:	b570      	push	{r4, r5, r6, lr}
 80156da:	ec55 4b10 	vmov	r4, r5, d0
 80156de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80156e2:	4606      	mov	r6, r0
 80156e4:	462b      	mov	r3, r5
 80156e6:	b9aa      	cbnz	r2, 8015714 <scalbn+0x3c>
 80156e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80156ec:	4323      	orrs	r3, r4
 80156ee:	d03b      	beq.n	8015768 <scalbn+0x90>
 80156f0:	4b31      	ldr	r3, [pc, #196]	; (80157b8 <scalbn+0xe0>)
 80156f2:	4629      	mov	r1, r5
 80156f4:	2200      	movs	r2, #0
 80156f6:	ee10 0a10 	vmov	r0, s0
 80156fa:	f7ea ff95 	bl	8000628 <__aeabi_dmul>
 80156fe:	4b2f      	ldr	r3, [pc, #188]	; (80157bc <scalbn+0xe4>)
 8015700:	429e      	cmp	r6, r3
 8015702:	4604      	mov	r4, r0
 8015704:	460d      	mov	r5, r1
 8015706:	da12      	bge.n	801572e <scalbn+0x56>
 8015708:	a327      	add	r3, pc, #156	; (adr r3, 80157a8 <scalbn+0xd0>)
 801570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570e:	f7ea ff8b 	bl	8000628 <__aeabi_dmul>
 8015712:	e009      	b.n	8015728 <scalbn+0x50>
 8015714:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015718:	428a      	cmp	r2, r1
 801571a:	d10c      	bne.n	8015736 <scalbn+0x5e>
 801571c:	ee10 2a10 	vmov	r2, s0
 8015720:	4620      	mov	r0, r4
 8015722:	4629      	mov	r1, r5
 8015724:	f7ea fdca 	bl	80002bc <__adddf3>
 8015728:	4604      	mov	r4, r0
 801572a:	460d      	mov	r5, r1
 801572c:	e01c      	b.n	8015768 <scalbn+0x90>
 801572e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015732:	460b      	mov	r3, r1
 8015734:	3a36      	subs	r2, #54	; 0x36
 8015736:	4432      	add	r2, r6
 8015738:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801573c:	428a      	cmp	r2, r1
 801573e:	dd0b      	ble.n	8015758 <scalbn+0x80>
 8015740:	ec45 4b11 	vmov	d1, r4, r5
 8015744:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80157b0 <scalbn+0xd8>
 8015748:	f000 f83c 	bl	80157c4 <copysign>
 801574c:	a318      	add	r3, pc, #96	; (adr r3, 80157b0 <scalbn+0xd8>)
 801574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015752:	ec51 0b10 	vmov	r0, r1, d0
 8015756:	e7da      	b.n	801570e <scalbn+0x36>
 8015758:	2a00      	cmp	r2, #0
 801575a:	dd08      	ble.n	801576e <scalbn+0x96>
 801575c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015760:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015764:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015768:	ec45 4b10 	vmov	d0, r4, r5
 801576c:	bd70      	pop	{r4, r5, r6, pc}
 801576e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015772:	da0d      	bge.n	8015790 <scalbn+0xb8>
 8015774:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015778:	429e      	cmp	r6, r3
 801577a:	ec45 4b11 	vmov	d1, r4, r5
 801577e:	dce1      	bgt.n	8015744 <scalbn+0x6c>
 8015780:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80157a8 <scalbn+0xd0>
 8015784:	f000 f81e 	bl	80157c4 <copysign>
 8015788:	a307      	add	r3, pc, #28	; (adr r3, 80157a8 <scalbn+0xd0>)
 801578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801578e:	e7e0      	b.n	8015752 <scalbn+0x7a>
 8015790:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015794:	3236      	adds	r2, #54	; 0x36
 8015796:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801579a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801579e:	4620      	mov	r0, r4
 80157a0:	4629      	mov	r1, r5
 80157a2:	2200      	movs	r2, #0
 80157a4:	4b06      	ldr	r3, [pc, #24]	; (80157c0 <scalbn+0xe8>)
 80157a6:	e7b2      	b.n	801570e <scalbn+0x36>
 80157a8:	c2f8f359 	.word	0xc2f8f359
 80157ac:	01a56e1f 	.word	0x01a56e1f
 80157b0:	8800759c 	.word	0x8800759c
 80157b4:	7e37e43c 	.word	0x7e37e43c
 80157b8:	43500000 	.word	0x43500000
 80157bc:	ffff3cb0 	.word	0xffff3cb0
 80157c0:	3c900000 	.word	0x3c900000

080157c4 <copysign>:
 80157c4:	ec51 0b10 	vmov	r0, r1, d0
 80157c8:	ee11 0a90 	vmov	r0, s3
 80157cc:	ee10 2a10 	vmov	r2, s0
 80157d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80157d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80157d8:	ea41 0300 	orr.w	r3, r1, r0
 80157dc:	ec43 2b10 	vmov	d0, r2, r3
 80157e0:	4770      	bx	lr
	...

080157e4 <__errno>:
 80157e4:	4b01      	ldr	r3, [pc, #4]	; (80157ec <__errno+0x8>)
 80157e6:	6818      	ldr	r0, [r3, #0]
 80157e8:	4770      	bx	lr
 80157ea:	bf00      	nop
 80157ec:	2000000c 	.word	0x2000000c

080157f0 <__libc_init_array>:
 80157f0:	b570      	push	{r4, r5, r6, lr}
 80157f2:	4e0d      	ldr	r6, [pc, #52]	; (8015828 <__libc_init_array+0x38>)
 80157f4:	4c0d      	ldr	r4, [pc, #52]	; (801582c <__libc_init_array+0x3c>)
 80157f6:	1ba4      	subs	r4, r4, r6
 80157f8:	10a4      	asrs	r4, r4, #2
 80157fa:	2500      	movs	r5, #0
 80157fc:	42a5      	cmp	r5, r4
 80157fe:	d109      	bne.n	8015814 <__libc_init_array+0x24>
 8015800:	4e0b      	ldr	r6, [pc, #44]	; (8015830 <__libc_init_array+0x40>)
 8015802:	4c0c      	ldr	r4, [pc, #48]	; (8015834 <__libc_init_array+0x44>)
 8015804:	f004 f9e6 	bl	8019bd4 <_init>
 8015808:	1ba4      	subs	r4, r4, r6
 801580a:	10a4      	asrs	r4, r4, #2
 801580c:	2500      	movs	r5, #0
 801580e:	42a5      	cmp	r5, r4
 8015810:	d105      	bne.n	801581e <__libc_init_array+0x2e>
 8015812:	bd70      	pop	{r4, r5, r6, pc}
 8015814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015818:	4798      	blx	r3
 801581a:	3501      	adds	r5, #1
 801581c:	e7ee      	b.n	80157fc <__libc_init_array+0xc>
 801581e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015822:	4798      	blx	r3
 8015824:	3501      	adds	r5, #1
 8015826:	e7f2      	b.n	801580e <__libc_init_array+0x1e>
 8015828:	0801a5f4 	.word	0x0801a5f4
 801582c:	0801a5f4 	.word	0x0801a5f4
 8015830:	0801a5f4 	.word	0x0801a5f4
 8015834:	0801a5fc 	.word	0x0801a5fc

08015838 <memset>:
 8015838:	4402      	add	r2, r0
 801583a:	4603      	mov	r3, r0
 801583c:	4293      	cmp	r3, r2
 801583e:	d100      	bne.n	8015842 <memset+0xa>
 8015840:	4770      	bx	lr
 8015842:	f803 1b01 	strb.w	r1, [r3], #1
 8015846:	e7f9      	b.n	801583c <memset+0x4>

08015848 <__cvt>:
 8015848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801584c:	ec55 4b10 	vmov	r4, r5, d0
 8015850:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015852:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015856:	2d00      	cmp	r5, #0
 8015858:	460e      	mov	r6, r1
 801585a:	4691      	mov	r9, r2
 801585c:	4619      	mov	r1, r3
 801585e:	bfb8      	it	lt
 8015860:	4622      	movlt	r2, r4
 8015862:	462b      	mov	r3, r5
 8015864:	f027 0720 	bic.w	r7, r7, #32
 8015868:	bfbb      	ittet	lt
 801586a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801586e:	461d      	movlt	r5, r3
 8015870:	2300      	movge	r3, #0
 8015872:	232d      	movlt	r3, #45	; 0x2d
 8015874:	bfb8      	it	lt
 8015876:	4614      	movlt	r4, r2
 8015878:	2f46      	cmp	r7, #70	; 0x46
 801587a:	700b      	strb	r3, [r1, #0]
 801587c:	d004      	beq.n	8015888 <__cvt+0x40>
 801587e:	2f45      	cmp	r7, #69	; 0x45
 8015880:	d100      	bne.n	8015884 <__cvt+0x3c>
 8015882:	3601      	adds	r6, #1
 8015884:	2102      	movs	r1, #2
 8015886:	e000      	b.n	801588a <__cvt+0x42>
 8015888:	2103      	movs	r1, #3
 801588a:	ab03      	add	r3, sp, #12
 801588c:	9301      	str	r3, [sp, #4]
 801588e:	ab02      	add	r3, sp, #8
 8015890:	9300      	str	r3, [sp, #0]
 8015892:	4632      	mov	r2, r6
 8015894:	4653      	mov	r3, sl
 8015896:	ec45 4b10 	vmov	d0, r4, r5
 801589a:	f001 fdfd 	bl	8017498 <_dtoa_r>
 801589e:	2f47      	cmp	r7, #71	; 0x47
 80158a0:	4680      	mov	r8, r0
 80158a2:	d102      	bne.n	80158aa <__cvt+0x62>
 80158a4:	f019 0f01 	tst.w	r9, #1
 80158a8:	d026      	beq.n	80158f8 <__cvt+0xb0>
 80158aa:	2f46      	cmp	r7, #70	; 0x46
 80158ac:	eb08 0906 	add.w	r9, r8, r6
 80158b0:	d111      	bne.n	80158d6 <__cvt+0x8e>
 80158b2:	f898 3000 	ldrb.w	r3, [r8]
 80158b6:	2b30      	cmp	r3, #48	; 0x30
 80158b8:	d10a      	bne.n	80158d0 <__cvt+0x88>
 80158ba:	2200      	movs	r2, #0
 80158bc:	2300      	movs	r3, #0
 80158be:	4620      	mov	r0, r4
 80158c0:	4629      	mov	r1, r5
 80158c2:	f7eb f919 	bl	8000af8 <__aeabi_dcmpeq>
 80158c6:	b918      	cbnz	r0, 80158d0 <__cvt+0x88>
 80158c8:	f1c6 0601 	rsb	r6, r6, #1
 80158cc:	f8ca 6000 	str.w	r6, [sl]
 80158d0:	f8da 3000 	ldr.w	r3, [sl]
 80158d4:	4499      	add	r9, r3
 80158d6:	2200      	movs	r2, #0
 80158d8:	2300      	movs	r3, #0
 80158da:	4620      	mov	r0, r4
 80158dc:	4629      	mov	r1, r5
 80158de:	f7eb f90b 	bl	8000af8 <__aeabi_dcmpeq>
 80158e2:	b938      	cbnz	r0, 80158f4 <__cvt+0xac>
 80158e4:	2230      	movs	r2, #48	; 0x30
 80158e6:	9b03      	ldr	r3, [sp, #12]
 80158e8:	454b      	cmp	r3, r9
 80158ea:	d205      	bcs.n	80158f8 <__cvt+0xb0>
 80158ec:	1c59      	adds	r1, r3, #1
 80158ee:	9103      	str	r1, [sp, #12]
 80158f0:	701a      	strb	r2, [r3, #0]
 80158f2:	e7f8      	b.n	80158e6 <__cvt+0x9e>
 80158f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80158f8:	9b03      	ldr	r3, [sp, #12]
 80158fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158fc:	eba3 0308 	sub.w	r3, r3, r8
 8015900:	4640      	mov	r0, r8
 8015902:	6013      	str	r3, [r2, #0]
 8015904:	b004      	add	sp, #16
 8015906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801590a <__exponent>:
 801590a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801590c:	2900      	cmp	r1, #0
 801590e:	4604      	mov	r4, r0
 8015910:	bfba      	itte	lt
 8015912:	4249      	neglt	r1, r1
 8015914:	232d      	movlt	r3, #45	; 0x2d
 8015916:	232b      	movge	r3, #43	; 0x2b
 8015918:	2909      	cmp	r1, #9
 801591a:	f804 2b02 	strb.w	r2, [r4], #2
 801591e:	7043      	strb	r3, [r0, #1]
 8015920:	dd20      	ble.n	8015964 <__exponent+0x5a>
 8015922:	f10d 0307 	add.w	r3, sp, #7
 8015926:	461f      	mov	r7, r3
 8015928:	260a      	movs	r6, #10
 801592a:	fb91 f5f6 	sdiv	r5, r1, r6
 801592e:	fb06 1115 	mls	r1, r6, r5, r1
 8015932:	3130      	adds	r1, #48	; 0x30
 8015934:	2d09      	cmp	r5, #9
 8015936:	f803 1c01 	strb.w	r1, [r3, #-1]
 801593a:	f103 32ff 	add.w	r2, r3, #4294967295
 801593e:	4629      	mov	r1, r5
 8015940:	dc09      	bgt.n	8015956 <__exponent+0x4c>
 8015942:	3130      	adds	r1, #48	; 0x30
 8015944:	3b02      	subs	r3, #2
 8015946:	f802 1c01 	strb.w	r1, [r2, #-1]
 801594a:	42bb      	cmp	r3, r7
 801594c:	4622      	mov	r2, r4
 801594e:	d304      	bcc.n	801595a <__exponent+0x50>
 8015950:	1a10      	subs	r0, r2, r0
 8015952:	b003      	add	sp, #12
 8015954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015956:	4613      	mov	r3, r2
 8015958:	e7e7      	b.n	801592a <__exponent+0x20>
 801595a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801595e:	f804 2b01 	strb.w	r2, [r4], #1
 8015962:	e7f2      	b.n	801594a <__exponent+0x40>
 8015964:	2330      	movs	r3, #48	; 0x30
 8015966:	4419      	add	r1, r3
 8015968:	7083      	strb	r3, [r0, #2]
 801596a:	1d02      	adds	r2, r0, #4
 801596c:	70c1      	strb	r1, [r0, #3]
 801596e:	e7ef      	b.n	8015950 <__exponent+0x46>

08015970 <_printf_float>:
 8015970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015974:	b08d      	sub	sp, #52	; 0x34
 8015976:	460c      	mov	r4, r1
 8015978:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801597c:	4616      	mov	r6, r2
 801597e:	461f      	mov	r7, r3
 8015980:	4605      	mov	r5, r0
 8015982:	f002 fe7b 	bl	801867c <_localeconv_r>
 8015986:	6803      	ldr	r3, [r0, #0]
 8015988:	9304      	str	r3, [sp, #16]
 801598a:	4618      	mov	r0, r3
 801598c:	f7ea fc38 	bl	8000200 <strlen>
 8015990:	2300      	movs	r3, #0
 8015992:	930a      	str	r3, [sp, #40]	; 0x28
 8015994:	f8d8 3000 	ldr.w	r3, [r8]
 8015998:	9005      	str	r0, [sp, #20]
 801599a:	3307      	adds	r3, #7
 801599c:	f023 0307 	bic.w	r3, r3, #7
 80159a0:	f103 0208 	add.w	r2, r3, #8
 80159a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80159a8:	f8d4 b000 	ldr.w	fp, [r4]
 80159ac:	f8c8 2000 	str.w	r2, [r8]
 80159b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80159b8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80159bc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159c0:	9307      	str	r3, [sp, #28]
 80159c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80159c6:	f04f 32ff 	mov.w	r2, #4294967295
 80159ca:	4ba7      	ldr	r3, [pc, #668]	; (8015c68 <_printf_float+0x2f8>)
 80159cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159d0:	f7eb f8c4 	bl	8000b5c <__aeabi_dcmpun>
 80159d4:	bb70      	cbnz	r0, 8015a34 <_printf_float+0xc4>
 80159d6:	f04f 32ff 	mov.w	r2, #4294967295
 80159da:	4ba3      	ldr	r3, [pc, #652]	; (8015c68 <_printf_float+0x2f8>)
 80159dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159e0:	f7eb f89e 	bl	8000b20 <__aeabi_dcmple>
 80159e4:	bb30      	cbnz	r0, 8015a34 <_printf_float+0xc4>
 80159e6:	2200      	movs	r2, #0
 80159e8:	2300      	movs	r3, #0
 80159ea:	4640      	mov	r0, r8
 80159ec:	4649      	mov	r1, r9
 80159ee:	f7eb f88d 	bl	8000b0c <__aeabi_dcmplt>
 80159f2:	b110      	cbz	r0, 80159fa <_printf_float+0x8a>
 80159f4:	232d      	movs	r3, #45	; 0x2d
 80159f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159fa:	4a9c      	ldr	r2, [pc, #624]	; (8015c6c <_printf_float+0x2fc>)
 80159fc:	4b9c      	ldr	r3, [pc, #624]	; (8015c70 <_printf_float+0x300>)
 80159fe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a02:	bf8c      	ite	hi
 8015a04:	4690      	movhi	r8, r2
 8015a06:	4698      	movls	r8, r3
 8015a08:	2303      	movs	r3, #3
 8015a0a:	f02b 0204 	bic.w	r2, fp, #4
 8015a0e:	6123      	str	r3, [r4, #16]
 8015a10:	6022      	str	r2, [r4, #0]
 8015a12:	f04f 0900 	mov.w	r9, #0
 8015a16:	9700      	str	r7, [sp, #0]
 8015a18:	4633      	mov	r3, r6
 8015a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a1c:	4621      	mov	r1, r4
 8015a1e:	4628      	mov	r0, r5
 8015a20:	f000 f9e6 	bl	8015df0 <_printf_common>
 8015a24:	3001      	adds	r0, #1
 8015a26:	f040 808d 	bne.w	8015b44 <_printf_float+0x1d4>
 8015a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8015a2e:	b00d      	add	sp, #52	; 0x34
 8015a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a34:	4642      	mov	r2, r8
 8015a36:	464b      	mov	r3, r9
 8015a38:	4640      	mov	r0, r8
 8015a3a:	4649      	mov	r1, r9
 8015a3c:	f7eb f88e 	bl	8000b5c <__aeabi_dcmpun>
 8015a40:	b110      	cbz	r0, 8015a48 <_printf_float+0xd8>
 8015a42:	4a8c      	ldr	r2, [pc, #560]	; (8015c74 <_printf_float+0x304>)
 8015a44:	4b8c      	ldr	r3, [pc, #560]	; (8015c78 <_printf_float+0x308>)
 8015a46:	e7da      	b.n	80159fe <_printf_float+0x8e>
 8015a48:	6861      	ldr	r1, [r4, #4]
 8015a4a:	1c4b      	adds	r3, r1, #1
 8015a4c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015a50:	a80a      	add	r0, sp, #40	; 0x28
 8015a52:	d13e      	bne.n	8015ad2 <_printf_float+0x162>
 8015a54:	2306      	movs	r3, #6
 8015a56:	6063      	str	r3, [r4, #4]
 8015a58:	2300      	movs	r3, #0
 8015a5a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015a5e:	ab09      	add	r3, sp, #36	; 0x24
 8015a60:	9300      	str	r3, [sp, #0]
 8015a62:	ec49 8b10 	vmov	d0, r8, r9
 8015a66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a6a:	6022      	str	r2, [r4, #0]
 8015a6c:	f8cd a004 	str.w	sl, [sp, #4]
 8015a70:	6861      	ldr	r1, [r4, #4]
 8015a72:	4628      	mov	r0, r5
 8015a74:	f7ff fee8 	bl	8015848 <__cvt>
 8015a78:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015a7c:	2b47      	cmp	r3, #71	; 0x47
 8015a7e:	4680      	mov	r8, r0
 8015a80:	d109      	bne.n	8015a96 <_printf_float+0x126>
 8015a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a84:	1cd8      	adds	r0, r3, #3
 8015a86:	db02      	blt.n	8015a8e <_printf_float+0x11e>
 8015a88:	6862      	ldr	r2, [r4, #4]
 8015a8a:	4293      	cmp	r3, r2
 8015a8c:	dd47      	ble.n	8015b1e <_printf_float+0x1ae>
 8015a8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015a92:	fa5f fa8a 	uxtb.w	sl, sl
 8015a96:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a9c:	d824      	bhi.n	8015ae8 <_printf_float+0x178>
 8015a9e:	3901      	subs	r1, #1
 8015aa0:	4652      	mov	r2, sl
 8015aa2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015aa6:	9109      	str	r1, [sp, #36]	; 0x24
 8015aa8:	f7ff ff2f 	bl	801590a <__exponent>
 8015aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015aae:	1813      	adds	r3, r2, r0
 8015ab0:	2a01      	cmp	r2, #1
 8015ab2:	4681      	mov	r9, r0
 8015ab4:	6123      	str	r3, [r4, #16]
 8015ab6:	dc02      	bgt.n	8015abe <_printf_float+0x14e>
 8015ab8:	6822      	ldr	r2, [r4, #0]
 8015aba:	07d1      	lsls	r1, r2, #31
 8015abc:	d501      	bpl.n	8015ac2 <_printf_float+0x152>
 8015abe:	3301      	adds	r3, #1
 8015ac0:	6123      	str	r3, [r4, #16]
 8015ac2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d0a5      	beq.n	8015a16 <_printf_float+0xa6>
 8015aca:	232d      	movs	r3, #45	; 0x2d
 8015acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ad0:	e7a1      	b.n	8015a16 <_printf_float+0xa6>
 8015ad2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015ad6:	f000 8177 	beq.w	8015dc8 <_printf_float+0x458>
 8015ada:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015ade:	d1bb      	bne.n	8015a58 <_printf_float+0xe8>
 8015ae0:	2900      	cmp	r1, #0
 8015ae2:	d1b9      	bne.n	8015a58 <_printf_float+0xe8>
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	e7b6      	b.n	8015a56 <_printf_float+0xe6>
 8015ae8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015aec:	d119      	bne.n	8015b22 <_printf_float+0x1b2>
 8015aee:	2900      	cmp	r1, #0
 8015af0:	6863      	ldr	r3, [r4, #4]
 8015af2:	dd0c      	ble.n	8015b0e <_printf_float+0x19e>
 8015af4:	6121      	str	r1, [r4, #16]
 8015af6:	b913      	cbnz	r3, 8015afe <_printf_float+0x18e>
 8015af8:	6822      	ldr	r2, [r4, #0]
 8015afa:	07d2      	lsls	r2, r2, #31
 8015afc:	d502      	bpl.n	8015b04 <_printf_float+0x194>
 8015afe:	3301      	adds	r3, #1
 8015b00:	440b      	add	r3, r1
 8015b02:	6123      	str	r3, [r4, #16]
 8015b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b06:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b08:	f04f 0900 	mov.w	r9, #0
 8015b0c:	e7d9      	b.n	8015ac2 <_printf_float+0x152>
 8015b0e:	b913      	cbnz	r3, 8015b16 <_printf_float+0x1a6>
 8015b10:	6822      	ldr	r2, [r4, #0]
 8015b12:	07d0      	lsls	r0, r2, #31
 8015b14:	d501      	bpl.n	8015b1a <_printf_float+0x1aa>
 8015b16:	3302      	adds	r3, #2
 8015b18:	e7f3      	b.n	8015b02 <_printf_float+0x192>
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	e7f1      	b.n	8015b02 <_printf_float+0x192>
 8015b1e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b22:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b26:	4293      	cmp	r3, r2
 8015b28:	db05      	blt.n	8015b36 <_printf_float+0x1c6>
 8015b2a:	6822      	ldr	r2, [r4, #0]
 8015b2c:	6123      	str	r3, [r4, #16]
 8015b2e:	07d1      	lsls	r1, r2, #31
 8015b30:	d5e8      	bpl.n	8015b04 <_printf_float+0x194>
 8015b32:	3301      	adds	r3, #1
 8015b34:	e7e5      	b.n	8015b02 <_printf_float+0x192>
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	bfd4      	ite	le
 8015b3a:	f1c3 0302 	rsble	r3, r3, #2
 8015b3e:	2301      	movgt	r3, #1
 8015b40:	4413      	add	r3, r2
 8015b42:	e7de      	b.n	8015b02 <_printf_float+0x192>
 8015b44:	6823      	ldr	r3, [r4, #0]
 8015b46:	055a      	lsls	r2, r3, #21
 8015b48:	d407      	bmi.n	8015b5a <_printf_float+0x1ea>
 8015b4a:	6923      	ldr	r3, [r4, #16]
 8015b4c:	4642      	mov	r2, r8
 8015b4e:	4631      	mov	r1, r6
 8015b50:	4628      	mov	r0, r5
 8015b52:	47b8      	blx	r7
 8015b54:	3001      	adds	r0, #1
 8015b56:	d12b      	bne.n	8015bb0 <_printf_float+0x240>
 8015b58:	e767      	b.n	8015a2a <_printf_float+0xba>
 8015b5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b5e:	f240 80dc 	bls.w	8015d1a <_printf_float+0x3aa>
 8015b62:	2200      	movs	r2, #0
 8015b64:	2300      	movs	r3, #0
 8015b66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b6a:	f7ea ffc5 	bl	8000af8 <__aeabi_dcmpeq>
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	d033      	beq.n	8015bda <_printf_float+0x26a>
 8015b72:	2301      	movs	r3, #1
 8015b74:	4a41      	ldr	r2, [pc, #260]	; (8015c7c <_printf_float+0x30c>)
 8015b76:	4631      	mov	r1, r6
 8015b78:	4628      	mov	r0, r5
 8015b7a:	47b8      	blx	r7
 8015b7c:	3001      	adds	r0, #1
 8015b7e:	f43f af54 	beq.w	8015a2a <_printf_float+0xba>
 8015b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015b86:	429a      	cmp	r2, r3
 8015b88:	db02      	blt.n	8015b90 <_printf_float+0x220>
 8015b8a:	6823      	ldr	r3, [r4, #0]
 8015b8c:	07d8      	lsls	r0, r3, #31
 8015b8e:	d50f      	bpl.n	8015bb0 <_printf_float+0x240>
 8015b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b94:	4631      	mov	r1, r6
 8015b96:	4628      	mov	r0, r5
 8015b98:	47b8      	blx	r7
 8015b9a:	3001      	adds	r0, #1
 8015b9c:	f43f af45 	beq.w	8015a2a <_printf_float+0xba>
 8015ba0:	f04f 0800 	mov.w	r8, #0
 8015ba4:	f104 091a 	add.w	r9, r4, #26
 8015ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015baa:	3b01      	subs	r3, #1
 8015bac:	4543      	cmp	r3, r8
 8015bae:	dc09      	bgt.n	8015bc4 <_printf_float+0x254>
 8015bb0:	6823      	ldr	r3, [r4, #0]
 8015bb2:	079b      	lsls	r3, r3, #30
 8015bb4:	f100 8103 	bmi.w	8015dbe <_printf_float+0x44e>
 8015bb8:	68e0      	ldr	r0, [r4, #12]
 8015bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bbc:	4298      	cmp	r0, r3
 8015bbe:	bfb8      	it	lt
 8015bc0:	4618      	movlt	r0, r3
 8015bc2:	e734      	b.n	8015a2e <_printf_float+0xbe>
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	464a      	mov	r2, r9
 8015bc8:	4631      	mov	r1, r6
 8015bca:	4628      	mov	r0, r5
 8015bcc:	47b8      	blx	r7
 8015bce:	3001      	adds	r0, #1
 8015bd0:	f43f af2b 	beq.w	8015a2a <_printf_float+0xba>
 8015bd4:	f108 0801 	add.w	r8, r8, #1
 8015bd8:	e7e6      	b.n	8015ba8 <_printf_float+0x238>
 8015bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	dc2b      	bgt.n	8015c38 <_printf_float+0x2c8>
 8015be0:	2301      	movs	r3, #1
 8015be2:	4a26      	ldr	r2, [pc, #152]	; (8015c7c <_printf_float+0x30c>)
 8015be4:	4631      	mov	r1, r6
 8015be6:	4628      	mov	r0, r5
 8015be8:	47b8      	blx	r7
 8015bea:	3001      	adds	r0, #1
 8015bec:	f43f af1d 	beq.w	8015a2a <_printf_float+0xba>
 8015bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf2:	b923      	cbnz	r3, 8015bfe <_printf_float+0x28e>
 8015bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bf6:	b913      	cbnz	r3, 8015bfe <_printf_float+0x28e>
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	07d9      	lsls	r1, r3, #31
 8015bfc:	d5d8      	bpl.n	8015bb0 <_printf_float+0x240>
 8015bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c02:	4631      	mov	r1, r6
 8015c04:	4628      	mov	r0, r5
 8015c06:	47b8      	blx	r7
 8015c08:	3001      	adds	r0, #1
 8015c0a:	f43f af0e 	beq.w	8015a2a <_printf_float+0xba>
 8015c0e:	f04f 0900 	mov.w	r9, #0
 8015c12:	f104 0a1a 	add.w	sl, r4, #26
 8015c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c18:	425b      	negs	r3, r3
 8015c1a:	454b      	cmp	r3, r9
 8015c1c:	dc01      	bgt.n	8015c22 <_printf_float+0x2b2>
 8015c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c20:	e794      	b.n	8015b4c <_printf_float+0x1dc>
 8015c22:	2301      	movs	r3, #1
 8015c24:	4652      	mov	r2, sl
 8015c26:	4631      	mov	r1, r6
 8015c28:	4628      	mov	r0, r5
 8015c2a:	47b8      	blx	r7
 8015c2c:	3001      	adds	r0, #1
 8015c2e:	f43f aefc 	beq.w	8015a2a <_printf_float+0xba>
 8015c32:	f109 0901 	add.w	r9, r9, #1
 8015c36:	e7ee      	b.n	8015c16 <_printf_float+0x2a6>
 8015c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	bfa8      	it	ge
 8015c40:	461a      	movge	r2, r3
 8015c42:	2a00      	cmp	r2, #0
 8015c44:	4691      	mov	r9, r2
 8015c46:	dd07      	ble.n	8015c58 <_printf_float+0x2e8>
 8015c48:	4613      	mov	r3, r2
 8015c4a:	4631      	mov	r1, r6
 8015c4c:	4642      	mov	r2, r8
 8015c4e:	4628      	mov	r0, r5
 8015c50:	47b8      	blx	r7
 8015c52:	3001      	adds	r0, #1
 8015c54:	f43f aee9 	beq.w	8015a2a <_printf_float+0xba>
 8015c58:	f104 031a 	add.w	r3, r4, #26
 8015c5c:	f04f 0b00 	mov.w	fp, #0
 8015c60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c64:	9306      	str	r3, [sp, #24]
 8015c66:	e015      	b.n	8015c94 <_printf_float+0x324>
 8015c68:	7fefffff 	.word	0x7fefffff
 8015c6c:	0801a2c4 	.word	0x0801a2c4
 8015c70:	0801a2c0 	.word	0x0801a2c0
 8015c74:	0801a2cc 	.word	0x0801a2cc
 8015c78:	0801a2c8 	.word	0x0801a2c8
 8015c7c:	0801a483 	.word	0x0801a483
 8015c80:	2301      	movs	r3, #1
 8015c82:	9a06      	ldr	r2, [sp, #24]
 8015c84:	4631      	mov	r1, r6
 8015c86:	4628      	mov	r0, r5
 8015c88:	47b8      	blx	r7
 8015c8a:	3001      	adds	r0, #1
 8015c8c:	f43f aecd 	beq.w	8015a2a <_printf_float+0xba>
 8015c90:	f10b 0b01 	add.w	fp, fp, #1
 8015c94:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015c98:	ebaa 0309 	sub.w	r3, sl, r9
 8015c9c:	455b      	cmp	r3, fp
 8015c9e:	dcef      	bgt.n	8015c80 <_printf_float+0x310>
 8015ca0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	44d0      	add	r8, sl
 8015ca8:	db15      	blt.n	8015cd6 <_printf_float+0x366>
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	07da      	lsls	r2, r3, #31
 8015cae:	d412      	bmi.n	8015cd6 <_printf_float+0x366>
 8015cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cb4:	eba3 020a 	sub.w	r2, r3, sl
 8015cb8:	eba3 0a01 	sub.w	sl, r3, r1
 8015cbc:	4592      	cmp	sl, r2
 8015cbe:	bfa8      	it	ge
 8015cc0:	4692      	movge	sl, r2
 8015cc2:	f1ba 0f00 	cmp.w	sl, #0
 8015cc6:	dc0e      	bgt.n	8015ce6 <_printf_float+0x376>
 8015cc8:	f04f 0800 	mov.w	r8, #0
 8015ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015cd0:	f104 091a 	add.w	r9, r4, #26
 8015cd4:	e019      	b.n	8015d0a <_printf_float+0x39a>
 8015cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cda:	4631      	mov	r1, r6
 8015cdc:	4628      	mov	r0, r5
 8015cde:	47b8      	blx	r7
 8015ce0:	3001      	adds	r0, #1
 8015ce2:	d1e5      	bne.n	8015cb0 <_printf_float+0x340>
 8015ce4:	e6a1      	b.n	8015a2a <_printf_float+0xba>
 8015ce6:	4653      	mov	r3, sl
 8015ce8:	4642      	mov	r2, r8
 8015cea:	4631      	mov	r1, r6
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b8      	blx	r7
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	d1e9      	bne.n	8015cc8 <_printf_float+0x358>
 8015cf4:	e699      	b.n	8015a2a <_printf_float+0xba>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	464a      	mov	r2, r9
 8015cfa:	4631      	mov	r1, r6
 8015cfc:	4628      	mov	r0, r5
 8015cfe:	47b8      	blx	r7
 8015d00:	3001      	adds	r0, #1
 8015d02:	f43f ae92 	beq.w	8015a2a <_printf_float+0xba>
 8015d06:	f108 0801 	add.w	r8, r8, #1
 8015d0a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d0e:	1a9b      	subs	r3, r3, r2
 8015d10:	eba3 030a 	sub.w	r3, r3, sl
 8015d14:	4543      	cmp	r3, r8
 8015d16:	dcee      	bgt.n	8015cf6 <_printf_float+0x386>
 8015d18:	e74a      	b.n	8015bb0 <_printf_float+0x240>
 8015d1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d1c:	2a01      	cmp	r2, #1
 8015d1e:	dc01      	bgt.n	8015d24 <_printf_float+0x3b4>
 8015d20:	07db      	lsls	r3, r3, #31
 8015d22:	d53a      	bpl.n	8015d9a <_printf_float+0x42a>
 8015d24:	2301      	movs	r3, #1
 8015d26:	4642      	mov	r2, r8
 8015d28:	4631      	mov	r1, r6
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	47b8      	blx	r7
 8015d2e:	3001      	adds	r0, #1
 8015d30:	f43f ae7b 	beq.w	8015a2a <_printf_float+0xba>
 8015d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d38:	4631      	mov	r1, r6
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	47b8      	blx	r7
 8015d3e:	3001      	adds	r0, #1
 8015d40:	f108 0801 	add.w	r8, r8, #1
 8015d44:	f43f ae71 	beq.w	8015a2a <_printf_float+0xba>
 8015d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d4a:	2200      	movs	r2, #0
 8015d4c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d54:	2300      	movs	r3, #0
 8015d56:	f7ea fecf 	bl	8000af8 <__aeabi_dcmpeq>
 8015d5a:	b9c8      	cbnz	r0, 8015d90 <_printf_float+0x420>
 8015d5c:	4653      	mov	r3, sl
 8015d5e:	4642      	mov	r2, r8
 8015d60:	4631      	mov	r1, r6
 8015d62:	4628      	mov	r0, r5
 8015d64:	47b8      	blx	r7
 8015d66:	3001      	adds	r0, #1
 8015d68:	d10e      	bne.n	8015d88 <_printf_float+0x418>
 8015d6a:	e65e      	b.n	8015a2a <_printf_float+0xba>
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	4652      	mov	r2, sl
 8015d70:	4631      	mov	r1, r6
 8015d72:	4628      	mov	r0, r5
 8015d74:	47b8      	blx	r7
 8015d76:	3001      	adds	r0, #1
 8015d78:	f43f ae57 	beq.w	8015a2a <_printf_float+0xba>
 8015d7c:	f108 0801 	add.w	r8, r8, #1
 8015d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d82:	3b01      	subs	r3, #1
 8015d84:	4543      	cmp	r3, r8
 8015d86:	dcf1      	bgt.n	8015d6c <_printf_float+0x3fc>
 8015d88:	464b      	mov	r3, r9
 8015d8a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015d8e:	e6de      	b.n	8015b4e <_printf_float+0x1de>
 8015d90:	f04f 0800 	mov.w	r8, #0
 8015d94:	f104 0a1a 	add.w	sl, r4, #26
 8015d98:	e7f2      	b.n	8015d80 <_printf_float+0x410>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	e7df      	b.n	8015d5e <_printf_float+0x3ee>
 8015d9e:	2301      	movs	r3, #1
 8015da0:	464a      	mov	r2, r9
 8015da2:	4631      	mov	r1, r6
 8015da4:	4628      	mov	r0, r5
 8015da6:	47b8      	blx	r7
 8015da8:	3001      	adds	r0, #1
 8015daa:	f43f ae3e 	beq.w	8015a2a <_printf_float+0xba>
 8015dae:	f108 0801 	add.w	r8, r8, #1
 8015db2:	68e3      	ldr	r3, [r4, #12]
 8015db4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015db6:	1a9b      	subs	r3, r3, r2
 8015db8:	4543      	cmp	r3, r8
 8015dba:	dcf0      	bgt.n	8015d9e <_printf_float+0x42e>
 8015dbc:	e6fc      	b.n	8015bb8 <_printf_float+0x248>
 8015dbe:	f04f 0800 	mov.w	r8, #0
 8015dc2:	f104 0919 	add.w	r9, r4, #25
 8015dc6:	e7f4      	b.n	8015db2 <_printf_float+0x442>
 8015dc8:	2900      	cmp	r1, #0
 8015dca:	f43f ae8b 	beq.w	8015ae4 <_printf_float+0x174>
 8015dce:	2300      	movs	r3, #0
 8015dd0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015dd4:	ab09      	add	r3, sp, #36	; 0x24
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	ec49 8b10 	vmov	d0, r8, r9
 8015ddc:	6022      	str	r2, [r4, #0]
 8015dde:	f8cd a004 	str.w	sl, [sp, #4]
 8015de2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015de6:	4628      	mov	r0, r5
 8015de8:	f7ff fd2e 	bl	8015848 <__cvt>
 8015dec:	4680      	mov	r8, r0
 8015dee:	e648      	b.n	8015a82 <_printf_float+0x112>

08015df0 <_printf_common>:
 8015df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015df4:	4691      	mov	r9, r2
 8015df6:	461f      	mov	r7, r3
 8015df8:	688a      	ldr	r2, [r1, #8]
 8015dfa:	690b      	ldr	r3, [r1, #16]
 8015dfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e00:	4293      	cmp	r3, r2
 8015e02:	bfb8      	it	lt
 8015e04:	4613      	movlt	r3, r2
 8015e06:	f8c9 3000 	str.w	r3, [r9]
 8015e0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e0e:	4606      	mov	r6, r0
 8015e10:	460c      	mov	r4, r1
 8015e12:	b112      	cbz	r2, 8015e1a <_printf_common+0x2a>
 8015e14:	3301      	adds	r3, #1
 8015e16:	f8c9 3000 	str.w	r3, [r9]
 8015e1a:	6823      	ldr	r3, [r4, #0]
 8015e1c:	0699      	lsls	r1, r3, #26
 8015e1e:	bf42      	ittt	mi
 8015e20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e24:	3302      	addmi	r3, #2
 8015e26:	f8c9 3000 	strmi.w	r3, [r9]
 8015e2a:	6825      	ldr	r5, [r4, #0]
 8015e2c:	f015 0506 	ands.w	r5, r5, #6
 8015e30:	d107      	bne.n	8015e42 <_printf_common+0x52>
 8015e32:	f104 0a19 	add.w	sl, r4, #25
 8015e36:	68e3      	ldr	r3, [r4, #12]
 8015e38:	f8d9 2000 	ldr.w	r2, [r9]
 8015e3c:	1a9b      	subs	r3, r3, r2
 8015e3e:	42ab      	cmp	r3, r5
 8015e40:	dc28      	bgt.n	8015e94 <_printf_common+0xa4>
 8015e42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015e46:	6822      	ldr	r2, [r4, #0]
 8015e48:	3300      	adds	r3, #0
 8015e4a:	bf18      	it	ne
 8015e4c:	2301      	movne	r3, #1
 8015e4e:	0692      	lsls	r2, r2, #26
 8015e50:	d42d      	bmi.n	8015eae <_printf_common+0xbe>
 8015e52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e56:	4639      	mov	r1, r7
 8015e58:	4630      	mov	r0, r6
 8015e5a:	47c0      	blx	r8
 8015e5c:	3001      	adds	r0, #1
 8015e5e:	d020      	beq.n	8015ea2 <_printf_common+0xb2>
 8015e60:	6823      	ldr	r3, [r4, #0]
 8015e62:	68e5      	ldr	r5, [r4, #12]
 8015e64:	f8d9 2000 	ldr.w	r2, [r9]
 8015e68:	f003 0306 	and.w	r3, r3, #6
 8015e6c:	2b04      	cmp	r3, #4
 8015e6e:	bf08      	it	eq
 8015e70:	1aad      	subeq	r5, r5, r2
 8015e72:	68a3      	ldr	r3, [r4, #8]
 8015e74:	6922      	ldr	r2, [r4, #16]
 8015e76:	bf0c      	ite	eq
 8015e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015e7c:	2500      	movne	r5, #0
 8015e7e:	4293      	cmp	r3, r2
 8015e80:	bfc4      	itt	gt
 8015e82:	1a9b      	subgt	r3, r3, r2
 8015e84:	18ed      	addgt	r5, r5, r3
 8015e86:	f04f 0900 	mov.w	r9, #0
 8015e8a:	341a      	adds	r4, #26
 8015e8c:	454d      	cmp	r5, r9
 8015e8e:	d11a      	bne.n	8015ec6 <_printf_common+0xd6>
 8015e90:	2000      	movs	r0, #0
 8015e92:	e008      	b.n	8015ea6 <_printf_common+0xb6>
 8015e94:	2301      	movs	r3, #1
 8015e96:	4652      	mov	r2, sl
 8015e98:	4639      	mov	r1, r7
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	47c0      	blx	r8
 8015e9e:	3001      	adds	r0, #1
 8015ea0:	d103      	bne.n	8015eaa <_printf_common+0xba>
 8015ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8015ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eaa:	3501      	adds	r5, #1
 8015eac:	e7c3      	b.n	8015e36 <_printf_common+0x46>
 8015eae:	18e1      	adds	r1, r4, r3
 8015eb0:	1c5a      	adds	r2, r3, #1
 8015eb2:	2030      	movs	r0, #48	; 0x30
 8015eb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015eb8:	4422      	add	r2, r4
 8015eba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ec2:	3302      	adds	r3, #2
 8015ec4:	e7c5      	b.n	8015e52 <_printf_common+0x62>
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	4622      	mov	r2, r4
 8015eca:	4639      	mov	r1, r7
 8015ecc:	4630      	mov	r0, r6
 8015ece:	47c0      	blx	r8
 8015ed0:	3001      	adds	r0, #1
 8015ed2:	d0e6      	beq.n	8015ea2 <_printf_common+0xb2>
 8015ed4:	f109 0901 	add.w	r9, r9, #1
 8015ed8:	e7d8      	b.n	8015e8c <_printf_common+0x9c>
	...

08015edc <_printf_i>:
 8015edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ee0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015ee4:	460c      	mov	r4, r1
 8015ee6:	7e09      	ldrb	r1, [r1, #24]
 8015ee8:	b085      	sub	sp, #20
 8015eea:	296e      	cmp	r1, #110	; 0x6e
 8015eec:	4617      	mov	r7, r2
 8015eee:	4606      	mov	r6, r0
 8015ef0:	4698      	mov	r8, r3
 8015ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015ef4:	f000 80b3 	beq.w	801605e <_printf_i+0x182>
 8015ef8:	d822      	bhi.n	8015f40 <_printf_i+0x64>
 8015efa:	2963      	cmp	r1, #99	; 0x63
 8015efc:	d036      	beq.n	8015f6c <_printf_i+0x90>
 8015efe:	d80a      	bhi.n	8015f16 <_printf_i+0x3a>
 8015f00:	2900      	cmp	r1, #0
 8015f02:	f000 80b9 	beq.w	8016078 <_printf_i+0x19c>
 8015f06:	2958      	cmp	r1, #88	; 0x58
 8015f08:	f000 8083 	beq.w	8016012 <_printf_i+0x136>
 8015f0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015f14:	e032      	b.n	8015f7c <_printf_i+0xa0>
 8015f16:	2964      	cmp	r1, #100	; 0x64
 8015f18:	d001      	beq.n	8015f1e <_printf_i+0x42>
 8015f1a:	2969      	cmp	r1, #105	; 0x69
 8015f1c:	d1f6      	bne.n	8015f0c <_printf_i+0x30>
 8015f1e:	6820      	ldr	r0, [r4, #0]
 8015f20:	6813      	ldr	r3, [r2, #0]
 8015f22:	0605      	lsls	r5, r0, #24
 8015f24:	f103 0104 	add.w	r1, r3, #4
 8015f28:	d52a      	bpl.n	8015f80 <_printf_i+0xa4>
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	6011      	str	r1, [r2, #0]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	da03      	bge.n	8015f3a <_printf_i+0x5e>
 8015f32:	222d      	movs	r2, #45	; 0x2d
 8015f34:	425b      	negs	r3, r3
 8015f36:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015f3a:	486f      	ldr	r0, [pc, #444]	; (80160f8 <_printf_i+0x21c>)
 8015f3c:	220a      	movs	r2, #10
 8015f3e:	e039      	b.n	8015fb4 <_printf_i+0xd8>
 8015f40:	2973      	cmp	r1, #115	; 0x73
 8015f42:	f000 809d 	beq.w	8016080 <_printf_i+0x1a4>
 8015f46:	d808      	bhi.n	8015f5a <_printf_i+0x7e>
 8015f48:	296f      	cmp	r1, #111	; 0x6f
 8015f4a:	d020      	beq.n	8015f8e <_printf_i+0xb2>
 8015f4c:	2970      	cmp	r1, #112	; 0x70
 8015f4e:	d1dd      	bne.n	8015f0c <_printf_i+0x30>
 8015f50:	6823      	ldr	r3, [r4, #0]
 8015f52:	f043 0320 	orr.w	r3, r3, #32
 8015f56:	6023      	str	r3, [r4, #0]
 8015f58:	e003      	b.n	8015f62 <_printf_i+0x86>
 8015f5a:	2975      	cmp	r1, #117	; 0x75
 8015f5c:	d017      	beq.n	8015f8e <_printf_i+0xb2>
 8015f5e:	2978      	cmp	r1, #120	; 0x78
 8015f60:	d1d4      	bne.n	8015f0c <_printf_i+0x30>
 8015f62:	2378      	movs	r3, #120	; 0x78
 8015f64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f68:	4864      	ldr	r0, [pc, #400]	; (80160fc <_printf_i+0x220>)
 8015f6a:	e055      	b.n	8016018 <_printf_i+0x13c>
 8015f6c:	6813      	ldr	r3, [r2, #0]
 8015f6e:	1d19      	adds	r1, r3, #4
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	6011      	str	r1, [r2, #0]
 8015f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	e08c      	b.n	801609a <_printf_i+0x1be>
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	6011      	str	r1, [r2, #0]
 8015f84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015f88:	bf18      	it	ne
 8015f8a:	b21b      	sxthne	r3, r3
 8015f8c:	e7cf      	b.n	8015f2e <_printf_i+0x52>
 8015f8e:	6813      	ldr	r3, [r2, #0]
 8015f90:	6825      	ldr	r5, [r4, #0]
 8015f92:	1d18      	adds	r0, r3, #4
 8015f94:	6010      	str	r0, [r2, #0]
 8015f96:	0628      	lsls	r0, r5, #24
 8015f98:	d501      	bpl.n	8015f9e <_printf_i+0xc2>
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	e002      	b.n	8015fa4 <_printf_i+0xc8>
 8015f9e:	0668      	lsls	r0, r5, #25
 8015fa0:	d5fb      	bpl.n	8015f9a <_printf_i+0xbe>
 8015fa2:	881b      	ldrh	r3, [r3, #0]
 8015fa4:	4854      	ldr	r0, [pc, #336]	; (80160f8 <_printf_i+0x21c>)
 8015fa6:	296f      	cmp	r1, #111	; 0x6f
 8015fa8:	bf14      	ite	ne
 8015faa:	220a      	movne	r2, #10
 8015fac:	2208      	moveq	r2, #8
 8015fae:	2100      	movs	r1, #0
 8015fb0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fb4:	6865      	ldr	r5, [r4, #4]
 8015fb6:	60a5      	str	r5, [r4, #8]
 8015fb8:	2d00      	cmp	r5, #0
 8015fba:	f2c0 8095 	blt.w	80160e8 <_printf_i+0x20c>
 8015fbe:	6821      	ldr	r1, [r4, #0]
 8015fc0:	f021 0104 	bic.w	r1, r1, #4
 8015fc4:	6021      	str	r1, [r4, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d13d      	bne.n	8016046 <_printf_i+0x16a>
 8015fca:	2d00      	cmp	r5, #0
 8015fcc:	f040 808e 	bne.w	80160ec <_printf_i+0x210>
 8015fd0:	4665      	mov	r5, ip
 8015fd2:	2a08      	cmp	r2, #8
 8015fd4:	d10b      	bne.n	8015fee <_printf_i+0x112>
 8015fd6:	6823      	ldr	r3, [r4, #0]
 8015fd8:	07db      	lsls	r3, r3, #31
 8015fda:	d508      	bpl.n	8015fee <_printf_i+0x112>
 8015fdc:	6923      	ldr	r3, [r4, #16]
 8015fde:	6862      	ldr	r2, [r4, #4]
 8015fe0:	429a      	cmp	r2, r3
 8015fe2:	bfde      	ittt	le
 8015fe4:	2330      	movle	r3, #48	; 0x30
 8015fe6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015fea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015fee:	ebac 0305 	sub.w	r3, ip, r5
 8015ff2:	6123      	str	r3, [r4, #16]
 8015ff4:	f8cd 8000 	str.w	r8, [sp]
 8015ff8:	463b      	mov	r3, r7
 8015ffa:	aa03      	add	r2, sp, #12
 8015ffc:	4621      	mov	r1, r4
 8015ffe:	4630      	mov	r0, r6
 8016000:	f7ff fef6 	bl	8015df0 <_printf_common>
 8016004:	3001      	adds	r0, #1
 8016006:	d14d      	bne.n	80160a4 <_printf_i+0x1c8>
 8016008:	f04f 30ff 	mov.w	r0, #4294967295
 801600c:	b005      	add	sp, #20
 801600e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016012:	4839      	ldr	r0, [pc, #228]	; (80160f8 <_printf_i+0x21c>)
 8016014:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016018:	6813      	ldr	r3, [r2, #0]
 801601a:	6821      	ldr	r1, [r4, #0]
 801601c:	1d1d      	adds	r5, r3, #4
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	6015      	str	r5, [r2, #0]
 8016022:	060a      	lsls	r2, r1, #24
 8016024:	d50b      	bpl.n	801603e <_printf_i+0x162>
 8016026:	07ca      	lsls	r2, r1, #31
 8016028:	bf44      	itt	mi
 801602a:	f041 0120 	orrmi.w	r1, r1, #32
 801602e:	6021      	strmi	r1, [r4, #0]
 8016030:	b91b      	cbnz	r3, 801603a <_printf_i+0x15e>
 8016032:	6822      	ldr	r2, [r4, #0]
 8016034:	f022 0220 	bic.w	r2, r2, #32
 8016038:	6022      	str	r2, [r4, #0]
 801603a:	2210      	movs	r2, #16
 801603c:	e7b7      	b.n	8015fae <_printf_i+0xd2>
 801603e:	064d      	lsls	r5, r1, #25
 8016040:	bf48      	it	mi
 8016042:	b29b      	uxthmi	r3, r3
 8016044:	e7ef      	b.n	8016026 <_printf_i+0x14a>
 8016046:	4665      	mov	r5, ip
 8016048:	fbb3 f1f2 	udiv	r1, r3, r2
 801604c:	fb02 3311 	mls	r3, r2, r1, r3
 8016050:	5cc3      	ldrb	r3, [r0, r3]
 8016052:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016056:	460b      	mov	r3, r1
 8016058:	2900      	cmp	r1, #0
 801605a:	d1f5      	bne.n	8016048 <_printf_i+0x16c>
 801605c:	e7b9      	b.n	8015fd2 <_printf_i+0xf6>
 801605e:	6813      	ldr	r3, [r2, #0]
 8016060:	6825      	ldr	r5, [r4, #0]
 8016062:	6961      	ldr	r1, [r4, #20]
 8016064:	1d18      	adds	r0, r3, #4
 8016066:	6010      	str	r0, [r2, #0]
 8016068:	0628      	lsls	r0, r5, #24
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	d501      	bpl.n	8016072 <_printf_i+0x196>
 801606e:	6019      	str	r1, [r3, #0]
 8016070:	e002      	b.n	8016078 <_printf_i+0x19c>
 8016072:	066a      	lsls	r2, r5, #25
 8016074:	d5fb      	bpl.n	801606e <_printf_i+0x192>
 8016076:	8019      	strh	r1, [r3, #0]
 8016078:	2300      	movs	r3, #0
 801607a:	6123      	str	r3, [r4, #16]
 801607c:	4665      	mov	r5, ip
 801607e:	e7b9      	b.n	8015ff4 <_printf_i+0x118>
 8016080:	6813      	ldr	r3, [r2, #0]
 8016082:	1d19      	adds	r1, r3, #4
 8016084:	6011      	str	r1, [r2, #0]
 8016086:	681d      	ldr	r5, [r3, #0]
 8016088:	6862      	ldr	r2, [r4, #4]
 801608a:	2100      	movs	r1, #0
 801608c:	4628      	mov	r0, r5
 801608e:	f7ea f8bf 	bl	8000210 <memchr>
 8016092:	b108      	cbz	r0, 8016098 <_printf_i+0x1bc>
 8016094:	1b40      	subs	r0, r0, r5
 8016096:	6060      	str	r0, [r4, #4]
 8016098:	6863      	ldr	r3, [r4, #4]
 801609a:	6123      	str	r3, [r4, #16]
 801609c:	2300      	movs	r3, #0
 801609e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160a2:	e7a7      	b.n	8015ff4 <_printf_i+0x118>
 80160a4:	6923      	ldr	r3, [r4, #16]
 80160a6:	462a      	mov	r2, r5
 80160a8:	4639      	mov	r1, r7
 80160aa:	4630      	mov	r0, r6
 80160ac:	47c0      	blx	r8
 80160ae:	3001      	adds	r0, #1
 80160b0:	d0aa      	beq.n	8016008 <_printf_i+0x12c>
 80160b2:	6823      	ldr	r3, [r4, #0]
 80160b4:	079b      	lsls	r3, r3, #30
 80160b6:	d413      	bmi.n	80160e0 <_printf_i+0x204>
 80160b8:	68e0      	ldr	r0, [r4, #12]
 80160ba:	9b03      	ldr	r3, [sp, #12]
 80160bc:	4298      	cmp	r0, r3
 80160be:	bfb8      	it	lt
 80160c0:	4618      	movlt	r0, r3
 80160c2:	e7a3      	b.n	801600c <_printf_i+0x130>
 80160c4:	2301      	movs	r3, #1
 80160c6:	464a      	mov	r2, r9
 80160c8:	4639      	mov	r1, r7
 80160ca:	4630      	mov	r0, r6
 80160cc:	47c0      	blx	r8
 80160ce:	3001      	adds	r0, #1
 80160d0:	d09a      	beq.n	8016008 <_printf_i+0x12c>
 80160d2:	3501      	adds	r5, #1
 80160d4:	68e3      	ldr	r3, [r4, #12]
 80160d6:	9a03      	ldr	r2, [sp, #12]
 80160d8:	1a9b      	subs	r3, r3, r2
 80160da:	42ab      	cmp	r3, r5
 80160dc:	dcf2      	bgt.n	80160c4 <_printf_i+0x1e8>
 80160de:	e7eb      	b.n	80160b8 <_printf_i+0x1dc>
 80160e0:	2500      	movs	r5, #0
 80160e2:	f104 0919 	add.w	r9, r4, #25
 80160e6:	e7f5      	b.n	80160d4 <_printf_i+0x1f8>
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d1ac      	bne.n	8016046 <_printf_i+0x16a>
 80160ec:	7803      	ldrb	r3, [r0, #0]
 80160ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80160f6:	e76c      	b.n	8015fd2 <_printf_i+0xf6>
 80160f8:	0801a2d0 	.word	0x0801a2d0
 80160fc:	0801a2e1 	.word	0x0801a2e1

08016100 <_scanf_float>:
 8016100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016104:	469a      	mov	sl, r3
 8016106:	688b      	ldr	r3, [r1, #8]
 8016108:	4616      	mov	r6, r2
 801610a:	1e5a      	subs	r2, r3, #1
 801610c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016110:	b087      	sub	sp, #28
 8016112:	bf83      	ittte	hi
 8016114:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016118:	189b      	addhi	r3, r3, r2
 801611a:	9301      	strhi	r3, [sp, #4]
 801611c:	2300      	movls	r3, #0
 801611e:	bf86      	itte	hi
 8016120:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016124:	608b      	strhi	r3, [r1, #8]
 8016126:	9301      	strls	r3, [sp, #4]
 8016128:	680b      	ldr	r3, [r1, #0]
 801612a:	4688      	mov	r8, r1
 801612c:	f04f 0b00 	mov.w	fp, #0
 8016130:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016134:	f848 3b1c 	str.w	r3, [r8], #28
 8016138:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801613c:	4607      	mov	r7, r0
 801613e:	460c      	mov	r4, r1
 8016140:	4645      	mov	r5, r8
 8016142:	465a      	mov	r2, fp
 8016144:	46d9      	mov	r9, fp
 8016146:	f8cd b008 	str.w	fp, [sp, #8]
 801614a:	68a1      	ldr	r1, [r4, #8]
 801614c:	b181      	cbz	r1, 8016170 <_scanf_float+0x70>
 801614e:	6833      	ldr	r3, [r6, #0]
 8016150:	781b      	ldrb	r3, [r3, #0]
 8016152:	2b49      	cmp	r3, #73	; 0x49
 8016154:	d071      	beq.n	801623a <_scanf_float+0x13a>
 8016156:	d84d      	bhi.n	80161f4 <_scanf_float+0xf4>
 8016158:	2b39      	cmp	r3, #57	; 0x39
 801615a:	d840      	bhi.n	80161de <_scanf_float+0xde>
 801615c:	2b31      	cmp	r3, #49	; 0x31
 801615e:	f080 8088 	bcs.w	8016272 <_scanf_float+0x172>
 8016162:	2b2d      	cmp	r3, #45	; 0x2d
 8016164:	f000 8090 	beq.w	8016288 <_scanf_float+0x188>
 8016168:	d815      	bhi.n	8016196 <_scanf_float+0x96>
 801616a:	2b2b      	cmp	r3, #43	; 0x2b
 801616c:	f000 808c 	beq.w	8016288 <_scanf_float+0x188>
 8016170:	f1b9 0f00 	cmp.w	r9, #0
 8016174:	d003      	beq.n	801617e <_scanf_float+0x7e>
 8016176:	6823      	ldr	r3, [r4, #0]
 8016178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801617c:	6023      	str	r3, [r4, #0]
 801617e:	3a01      	subs	r2, #1
 8016180:	2a01      	cmp	r2, #1
 8016182:	f200 80ea 	bhi.w	801635a <_scanf_float+0x25a>
 8016186:	4545      	cmp	r5, r8
 8016188:	f200 80dc 	bhi.w	8016344 <_scanf_float+0x244>
 801618c:	2601      	movs	r6, #1
 801618e:	4630      	mov	r0, r6
 8016190:	b007      	add	sp, #28
 8016192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016196:	2b2e      	cmp	r3, #46	; 0x2e
 8016198:	f000 809f 	beq.w	80162da <_scanf_float+0x1da>
 801619c:	2b30      	cmp	r3, #48	; 0x30
 801619e:	d1e7      	bne.n	8016170 <_scanf_float+0x70>
 80161a0:	6820      	ldr	r0, [r4, #0]
 80161a2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80161a6:	d064      	beq.n	8016272 <_scanf_float+0x172>
 80161a8:	9b01      	ldr	r3, [sp, #4]
 80161aa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80161ae:	6020      	str	r0, [r4, #0]
 80161b0:	f109 0901 	add.w	r9, r9, #1
 80161b4:	b11b      	cbz	r3, 80161be <_scanf_float+0xbe>
 80161b6:	3b01      	subs	r3, #1
 80161b8:	3101      	adds	r1, #1
 80161ba:	9301      	str	r3, [sp, #4]
 80161bc:	60a1      	str	r1, [r4, #8]
 80161be:	68a3      	ldr	r3, [r4, #8]
 80161c0:	3b01      	subs	r3, #1
 80161c2:	60a3      	str	r3, [r4, #8]
 80161c4:	6923      	ldr	r3, [r4, #16]
 80161c6:	3301      	adds	r3, #1
 80161c8:	6123      	str	r3, [r4, #16]
 80161ca:	6873      	ldr	r3, [r6, #4]
 80161cc:	3b01      	subs	r3, #1
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	6073      	str	r3, [r6, #4]
 80161d2:	f340 80ac 	ble.w	801632e <_scanf_float+0x22e>
 80161d6:	6833      	ldr	r3, [r6, #0]
 80161d8:	3301      	adds	r3, #1
 80161da:	6033      	str	r3, [r6, #0]
 80161dc:	e7b5      	b.n	801614a <_scanf_float+0x4a>
 80161de:	2b45      	cmp	r3, #69	; 0x45
 80161e0:	f000 8085 	beq.w	80162ee <_scanf_float+0x1ee>
 80161e4:	2b46      	cmp	r3, #70	; 0x46
 80161e6:	d06a      	beq.n	80162be <_scanf_float+0x1be>
 80161e8:	2b41      	cmp	r3, #65	; 0x41
 80161ea:	d1c1      	bne.n	8016170 <_scanf_float+0x70>
 80161ec:	2a01      	cmp	r2, #1
 80161ee:	d1bf      	bne.n	8016170 <_scanf_float+0x70>
 80161f0:	2202      	movs	r2, #2
 80161f2:	e046      	b.n	8016282 <_scanf_float+0x182>
 80161f4:	2b65      	cmp	r3, #101	; 0x65
 80161f6:	d07a      	beq.n	80162ee <_scanf_float+0x1ee>
 80161f8:	d818      	bhi.n	801622c <_scanf_float+0x12c>
 80161fa:	2b54      	cmp	r3, #84	; 0x54
 80161fc:	d066      	beq.n	80162cc <_scanf_float+0x1cc>
 80161fe:	d811      	bhi.n	8016224 <_scanf_float+0x124>
 8016200:	2b4e      	cmp	r3, #78	; 0x4e
 8016202:	d1b5      	bne.n	8016170 <_scanf_float+0x70>
 8016204:	2a00      	cmp	r2, #0
 8016206:	d146      	bne.n	8016296 <_scanf_float+0x196>
 8016208:	f1b9 0f00 	cmp.w	r9, #0
 801620c:	d145      	bne.n	801629a <_scanf_float+0x19a>
 801620e:	6821      	ldr	r1, [r4, #0]
 8016210:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016214:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016218:	d13f      	bne.n	801629a <_scanf_float+0x19a>
 801621a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801621e:	6021      	str	r1, [r4, #0]
 8016220:	2201      	movs	r2, #1
 8016222:	e02e      	b.n	8016282 <_scanf_float+0x182>
 8016224:	2b59      	cmp	r3, #89	; 0x59
 8016226:	d01e      	beq.n	8016266 <_scanf_float+0x166>
 8016228:	2b61      	cmp	r3, #97	; 0x61
 801622a:	e7de      	b.n	80161ea <_scanf_float+0xea>
 801622c:	2b6e      	cmp	r3, #110	; 0x6e
 801622e:	d0e9      	beq.n	8016204 <_scanf_float+0x104>
 8016230:	d815      	bhi.n	801625e <_scanf_float+0x15e>
 8016232:	2b66      	cmp	r3, #102	; 0x66
 8016234:	d043      	beq.n	80162be <_scanf_float+0x1be>
 8016236:	2b69      	cmp	r3, #105	; 0x69
 8016238:	d19a      	bne.n	8016170 <_scanf_float+0x70>
 801623a:	f1bb 0f00 	cmp.w	fp, #0
 801623e:	d138      	bne.n	80162b2 <_scanf_float+0x1b2>
 8016240:	f1b9 0f00 	cmp.w	r9, #0
 8016244:	d197      	bne.n	8016176 <_scanf_float+0x76>
 8016246:	6821      	ldr	r1, [r4, #0]
 8016248:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801624c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016250:	d195      	bne.n	801617e <_scanf_float+0x7e>
 8016252:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016256:	6021      	str	r1, [r4, #0]
 8016258:	f04f 0b01 	mov.w	fp, #1
 801625c:	e011      	b.n	8016282 <_scanf_float+0x182>
 801625e:	2b74      	cmp	r3, #116	; 0x74
 8016260:	d034      	beq.n	80162cc <_scanf_float+0x1cc>
 8016262:	2b79      	cmp	r3, #121	; 0x79
 8016264:	d184      	bne.n	8016170 <_scanf_float+0x70>
 8016266:	f1bb 0f07 	cmp.w	fp, #7
 801626a:	d181      	bne.n	8016170 <_scanf_float+0x70>
 801626c:	f04f 0b08 	mov.w	fp, #8
 8016270:	e007      	b.n	8016282 <_scanf_float+0x182>
 8016272:	eb12 0f0b 	cmn.w	r2, fp
 8016276:	f47f af7b 	bne.w	8016170 <_scanf_float+0x70>
 801627a:	6821      	ldr	r1, [r4, #0]
 801627c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016280:	6021      	str	r1, [r4, #0]
 8016282:	702b      	strb	r3, [r5, #0]
 8016284:	3501      	adds	r5, #1
 8016286:	e79a      	b.n	80161be <_scanf_float+0xbe>
 8016288:	6821      	ldr	r1, [r4, #0]
 801628a:	0608      	lsls	r0, r1, #24
 801628c:	f57f af70 	bpl.w	8016170 <_scanf_float+0x70>
 8016290:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016294:	e7f4      	b.n	8016280 <_scanf_float+0x180>
 8016296:	2a02      	cmp	r2, #2
 8016298:	d047      	beq.n	801632a <_scanf_float+0x22a>
 801629a:	f1bb 0f01 	cmp.w	fp, #1
 801629e:	d003      	beq.n	80162a8 <_scanf_float+0x1a8>
 80162a0:	f1bb 0f04 	cmp.w	fp, #4
 80162a4:	f47f af64 	bne.w	8016170 <_scanf_float+0x70>
 80162a8:	f10b 0b01 	add.w	fp, fp, #1
 80162ac:	fa5f fb8b 	uxtb.w	fp, fp
 80162b0:	e7e7      	b.n	8016282 <_scanf_float+0x182>
 80162b2:	f1bb 0f03 	cmp.w	fp, #3
 80162b6:	d0f7      	beq.n	80162a8 <_scanf_float+0x1a8>
 80162b8:	f1bb 0f05 	cmp.w	fp, #5
 80162bc:	e7f2      	b.n	80162a4 <_scanf_float+0x1a4>
 80162be:	f1bb 0f02 	cmp.w	fp, #2
 80162c2:	f47f af55 	bne.w	8016170 <_scanf_float+0x70>
 80162c6:	f04f 0b03 	mov.w	fp, #3
 80162ca:	e7da      	b.n	8016282 <_scanf_float+0x182>
 80162cc:	f1bb 0f06 	cmp.w	fp, #6
 80162d0:	f47f af4e 	bne.w	8016170 <_scanf_float+0x70>
 80162d4:	f04f 0b07 	mov.w	fp, #7
 80162d8:	e7d3      	b.n	8016282 <_scanf_float+0x182>
 80162da:	6821      	ldr	r1, [r4, #0]
 80162dc:	0588      	lsls	r0, r1, #22
 80162de:	f57f af47 	bpl.w	8016170 <_scanf_float+0x70>
 80162e2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80162e6:	6021      	str	r1, [r4, #0]
 80162e8:	f8cd 9008 	str.w	r9, [sp, #8]
 80162ec:	e7c9      	b.n	8016282 <_scanf_float+0x182>
 80162ee:	6821      	ldr	r1, [r4, #0]
 80162f0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80162f4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80162f8:	d006      	beq.n	8016308 <_scanf_float+0x208>
 80162fa:	0548      	lsls	r0, r1, #21
 80162fc:	f57f af38 	bpl.w	8016170 <_scanf_float+0x70>
 8016300:	f1b9 0f00 	cmp.w	r9, #0
 8016304:	f43f af3b 	beq.w	801617e <_scanf_float+0x7e>
 8016308:	0588      	lsls	r0, r1, #22
 801630a:	bf58      	it	pl
 801630c:	9802      	ldrpl	r0, [sp, #8]
 801630e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016312:	bf58      	it	pl
 8016314:	eba9 0000 	subpl.w	r0, r9, r0
 8016318:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801631c:	bf58      	it	pl
 801631e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016322:	6021      	str	r1, [r4, #0]
 8016324:	f04f 0900 	mov.w	r9, #0
 8016328:	e7ab      	b.n	8016282 <_scanf_float+0x182>
 801632a:	2203      	movs	r2, #3
 801632c:	e7a9      	b.n	8016282 <_scanf_float+0x182>
 801632e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016332:	9205      	str	r2, [sp, #20]
 8016334:	4631      	mov	r1, r6
 8016336:	4638      	mov	r0, r7
 8016338:	4798      	blx	r3
 801633a:	9a05      	ldr	r2, [sp, #20]
 801633c:	2800      	cmp	r0, #0
 801633e:	f43f af04 	beq.w	801614a <_scanf_float+0x4a>
 8016342:	e715      	b.n	8016170 <_scanf_float+0x70>
 8016344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016348:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801634c:	4632      	mov	r2, r6
 801634e:	4638      	mov	r0, r7
 8016350:	4798      	blx	r3
 8016352:	6923      	ldr	r3, [r4, #16]
 8016354:	3b01      	subs	r3, #1
 8016356:	6123      	str	r3, [r4, #16]
 8016358:	e715      	b.n	8016186 <_scanf_float+0x86>
 801635a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801635e:	2b06      	cmp	r3, #6
 8016360:	d80a      	bhi.n	8016378 <_scanf_float+0x278>
 8016362:	f1bb 0f02 	cmp.w	fp, #2
 8016366:	d968      	bls.n	801643a <_scanf_float+0x33a>
 8016368:	f1ab 0b03 	sub.w	fp, fp, #3
 801636c:	fa5f fb8b 	uxtb.w	fp, fp
 8016370:	eba5 0b0b 	sub.w	fp, r5, fp
 8016374:	455d      	cmp	r5, fp
 8016376:	d14b      	bne.n	8016410 <_scanf_float+0x310>
 8016378:	6823      	ldr	r3, [r4, #0]
 801637a:	05da      	lsls	r2, r3, #23
 801637c:	d51f      	bpl.n	80163be <_scanf_float+0x2be>
 801637e:	055b      	lsls	r3, r3, #21
 8016380:	d468      	bmi.n	8016454 <_scanf_float+0x354>
 8016382:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016386:	6923      	ldr	r3, [r4, #16]
 8016388:	2965      	cmp	r1, #101	; 0x65
 801638a:	f103 33ff 	add.w	r3, r3, #4294967295
 801638e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016392:	6123      	str	r3, [r4, #16]
 8016394:	d00d      	beq.n	80163b2 <_scanf_float+0x2b2>
 8016396:	2945      	cmp	r1, #69	; 0x45
 8016398:	d00b      	beq.n	80163b2 <_scanf_float+0x2b2>
 801639a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801639e:	4632      	mov	r2, r6
 80163a0:	4638      	mov	r0, r7
 80163a2:	4798      	blx	r3
 80163a4:	6923      	ldr	r3, [r4, #16]
 80163a6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80163aa:	3b01      	subs	r3, #1
 80163ac:	f1a5 0b02 	sub.w	fp, r5, #2
 80163b0:	6123      	str	r3, [r4, #16]
 80163b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163b6:	4632      	mov	r2, r6
 80163b8:	4638      	mov	r0, r7
 80163ba:	4798      	blx	r3
 80163bc:	465d      	mov	r5, fp
 80163be:	6826      	ldr	r6, [r4, #0]
 80163c0:	f016 0610 	ands.w	r6, r6, #16
 80163c4:	d17a      	bne.n	80164bc <_scanf_float+0x3bc>
 80163c6:	702e      	strb	r6, [r5, #0]
 80163c8:	6823      	ldr	r3, [r4, #0]
 80163ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80163ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80163d2:	d142      	bne.n	801645a <_scanf_float+0x35a>
 80163d4:	9b02      	ldr	r3, [sp, #8]
 80163d6:	eba9 0303 	sub.w	r3, r9, r3
 80163da:	425a      	negs	r2, r3
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d149      	bne.n	8016474 <_scanf_float+0x374>
 80163e0:	2200      	movs	r2, #0
 80163e2:	4641      	mov	r1, r8
 80163e4:	4638      	mov	r0, r7
 80163e6:	f000 ff0b 	bl	8017200 <_strtod_r>
 80163ea:	6825      	ldr	r5, [r4, #0]
 80163ec:	f8da 3000 	ldr.w	r3, [sl]
 80163f0:	f015 0f02 	tst.w	r5, #2
 80163f4:	f103 0204 	add.w	r2, r3, #4
 80163f8:	ec59 8b10 	vmov	r8, r9, d0
 80163fc:	f8ca 2000 	str.w	r2, [sl]
 8016400:	d043      	beq.n	801648a <_scanf_float+0x38a>
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	e9c3 8900 	strd	r8, r9, [r3]
 8016408:	68e3      	ldr	r3, [r4, #12]
 801640a:	3301      	adds	r3, #1
 801640c:	60e3      	str	r3, [r4, #12]
 801640e:	e6be      	b.n	801618e <_scanf_float+0x8e>
 8016410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016414:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016418:	4632      	mov	r2, r6
 801641a:	4638      	mov	r0, r7
 801641c:	4798      	blx	r3
 801641e:	6923      	ldr	r3, [r4, #16]
 8016420:	3b01      	subs	r3, #1
 8016422:	6123      	str	r3, [r4, #16]
 8016424:	e7a6      	b.n	8016374 <_scanf_float+0x274>
 8016426:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801642a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801642e:	4632      	mov	r2, r6
 8016430:	4638      	mov	r0, r7
 8016432:	4798      	blx	r3
 8016434:	6923      	ldr	r3, [r4, #16]
 8016436:	3b01      	subs	r3, #1
 8016438:	6123      	str	r3, [r4, #16]
 801643a:	4545      	cmp	r5, r8
 801643c:	d8f3      	bhi.n	8016426 <_scanf_float+0x326>
 801643e:	e6a5      	b.n	801618c <_scanf_float+0x8c>
 8016440:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016444:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016448:	4632      	mov	r2, r6
 801644a:	4638      	mov	r0, r7
 801644c:	4798      	blx	r3
 801644e:	6923      	ldr	r3, [r4, #16]
 8016450:	3b01      	subs	r3, #1
 8016452:	6123      	str	r3, [r4, #16]
 8016454:	4545      	cmp	r5, r8
 8016456:	d8f3      	bhi.n	8016440 <_scanf_float+0x340>
 8016458:	e698      	b.n	801618c <_scanf_float+0x8c>
 801645a:	9b03      	ldr	r3, [sp, #12]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d0bf      	beq.n	80163e0 <_scanf_float+0x2e0>
 8016460:	9904      	ldr	r1, [sp, #16]
 8016462:	230a      	movs	r3, #10
 8016464:	4632      	mov	r2, r6
 8016466:	3101      	adds	r1, #1
 8016468:	4638      	mov	r0, r7
 801646a:	f000 ff55 	bl	8017318 <_strtol_r>
 801646e:	9b03      	ldr	r3, [sp, #12]
 8016470:	9d04      	ldr	r5, [sp, #16]
 8016472:	1ac2      	subs	r2, r0, r3
 8016474:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016478:	429d      	cmp	r5, r3
 801647a:	bf28      	it	cs
 801647c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016480:	490f      	ldr	r1, [pc, #60]	; (80164c0 <_scanf_float+0x3c0>)
 8016482:	4628      	mov	r0, r5
 8016484:	f000 f858 	bl	8016538 <siprintf>
 8016488:	e7aa      	b.n	80163e0 <_scanf_float+0x2e0>
 801648a:	f015 0504 	ands.w	r5, r5, #4
 801648e:	d1b8      	bne.n	8016402 <_scanf_float+0x302>
 8016490:	681f      	ldr	r7, [r3, #0]
 8016492:	ee10 2a10 	vmov	r2, s0
 8016496:	464b      	mov	r3, r9
 8016498:	ee10 0a10 	vmov	r0, s0
 801649c:	4649      	mov	r1, r9
 801649e:	f7ea fb5d 	bl	8000b5c <__aeabi_dcmpun>
 80164a2:	b128      	cbz	r0, 80164b0 <_scanf_float+0x3b0>
 80164a4:	4628      	mov	r0, r5
 80164a6:	f000 f80d 	bl	80164c4 <nanf>
 80164aa:	ed87 0a00 	vstr	s0, [r7]
 80164ae:	e7ab      	b.n	8016408 <_scanf_float+0x308>
 80164b0:	4640      	mov	r0, r8
 80164b2:	4649      	mov	r1, r9
 80164b4:	f7ea fbb0 	bl	8000c18 <__aeabi_d2f>
 80164b8:	6038      	str	r0, [r7, #0]
 80164ba:	e7a5      	b.n	8016408 <_scanf_float+0x308>
 80164bc:	2600      	movs	r6, #0
 80164be:	e666      	b.n	801618e <_scanf_float+0x8e>
 80164c0:	0801a2f2 	.word	0x0801a2f2

080164c4 <nanf>:
 80164c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80164cc <nanf+0x8>
 80164c8:	4770      	bx	lr
 80164ca:	bf00      	nop
 80164cc:	7fc00000 	.word	0x7fc00000

080164d0 <sniprintf>:
 80164d0:	b40c      	push	{r2, r3}
 80164d2:	b530      	push	{r4, r5, lr}
 80164d4:	4b17      	ldr	r3, [pc, #92]	; (8016534 <sniprintf+0x64>)
 80164d6:	1e0c      	subs	r4, r1, #0
 80164d8:	b09d      	sub	sp, #116	; 0x74
 80164da:	681d      	ldr	r5, [r3, #0]
 80164dc:	da08      	bge.n	80164f0 <sniprintf+0x20>
 80164de:	238b      	movs	r3, #139	; 0x8b
 80164e0:	602b      	str	r3, [r5, #0]
 80164e2:	f04f 30ff 	mov.w	r0, #4294967295
 80164e6:	b01d      	add	sp, #116	; 0x74
 80164e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164ec:	b002      	add	sp, #8
 80164ee:	4770      	bx	lr
 80164f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80164f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80164f8:	bf14      	ite	ne
 80164fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80164fe:	4623      	moveq	r3, r4
 8016500:	9304      	str	r3, [sp, #16]
 8016502:	9307      	str	r3, [sp, #28]
 8016504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016508:	9002      	str	r0, [sp, #8]
 801650a:	9006      	str	r0, [sp, #24]
 801650c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016512:	ab21      	add	r3, sp, #132	; 0x84
 8016514:	a902      	add	r1, sp, #8
 8016516:	4628      	mov	r0, r5
 8016518:	9301      	str	r3, [sp, #4]
 801651a:	f002 fdf1 	bl	8019100 <_svfiprintf_r>
 801651e:	1c43      	adds	r3, r0, #1
 8016520:	bfbc      	itt	lt
 8016522:	238b      	movlt	r3, #139	; 0x8b
 8016524:	602b      	strlt	r3, [r5, #0]
 8016526:	2c00      	cmp	r4, #0
 8016528:	d0dd      	beq.n	80164e6 <sniprintf+0x16>
 801652a:	9b02      	ldr	r3, [sp, #8]
 801652c:	2200      	movs	r2, #0
 801652e:	701a      	strb	r2, [r3, #0]
 8016530:	e7d9      	b.n	80164e6 <sniprintf+0x16>
 8016532:	bf00      	nop
 8016534:	2000000c 	.word	0x2000000c

08016538 <siprintf>:
 8016538:	b40e      	push	{r1, r2, r3}
 801653a:	b500      	push	{lr}
 801653c:	b09c      	sub	sp, #112	; 0x70
 801653e:	ab1d      	add	r3, sp, #116	; 0x74
 8016540:	9002      	str	r0, [sp, #8]
 8016542:	9006      	str	r0, [sp, #24]
 8016544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016548:	4809      	ldr	r0, [pc, #36]	; (8016570 <siprintf+0x38>)
 801654a:	9107      	str	r1, [sp, #28]
 801654c:	9104      	str	r1, [sp, #16]
 801654e:	4909      	ldr	r1, [pc, #36]	; (8016574 <siprintf+0x3c>)
 8016550:	f853 2b04 	ldr.w	r2, [r3], #4
 8016554:	9105      	str	r1, [sp, #20]
 8016556:	6800      	ldr	r0, [r0, #0]
 8016558:	9301      	str	r3, [sp, #4]
 801655a:	a902      	add	r1, sp, #8
 801655c:	f002 fdd0 	bl	8019100 <_svfiprintf_r>
 8016560:	9b02      	ldr	r3, [sp, #8]
 8016562:	2200      	movs	r2, #0
 8016564:	701a      	strb	r2, [r3, #0]
 8016566:	b01c      	add	sp, #112	; 0x70
 8016568:	f85d eb04 	ldr.w	lr, [sp], #4
 801656c:	b003      	add	sp, #12
 801656e:	4770      	bx	lr
 8016570:	2000000c 	.word	0x2000000c
 8016574:	ffff0208 	.word	0xffff0208

08016578 <siscanf>:
 8016578:	b40e      	push	{r1, r2, r3}
 801657a:	b530      	push	{r4, r5, lr}
 801657c:	b09c      	sub	sp, #112	; 0x70
 801657e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016580:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016584:	f854 5b04 	ldr.w	r5, [r4], #4
 8016588:	f8ad 2014 	strh.w	r2, [sp, #20]
 801658c:	9002      	str	r0, [sp, #8]
 801658e:	9006      	str	r0, [sp, #24]
 8016590:	f7e9 fe36 	bl	8000200 <strlen>
 8016594:	4b0b      	ldr	r3, [pc, #44]	; (80165c4 <siscanf+0x4c>)
 8016596:	9003      	str	r0, [sp, #12]
 8016598:	9007      	str	r0, [sp, #28]
 801659a:	930b      	str	r3, [sp, #44]	; 0x2c
 801659c:	480a      	ldr	r0, [pc, #40]	; (80165c8 <siscanf+0x50>)
 801659e:	9401      	str	r4, [sp, #4]
 80165a0:	2300      	movs	r3, #0
 80165a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80165a4:	9314      	str	r3, [sp, #80]	; 0x50
 80165a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165ae:	462a      	mov	r2, r5
 80165b0:	4623      	mov	r3, r4
 80165b2:	a902      	add	r1, sp, #8
 80165b4:	6800      	ldr	r0, [r0, #0]
 80165b6:	f002 fef5 	bl	80193a4 <__ssvfiscanf_r>
 80165ba:	b01c      	add	sp, #112	; 0x70
 80165bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165c0:	b003      	add	sp, #12
 80165c2:	4770      	bx	lr
 80165c4:	080165cd 	.word	0x080165cd
 80165c8:	2000000c 	.word	0x2000000c

080165cc <__seofread>:
 80165cc:	2000      	movs	r0, #0
 80165ce:	4770      	bx	lr

080165d0 <strcpy>:
 80165d0:	4603      	mov	r3, r0
 80165d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165d6:	f803 2b01 	strb.w	r2, [r3], #1
 80165da:	2a00      	cmp	r2, #0
 80165dc:	d1f9      	bne.n	80165d2 <strcpy+0x2>
 80165de:	4770      	bx	lr

080165e0 <sulp>:
 80165e0:	b570      	push	{r4, r5, r6, lr}
 80165e2:	4604      	mov	r4, r0
 80165e4:	460d      	mov	r5, r1
 80165e6:	ec45 4b10 	vmov	d0, r4, r5
 80165ea:	4616      	mov	r6, r2
 80165ec:	f002 fb44 	bl	8018c78 <__ulp>
 80165f0:	ec51 0b10 	vmov	r0, r1, d0
 80165f4:	b17e      	cbz	r6, 8016616 <sulp+0x36>
 80165f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80165fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80165fe:	2b00      	cmp	r3, #0
 8016600:	dd09      	ble.n	8016616 <sulp+0x36>
 8016602:	051b      	lsls	r3, r3, #20
 8016604:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016608:	2400      	movs	r4, #0
 801660a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801660e:	4622      	mov	r2, r4
 8016610:	462b      	mov	r3, r5
 8016612:	f7ea f809 	bl	8000628 <__aeabi_dmul>
 8016616:	bd70      	pop	{r4, r5, r6, pc}

08016618 <_strtod_l>:
 8016618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801661c:	461f      	mov	r7, r3
 801661e:	b0a1      	sub	sp, #132	; 0x84
 8016620:	2300      	movs	r3, #0
 8016622:	4681      	mov	r9, r0
 8016624:	4638      	mov	r0, r7
 8016626:	460e      	mov	r6, r1
 8016628:	9217      	str	r2, [sp, #92]	; 0x5c
 801662a:	931c      	str	r3, [sp, #112]	; 0x70
 801662c:	f002 f824 	bl	8018678 <__localeconv_l>
 8016630:	4680      	mov	r8, r0
 8016632:	6800      	ldr	r0, [r0, #0]
 8016634:	f7e9 fde4 	bl	8000200 <strlen>
 8016638:	f04f 0a00 	mov.w	sl, #0
 801663c:	4604      	mov	r4, r0
 801663e:	f04f 0b00 	mov.w	fp, #0
 8016642:	961b      	str	r6, [sp, #108]	; 0x6c
 8016644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016646:	781a      	ldrb	r2, [r3, #0]
 8016648:	2a0d      	cmp	r2, #13
 801664a:	d832      	bhi.n	80166b2 <_strtod_l+0x9a>
 801664c:	2a09      	cmp	r2, #9
 801664e:	d236      	bcs.n	80166be <_strtod_l+0xa6>
 8016650:	2a00      	cmp	r2, #0
 8016652:	d03e      	beq.n	80166d2 <_strtod_l+0xba>
 8016654:	2300      	movs	r3, #0
 8016656:	930d      	str	r3, [sp, #52]	; 0x34
 8016658:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801665a:	782b      	ldrb	r3, [r5, #0]
 801665c:	2b30      	cmp	r3, #48	; 0x30
 801665e:	f040 80ac 	bne.w	80167ba <_strtod_l+0x1a2>
 8016662:	786b      	ldrb	r3, [r5, #1]
 8016664:	2b58      	cmp	r3, #88	; 0x58
 8016666:	d001      	beq.n	801666c <_strtod_l+0x54>
 8016668:	2b78      	cmp	r3, #120	; 0x78
 801666a:	d167      	bne.n	801673c <_strtod_l+0x124>
 801666c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801666e:	9301      	str	r3, [sp, #4]
 8016670:	ab1c      	add	r3, sp, #112	; 0x70
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	9702      	str	r7, [sp, #8]
 8016676:	ab1d      	add	r3, sp, #116	; 0x74
 8016678:	4a88      	ldr	r2, [pc, #544]	; (801689c <_strtod_l+0x284>)
 801667a:	a91b      	add	r1, sp, #108	; 0x6c
 801667c:	4648      	mov	r0, r9
 801667e:	f001 fd12 	bl	80180a6 <__gethex>
 8016682:	f010 0407 	ands.w	r4, r0, #7
 8016686:	4606      	mov	r6, r0
 8016688:	d005      	beq.n	8016696 <_strtod_l+0x7e>
 801668a:	2c06      	cmp	r4, #6
 801668c:	d12b      	bne.n	80166e6 <_strtod_l+0xce>
 801668e:	3501      	adds	r5, #1
 8016690:	2300      	movs	r3, #0
 8016692:	951b      	str	r5, [sp, #108]	; 0x6c
 8016694:	930d      	str	r3, [sp, #52]	; 0x34
 8016696:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016698:	2b00      	cmp	r3, #0
 801669a:	f040 859a 	bne.w	80171d2 <_strtod_l+0xbba>
 801669e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166a0:	b1e3      	cbz	r3, 80166dc <_strtod_l+0xc4>
 80166a2:	4652      	mov	r2, sl
 80166a4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80166a8:	ec43 2b10 	vmov	d0, r2, r3
 80166ac:	b021      	add	sp, #132	; 0x84
 80166ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b2:	2a2b      	cmp	r2, #43	; 0x2b
 80166b4:	d015      	beq.n	80166e2 <_strtod_l+0xca>
 80166b6:	2a2d      	cmp	r2, #45	; 0x2d
 80166b8:	d004      	beq.n	80166c4 <_strtod_l+0xac>
 80166ba:	2a20      	cmp	r2, #32
 80166bc:	d1ca      	bne.n	8016654 <_strtod_l+0x3c>
 80166be:	3301      	adds	r3, #1
 80166c0:	931b      	str	r3, [sp, #108]	; 0x6c
 80166c2:	e7bf      	b.n	8016644 <_strtod_l+0x2c>
 80166c4:	2201      	movs	r2, #1
 80166c6:	920d      	str	r2, [sp, #52]	; 0x34
 80166c8:	1c5a      	adds	r2, r3, #1
 80166ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80166cc:	785b      	ldrb	r3, [r3, #1]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d1c2      	bne.n	8016658 <_strtod_l+0x40>
 80166d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	f040 8579 	bne.w	80171ce <_strtod_l+0xbb6>
 80166dc:	4652      	mov	r2, sl
 80166de:	465b      	mov	r3, fp
 80166e0:	e7e2      	b.n	80166a8 <_strtod_l+0x90>
 80166e2:	2200      	movs	r2, #0
 80166e4:	e7ef      	b.n	80166c6 <_strtod_l+0xae>
 80166e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80166e8:	b13a      	cbz	r2, 80166fa <_strtod_l+0xe2>
 80166ea:	2135      	movs	r1, #53	; 0x35
 80166ec:	a81e      	add	r0, sp, #120	; 0x78
 80166ee:	f002 fbbb 	bl	8018e68 <__copybits>
 80166f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80166f4:	4648      	mov	r0, r9
 80166f6:	f002 f828 	bl	801874a <_Bfree>
 80166fa:	3c01      	subs	r4, #1
 80166fc:	2c04      	cmp	r4, #4
 80166fe:	d806      	bhi.n	801670e <_strtod_l+0xf6>
 8016700:	e8df f004 	tbb	[pc, r4]
 8016704:	1714030a 	.word	0x1714030a
 8016708:	0a          	.byte	0x0a
 8016709:	00          	.byte	0x00
 801670a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801670e:	0730      	lsls	r0, r6, #28
 8016710:	d5c1      	bpl.n	8016696 <_strtod_l+0x7e>
 8016712:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016716:	e7be      	b.n	8016696 <_strtod_l+0x7e>
 8016718:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801671c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801671e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016722:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016726:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801672a:	e7f0      	b.n	801670e <_strtod_l+0xf6>
 801672c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80168a0 <_strtod_l+0x288>
 8016730:	e7ed      	b.n	801670e <_strtod_l+0xf6>
 8016732:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016736:	f04f 3aff 	mov.w	sl, #4294967295
 801673a:	e7e8      	b.n	801670e <_strtod_l+0xf6>
 801673c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801673e:	1c5a      	adds	r2, r3, #1
 8016740:	921b      	str	r2, [sp, #108]	; 0x6c
 8016742:	785b      	ldrb	r3, [r3, #1]
 8016744:	2b30      	cmp	r3, #48	; 0x30
 8016746:	d0f9      	beq.n	801673c <_strtod_l+0x124>
 8016748:	2b00      	cmp	r3, #0
 801674a:	d0a4      	beq.n	8016696 <_strtod_l+0x7e>
 801674c:	2301      	movs	r3, #1
 801674e:	2500      	movs	r5, #0
 8016750:	9306      	str	r3, [sp, #24]
 8016752:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016754:	9308      	str	r3, [sp, #32]
 8016756:	9507      	str	r5, [sp, #28]
 8016758:	9505      	str	r5, [sp, #20]
 801675a:	220a      	movs	r2, #10
 801675c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801675e:	7807      	ldrb	r7, [r0, #0]
 8016760:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016764:	b2d9      	uxtb	r1, r3
 8016766:	2909      	cmp	r1, #9
 8016768:	d929      	bls.n	80167be <_strtod_l+0x1a6>
 801676a:	4622      	mov	r2, r4
 801676c:	f8d8 1000 	ldr.w	r1, [r8]
 8016770:	f003 f902 	bl	8019978 <strncmp>
 8016774:	2800      	cmp	r0, #0
 8016776:	d031      	beq.n	80167dc <_strtod_l+0x1c4>
 8016778:	2000      	movs	r0, #0
 801677a:	9c05      	ldr	r4, [sp, #20]
 801677c:	9004      	str	r0, [sp, #16]
 801677e:	463b      	mov	r3, r7
 8016780:	4602      	mov	r2, r0
 8016782:	2b65      	cmp	r3, #101	; 0x65
 8016784:	d001      	beq.n	801678a <_strtod_l+0x172>
 8016786:	2b45      	cmp	r3, #69	; 0x45
 8016788:	d114      	bne.n	80167b4 <_strtod_l+0x19c>
 801678a:	b924      	cbnz	r4, 8016796 <_strtod_l+0x17e>
 801678c:	b910      	cbnz	r0, 8016794 <_strtod_l+0x17c>
 801678e:	9b06      	ldr	r3, [sp, #24]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d09e      	beq.n	80166d2 <_strtod_l+0xba>
 8016794:	2400      	movs	r4, #0
 8016796:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016798:	1c73      	adds	r3, r6, #1
 801679a:	931b      	str	r3, [sp, #108]	; 0x6c
 801679c:	7873      	ldrb	r3, [r6, #1]
 801679e:	2b2b      	cmp	r3, #43	; 0x2b
 80167a0:	d078      	beq.n	8016894 <_strtod_l+0x27c>
 80167a2:	2b2d      	cmp	r3, #45	; 0x2d
 80167a4:	d070      	beq.n	8016888 <_strtod_l+0x270>
 80167a6:	f04f 0c00 	mov.w	ip, #0
 80167aa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80167ae:	2f09      	cmp	r7, #9
 80167b0:	d97c      	bls.n	80168ac <_strtod_l+0x294>
 80167b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80167b4:	f04f 0e00 	mov.w	lr, #0
 80167b8:	e09a      	b.n	80168f0 <_strtod_l+0x2d8>
 80167ba:	2300      	movs	r3, #0
 80167bc:	e7c7      	b.n	801674e <_strtod_l+0x136>
 80167be:	9905      	ldr	r1, [sp, #20]
 80167c0:	2908      	cmp	r1, #8
 80167c2:	bfdd      	ittte	le
 80167c4:	9907      	ldrle	r1, [sp, #28]
 80167c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80167ca:	9307      	strle	r3, [sp, #28]
 80167cc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80167d0:	9b05      	ldr	r3, [sp, #20]
 80167d2:	3001      	adds	r0, #1
 80167d4:	3301      	adds	r3, #1
 80167d6:	9305      	str	r3, [sp, #20]
 80167d8:	901b      	str	r0, [sp, #108]	; 0x6c
 80167da:	e7bf      	b.n	801675c <_strtod_l+0x144>
 80167dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167de:	191a      	adds	r2, r3, r4
 80167e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80167e2:	9a05      	ldr	r2, [sp, #20]
 80167e4:	5d1b      	ldrb	r3, [r3, r4]
 80167e6:	2a00      	cmp	r2, #0
 80167e8:	d037      	beq.n	801685a <_strtod_l+0x242>
 80167ea:	9c05      	ldr	r4, [sp, #20]
 80167ec:	4602      	mov	r2, r0
 80167ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80167f2:	2909      	cmp	r1, #9
 80167f4:	d913      	bls.n	801681e <_strtod_l+0x206>
 80167f6:	2101      	movs	r1, #1
 80167f8:	9104      	str	r1, [sp, #16]
 80167fa:	e7c2      	b.n	8016782 <_strtod_l+0x16a>
 80167fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167fe:	1c5a      	adds	r2, r3, #1
 8016800:	921b      	str	r2, [sp, #108]	; 0x6c
 8016802:	785b      	ldrb	r3, [r3, #1]
 8016804:	3001      	adds	r0, #1
 8016806:	2b30      	cmp	r3, #48	; 0x30
 8016808:	d0f8      	beq.n	80167fc <_strtod_l+0x1e4>
 801680a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801680e:	2a08      	cmp	r2, #8
 8016810:	f200 84e4 	bhi.w	80171dc <_strtod_l+0xbc4>
 8016814:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016816:	9208      	str	r2, [sp, #32]
 8016818:	4602      	mov	r2, r0
 801681a:	2000      	movs	r0, #0
 801681c:	4604      	mov	r4, r0
 801681e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016822:	f100 0101 	add.w	r1, r0, #1
 8016826:	d012      	beq.n	801684e <_strtod_l+0x236>
 8016828:	440a      	add	r2, r1
 801682a:	eb00 0c04 	add.w	ip, r0, r4
 801682e:	4621      	mov	r1, r4
 8016830:	270a      	movs	r7, #10
 8016832:	458c      	cmp	ip, r1
 8016834:	d113      	bne.n	801685e <_strtod_l+0x246>
 8016836:	1821      	adds	r1, r4, r0
 8016838:	2908      	cmp	r1, #8
 801683a:	f104 0401 	add.w	r4, r4, #1
 801683e:	4404      	add	r4, r0
 8016840:	dc19      	bgt.n	8016876 <_strtod_l+0x25e>
 8016842:	9b07      	ldr	r3, [sp, #28]
 8016844:	210a      	movs	r1, #10
 8016846:	fb01 e303 	mla	r3, r1, r3, lr
 801684a:	9307      	str	r3, [sp, #28]
 801684c:	2100      	movs	r1, #0
 801684e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016850:	1c58      	adds	r0, r3, #1
 8016852:	901b      	str	r0, [sp, #108]	; 0x6c
 8016854:	785b      	ldrb	r3, [r3, #1]
 8016856:	4608      	mov	r0, r1
 8016858:	e7c9      	b.n	80167ee <_strtod_l+0x1d6>
 801685a:	9805      	ldr	r0, [sp, #20]
 801685c:	e7d3      	b.n	8016806 <_strtod_l+0x1ee>
 801685e:	2908      	cmp	r1, #8
 8016860:	f101 0101 	add.w	r1, r1, #1
 8016864:	dc03      	bgt.n	801686e <_strtod_l+0x256>
 8016866:	9b07      	ldr	r3, [sp, #28]
 8016868:	437b      	muls	r3, r7
 801686a:	9307      	str	r3, [sp, #28]
 801686c:	e7e1      	b.n	8016832 <_strtod_l+0x21a>
 801686e:	2910      	cmp	r1, #16
 8016870:	bfd8      	it	le
 8016872:	437d      	mulle	r5, r7
 8016874:	e7dd      	b.n	8016832 <_strtod_l+0x21a>
 8016876:	2c10      	cmp	r4, #16
 8016878:	bfdc      	itt	le
 801687a:	210a      	movle	r1, #10
 801687c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016880:	e7e4      	b.n	801684c <_strtod_l+0x234>
 8016882:	2301      	movs	r3, #1
 8016884:	9304      	str	r3, [sp, #16]
 8016886:	e781      	b.n	801678c <_strtod_l+0x174>
 8016888:	f04f 0c01 	mov.w	ip, #1
 801688c:	1cb3      	adds	r3, r6, #2
 801688e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016890:	78b3      	ldrb	r3, [r6, #2]
 8016892:	e78a      	b.n	80167aa <_strtod_l+0x192>
 8016894:	f04f 0c00 	mov.w	ip, #0
 8016898:	e7f8      	b.n	801688c <_strtod_l+0x274>
 801689a:	bf00      	nop
 801689c:	0801a2f8 	.word	0x0801a2f8
 80168a0:	7ff00000 	.word	0x7ff00000
 80168a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168a6:	1c5f      	adds	r7, r3, #1
 80168a8:	971b      	str	r7, [sp, #108]	; 0x6c
 80168aa:	785b      	ldrb	r3, [r3, #1]
 80168ac:	2b30      	cmp	r3, #48	; 0x30
 80168ae:	d0f9      	beq.n	80168a4 <_strtod_l+0x28c>
 80168b0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80168b4:	2f08      	cmp	r7, #8
 80168b6:	f63f af7d 	bhi.w	80167b4 <_strtod_l+0x19c>
 80168ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80168be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168c0:	930a      	str	r3, [sp, #40]	; 0x28
 80168c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168c4:	1c5f      	adds	r7, r3, #1
 80168c6:	971b      	str	r7, [sp, #108]	; 0x6c
 80168c8:	785b      	ldrb	r3, [r3, #1]
 80168ca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80168ce:	f1b8 0f09 	cmp.w	r8, #9
 80168d2:	d937      	bls.n	8016944 <_strtod_l+0x32c>
 80168d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80168d6:	1a7f      	subs	r7, r7, r1
 80168d8:	2f08      	cmp	r7, #8
 80168da:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80168de:	dc37      	bgt.n	8016950 <_strtod_l+0x338>
 80168e0:	45be      	cmp	lr, r7
 80168e2:	bfa8      	it	ge
 80168e4:	46be      	movge	lr, r7
 80168e6:	f1bc 0f00 	cmp.w	ip, #0
 80168ea:	d001      	beq.n	80168f0 <_strtod_l+0x2d8>
 80168ec:	f1ce 0e00 	rsb	lr, lr, #0
 80168f0:	2c00      	cmp	r4, #0
 80168f2:	d151      	bne.n	8016998 <_strtod_l+0x380>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	f47f aece 	bne.w	8016696 <_strtod_l+0x7e>
 80168fa:	9a06      	ldr	r2, [sp, #24]
 80168fc:	2a00      	cmp	r2, #0
 80168fe:	f47f aeca 	bne.w	8016696 <_strtod_l+0x7e>
 8016902:	9a04      	ldr	r2, [sp, #16]
 8016904:	2a00      	cmp	r2, #0
 8016906:	f47f aee4 	bne.w	80166d2 <_strtod_l+0xba>
 801690a:	2b4e      	cmp	r3, #78	; 0x4e
 801690c:	d027      	beq.n	801695e <_strtod_l+0x346>
 801690e:	dc21      	bgt.n	8016954 <_strtod_l+0x33c>
 8016910:	2b49      	cmp	r3, #73	; 0x49
 8016912:	f47f aede 	bne.w	80166d2 <_strtod_l+0xba>
 8016916:	49a0      	ldr	r1, [pc, #640]	; (8016b98 <_strtod_l+0x580>)
 8016918:	a81b      	add	r0, sp, #108	; 0x6c
 801691a:	f001 fdf7 	bl	801850c <__match>
 801691e:	2800      	cmp	r0, #0
 8016920:	f43f aed7 	beq.w	80166d2 <_strtod_l+0xba>
 8016924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016926:	499d      	ldr	r1, [pc, #628]	; (8016b9c <_strtod_l+0x584>)
 8016928:	3b01      	subs	r3, #1
 801692a:	a81b      	add	r0, sp, #108	; 0x6c
 801692c:	931b      	str	r3, [sp, #108]	; 0x6c
 801692e:	f001 fded 	bl	801850c <__match>
 8016932:	b910      	cbnz	r0, 801693a <_strtod_l+0x322>
 8016934:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016936:	3301      	adds	r3, #1
 8016938:	931b      	str	r3, [sp, #108]	; 0x6c
 801693a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016bb0 <_strtod_l+0x598>
 801693e:	f04f 0a00 	mov.w	sl, #0
 8016942:	e6a8      	b.n	8016696 <_strtod_l+0x7e>
 8016944:	210a      	movs	r1, #10
 8016946:	fb01 3e0e 	mla	lr, r1, lr, r3
 801694a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801694e:	e7b8      	b.n	80168c2 <_strtod_l+0x2aa>
 8016950:	46be      	mov	lr, r7
 8016952:	e7c8      	b.n	80168e6 <_strtod_l+0x2ce>
 8016954:	2b69      	cmp	r3, #105	; 0x69
 8016956:	d0de      	beq.n	8016916 <_strtod_l+0x2fe>
 8016958:	2b6e      	cmp	r3, #110	; 0x6e
 801695a:	f47f aeba 	bne.w	80166d2 <_strtod_l+0xba>
 801695e:	4990      	ldr	r1, [pc, #576]	; (8016ba0 <_strtod_l+0x588>)
 8016960:	a81b      	add	r0, sp, #108	; 0x6c
 8016962:	f001 fdd3 	bl	801850c <__match>
 8016966:	2800      	cmp	r0, #0
 8016968:	f43f aeb3 	beq.w	80166d2 <_strtod_l+0xba>
 801696c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	2b28      	cmp	r3, #40	; 0x28
 8016972:	d10e      	bne.n	8016992 <_strtod_l+0x37a>
 8016974:	aa1e      	add	r2, sp, #120	; 0x78
 8016976:	498b      	ldr	r1, [pc, #556]	; (8016ba4 <_strtod_l+0x58c>)
 8016978:	a81b      	add	r0, sp, #108	; 0x6c
 801697a:	f001 fddb 	bl	8018534 <__hexnan>
 801697e:	2805      	cmp	r0, #5
 8016980:	d107      	bne.n	8016992 <_strtod_l+0x37a>
 8016982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016984:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016988:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801698c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016990:	e681      	b.n	8016696 <_strtod_l+0x7e>
 8016992:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016bb8 <_strtod_l+0x5a0>
 8016996:	e7d2      	b.n	801693e <_strtod_l+0x326>
 8016998:	ebae 0302 	sub.w	r3, lr, r2
 801699c:	9306      	str	r3, [sp, #24]
 801699e:	9b05      	ldr	r3, [sp, #20]
 80169a0:	9807      	ldr	r0, [sp, #28]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	bf08      	it	eq
 80169a6:	4623      	moveq	r3, r4
 80169a8:	2c10      	cmp	r4, #16
 80169aa:	9305      	str	r3, [sp, #20]
 80169ac:	46a0      	mov	r8, r4
 80169ae:	bfa8      	it	ge
 80169b0:	f04f 0810 	movge.w	r8, #16
 80169b4:	f7e9 fdbe 	bl	8000534 <__aeabi_ui2d>
 80169b8:	2c09      	cmp	r4, #9
 80169ba:	4682      	mov	sl, r0
 80169bc:	468b      	mov	fp, r1
 80169be:	dc13      	bgt.n	80169e8 <_strtod_l+0x3d0>
 80169c0:	9b06      	ldr	r3, [sp, #24]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	f43f ae67 	beq.w	8016696 <_strtod_l+0x7e>
 80169c8:	9b06      	ldr	r3, [sp, #24]
 80169ca:	dd7a      	ble.n	8016ac2 <_strtod_l+0x4aa>
 80169cc:	2b16      	cmp	r3, #22
 80169ce:	dc61      	bgt.n	8016a94 <_strtod_l+0x47c>
 80169d0:	4a75      	ldr	r2, [pc, #468]	; (8016ba8 <_strtod_l+0x590>)
 80169d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80169d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80169da:	4652      	mov	r2, sl
 80169dc:	465b      	mov	r3, fp
 80169de:	f7e9 fe23 	bl	8000628 <__aeabi_dmul>
 80169e2:	4682      	mov	sl, r0
 80169e4:	468b      	mov	fp, r1
 80169e6:	e656      	b.n	8016696 <_strtod_l+0x7e>
 80169e8:	4b6f      	ldr	r3, [pc, #444]	; (8016ba8 <_strtod_l+0x590>)
 80169ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80169ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80169f2:	f7e9 fe19 	bl	8000628 <__aeabi_dmul>
 80169f6:	4606      	mov	r6, r0
 80169f8:	4628      	mov	r0, r5
 80169fa:	460f      	mov	r7, r1
 80169fc:	f7e9 fd9a 	bl	8000534 <__aeabi_ui2d>
 8016a00:	4602      	mov	r2, r0
 8016a02:	460b      	mov	r3, r1
 8016a04:	4630      	mov	r0, r6
 8016a06:	4639      	mov	r1, r7
 8016a08:	f7e9 fc58 	bl	80002bc <__adddf3>
 8016a0c:	2c0f      	cmp	r4, #15
 8016a0e:	4682      	mov	sl, r0
 8016a10:	468b      	mov	fp, r1
 8016a12:	ddd5      	ble.n	80169c0 <_strtod_l+0x3a8>
 8016a14:	9b06      	ldr	r3, [sp, #24]
 8016a16:	eba4 0808 	sub.w	r8, r4, r8
 8016a1a:	4498      	add	r8, r3
 8016a1c:	f1b8 0f00 	cmp.w	r8, #0
 8016a20:	f340 8096 	ble.w	8016b50 <_strtod_l+0x538>
 8016a24:	f018 030f 	ands.w	r3, r8, #15
 8016a28:	d00a      	beq.n	8016a40 <_strtod_l+0x428>
 8016a2a:	495f      	ldr	r1, [pc, #380]	; (8016ba8 <_strtod_l+0x590>)
 8016a2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a30:	4652      	mov	r2, sl
 8016a32:	465b      	mov	r3, fp
 8016a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a38:	f7e9 fdf6 	bl	8000628 <__aeabi_dmul>
 8016a3c:	4682      	mov	sl, r0
 8016a3e:	468b      	mov	fp, r1
 8016a40:	f038 080f 	bics.w	r8, r8, #15
 8016a44:	d073      	beq.n	8016b2e <_strtod_l+0x516>
 8016a46:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016a4a:	dd47      	ble.n	8016adc <_strtod_l+0x4c4>
 8016a4c:	2400      	movs	r4, #0
 8016a4e:	46a0      	mov	r8, r4
 8016a50:	9407      	str	r4, [sp, #28]
 8016a52:	9405      	str	r4, [sp, #20]
 8016a54:	2322      	movs	r3, #34	; 0x22
 8016a56:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016bb0 <_strtod_l+0x598>
 8016a5a:	f8c9 3000 	str.w	r3, [r9]
 8016a5e:	f04f 0a00 	mov.w	sl, #0
 8016a62:	9b07      	ldr	r3, [sp, #28]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	f43f ae16 	beq.w	8016696 <_strtod_l+0x7e>
 8016a6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a6c:	4648      	mov	r0, r9
 8016a6e:	f001 fe6c 	bl	801874a <_Bfree>
 8016a72:	9905      	ldr	r1, [sp, #20]
 8016a74:	4648      	mov	r0, r9
 8016a76:	f001 fe68 	bl	801874a <_Bfree>
 8016a7a:	4641      	mov	r1, r8
 8016a7c:	4648      	mov	r0, r9
 8016a7e:	f001 fe64 	bl	801874a <_Bfree>
 8016a82:	9907      	ldr	r1, [sp, #28]
 8016a84:	4648      	mov	r0, r9
 8016a86:	f001 fe60 	bl	801874a <_Bfree>
 8016a8a:	4621      	mov	r1, r4
 8016a8c:	4648      	mov	r0, r9
 8016a8e:	f001 fe5c 	bl	801874a <_Bfree>
 8016a92:	e600      	b.n	8016696 <_strtod_l+0x7e>
 8016a94:	9a06      	ldr	r2, [sp, #24]
 8016a96:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016a9a:	4293      	cmp	r3, r2
 8016a9c:	dbba      	blt.n	8016a14 <_strtod_l+0x3fc>
 8016a9e:	4d42      	ldr	r5, [pc, #264]	; (8016ba8 <_strtod_l+0x590>)
 8016aa0:	f1c4 040f 	rsb	r4, r4, #15
 8016aa4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016aa8:	4652      	mov	r2, sl
 8016aaa:	465b      	mov	r3, fp
 8016aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ab0:	f7e9 fdba 	bl	8000628 <__aeabi_dmul>
 8016ab4:	9b06      	ldr	r3, [sp, #24]
 8016ab6:	1b1c      	subs	r4, r3, r4
 8016ab8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016abc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ac0:	e78d      	b.n	80169de <_strtod_l+0x3c6>
 8016ac2:	f113 0f16 	cmn.w	r3, #22
 8016ac6:	dba5      	blt.n	8016a14 <_strtod_l+0x3fc>
 8016ac8:	4a37      	ldr	r2, [pc, #220]	; (8016ba8 <_strtod_l+0x590>)
 8016aca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016ace:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016ad2:	4650      	mov	r0, sl
 8016ad4:	4659      	mov	r1, fp
 8016ad6:	f7e9 fed1 	bl	800087c <__aeabi_ddiv>
 8016ada:	e782      	b.n	80169e2 <_strtod_l+0x3ca>
 8016adc:	2300      	movs	r3, #0
 8016ade:	4e33      	ldr	r6, [pc, #204]	; (8016bac <_strtod_l+0x594>)
 8016ae0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016ae4:	4650      	mov	r0, sl
 8016ae6:	4659      	mov	r1, fp
 8016ae8:	461d      	mov	r5, r3
 8016aea:	f1b8 0f01 	cmp.w	r8, #1
 8016aee:	dc21      	bgt.n	8016b34 <_strtod_l+0x51c>
 8016af0:	b10b      	cbz	r3, 8016af6 <_strtod_l+0x4de>
 8016af2:	4682      	mov	sl, r0
 8016af4:	468b      	mov	fp, r1
 8016af6:	4b2d      	ldr	r3, [pc, #180]	; (8016bac <_strtod_l+0x594>)
 8016af8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016afc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016b00:	4652      	mov	r2, sl
 8016b02:	465b      	mov	r3, fp
 8016b04:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b08:	f7e9 fd8e 	bl	8000628 <__aeabi_dmul>
 8016b0c:	4b28      	ldr	r3, [pc, #160]	; (8016bb0 <_strtod_l+0x598>)
 8016b0e:	460a      	mov	r2, r1
 8016b10:	400b      	ands	r3, r1
 8016b12:	4928      	ldr	r1, [pc, #160]	; (8016bb4 <_strtod_l+0x59c>)
 8016b14:	428b      	cmp	r3, r1
 8016b16:	4682      	mov	sl, r0
 8016b18:	d898      	bhi.n	8016a4c <_strtod_l+0x434>
 8016b1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016b1e:	428b      	cmp	r3, r1
 8016b20:	bf86      	itte	hi
 8016b22:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016bbc <_strtod_l+0x5a4>
 8016b26:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b2a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016b2e:	2300      	movs	r3, #0
 8016b30:	9304      	str	r3, [sp, #16]
 8016b32:	e077      	b.n	8016c24 <_strtod_l+0x60c>
 8016b34:	f018 0f01 	tst.w	r8, #1
 8016b38:	d006      	beq.n	8016b48 <_strtod_l+0x530>
 8016b3a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b42:	f7e9 fd71 	bl	8000628 <__aeabi_dmul>
 8016b46:	2301      	movs	r3, #1
 8016b48:	3501      	adds	r5, #1
 8016b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016b4e:	e7cc      	b.n	8016aea <_strtod_l+0x4d2>
 8016b50:	d0ed      	beq.n	8016b2e <_strtod_l+0x516>
 8016b52:	f1c8 0800 	rsb	r8, r8, #0
 8016b56:	f018 020f 	ands.w	r2, r8, #15
 8016b5a:	d00a      	beq.n	8016b72 <_strtod_l+0x55a>
 8016b5c:	4b12      	ldr	r3, [pc, #72]	; (8016ba8 <_strtod_l+0x590>)
 8016b5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b62:	4650      	mov	r0, sl
 8016b64:	4659      	mov	r1, fp
 8016b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6a:	f7e9 fe87 	bl	800087c <__aeabi_ddiv>
 8016b6e:	4682      	mov	sl, r0
 8016b70:	468b      	mov	fp, r1
 8016b72:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016b76:	d0da      	beq.n	8016b2e <_strtod_l+0x516>
 8016b78:	f1b8 0f1f 	cmp.w	r8, #31
 8016b7c:	dd20      	ble.n	8016bc0 <_strtod_l+0x5a8>
 8016b7e:	2400      	movs	r4, #0
 8016b80:	46a0      	mov	r8, r4
 8016b82:	9407      	str	r4, [sp, #28]
 8016b84:	9405      	str	r4, [sp, #20]
 8016b86:	2322      	movs	r3, #34	; 0x22
 8016b88:	f04f 0a00 	mov.w	sl, #0
 8016b8c:	f04f 0b00 	mov.w	fp, #0
 8016b90:	f8c9 3000 	str.w	r3, [r9]
 8016b94:	e765      	b.n	8016a62 <_strtod_l+0x44a>
 8016b96:	bf00      	nop
 8016b98:	0801a2c5 	.word	0x0801a2c5
 8016b9c:	0801a34b 	.word	0x0801a34b
 8016ba0:	0801a2cd 	.word	0x0801a2cd
 8016ba4:	0801a30c 	.word	0x0801a30c
 8016ba8:	0801a388 	.word	0x0801a388
 8016bac:	0801a360 	.word	0x0801a360
 8016bb0:	7ff00000 	.word	0x7ff00000
 8016bb4:	7ca00000 	.word	0x7ca00000
 8016bb8:	fff80000 	.word	0xfff80000
 8016bbc:	7fefffff 	.word	0x7fefffff
 8016bc0:	f018 0310 	ands.w	r3, r8, #16
 8016bc4:	bf18      	it	ne
 8016bc6:	236a      	movne	r3, #106	; 0x6a
 8016bc8:	4da0      	ldr	r5, [pc, #640]	; (8016e4c <_strtod_l+0x834>)
 8016bca:	9304      	str	r3, [sp, #16]
 8016bcc:	4650      	mov	r0, sl
 8016bce:	4659      	mov	r1, fp
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	f1b8 0f00 	cmp.w	r8, #0
 8016bd6:	f300 810a 	bgt.w	8016dee <_strtod_l+0x7d6>
 8016bda:	b10b      	cbz	r3, 8016be0 <_strtod_l+0x5c8>
 8016bdc:	4682      	mov	sl, r0
 8016bde:	468b      	mov	fp, r1
 8016be0:	9b04      	ldr	r3, [sp, #16]
 8016be2:	b1bb      	cbz	r3, 8016c14 <_strtod_l+0x5fc>
 8016be4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016be8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	4659      	mov	r1, fp
 8016bf0:	dd10      	ble.n	8016c14 <_strtod_l+0x5fc>
 8016bf2:	2b1f      	cmp	r3, #31
 8016bf4:	f340 8107 	ble.w	8016e06 <_strtod_l+0x7ee>
 8016bf8:	2b34      	cmp	r3, #52	; 0x34
 8016bfa:	bfde      	ittt	le
 8016bfc:	3b20      	suble	r3, #32
 8016bfe:	f04f 32ff 	movle.w	r2, #4294967295
 8016c02:	fa02 f303 	lslle.w	r3, r2, r3
 8016c06:	f04f 0a00 	mov.w	sl, #0
 8016c0a:	bfcc      	ite	gt
 8016c0c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016c10:	ea03 0b01 	andle.w	fp, r3, r1
 8016c14:	2200      	movs	r2, #0
 8016c16:	2300      	movs	r3, #0
 8016c18:	4650      	mov	r0, sl
 8016c1a:	4659      	mov	r1, fp
 8016c1c:	f7e9 ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 8016c20:	2800      	cmp	r0, #0
 8016c22:	d1ac      	bne.n	8016b7e <_strtod_l+0x566>
 8016c24:	9b07      	ldr	r3, [sp, #28]
 8016c26:	9300      	str	r3, [sp, #0]
 8016c28:	9a05      	ldr	r2, [sp, #20]
 8016c2a:	9908      	ldr	r1, [sp, #32]
 8016c2c:	4623      	mov	r3, r4
 8016c2e:	4648      	mov	r0, r9
 8016c30:	f001 fddd 	bl	80187ee <__s2b>
 8016c34:	9007      	str	r0, [sp, #28]
 8016c36:	2800      	cmp	r0, #0
 8016c38:	f43f af08 	beq.w	8016a4c <_strtod_l+0x434>
 8016c3c:	9a06      	ldr	r2, [sp, #24]
 8016c3e:	9b06      	ldr	r3, [sp, #24]
 8016c40:	2a00      	cmp	r2, #0
 8016c42:	f1c3 0300 	rsb	r3, r3, #0
 8016c46:	bfa8      	it	ge
 8016c48:	2300      	movge	r3, #0
 8016c4a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c4c:	2400      	movs	r4, #0
 8016c4e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c52:	9316      	str	r3, [sp, #88]	; 0x58
 8016c54:	46a0      	mov	r8, r4
 8016c56:	9b07      	ldr	r3, [sp, #28]
 8016c58:	4648      	mov	r0, r9
 8016c5a:	6859      	ldr	r1, [r3, #4]
 8016c5c:	f001 fd41 	bl	80186e2 <_Balloc>
 8016c60:	9005      	str	r0, [sp, #20]
 8016c62:	2800      	cmp	r0, #0
 8016c64:	f43f aef6 	beq.w	8016a54 <_strtod_l+0x43c>
 8016c68:	9b07      	ldr	r3, [sp, #28]
 8016c6a:	691a      	ldr	r2, [r3, #16]
 8016c6c:	3202      	adds	r2, #2
 8016c6e:	f103 010c 	add.w	r1, r3, #12
 8016c72:	0092      	lsls	r2, r2, #2
 8016c74:	300c      	adds	r0, #12
 8016c76:	f001 fd29 	bl	80186cc <memcpy>
 8016c7a:	aa1e      	add	r2, sp, #120	; 0x78
 8016c7c:	a91d      	add	r1, sp, #116	; 0x74
 8016c7e:	ec4b ab10 	vmov	d0, sl, fp
 8016c82:	4648      	mov	r0, r9
 8016c84:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016c88:	f002 f86c 	bl	8018d64 <__d2b>
 8016c8c:	901c      	str	r0, [sp, #112]	; 0x70
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	f43f aee0 	beq.w	8016a54 <_strtod_l+0x43c>
 8016c94:	2101      	movs	r1, #1
 8016c96:	4648      	mov	r0, r9
 8016c98:	f001 fe35 	bl	8018906 <__i2b>
 8016c9c:	4680      	mov	r8, r0
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	f43f aed8 	beq.w	8016a54 <_strtod_l+0x43c>
 8016ca4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016ca6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016ca8:	2e00      	cmp	r6, #0
 8016caa:	bfab      	itete	ge
 8016cac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016cae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016cb0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016cb2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016cb4:	bfac      	ite	ge
 8016cb6:	18f7      	addge	r7, r6, r3
 8016cb8:	1b9d      	sublt	r5, r3, r6
 8016cba:	9b04      	ldr	r3, [sp, #16]
 8016cbc:	1af6      	subs	r6, r6, r3
 8016cbe:	4416      	add	r6, r2
 8016cc0:	4b63      	ldr	r3, [pc, #396]	; (8016e50 <_strtod_l+0x838>)
 8016cc2:	3e01      	subs	r6, #1
 8016cc4:	429e      	cmp	r6, r3
 8016cc6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016cca:	f280 80af 	bge.w	8016e2c <_strtod_l+0x814>
 8016cce:	1b9b      	subs	r3, r3, r6
 8016cd0:	2b1f      	cmp	r3, #31
 8016cd2:	eba2 0203 	sub.w	r2, r2, r3
 8016cd6:	f04f 0101 	mov.w	r1, #1
 8016cda:	f300 809b 	bgt.w	8016e14 <_strtod_l+0x7fc>
 8016cde:	fa01 f303 	lsl.w	r3, r1, r3
 8016ce2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	930a      	str	r3, [sp, #40]	; 0x28
 8016ce8:	18be      	adds	r6, r7, r2
 8016cea:	9b04      	ldr	r3, [sp, #16]
 8016cec:	42b7      	cmp	r7, r6
 8016cee:	4415      	add	r5, r2
 8016cf0:	441d      	add	r5, r3
 8016cf2:	463b      	mov	r3, r7
 8016cf4:	bfa8      	it	ge
 8016cf6:	4633      	movge	r3, r6
 8016cf8:	42ab      	cmp	r3, r5
 8016cfa:	bfa8      	it	ge
 8016cfc:	462b      	movge	r3, r5
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	bfc2      	ittt	gt
 8016d02:	1af6      	subgt	r6, r6, r3
 8016d04:	1aed      	subgt	r5, r5, r3
 8016d06:	1aff      	subgt	r7, r7, r3
 8016d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d0a:	b1bb      	cbz	r3, 8016d3c <_strtod_l+0x724>
 8016d0c:	4641      	mov	r1, r8
 8016d0e:	461a      	mov	r2, r3
 8016d10:	4648      	mov	r0, r9
 8016d12:	f001 fe97 	bl	8018a44 <__pow5mult>
 8016d16:	4680      	mov	r8, r0
 8016d18:	2800      	cmp	r0, #0
 8016d1a:	f43f ae9b 	beq.w	8016a54 <_strtod_l+0x43c>
 8016d1e:	4601      	mov	r1, r0
 8016d20:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d22:	4648      	mov	r0, r9
 8016d24:	f001 fdf8 	bl	8018918 <__multiply>
 8016d28:	900c      	str	r0, [sp, #48]	; 0x30
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	f43f ae92 	beq.w	8016a54 <_strtod_l+0x43c>
 8016d30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d32:	4648      	mov	r0, r9
 8016d34:	f001 fd09 	bl	801874a <_Bfree>
 8016d38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d3a:	931c      	str	r3, [sp, #112]	; 0x70
 8016d3c:	2e00      	cmp	r6, #0
 8016d3e:	dc7a      	bgt.n	8016e36 <_strtod_l+0x81e>
 8016d40:	9b06      	ldr	r3, [sp, #24]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	dd08      	ble.n	8016d58 <_strtod_l+0x740>
 8016d46:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d48:	9905      	ldr	r1, [sp, #20]
 8016d4a:	4648      	mov	r0, r9
 8016d4c:	f001 fe7a 	bl	8018a44 <__pow5mult>
 8016d50:	9005      	str	r0, [sp, #20]
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f43f ae7e 	beq.w	8016a54 <_strtod_l+0x43c>
 8016d58:	2d00      	cmp	r5, #0
 8016d5a:	dd08      	ble.n	8016d6e <_strtod_l+0x756>
 8016d5c:	462a      	mov	r2, r5
 8016d5e:	9905      	ldr	r1, [sp, #20]
 8016d60:	4648      	mov	r0, r9
 8016d62:	f001 febd 	bl	8018ae0 <__lshift>
 8016d66:	9005      	str	r0, [sp, #20]
 8016d68:	2800      	cmp	r0, #0
 8016d6a:	f43f ae73 	beq.w	8016a54 <_strtod_l+0x43c>
 8016d6e:	2f00      	cmp	r7, #0
 8016d70:	dd08      	ble.n	8016d84 <_strtod_l+0x76c>
 8016d72:	4641      	mov	r1, r8
 8016d74:	463a      	mov	r2, r7
 8016d76:	4648      	mov	r0, r9
 8016d78:	f001 feb2 	bl	8018ae0 <__lshift>
 8016d7c:	4680      	mov	r8, r0
 8016d7e:	2800      	cmp	r0, #0
 8016d80:	f43f ae68 	beq.w	8016a54 <_strtod_l+0x43c>
 8016d84:	9a05      	ldr	r2, [sp, #20]
 8016d86:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d88:	4648      	mov	r0, r9
 8016d8a:	f001 ff17 	bl	8018bbc <__mdiff>
 8016d8e:	4604      	mov	r4, r0
 8016d90:	2800      	cmp	r0, #0
 8016d92:	f43f ae5f 	beq.w	8016a54 <_strtod_l+0x43c>
 8016d96:	68c3      	ldr	r3, [r0, #12]
 8016d98:	930c      	str	r3, [sp, #48]	; 0x30
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	60c3      	str	r3, [r0, #12]
 8016d9e:	4641      	mov	r1, r8
 8016da0:	f001 fef2 	bl	8018b88 <__mcmp>
 8016da4:	2800      	cmp	r0, #0
 8016da6:	da55      	bge.n	8016e54 <_strtod_l+0x83c>
 8016da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016daa:	b9e3      	cbnz	r3, 8016de6 <_strtod_l+0x7ce>
 8016dac:	f1ba 0f00 	cmp.w	sl, #0
 8016db0:	d119      	bne.n	8016de6 <_strtod_l+0x7ce>
 8016db2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016db6:	b9b3      	cbnz	r3, 8016de6 <_strtod_l+0x7ce>
 8016db8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016dbc:	0d1b      	lsrs	r3, r3, #20
 8016dbe:	051b      	lsls	r3, r3, #20
 8016dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016dc4:	d90f      	bls.n	8016de6 <_strtod_l+0x7ce>
 8016dc6:	6963      	ldr	r3, [r4, #20]
 8016dc8:	b913      	cbnz	r3, 8016dd0 <_strtod_l+0x7b8>
 8016dca:	6923      	ldr	r3, [r4, #16]
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	dd0a      	ble.n	8016de6 <_strtod_l+0x7ce>
 8016dd0:	4621      	mov	r1, r4
 8016dd2:	2201      	movs	r2, #1
 8016dd4:	4648      	mov	r0, r9
 8016dd6:	f001 fe83 	bl	8018ae0 <__lshift>
 8016dda:	4641      	mov	r1, r8
 8016ddc:	4604      	mov	r4, r0
 8016dde:	f001 fed3 	bl	8018b88 <__mcmp>
 8016de2:	2800      	cmp	r0, #0
 8016de4:	dc67      	bgt.n	8016eb6 <_strtod_l+0x89e>
 8016de6:	9b04      	ldr	r3, [sp, #16]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d171      	bne.n	8016ed0 <_strtod_l+0x8b8>
 8016dec:	e63d      	b.n	8016a6a <_strtod_l+0x452>
 8016dee:	f018 0f01 	tst.w	r8, #1
 8016df2:	d004      	beq.n	8016dfe <_strtod_l+0x7e6>
 8016df4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016df8:	f7e9 fc16 	bl	8000628 <__aeabi_dmul>
 8016dfc:	2301      	movs	r3, #1
 8016dfe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016e02:	3508      	adds	r5, #8
 8016e04:	e6e5      	b.n	8016bd2 <_strtod_l+0x5ba>
 8016e06:	f04f 32ff 	mov.w	r2, #4294967295
 8016e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e0e:	ea03 0a0a 	and.w	sl, r3, sl
 8016e12:	e6ff      	b.n	8016c14 <_strtod_l+0x5fc>
 8016e14:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016e18:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016e1c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016e20:	36e2      	adds	r6, #226	; 0xe2
 8016e22:	fa01 f306 	lsl.w	r3, r1, r6
 8016e26:	930a      	str	r3, [sp, #40]	; 0x28
 8016e28:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e2a:	e75d      	b.n	8016ce8 <_strtod_l+0x6d0>
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e30:	2301      	movs	r3, #1
 8016e32:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e34:	e758      	b.n	8016ce8 <_strtod_l+0x6d0>
 8016e36:	4632      	mov	r2, r6
 8016e38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e3a:	4648      	mov	r0, r9
 8016e3c:	f001 fe50 	bl	8018ae0 <__lshift>
 8016e40:	901c      	str	r0, [sp, #112]	; 0x70
 8016e42:	2800      	cmp	r0, #0
 8016e44:	f47f af7c 	bne.w	8016d40 <_strtod_l+0x728>
 8016e48:	e604      	b.n	8016a54 <_strtod_l+0x43c>
 8016e4a:	bf00      	nop
 8016e4c:	0801a320 	.word	0x0801a320
 8016e50:	fffffc02 	.word	0xfffffc02
 8016e54:	465d      	mov	r5, fp
 8016e56:	f040 8086 	bne.w	8016f66 <_strtod_l+0x94e>
 8016e5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e60:	b32a      	cbz	r2, 8016eae <_strtod_l+0x896>
 8016e62:	4aaf      	ldr	r2, [pc, #700]	; (8017120 <_strtod_l+0xb08>)
 8016e64:	4293      	cmp	r3, r2
 8016e66:	d153      	bne.n	8016f10 <_strtod_l+0x8f8>
 8016e68:	9b04      	ldr	r3, [sp, #16]
 8016e6a:	4650      	mov	r0, sl
 8016e6c:	b1d3      	cbz	r3, 8016ea4 <_strtod_l+0x88c>
 8016e6e:	4aad      	ldr	r2, [pc, #692]	; (8017124 <_strtod_l+0xb0c>)
 8016e70:	402a      	ands	r2, r5
 8016e72:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016e76:	f04f 31ff 	mov.w	r1, #4294967295
 8016e7a:	d816      	bhi.n	8016eaa <_strtod_l+0x892>
 8016e7c:	0d12      	lsrs	r2, r2, #20
 8016e7e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016e82:	fa01 f303 	lsl.w	r3, r1, r3
 8016e86:	4298      	cmp	r0, r3
 8016e88:	d142      	bne.n	8016f10 <_strtod_l+0x8f8>
 8016e8a:	4ba7      	ldr	r3, [pc, #668]	; (8017128 <_strtod_l+0xb10>)
 8016e8c:	429d      	cmp	r5, r3
 8016e8e:	d102      	bne.n	8016e96 <_strtod_l+0x87e>
 8016e90:	3001      	adds	r0, #1
 8016e92:	f43f addf 	beq.w	8016a54 <_strtod_l+0x43c>
 8016e96:	4ba3      	ldr	r3, [pc, #652]	; (8017124 <_strtod_l+0xb0c>)
 8016e98:	402b      	ands	r3, r5
 8016e9a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016e9e:	f04f 0a00 	mov.w	sl, #0
 8016ea2:	e7a0      	b.n	8016de6 <_strtod_l+0x7ce>
 8016ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ea8:	e7ed      	b.n	8016e86 <_strtod_l+0x86e>
 8016eaa:	460b      	mov	r3, r1
 8016eac:	e7eb      	b.n	8016e86 <_strtod_l+0x86e>
 8016eae:	bb7b      	cbnz	r3, 8016f10 <_strtod_l+0x8f8>
 8016eb0:	f1ba 0f00 	cmp.w	sl, #0
 8016eb4:	d12c      	bne.n	8016f10 <_strtod_l+0x8f8>
 8016eb6:	9904      	ldr	r1, [sp, #16]
 8016eb8:	4a9a      	ldr	r2, [pc, #616]	; (8017124 <_strtod_l+0xb0c>)
 8016eba:	465b      	mov	r3, fp
 8016ebc:	b1f1      	cbz	r1, 8016efc <_strtod_l+0x8e4>
 8016ebe:	ea02 010b 	and.w	r1, r2, fp
 8016ec2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016ec6:	dc19      	bgt.n	8016efc <_strtod_l+0x8e4>
 8016ec8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016ecc:	f77f ae5b 	ble.w	8016b86 <_strtod_l+0x56e>
 8016ed0:	4a96      	ldr	r2, [pc, #600]	; (801712c <_strtod_l+0xb14>)
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016ed8:	4650      	mov	r0, sl
 8016eda:	4659      	mov	r1, fp
 8016edc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016ee0:	f7e9 fba2 	bl	8000628 <__aeabi_dmul>
 8016ee4:	4682      	mov	sl, r0
 8016ee6:	468b      	mov	fp, r1
 8016ee8:	2900      	cmp	r1, #0
 8016eea:	f47f adbe 	bne.w	8016a6a <_strtod_l+0x452>
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	f47f adbb 	bne.w	8016a6a <_strtod_l+0x452>
 8016ef4:	2322      	movs	r3, #34	; 0x22
 8016ef6:	f8c9 3000 	str.w	r3, [r9]
 8016efa:	e5b6      	b.n	8016a6a <_strtod_l+0x452>
 8016efc:	4013      	ands	r3, r2
 8016efe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016f02:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f0a:	f04f 3aff 	mov.w	sl, #4294967295
 8016f0e:	e76a      	b.n	8016de6 <_strtod_l+0x7ce>
 8016f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f12:	b193      	cbz	r3, 8016f3a <_strtod_l+0x922>
 8016f14:	422b      	tst	r3, r5
 8016f16:	f43f af66 	beq.w	8016de6 <_strtod_l+0x7ce>
 8016f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f1c:	9a04      	ldr	r2, [sp, #16]
 8016f1e:	4650      	mov	r0, sl
 8016f20:	4659      	mov	r1, fp
 8016f22:	b173      	cbz	r3, 8016f42 <_strtod_l+0x92a>
 8016f24:	f7ff fb5c 	bl	80165e0 <sulp>
 8016f28:	4602      	mov	r2, r0
 8016f2a:	460b      	mov	r3, r1
 8016f2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f30:	f7e9 f9c4 	bl	80002bc <__adddf3>
 8016f34:	4682      	mov	sl, r0
 8016f36:	468b      	mov	fp, r1
 8016f38:	e755      	b.n	8016de6 <_strtod_l+0x7ce>
 8016f3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f3c:	ea13 0f0a 	tst.w	r3, sl
 8016f40:	e7e9      	b.n	8016f16 <_strtod_l+0x8fe>
 8016f42:	f7ff fb4d 	bl	80165e0 <sulp>
 8016f46:	4602      	mov	r2, r0
 8016f48:	460b      	mov	r3, r1
 8016f4a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f4e:	f7e9 f9b3 	bl	80002b8 <__aeabi_dsub>
 8016f52:	2200      	movs	r2, #0
 8016f54:	2300      	movs	r3, #0
 8016f56:	4682      	mov	sl, r0
 8016f58:	468b      	mov	fp, r1
 8016f5a:	f7e9 fdcd 	bl	8000af8 <__aeabi_dcmpeq>
 8016f5e:	2800      	cmp	r0, #0
 8016f60:	f47f ae11 	bne.w	8016b86 <_strtod_l+0x56e>
 8016f64:	e73f      	b.n	8016de6 <_strtod_l+0x7ce>
 8016f66:	4641      	mov	r1, r8
 8016f68:	4620      	mov	r0, r4
 8016f6a:	f001 ff4a 	bl	8018e02 <__ratio>
 8016f6e:	ec57 6b10 	vmov	r6, r7, d0
 8016f72:	2200      	movs	r2, #0
 8016f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016f78:	ee10 0a10 	vmov	r0, s0
 8016f7c:	4639      	mov	r1, r7
 8016f7e:	f7e9 fdcf 	bl	8000b20 <__aeabi_dcmple>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	d077      	beq.n	8017076 <_strtod_l+0xa5e>
 8016f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d04a      	beq.n	8017022 <_strtod_l+0xa0a>
 8016f8c:	4b68      	ldr	r3, [pc, #416]	; (8017130 <_strtod_l+0xb18>)
 8016f8e:	2200      	movs	r2, #0
 8016f90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f94:	4f66      	ldr	r7, [pc, #408]	; (8017130 <_strtod_l+0xb18>)
 8016f96:	2600      	movs	r6, #0
 8016f98:	4b62      	ldr	r3, [pc, #392]	; (8017124 <_strtod_l+0xb0c>)
 8016f9a:	402b      	ands	r3, r5
 8016f9c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fa0:	4b64      	ldr	r3, [pc, #400]	; (8017134 <_strtod_l+0xb1c>)
 8016fa2:	429a      	cmp	r2, r3
 8016fa4:	f040 80ce 	bne.w	8017144 <_strtod_l+0xb2c>
 8016fa8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016fb0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016fb4:	ec4b ab10 	vmov	d0, sl, fp
 8016fb8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016fbc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016fc0:	f001 fe5a 	bl	8018c78 <__ulp>
 8016fc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016fc8:	ec53 2b10 	vmov	r2, r3, d0
 8016fcc:	f7e9 fb2c 	bl	8000628 <__aeabi_dmul>
 8016fd0:	4652      	mov	r2, sl
 8016fd2:	465b      	mov	r3, fp
 8016fd4:	f7e9 f972 	bl	80002bc <__adddf3>
 8016fd8:	460b      	mov	r3, r1
 8016fda:	4952      	ldr	r1, [pc, #328]	; (8017124 <_strtod_l+0xb0c>)
 8016fdc:	4a56      	ldr	r2, [pc, #344]	; (8017138 <_strtod_l+0xb20>)
 8016fde:	4019      	ands	r1, r3
 8016fe0:	4291      	cmp	r1, r2
 8016fe2:	4682      	mov	sl, r0
 8016fe4:	d95b      	bls.n	801709e <_strtod_l+0xa86>
 8016fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fe8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016fec:	4293      	cmp	r3, r2
 8016fee:	d103      	bne.n	8016ff8 <_strtod_l+0x9e0>
 8016ff0:	9b08      	ldr	r3, [sp, #32]
 8016ff2:	3301      	adds	r3, #1
 8016ff4:	f43f ad2e 	beq.w	8016a54 <_strtod_l+0x43c>
 8016ff8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017128 <_strtod_l+0xb10>
 8016ffc:	f04f 3aff 	mov.w	sl, #4294967295
 8017000:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017002:	4648      	mov	r0, r9
 8017004:	f001 fba1 	bl	801874a <_Bfree>
 8017008:	9905      	ldr	r1, [sp, #20]
 801700a:	4648      	mov	r0, r9
 801700c:	f001 fb9d 	bl	801874a <_Bfree>
 8017010:	4641      	mov	r1, r8
 8017012:	4648      	mov	r0, r9
 8017014:	f001 fb99 	bl	801874a <_Bfree>
 8017018:	4621      	mov	r1, r4
 801701a:	4648      	mov	r0, r9
 801701c:	f001 fb95 	bl	801874a <_Bfree>
 8017020:	e619      	b.n	8016c56 <_strtod_l+0x63e>
 8017022:	f1ba 0f00 	cmp.w	sl, #0
 8017026:	d11a      	bne.n	801705e <_strtod_l+0xa46>
 8017028:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801702c:	b9eb      	cbnz	r3, 801706a <_strtod_l+0xa52>
 801702e:	2200      	movs	r2, #0
 8017030:	4b3f      	ldr	r3, [pc, #252]	; (8017130 <_strtod_l+0xb18>)
 8017032:	4630      	mov	r0, r6
 8017034:	4639      	mov	r1, r7
 8017036:	f7e9 fd69 	bl	8000b0c <__aeabi_dcmplt>
 801703a:	b9c8      	cbnz	r0, 8017070 <_strtod_l+0xa58>
 801703c:	4630      	mov	r0, r6
 801703e:	4639      	mov	r1, r7
 8017040:	2200      	movs	r2, #0
 8017042:	4b3e      	ldr	r3, [pc, #248]	; (801713c <_strtod_l+0xb24>)
 8017044:	f7e9 faf0 	bl	8000628 <__aeabi_dmul>
 8017048:	4606      	mov	r6, r0
 801704a:	460f      	mov	r7, r1
 801704c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017050:	9618      	str	r6, [sp, #96]	; 0x60
 8017052:	9319      	str	r3, [sp, #100]	; 0x64
 8017054:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017058:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801705c:	e79c      	b.n	8016f98 <_strtod_l+0x980>
 801705e:	f1ba 0f01 	cmp.w	sl, #1
 8017062:	d102      	bne.n	801706a <_strtod_l+0xa52>
 8017064:	2d00      	cmp	r5, #0
 8017066:	f43f ad8e 	beq.w	8016b86 <_strtod_l+0x56e>
 801706a:	2200      	movs	r2, #0
 801706c:	4b34      	ldr	r3, [pc, #208]	; (8017140 <_strtod_l+0xb28>)
 801706e:	e78f      	b.n	8016f90 <_strtod_l+0x978>
 8017070:	2600      	movs	r6, #0
 8017072:	4f32      	ldr	r7, [pc, #200]	; (801713c <_strtod_l+0xb24>)
 8017074:	e7ea      	b.n	801704c <_strtod_l+0xa34>
 8017076:	4b31      	ldr	r3, [pc, #196]	; (801713c <_strtod_l+0xb24>)
 8017078:	4630      	mov	r0, r6
 801707a:	4639      	mov	r1, r7
 801707c:	2200      	movs	r2, #0
 801707e:	f7e9 fad3 	bl	8000628 <__aeabi_dmul>
 8017082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017084:	4606      	mov	r6, r0
 8017086:	460f      	mov	r7, r1
 8017088:	b933      	cbnz	r3, 8017098 <_strtod_l+0xa80>
 801708a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801708e:	9010      	str	r0, [sp, #64]	; 0x40
 8017090:	9311      	str	r3, [sp, #68]	; 0x44
 8017092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017096:	e7df      	b.n	8017058 <_strtod_l+0xa40>
 8017098:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801709c:	e7f9      	b.n	8017092 <_strtod_l+0xa7a>
 801709e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80170a2:	9b04      	ldr	r3, [sp, #16]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d1ab      	bne.n	8017000 <_strtod_l+0x9e8>
 80170a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170ac:	0d1b      	lsrs	r3, r3, #20
 80170ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170b0:	051b      	lsls	r3, r3, #20
 80170b2:	429a      	cmp	r2, r3
 80170b4:	465d      	mov	r5, fp
 80170b6:	d1a3      	bne.n	8017000 <_strtod_l+0x9e8>
 80170b8:	4639      	mov	r1, r7
 80170ba:	4630      	mov	r0, r6
 80170bc:	f7e9 fd64 	bl	8000b88 <__aeabi_d2iz>
 80170c0:	f7e9 fa48 	bl	8000554 <__aeabi_i2d>
 80170c4:	460b      	mov	r3, r1
 80170c6:	4602      	mov	r2, r0
 80170c8:	4639      	mov	r1, r7
 80170ca:	4630      	mov	r0, r6
 80170cc:	f7e9 f8f4 	bl	80002b8 <__aeabi_dsub>
 80170d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170d2:	4606      	mov	r6, r0
 80170d4:	460f      	mov	r7, r1
 80170d6:	b933      	cbnz	r3, 80170e6 <_strtod_l+0xace>
 80170d8:	f1ba 0f00 	cmp.w	sl, #0
 80170dc:	d103      	bne.n	80170e6 <_strtod_l+0xace>
 80170de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80170e2:	2d00      	cmp	r5, #0
 80170e4:	d06d      	beq.n	80171c2 <_strtod_l+0xbaa>
 80170e6:	a30a      	add	r3, pc, #40	; (adr r3, 8017110 <_strtod_l+0xaf8>)
 80170e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ec:	4630      	mov	r0, r6
 80170ee:	4639      	mov	r1, r7
 80170f0:	f7e9 fd0c 	bl	8000b0c <__aeabi_dcmplt>
 80170f4:	2800      	cmp	r0, #0
 80170f6:	f47f acb8 	bne.w	8016a6a <_strtod_l+0x452>
 80170fa:	a307      	add	r3, pc, #28	; (adr r3, 8017118 <_strtod_l+0xb00>)
 80170fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017100:	4630      	mov	r0, r6
 8017102:	4639      	mov	r1, r7
 8017104:	f7e9 fd20 	bl	8000b48 <__aeabi_dcmpgt>
 8017108:	2800      	cmp	r0, #0
 801710a:	f43f af79 	beq.w	8017000 <_strtod_l+0x9e8>
 801710e:	e4ac      	b.n	8016a6a <_strtod_l+0x452>
 8017110:	94a03595 	.word	0x94a03595
 8017114:	3fdfffff 	.word	0x3fdfffff
 8017118:	35afe535 	.word	0x35afe535
 801711c:	3fe00000 	.word	0x3fe00000
 8017120:	000fffff 	.word	0x000fffff
 8017124:	7ff00000 	.word	0x7ff00000
 8017128:	7fefffff 	.word	0x7fefffff
 801712c:	39500000 	.word	0x39500000
 8017130:	3ff00000 	.word	0x3ff00000
 8017134:	7fe00000 	.word	0x7fe00000
 8017138:	7c9fffff 	.word	0x7c9fffff
 801713c:	3fe00000 	.word	0x3fe00000
 8017140:	bff00000 	.word	0xbff00000
 8017144:	9b04      	ldr	r3, [sp, #16]
 8017146:	b333      	cbz	r3, 8017196 <_strtod_l+0xb7e>
 8017148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801714a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801714e:	d822      	bhi.n	8017196 <_strtod_l+0xb7e>
 8017150:	a327      	add	r3, pc, #156	; (adr r3, 80171f0 <_strtod_l+0xbd8>)
 8017152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017156:	4630      	mov	r0, r6
 8017158:	4639      	mov	r1, r7
 801715a:	f7e9 fce1 	bl	8000b20 <__aeabi_dcmple>
 801715e:	b1a0      	cbz	r0, 801718a <_strtod_l+0xb72>
 8017160:	4639      	mov	r1, r7
 8017162:	4630      	mov	r0, r6
 8017164:	f7e9 fd38 	bl	8000bd8 <__aeabi_d2uiz>
 8017168:	2800      	cmp	r0, #0
 801716a:	bf08      	it	eq
 801716c:	2001      	moveq	r0, #1
 801716e:	f7e9 f9e1 	bl	8000534 <__aeabi_ui2d>
 8017172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017174:	4606      	mov	r6, r0
 8017176:	460f      	mov	r7, r1
 8017178:	bb03      	cbnz	r3, 80171bc <_strtod_l+0xba4>
 801717a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801717e:	9012      	str	r0, [sp, #72]	; 0x48
 8017180:	9313      	str	r3, [sp, #76]	; 0x4c
 8017182:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017186:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801718a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801718c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801718e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017192:	1a9b      	subs	r3, r3, r2
 8017194:	930b      	str	r3, [sp, #44]	; 0x2c
 8017196:	ed9d 0b08 	vldr	d0, [sp, #32]
 801719a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801719e:	f001 fd6b 	bl	8018c78 <__ulp>
 80171a2:	4650      	mov	r0, sl
 80171a4:	ec53 2b10 	vmov	r2, r3, d0
 80171a8:	4659      	mov	r1, fp
 80171aa:	f7e9 fa3d 	bl	8000628 <__aeabi_dmul>
 80171ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171b2:	f7e9 f883 	bl	80002bc <__adddf3>
 80171b6:	4682      	mov	sl, r0
 80171b8:	468b      	mov	fp, r1
 80171ba:	e772      	b.n	80170a2 <_strtod_l+0xa8a>
 80171bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80171c0:	e7df      	b.n	8017182 <_strtod_l+0xb6a>
 80171c2:	a30d      	add	r3, pc, #52	; (adr r3, 80171f8 <_strtod_l+0xbe0>)
 80171c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c8:	f7e9 fca0 	bl	8000b0c <__aeabi_dcmplt>
 80171cc:	e79c      	b.n	8017108 <_strtod_l+0xaf0>
 80171ce:	2300      	movs	r3, #0
 80171d0:	930d      	str	r3, [sp, #52]	; 0x34
 80171d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80171d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171d6:	6013      	str	r3, [r2, #0]
 80171d8:	f7ff ba61 	b.w	801669e <_strtod_l+0x86>
 80171dc:	2b65      	cmp	r3, #101	; 0x65
 80171de:	f04f 0200 	mov.w	r2, #0
 80171e2:	f43f ab4e 	beq.w	8016882 <_strtod_l+0x26a>
 80171e6:	2101      	movs	r1, #1
 80171e8:	4614      	mov	r4, r2
 80171ea:	9104      	str	r1, [sp, #16]
 80171ec:	f7ff bacb 	b.w	8016786 <_strtod_l+0x16e>
 80171f0:	ffc00000 	.word	0xffc00000
 80171f4:	41dfffff 	.word	0x41dfffff
 80171f8:	94a03595 	.word	0x94a03595
 80171fc:	3fcfffff 	.word	0x3fcfffff

08017200 <_strtod_r>:
 8017200:	4b05      	ldr	r3, [pc, #20]	; (8017218 <_strtod_r+0x18>)
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	b410      	push	{r4}
 8017206:	6a1b      	ldr	r3, [r3, #32]
 8017208:	4c04      	ldr	r4, [pc, #16]	; (801721c <_strtod_r+0x1c>)
 801720a:	2b00      	cmp	r3, #0
 801720c:	bf08      	it	eq
 801720e:	4623      	moveq	r3, r4
 8017210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017214:	f7ff ba00 	b.w	8016618 <_strtod_l>
 8017218:	2000000c 	.word	0x2000000c
 801721c:	20000070 	.word	0x20000070

08017220 <_strtol_l.isra.0>:
 8017220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017224:	4680      	mov	r8, r0
 8017226:	4689      	mov	r9, r1
 8017228:	4692      	mov	sl, r2
 801722a:	461e      	mov	r6, r3
 801722c:	460f      	mov	r7, r1
 801722e:	463d      	mov	r5, r7
 8017230:	9808      	ldr	r0, [sp, #32]
 8017232:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017236:	f001 fa0d 	bl	8018654 <__locale_ctype_ptr_l>
 801723a:	4420      	add	r0, r4
 801723c:	7843      	ldrb	r3, [r0, #1]
 801723e:	f013 0308 	ands.w	r3, r3, #8
 8017242:	d132      	bne.n	80172aa <_strtol_l.isra.0+0x8a>
 8017244:	2c2d      	cmp	r4, #45	; 0x2d
 8017246:	d132      	bne.n	80172ae <_strtol_l.isra.0+0x8e>
 8017248:	787c      	ldrb	r4, [r7, #1]
 801724a:	1cbd      	adds	r5, r7, #2
 801724c:	2201      	movs	r2, #1
 801724e:	2e00      	cmp	r6, #0
 8017250:	d05d      	beq.n	801730e <_strtol_l.isra.0+0xee>
 8017252:	2e10      	cmp	r6, #16
 8017254:	d109      	bne.n	801726a <_strtol_l.isra.0+0x4a>
 8017256:	2c30      	cmp	r4, #48	; 0x30
 8017258:	d107      	bne.n	801726a <_strtol_l.isra.0+0x4a>
 801725a:	782b      	ldrb	r3, [r5, #0]
 801725c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017260:	2b58      	cmp	r3, #88	; 0x58
 8017262:	d14f      	bne.n	8017304 <_strtol_l.isra.0+0xe4>
 8017264:	786c      	ldrb	r4, [r5, #1]
 8017266:	2610      	movs	r6, #16
 8017268:	3502      	adds	r5, #2
 801726a:	2a00      	cmp	r2, #0
 801726c:	bf14      	ite	ne
 801726e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017272:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017276:	2700      	movs	r7, #0
 8017278:	fbb1 fcf6 	udiv	ip, r1, r6
 801727c:	4638      	mov	r0, r7
 801727e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017282:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017286:	2b09      	cmp	r3, #9
 8017288:	d817      	bhi.n	80172ba <_strtol_l.isra.0+0x9a>
 801728a:	461c      	mov	r4, r3
 801728c:	42a6      	cmp	r6, r4
 801728e:	dd23      	ble.n	80172d8 <_strtol_l.isra.0+0xb8>
 8017290:	1c7b      	adds	r3, r7, #1
 8017292:	d007      	beq.n	80172a4 <_strtol_l.isra.0+0x84>
 8017294:	4584      	cmp	ip, r0
 8017296:	d31c      	bcc.n	80172d2 <_strtol_l.isra.0+0xb2>
 8017298:	d101      	bne.n	801729e <_strtol_l.isra.0+0x7e>
 801729a:	45a6      	cmp	lr, r4
 801729c:	db19      	blt.n	80172d2 <_strtol_l.isra.0+0xb2>
 801729e:	fb00 4006 	mla	r0, r0, r6, r4
 80172a2:	2701      	movs	r7, #1
 80172a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172a8:	e7eb      	b.n	8017282 <_strtol_l.isra.0+0x62>
 80172aa:	462f      	mov	r7, r5
 80172ac:	e7bf      	b.n	801722e <_strtol_l.isra.0+0xe>
 80172ae:	2c2b      	cmp	r4, #43	; 0x2b
 80172b0:	bf04      	itt	eq
 80172b2:	1cbd      	addeq	r5, r7, #2
 80172b4:	787c      	ldrbeq	r4, [r7, #1]
 80172b6:	461a      	mov	r2, r3
 80172b8:	e7c9      	b.n	801724e <_strtol_l.isra.0+0x2e>
 80172ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80172be:	2b19      	cmp	r3, #25
 80172c0:	d801      	bhi.n	80172c6 <_strtol_l.isra.0+0xa6>
 80172c2:	3c37      	subs	r4, #55	; 0x37
 80172c4:	e7e2      	b.n	801728c <_strtol_l.isra.0+0x6c>
 80172c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80172ca:	2b19      	cmp	r3, #25
 80172cc:	d804      	bhi.n	80172d8 <_strtol_l.isra.0+0xb8>
 80172ce:	3c57      	subs	r4, #87	; 0x57
 80172d0:	e7dc      	b.n	801728c <_strtol_l.isra.0+0x6c>
 80172d2:	f04f 37ff 	mov.w	r7, #4294967295
 80172d6:	e7e5      	b.n	80172a4 <_strtol_l.isra.0+0x84>
 80172d8:	1c7b      	adds	r3, r7, #1
 80172da:	d108      	bne.n	80172ee <_strtol_l.isra.0+0xce>
 80172dc:	2322      	movs	r3, #34	; 0x22
 80172de:	f8c8 3000 	str.w	r3, [r8]
 80172e2:	4608      	mov	r0, r1
 80172e4:	f1ba 0f00 	cmp.w	sl, #0
 80172e8:	d107      	bne.n	80172fa <_strtol_l.isra.0+0xda>
 80172ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ee:	b102      	cbz	r2, 80172f2 <_strtol_l.isra.0+0xd2>
 80172f0:	4240      	negs	r0, r0
 80172f2:	f1ba 0f00 	cmp.w	sl, #0
 80172f6:	d0f8      	beq.n	80172ea <_strtol_l.isra.0+0xca>
 80172f8:	b10f      	cbz	r7, 80172fe <_strtol_l.isra.0+0xde>
 80172fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80172fe:	f8ca 9000 	str.w	r9, [sl]
 8017302:	e7f2      	b.n	80172ea <_strtol_l.isra.0+0xca>
 8017304:	2430      	movs	r4, #48	; 0x30
 8017306:	2e00      	cmp	r6, #0
 8017308:	d1af      	bne.n	801726a <_strtol_l.isra.0+0x4a>
 801730a:	2608      	movs	r6, #8
 801730c:	e7ad      	b.n	801726a <_strtol_l.isra.0+0x4a>
 801730e:	2c30      	cmp	r4, #48	; 0x30
 8017310:	d0a3      	beq.n	801725a <_strtol_l.isra.0+0x3a>
 8017312:	260a      	movs	r6, #10
 8017314:	e7a9      	b.n	801726a <_strtol_l.isra.0+0x4a>
	...

08017318 <_strtol_r>:
 8017318:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801731a:	4c06      	ldr	r4, [pc, #24]	; (8017334 <_strtol_r+0x1c>)
 801731c:	4d06      	ldr	r5, [pc, #24]	; (8017338 <_strtol_r+0x20>)
 801731e:	6824      	ldr	r4, [r4, #0]
 8017320:	6a24      	ldr	r4, [r4, #32]
 8017322:	2c00      	cmp	r4, #0
 8017324:	bf08      	it	eq
 8017326:	462c      	moveq	r4, r5
 8017328:	9400      	str	r4, [sp, #0]
 801732a:	f7ff ff79 	bl	8017220 <_strtol_l.isra.0>
 801732e:	b003      	add	sp, #12
 8017330:	bd30      	pop	{r4, r5, pc}
 8017332:	bf00      	nop
 8017334:	2000000c 	.word	0x2000000c
 8017338:	20000070 	.word	0x20000070

0801733c <_vsiprintf_r>:
 801733c:	b500      	push	{lr}
 801733e:	b09b      	sub	sp, #108	; 0x6c
 8017340:	9100      	str	r1, [sp, #0]
 8017342:	9104      	str	r1, [sp, #16]
 8017344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017348:	9105      	str	r1, [sp, #20]
 801734a:	9102      	str	r1, [sp, #8]
 801734c:	4905      	ldr	r1, [pc, #20]	; (8017364 <_vsiprintf_r+0x28>)
 801734e:	9103      	str	r1, [sp, #12]
 8017350:	4669      	mov	r1, sp
 8017352:	f001 fed5 	bl	8019100 <_svfiprintf_r>
 8017356:	9b00      	ldr	r3, [sp, #0]
 8017358:	2200      	movs	r2, #0
 801735a:	701a      	strb	r2, [r3, #0]
 801735c:	b01b      	add	sp, #108	; 0x6c
 801735e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017362:	bf00      	nop
 8017364:	ffff0208 	.word	0xffff0208

08017368 <vsiprintf>:
 8017368:	4613      	mov	r3, r2
 801736a:	460a      	mov	r2, r1
 801736c:	4601      	mov	r1, r0
 801736e:	4802      	ldr	r0, [pc, #8]	; (8017378 <vsiprintf+0x10>)
 8017370:	6800      	ldr	r0, [r0, #0]
 8017372:	f7ff bfe3 	b.w	801733c <_vsiprintf_r>
 8017376:	bf00      	nop
 8017378:	2000000c 	.word	0x2000000c

0801737c <quorem>:
 801737c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017380:	6903      	ldr	r3, [r0, #16]
 8017382:	690c      	ldr	r4, [r1, #16]
 8017384:	42a3      	cmp	r3, r4
 8017386:	4680      	mov	r8, r0
 8017388:	f2c0 8082 	blt.w	8017490 <quorem+0x114>
 801738c:	3c01      	subs	r4, #1
 801738e:	f101 0714 	add.w	r7, r1, #20
 8017392:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017396:	f100 0614 	add.w	r6, r0, #20
 801739a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801739e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80173a2:	eb06 030c 	add.w	r3, r6, ip
 80173a6:	3501      	adds	r5, #1
 80173a8:	eb07 090c 	add.w	r9, r7, ip
 80173ac:	9301      	str	r3, [sp, #4]
 80173ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80173b2:	b395      	cbz	r5, 801741a <quorem+0x9e>
 80173b4:	f04f 0a00 	mov.w	sl, #0
 80173b8:	4638      	mov	r0, r7
 80173ba:	46b6      	mov	lr, r6
 80173bc:	46d3      	mov	fp, sl
 80173be:	f850 2b04 	ldr.w	r2, [r0], #4
 80173c2:	b293      	uxth	r3, r2
 80173c4:	fb05 a303 	mla	r3, r5, r3, sl
 80173c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80173cc:	b29b      	uxth	r3, r3
 80173ce:	ebab 0303 	sub.w	r3, fp, r3
 80173d2:	0c12      	lsrs	r2, r2, #16
 80173d4:	f8de b000 	ldr.w	fp, [lr]
 80173d8:	fb05 a202 	mla	r2, r5, r2, sl
 80173dc:	fa13 f38b 	uxtah	r3, r3, fp
 80173e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80173e4:	fa1f fb82 	uxth.w	fp, r2
 80173e8:	f8de 2000 	ldr.w	r2, [lr]
 80173ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80173f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80173f4:	b29b      	uxth	r3, r3
 80173f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173fa:	4581      	cmp	r9, r0
 80173fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017400:	f84e 3b04 	str.w	r3, [lr], #4
 8017404:	d2db      	bcs.n	80173be <quorem+0x42>
 8017406:	f856 300c 	ldr.w	r3, [r6, ip]
 801740a:	b933      	cbnz	r3, 801741a <quorem+0x9e>
 801740c:	9b01      	ldr	r3, [sp, #4]
 801740e:	3b04      	subs	r3, #4
 8017410:	429e      	cmp	r6, r3
 8017412:	461a      	mov	r2, r3
 8017414:	d330      	bcc.n	8017478 <quorem+0xfc>
 8017416:	f8c8 4010 	str.w	r4, [r8, #16]
 801741a:	4640      	mov	r0, r8
 801741c:	f001 fbb4 	bl	8018b88 <__mcmp>
 8017420:	2800      	cmp	r0, #0
 8017422:	db25      	blt.n	8017470 <quorem+0xf4>
 8017424:	3501      	adds	r5, #1
 8017426:	4630      	mov	r0, r6
 8017428:	f04f 0c00 	mov.w	ip, #0
 801742c:	f857 2b04 	ldr.w	r2, [r7], #4
 8017430:	f8d0 e000 	ldr.w	lr, [r0]
 8017434:	b293      	uxth	r3, r2
 8017436:	ebac 0303 	sub.w	r3, ip, r3
 801743a:	0c12      	lsrs	r2, r2, #16
 801743c:	fa13 f38e 	uxtah	r3, r3, lr
 8017440:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017448:	b29b      	uxth	r3, r3
 801744a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801744e:	45b9      	cmp	r9, r7
 8017450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017454:	f840 3b04 	str.w	r3, [r0], #4
 8017458:	d2e8      	bcs.n	801742c <quorem+0xb0>
 801745a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801745e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017462:	b92a      	cbnz	r2, 8017470 <quorem+0xf4>
 8017464:	3b04      	subs	r3, #4
 8017466:	429e      	cmp	r6, r3
 8017468:	461a      	mov	r2, r3
 801746a:	d30b      	bcc.n	8017484 <quorem+0x108>
 801746c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017470:	4628      	mov	r0, r5
 8017472:	b003      	add	sp, #12
 8017474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017478:	6812      	ldr	r2, [r2, #0]
 801747a:	3b04      	subs	r3, #4
 801747c:	2a00      	cmp	r2, #0
 801747e:	d1ca      	bne.n	8017416 <quorem+0x9a>
 8017480:	3c01      	subs	r4, #1
 8017482:	e7c5      	b.n	8017410 <quorem+0x94>
 8017484:	6812      	ldr	r2, [r2, #0]
 8017486:	3b04      	subs	r3, #4
 8017488:	2a00      	cmp	r2, #0
 801748a:	d1ef      	bne.n	801746c <quorem+0xf0>
 801748c:	3c01      	subs	r4, #1
 801748e:	e7ea      	b.n	8017466 <quorem+0xea>
 8017490:	2000      	movs	r0, #0
 8017492:	e7ee      	b.n	8017472 <quorem+0xf6>
 8017494:	0000      	movs	r0, r0
	...

08017498 <_dtoa_r>:
 8017498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801749c:	ec57 6b10 	vmov	r6, r7, d0
 80174a0:	b097      	sub	sp, #92	; 0x5c
 80174a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80174a4:	9106      	str	r1, [sp, #24]
 80174a6:	4604      	mov	r4, r0
 80174a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80174aa:	9312      	str	r3, [sp, #72]	; 0x48
 80174ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80174b0:	e9cd 6700 	strd	r6, r7, [sp]
 80174b4:	b93d      	cbnz	r5, 80174c6 <_dtoa_r+0x2e>
 80174b6:	2010      	movs	r0, #16
 80174b8:	f001 f8ee 	bl	8018698 <malloc>
 80174bc:	6260      	str	r0, [r4, #36]	; 0x24
 80174be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80174c2:	6005      	str	r5, [r0, #0]
 80174c4:	60c5      	str	r5, [r0, #12]
 80174c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174c8:	6819      	ldr	r1, [r3, #0]
 80174ca:	b151      	cbz	r1, 80174e2 <_dtoa_r+0x4a>
 80174cc:	685a      	ldr	r2, [r3, #4]
 80174ce:	604a      	str	r2, [r1, #4]
 80174d0:	2301      	movs	r3, #1
 80174d2:	4093      	lsls	r3, r2
 80174d4:	608b      	str	r3, [r1, #8]
 80174d6:	4620      	mov	r0, r4
 80174d8:	f001 f937 	bl	801874a <_Bfree>
 80174dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174de:	2200      	movs	r2, #0
 80174e0:	601a      	str	r2, [r3, #0]
 80174e2:	1e3b      	subs	r3, r7, #0
 80174e4:	bfbb      	ittet	lt
 80174e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80174ea:	9301      	strlt	r3, [sp, #4]
 80174ec:	2300      	movge	r3, #0
 80174ee:	2201      	movlt	r2, #1
 80174f0:	bfac      	ite	ge
 80174f2:	f8c8 3000 	strge.w	r3, [r8]
 80174f6:	f8c8 2000 	strlt.w	r2, [r8]
 80174fa:	4baf      	ldr	r3, [pc, #700]	; (80177b8 <_dtoa_r+0x320>)
 80174fc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017500:	ea33 0308 	bics.w	r3, r3, r8
 8017504:	d114      	bne.n	8017530 <_dtoa_r+0x98>
 8017506:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017508:	f242 730f 	movw	r3, #9999	; 0x270f
 801750c:	6013      	str	r3, [r2, #0]
 801750e:	9b00      	ldr	r3, [sp, #0]
 8017510:	b923      	cbnz	r3, 801751c <_dtoa_r+0x84>
 8017512:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017516:	2800      	cmp	r0, #0
 8017518:	f000 8542 	beq.w	8017fa0 <_dtoa_r+0xb08>
 801751c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801751e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80177cc <_dtoa_r+0x334>
 8017522:	2b00      	cmp	r3, #0
 8017524:	f000 8544 	beq.w	8017fb0 <_dtoa_r+0xb18>
 8017528:	f10b 0303 	add.w	r3, fp, #3
 801752c:	f000 bd3e 	b.w	8017fac <_dtoa_r+0xb14>
 8017530:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017534:	2200      	movs	r2, #0
 8017536:	2300      	movs	r3, #0
 8017538:	4630      	mov	r0, r6
 801753a:	4639      	mov	r1, r7
 801753c:	f7e9 fadc 	bl	8000af8 <__aeabi_dcmpeq>
 8017540:	4681      	mov	r9, r0
 8017542:	b168      	cbz	r0, 8017560 <_dtoa_r+0xc8>
 8017544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017546:	2301      	movs	r3, #1
 8017548:	6013      	str	r3, [r2, #0]
 801754a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801754c:	2b00      	cmp	r3, #0
 801754e:	f000 8524 	beq.w	8017f9a <_dtoa_r+0xb02>
 8017552:	4b9a      	ldr	r3, [pc, #616]	; (80177bc <_dtoa_r+0x324>)
 8017554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017556:	f103 3bff 	add.w	fp, r3, #4294967295
 801755a:	6013      	str	r3, [r2, #0]
 801755c:	f000 bd28 	b.w	8017fb0 <_dtoa_r+0xb18>
 8017560:	aa14      	add	r2, sp, #80	; 0x50
 8017562:	a915      	add	r1, sp, #84	; 0x54
 8017564:	ec47 6b10 	vmov	d0, r6, r7
 8017568:	4620      	mov	r0, r4
 801756a:	f001 fbfb 	bl	8018d64 <__d2b>
 801756e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017572:	9004      	str	r0, [sp, #16]
 8017574:	2d00      	cmp	r5, #0
 8017576:	d07c      	beq.n	8017672 <_dtoa_r+0x1da>
 8017578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801757c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017580:	46b2      	mov	sl, r6
 8017582:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017586:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801758a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801758e:	2200      	movs	r2, #0
 8017590:	4b8b      	ldr	r3, [pc, #556]	; (80177c0 <_dtoa_r+0x328>)
 8017592:	4650      	mov	r0, sl
 8017594:	4659      	mov	r1, fp
 8017596:	f7e8 fe8f 	bl	80002b8 <__aeabi_dsub>
 801759a:	a381      	add	r3, pc, #516	; (adr r3, 80177a0 <_dtoa_r+0x308>)
 801759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a0:	f7e9 f842 	bl	8000628 <__aeabi_dmul>
 80175a4:	a380      	add	r3, pc, #512	; (adr r3, 80177a8 <_dtoa_r+0x310>)
 80175a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175aa:	f7e8 fe87 	bl	80002bc <__adddf3>
 80175ae:	4606      	mov	r6, r0
 80175b0:	4628      	mov	r0, r5
 80175b2:	460f      	mov	r7, r1
 80175b4:	f7e8 ffce 	bl	8000554 <__aeabi_i2d>
 80175b8:	a37d      	add	r3, pc, #500	; (adr r3, 80177b0 <_dtoa_r+0x318>)
 80175ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175be:	f7e9 f833 	bl	8000628 <__aeabi_dmul>
 80175c2:	4602      	mov	r2, r0
 80175c4:	460b      	mov	r3, r1
 80175c6:	4630      	mov	r0, r6
 80175c8:	4639      	mov	r1, r7
 80175ca:	f7e8 fe77 	bl	80002bc <__adddf3>
 80175ce:	4606      	mov	r6, r0
 80175d0:	460f      	mov	r7, r1
 80175d2:	f7e9 fad9 	bl	8000b88 <__aeabi_d2iz>
 80175d6:	2200      	movs	r2, #0
 80175d8:	4682      	mov	sl, r0
 80175da:	2300      	movs	r3, #0
 80175dc:	4630      	mov	r0, r6
 80175de:	4639      	mov	r1, r7
 80175e0:	f7e9 fa94 	bl	8000b0c <__aeabi_dcmplt>
 80175e4:	b148      	cbz	r0, 80175fa <_dtoa_r+0x162>
 80175e6:	4650      	mov	r0, sl
 80175e8:	f7e8 ffb4 	bl	8000554 <__aeabi_i2d>
 80175ec:	4632      	mov	r2, r6
 80175ee:	463b      	mov	r3, r7
 80175f0:	f7e9 fa82 	bl	8000af8 <__aeabi_dcmpeq>
 80175f4:	b908      	cbnz	r0, 80175fa <_dtoa_r+0x162>
 80175f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80175fa:	f1ba 0f16 	cmp.w	sl, #22
 80175fe:	d859      	bhi.n	80176b4 <_dtoa_r+0x21c>
 8017600:	4970      	ldr	r1, [pc, #448]	; (80177c4 <_dtoa_r+0x32c>)
 8017602:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017606:	e9dd 2300 	ldrd	r2, r3, [sp]
 801760a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801760e:	f7e9 fa9b 	bl	8000b48 <__aeabi_dcmpgt>
 8017612:	2800      	cmp	r0, #0
 8017614:	d050      	beq.n	80176b8 <_dtoa_r+0x220>
 8017616:	f10a 3aff 	add.w	sl, sl, #4294967295
 801761a:	2300      	movs	r3, #0
 801761c:	930f      	str	r3, [sp, #60]	; 0x3c
 801761e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017620:	1b5d      	subs	r5, r3, r5
 8017622:	f1b5 0801 	subs.w	r8, r5, #1
 8017626:	bf49      	itett	mi
 8017628:	f1c5 0301 	rsbmi	r3, r5, #1
 801762c:	2300      	movpl	r3, #0
 801762e:	9305      	strmi	r3, [sp, #20]
 8017630:	f04f 0800 	movmi.w	r8, #0
 8017634:	bf58      	it	pl
 8017636:	9305      	strpl	r3, [sp, #20]
 8017638:	f1ba 0f00 	cmp.w	sl, #0
 801763c:	db3e      	blt.n	80176bc <_dtoa_r+0x224>
 801763e:	2300      	movs	r3, #0
 8017640:	44d0      	add	r8, sl
 8017642:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017646:	9307      	str	r3, [sp, #28]
 8017648:	9b06      	ldr	r3, [sp, #24]
 801764a:	2b09      	cmp	r3, #9
 801764c:	f200 8090 	bhi.w	8017770 <_dtoa_r+0x2d8>
 8017650:	2b05      	cmp	r3, #5
 8017652:	bfc4      	itt	gt
 8017654:	3b04      	subgt	r3, #4
 8017656:	9306      	strgt	r3, [sp, #24]
 8017658:	9b06      	ldr	r3, [sp, #24]
 801765a:	f1a3 0302 	sub.w	r3, r3, #2
 801765e:	bfcc      	ite	gt
 8017660:	2500      	movgt	r5, #0
 8017662:	2501      	movle	r5, #1
 8017664:	2b03      	cmp	r3, #3
 8017666:	f200 808f 	bhi.w	8017788 <_dtoa_r+0x2f0>
 801766a:	e8df f003 	tbb	[pc, r3]
 801766e:	7f7d      	.short	0x7f7d
 8017670:	7131      	.short	0x7131
 8017672:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017676:	441d      	add	r5, r3
 8017678:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801767c:	2820      	cmp	r0, #32
 801767e:	dd13      	ble.n	80176a8 <_dtoa_r+0x210>
 8017680:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017684:	9b00      	ldr	r3, [sp, #0]
 8017686:	fa08 f800 	lsl.w	r8, r8, r0
 801768a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801768e:	fa23 f000 	lsr.w	r0, r3, r0
 8017692:	ea48 0000 	orr.w	r0, r8, r0
 8017696:	f7e8 ff4d 	bl	8000534 <__aeabi_ui2d>
 801769a:	2301      	movs	r3, #1
 801769c:	4682      	mov	sl, r0
 801769e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80176a2:	3d01      	subs	r5, #1
 80176a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80176a6:	e772      	b.n	801758e <_dtoa_r+0xf6>
 80176a8:	9b00      	ldr	r3, [sp, #0]
 80176aa:	f1c0 0020 	rsb	r0, r0, #32
 80176ae:	fa03 f000 	lsl.w	r0, r3, r0
 80176b2:	e7f0      	b.n	8017696 <_dtoa_r+0x1fe>
 80176b4:	2301      	movs	r3, #1
 80176b6:	e7b1      	b.n	801761c <_dtoa_r+0x184>
 80176b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80176ba:	e7b0      	b.n	801761e <_dtoa_r+0x186>
 80176bc:	9b05      	ldr	r3, [sp, #20]
 80176be:	eba3 030a 	sub.w	r3, r3, sl
 80176c2:	9305      	str	r3, [sp, #20]
 80176c4:	f1ca 0300 	rsb	r3, sl, #0
 80176c8:	9307      	str	r3, [sp, #28]
 80176ca:	2300      	movs	r3, #0
 80176cc:	930e      	str	r3, [sp, #56]	; 0x38
 80176ce:	e7bb      	b.n	8017648 <_dtoa_r+0x1b0>
 80176d0:	2301      	movs	r3, #1
 80176d2:	930a      	str	r3, [sp, #40]	; 0x28
 80176d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	dd59      	ble.n	801778e <_dtoa_r+0x2f6>
 80176da:	9302      	str	r3, [sp, #8]
 80176dc:	4699      	mov	r9, r3
 80176de:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80176e0:	2200      	movs	r2, #0
 80176e2:	6072      	str	r2, [r6, #4]
 80176e4:	2204      	movs	r2, #4
 80176e6:	f102 0014 	add.w	r0, r2, #20
 80176ea:	4298      	cmp	r0, r3
 80176ec:	6871      	ldr	r1, [r6, #4]
 80176ee:	d953      	bls.n	8017798 <_dtoa_r+0x300>
 80176f0:	4620      	mov	r0, r4
 80176f2:	f000 fff6 	bl	80186e2 <_Balloc>
 80176f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80176f8:	6030      	str	r0, [r6, #0]
 80176fa:	f1b9 0f0e 	cmp.w	r9, #14
 80176fe:	f8d3 b000 	ldr.w	fp, [r3]
 8017702:	f200 80e6 	bhi.w	80178d2 <_dtoa_r+0x43a>
 8017706:	2d00      	cmp	r5, #0
 8017708:	f000 80e3 	beq.w	80178d2 <_dtoa_r+0x43a>
 801770c:	ed9d 7b00 	vldr	d7, [sp]
 8017710:	f1ba 0f00 	cmp.w	sl, #0
 8017714:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017718:	dd74      	ble.n	8017804 <_dtoa_r+0x36c>
 801771a:	4a2a      	ldr	r2, [pc, #168]	; (80177c4 <_dtoa_r+0x32c>)
 801771c:	f00a 030f 	and.w	r3, sl, #15
 8017720:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017724:	ed93 7b00 	vldr	d7, [r3]
 8017728:	ea4f 162a 	mov.w	r6, sl, asr #4
 801772c:	06f0      	lsls	r0, r6, #27
 801772e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017732:	d565      	bpl.n	8017800 <_dtoa_r+0x368>
 8017734:	4b24      	ldr	r3, [pc, #144]	; (80177c8 <_dtoa_r+0x330>)
 8017736:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801773a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801773e:	f7e9 f89d 	bl	800087c <__aeabi_ddiv>
 8017742:	e9cd 0100 	strd	r0, r1, [sp]
 8017746:	f006 060f 	and.w	r6, r6, #15
 801774a:	2503      	movs	r5, #3
 801774c:	4f1e      	ldr	r7, [pc, #120]	; (80177c8 <_dtoa_r+0x330>)
 801774e:	e04c      	b.n	80177ea <_dtoa_r+0x352>
 8017750:	2301      	movs	r3, #1
 8017752:	930a      	str	r3, [sp, #40]	; 0x28
 8017754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017756:	4453      	add	r3, sl
 8017758:	f103 0901 	add.w	r9, r3, #1
 801775c:	9302      	str	r3, [sp, #8]
 801775e:	464b      	mov	r3, r9
 8017760:	2b01      	cmp	r3, #1
 8017762:	bfb8      	it	lt
 8017764:	2301      	movlt	r3, #1
 8017766:	e7ba      	b.n	80176de <_dtoa_r+0x246>
 8017768:	2300      	movs	r3, #0
 801776a:	e7b2      	b.n	80176d2 <_dtoa_r+0x23a>
 801776c:	2300      	movs	r3, #0
 801776e:	e7f0      	b.n	8017752 <_dtoa_r+0x2ba>
 8017770:	2501      	movs	r5, #1
 8017772:	2300      	movs	r3, #0
 8017774:	9306      	str	r3, [sp, #24]
 8017776:	950a      	str	r5, [sp, #40]	; 0x28
 8017778:	f04f 33ff 	mov.w	r3, #4294967295
 801777c:	9302      	str	r3, [sp, #8]
 801777e:	4699      	mov	r9, r3
 8017780:	2200      	movs	r2, #0
 8017782:	2312      	movs	r3, #18
 8017784:	920b      	str	r2, [sp, #44]	; 0x2c
 8017786:	e7aa      	b.n	80176de <_dtoa_r+0x246>
 8017788:	2301      	movs	r3, #1
 801778a:	930a      	str	r3, [sp, #40]	; 0x28
 801778c:	e7f4      	b.n	8017778 <_dtoa_r+0x2e0>
 801778e:	2301      	movs	r3, #1
 8017790:	9302      	str	r3, [sp, #8]
 8017792:	4699      	mov	r9, r3
 8017794:	461a      	mov	r2, r3
 8017796:	e7f5      	b.n	8017784 <_dtoa_r+0x2ec>
 8017798:	3101      	adds	r1, #1
 801779a:	6071      	str	r1, [r6, #4]
 801779c:	0052      	lsls	r2, r2, #1
 801779e:	e7a2      	b.n	80176e6 <_dtoa_r+0x24e>
 80177a0:	636f4361 	.word	0x636f4361
 80177a4:	3fd287a7 	.word	0x3fd287a7
 80177a8:	8b60c8b3 	.word	0x8b60c8b3
 80177ac:	3fc68a28 	.word	0x3fc68a28
 80177b0:	509f79fb 	.word	0x509f79fb
 80177b4:	3fd34413 	.word	0x3fd34413
 80177b8:	7ff00000 	.word	0x7ff00000
 80177bc:	0801a484 	.word	0x0801a484
 80177c0:	3ff80000 	.word	0x3ff80000
 80177c4:	0801a388 	.word	0x0801a388
 80177c8:	0801a360 	.word	0x0801a360
 80177cc:	0801a351 	.word	0x0801a351
 80177d0:	07f1      	lsls	r1, r6, #31
 80177d2:	d508      	bpl.n	80177e6 <_dtoa_r+0x34e>
 80177d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80177d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80177dc:	f7e8 ff24 	bl	8000628 <__aeabi_dmul>
 80177e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80177e4:	3501      	adds	r5, #1
 80177e6:	1076      	asrs	r6, r6, #1
 80177e8:	3708      	adds	r7, #8
 80177ea:	2e00      	cmp	r6, #0
 80177ec:	d1f0      	bne.n	80177d0 <_dtoa_r+0x338>
 80177ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80177f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177f6:	f7e9 f841 	bl	800087c <__aeabi_ddiv>
 80177fa:	e9cd 0100 	strd	r0, r1, [sp]
 80177fe:	e01a      	b.n	8017836 <_dtoa_r+0x39e>
 8017800:	2502      	movs	r5, #2
 8017802:	e7a3      	b.n	801774c <_dtoa_r+0x2b4>
 8017804:	f000 80a0 	beq.w	8017948 <_dtoa_r+0x4b0>
 8017808:	f1ca 0600 	rsb	r6, sl, #0
 801780c:	4b9f      	ldr	r3, [pc, #636]	; (8017a8c <_dtoa_r+0x5f4>)
 801780e:	4fa0      	ldr	r7, [pc, #640]	; (8017a90 <_dtoa_r+0x5f8>)
 8017810:	f006 020f 	and.w	r2, r6, #15
 8017814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017820:	f7e8 ff02 	bl	8000628 <__aeabi_dmul>
 8017824:	e9cd 0100 	strd	r0, r1, [sp]
 8017828:	1136      	asrs	r6, r6, #4
 801782a:	2300      	movs	r3, #0
 801782c:	2502      	movs	r5, #2
 801782e:	2e00      	cmp	r6, #0
 8017830:	d17f      	bne.n	8017932 <_dtoa_r+0x49a>
 8017832:	2b00      	cmp	r3, #0
 8017834:	d1e1      	bne.n	80177fa <_dtoa_r+0x362>
 8017836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017838:	2b00      	cmp	r3, #0
 801783a:	f000 8087 	beq.w	801794c <_dtoa_r+0x4b4>
 801783e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017842:	2200      	movs	r2, #0
 8017844:	4b93      	ldr	r3, [pc, #588]	; (8017a94 <_dtoa_r+0x5fc>)
 8017846:	4630      	mov	r0, r6
 8017848:	4639      	mov	r1, r7
 801784a:	f7e9 f95f 	bl	8000b0c <__aeabi_dcmplt>
 801784e:	2800      	cmp	r0, #0
 8017850:	d07c      	beq.n	801794c <_dtoa_r+0x4b4>
 8017852:	f1b9 0f00 	cmp.w	r9, #0
 8017856:	d079      	beq.n	801794c <_dtoa_r+0x4b4>
 8017858:	9b02      	ldr	r3, [sp, #8]
 801785a:	2b00      	cmp	r3, #0
 801785c:	dd35      	ble.n	80178ca <_dtoa_r+0x432>
 801785e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017862:	9308      	str	r3, [sp, #32]
 8017864:	4639      	mov	r1, r7
 8017866:	2200      	movs	r2, #0
 8017868:	4b8b      	ldr	r3, [pc, #556]	; (8017a98 <_dtoa_r+0x600>)
 801786a:	4630      	mov	r0, r6
 801786c:	f7e8 fedc 	bl	8000628 <__aeabi_dmul>
 8017870:	e9cd 0100 	strd	r0, r1, [sp]
 8017874:	9f02      	ldr	r7, [sp, #8]
 8017876:	3501      	adds	r5, #1
 8017878:	4628      	mov	r0, r5
 801787a:	f7e8 fe6b 	bl	8000554 <__aeabi_i2d>
 801787e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017882:	f7e8 fed1 	bl	8000628 <__aeabi_dmul>
 8017886:	2200      	movs	r2, #0
 8017888:	4b84      	ldr	r3, [pc, #528]	; (8017a9c <_dtoa_r+0x604>)
 801788a:	f7e8 fd17 	bl	80002bc <__adddf3>
 801788e:	4605      	mov	r5, r0
 8017890:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017894:	2f00      	cmp	r7, #0
 8017896:	d15d      	bne.n	8017954 <_dtoa_r+0x4bc>
 8017898:	2200      	movs	r2, #0
 801789a:	4b81      	ldr	r3, [pc, #516]	; (8017aa0 <_dtoa_r+0x608>)
 801789c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178a0:	f7e8 fd0a 	bl	80002b8 <__aeabi_dsub>
 80178a4:	462a      	mov	r2, r5
 80178a6:	4633      	mov	r3, r6
 80178a8:	e9cd 0100 	strd	r0, r1, [sp]
 80178ac:	f7e9 f94c 	bl	8000b48 <__aeabi_dcmpgt>
 80178b0:	2800      	cmp	r0, #0
 80178b2:	f040 8288 	bne.w	8017dc6 <_dtoa_r+0x92e>
 80178b6:	462a      	mov	r2, r5
 80178b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80178bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178c0:	f7e9 f924 	bl	8000b0c <__aeabi_dcmplt>
 80178c4:	2800      	cmp	r0, #0
 80178c6:	f040 827c 	bne.w	8017dc2 <_dtoa_r+0x92a>
 80178ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80178ce:	e9cd 2300 	strd	r2, r3, [sp]
 80178d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f2c0 8150 	blt.w	8017b7a <_dtoa_r+0x6e2>
 80178da:	f1ba 0f0e 	cmp.w	sl, #14
 80178de:	f300 814c 	bgt.w	8017b7a <_dtoa_r+0x6e2>
 80178e2:	4b6a      	ldr	r3, [pc, #424]	; (8017a8c <_dtoa_r+0x5f4>)
 80178e4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80178e8:	ed93 7b00 	vldr	d7, [r3]
 80178ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80178f4:	f280 80d8 	bge.w	8017aa8 <_dtoa_r+0x610>
 80178f8:	f1b9 0f00 	cmp.w	r9, #0
 80178fc:	f300 80d4 	bgt.w	8017aa8 <_dtoa_r+0x610>
 8017900:	f040 825e 	bne.w	8017dc0 <_dtoa_r+0x928>
 8017904:	2200      	movs	r2, #0
 8017906:	4b66      	ldr	r3, [pc, #408]	; (8017aa0 <_dtoa_r+0x608>)
 8017908:	ec51 0b17 	vmov	r0, r1, d7
 801790c:	f7e8 fe8c 	bl	8000628 <__aeabi_dmul>
 8017910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017914:	f7e9 f90e 	bl	8000b34 <__aeabi_dcmpge>
 8017918:	464f      	mov	r7, r9
 801791a:	464e      	mov	r6, r9
 801791c:	2800      	cmp	r0, #0
 801791e:	f040 8234 	bne.w	8017d8a <_dtoa_r+0x8f2>
 8017922:	2331      	movs	r3, #49	; 0x31
 8017924:	f10b 0501 	add.w	r5, fp, #1
 8017928:	f88b 3000 	strb.w	r3, [fp]
 801792c:	f10a 0a01 	add.w	sl, sl, #1
 8017930:	e22f      	b.n	8017d92 <_dtoa_r+0x8fa>
 8017932:	07f2      	lsls	r2, r6, #31
 8017934:	d505      	bpl.n	8017942 <_dtoa_r+0x4aa>
 8017936:	e9d7 2300 	ldrd	r2, r3, [r7]
 801793a:	f7e8 fe75 	bl	8000628 <__aeabi_dmul>
 801793e:	3501      	adds	r5, #1
 8017940:	2301      	movs	r3, #1
 8017942:	1076      	asrs	r6, r6, #1
 8017944:	3708      	adds	r7, #8
 8017946:	e772      	b.n	801782e <_dtoa_r+0x396>
 8017948:	2502      	movs	r5, #2
 801794a:	e774      	b.n	8017836 <_dtoa_r+0x39e>
 801794c:	f8cd a020 	str.w	sl, [sp, #32]
 8017950:	464f      	mov	r7, r9
 8017952:	e791      	b.n	8017878 <_dtoa_r+0x3e0>
 8017954:	4b4d      	ldr	r3, [pc, #308]	; (8017a8c <_dtoa_r+0x5f4>)
 8017956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801795a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017960:	2b00      	cmp	r3, #0
 8017962:	d047      	beq.n	80179f4 <_dtoa_r+0x55c>
 8017964:	4602      	mov	r2, r0
 8017966:	460b      	mov	r3, r1
 8017968:	2000      	movs	r0, #0
 801796a:	494e      	ldr	r1, [pc, #312]	; (8017aa4 <_dtoa_r+0x60c>)
 801796c:	f7e8 ff86 	bl	800087c <__aeabi_ddiv>
 8017970:	462a      	mov	r2, r5
 8017972:	4633      	mov	r3, r6
 8017974:	f7e8 fca0 	bl	80002b8 <__aeabi_dsub>
 8017978:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801797c:	465d      	mov	r5, fp
 801797e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017982:	f7e9 f901 	bl	8000b88 <__aeabi_d2iz>
 8017986:	4606      	mov	r6, r0
 8017988:	f7e8 fde4 	bl	8000554 <__aeabi_i2d>
 801798c:	4602      	mov	r2, r0
 801798e:	460b      	mov	r3, r1
 8017990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017994:	f7e8 fc90 	bl	80002b8 <__aeabi_dsub>
 8017998:	3630      	adds	r6, #48	; 0x30
 801799a:	f805 6b01 	strb.w	r6, [r5], #1
 801799e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179a2:	e9cd 0100 	strd	r0, r1, [sp]
 80179a6:	f7e9 f8b1 	bl	8000b0c <__aeabi_dcmplt>
 80179aa:	2800      	cmp	r0, #0
 80179ac:	d163      	bne.n	8017a76 <_dtoa_r+0x5de>
 80179ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179b2:	2000      	movs	r0, #0
 80179b4:	4937      	ldr	r1, [pc, #220]	; (8017a94 <_dtoa_r+0x5fc>)
 80179b6:	f7e8 fc7f 	bl	80002b8 <__aeabi_dsub>
 80179ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179be:	f7e9 f8a5 	bl	8000b0c <__aeabi_dcmplt>
 80179c2:	2800      	cmp	r0, #0
 80179c4:	f040 80b7 	bne.w	8017b36 <_dtoa_r+0x69e>
 80179c8:	eba5 030b 	sub.w	r3, r5, fp
 80179cc:	429f      	cmp	r7, r3
 80179ce:	f77f af7c 	ble.w	80178ca <_dtoa_r+0x432>
 80179d2:	2200      	movs	r2, #0
 80179d4:	4b30      	ldr	r3, [pc, #192]	; (8017a98 <_dtoa_r+0x600>)
 80179d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80179da:	f7e8 fe25 	bl	8000628 <__aeabi_dmul>
 80179de:	2200      	movs	r2, #0
 80179e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179e4:	4b2c      	ldr	r3, [pc, #176]	; (8017a98 <_dtoa_r+0x600>)
 80179e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179ea:	f7e8 fe1d 	bl	8000628 <__aeabi_dmul>
 80179ee:	e9cd 0100 	strd	r0, r1, [sp]
 80179f2:	e7c4      	b.n	801797e <_dtoa_r+0x4e6>
 80179f4:	462a      	mov	r2, r5
 80179f6:	4633      	mov	r3, r6
 80179f8:	f7e8 fe16 	bl	8000628 <__aeabi_dmul>
 80179fc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a00:	eb0b 0507 	add.w	r5, fp, r7
 8017a04:	465e      	mov	r6, fp
 8017a06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a0a:	f7e9 f8bd 	bl	8000b88 <__aeabi_d2iz>
 8017a0e:	4607      	mov	r7, r0
 8017a10:	f7e8 fda0 	bl	8000554 <__aeabi_i2d>
 8017a14:	3730      	adds	r7, #48	; 0x30
 8017a16:	4602      	mov	r2, r0
 8017a18:	460b      	mov	r3, r1
 8017a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a1e:	f7e8 fc4b 	bl	80002b8 <__aeabi_dsub>
 8017a22:	f806 7b01 	strb.w	r7, [r6], #1
 8017a26:	42ae      	cmp	r6, r5
 8017a28:	e9cd 0100 	strd	r0, r1, [sp]
 8017a2c:	f04f 0200 	mov.w	r2, #0
 8017a30:	d126      	bne.n	8017a80 <_dtoa_r+0x5e8>
 8017a32:	4b1c      	ldr	r3, [pc, #112]	; (8017aa4 <_dtoa_r+0x60c>)
 8017a34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a38:	f7e8 fc40 	bl	80002bc <__adddf3>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	460b      	mov	r3, r1
 8017a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a44:	f7e9 f880 	bl	8000b48 <__aeabi_dcmpgt>
 8017a48:	2800      	cmp	r0, #0
 8017a4a:	d174      	bne.n	8017b36 <_dtoa_r+0x69e>
 8017a4c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a50:	2000      	movs	r0, #0
 8017a52:	4914      	ldr	r1, [pc, #80]	; (8017aa4 <_dtoa_r+0x60c>)
 8017a54:	f7e8 fc30 	bl	80002b8 <__aeabi_dsub>
 8017a58:	4602      	mov	r2, r0
 8017a5a:	460b      	mov	r3, r1
 8017a5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a60:	f7e9 f854 	bl	8000b0c <__aeabi_dcmplt>
 8017a64:	2800      	cmp	r0, #0
 8017a66:	f43f af30 	beq.w	80178ca <_dtoa_r+0x432>
 8017a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017a6e:	2b30      	cmp	r3, #48	; 0x30
 8017a70:	f105 32ff 	add.w	r2, r5, #4294967295
 8017a74:	d002      	beq.n	8017a7c <_dtoa_r+0x5e4>
 8017a76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017a7a:	e04a      	b.n	8017b12 <_dtoa_r+0x67a>
 8017a7c:	4615      	mov	r5, r2
 8017a7e:	e7f4      	b.n	8017a6a <_dtoa_r+0x5d2>
 8017a80:	4b05      	ldr	r3, [pc, #20]	; (8017a98 <_dtoa_r+0x600>)
 8017a82:	f7e8 fdd1 	bl	8000628 <__aeabi_dmul>
 8017a86:	e9cd 0100 	strd	r0, r1, [sp]
 8017a8a:	e7bc      	b.n	8017a06 <_dtoa_r+0x56e>
 8017a8c:	0801a388 	.word	0x0801a388
 8017a90:	0801a360 	.word	0x0801a360
 8017a94:	3ff00000 	.word	0x3ff00000
 8017a98:	40240000 	.word	0x40240000
 8017a9c:	401c0000 	.word	0x401c0000
 8017aa0:	40140000 	.word	0x40140000
 8017aa4:	3fe00000 	.word	0x3fe00000
 8017aa8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017aac:	465d      	mov	r5, fp
 8017aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	4639      	mov	r1, r7
 8017ab6:	f7e8 fee1 	bl	800087c <__aeabi_ddiv>
 8017aba:	f7e9 f865 	bl	8000b88 <__aeabi_d2iz>
 8017abe:	4680      	mov	r8, r0
 8017ac0:	f7e8 fd48 	bl	8000554 <__aeabi_i2d>
 8017ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ac8:	f7e8 fdae 	bl	8000628 <__aeabi_dmul>
 8017acc:	4602      	mov	r2, r0
 8017ace:	460b      	mov	r3, r1
 8017ad0:	4630      	mov	r0, r6
 8017ad2:	4639      	mov	r1, r7
 8017ad4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017ad8:	f7e8 fbee 	bl	80002b8 <__aeabi_dsub>
 8017adc:	f805 6b01 	strb.w	r6, [r5], #1
 8017ae0:	eba5 060b 	sub.w	r6, r5, fp
 8017ae4:	45b1      	cmp	r9, r6
 8017ae6:	4602      	mov	r2, r0
 8017ae8:	460b      	mov	r3, r1
 8017aea:	d139      	bne.n	8017b60 <_dtoa_r+0x6c8>
 8017aec:	f7e8 fbe6 	bl	80002bc <__adddf3>
 8017af0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017af4:	4606      	mov	r6, r0
 8017af6:	460f      	mov	r7, r1
 8017af8:	f7e9 f826 	bl	8000b48 <__aeabi_dcmpgt>
 8017afc:	b9c8      	cbnz	r0, 8017b32 <_dtoa_r+0x69a>
 8017afe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b02:	4630      	mov	r0, r6
 8017b04:	4639      	mov	r1, r7
 8017b06:	f7e8 fff7 	bl	8000af8 <__aeabi_dcmpeq>
 8017b0a:	b110      	cbz	r0, 8017b12 <_dtoa_r+0x67a>
 8017b0c:	f018 0f01 	tst.w	r8, #1
 8017b10:	d10f      	bne.n	8017b32 <_dtoa_r+0x69a>
 8017b12:	9904      	ldr	r1, [sp, #16]
 8017b14:	4620      	mov	r0, r4
 8017b16:	f000 fe18 	bl	801874a <_Bfree>
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b1e:	702b      	strb	r3, [r5, #0]
 8017b20:	f10a 0301 	add.w	r3, sl, #1
 8017b24:	6013      	str	r3, [r2, #0]
 8017b26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	f000 8241 	beq.w	8017fb0 <_dtoa_r+0xb18>
 8017b2e:	601d      	str	r5, [r3, #0]
 8017b30:	e23e      	b.n	8017fb0 <_dtoa_r+0xb18>
 8017b32:	f8cd a020 	str.w	sl, [sp, #32]
 8017b36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017b3a:	2a39      	cmp	r2, #57	; 0x39
 8017b3c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017b40:	d108      	bne.n	8017b54 <_dtoa_r+0x6bc>
 8017b42:	459b      	cmp	fp, r3
 8017b44:	d10a      	bne.n	8017b5c <_dtoa_r+0x6c4>
 8017b46:	9b08      	ldr	r3, [sp, #32]
 8017b48:	3301      	adds	r3, #1
 8017b4a:	9308      	str	r3, [sp, #32]
 8017b4c:	2330      	movs	r3, #48	; 0x30
 8017b4e:	f88b 3000 	strb.w	r3, [fp]
 8017b52:	465b      	mov	r3, fp
 8017b54:	781a      	ldrb	r2, [r3, #0]
 8017b56:	3201      	adds	r2, #1
 8017b58:	701a      	strb	r2, [r3, #0]
 8017b5a:	e78c      	b.n	8017a76 <_dtoa_r+0x5de>
 8017b5c:	461d      	mov	r5, r3
 8017b5e:	e7ea      	b.n	8017b36 <_dtoa_r+0x69e>
 8017b60:	2200      	movs	r2, #0
 8017b62:	4b9b      	ldr	r3, [pc, #620]	; (8017dd0 <_dtoa_r+0x938>)
 8017b64:	f7e8 fd60 	bl	8000628 <__aeabi_dmul>
 8017b68:	2200      	movs	r2, #0
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	4606      	mov	r6, r0
 8017b6e:	460f      	mov	r7, r1
 8017b70:	f7e8 ffc2 	bl	8000af8 <__aeabi_dcmpeq>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d09a      	beq.n	8017aae <_dtoa_r+0x616>
 8017b78:	e7cb      	b.n	8017b12 <_dtoa_r+0x67a>
 8017b7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017b7c:	2a00      	cmp	r2, #0
 8017b7e:	f000 808b 	beq.w	8017c98 <_dtoa_r+0x800>
 8017b82:	9a06      	ldr	r2, [sp, #24]
 8017b84:	2a01      	cmp	r2, #1
 8017b86:	dc6e      	bgt.n	8017c66 <_dtoa_r+0x7ce>
 8017b88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017b8a:	2a00      	cmp	r2, #0
 8017b8c:	d067      	beq.n	8017c5e <_dtoa_r+0x7c6>
 8017b8e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017b92:	9f07      	ldr	r7, [sp, #28]
 8017b94:	9d05      	ldr	r5, [sp, #20]
 8017b96:	9a05      	ldr	r2, [sp, #20]
 8017b98:	2101      	movs	r1, #1
 8017b9a:	441a      	add	r2, r3
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	9205      	str	r2, [sp, #20]
 8017ba0:	4498      	add	r8, r3
 8017ba2:	f000 feb0 	bl	8018906 <__i2b>
 8017ba6:	4606      	mov	r6, r0
 8017ba8:	2d00      	cmp	r5, #0
 8017baa:	dd0c      	ble.n	8017bc6 <_dtoa_r+0x72e>
 8017bac:	f1b8 0f00 	cmp.w	r8, #0
 8017bb0:	dd09      	ble.n	8017bc6 <_dtoa_r+0x72e>
 8017bb2:	4545      	cmp	r5, r8
 8017bb4:	9a05      	ldr	r2, [sp, #20]
 8017bb6:	462b      	mov	r3, r5
 8017bb8:	bfa8      	it	ge
 8017bba:	4643      	movge	r3, r8
 8017bbc:	1ad2      	subs	r2, r2, r3
 8017bbe:	9205      	str	r2, [sp, #20]
 8017bc0:	1aed      	subs	r5, r5, r3
 8017bc2:	eba8 0803 	sub.w	r8, r8, r3
 8017bc6:	9b07      	ldr	r3, [sp, #28]
 8017bc8:	b1eb      	cbz	r3, 8017c06 <_dtoa_r+0x76e>
 8017bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d067      	beq.n	8017ca0 <_dtoa_r+0x808>
 8017bd0:	b18f      	cbz	r7, 8017bf6 <_dtoa_r+0x75e>
 8017bd2:	4631      	mov	r1, r6
 8017bd4:	463a      	mov	r2, r7
 8017bd6:	4620      	mov	r0, r4
 8017bd8:	f000 ff34 	bl	8018a44 <__pow5mult>
 8017bdc:	9a04      	ldr	r2, [sp, #16]
 8017bde:	4601      	mov	r1, r0
 8017be0:	4606      	mov	r6, r0
 8017be2:	4620      	mov	r0, r4
 8017be4:	f000 fe98 	bl	8018918 <__multiply>
 8017be8:	9904      	ldr	r1, [sp, #16]
 8017bea:	9008      	str	r0, [sp, #32]
 8017bec:	4620      	mov	r0, r4
 8017bee:	f000 fdac 	bl	801874a <_Bfree>
 8017bf2:	9b08      	ldr	r3, [sp, #32]
 8017bf4:	9304      	str	r3, [sp, #16]
 8017bf6:	9b07      	ldr	r3, [sp, #28]
 8017bf8:	1bda      	subs	r2, r3, r7
 8017bfa:	d004      	beq.n	8017c06 <_dtoa_r+0x76e>
 8017bfc:	9904      	ldr	r1, [sp, #16]
 8017bfe:	4620      	mov	r0, r4
 8017c00:	f000 ff20 	bl	8018a44 <__pow5mult>
 8017c04:	9004      	str	r0, [sp, #16]
 8017c06:	2101      	movs	r1, #1
 8017c08:	4620      	mov	r0, r4
 8017c0a:	f000 fe7c 	bl	8018906 <__i2b>
 8017c0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c10:	4607      	mov	r7, r0
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f000 81d0 	beq.w	8017fb8 <_dtoa_r+0xb20>
 8017c18:	461a      	mov	r2, r3
 8017c1a:	4601      	mov	r1, r0
 8017c1c:	4620      	mov	r0, r4
 8017c1e:	f000 ff11 	bl	8018a44 <__pow5mult>
 8017c22:	9b06      	ldr	r3, [sp, #24]
 8017c24:	2b01      	cmp	r3, #1
 8017c26:	4607      	mov	r7, r0
 8017c28:	dc40      	bgt.n	8017cac <_dtoa_r+0x814>
 8017c2a:	9b00      	ldr	r3, [sp, #0]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d139      	bne.n	8017ca4 <_dtoa_r+0x80c>
 8017c30:	9b01      	ldr	r3, [sp, #4]
 8017c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d136      	bne.n	8017ca8 <_dtoa_r+0x810>
 8017c3a:	9b01      	ldr	r3, [sp, #4]
 8017c3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c40:	0d1b      	lsrs	r3, r3, #20
 8017c42:	051b      	lsls	r3, r3, #20
 8017c44:	b12b      	cbz	r3, 8017c52 <_dtoa_r+0x7ba>
 8017c46:	9b05      	ldr	r3, [sp, #20]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	9305      	str	r3, [sp, #20]
 8017c4c:	f108 0801 	add.w	r8, r8, #1
 8017c50:	2301      	movs	r3, #1
 8017c52:	9307      	str	r3, [sp, #28]
 8017c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d12a      	bne.n	8017cb0 <_dtoa_r+0x818>
 8017c5a:	2001      	movs	r0, #1
 8017c5c:	e030      	b.n	8017cc0 <_dtoa_r+0x828>
 8017c5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c60:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017c64:	e795      	b.n	8017b92 <_dtoa_r+0x6fa>
 8017c66:	9b07      	ldr	r3, [sp, #28]
 8017c68:	f109 37ff 	add.w	r7, r9, #4294967295
 8017c6c:	42bb      	cmp	r3, r7
 8017c6e:	bfbf      	itttt	lt
 8017c70:	9b07      	ldrlt	r3, [sp, #28]
 8017c72:	9707      	strlt	r7, [sp, #28]
 8017c74:	1afa      	sublt	r2, r7, r3
 8017c76:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017c78:	bfbb      	ittet	lt
 8017c7a:	189b      	addlt	r3, r3, r2
 8017c7c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017c7e:	1bdf      	subge	r7, r3, r7
 8017c80:	2700      	movlt	r7, #0
 8017c82:	f1b9 0f00 	cmp.w	r9, #0
 8017c86:	bfb5      	itete	lt
 8017c88:	9b05      	ldrlt	r3, [sp, #20]
 8017c8a:	9d05      	ldrge	r5, [sp, #20]
 8017c8c:	eba3 0509 	sublt.w	r5, r3, r9
 8017c90:	464b      	movge	r3, r9
 8017c92:	bfb8      	it	lt
 8017c94:	2300      	movlt	r3, #0
 8017c96:	e77e      	b.n	8017b96 <_dtoa_r+0x6fe>
 8017c98:	9f07      	ldr	r7, [sp, #28]
 8017c9a:	9d05      	ldr	r5, [sp, #20]
 8017c9c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017c9e:	e783      	b.n	8017ba8 <_dtoa_r+0x710>
 8017ca0:	9a07      	ldr	r2, [sp, #28]
 8017ca2:	e7ab      	b.n	8017bfc <_dtoa_r+0x764>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	e7d4      	b.n	8017c52 <_dtoa_r+0x7ba>
 8017ca8:	9b00      	ldr	r3, [sp, #0]
 8017caa:	e7d2      	b.n	8017c52 <_dtoa_r+0x7ba>
 8017cac:	2300      	movs	r3, #0
 8017cae:	9307      	str	r3, [sp, #28]
 8017cb0:	693b      	ldr	r3, [r7, #16]
 8017cb2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017cb6:	6918      	ldr	r0, [r3, #16]
 8017cb8:	f000 fdd7 	bl	801886a <__hi0bits>
 8017cbc:	f1c0 0020 	rsb	r0, r0, #32
 8017cc0:	4440      	add	r0, r8
 8017cc2:	f010 001f 	ands.w	r0, r0, #31
 8017cc6:	d047      	beq.n	8017d58 <_dtoa_r+0x8c0>
 8017cc8:	f1c0 0320 	rsb	r3, r0, #32
 8017ccc:	2b04      	cmp	r3, #4
 8017cce:	dd3b      	ble.n	8017d48 <_dtoa_r+0x8b0>
 8017cd0:	9b05      	ldr	r3, [sp, #20]
 8017cd2:	f1c0 001c 	rsb	r0, r0, #28
 8017cd6:	4403      	add	r3, r0
 8017cd8:	9305      	str	r3, [sp, #20]
 8017cda:	4405      	add	r5, r0
 8017cdc:	4480      	add	r8, r0
 8017cde:	9b05      	ldr	r3, [sp, #20]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	dd05      	ble.n	8017cf0 <_dtoa_r+0x858>
 8017ce4:	461a      	mov	r2, r3
 8017ce6:	9904      	ldr	r1, [sp, #16]
 8017ce8:	4620      	mov	r0, r4
 8017cea:	f000 fef9 	bl	8018ae0 <__lshift>
 8017cee:	9004      	str	r0, [sp, #16]
 8017cf0:	f1b8 0f00 	cmp.w	r8, #0
 8017cf4:	dd05      	ble.n	8017d02 <_dtoa_r+0x86a>
 8017cf6:	4639      	mov	r1, r7
 8017cf8:	4642      	mov	r2, r8
 8017cfa:	4620      	mov	r0, r4
 8017cfc:	f000 fef0 	bl	8018ae0 <__lshift>
 8017d00:	4607      	mov	r7, r0
 8017d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d04:	b353      	cbz	r3, 8017d5c <_dtoa_r+0x8c4>
 8017d06:	4639      	mov	r1, r7
 8017d08:	9804      	ldr	r0, [sp, #16]
 8017d0a:	f000 ff3d 	bl	8018b88 <__mcmp>
 8017d0e:	2800      	cmp	r0, #0
 8017d10:	da24      	bge.n	8017d5c <_dtoa_r+0x8c4>
 8017d12:	2300      	movs	r3, #0
 8017d14:	220a      	movs	r2, #10
 8017d16:	9904      	ldr	r1, [sp, #16]
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f000 fd2d 	bl	8018778 <__multadd>
 8017d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d20:	9004      	str	r0, [sp, #16]
 8017d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	f000 814d 	beq.w	8017fc6 <_dtoa_r+0xb2e>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	4631      	mov	r1, r6
 8017d30:	220a      	movs	r2, #10
 8017d32:	4620      	mov	r0, r4
 8017d34:	f000 fd20 	bl	8018778 <__multadd>
 8017d38:	9b02      	ldr	r3, [sp, #8]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	4606      	mov	r6, r0
 8017d3e:	dc4f      	bgt.n	8017de0 <_dtoa_r+0x948>
 8017d40:	9b06      	ldr	r3, [sp, #24]
 8017d42:	2b02      	cmp	r3, #2
 8017d44:	dd4c      	ble.n	8017de0 <_dtoa_r+0x948>
 8017d46:	e011      	b.n	8017d6c <_dtoa_r+0x8d4>
 8017d48:	d0c9      	beq.n	8017cde <_dtoa_r+0x846>
 8017d4a:	9a05      	ldr	r2, [sp, #20]
 8017d4c:	331c      	adds	r3, #28
 8017d4e:	441a      	add	r2, r3
 8017d50:	9205      	str	r2, [sp, #20]
 8017d52:	441d      	add	r5, r3
 8017d54:	4498      	add	r8, r3
 8017d56:	e7c2      	b.n	8017cde <_dtoa_r+0x846>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	e7f6      	b.n	8017d4a <_dtoa_r+0x8b2>
 8017d5c:	f1b9 0f00 	cmp.w	r9, #0
 8017d60:	dc38      	bgt.n	8017dd4 <_dtoa_r+0x93c>
 8017d62:	9b06      	ldr	r3, [sp, #24]
 8017d64:	2b02      	cmp	r3, #2
 8017d66:	dd35      	ble.n	8017dd4 <_dtoa_r+0x93c>
 8017d68:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d6c:	9b02      	ldr	r3, [sp, #8]
 8017d6e:	b963      	cbnz	r3, 8017d8a <_dtoa_r+0x8f2>
 8017d70:	4639      	mov	r1, r7
 8017d72:	2205      	movs	r2, #5
 8017d74:	4620      	mov	r0, r4
 8017d76:	f000 fcff 	bl	8018778 <__multadd>
 8017d7a:	4601      	mov	r1, r0
 8017d7c:	4607      	mov	r7, r0
 8017d7e:	9804      	ldr	r0, [sp, #16]
 8017d80:	f000 ff02 	bl	8018b88 <__mcmp>
 8017d84:	2800      	cmp	r0, #0
 8017d86:	f73f adcc 	bgt.w	8017922 <_dtoa_r+0x48a>
 8017d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d8c:	465d      	mov	r5, fp
 8017d8e:	ea6f 0a03 	mvn.w	sl, r3
 8017d92:	f04f 0900 	mov.w	r9, #0
 8017d96:	4639      	mov	r1, r7
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f000 fcd6 	bl	801874a <_Bfree>
 8017d9e:	2e00      	cmp	r6, #0
 8017da0:	f43f aeb7 	beq.w	8017b12 <_dtoa_r+0x67a>
 8017da4:	f1b9 0f00 	cmp.w	r9, #0
 8017da8:	d005      	beq.n	8017db6 <_dtoa_r+0x91e>
 8017daa:	45b1      	cmp	r9, r6
 8017dac:	d003      	beq.n	8017db6 <_dtoa_r+0x91e>
 8017dae:	4649      	mov	r1, r9
 8017db0:	4620      	mov	r0, r4
 8017db2:	f000 fcca 	bl	801874a <_Bfree>
 8017db6:	4631      	mov	r1, r6
 8017db8:	4620      	mov	r0, r4
 8017dba:	f000 fcc6 	bl	801874a <_Bfree>
 8017dbe:	e6a8      	b.n	8017b12 <_dtoa_r+0x67a>
 8017dc0:	2700      	movs	r7, #0
 8017dc2:	463e      	mov	r6, r7
 8017dc4:	e7e1      	b.n	8017d8a <_dtoa_r+0x8f2>
 8017dc6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017dca:	463e      	mov	r6, r7
 8017dcc:	e5a9      	b.n	8017922 <_dtoa_r+0x48a>
 8017dce:	bf00      	nop
 8017dd0:	40240000 	.word	0x40240000
 8017dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dd6:	f8cd 9008 	str.w	r9, [sp, #8]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	f000 80fa 	beq.w	8017fd4 <_dtoa_r+0xb3c>
 8017de0:	2d00      	cmp	r5, #0
 8017de2:	dd05      	ble.n	8017df0 <_dtoa_r+0x958>
 8017de4:	4631      	mov	r1, r6
 8017de6:	462a      	mov	r2, r5
 8017de8:	4620      	mov	r0, r4
 8017dea:	f000 fe79 	bl	8018ae0 <__lshift>
 8017dee:	4606      	mov	r6, r0
 8017df0:	9b07      	ldr	r3, [sp, #28]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d04c      	beq.n	8017e90 <_dtoa_r+0x9f8>
 8017df6:	6871      	ldr	r1, [r6, #4]
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f000 fc72 	bl	80186e2 <_Balloc>
 8017dfe:	6932      	ldr	r2, [r6, #16]
 8017e00:	3202      	adds	r2, #2
 8017e02:	4605      	mov	r5, r0
 8017e04:	0092      	lsls	r2, r2, #2
 8017e06:	f106 010c 	add.w	r1, r6, #12
 8017e0a:	300c      	adds	r0, #12
 8017e0c:	f000 fc5e 	bl	80186cc <memcpy>
 8017e10:	2201      	movs	r2, #1
 8017e12:	4629      	mov	r1, r5
 8017e14:	4620      	mov	r0, r4
 8017e16:	f000 fe63 	bl	8018ae0 <__lshift>
 8017e1a:	9b00      	ldr	r3, [sp, #0]
 8017e1c:	f8cd b014 	str.w	fp, [sp, #20]
 8017e20:	f003 0301 	and.w	r3, r3, #1
 8017e24:	46b1      	mov	r9, r6
 8017e26:	9307      	str	r3, [sp, #28]
 8017e28:	4606      	mov	r6, r0
 8017e2a:	4639      	mov	r1, r7
 8017e2c:	9804      	ldr	r0, [sp, #16]
 8017e2e:	f7ff faa5 	bl	801737c <quorem>
 8017e32:	4649      	mov	r1, r9
 8017e34:	4605      	mov	r5, r0
 8017e36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017e3a:	9804      	ldr	r0, [sp, #16]
 8017e3c:	f000 fea4 	bl	8018b88 <__mcmp>
 8017e40:	4632      	mov	r2, r6
 8017e42:	9000      	str	r0, [sp, #0]
 8017e44:	4639      	mov	r1, r7
 8017e46:	4620      	mov	r0, r4
 8017e48:	f000 feb8 	bl	8018bbc <__mdiff>
 8017e4c:	68c3      	ldr	r3, [r0, #12]
 8017e4e:	4602      	mov	r2, r0
 8017e50:	bb03      	cbnz	r3, 8017e94 <_dtoa_r+0x9fc>
 8017e52:	4601      	mov	r1, r0
 8017e54:	9008      	str	r0, [sp, #32]
 8017e56:	9804      	ldr	r0, [sp, #16]
 8017e58:	f000 fe96 	bl	8018b88 <__mcmp>
 8017e5c:	9a08      	ldr	r2, [sp, #32]
 8017e5e:	4603      	mov	r3, r0
 8017e60:	4611      	mov	r1, r2
 8017e62:	4620      	mov	r0, r4
 8017e64:	9308      	str	r3, [sp, #32]
 8017e66:	f000 fc70 	bl	801874a <_Bfree>
 8017e6a:	9b08      	ldr	r3, [sp, #32]
 8017e6c:	b9a3      	cbnz	r3, 8017e98 <_dtoa_r+0xa00>
 8017e6e:	9a06      	ldr	r2, [sp, #24]
 8017e70:	b992      	cbnz	r2, 8017e98 <_dtoa_r+0xa00>
 8017e72:	9a07      	ldr	r2, [sp, #28]
 8017e74:	b982      	cbnz	r2, 8017e98 <_dtoa_r+0xa00>
 8017e76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e7a:	d029      	beq.n	8017ed0 <_dtoa_r+0xa38>
 8017e7c:	9b00      	ldr	r3, [sp, #0]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	dd01      	ble.n	8017e86 <_dtoa_r+0x9ee>
 8017e82:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017e86:	9b05      	ldr	r3, [sp, #20]
 8017e88:	1c5d      	adds	r5, r3, #1
 8017e8a:	f883 8000 	strb.w	r8, [r3]
 8017e8e:	e782      	b.n	8017d96 <_dtoa_r+0x8fe>
 8017e90:	4630      	mov	r0, r6
 8017e92:	e7c2      	b.n	8017e1a <_dtoa_r+0x982>
 8017e94:	2301      	movs	r3, #1
 8017e96:	e7e3      	b.n	8017e60 <_dtoa_r+0x9c8>
 8017e98:	9a00      	ldr	r2, [sp, #0]
 8017e9a:	2a00      	cmp	r2, #0
 8017e9c:	db04      	blt.n	8017ea8 <_dtoa_r+0xa10>
 8017e9e:	d125      	bne.n	8017eec <_dtoa_r+0xa54>
 8017ea0:	9a06      	ldr	r2, [sp, #24]
 8017ea2:	bb1a      	cbnz	r2, 8017eec <_dtoa_r+0xa54>
 8017ea4:	9a07      	ldr	r2, [sp, #28]
 8017ea6:	bb0a      	cbnz	r2, 8017eec <_dtoa_r+0xa54>
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	ddec      	ble.n	8017e86 <_dtoa_r+0x9ee>
 8017eac:	2201      	movs	r2, #1
 8017eae:	9904      	ldr	r1, [sp, #16]
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	f000 fe15 	bl	8018ae0 <__lshift>
 8017eb6:	4639      	mov	r1, r7
 8017eb8:	9004      	str	r0, [sp, #16]
 8017eba:	f000 fe65 	bl	8018b88 <__mcmp>
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	dc03      	bgt.n	8017eca <_dtoa_r+0xa32>
 8017ec2:	d1e0      	bne.n	8017e86 <_dtoa_r+0x9ee>
 8017ec4:	f018 0f01 	tst.w	r8, #1
 8017ec8:	d0dd      	beq.n	8017e86 <_dtoa_r+0x9ee>
 8017eca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ece:	d1d8      	bne.n	8017e82 <_dtoa_r+0x9ea>
 8017ed0:	9b05      	ldr	r3, [sp, #20]
 8017ed2:	9a05      	ldr	r2, [sp, #20]
 8017ed4:	1c5d      	adds	r5, r3, #1
 8017ed6:	2339      	movs	r3, #57	; 0x39
 8017ed8:	7013      	strb	r3, [r2, #0]
 8017eda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ede:	2b39      	cmp	r3, #57	; 0x39
 8017ee0:	f105 32ff 	add.w	r2, r5, #4294967295
 8017ee4:	d04f      	beq.n	8017f86 <_dtoa_r+0xaee>
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	7013      	strb	r3, [r2, #0]
 8017eea:	e754      	b.n	8017d96 <_dtoa_r+0x8fe>
 8017eec:	9a05      	ldr	r2, [sp, #20]
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f102 0501 	add.w	r5, r2, #1
 8017ef4:	dd06      	ble.n	8017f04 <_dtoa_r+0xa6c>
 8017ef6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017efa:	d0e9      	beq.n	8017ed0 <_dtoa_r+0xa38>
 8017efc:	f108 0801 	add.w	r8, r8, #1
 8017f00:	9b05      	ldr	r3, [sp, #20]
 8017f02:	e7c2      	b.n	8017e8a <_dtoa_r+0x9f2>
 8017f04:	9a02      	ldr	r2, [sp, #8]
 8017f06:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017f0a:	eba5 030b 	sub.w	r3, r5, fp
 8017f0e:	4293      	cmp	r3, r2
 8017f10:	d021      	beq.n	8017f56 <_dtoa_r+0xabe>
 8017f12:	2300      	movs	r3, #0
 8017f14:	220a      	movs	r2, #10
 8017f16:	9904      	ldr	r1, [sp, #16]
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f000 fc2d 	bl	8018778 <__multadd>
 8017f1e:	45b1      	cmp	r9, r6
 8017f20:	9004      	str	r0, [sp, #16]
 8017f22:	f04f 0300 	mov.w	r3, #0
 8017f26:	f04f 020a 	mov.w	r2, #10
 8017f2a:	4649      	mov	r1, r9
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	d105      	bne.n	8017f3c <_dtoa_r+0xaa4>
 8017f30:	f000 fc22 	bl	8018778 <__multadd>
 8017f34:	4681      	mov	r9, r0
 8017f36:	4606      	mov	r6, r0
 8017f38:	9505      	str	r5, [sp, #20]
 8017f3a:	e776      	b.n	8017e2a <_dtoa_r+0x992>
 8017f3c:	f000 fc1c 	bl	8018778 <__multadd>
 8017f40:	4631      	mov	r1, r6
 8017f42:	4681      	mov	r9, r0
 8017f44:	2300      	movs	r3, #0
 8017f46:	220a      	movs	r2, #10
 8017f48:	4620      	mov	r0, r4
 8017f4a:	f000 fc15 	bl	8018778 <__multadd>
 8017f4e:	4606      	mov	r6, r0
 8017f50:	e7f2      	b.n	8017f38 <_dtoa_r+0xaa0>
 8017f52:	f04f 0900 	mov.w	r9, #0
 8017f56:	2201      	movs	r2, #1
 8017f58:	9904      	ldr	r1, [sp, #16]
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f000 fdc0 	bl	8018ae0 <__lshift>
 8017f60:	4639      	mov	r1, r7
 8017f62:	9004      	str	r0, [sp, #16]
 8017f64:	f000 fe10 	bl	8018b88 <__mcmp>
 8017f68:	2800      	cmp	r0, #0
 8017f6a:	dcb6      	bgt.n	8017eda <_dtoa_r+0xa42>
 8017f6c:	d102      	bne.n	8017f74 <_dtoa_r+0xadc>
 8017f6e:	f018 0f01 	tst.w	r8, #1
 8017f72:	d1b2      	bne.n	8017eda <_dtoa_r+0xa42>
 8017f74:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f78:	2b30      	cmp	r3, #48	; 0x30
 8017f7a:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f7e:	f47f af0a 	bne.w	8017d96 <_dtoa_r+0x8fe>
 8017f82:	4615      	mov	r5, r2
 8017f84:	e7f6      	b.n	8017f74 <_dtoa_r+0xadc>
 8017f86:	4593      	cmp	fp, r2
 8017f88:	d105      	bne.n	8017f96 <_dtoa_r+0xafe>
 8017f8a:	2331      	movs	r3, #49	; 0x31
 8017f8c:	f10a 0a01 	add.w	sl, sl, #1
 8017f90:	f88b 3000 	strb.w	r3, [fp]
 8017f94:	e6ff      	b.n	8017d96 <_dtoa_r+0x8fe>
 8017f96:	4615      	mov	r5, r2
 8017f98:	e79f      	b.n	8017eda <_dtoa_r+0xa42>
 8017f9a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018000 <_dtoa_r+0xb68>
 8017f9e:	e007      	b.n	8017fb0 <_dtoa_r+0xb18>
 8017fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fa2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8018004 <_dtoa_r+0xb6c>
 8017fa6:	b11b      	cbz	r3, 8017fb0 <_dtoa_r+0xb18>
 8017fa8:	f10b 0308 	add.w	r3, fp, #8
 8017fac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017fae:	6013      	str	r3, [r2, #0]
 8017fb0:	4658      	mov	r0, fp
 8017fb2:	b017      	add	sp, #92	; 0x5c
 8017fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fb8:	9b06      	ldr	r3, [sp, #24]
 8017fba:	2b01      	cmp	r3, #1
 8017fbc:	f77f ae35 	ble.w	8017c2a <_dtoa_r+0x792>
 8017fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fc2:	9307      	str	r3, [sp, #28]
 8017fc4:	e649      	b.n	8017c5a <_dtoa_r+0x7c2>
 8017fc6:	9b02      	ldr	r3, [sp, #8]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	dc03      	bgt.n	8017fd4 <_dtoa_r+0xb3c>
 8017fcc:	9b06      	ldr	r3, [sp, #24]
 8017fce:	2b02      	cmp	r3, #2
 8017fd0:	f73f aecc 	bgt.w	8017d6c <_dtoa_r+0x8d4>
 8017fd4:	465d      	mov	r5, fp
 8017fd6:	4639      	mov	r1, r7
 8017fd8:	9804      	ldr	r0, [sp, #16]
 8017fda:	f7ff f9cf 	bl	801737c <quorem>
 8017fde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017fe2:	f805 8b01 	strb.w	r8, [r5], #1
 8017fe6:	9a02      	ldr	r2, [sp, #8]
 8017fe8:	eba5 030b 	sub.w	r3, r5, fp
 8017fec:	429a      	cmp	r2, r3
 8017fee:	ddb0      	ble.n	8017f52 <_dtoa_r+0xaba>
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	220a      	movs	r2, #10
 8017ff4:	9904      	ldr	r1, [sp, #16]
 8017ff6:	4620      	mov	r0, r4
 8017ff8:	f000 fbbe 	bl	8018778 <__multadd>
 8017ffc:	9004      	str	r0, [sp, #16]
 8017ffe:	e7ea      	b.n	8017fd6 <_dtoa_r+0xb3e>
 8018000:	0801a483 	.word	0x0801a483
 8018004:	0801a348 	.word	0x0801a348

08018008 <rshift>:
 8018008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801800a:	6906      	ldr	r6, [r0, #16]
 801800c:	114b      	asrs	r3, r1, #5
 801800e:	429e      	cmp	r6, r3
 8018010:	f100 0414 	add.w	r4, r0, #20
 8018014:	dd30      	ble.n	8018078 <rshift+0x70>
 8018016:	f011 011f 	ands.w	r1, r1, #31
 801801a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801801e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8018022:	d108      	bne.n	8018036 <rshift+0x2e>
 8018024:	4621      	mov	r1, r4
 8018026:	42b2      	cmp	r2, r6
 8018028:	460b      	mov	r3, r1
 801802a:	d211      	bcs.n	8018050 <rshift+0x48>
 801802c:	f852 3b04 	ldr.w	r3, [r2], #4
 8018030:	f841 3b04 	str.w	r3, [r1], #4
 8018034:	e7f7      	b.n	8018026 <rshift+0x1e>
 8018036:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801803a:	f1c1 0c20 	rsb	ip, r1, #32
 801803e:	40cd      	lsrs	r5, r1
 8018040:	3204      	adds	r2, #4
 8018042:	4623      	mov	r3, r4
 8018044:	42b2      	cmp	r2, r6
 8018046:	4617      	mov	r7, r2
 8018048:	d30c      	bcc.n	8018064 <rshift+0x5c>
 801804a:	601d      	str	r5, [r3, #0]
 801804c:	b105      	cbz	r5, 8018050 <rshift+0x48>
 801804e:	3304      	adds	r3, #4
 8018050:	1b1a      	subs	r2, r3, r4
 8018052:	42a3      	cmp	r3, r4
 8018054:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018058:	bf08      	it	eq
 801805a:	2300      	moveq	r3, #0
 801805c:	6102      	str	r2, [r0, #16]
 801805e:	bf08      	it	eq
 8018060:	6143      	streq	r3, [r0, #20]
 8018062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018064:	683f      	ldr	r7, [r7, #0]
 8018066:	fa07 f70c 	lsl.w	r7, r7, ip
 801806a:	433d      	orrs	r5, r7
 801806c:	f843 5b04 	str.w	r5, [r3], #4
 8018070:	f852 5b04 	ldr.w	r5, [r2], #4
 8018074:	40cd      	lsrs	r5, r1
 8018076:	e7e5      	b.n	8018044 <rshift+0x3c>
 8018078:	4623      	mov	r3, r4
 801807a:	e7e9      	b.n	8018050 <rshift+0x48>

0801807c <__hexdig_fun>:
 801807c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018080:	2b09      	cmp	r3, #9
 8018082:	d802      	bhi.n	801808a <__hexdig_fun+0xe>
 8018084:	3820      	subs	r0, #32
 8018086:	b2c0      	uxtb	r0, r0
 8018088:	4770      	bx	lr
 801808a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801808e:	2b05      	cmp	r3, #5
 8018090:	d801      	bhi.n	8018096 <__hexdig_fun+0x1a>
 8018092:	3847      	subs	r0, #71	; 0x47
 8018094:	e7f7      	b.n	8018086 <__hexdig_fun+0xa>
 8018096:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801809a:	2b05      	cmp	r3, #5
 801809c:	d801      	bhi.n	80180a2 <__hexdig_fun+0x26>
 801809e:	3827      	subs	r0, #39	; 0x27
 80180a0:	e7f1      	b.n	8018086 <__hexdig_fun+0xa>
 80180a2:	2000      	movs	r0, #0
 80180a4:	4770      	bx	lr

080180a6 <__gethex>:
 80180a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180aa:	b08b      	sub	sp, #44	; 0x2c
 80180ac:	468a      	mov	sl, r1
 80180ae:	9002      	str	r0, [sp, #8]
 80180b0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80180b2:	9306      	str	r3, [sp, #24]
 80180b4:	4690      	mov	r8, r2
 80180b6:	f000 fadf 	bl	8018678 <__localeconv_l>
 80180ba:	6803      	ldr	r3, [r0, #0]
 80180bc:	9303      	str	r3, [sp, #12]
 80180be:	4618      	mov	r0, r3
 80180c0:	f7e8 f89e 	bl	8000200 <strlen>
 80180c4:	9b03      	ldr	r3, [sp, #12]
 80180c6:	9001      	str	r0, [sp, #4]
 80180c8:	4403      	add	r3, r0
 80180ca:	f04f 0b00 	mov.w	fp, #0
 80180ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80180d2:	9307      	str	r3, [sp, #28]
 80180d4:	f8da 3000 	ldr.w	r3, [sl]
 80180d8:	3302      	adds	r3, #2
 80180da:	461f      	mov	r7, r3
 80180dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80180e0:	2830      	cmp	r0, #48	; 0x30
 80180e2:	d06c      	beq.n	80181be <__gethex+0x118>
 80180e4:	f7ff ffca 	bl	801807c <__hexdig_fun>
 80180e8:	4604      	mov	r4, r0
 80180ea:	2800      	cmp	r0, #0
 80180ec:	d16a      	bne.n	80181c4 <__gethex+0x11e>
 80180ee:	9a01      	ldr	r2, [sp, #4]
 80180f0:	9903      	ldr	r1, [sp, #12]
 80180f2:	4638      	mov	r0, r7
 80180f4:	f001 fc40 	bl	8019978 <strncmp>
 80180f8:	2800      	cmp	r0, #0
 80180fa:	d166      	bne.n	80181ca <__gethex+0x124>
 80180fc:	9b01      	ldr	r3, [sp, #4]
 80180fe:	5cf8      	ldrb	r0, [r7, r3]
 8018100:	18fe      	adds	r6, r7, r3
 8018102:	f7ff ffbb 	bl	801807c <__hexdig_fun>
 8018106:	2800      	cmp	r0, #0
 8018108:	d062      	beq.n	80181d0 <__gethex+0x12a>
 801810a:	4633      	mov	r3, r6
 801810c:	7818      	ldrb	r0, [r3, #0]
 801810e:	2830      	cmp	r0, #48	; 0x30
 8018110:	461f      	mov	r7, r3
 8018112:	f103 0301 	add.w	r3, r3, #1
 8018116:	d0f9      	beq.n	801810c <__gethex+0x66>
 8018118:	f7ff ffb0 	bl	801807c <__hexdig_fun>
 801811c:	fab0 f580 	clz	r5, r0
 8018120:	096d      	lsrs	r5, r5, #5
 8018122:	4634      	mov	r4, r6
 8018124:	f04f 0b01 	mov.w	fp, #1
 8018128:	463a      	mov	r2, r7
 801812a:	4616      	mov	r6, r2
 801812c:	3201      	adds	r2, #1
 801812e:	7830      	ldrb	r0, [r6, #0]
 8018130:	f7ff ffa4 	bl	801807c <__hexdig_fun>
 8018134:	2800      	cmp	r0, #0
 8018136:	d1f8      	bne.n	801812a <__gethex+0x84>
 8018138:	9a01      	ldr	r2, [sp, #4]
 801813a:	9903      	ldr	r1, [sp, #12]
 801813c:	4630      	mov	r0, r6
 801813e:	f001 fc1b 	bl	8019978 <strncmp>
 8018142:	b950      	cbnz	r0, 801815a <__gethex+0xb4>
 8018144:	b954      	cbnz	r4, 801815c <__gethex+0xb6>
 8018146:	9b01      	ldr	r3, [sp, #4]
 8018148:	18f4      	adds	r4, r6, r3
 801814a:	4622      	mov	r2, r4
 801814c:	4616      	mov	r6, r2
 801814e:	3201      	adds	r2, #1
 8018150:	7830      	ldrb	r0, [r6, #0]
 8018152:	f7ff ff93 	bl	801807c <__hexdig_fun>
 8018156:	2800      	cmp	r0, #0
 8018158:	d1f8      	bne.n	801814c <__gethex+0xa6>
 801815a:	b10c      	cbz	r4, 8018160 <__gethex+0xba>
 801815c:	1ba4      	subs	r4, r4, r6
 801815e:	00a4      	lsls	r4, r4, #2
 8018160:	7833      	ldrb	r3, [r6, #0]
 8018162:	2b50      	cmp	r3, #80	; 0x50
 8018164:	d001      	beq.n	801816a <__gethex+0xc4>
 8018166:	2b70      	cmp	r3, #112	; 0x70
 8018168:	d140      	bne.n	80181ec <__gethex+0x146>
 801816a:	7873      	ldrb	r3, [r6, #1]
 801816c:	2b2b      	cmp	r3, #43	; 0x2b
 801816e:	d031      	beq.n	80181d4 <__gethex+0x12e>
 8018170:	2b2d      	cmp	r3, #45	; 0x2d
 8018172:	d033      	beq.n	80181dc <__gethex+0x136>
 8018174:	1c71      	adds	r1, r6, #1
 8018176:	f04f 0900 	mov.w	r9, #0
 801817a:	7808      	ldrb	r0, [r1, #0]
 801817c:	f7ff ff7e 	bl	801807c <__hexdig_fun>
 8018180:	1e43      	subs	r3, r0, #1
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b18      	cmp	r3, #24
 8018186:	d831      	bhi.n	80181ec <__gethex+0x146>
 8018188:	f1a0 0210 	sub.w	r2, r0, #16
 801818c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018190:	f7ff ff74 	bl	801807c <__hexdig_fun>
 8018194:	1e43      	subs	r3, r0, #1
 8018196:	b2db      	uxtb	r3, r3
 8018198:	2b18      	cmp	r3, #24
 801819a:	d922      	bls.n	80181e2 <__gethex+0x13c>
 801819c:	f1b9 0f00 	cmp.w	r9, #0
 80181a0:	d000      	beq.n	80181a4 <__gethex+0xfe>
 80181a2:	4252      	negs	r2, r2
 80181a4:	4414      	add	r4, r2
 80181a6:	f8ca 1000 	str.w	r1, [sl]
 80181aa:	b30d      	cbz	r5, 80181f0 <__gethex+0x14a>
 80181ac:	f1bb 0f00 	cmp.w	fp, #0
 80181b0:	bf0c      	ite	eq
 80181b2:	2706      	moveq	r7, #6
 80181b4:	2700      	movne	r7, #0
 80181b6:	4638      	mov	r0, r7
 80181b8:	b00b      	add	sp, #44	; 0x2c
 80181ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181be:	f10b 0b01 	add.w	fp, fp, #1
 80181c2:	e78a      	b.n	80180da <__gethex+0x34>
 80181c4:	2500      	movs	r5, #0
 80181c6:	462c      	mov	r4, r5
 80181c8:	e7ae      	b.n	8018128 <__gethex+0x82>
 80181ca:	463e      	mov	r6, r7
 80181cc:	2501      	movs	r5, #1
 80181ce:	e7c7      	b.n	8018160 <__gethex+0xba>
 80181d0:	4604      	mov	r4, r0
 80181d2:	e7fb      	b.n	80181cc <__gethex+0x126>
 80181d4:	f04f 0900 	mov.w	r9, #0
 80181d8:	1cb1      	adds	r1, r6, #2
 80181da:	e7ce      	b.n	801817a <__gethex+0xd4>
 80181dc:	f04f 0901 	mov.w	r9, #1
 80181e0:	e7fa      	b.n	80181d8 <__gethex+0x132>
 80181e2:	230a      	movs	r3, #10
 80181e4:	fb03 0202 	mla	r2, r3, r2, r0
 80181e8:	3a10      	subs	r2, #16
 80181ea:	e7cf      	b.n	801818c <__gethex+0xe6>
 80181ec:	4631      	mov	r1, r6
 80181ee:	e7da      	b.n	80181a6 <__gethex+0x100>
 80181f0:	1bf3      	subs	r3, r6, r7
 80181f2:	3b01      	subs	r3, #1
 80181f4:	4629      	mov	r1, r5
 80181f6:	2b07      	cmp	r3, #7
 80181f8:	dc49      	bgt.n	801828e <__gethex+0x1e8>
 80181fa:	9802      	ldr	r0, [sp, #8]
 80181fc:	f000 fa71 	bl	80186e2 <_Balloc>
 8018200:	9b01      	ldr	r3, [sp, #4]
 8018202:	f100 0914 	add.w	r9, r0, #20
 8018206:	f04f 0b00 	mov.w	fp, #0
 801820a:	f1c3 0301 	rsb	r3, r3, #1
 801820e:	4605      	mov	r5, r0
 8018210:	f8cd 9010 	str.w	r9, [sp, #16]
 8018214:	46da      	mov	sl, fp
 8018216:	9308      	str	r3, [sp, #32]
 8018218:	42b7      	cmp	r7, r6
 801821a:	d33b      	bcc.n	8018294 <__gethex+0x1ee>
 801821c:	9804      	ldr	r0, [sp, #16]
 801821e:	f840 ab04 	str.w	sl, [r0], #4
 8018222:	eba0 0009 	sub.w	r0, r0, r9
 8018226:	1080      	asrs	r0, r0, #2
 8018228:	6128      	str	r0, [r5, #16]
 801822a:	0147      	lsls	r7, r0, #5
 801822c:	4650      	mov	r0, sl
 801822e:	f000 fb1c 	bl	801886a <__hi0bits>
 8018232:	f8d8 6000 	ldr.w	r6, [r8]
 8018236:	1a3f      	subs	r7, r7, r0
 8018238:	42b7      	cmp	r7, r6
 801823a:	dd64      	ble.n	8018306 <__gethex+0x260>
 801823c:	1bbf      	subs	r7, r7, r6
 801823e:	4639      	mov	r1, r7
 8018240:	4628      	mov	r0, r5
 8018242:	f000 fe2b 	bl	8018e9c <__any_on>
 8018246:	4682      	mov	sl, r0
 8018248:	b178      	cbz	r0, 801826a <__gethex+0x1c4>
 801824a:	1e7b      	subs	r3, r7, #1
 801824c:	1159      	asrs	r1, r3, #5
 801824e:	f003 021f 	and.w	r2, r3, #31
 8018252:	f04f 0a01 	mov.w	sl, #1
 8018256:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801825a:	fa0a f202 	lsl.w	r2, sl, r2
 801825e:	420a      	tst	r2, r1
 8018260:	d003      	beq.n	801826a <__gethex+0x1c4>
 8018262:	4553      	cmp	r3, sl
 8018264:	dc46      	bgt.n	80182f4 <__gethex+0x24e>
 8018266:	f04f 0a02 	mov.w	sl, #2
 801826a:	4639      	mov	r1, r7
 801826c:	4628      	mov	r0, r5
 801826e:	f7ff fecb 	bl	8018008 <rshift>
 8018272:	443c      	add	r4, r7
 8018274:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018278:	42a3      	cmp	r3, r4
 801827a:	da52      	bge.n	8018322 <__gethex+0x27c>
 801827c:	4629      	mov	r1, r5
 801827e:	9802      	ldr	r0, [sp, #8]
 8018280:	f000 fa63 	bl	801874a <_Bfree>
 8018284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018286:	2300      	movs	r3, #0
 8018288:	6013      	str	r3, [r2, #0]
 801828a:	27a3      	movs	r7, #163	; 0xa3
 801828c:	e793      	b.n	80181b6 <__gethex+0x110>
 801828e:	3101      	adds	r1, #1
 8018290:	105b      	asrs	r3, r3, #1
 8018292:	e7b0      	b.n	80181f6 <__gethex+0x150>
 8018294:	1e73      	subs	r3, r6, #1
 8018296:	9305      	str	r3, [sp, #20]
 8018298:	9a07      	ldr	r2, [sp, #28]
 801829a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801829e:	4293      	cmp	r3, r2
 80182a0:	d018      	beq.n	80182d4 <__gethex+0x22e>
 80182a2:	f1bb 0f20 	cmp.w	fp, #32
 80182a6:	d107      	bne.n	80182b8 <__gethex+0x212>
 80182a8:	9b04      	ldr	r3, [sp, #16]
 80182aa:	f8c3 a000 	str.w	sl, [r3]
 80182ae:	3304      	adds	r3, #4
 80182b0:	f04f 0a00 	mov.w	sl, #0
 80182b4:	9304      	str	r3, [sp, #16]
 80182b6:	46d3      	mov	fp, sl
 80182b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80182bc:	f7ff fede 	bl	801807c <__hexdig_fun>
 80182c0:	f000 000f 	and.w	r0, r0, #15
 80182c4:	fa00 f00b 	lsl.w	r0, r0, fp
 80182c8:	ea4a 0a00 	orr.w	sl, sl, r0
 80182cc:	f10b 0b04 	add.w	fp, fp, #4
 80182d0:	9b05      	ldr	r3, [sp, #20]
 80182d2:	e00d      	b.n	80182f0 <__gethex+0x24a>
 80182d4:	9b05      	ldr	r3, [sp, #20]
 80182d6:	9a08      	ldr	r2, [sp, #32]
 80182d8:	4413      	add	r3, r2
 80182da:	42bb      	cmp	r3, r7
 80182dc:	d3e1      	bcc.n	80182a2 <__gethex+0x1fc>
 80182de:	4618      	mov	r0, r3
 80182e0:	9a01      	ldr	r2, [sp, #4]
 80182e2:	9903      	ldr	r1, [sp, #12]
 80182e4:	9309      	str	r3, [sp, #36]	; 0x24
 80182e6:	f001 fb47 	bl	8019978 <strncmp>
 80182ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182ec:	2800      	cmp	r0, #0
 80182ee:	d1d8      	bne.n	80182a2 <__gethex+0x1fc>
 80182f0:	461e      	mov	r6, r3
 80182f2:	e791      	b.n	8018218 <__gethex+0x172>
 80182f4:	1eb9      	subs	r1, r7, #2
 80182f6:	4628      	mov	r0, r5
 80182f8:	f000 fdd0 	bl	8018e9c <__any_on>
 80182fc:	2800      	cmp	r0, #0
 80182fe:	d0b2      	beq.n	8018266 <__gethex+0x1c0>
 8018300:	f04f 0a03 	mov.w	sl, #3
 8018304:	e7b1      	b.n	801826a <__gethex+0x1c4>
 8018306:	da09      	bge.n	801831c <__gethex+0x276>
 8018308:	1bf7      	subs	r7, r6, r7
 801830a:	4629      	mov	r1, r5
 801830c:	463a      	mov	r2, r7
 801830e:	9802      	ldr	r0, [sp, #8]
 8018310:	f000 fbe6 	bl	8018ae0 <__lshift>
 8018314:	1be4      	subs	r4, r4, r7
 8018316:	4605      	mov	r5, r0
 8018318:	f100 0914 	add.w	r9, r0, #20
 801831c:	f04f 0a00 	mov.w	sl, #0
 8018320:	e7a8      	b.n	8018274 <__gethex+0x1ce>
 8018322:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018326:	42a0      	cmp	r0, r4
 8018328:	dd6a      	ble.n	8018400 <__gethex+0x35a>
 801832a:	1b04      	subs	r4, r0, r4
 801832c:	42a6      	cmp	r6, r4
 801832e:	dc2e      	bgt.n	801838e <__gethex+0x2e8>
 8018330:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018334:	2b02      	cmp	r3, #2
 8018336:	d022      	beq.n	801837e <__gethex+0x2d8>
 8018338:	2b03      	cmp	r3, #3
 801833a:	d024      	beq.n	8018386 <__gethex+0x2e0>
 801833c:	2b01      	cmp	r3, #1
 801833e:	d115      	bne.n	801836c <__gethex+0x2c6>
 8018340:	42a6      	cmp	r6, r4
 8018342:	d113      	bne.n	801836c <__gethex+0x2c6>
 8018344:	2e01      	cmp	r6, #1
 8018346:	dc0b      	bgt.n	8018360 <__gethex+0x2ba>
 8018348:	9a06      	ldr	r2, [sp, #24]
 801834a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801834e:	6013      	str	r3, [r2, #0]
 8018350:	2301      	movs	r3, #1
 8018352:	612b      	str	r3, [r5, #16]
 8018354:	f8c9 3000 	str.w	r3, [r9]
 8018358:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801835a:	2762      	movs	r7, #98	; 0x62
 801835c:	601d      	str	r5, [r3, #0]
 801835e:	e72a      	b.n	80181b6 <__gethex+0x110>
 8018360:	1e71      	subs	r1, r6, #1
 8018362:	4628      	mov	r0, r5
 8018364:	f000 fd9a 	bl	8018e9c <__any_on>
 8018368:	2800      	cmp	r0, #0
 801836a:	d1ed      	bne.n	8018348 <__gethex+0x2a2>
 801836c:	4629      	mov	r1, r5
 801836e:	9802      	ldr	r0, [sp, #8]
 8018370:	f000 f9eb 	bl	801874a <_Bfree>
 8018374:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018376:	2300      	movs	r3, #0
 8018378:	6013      	str	r3, [r2, #0]
 801837a:	2750      	movs	r7, #80	; 0x50
 801837c:	e71b      	b.n	80181b6 <__gethex+0x110>
 801837e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018380:	2b00      	cmp	r3, #0
 8018382:	d0e1      	beq.n	8018348 <__gethex+0x2a2>
 8018384:	e7f2      	b.n	801836c <__gethex+0x2c6>
 8018386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018388:	2b00      	cmp	r3, #0
 801838a:	d1dd      	bne.n	8018348 <__gethex+0x2a2>
 801838c:	e7ee      	b.n	801836c <__gethex+0x2c6>
 801838e:	1e67      	subs	r7, r4, #1
 8018390:	f1ba 0f00 	cmp.w	sl, #0
 8018394:	d131      	bne.n	80183fa <__gethex+0x354>
 8018396:	b127      	cbz	r7, 80183a2 <__gethex+0x2fc>
 8018398:	4639      	mov	r1, r7
 801839a:	4628      	mov	r0, r5
 801839c:	f000 fd7e 	bl	8018e9c <__any_on>
 80183a0:	4682      	mov	sl, r0
 80183a2:	117a      	asrs	r2, r7, #5
 80183a4:	2301      	movs	r3, #1
 80183a6:	f007 071f 	and.w	r7, r7, #31
 80183aa:	fa03 f707 	lsl.w	r7, r3, r7
 80183ae:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80183b2:	4621      	mov	r1, r4
 80183b4:	421f      	tst	r7, r3
 80183b6:	4628      	mov	r0, r5
 80183b8:	bf18      	it	ne
 80183ba:	f04a 0a02 	orrne.w	sl, sl, #2
 80183be:	1b36      	subs	r6, r6, r4
 80183c0:	f7ff fe22 	bl	8018008 <rshift>
 80183c4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80183c8:	2702      	movs	r7, #2
 80183ca:	f1ba 0f00 	cmp.w	sl, #0
 80183ce:	d048      	beq.n	8018462 <__gethex+0x3bc>
 80183d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80183d4:	2b02      	cmp	r3, #2
 80183d6:	d015      	beq.n	8018404 <__gethex+0x35e>
 80183d8:	2b03      	cmp	r3, #3
 80183da:	d017      	beq.n	801840c <__gethex+0x366>
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d109      	bne.n	80183f4 <__gethex+0x34e>
 80183e0:	f01a 0f02 	tst.w	sl, #2
 80183e4:	d006      	beq.n	80183f4 <__gethex+0x34e>
 80183e6:	f8d9 3000 	ldr.w	r3, [r9]
 80183ea:	ea4a 0a03 	orr.w	sl, sl, r3
 80183ee:	f01a 0f01 	tst.w	sl, #1
 80183f2:	d10e      	bne.n	8018412 <__gethex+0x36c>
 80183f4:	f047 0710 	orr.w	r7, r7, #16
 80183f8:	e033      	b.n	8018462 <__gethex+0x3bc>
 80183fa:	f04f 0a01 	mov.w	sl, #1
 80183fe:	e7d0      	b.n	80183a2 <__gethex+0x2fc>
 8018400:	2701      	movs	r7, #1
 8018402:	e7e2      	b.n	80183ca <__gethex+0x324>
 8018404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018406:	f1c3 0301 	rsb	r3, r3, #1
 801840a:	9315      	str	r3, [sp, #84]	; 0x54
 801840c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801840e:	2b00      	cmp	r3, #0
 8018410:	d0f0      	beq.n	80183f4 <__gethex+0x34e>
 8018412:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018416:	f105 0314 	add.w	r3, r5, #20
 801841a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801841e:	eb03 010a 	add.w	r1, r3, sl
 8018422:	f04f 0c00 	mov.w	ip, #0
 8018426:	4618      	mov	r0, r3
 8018428:	f853 2b04 	ldr.w	r2, [r3], #4
 801842c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018430:	d01c      	beq.n	801846c <__gethex+0x3c6>
 8018432:	3201      	adds	r2, #1
 8018434:	6002      	str	r2, [r0, #0]
 8018436:	2f02      	cmp	r7, #2
 8018438:	f105 0314 	add.w	r3, r5, #20
 801843c:	d138      	bne.n	80184b0 <__gethex+0x40a>
 801843e:	f8d8 2000 	ldr.w	r2, [r8]
 8018442:	3a01      	subs	r2, #1
 8018444:	42b2      	cmp	r2, r6
 8018446:	d10a      	bne.n	801845e <__gethex+0x3b8>
 8018448:	1171      	asrs	r1, r6, #5
 801844a:	2201      	movs	r2, #1
 801844c:	f006 061f 	and.w	r6, r6, #31
 8018450:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018454:	fa02 f606 	lsl.w	r6, r2, r6
 8018458:	421e      	tst	r6, r3
 801845a:	bf18      	it	ne
 801845c:	4617      	movne	r7, r2
 801845e:	f047 0720 	orr.w	r7, r7, #32
 8018462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018464:	601d      	str	r5, [r3, #0]
 8018466:	9b06      	ldr	r3, [sp, #24]
 8018468:	601c      	str	r4, [r3, #0]
 801846a:	e6a4      	b.n	80181b6 <__gethex+0x110>
 801846c:	4299      	cmp	r1, r3
 801846e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018472:	d8d8      	bhi.n	8018426 <__gethex+0x380>
 8018474:	68ab      	ldr	r3, [r5, #8]
 8018476:	4599      	cmp	r9, r3
 8018478:	db12      	blt.n	80184a0 <__gethex+0x3fa>
 801847a:	6869      	ldr	r1, [r5, #4]
 801847c:	9802      	ldr	r0, [sp, #8]
 801847e:	3101      	adds	r1, #1
 8018480:	f000 f92f 	bl	80186e2 <_Balloc>
 8018484:	692a      	ldr	r2, [r5, #16]
 8018486:	3202      	adds	r2, #2
 8018488:	f105 010c 	add.w	r1, r5, #12
 801848c:	4683      	mov	fp, r0
 801848e:	0092      	lsls	r2, r2, #2
 8018490:	300c      	adds	r0, #12
 8018492:	f000 f91b 	bl	80186cc <memcpy>
 8018496:	4629      	mov	r1, r5
 8018498:	9802      	ldr	r0, [sp, #8]
 801849a:	f000 f956 	bl	801874a <_Bfree>
 801849e:	465d      	mov	r5, fp
 80184a0:	692b      	ldr	r3, [r5, #16]
 80184a2:	1c5a      	adds	r2, r3, #1
 80184a4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80184a8:	612a      	str	r2, [r5, #16]
 80184aa:	2201      	movs	r2, #1
 80184ac:	615a      	str	r2, [r3, #20]
 80184ae:	e7c2      	b.n	8018436 <__gethex+0x390>
 80184b0:	692a      	ldr	r2, [r5, #16]
 80184b2:	454a      	cmp	r2, r9
 80184b4:	dd0b      	ble.n	80184ce <__gethex+0x428>
 80184b6:	2101      	movs	r1, #1
 80184b8:	4628      	mov	r0, r5
 80184ba:	f7ff fda5 	bl	8018008 <rshift>
 80184be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184c2:	3401      	adds	r4, #1
 80184c4:	42a3      	cmp	r3, r4
 80184c6:	f6ff aed9 	blt.w	801827c <__gethex+0x1d6>
 80184ca:	2701      	movs	r7, #1
 80184cc:	e7c7      	b.n	801845e <__gethex+0x3b8>
 80184ce:	f016 061f 	ands.w	r6, r6, #31
 80184d2:	d0fa      	beq.n	80184ca <__gethex+0x424>
 80184d4:	449a      	add	sl, r3
 80184d6:	f1c6 0620 	rsb	r6, r6, #32
 80184da:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80184de:	f000 f9c4 	bl	801886a <__hi0bits>
 80184e2:	42b0      	cmp	r0, r6
 80184e4:	dbe7      	blt.n	80184b6 <__gethex+0x410>
 80184e6:	e7f0      	b.n	80184ca <__gethex+0x424>

080184e8 <L_shift>:
 80184e8:	f1c2 0208 	rsb	r2, r2, #8
 80184ec:	0092      	lsls	r2, r2, #2
 80184ee:	b570      	push	{r4, r5, r6, lr}
 80184f0:	f1c2 0620 	rsb	r6, r2, #32
 80184f4:	6843      	ldr	r3, [r0, #4]
 80184f6:	6804      	ldr	r4, [r0, #0]
 80184f8:	fa03 f506 	lsl.w	r5, r3, r6
 80184fc:	432c      	orrs	r4, r5
 80184fe:	40d3      	lsrs	r3, r2
 8018500:	6004      	str	r4, [r0, #0]
 8018502:	f840 3f04 	str.w	r3, [r0, #4]!
 8018506:	4288      	cmp	r0, r1
 8018508:	d3f4      	bcc.n	80184f4 <L_shift+0xc>
 801850a:	bd70      	pop	{r4, r5, r6, pc}

0801850c <__match>:
 801850c:	b530      	push	{r4, r5, lr}
 801850e:	6803      	ldr	r3, [r0, #0]
 8018510:	3301      	adds	r3, #1
 8018512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018516:	b914      	cbnz	r4, 801851e <__match+0x12>
 8018518:	6003      	str	r3, [r0, #0]
 801851a:	2001      	movs	r0, #1
 801851c:	bd30      	pop	{r4, r5, pc}
 801851e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018522:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018526:	2d19      	cmp	r5, #25
 8018528:	bf98      	it	ls
 801852a:	3220      	addls	r2, #32
 801852c:	42a2      	cmp	r2, r4
 801852e:	d0f0      	beq.n	8018512 <__match+0x6>
 8018530:	2000      	movs	r0, #0
 8018532:	e7f3      	b.n	801851c <__match+0x10>

08018534 <__hexnan>:
 8018534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018538:	680b      	ldr	r3, [r1, #0]
 801853a:	6801      	ldr	r1, [r0, #0]
 801853c:	115f      	asrs	r7, r3, #5
 801853e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018542:	f013 031f 	ands.w	r3, r3, #31
 8018546:	b087      	sub	sp, #28
 8018548:	bf18      	it	ne
 801854a:	3704      	addne	r7, #4
 801854c:	2500      	movs	r5, #0
 801854e:	1f3e      	subs	r6, r7, #4
 8018550:	4682      	mov	sl, r0
 8018552:	4690      	mov	r8, r2
 8018554:	9301      	str	r3, [sp, #4]
 8018556:	f847 5c04 	str.w	r5, [r7, #-4]
 801855a:	46b1      	mov	r9, r6
 801855c:	4634      	mov	r4, r6
 801855e:	9502      	str	r5, [sp, #8]
 8018560:	46ab      	mov	fp, r5
 8018562:	784a      	ldrb	r2, [r1, #1]
 8018564:	1c4b      	adds	r3, r1, #1
 8018566:	9303      	str	r3, [sp, #12]
 8018568:	b342      	cbz	r2, 80185bc <__hexnan+0x88>
 801856a:	4610      	mov	r0, r2
 801856c:	9105      	str	r1, [sp, #20]
 801856e:	9204      	str	r2, [sp, #16]
 8018570:	f7ff fd84 	bl	801807c <__hexdig_fun>
 8018574:	2800      	cmp	r0, #0
 8018576:	d143      	bne.n	8018600 <__hexnan+0xcc>
 8018578:	9a04      	ldr	r2, [sp, #16]
 801857a:	9905      	ldr	r1, [sp, #20]
 801857c:	2a20      	cmp	r2, #32
 801857e:	d818      	bhi.n	80185b2 <__hexnan+0x7e>
 8018580:	9b02      	ldr	r3, [sp, #8]
 8018582:	459b      	cmp	fp, r3
 8018584:	dd13      	ble.n	80185ae <__hexnan+0x7a>
 8018586:	454c      	cmp	r4, r9
 8018588:	d206      	bcs.n	8018598 <__hexnan+0x64>
 801858a:	2d07      	cmp	r5, #7
 801858c:	dc04      	bgt.n	8018598 <__hexnan+0x64>
 801858e:	462a      	mov	r2, r5
 8018590:	4649      	mov	r1, r9
 8018592:	4620      	mov	r0, r4
 8018594:	f7ff ffa8 	bl	80184e8 <L_shift>
 8018598:	4544      	cmp	r4, r8
 801859a:	d944      	bls.n	8018626 <__hexnan+0xf2>
 801859c:	2300      	movs	r3, #0
 801859e:	f1a4 0904 	sub.w	r9, r4, #4
 80185a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80185a6:	f8cd b008 	str.w	fp, [sp, #8]
 80185aa:	464c      	mov	r4, r9
 80185ac:	461d      	mov	r5, r3
 80185ae:	9903      	ldr	r1, [sp, #12]
 80185b0:	e7d7      	b.n	8018562 <__hexnan+0x2e>
 80185b2:	2a29      	cmp	r2, #41	; 0x29
 80185b4:	d14a      	bne.n	801864c <__hexnan+0x118>
 80185b6:	3102      	adds	r1, #2
 80185b8:	f8ca 1000 	str.w	r1, [sl]
 80185bc:	f1bb 0f00 	cmp.w	fp, #0
 80185c0:	d044      	beq.n	801864c <__hexnan+0x118>
 80185c2:	454c      	cmp	r4, r9
 80185c4:	d206      	bcs.n	80185d4 <__hexnan+0xa0>
 80185c6:	2d07      	cmp	r5, #7
 80185c8:	dc04      	bgt.n	80185d4 <__hexnan+0xa0>
 80185ca:	462a      	mov	r2, r5
 80185cc:	4649      	mov	r1, r9
 80185ce:	4620      	mov	r0, r4
 80185d0:	f7ff ff8a 	bl	80184e8 <L_shift>
 80185d4:	4544      	cmp	r4, r8
 80185d6:	d928      	bls.n	801862a <__hexnan+0xf6>
 80185d8:	4643      	mov	r3, r8
 80185da:	f854 2b04 	ldr.w	r2, [r4], #4
 80185de:	f843 2b04 	str.w	r2, [r3], #4
 80185e2:	42a6      	cmp	r6, r4
 80185e4:	d2f9      	bcs.n	80185da <__hexnan+0xa6>
 80185e6:	2200      	movs	r2, #0
 80185e8:	f843 2b04 	str.w	r2, [r3], #4
 80185ec:	429e      	cmp	r6, r3
 80185ee:	d2fb      	bcs.n	80185e8 <__hexnan+0xb4>
 80185f0:	6833      	ldr	r3, [r6, #0]
 80185f2:	b91b      	cbnz	r3, 80185fc <__hexnan+0xc8>
 80185f4:	4546      	cmp	r6, r8
 80185f6:	d127      	bne.n	8018648 <__hexnan+0x114>
 80185f8:	2301      	movs	r3, #1
 80185fa:	6033      	str	r3, [r6, #0]
 80185fc:	2005      	movs	r0, #5
 80185fe:	e026      	b.n	801864e <__hexnan+0x11a>
 8018600:	3501      	adds	r5, #1
 8018602:	2d08      	cmp	r5, #8
 8018604:	f10b 0b01 	add.w	fp, fp, #1
 8018608:	dd06      	ble.n	8018618 <__hexnan+0xe4>
 801860a:	4544      	cmp	r4, r8
 801860c:	d9cf      	bls.n	80185ae <__hexnan+0x7a>
 801860e:	2300      	movs	r3, #0
 8018610:	f844 3c04 	str.w	r3, [r4, #-4]
 8018614:	2501      	movs	r5, #1
 8018616:	3c04      	subs	r4, #4
 8018618:	6822      	ldr	r2, [r4, #0]
 801861a:	f000 000f 	and.w	r0, r0, #15
 801861e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018622:	6020      	str	r0, [r4, #0]
 8018624:	e7c3      	b.n	80185ae <__hexnan+0x7a>
 8018626:	2508      	movs	r5, #8
 8018628:	e7c1      	b.n	80185ae <__hexnan+0x7a>
 801862a:	9b01      	ldr	r3, [sp, #4]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d0df      	beq.n	80185f0 <__hexnan+0xbc>
 8018630:	f04f 32ff 	mov.w	r2, #4294967295
 8018634:	f1c3 0320 	rsb	r3, r3, #32
 8018638:	fa22 f303 	lsr.w	r3, r2, r3
 801863c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018640:	401a      	ands	r2, r3
 8018642:	f847 2c04 	str.w	r2, [r7, #-4]
 8018646:	e7d3      	b.n	80185f0 <__hexnan+0xbc>
 8018648:	3e04      	subs	r6, #4
 801864a:	e7d1      	b.n	80185f0 <__hexnan+0xbc>
 801864c:	2004      	movs	r0, #4
 801864e:	b007      	add	sp, #28
 8018650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018654 <__locale_ctype_ptr_l>:
 8018654:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018658:	4770      	bx	lr
	...

0801865c <__locale_ctype_ptr>:
 801865c:	4b04      	ldr	r3, [pc, #16]	; (8018670 <__locale_ctype_ptr+0x14>)
 801865e:	4a05      	ldr	r2, [pc, #20]	; (8018674 <__locale_ctype_ptr+0x18>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	6a1b      	ldr	r3, [r3, #32]
 8018664:	2b00      	cmp	r3, #0
 8018666:	bf08      	it	eq
 8018668:	4613      	moveq	r3, r2
 801866a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801866e:	4770      	bx	lr
 8018670:	2000000c 	.word	0x2000000c
 8018674:	20000070 	.word	0x20000070

08018678 <__localeconv_l>:
 8018678:	30f0      	adds	r0, #240	; 0xf0
 801867a:	4770      	bx	lr

0801867c <_localeconv_r>:
 801867c:	4b04      	ldr	r3, [pc, #16]	; (8018690 <_localeconv_r+0x14>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	6a18      	ldr	r0, [r3, #32]
 8018682:	4b04      	ldr	r3, [pc, #16]	; (8018694 <_localeconv_r+0x18>)
 8018684:	2800      	cmp	r0, #0
 8018686:	bf08      	it	eq
 8018688:	4618      	moveq	r0, r3
 801868a:	30f0      	adds	r0, #240	; 0xf0
 801868c:	4770      	bx	lr
 801868e:	bf00      	nop
 8018690:	2000000c 	.word	0x2000000c
 8018694:	20000070 	.word	0x20000070

08018698 <malloc>:
 8018698:	4b02      	ldr	r3, [pc, #8]	; (80186a4 <malloc+0xc>)
 801869a:	4601      	mov	r1, r0
 801869c:	6818      	ldr	r0, [r3, #0]
 801869e:	f000 bc7b 	b.w	8018f98 <_malloc_r>
 80186a2:	bf00      	nop
 80186a4:	2000000c 	.word	0x2000000c

080186a8 <__ascii_mbtowc>:
 80186a8:	b082      	sub	sp, #8
 80186aa:	b901      	cbnz	r1, 80186ae <__ascii_mbtowc+0x6>
 80186ac:	a901      	add	r1, sp, #4
 80186ae:	b142      	cbz	r2, 80186c2 <__ascii_mbtowc+0x1a>
 80186b0:	b14b      	cbz	r3, 80186c6 <__ascii_mbtowc+0x1e>
 80186b2:	7813      	ldrb	r3, [r2, #0]
 80186b4:	600b      	str	r3, [r1, #0]
 80186b6:	7812      	ldrb	r2, [r2, #0]
 80186b8:	1c10      	adds	r0, r2, #0
 80186ba:	bf18      	it	ne
 80186bc:	2001      	movne	r0, #1
 80186be:	b002      	add	sp, #8
 80186c0:	4770      	bx	lr
 80186c2:	4610      	mov	r0, r2
 80186c4:	e7fb      	b.n	80186be <__ascii_mbtowc+0x16>
 80186c6:	f06f 0001 	mvn.w	r0, #1
 80186ca:	e7f8      	b.n	80186be <__ascii_mbtowc+0x16>

080186cc <memcpy>:
 80186cc:	b510      	push	{r4, lr}
 80186ce:	1e43      	subs	r3, r0, #1
 80186d0:	440a      	add	r2, r1
 80186d2:	4291      	cmp	r1, r2
 80186d4:	d100      	bne.n	80186d8 <memcpy+0xc>
 80186d6:	bd10      	pop	{r4, pc}
 80186d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80186dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80186e0:	e7f7      	b.n	80186d2 <memcpy+0x6>

080186e2 <_Balloc>:
 80186e2:	b570      	push	{r4, r5, r6, lr}
 80186e4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80186e6:	4604      	mov	r4, r0
 80186e8:	460e      	mov	r6, r1
 80186ea:	b93d      	cbnz	r5, 80186fc <_Balloc+0x1a>
 80186ec:	2010      	movs	r0, #16
 80186ee:	f7ff ffd3 	bl	8018698 <malloc>
 80186f2:	6260      	str	r0, [r4, #36]	; 0x24
 80186f4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80186f8:	6005      	str	r5, [r0, #0]
 80186fa:	60c5      	str	r5, [r0, #12]
 80186fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80186fe:	68eb      	ldr	r3, [r5, #12]
 8018700:	b183      	cbz	r3, 8018724 <_Balloc+0x42>
 8018702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018704:	68db      	ldr	r3, [r3, #12]
 8018706:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801870a:	b9b8      	cbnz	r0, 801873c <_Balloc+0x5a>
 801870c:	2101      	movs	r1, #1
 801870e:	fa01 f506 	lsl.w	r5, r1, r6
 8018712:	1d6a      	adds	r2, r5, #5
 8018714:	0092      	lsls	r2, r2, #2
 8018716:	4620      	mov	r0, r4
 8018718:	f000 fbe1 	bl	8018ede <_calloc_r>
 801871c:	b160      	cbz	r0, 8018738 <_Balloc+0x56>
 801871e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018722:	e00e      	b.n	8018742 <_Balloc+0x60>
 8018724:	2221      	movs	r2, #33	; 0x21
 8018726:	2104      	movs	r1, #4
 8018728:	4620      	mov	r0, r4
 801872a:	f000 fbd8 	bl	8018ede <_calloc_r>
 801872e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018730:	60e8      	str	r0, [r5, #12]
 8018732:	68db      	ldr	r3, [r3, #12]
 8018734:	2b00      	cmp	r3, #0
 8018736:	d1e4      	bne.n	8018702 <_Balloc+0x20>
 8018738:	2000      	movs	r0, #0
 801873a:	bd70      	pop	{r4, r5, r6, pc}
 801873c:	6802      	ldr	r2, [r0, #0]
 801873e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018742:	2300      	movs	r3, #0
 8018744:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018748:	e7f7      	b.n	801873a <_Balloc+0x58>

0801874a <_Bfree>:
 801874a:	b570      	push	{r4, r5, r6, lr}
 801874c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801874e:	4606      	mov	r6, r0
 8018750:	460d      	mov	r5, r1
 8018752:	b93c      	cbnz	r4, 8018764 <_Bfree+0x1a>
 8018754:	2010      	movs	r0, #16
 8018756:	f7ff ff9f 	bl	8018698 <malloc>
 801875a:	6270      	str	r0, [r6, #36]	; 0x24
 801875c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018760:	6004      	str	r4, [r0, #0]
 8018762:	60c4      	str	r4, [r0, #12]
 8018764:	b13d      	cbz	r5, 8018776 <_Bfree+0x2c>
 8018766:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018768:	686a      	ldr	r2, [r5, #4]
 801876a:	68db      	ldr	r3, [r3, #12]
 801876c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018770:	6029      	str	r1, [r5, #0]
 8018772:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018776:	bd70      	pop	{r4, r5, r6, pc}

08018778 <__multadd>:
 8018778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801877c:	690d      	ldr	r5, [r1, #16]
 801877e:	461f      	mov	r7, r3
 8018780:	4606      	mov	r6, r0
 8018782:	460c      	mov	r4, r1
 8018784:	f101 0c14 	add.w	ip, r1, #20
 8018788:	2300      	movs	r3, #0
 801878a:	f8dc 0000 	ldr.w	r0, [ip]
 801878e:	b281      	uxth	r1, r0
 8018790:	fb02 7101 	mla	r1, r2, r1, r7
 8018794:	0c0f      	lsrs	r7, r1, #16
 8018796:	0c00      	lsrs	r0, r0, #16
 8018798:	fb02 7000 	mla	r0, r2, r0, r7
 801879c:	b289      	uxth	r1, r1
 801879e:	3301      	adds	r3, #1
 80187a0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80187a4:	429d      	cmp	r5, r3
 80187a6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80187aa:	f84c 1b04 	str.w	r1, [ip], #4
 80187ae:	dcec      	bgt.n	801878a <__multadd+0x12>
 80187b0:	b1d7      	cbz	r7, 80187e8 <__multadd+0x70>
 80187b2:	68a3      	ldr	r3, [r4, #8]
 80187b4:	42ab      	cmp	r3, r5
 80187b6:	dc12      	bgt.n	80187de <__multadd+0x66>
 80187b8:	6861      	ldr	r1, [r4, #4]
 80187ba:	4630      	mov	r0, r6
 80187bc:	3101      	adds	r1, #1
 80187be:	f7ff ff90 	bl	80186e2 <_Balloc>
 80187c2:	6922      	ldr	r2, [r4, #16]
 80187c4:	3202      	adds	r2, #2
 80187c6:	f104 010c 	add.w	r1, r4, #12
 80187ca:	4680      	mov	r8, r0
 80187cc:	0092      	lsls	r2, r2, #2
 80187ce:	300c      	adds	r0, #12
 80187d0:	f7ff ff7c 	bl	80186cc <memcpy>
 80187d4:	4621      	mov	r1, r4
 80187d6:	4630      	mov	r0, r6
 80187d8:	f7ff ffb7 	bl	801874a <_Bfree>
 80187dc:	4644      	mov	r4, r8
 80187de:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80187e2:	3501      	adds	r5, #1
 80187e4:	615f      	str	r7, [r3, #20]
 80187e6:	6125      	str	r5, [r4, #16]
 80187e8:	4620      	mov	r0, r4
 80187ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080187ee <__s2b>:
 80187ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187f2:	460c      	mov	r4, r1
 80187f4:	4615      	mov	r5, r2
 80187f6:	461f      	mov	r7, r3
 80187f8:	2209      	movs	r2, #9
 80187fa:	3308      	adds	r3, #8
 80187fc:	4606      	mov	r6, r0
 80187fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8018802:	2100      	movs	r1, #0
 8018804:	2201      	movs	r2, #1
 8018806:	429a      	cmp	r2, r3
 8018808:	db20      	blt.n	801884c <__s2b+0x5e>
 801880a:	4630      	mov	r0, r6
 801880c:	f7ff ff69 	bl	80186e2 <_Balloc>
 8018810:	9b08      	ldr	r3, [sp, #32]
 8018812:	6143      	str	r3, [r0, #20]
 8018814:	2d09      	cmp	r5, #9
 8018816:	f04f 0301 	mov.w	r3, #1
 801881a:	6103      	str	r3, [r0, #16]
 801881c:	dd19      	ble.n	8018852 <__s2b+0x64>
 801881e:	f104 0809 	add.w	r8, r4, #9
 8018822:	46c1      	mov	r9, r8
 8018824:	442c      	add	r4, r5
 8018826:	f819 3b01 	ldrb.w	r3, [r9], #1
 801882a:	4601      	mov	r1, r0
 801882c:	3b30      	subs	r3, #48	; 0x30
 801882e:	220a      	movs	r2, #10
 8018830:	4630      	mov	r0, r6
 8018832:	f7ff ffa1 	bl	8018778 <__multadd>
 8018836:	45a1      	cmp	r9, r4
 8018838:	d1f5      	bne.n	8018826 <__s2b+0x38>
 801883a:	eb08 0405 	add.w	r4, r8, r5
 801883e:	3c08      	subs	r4, #8
 8018840:	1b2d      	subs	r5, r5, r4
 8018842:	1963      	adds	r3, r4, r5
 8018844:	42bb      	cmp	r3, r7
 8018846:	db07      	blt.n	8018858 <__s2b+0x6a>
 8018848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801884c:	0052      	lsls	r2, r2, #1
 801884e:	3101      	adds	r1, #1
 8018850:	e7d9      	b.n	8018806 <__s2b+0x18>
 8018852:	340a      	adds	r4, #10
 8018854:	2509      	movs	r5, #9
 8018856:	e7f3      	b.n	8018840 <__s2b+0x52>
 8018858:	f814 3b01 	ldrb.w	r3, [r4], #1
 801885c:	4601      	mov	r1, r0
 801885e:	3b30      	subs	r3, #48	; 0x30
 8018860:	220a      	movs	r2, #10
 8018862:	4630      	mov	r0, r6
 8018864:	f7ff ff88 	bl	8018778 <__multadd>
 8018868:	e7eb      	b.n	8018842 <__s2b+0x54>

0801886a <__hi0bits>:
 801886a:	0c02      	lsrs	r2, r0, #16
 801886c:	0412      	lsls	r2, r2, #16
 801886e:	4603      	mov	r3, r0
 8018870:	b9b2      	cbnz	r2, 80188a0 <__hi0bits+0x36>
 8018872:	0403      	lsls	r3, r0, #16
 8018874:	2010      	movs	r0, #16
 8018876:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801887a:	bf04      	itt	eq
 801887c:	021b      	lsleq	r3, r3, #8
 801887e:	3008      	addeq	r0, #8
 8018880:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018884:	bf04      	itt	eq
 8018886:	011b      	lsleq	r3, r3, #4
 8018888:	3004      	addeq	r0, #4
 801888a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801888e:	bf04      	itt	eq
 8018890:	009b      	lsleq	r3, r3, #2
 8018892:	3002      	addeq	r0, #2
 8018894:	2b00      	cmp	r3, #0
 8018896:	db06      	blt.n	80188a6 <__hi0bits+0x3c>
 8018898:	005b      	lsls	r3, r3, #1
 801889a:	d503      	bpl.n	80188a4 <__hi0bits+0x3a>
 801889c:	3001      	adds	r0, #1
 801889e:	4770      	bx	lr
 80188a0:	2000      	movs	r0, #0
 80188a2:	e7e8      	b.n	8018876 <__hi0bits+0xc>
 80188a4:	2020      	movs	r0, #32
 80188a6:	4770      	bx	lr

080188a8 <__lo0bits>:
 80188a8:	6803      	ldr	r3, [r0, #0]
 80188aa:	f013 0207 	ands.w	r2, r3, #7
 80188ae:	4601      	mov	r1, r0
 80188b0:	d00b      	beq.n	80188ca <__lo0bits+0x22>
 80188b2:	07da      	lsls	r2, r3, #31
 80188b4:	d423      	bmi.n	80188fe <__lo0bits+0x56>
 80188b6:	0798      	lsls	r0, r3, #30
 80188b8:	bf49      	itett	mi
 80188ba:	085b      	lsrmi	r3, r3, #1
 80188bc:	089b      	lsrpl	r3, r3, #2
 80188be:	2001      	movmi	r0, #1
 80188c0:	600b      	strmi	r3, [r1, #0]
 80188c2:	bf5c      	itt	pl
 80188c4:	600b      	strpl	r3, [r1, #0]
 80188c6:	2002      	movpl	r0, #2
 80188c8:	4770      	bx	lr
 80188ca:	b298      	uxth	r0, r3
 80188cc:	b9a8      	cbnz	r0, 80188fa <__lo0bits+0x52>
 80188ce:	0c1b      	lsrs	r3, r3, #16
 80188d0:	2010      	movs	r0, #16
 80188d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80188d6:	bf04      	itt	eq
 80188d8:	0a1b      	lsreq	r3, r3, #8
 80188da:	3008      	addeq	r0, #8
 80188dc:	071a      	lsls	r2, r3, #28
 80188de:	bf04      	itt	eq
 80188e0:	091b      	lsreq	r3, r3, #4
 80188e2:	3004      	addeq	r0, #4
 80188e4:	079a      	lsls	r2, r3, #30
 80188e6:	bf04      	itt	eq
 80188e8:	089b      	lsreq	r3, r3, #2
 80188ea:	3002      	addeq	r0, #2
 80188ec:	07da      	lsls	r2, r3, #31
 80188ee:	d402      	bmi.n	80188f6 <__lo0bits+0x4e>
 80188f0:	085b      	lsrs	r3, r3, #1
 80188f2:	d006      	beq.n	8018902 <__lo0bits+0x5a>
 80188f4:	3001      	adds	r0, #1
 80188f6:	600b      	str	r3, [r1, #0]
 80188f8:	4770      	bx	lr
 80188fa:	4610      	mov	r0, r2
 80188fc:	e7e9      	b.n	80188d2 <__lo0bits+0x2a>
 80188fe:	2000      	movs	r0, #0
 8018900:	4770      	bx	lr
 8018902:	2020      	movs	r0, #32
 8018904:	4770      	bx	lr

08018906 <__i2b>:
 8018906:	b510      	push	{r4, lr}
 8018908:	460c      	mov	r4, r1
 801890a:	2101      	movs	r1, #1
 801890c:	f7ff fee9 	bl	80186e2 <_Balloc>
 8018910:	2201      	movs	r2, #1
 8018912:	6144      	str	r4, [r0, #20]
 8018914:	6102      	str	r2, [r0, #16]
 8018916:	bd10      	pop	{r4, pc}

08018918 <__multiply>:
 8018918:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801891c:	4614      	mov	r4, r2
 801891e:	690a      	ldr	r2, [r1, #16]
 8018920:	6923      	ldr	r3, [r4, #16]
 8018922:	429a      	cmp	r2, r3
 8018924:	bfb8      	it	lt
 8018926:	460b      	movlt	r3, r1
 8018928:	4688      	mov	r8, r1
 801892a:	bfbc      	itt	lt
 801892c:	46a0      	movlt	r8, r4
 801892e:	461c      	movlt	r4, r3
 8018930:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018934:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018938:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801893c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018940:	eb07 0609 	add.w	r6, r7, r9
 8018944:	42b3      	cmp	r3, r6
 8018946:	bfb8      	it	lt
 8018948:	3101      	addlt	r1, #1
 801894a:	f7ff feca 	bl	80186e2 <_Balloc>
 801894e:	f100 0514 	add.w	r5, r0, #20
 8018952:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018956:	462b      	mov	r3, r5
 8018958:	2200      	movs	r2, #0
 801895a:	4573      	cmp	r3, lr
 801895c:	d316      	bcc.n	801898c <__multiply+0x74>
 801895e:	f104 0214 	add.w	r2, r4, #20
 8018962:	f108 0114 	add.w	r1, r8, #20
 8018966:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801896a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801896e:	9300      	str	r3, [sp, #0]
 8018970:	9b00      	ldr	r3, [sp, #0]
 8018972:	9201      	str	r2, [sp, #4]
 8018974:	4293      	cmp	r3, r2
 8018976:	d80c      	bhi.n	8018992 <__multiply+0x7a>
 8018978:	2e00      	cmp	r6, #0
 801897a:	dd03      	ble.n	8018984 <__multiply+0x6c>
 801897c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018980:	2b00      	cmp	r3, #0
 8018982:	d05d      	beq.n	8018a40 <__multiply+0x128>
 8018984:	6106      	str	r6, [r0, #16]
 8018986:	b003      	add	sp, #12
 8018988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801898c:	f843 2b04 	str.w	r2, [r3], #4
 8018990:	e7e3      	b.n	801895a <__multiply+0x42>
 8018992:	f8b2 b000 	ldrh.w	fp, [r2]
 8018996:	f1bb 0f00 	cmp.w	fp, #0
 801899a:	d023      	beq.n	80189e4 <__multiply+0xcc>
 801899c:	4689      	mov	r9, r1
 801899e:	46ac      	mov	ip, r5
 80189a0:	f04f 0800 	mov.w	r8, #0
 80189a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80189a8:	f8dc a000 	ldr.w	sl, [ip]
 80189ac:	b2a3      	uxth	r3, r4
 80189ae:	fa1f fa8a 	uxth.w	sl, sl
 80189b2:	fb0b a303 	mla	r3, fp, r3, sl
 80189b6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80189ba:	f8dc 4000 	ldr.w	r4, [ip]
 80189be:	4443      	add	r3, r8
 80189c0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80189c4:	fb0b 840a 	mla	r4, fp, sl, r8
 80189c8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80189cc:	46e2      	mov	sl, ip
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80189d4:	454f      	cmp	r7, r9
 80189d6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80189da:	f84a 3b04 	str.w	r3, [sl], #4
 80189de:	d82b      	bhi.n	8018a38 <__multiply+0x120>
 80189e0:	f8cc 8004 	str.w	r8, [ip, #4]
 80189e4:	9b01      	ldr	r3, [sp, #4]
 80189e6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80189ea:	3204      	adds	r2, #4
 80189ec:	f1ba 0f00 	cmp.w	sl, #0
 80189f0:	d020      	beq.n	8018a34 <__multiply+0x11c>
 80189f2:	682b      	ldr	r3, [r5, #0]
 80189f4:	4689      	mov	r9, r1
 80189f6:	46a8      	mov	r8, r5
 80189f8:	f04f 0b00 	mov.w	fp, #0
 80189fc:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a00:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a04:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a08:	445c      	add	r4, fp
 8018a0a:	46c4      	mov	ip, r8
 8018a0c:	b29b      	uxth	r3, r3
 8018a0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a12:	f84c 3b04 	str.w	r3, [ip], #4
 8018a16:	f859 3b04 	ldr.w	r3, [r9], #4
 8018a1a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018a1e:	0c1b      	lsrs	r3, r3, #16
 8018a20:	fb0a b303 	mla	r3, sl, r3, fp
 8018a24:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018a28:	454f      	cmp	r7, r9
 8018a2a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018a2e:	d805      	bhi.n	8018a3c <__multiply+0x124>
 8018a30:	f8c8 3004 	str.w	r3, [r8, #4]
 8018a34:	3504      	adds	r5, #4
 8018a36:	e79b      	b.n	8018970 <__multiply+0x58>
 8018a38:	46d4      	mov	ip, sl
 8018a3a:	e7b3      	b.n	80189a4 <__multiply+0x8c>
 8018a3c:	46e0      	mov	r8, ip
 8018a3e:	e7dd      	b.n	80189fc <__multiply+0xe4>
 8018a40:	3e01      	subs	r6, #1
 8018a42:	e799      	b.n	8018978 <__multiply+0x60>

08018a44 <__pow5mult>:
 8018a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a48:	4615      	mov	r5, r2
 8018a4a:	f012 0203 	ands.w	r2, r2, #3
 8018a4e:	4606      	mov	r6, r0
 8018a50:	460f      	mov	r7, r1
 8018a52:	d007      	beq.n	8018a64 <__pow5mult+0x20>
 8018a54:	3a01      	subs	r2, #1
 8018a56:	4c21      	ldr	r4, [pc, #132]	; (8018adc <__pow5mult+0x98>)
 8018a58:	2300      	movs	r3, #0
 8018a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a5e:	f7ff fe8b 	bl	8018778 <__multadd>
 8018a62:	4607      	mov	r7, r0
 8018a64:	10ad      	asrs	r5, r5, #2
 8018a66:	d035      	beq.n	8018ad4 <__pow5mult+0x90>
 8018a68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018a6a:	b93c      	cbnz	r4, 8018a7c <__pow5mult+0x38>
 8018a6c:	2010      	movs	r0, #16
 8018a6e:	f7ff fe13 	bl	8018698 <malloc>
 8018a72:	6270      	str	r0, [r6, #36]	; 0x24
 8018a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018a78:	6004      	str	r4, [r0, #0]
 8018a7a:	60c4      	str	r4, [r0, #12]
 8018a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018a84:	b94c      	cbnz	r4, 8018a9a <__pow5mult+0x56>
 8018a86:	f240 2171 	movw	r1, #625	; 0x271
 8018a8a:	4630      	mov	r0, r6
 8018a8c:	f7ff ff3b 	bl	8018906 <__i2b>
 8018a90:	2300      	movs	r3, #0
 8018a92:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a96:	4604      	mov	r4, r0
 8018a98:	6003      	str	r3, [r0, #0]
 8018a9a:	f04f 0800 	mov.w	r8, #0
 8018a9e:	07eb      	lsls	r3, r5, #31
 8018aa0:	d50a      	bpl.n	8018ab8 <__pow5mult+0x74>
 8018aa2:	4639      	mov	r1, r7
 8018aa4:	4622      	mov	r2, r4
 8018aa6:	4630      	mov	r0, r6
 8018aa8:	f7ff ff36 	bl	8018918 <__multiply>
 8018aac:	4639      	mov	r1, r7
 8018aae:	4681      	mov	r9, r0
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	f7ff fe4a 	bl	801874a <_Bfree>
 8018ab6:	464f      	mov	r7, r9
 8018ab8:	106d      	asrs	r5, r5, #1
 8018aba:	d00b      	beq.n	8018ad4 <__pow5mult+0x90>
 8018abc:	6820      	ldr	r0, [r4, #0]
 8018abe:	b938      	cbnz	r0, 8018ad0 <__pow5mult+0x8c>
 8018ac0:	4622      	mov	r2, r4
 8018ac2:	4621      	mov	r1, r4
 8018ac4:	4630      	mov	r0, r6
 8018ac6:	f7ff ff27 	bl	8018918 <__multiply>
 8018aca:	6020      	str	r0, [r4, #0]
 8018acc:	f8c0 8000 	str.w	r8, [r0]
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	e7e4      	b.n	8018a9e <__pow5mult+0x5a>
 8018ad4:	4638      	mov	r0, r7
 8018ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018ada:	bf00      	nop
 8018adc:	0801a450 	.word	0x0801a450

08018ae0 <__lshift>:
 8018ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ae4:	460c      	mov	r4, r1
 8018ae6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018aea:	6923      	ldr	r3, [r4, #16]
 8018aec:	6849      	ldr	r1, [r1, #4]
 8018aee:	eb0a 0903 	add.w	r9, sl, r3
 8018af2:	68a3      	ldr	r3, [r4, #8]
 8018af4:	4607      	mov	r7, r0
 8018af6:	4616      	mov	r6, r2
 8018af8:	f109 0501 	add.w	r5, r9, #1
 8018afc:	42ab      	cmp	r3, r5
 8018afe:	db32      	blt.n	8018b66 <__lshift+0x86>
 8018b00:	4638      	mov	r0, r7
 8018b02:	f7ff fdee 	bl	80186e2 <_Balloc>
 8018b06:	2300      	movs	r3, #0
 8018b08:	4680      	mov	r8, r0
 8018b0a:	f100 0114 	add.w	r1, r0, #20
 8018b0e:	461a      	mov	r2, r3
 8018b10:	4553      	cmp	r3, sl
 8018b12:	db2b      	blt.n	8018b6c <__lshift+0x8c>
 8018b14:	6920      	ldr	r0, [r4, #16]
 8018b16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b1a:	f104 0314 	add.w	r3, r4, #20
 8018b1e:	f016 021f 	ands.w	r2, r6, #31
 8018b22:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b26:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b2a:	d025      	beq.n	8018b78 <__lshift+0x98>
 8018b2c:	f1c2 0e20 	rsb	lr, r2, #32
 8018b30:	2000      	movs	r0, #0
 8018b32:	681e      	ldr	r6, [r3, #0]
 8018b34:	468a      	mov	sl, r1
 8018b36:	4096      	lsls	r6, r2
 8018b38:	4330      	orrs	r0, r6
 8018b3a:	f84a 0b04 	str.w	r0, [sl], #4
 8018b3e:	f853 0b04 	ldr.w	r0, [r3], #4
 8018b42:	459c      	cmp	ip, r3
 8018b44:	fa20 f00e 	lsr.w	r0, r0, lr
 8018b48:	d814      	bhi.n	8018b74 <__lshift+0x94>
 8018b4a:	6048      	str	r0, [r1, #4]
 8018b4c:	b108      	cbz	r0, 8018b52 <__lshift+0x72>
 8018b4e:	f109 0502 	add.w	r5, r9, #2
 8018b52:	3d01      	subs	r5, #1
 8018b54:	4638      	mov	r0, r7
 8018b56:	f8c8 5010 	str.w	r5, [r8, #16]
 8018b5a:	4621      	mov	r1, r4
 8018b5c:	f7ff fdf5 	bl	801874a <_Bfree>
 8018b60:	4640      	mov	r0, r8
 8018b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b66:	3101      	adds	r1, #1
 8018b68:	005b      	lsls	r3, r3, #1
 8018b6a:	e7c7      	b.n	8018afc <__lshift+0x1c>
 8018b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018b70:	3301      	adds	r3, #1
 8018b72:	e7cd      	b.n	8018b10 <__lshift+0x30>
 8018b74:	4651      	mov	r1, sl
 8018b76:	e7dc      	b.n	8018b32 <__lshift+0x52>
 8018b78:	3904      	subs	r1, #4
 8018b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b7e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018b82:	459c      	cmp	ip, r3
 8018b84:	d8f9      	bhi.n	8018b7a <__lshift+0x9a>
 8018b86:	e7e4      	b.n	8018b52 <__lshift+0x72>

08018b88 <__mcmp>:
 8018b88:	6903      	ldr	r3, [r0, #16]
 8018b8a:	690a      	ldr	r2, [r1, #16]
 8018b8c:	1a9b      	subs	r3, r3, r2
 8018b8e:	b530      	push	{r4, r5, lr}
 8018b90:	d10c      	bne.n	8018bac <__mcmp+0x24>
 8018b92:	0092      	lsls	r2, r2, #2
 8018b94:	3014      	adds	r0, #20
 8018b96:	3114      	adds	r1, #20
 8018b98:	1884      	adds	r4, r0, r2
 8018b9a:	4411      	add	r1, r2
 8018b9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018ba0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018ba4:	4295      	cmp	r5, r2
 8018ba6:	d003      	beq.n	8018bb0 <__mcmp+0x28>
 8018ba8:	d305      	bcc.n	8018bb6 <__mcmp+0x2e>
 8018baa:	2301      	movs	r3, #1
 8018bac:	4618      	mov	r0, r3
 8018bae:	bd30      	pop	{r4, r5, pc}
 8018bb0:	42a0      	cmp	r0, r4
 8018bb2:	d3f3      	bcc.n	8018b9c <__mcmp+0x14>
 8018bb4:	e7fa      	b.n	8018bac <__mcmp+0x24>
 8018bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8018bba:	e7f7      	b.n	8018bac <__mcmp+0x24>

08018bbc <__mdiff>:
 8018bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bc0:	460d      	mov	r5, r1
 8018bc2:	4607      	mov	r7, r0
 8018bc4:	4611      	mov	r1, r2
 8018bc6:	4628      	mov	r0, r5
 8018bc8:	4614      	mov	r4, r2
 8018bca:	f7ff ffdd 	bl	8018b88 <__mcmp>
 8018bce:	1e06      	subs	r6, r0, #0
 8018bd0:	d108      	bne.n	8018be4 <__mdiff+0x28>
 8018bd2:	4631      	mov	r1, r6
 8018bd4:	4638      	mov	r0, r7
 8018bd6:	f7ff fd84 	bl	80186e2 <_Balloc>
 8018bda:	2301      	movs	r3, #1
 8018bdc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018be4:	bfa4      	itt	ge
 8018be6:	4623      	movge	r3, r4
 8018be8:	462c      	movge	r4, r5
 8018bea:	4638      	mov	r0, r7
 8018bec:	6861      	ldr	r1, [r4, #4]
 8018bee:	bfa6      	itte	ge
 8018bf0:	461d      	movge	r5, r3
 8018bf2:	2600      	movge	r6, #0
 8018bf4:	2601      	movlt	r6, #1
 8018bf6:	f7ff fd74 	bl	80186e2 <_Balloc>
 8018bfa:	692b      	ldr	r3, [r5, #16]
 8018bfc:	60c6      	str	r6, [r0, #12]
 8018bfe:	6926      	ldr	r6, [r4, #16]
 8018c00:	f105 0914 	add.w	r9, r5, #20
 8018c04:	f104 0214 	add.w	r2, r4, #20
 8018c08:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018c0c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018c10:	f100 0514 	add.w	r5, r0, #20
 8018c14:	f04f 0e00 	mov.w	lr, #0
 8018c18:	f852 ab04 	ldr.w	sl, [r2], #4
 8018c1c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c20:	fa1e f18a 	uxtah	r1, lr, sl
 8018c24:	b2a3      	uxth	r3, r4
 8018c26:	1ac9      	subs	r1, r1, r3
 8018c28:	0c23      	lsrs	r3, r4, #16
 8018c2a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018c2e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018c32:	b289      	uxth	r1, r1
 8018c34:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018c38:	45c8      	cmp	r8, r9
 8018c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018c3e:	4694      	mov	ip, r2
 8018c40:	f845 3b04 	str.w	r3, [r5], #4
 8018c44:	d8e8      	bhi.n	8018c18 <__mdiff+0x5c>
 8018c46:	45bc      	cmp	ip, r7
 8018c48:	d304      	bcc.n	8018c54 <__mdiff+0x98>
 8018c4a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018c4e:	b183      	cbz	r3, 8018c72 <__mdiff+0xb6>
 8018c50:	6106      	str	r6, [r0, #16]
 8018c52:	e7c5      	b.n	8018be0 <__mdiff+0x24>
 8018c54:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018c58:	fa1e f381 	uxtah	r3, lr, r1
 8018c5c:	141a      	asrs	r2, r3, #16
 8018c5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c62:	b29b      	uxth	r3, r3
 8018c64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018c6c:	f845 3b04 	str.w	r3, [r5], #4
 8018c70:	e7e9      	b.n	8018c46 <__mdiff+0x8a>
 8018c72:	3e01      	subs	r6, #1
 8018c74:	e7e9      	b.n	8018c4a <__mdiff+0x8e>
	...

08018c78 <__ulp>:
 8018c78:	4b12      	ldr	r3, [pc, #72]	; (8018cc4 <__ulp+0x4c>)
 8018c7a:	ee10 2a90 	vmov	r2, s1
 8018c7e:	401a      	ands	r2, r3
 8018c80:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	dd04      	ble.n	8018c92 <__ulp+0x1a>
 8018c88:	2000      	movs	r0, #0
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	ec41 0b10 	vmov	d0, r0, r1
 8018c90:	4770      	bx	lr
 8018c92:	425b      	negs	r3, r3
 8018c94:	151b      	asrs	r3, r3, #20
 8018c96:	2b13      	cmp	r3, #19
 8018c98:	f04f 0000 	mov.w	r0, #0
 8018c9c:	f04f 0100 	mov.w	r1, #0
 8018ca0:	dc04      	bgt.n	8018cac <__ulp+0x34>
 8018ca2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018ca6:	fa42 f103 	asr.w	r1, r2, r3
 8018caa:	e7ef      	b.n	8018c8c <__ulp+0x14>
 8018cac:	3b14      	subs	r3, #20
 8018cae:	2b1e      	cmp	r3, #30
 8018cb0:	f04f 0201 	mov.w	r2, #1
 8018cb4:	bfda      	itte	le
 8018cb6:	f1c3 031f 	rsble	r3, r3, #31
 8018cba:	fa02 f303 	lslle.w	r3, r2, r3
 8018cbe:	4613      	movgt	r3, r2
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	e7e3      	b.n	8018c8c <__ulp+0x14>
 8018cc4:	7ff00000 	.word	0x7ff00000

08018cc8 <__b2d>:
 8018cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cca:	6905      	ldr	r5, [r0, #16]
 8018ccc:	f100 0714 	add.w	r7, r0, #20
 8018cd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018cd4:	1f2e      	subs	r6, r5, #4
 8018cd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018cda:	4620      	mov	r0, r4
 8018cdc:	f7ff fdc5 	bl	801886a <__hi0bits>
 8018ce0:	f1c0 0320 	rsb	r3, r0, #32
 8018ce4:	280a      	cmp	r0, #10
 8018ce6:	600b      	str	r3, [r1, #0]
 8018ce8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018d60 <__b2d+0x98>
 8018cec:	dc14      	bgt.n	8018d18 <__b2d+0x50>
 8018cee:	f1c0 0e0b 	rsb	lr, r0, #11
 8018cf2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018cf6:	42b7      	cmp	r7, r6
 8018cf8:	ea41 030c 	orr.w	r3, r1, ip
 8018cfc:	bf34      	ite	cc
 8018cfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d02:	2100      	movcs	r1, #0
 8018d04:	3015      	adds	r0, #21
 8018d06:	fa04 f000 	lsl.w	r0, r4, r0
 8018d0a:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d0e:	ea40 0201 	orr.w	r2, r0, r1
 8018d12:	ec43 2b10 	vmov	d0, r2, r3
 8018d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d18:	42b7      	cmp	r7, r6
 8018d1a:	bf3a      	itte	cc
 8018d1c:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d20:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d24:	2100      	movcs	r1, #0
 8018d26:	380b      	subs	r0, #11
 8018d28:	d015      	beq.n	8018d56 <__b2d+0x8e>
 8018d2a:	4084      	lsls	r4, r0
 8018d2c:	f1c0 0520 	rsb	r5, r0, #32
 8018d30:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018d34:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018d38:	42be      	cmp	r6, r7
 8018d3a:	fa21 fc05 	lsr.w	ip, r1, r5
 8018d3e:	ea44 030c 	orr.w	r3, r4, ip
 8018d42:	bf8c      	ite	hi
 8018d44:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d48:	2400      	movls	r4, #0
 8018d4a:	fa01 f000 	lsl.w	r0, r1, r0
 8018d4e:	40ec      	lsrs	r4, r5
 8018d50:	ea40 0204 	orr.w	r2, r0, r4
 8018d54:	e7dd      	b.n	8018d12 <__b2d+0x4a>
 8018d56:	ea44 030c 	orr.w	r3, r4, ip
 8018d5a:	460a      	mov	r2, r1
 8018d5c:	e7d9      	b.n	8018d12 <__b2d+0x4a>
 8018d5e:	bf00      	nop
 8018d60:	3ff00000 	.word	0x3ff00000

08018d64 <__d2b>:
 8018d64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d68:	460e      	mov	r6, r1
 8018d6a:	2101      	movs	r1, #1
 8018d6c:	ec59 8b10 	vmov	r8, r9, d0
 8018d70:	4615      	mov	r5, r2
 8018d72:	f7ff fcb6 	bl	80186e2 <_Balloc>
 8018d76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018d7a:	4607      	mov	r7, r0
 8018d7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018d80:	bb34      	cbnz	r4, 8018dd0 <__d2b+0x6c>
 8018d82:	9301      	str	r3, [sp, #4]
 8018d84:	f1b8 0300 	subs.w	r3, r8, #0
 8018d88:	d027      	beq.n	8018dda <__d2b+0x76>
 8018d8a:	a802      	add	r0, sp, #8
 8018d8c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018d90:	f7ff fd8a 	bl	80188a8 <__lo0bits>
 8018d94:	9900      	ldr	r1, [sp, #0]
 8018d96:	b1f0      	cbz	r0, 8018dd6 <__d2b+0x72>
 8018d98:	9a01      	ldr	r2, [sp, #4]
 8018d9a:	f1c0 0320 	rsb	r3, r0, #32
 8018d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8018da2:	430b      	orrs	r3, r1
 8018da4:	40c2      	lsrs	r2, r0
 8018da6:	617b      	str	r3, [r7, #20]
 8018da8:	9201      	str	r2, [sp, #4]
 8018daa:	9b01      	ldr	r3, [sp, #4]
 8018dac:	61bb      	str	r3, [r7, #24]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	bf14      	ite	ne
 8018db2:	2102      	movne	r1, #2
 8018db4:	2101      	moveq	r1, #1
 8018db6:	6139      	str	r1, [r7, #16]
 8018db8:	b1c4      	cbz	r4, 8018dec <__d2b+0x88>
 8018dba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018dbe:	4404      	add	r4, r0
 8018dc0:	6034      	str	r4, [r6, #0]
 8018dc2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018dc6:	6028      	str	r0, [r5, #0]
 8018dc8:	4638      	mov	r0, r7
 8018dca:	b003      	add	sp, #12
 8018dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018dd4:	e7d5      	b.n	8018d82 <__d2b+0x1e>
 8018dd6:	6179      	str	r1, [r7, #20]
 8018dd8:	e7e7      	b.n	8018daa <__d2b+0x46>
 8018dda:	a801      	add	r0, sp, #4
 8018ddc:	f7ff fd64 	bl	80188a8 <__lo0bits>
 8018de0:	9b01      	ldr	r3, [sp, #4]
 8018de2:	617b      	str	r3, [r7, #20]
 8018de4:	2101      	movs	r1, #1
 8018de6:	6139      	str	r1, [r7, #16]
 8018de8:	3020      	adds	r0, #32
 8018dea:	e7e5      	b.n	8018db8 <__d2b+0x54>
 8018dec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018df0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018df4:	6030      	str	r0, [r6, #0]
 8018df6:	6918      	ldr	r0, [r3, #16]
 8018df8:	f7ff fd37 	bl	801886a <__hi0bits>
 8018dfc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e00:	e7e1      	b.n	8018dc6 <__d2b+0x62>

08018e02 <__ratio>:
 8018e02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e06:	4688      	mov	r8, r1
 8018e08:	4669      	mov	r1, sp
 8018e0a:	4681      	mov	r9, r0
 8018e0c:	f7ff ff5c 	bl	8018cc8 <__b2d>
 8018e10:	a901      	add	r1, sp, #4
 8018e12:	4640      	mov	r0, r8
 8018e14:	ec57 6b10 	vmov	r6, r7, d0
 8018e18:	f7ff ff56 	bl	8018cc8 <__b2d>
 8018e1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e24:	eba3 0c02 	sub.w	ip, r3, r2
 8018e28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e2c:	1a9b      	subs	r3, r3, r2
 8018e2e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e32:	ec5b ab10 	vmov	sl, fp, d0
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	bfce      	itee	gt
 8018e3a:	463a      	movgt	r2, r7
 8018e3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e40:	465a      	movle	r2, fp
 8018e42:	4659      	mov	r1, fp
 8018e44:	463d      	mov	r5, r7
 8018e46:	bfd4      	ite	le
 8018e48:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018e4c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018e50:	4630      	mov	r0, r6
 8018e52:	ee10 2a10 	vmov	r2, s0
 8018e56:	460b      	mov	r3, r1
 8018e58:	4629      	mov	r1, r5
 8018e5a:	f7e7 fd0f 	bl	800087c <__aeabi_ddiv>
 8018e5e:	ec41 0b10 	vmov	d0, r0, r1
 8018e62:	b003      	add	sp, #12
 8018e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e68 <__copybits>:
 8018e68:	3901      	subs	r1, #1
 8018e6a:	b510      	push	{r4, lr}
 8018e6c:	1149      	asrs	r1, r1, #5
 8018e6e:	6914      	ldr	r4, [r2, #16]
 8018e70:	3101      	adds	r1, #1
 8018e72:	f102 0314 	add.w	r3, r2, #20
 8018e76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018e7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018e7e:	42a3      	cmp	r3, r4
 8018e80:	4602      	mov	r2, r0
 8018e82:	d303      	bcc.n	8018e8c <__copybits+0x24>
 8018e84:	2300      	movs	r3, #0
 8018e86:	428a      	cmp	r2, r1
 8018e88:	d305      	bcc.n	8018e96 <__copybits+0x2e>
 8018e8a:	bd10      	pop	{r4, pc}
 8018e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e90:	f840 2b04 	str.w	r2, [r0], #4
 8018e94:	e7f3      	b.n	8018e7e <__copybits+0x16>
 8018e96:	f842 3b04 	str.w	r3, [r2], #4
 8018e9a:	e7f4      	b.n	8018e86 <__copybits+0x1e>

08018e9c <__any_on>:
 8018e9c:	f100 0214 	add.w	r2, r0, #20
 8018ea0:	6900      	ldr	r0, [r0, #16]
 8018ea2:	114b      	asrs	r3, r1, #5
 8018ea4:	4298      	cmp	r0, r3
 8018ea6:	b510      	push	{r4, lr}
 8018ea8:	db11      	blt.n	8018ece <__any_on+0x32>
 8018eaa:	dd0a      	ble.n	8018ec2 <__any_on+0x26>
 8018eac:	f011 011f 	ands.w	r1, r1, #31
 8018eb0:	d007      	beq.n	8018ec2 <__any_on+0x26>
 8018eb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018eb6:	fa24 f001 	lsr.w	r0, r4, r1
 8018eba:	fa00 f101 	lsl.w	r1, r0, r1
 8018ebe:	428c      	cmp	r4, r1
 8018ec0:	d10b      	bne.n	8018eda <__any_on+0x3e>
 8018ec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d803      	bhi.n	8018ed2 <__any_on+0x36>
 8018eca:	2000      	movs	r0, #0
 8018ecc:	bd10      	pop	{r4, pc}
 8018ece:	4603      	mov	r3, r0
 8018ed0:	e7f7      	b.n	8018ec2 <__any_on+0x26>
 8018ed2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018ed6:	2900      	cmp	r1, #0
 8018ed8:	d0f5      	beq.n	8018ec6 <__any_on+0x2a>
 8018eda:	2001      	movs	r0, #1
 8018edc:	e7f6      	b.n	8018ecc <__any_on+0x30>

08018ede <_calloc_r>:
 8018ede:	b538      	push	{r3, r4, r5, lr}
 8018ee0:	fb02 f401 	mul.w	r4, r2, r1
 8018ee4:	4621      	mov	r1, r4
 8018ee6:	f000 f857 	bl	8018f98 <_malloc_r>
 8018eea:	4605      	mov	r5, r0
 8018eec:	b118      	cbz	r0, 8018ef6 <_calloc_r+0x18>
 8018eee:	4622      	mov	r2, r4
 8018ef0:	2100      	movs	r1, #0
 8018ef2:	f7fc fca1 	bl	8015838 <memset>
 8018ef6:	4628      	mov	r0, r5
 8018ef8:	bd38      	pop	{r3, r4, r5, pc}
	...

08018efc <_free_r>:
 8018efc:	b538      	push	{r3, r4, r5, lr}
 8018efe:	4605      	mov	r5, r0
 8018f00:	2900      	cmp	r1, #0
 8018f02:	d045      	beq.n	8018f90 <_free_r+0x94>
 8018f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f08:	1f0c      	subs	r4, r1, #4
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	bfb8      	it	lt
 8018f0e:	18e4      	addlt	r4, r4, r3
 8018f10:	f000 fe30 	bl	8019b74 <__malloc_lock>
 8018f14:	4a1f      	ldr	r2, [pc, #124]	; (8018f94 <_free_r+0x98>)
 8018f16:	6813      	ldr	r3, [r2, #0]
 8018f18:	4610      	mov	r0, r2
 8018f1a:	b933      	cbnz	r3, 8018f2a <_free_r+0x2e>
 8018f1c:	6063      	str	r3, [r4, #4]
 8018f1e:	6014      	str	r4, [r2, #0]
 8018f20:	4628      	mov	r0, r5
 8018f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f26:	f000 be26 	b.w	8019b76 <__malloc_unlock>
 8018f2a:	42a3      	cmp	r3, r4
 8018f2c:	d90c      	bls.n	8018f48 <_free_r+0x4c>
 8018f2e:	6821      	ldr	r1, [r4, #0]
 8018f30:	1862      	adds	r2, r4, r1
 8018f32:	4293      	cmp	r3, r2
 8018f34:	bf04      	itt	eq
 8018f36:	681a      	ldreq	r2, [r3, #0]
 8018f38:	685b      	ldreq	r3, [r3, #4]
 8018f3a:	6063      	str	r3, [r4, #4]
 8018f3c:	bf04      	itt	eq
 8018f3e:	1852      	addeq	r2, r2, r1
 8018f40:	6022      	streq	r2, [r4, #0]
 8018f42:	6004      	str	r4, [r0, #0]
 8018f44:	e7ec      	b.n	8018f20 <_free_r+0x24>
 8018f46:	4613      	mov	r3, r2
 8018f48:	685a      	ldr	r2, [r3, #4]
 8018f4a:	b10a      	cbz	r2, 8018f50 <_free_r+0x54>
 8018f4c:	42a2      	cmp	r2, r4
 8018f4e:	d9fa      	bls.n	8018f46 <_free_r+0x4a>
 8018f50:	6819      	ldr	r1, [r3, #0]
 8018f52:	1858      	adds	r0, r3, r1
 8018f54:	42a0      	cmp	r0, r4
 8018f56:	d10b      	bne.n	8018f70 <_free_r+0x74>
 8018f58:	6820      	ldr	r0, [r4, #0]
 8018f5a:	4401      	add	r1, r0
 8018f5c:	1858      	adds	r0, r3, r1
 8018f5e:	4282      	cmp	r2, r0
 8018f60:	6019      	str	r1, [r3, #0]
 8018f62:	d1dd      	bne.n	8018f20 <_free_r+0x24>
 8018f64:	6810      	ldr	r0, [r2, #0]
 8018f66:	6852      	ldr	r2, [r2, #4]
 8018f68:	605a      	str	r2, [r3, #4]
 8018f6a:	4401      	add	r1, r0
 8018f6c:	6019      	str	r1, [r3, #0]
 8018f6e:	e7d7      	b.n	8018f20 <_free_r+0x24>
 8018f70:	d902      	bls.n	8018f78 <_free_r+0x7c>
 8018f72:	230c      	movs	r3, #12
 8018f74:	602b      	str	r3, [r5, #0]
 8018f76:	e7d3      	b.n	8018f20 <_free_r+0x24>
 8018f78:	6820      	ldr	r0, [r4, #0]
 8018f7a:	1821      	adds	r1, r4, r0
 8018f7c:	428a      	cmp	r2, r1
 8018f7e:	bf04      	itt	eq
 8018f80:	6811      	ldreq	r1, [r2, #0]
 8018f82:	6852      	ldreq	r2, [r2, #4]
 8018f84:	6062      	str	r2, [r4, #4]
 8018f86:	bf04      	itt	eq
 8018f88:	1809      	addeq	r1, r1, r0
 8018f8a:	6021      	streq	r1, [r4, #0]
 8018f8c:	605c      	str	r4, [r3, #4]
 8018f8e:	e7c7      	b.n	8018f20 <_free_r+0x24>
 8018f90:	bd38      	pop	{r3, r4, r5, pc}
 8018f92:	bf00      	nop
 8018f94:	200422f8 	.word	0x200422f8

08018f98 <_malloc_r>:
 8018f98:	b570      	push	{r4, r5, r6, lr}
 8018f9a:	1ccd      	adds	r5, r1, #3
 8018f9c:	f025 0503 	bic.w	r5, r5, #3
 8018fa0:	3508      	adds	r5, #8
 8018fa2:	2d0c      	cmp	r5, #12
 8018fa4:	bf38      	it	cc
 8018fa6:	250c      	movcc	r5, #12
 8018fa8:	2d00      	cmp	r5, #0
 8018faa:	4606      	mov	r6, r0
 8018fac:	db01      	blt.n	8018fb2 <_malloc_r+0x1a>
 8018fae:	42a9      	cmp	r1, r5
 8018fb0:	d903      	bls.n	8018fba <_malloc_r+0x22>
 8018fb2:	230c      	movs	r3, #12
 8018fb4:	6033      	str	r3, [r6, #0]
 8018fb6:	2000      	movs	r0, #0
 8018fb8:	bd70      	pop	{r4, r5, r6, pc}
 8018fba:	f000 fddb 	bl	8019b74 <__malloc_lock>
 8018fbe:	4a21      	ldr	r2, [pc, #132]	; (8019044 <_malloc_r+0xac>)
 8018fc0:	6814      	ldr	r4, [r2, #0]
 8018fc2:	4621      	mov	r1, r4
 8018fc4:	b991      	cbnz	r1, 8018fec <_malloc_r+0x54>
 8018fc6:	4c20      	ldr	r4, [pc, #128]	; (8019048 <_malloc_r+0xb0>)
 8018fc8:	6823      	ldr	r3, [r4, #0]
 8018fca:	b91b      	cbnz	r3, 8018fd4 <_malloc_r+0x3c>
 8018fcc:	4630      	mov	r0, r6
 8018fce:	f000 fc91 	bl	80198f4 <_sbrk_r>
 8018fd2:	6020      	str	r0, [r4, #0]
 8018fd4:	4629      	mov	r1, r5
 8018fd6:	4630      	mov	r0, r6
 8018fd8:	f000 fc8c 	bl	80198f4 <_sbrk_r>
 8018fdc:	1c43      	adds	r3, r0, #1
 8018fde:	d124      	bne.n	801902a <_malloc_r+0x92>
 8018fe0:	230c      	movs	r3, #12
 8018fe2:	6033      	str	r3, [r6, #0]
 8018fe4:	4630      	mov	r0, r6
 8018fe6:	f000 fdc6 	bl	8019b76 <__malloc_unlock>
 8018fea:	e7e4      	b.n	8018fb6 <_malloc_r+0x1e>
 8018fec:	680b      	ldr	r3, [r1, #0]
 8018fee:	1b5b      	subs	r3, r3, r5
 8018ff0:	d418      	bmi.n	8019024 <_malloc_r+0x8c>
 8018ff2:	2b0b      	cmp	r3, #11
 8018ff4:	d90f      	bls.n	8019016 <_malloc_r+0x7e>
 8018ff6:	600b      	str	r3, [r1, #0]
 8018ff8:	50cd      	str	r5, [r1, r3]
 8018ffa:	18cc      	adds	r4, r1, r3
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	f000 fdba 	bl	8019b76 <__malloc_unlock>
 8019002:	f104 000b 	add.w	r0, r4, #11
 8019006:	1d23      	adds	r3, r4, #4
 8019008:	f020 0007 	bic.w	r0, r0, #7
 801900c:	1ac3      	subs	r3, r0, r3
 801900e:	d0d3      	beq.n	8018fb8 <_malloc_r+0x20>
 8019010:	425a      	negs	r2, r3
 8019012:	50e2      	str	r2, [r4, r3]
 8019014:	e7d0      	b.n	8018fb8 <_malloc_r+0x20>
 8019016:	428c      	cmp	r4, r1
 8019018:	684b      	ldr	r3, [r1, #4]
 801901a:	bf16      	itet	ne
 801901c:	6063      	strne	r3, [r4, #4]
 801901e:	6013      	streq	r3, [r2, #0]
 8019020:	460c      	movne	r4, r1
 8019022:	e7eb      	b.n	8018ffc <_malloc_r+0x64>
 8019024:	460c      	mov	r4, r1
 8019026:	6849      	ldr	r1, [r1, #4]
 8019028:	e7cc      	b.n	8018fc4 <_malloc_r+0x2c>
 801902a:	1cc4      	adds	r4, r0, #3
 801902c:	f024 0403 	bic.w	r4, r4, #3
 8019030:	42a0      	cmp	r0, r4
 8019032:	d005      	beq.n	8019040 <_malloc_r+0xa8>
 8019034:	1a21      	subs	r1, r4, r0
 8019036:	4630      	mov	r0, r6
 8019038:	f000 fc5c 	bl	80198f4 <_sbrk_r>
 801903c:	3001      	adds	r0, #1
 801903e:	d0cf      	beq.n	8018fe0 <_malloc_r+0x48>
 8019040:	6025      	str	r5, [r4, #0]
 8019042:	e7db      	b.n	8018ffc <_malloc_r+0x64>
 8019044:	200422f8 	.word	0x200422f8
 8019048:	200422fc 	.word	0x200422fc

0801904c <__ssputs_r>:
 801904c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019050:	688e      	ldr	r6, [r1, #8]
 8019052:	429e      	cmp	r6, r3
 8019054:	4682      	mov	sl, r0
 8019056:	460c      	mov	r4, r1
 8019058:	4690      	mov	r8, r2
 801905a:	4699      	mov	r9, r3
 801905c:	d837      	bhi.n	80190ce <__ssputs_r+0x82>
 801905e:	898a      	ldrh	r2, [r1, #12]
 8019060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019064:	d031      	beq.n	80190ca <__ssputs_r+0x7e>
 8019066:	6825      	ldr	r5, [r4, #0]
 8019068:	6909      	ldr	r1, [r1, #16]
 801906a:	1a6f      	subs	r7, r5, r1
 801906c:	6965      	ldr	r5, [r4, #20]
 801906e:	2302      	movs	r3, #2
 8019070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019074:	fb95 f5f3 	sdiv	r5, r5, r3
 8019078:	f109 0301 	add.w	r3, r9, #1
 801907c:	443b      	add	r3, r7
 801907e:	429d      	cmp	r5, r3
 8019080:	bf38      	it	cc
 8019082:	461d      	movcc	r5, r3
 8019084:	0553      	lsls	r3, r2, #21
 8019086:	d530      	bpl.n	80190ea <__ssputs_r+0x9e>
 8019088:	4629      	mov	r1, r5
 801908a:	f7ff ff85 	bl	8018f98 <_malloc_r>
 801908e:	4606      	mov	r6, r0
 8019090:	b950      	cbnz	r0, 80190a8 <__ssputs_r+0x5c>
 8019092:	230c      	movs	r3, #12
 8019094:	f8ca 3000 	str.w	r3, [sl]
 8019098:	89a3      	ldrh	r3, [r4, #12]
 801909a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801909e:	81a3      	strh	r3, [r4, #12]
 80190a0:	f04f 30ff 	mov.w	r0, #4294967295
 80190a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190a8:	463a      	mov	r2, r7
 80190aa:	6921      	ldr	r1, [r4, #16]
 80190ac:	f7ff fb0e 	bl	80186cc <memcpy>
 80190b0:	89a3      	ldrh	r3, [r4, #12]
 80190b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80190b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190ba:	81a3      	strh	r3, [r4, #12]
 80190bc:	6126      	str	r6, [r4, #16]
 80190be:	6165      	str	r5, [r4, #20]
 80190c0:	443e      	add	r6, r7
 80190c2:	1bed      	subs	r5, r5, r7
 80190c4:	6026      	str	r6, [r4, #0]
 80190c6:	60a5      	str	r5, [r4, #8]
 80190c8:	464e      	mov	r6, r9
 80190ca:	454e      	cmp	r6, r9
 80190cc:	d900      	bls.n	80190d0 <__ssputs_r+0x84>
 80190ce:	464e      	mov	r6, r9
 80190d0:	4632      	mov	r2, r6
 80190d2:	4641      	mov	r1, r8
 80190d4:	6820      	ldr	r0, [r4, #0]
 80190d6:	f000 fd34 	bl	8019b42 <memmove>
 80190da:	68a3      	ldr	r3, [r4, #8]
 80190dc:	1b9b      	subs	r3, r3, r6
 80190de:	60a3      	str	r3, [r4, #8]
 80190e0:	6823      	ldr	r3, [r4, #0]
 80190e2:	441e      	add	r6, r3
 80190e4:	6026      	str	r6, [r4, #0]
 80190e6:	2000      	movs	r0, #0
 80190e8:	e7dc      	b.n	80190a4 <__ssputs_r+0x58>
 80190ea:	462a      	mov	r2, r5
 80190ec:	f000 fd44 	bl	8019b78 <_realloc_r>
 80190f0:	4606      	mov	r6, r0
 80190f2:	2800      	cmp	r0, #0
 80190f4:	d1e2      	bne.n	80190bc <__ssputs_r+0x70>
 80190f6:	6921      	ldr	r1, [r4, #16]
 80190f8:	4650      	mov	r0, sl
 80190fa:	f7ff feff 	bl	8018efc <_free_r>
 80190fe:	e7c8      	b.n	8019092 <__ssputs_r+0x46>

08019100 <_svfiprintf_r>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	461d      	mov	r5, r3
 8019106:	898b      	ldrh	r3, [r1, #12]
 8019108:	061f      	lsls	r7, r3, #24
 801910a:	b09d      	sub	sp, #116	; 0x74
 801910c:	4680      	mov	r8, r0
 801910e:	460c      	mov	r4, r1
 8019110:	4616      	mov	r6, r2
 8019112:	d50f      	bpl.n	8019134 <_svfiprintf_r+0x34>
 8019114:	690b      	ldr	r3, [r1, #16]
 8019116:	b96b      	cbnz	r3, 8019134 <_svfiprintf_r+0x34>
 8019118:	2140      	movs	r1, #64	; 0x40
 801911a:	f7ff ff3d 	bl	8018f98 <_malloc_r>
 801911e:	6020      	str	r0, [r4, #0]
 8019120:	6120      	str	r0, [r4, #16]
 8019122:	b928      	cbnz	r0, 8019130 <_svfiprintf_r+0x30>
 8019124:	230c      	movs	r3, #12
 8019126:	f8c8 3000 	str.w	r3, [r8]
 801912a:	f04f 30ff 	mov.w	r0, #4294967295
 801912e:	e0c8      	b.n	80192c2 <_svfiprintf_r+0x1c2>
 8019130:	2340      	movs	r3, #64	; 0x40
 8019132:	6163      	str	r3, [r4, #20]
 8019134:	2300      	movs	r3, #0
 8019136:	9309      	str	r3, [sp, #36]	; 0x24
 8019138:	2320      	movs	r3, #32
 801913a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801913e:	2330      	movs	r3, #48	; 0x30
 8019140:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019144:	9503      	str	r5, [sp, #12]
 8019146:	f04f 0b01 	mov.w	fp, #1
 801914a:	4637      	mov	r7, r6
 801914c:	463d      	mov	r5, r7
 801914e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019152:	b10b      	cbz	r3, 8019158 <_svfiprintf_r+0x58>
 8019154:	2b25      	cmp	r3, #37	; 0x25
 8019156:	d13e      	bne.n	80191d6 <_svfiprintf_r+0xd6>
 8019158:	ebb7 0a06 	subs.w	sl, r7, r6
 801915c:	d00b      	beq.n	8019176 <_svfiprintf_r+0x76>
 801915e:	4653      	mov	r3, sl
 8019160:	4632      	mov	r2, r6
 8019162:	4621      	mov	r1, r4
 8019164:	4640      	mov	r0, r8
 8019166:	f7ff ff71 	bl	801904c <__ssputs_r>
 801916a:	3001      	adds	r0, #1
 801916c:	f000 80a4 	beq.w	80192b8 <_svfiprintf_r+0x1b8>
 8019170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019172:	4453      	add	r3, sl
 8019174:	9309      	str	r3, [sp, #36]	; 0x24
 8019176:	783b      	ldrb	r3, [r7, #0]
 8019178:	2b00      	cmp	r3, #0
 801917a:	f000 809d 	beq.w	80192b8 <_svfiprintf_r+0x1b8>
 801917e:	2300      	movs	r3, #0
 8019180:	f04f 32ff 	mov.w	r2, #4294967295
 8019184:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019188:	9304      	str	r3, [sp, #16]
 801918a:	9307      	str	r3, [sp, #28]
 801918c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019190:	931a      	str	r3, [sp, #104]	; 0x68
 8019192:	462f      	mov	r7, r5
 8019194:	2205      	movs	r2, #5
 8019196:	f817 1b01 	ldrb.w	r1, [r7], #1
 801919a:	4850      	ldr	r0, [pc, #320]	; (80192dc <_svfiprintf_r+0x1dc>)
 801919c:	f7e7 f838 	bl	8000210 <memchr>
 80191a0:	9b04      	ldr	r3, [sp, #16]
 80191a2:	b9d0      	cbnz	r0, 80191da <_svfiprintf_r+0xda>
 80191a4:	06d9      	lsls	r1, r3, #27
 80191a6:	bf44      	itt	mi
 80191a8:	2220      	movmi	r2, #32
 80191aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191ae:	071a      	lsls	r2, r3, #28
 80191b0:	bf44      	itt	mi
 80191b2:	222b      	movmi	r2, #43	; 0x2b
 80191b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191b8:	782a      	ldrb	r2, [r5, #0]
 80191ba:	2a2a      	cmp	r2, #42	; 0x2a
 80191bc:	d015      	beq.n	80191ea <_svfiprintf_r+0xea>
 80191be:	9a07      	ldr	r2, [sp, #28]
 80191c0:	462f      	mov	r7, r5
 80191c2:	2000      	movs	r0, #0
 80191c4:	250a      	movs	r5, #10
 80191c6:	4639      	mov	r1, r7
 80191c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191cc:	3b30      	subs	r3, #48	; 0x30
 80191ce:	2b09      	cmp	r3, #9
 80191d0:	d94d      	bls.n	801926e <_svfiprintf_r+0x16e>
 80191d2:	b1b8      	cbz	r0, 8019204 <_svfiprintf_r+0x104>
 80191d4:	e00f      	b.n	80191f6 <_svfiprintf_r+0xf6>
 80191d6:	462f      	mov	r7, r5
 80191d8:	e7b8      	b.n	801914c <_svfiprintf_r+0x4c>
 80191da:	4a40      	ldr	r2, [pc, #256]	; (80192dc <_svfiprintf_r+0x1dc>)
 80191dc:	1a80      	subs	r0, r0, r2
 80191de:	fa0b f000 	lsl.w	r0, fp, r0
 80191e2:	4318      	orrs	r0, r3
 80191e4:	9004      	str	r0, [sp, #16]
 80191e6:	463d      	mov	r5, r7
 80191e8:	e7d3      	b.n	8019192 <_svfiprintf_r+0x92>
 80191ea:	9a03      	ldr	r2, [sp, #12]
 80191ec:	1d11      	adds	r1, r2, #4
 80191ee:	6812      	ldr	r2, [r2, #0]
 80191f0:	9103      	str	r1, [sp, #12]
 80191f2:	2a00      	cmp	r2, #0
 80191f4:	db01      	blt.n	80191fa <_svfiprintf_r+0xfa>
 80191f6:	9207      	str	r2, [sp, #28]
 80191f8:	e004      	b.n	8019204 <_svfiprintf_r+0x104>
 80191fa:	4252      	negs	r2, r2
 80191fc:	f043 0302 	orr.w	r3, r3, #2
 8019200:	9207      	str	r2, [sp, #28]
 8019202:	9304      	str	r3, [sp, #16]
 8019204:	783b      	ldrb	r3, [r7, #0]
 8019206:	2b2e      	cmp	r3, #46	; 0x2e
 8019208:	d10c      	bne.n	8019224 <_svfiprintf_r+0x124>
 801920a:	787b      	ldrb	r3, [r7, #1]
 801920c:	2b2a      	cmp	r3, #42	; 0x2a
 801920e:	d133      	bne.n	8019278 <_svfiprintf_r+0x178>
 8019210:	9b03      	ldr	r3, [sp, #12]
 8019212:	1d1a      	adds	r2, r3, #4
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	9203      	str	r2, [sp, #12]
 8019218:	2b00      	cmp	r3, #0
 801921a:	bfb8      	it	lt
 801921c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019220:	3702      	adds	r7, #2
 8019222:	9305      	str	r3, [sp, #20]
 8019224:	4d2e      	ldr	r5, [pc, #184]	; (80192e0 <_svfiprintf_r+0x1e0>)
 8019226:	7839      	ldrb	r1, [r7, #0]
 8019228:	2203      	movs	r2, #3
 801922a:	4628      	mov	r0, r5
 801922c:	f7e6 fff0 	bl	8000210 <memchr>
 8019230:	b138      	cbz	r0, 8019242 <_svfiprintf_r+0x142>
 8019232:	2340      	movs	r3, #64	; 0x40
 8019234:	1b40      	subs	r0, r0, r5
 8019236:	fa03 f000 	lsl.w	r0, r3, r0
 801923a:	9b04      	ldr	r3, [sp, #16]
 801923c:	4303      	orrs	r3, r0
 801923e:	3701      	adds	r7, #1
 8019240:	9304      	str	r3, [sp, #16]
 8019242:	7839      	ldrb	r1, [r7, #0]
 8019244:	4827      	ldr	r0, [pc, #156]	; (80192e4 <_svfiprintf_r+0x1e4>)
 8019246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801924a:	2206      	movs	r2, #6
 801924c:	1c7e      	adds	r6, r7, #1
 801924e:	f7e6 ffdf 	bl	8000210 <memchr>
 8019252:	2800      	cmp	r0, #0
 8019254:	d038      	beq.n	80192c8 <_svfiprintf_r+0x1c8>
 8019256:	4b24      	ldr	r3, [pc, #144]	; (80192e8 <_svfiprintf_r+0x1e8>)
 8019258:	bb13      	cbnz	r3, 80192a0 <_svfiprintf_r+0x1a0>
 801925a:	9b03      	ldr	r3, [sp, #12]
 801925c:	3307      	adds	r3, #7
 801925e:	f023 0307 	bic.w	r3, r3, #7
 8019262:	3308      	adds	r3, #8
 8019264:	9303      	str	r3, [sp, #12]
 8019266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019268:	444b      	add	r3, r9
 801926a:	9309      	str	r3, [sp, #36]	; 0x24
 801926c:	e76d      	b.n	801914a <_svfiprintf_r+0x4a>
 801926e:	fb05 3202 	mla	r2, r5, r2, r3
 8019272:	2001      	movs	r0, #1
 8019274:	460f      	mov	r7, r1
 8019276:	e7a6      	b.n	80191c6 <_svfiprintf_r+0xc6>
 8019278:	2300      	movs	r3, #0
 801927a:	3701      	adds	r7, #1
 801927c:	9305      	str	r3, [sp, #20]
 801927e:	4619      	mov	r1, r3
 8019280:	250a      	movs	r5, #10
 8019282:	4638      	mov	r0, r7
 8019284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019288:	3a30      	subs	r2, #48	; 0x30
 801928a:	2a09      	cmp	r2, #9
 801928c:	d903      	bls.n	8019296 <_svfiprintf_r+0x196>
 801928e:	2b00      	cmp	r3, #0
 8019290:	d0c8      	beq.n	8019224 <_svfiprintf_r+0x124>
 8019292:	9105      	str	r1, [sp, #20]
 8019294:	e7c6      	b.n	8019224 <_svfiprintf_r+0x124>
 8019296:	fb05 2101 	mla	r1, r5, r1, r2
 801929a:	2301      	movs	r3, #1
 801929c:	4607      	mov	r7, r0
 801929e:	e7f0      	b.n	8019282 <_svfiprintf_r+0x182>
 80192a0:	ab03      	add	r3, sp, #12
 80192a2:	9300      	str	r3, [sp, #0]
 80192a4:	4622      	mov	r2, r4
 80192a6:	4b11      	ldr	r3, [pc, #68]	; (80192ec <_svfiprintf_r+0x1ec>)
 80192a8:	a904      	add	r1, sp, #16
 80192aa:	4640      	mov	r0, r8
 80192ac:	f7fc fb60 	bl	8015970 <_printf_float>
 80192b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80192b4:	4681      	mov	r9, r0
 80192b6:	d1d6      	bne.n	8019266 <_svfiprintf_r+0x166>
 80192b8:	89a3      	ldrh	r3, [r4, #12]
 80192ba:	065b      	lsls	r3, r3, #25
 80192bc:	f53f af35 	bmi.w	801912a <_svfiprintf_r+0x2a>
 80192c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192c2:	b01d      	add	sp, #116	; 0x74
 80192c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192c8:	ab03      	add	r3, sp, #12
 80192ca:	9300      	str	r3, [sp, #0]
 80192cc:	4622      	mov	r2, r4
 80192ce:	4b07      	ldr	r3, [pc, #28]	; (80192ec <_svfiprintf_r+0x1ec>)
 80192d0:	a904      	add	r1, sp, #16
 80192d2:	4640      	mov	r0, r8
 80192d4:	f7fc fe02 	bl	8015edc <_printf_i>
 80192d8:	e7ea      	b.n	80192b0 <_svfiprintf_r+0x1b0>
 80192da:	bf00      	nop
 80192dc:	0801a45c 	.word	0x0801a45c
 80192e0:	0801a462 	.word	0x0801a462
 80192e4:	0801a466 	.word	0x0801a466
 80192e8:	08015971 	.word	0x08015971
 80192ec:	0801904d 	.word	0x0801904d

080192f0 <_sungetc_r>:
 80192f0:	b538      	push	{r3, r4, r5, lr}
 80192f2:	1c4b      	adds	r3, r1, #1
 80192f4:	4614      	mov	r4, r2
 80192f6:	d103      	bne.n	8019300 <_sungetc_r+0x10>
 80192f8:	f04f 35ff 	mov.w	r5, #4294967295
 80192fc:	4628      	mov	r0, r5
 80192fe:	bd38      	pop	{r3, r4, r5, pc}
 8019300:	8993      	ldrh	r3, [r2, #12]
 8019302:	f023 0320 	bic.w	r3, r3, #32
 8019306:	8193      	strh	r3, [r2, #12]
 8019308:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801930a:	6852      	ldr	r2, [r2, #4]
 801930c:	b2cd      	uxtb	r5, r1
 801930e:	b18b      	cbz	r3, 8019334 <_sungetc_r+0x44>
 8019310:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019312:	4293      	cmp	r3, r2
 8019314:	dd08      	ble.n	8019328 <_sungetc_r+0x38>
 8019316:	6823      	ldr	r3, [r4, #0]
 8019318:	1e5a      	subs	r2, r3, #1
 801931a:	6022      	str	r2, [r4, #0]
 801931c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019320:	6863      	ldr	r3, [r4, #4]
 8019322:	3301      	adds	r3, #1
 8019324:	6063      	str	r3, [r4, #4]
 8019326:	e7e9      	b.n	80192fc <_sungetc_r+0xc>
 8019328:	4621      	mov	r1, r4
 801932a:	f000 fbc3 	bl	8019ab4 <__submore>
 801932e:	2800      	cmp	r0, #0
 8019330:	d0f1      	beq.n	8019316 <_sungetc_r+0x26>
 8019332:	e7e1      	b.n	80192f8 <_sungetc_r+0x8>
 8019334:	6921      	ldr	r1, [r4, #16]
 8019336:	6823      	ldr	r3, [r4, #0]
 8019338:	b151      	cbz	r1, 8019350 <_sungetc_r+0x60>
 801933a:	4299      	cmp	r1, r3
 801933c:	d208      	bcs.n	8019350 <_sungetc_r+0x60>
 801933e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019342:	42a9      	cmp	r1, r5
 8019344:	d104      	bne.n	8019350 <_sungetc_r+0x60>
 8019346:	3b01      	subs	r3, #1
 8019348:	3201      	adds	r2, #1
 801934a:	6023      	str	r3, [r4, #0]
 801934c:	6062      	str	r2, [r4, #4]
 801934e:	e7d5      	b.n	80192fc <_sungetc_r+0xc>
 8019350:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019354:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019358:	6363      	str	r3, [r4, #52]	; 0x34
 801935a:	2303      	movs	r3, #3
 801935c:	63a3      	str	r3, [r4, #56]	; 0x38
 801935e:	4623      	mov	r3, r4
 8019360:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019364:	6023      	str	r3, [r4, #0]
 8019366:	2301      	movs	r3, #1
 8019368:	e7dc      	b.n	8019324 <_sungetc_r+0x34>

0801936a <__ssrefill_r>:
 801936a:	b510      	push	{r4, lr}
 801936c:	460c      	mov	r4, r1
 801936e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019370:	b169      	cbz	r1, 801938e <__ssrefill_r+0x24>
 8019372:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019376:	4299      	cmp	r1, r3
 8019378:	d001      	beq.n	801937e <__ssrefill_r+0x14>
 801937a:	f7ff fdbf 	bl	8018efc <_free_r>
 801937e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019380:	6063      	str	r3, [r4, #4]
 8019382:	2000      	movs	r0, #0
 8019384:	6360      	str	r0, [r4, #52]	; 0x34
 8019386:	b113      	cbz	r3, 801938e <__ssrefill_r+0x24>
 8019388:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801938a:	6023      	str	r3, [r4, #0]
 801938c:	bd10      	pop	{r4, pc}
 801938e:	6923      	ldr	r3, [r4, #16]
 8019390:	6023      	str	r3, [r4, #0]
 8019392:	2300      	movs	r3, #0
 8019394:	6063      	str	r3, [r4, #4]
 8019396:	89a3      	ldrh	r3, [r4, #12]
 8019398:	f043 0320 	orr.w	r3, r3, #32
 801939c:	81a3      	strh	r3, [r4, #12]
 801939e:	f04f 30ff 	mov.w	r0, #4294967295
 80193a2:	e7f3      	b.n	801938c <__ssrefill_r+0x22>

080193a4 <__ssvfiscanf_r>:
 80193a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193a8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80193ac:	460c      	mov	r4, r1
 80193ae:	2100      	movs	r1, #0
 80193b0:	9144      	str	r1, [sp, #272]	; 0x110
 80193b2:	9145      	str	r1, [sp, #276]	; 0x114
 80193b4:	499f      	ldr	r1, [pc, #636]	; (8019634 <__ssvfiscanf_r+0x290>)
 80193b6:	91a0      	str	r1, [sp, #640]	; 0x280
 80193b8:	f10d 0804 	add.w	r8, sp, #4
 80193bc:	499e      	ldr	r1, [pc, #632]	; (8019638 <__ssvfiscanf_r+0x294>)
 80193be:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801963c <__ssvfiscanf_r+0x298>
 80193c2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80193c6:	4606      	mov	r6, r0
 80193c8:	4692      	mov	sl, r2
 80193ca:	91a1      	str	r1, [sp, #644]	; 0x284
 80193cc:	9300      	str	r3, [sp, #0]
 80193ce:	270a      	movs	r7, #10
 80193d0:	f89a 3000 	ldrb.w	r3, [sl]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	f000 812a 	beq.w	801962e <__ssvfiscanf_r+0x28a>
 80193da:	4655      	mov	r5, sl
 80193dc:	f7ff f93e 	bl	801865c <__locale_ctype_ptr>
 80193e0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80193e4:	4458      	add	r0, fp
 80193e6:	7843      	ldrb	r3, [r0, #1]
 80193e8:	f013 0308 	ands.w	r3, r3, #8
 80193ec:	d01c      	beq.n	8019428 <__ssvfiscanf_r+0x84>
 80193ee:	6863      	ldr	r3, [r4, #4]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	dd12      	ble.n	801941a <__ssvfiscanf_r+0x76>
 80193f4:	f7ff f932 	bl	801865c <__locale_ctype_ptr>
 80193f8:	6823      	ldr	r3, [r4, #0]
 80193fa:	781a      	ldrb	r2, [r3, #0]
 80193fc:	4410      	add	r0, r2
 80193fe:	7842      	ldrb	r2, [r0, #1]
 8019400:	0712      	lsls	r2, r2, #28
 8019402:	d401      	bmi.n	8019408 <__ssvfiscanf_r+0x64>
 8019404:	46aa      	mov	sl, r5
 8019406:	e7e3      	b.n	80193d0 <__ssvfiscanf_r+0x2c>
 8019408:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801940a:	3201      	adds	r2, #1
 801940c:	9245      	str	r2, [sp, #276]	; 0x114
 801940e:	6862      	ldr	r2, [r4, #4]
 8019410:	3301      	adds	r3, #1
 8019412:	3a01      	subs	r2, #1
 8019414:	6062      	str	r2, [r4, #4]
 8019416:	6023      	str	r3, [r4, #0]
 8019418:	e7e9      	b.n	80193ee <__ssvfiscanf_r+0x4a>
 801941a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801941c:	4621      	mov	r1, r4
 801941e:	4630      	mov	r0, r6
 8019420:	4798      	blx	r3
 8019422:	2800      	cmp	r0, #0
 8019424:	d0e6      	beq.n	80193f4 <__ssvfiscanf_r+0x50>
 8019426:	e7ed      	b.n	8019404 <__ssvfiscanf_r+0x60>
 8019428:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801942c:	f040 8082 	bne.w	8019534 <__ssvfiscanf_r+0x190>
 8019430:	9343      	str	r3, [sp, #268]	; 0x10c
 8019432:	9341      	str	r3, [sp, #260]	; 0x104
 8019434:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019438:	2b2a      	cmp	r3, #42	; 0x2a
 801943a:	d103      	bne.n	8019444 <__ssvfiscanf_r+0xa0>
 801943c:	2310      	movs	r3, #16
 801943e:	9341      	str	r3, [sp, #260]	; 0x104
 8019440:	f10a 0502 	add.w	r5, sl, #2
 8019444:	46aa      	mov	sl, r5
 8019446:	f815 1b01 	ldrb.w	r1, [r5], #1
 801944a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801944e:	2a09      	cmp	r2, #9
 8019450:	d922      	bls.n	8019498 <__ssvfiscanf_r+0xf4>
 8019452:	2203      	movs	r2, #3
 8019454:	4879      	ldr	r0, [pc, #484]	; (801963c <__ssvfiscanf_r+0x298>)
 8019456:	f7e6 fedb 	bl	8000210 <memchr>
 801945a:	b138      	cbz	r0, 801946c <__ssvfiscanf_r+0xc8>
 801945c:	eba0 0309 	sub.w	r3, r0, r9
 8019460:	2001      	movs	r0, #1
 8019462:	4098      	lsls	r0, r3
 8019464:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019466:	4318      	orrs	r0, r3
 8019468:	9041      	str	r0, [sp, #260]	; 0x104
 801946a:	46aa      	mov	sl, r5
 801946c:	f89a 3000 	ldrb.w	r3, [sl]
 8019470:	2b67      	cmp	r3, #103	; 0x67
 8019472:	f10a 0501 	add.w	r5, sl, #1
 8019476:	d82b      	bhi.n	80194d0 <__ssvfiscanf_r+0x12c>
 8019478:	2b65      	cmp	r3, #101	; 0x65
 801947a:	f080 809f 	bcs.w	80195bc <__ssvfiscanf_r+0x218>
 801947e:	2b47      	cmp	r3, #71	; 0x47
 8019480:	d810      	bhi.n	80194a4 <__ssvfiscanf_r+0x100>
 8019482:	2b45      	cmp	r3, #69	; 0x45
 8019484:	f080 809a 	bcs.w	80195bc <__ssvfiscanf_r+0x218>
 8019488:	2b00      	cmp	r3, #0
 801948a:	d06c      	beq.n	8019566 <__ssvfiscanf_r+0x1c2>
 801948c:	2b25      	cmp	r3, #37	; 0x25
 801948e:	d051      	beq.n	8019534 <__ssvfiscanf_r+0x190>
 8019490:	2303      	movs	r3, #3
 8019492:	9347      	str	r3, [sp, #284]	; 0x11c
 8019494:	9742      	str	r7, [sp, #264]	; 0x108
 8019496:	e027      	b.n	80194e8 <__ssvfiscanf_r+0x144>
 8019498:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801949a:	fb07 1303 	mla	r3, r7, r3, r1
 801949e:	3b30      	subs	r3, #48	; 0x30
 80194a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80194a2:	e7cf      	b.n	8019444 <__ssvfiscanf_r+0xa0>
 80194a4:	2b5b      	cmp	r3, #91	; 0x5b
 80194a6:	d06a      	beq.n	801957e <__ssvfiscanf_r+0x1da>
 80194a8:	d80c      	bhi.n	80194c4 <__ssvfiscanf_r+0x120>
 80194aa:	2b58      	cmp	r3, #88	; 0x58
 80194ac:	d1f0      	bne.n	8019490 <__ssvfiscanf_r+0xec>
 80194ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80194b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80194b4:	9241      	str	r2, [sp, #260]	; 0x104
 80194b6:	2210      	movs	r2, #16
 80194b8:	9242      	str	r2, [sp, #264]	; 0x108
 80194ba:	2b6e      	cmp	r3, #110	; 0x6e
 80194bc:	bf8c      	ite	hi
 80194be:	2304      	movhi	r3, #4
 80194c0:	2303      	movls	r3, #3
 80194c2:	e010      	b.n	80194e6 <__ssvfiscanf_r+0x142>
 80194c4:	2b63      	cmp	r3, #99	; 0x63
 80194c6:	d065      	beq.n	8019594 <__ssvfiscanf_r+0x1f0>
 80194c8:	2b64      	cmp	r3, #100	; 0x64
 80194ca:	d1e1      	bne.n	8019490 <__ssvfiscanf_r+0xec>
 80194cc:	9742      	str	r7, [sp, #264]	; 0x108
 80194ce:	e7f4      	b.n	80194ba <__ssvfiscanf_r+0x116>
 80194d0:	2b70      	cmp	r3, #112	; 0x70
 80194d2:	d04b      	beq.n	801956c <__ssvfiscanf_r+0x1c8>
 80194d4:	d826      	bhi.n	8019524 <__ssvfiscanf_r+0x180>
 80194d6:	2b6e      	cmp	r3, #110	; 0x6e
 80194d8:	d062      	beq.n	80195a0 <__ssvfiscanf_r+0x1fc>
 80194da:	d84c      	bhi.n	8019576 <__ssvfiscanf_r+0x1d2>
 80194dc:	2b69      	cmp	r3, #105	; 0x69
 80194de:	d1d7      	bne.n	8019490 <__ssvfiscanf_r+0xec>
 80194e0:	2300      	movs	r3, #0
 80194e2:	9342      	str	r3, [sp, #264]	; 0x108
 80194e4:	2303      	movs	r3, #3
 80194e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80194e8:	6863      	ldr	r3, [r4, #4]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	dd68      	ble.n	80195c0 <__ssvfiscanf_r+0x21c>
 80194ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80194f0:	0659      	lsls	r1, r3, #25
 80194f2:	d407      	bmi.n	8019504 <__ssvfiscanf_r+0x160>
 80194f4:	f7ff f8b2 	bl	801865c <__locale_ctype_ptr>
 80194f8:	6823      	ldr	r3, [r4, #0]
 80194fa:	781a      	ldrb	r2, [r3, #0]
 80194fc:	4410      	add	r0, r2
 80194fe:	7842      	ldrb	r2, [r0, #1]
 8019500:	0712      	lsls	r2, r2, #28
 8019502:	d464      	bmi.n	80195ce <__ssvfiscanf_r+0x22a>
 8019504:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019506:	2b02      	cmp	r3, #2
 8019508:	dc73      	bgt.n	80195f2 <__ssvfiscanf_r+0x24e>
 801950a:	466b      	mov	r3, sp
 801950c:	4622      	mov	r2, r4
 801950e:	a941      	add	r1, sp, #260	; 0x104
 8019510:	4630      	mov	r0, r6
 8019512:	f000 f897 	bl	8019644 <_scanf_chars>
 8019516:	2801      	cmp	r0, #1
 8019518:	f000 8089 	beq.w	801962e <__ssvfiscanf_r+0x28a>
 801951c:	2802      	cmp	r0, #2
 801951e:	f47f af71 	bne.w	8019404 <__ssvfiscanf_r+0x60>
 8019522:	e01d      	b.n	8019560 <__ssvfiscanf_r+0x1bc>
 8019524:	2b75      	cmp	r3, #117	; 0x75
 8019526:	d0d1      	beq.n	80194cc <__ssvfiscanf_r+0x128>
 8019528:	2b78      	cmp	r3, #120	; 0x78
 801952a:	d0c0      	beq.n	80194ae <__ssvfiscanf_r+0x10a>
 801952c:	2b73      	cmp	r3, #115	; 0x73
 801952e:	d1af      	bne.n	8019490 <__ssvfiscanf_r+0xec>
 8019530:	2302      	movs	r3, #2
 8019532:	e7d8      	b.n	80194e6 <__ssvfiscanf_r+0x142>
 8019534:	6863      	ldr	r3, [r4, #4]
 8019536:	2b00      	cmp	r3, #0
 8019538:	dd0c      	ble.n	8019554 <__ssvfiscanf_r+0x1b0>
 801953a:	6823      	ldr	r3, [r4, #0]
 801953c:	781a      	ldrb	r2, [r3, #0]
 801953e:	455a      	cmp	r2, fp
 8019540:	d175      	bne.n	801962e <__ssvfiscanf_r+0x28a>
 8019542:	3301      	adds	r3, #1
 8019544:	6862      	ldr	r2, [r4, #4]
 8019546:	6023      	str	r3, [r4, #0]
 8019548:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801954a:	3a01      	subs	r2, #1
 801954c:	3301      	adds	r3, #1
 801954e:	6062      	str	r2, [r4, #4]
 8019550:	9345      	str	r3, [sp, #276]	; 0x114
 8019552:	e757      	b.n	8019404 <__ssvfiscanf_r+0x60>
 8019554:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019556:	4621      	mov	r1, r4
 8019558:	4630      	mov	r0, r6
 801955a:	4798      	blx	r3
 801955c:	2800      	cmp	r0, #0
 801955e:	d0ec      	beq.n	801953a <__ssvfiscanf_r+0x196>
 8019560:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019562:	2800      	cmp	r0, #0
 8019564:	d159      	bne.n	801961a <__ssvfiscanf_r+0x276>
 8019566:	f04f 30ff 	mov.w	r0, #4294967295
 801956a:	e05c      	b.n	8019626 <__ssvfiscanf_r+0x282>
 801956c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801956e:	f042 0220 	orr.w	r2, r2, #32
 8019572:	9241      	str	r2, [sp, #260]	; 0x104
 8019574:	e79b      	b.n	80194ae <__ssvfiscanf_r+0x10a>
 8019576:	2308      	movs	r3, #8
 8019578:	9342      	str	r3, [sp, #264]	; 0x108
 801957a:	2304      	movs	r3, #4
 801957c:	e7b3      	b.n	80194e6 <__ssvfiscanf_r+0x142>
 801957e:	4629      	mov	r1, r5
 8019580:	4640      	mov	r0, r8
 8019582:	f000 f9c7 	bl	8019914 <__sccl>
 8019586:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801958c:	9341      	str	r3, [sp, #260]	; 0x104
 801958e:	4605      	mov	r5, r0
 8019590:	2301      	movs	r3, #1
 8019592:	e7a8      	b.n	80194e6 <__ssvfiscanf_r+0x142>
 8019594:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801959a:	9341      	str	r3, [sp, #260]	; 0x104
 801959c:	2300      	movs	r3, #0
 801959e:	e7a2      	b.n	80194e6 <__ssvfiscanf_r+0x142>
 80195a0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80195a2:	06c3      	lsls	r3, r0, #27
 80195a4:	f53f af2e 	bmi.w	8019404 <__ssvfiscanf_r+0x60>
 80195a8:	9b00      	ldr	r3, [sp, #0]
 80195aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195ac:	1d19      	adds	r1, r3, #4
 80195ae:	9100      	str	r1, [sp, #0]
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	07c0      	lsls	r0, r0, #31
 80195b4:	bf4c      	ite	mi
 80195b6:	801a      	strhmi	r2, [r3, #0]
 80195b8:	601a      	strpl	r2, [r3, #0]
 80195ba:	e723      	b.n	8019404 <__ssvfiscanf_r+0x60>
 80195bc:	2305      	movs	r3, #5
 80195be:	e792      	b.n	80194e6 <__ssvfiscanf_r+0x142>
 80195c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195c2:	4621      	mov	r1, r4
 80195c4:	4630      	mov	r0, r6
 80195c6:	4798      	blx	r3
 80195c8:	2800      	cmp	r0, #0
 80195ca:	d090      	beq.n	80194ee <__ssvfiscanf_r+0x14a>
 80195cc:	e7c8      	b.n	8019560 <__ssvfiscanf_r+0x1bc>
 80195ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195d0:	3201      	adds	r2, #1
 80195d2:	9245      	str	r2, [sp, #276]	; 0x114
 80195d4:	6862      	ldr	r2, [r4, #4]
 80195d6:	3a01      	subs	r2, #1
 80195d8:	2a00      	cmp	r2, #0
 80195da:	6062      	str	r2, [r4, #4]
 80195dc:	dd02      	ble.n	80195e4 <__ssvfiscanf_r+0x240>
 80195de:	3301      	adds	r3, #1
 80195e0:	6023      	str	r3, [r4, #0]
 80195e2:	e787      	b.n	80194f4 <__ssvfiscanf_r+0x150>
 80195e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195e6:	4621      	mov	r1, r4
 80195e8:	4630      	mov	r0, r6
 80195ea:	4798      	blx	r3
 80195ec:	2800      	cmp	r0, #0
 80195ee:	d081      	beq.n	80194f4 <__ssvfiscanf_r+0x150>
 80195f0:	e7b6      	b.n	8019560 <__ssvfiscanf_r+0x1bc>
 80195f2:	2b04      	cmp	r3, #4
 80195f4:	dc06      	bgt.n	8019604 <__ssvfiscanf_r+0x260>
 80195f6:	466b      	mov	r3, sp
 80195f8:	4622      	mov	r2, r4
 80195fa:	a941      	add	r1, sp, #260	; 0x104
 80195fc:	4630      	mov	r0, r6
 80195fe:	f000 f885 	bl	801970c <_scanf_i>
 8019602:	e788      	b.n	8019516 <__ssvfiscanf_r+0x172>
 8019604:	4b0e      	ldr	r3, [pc, #56]	; (8019640 <__ssvfiscanf_r+0x29c>)
 8019606:	2b00      	cmp	r3, #0
 8019608:	f43f aefc 	beq.w	8019404 <__ssvfiscanf_r+0x60>
 801960c:	466b      	mov	r3, sp
 801960e:	4622      	mov	r2, r4
 8019610:	a941      	add	r1, sp, #260	; 0x104
 8019612:	4630      	mov	r0, r6
 8019614:	f7fc fd74 	bl	8016100 <_scanf_float>
 8019618:	e77d      	b.n	8019516 <__ssvfiscanf_r+0x172>
 801961a:	89a3      	ldrh	r3, [r4, #12]
 801961c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019620:	bf18      	it	ne
 8019622:	f04f 30ff 	movne.w	r0, #4294967295
 8019626:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801962a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801962e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019630:	e7f9      	b.n	8019626 <__ssvfiscanf_r+0x282>
 8019632:	bf00      	nop
 8019634:	080192f1 	.word	0x080192f1
 8019638:	0801936b 	.word	0x0801936b
 801963c:	0801a462 	.word	0x0801a462
 8019640:	08016101 	.word	0x08016101

08019644 <_scanf_chars>:
 8019644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019648:	4615      	mov	r5, r2
 801964a:	688a      	ldr	r2, [r1, #8]
 801964c:	4680      	mov	r8, r0
 801964e:	460c      	mov	r4, r1
 8019650:	b932      	cbnz	r2, 8019660 <_scanf_chars+0x1c>
 8019652:	698a      	ldr	r2, [r1, #24]
 8019654:	2a00      	cmp	r2, #0
 8019656:	bf14      	ite	ne
 8019658:	f04f 32ff 	movne.w	r2, #4294967295
 801965c:	2201      	moveq	r2, #1
 801965e:	608a      	str	r2, [r1, #8]
 8019660:	6822      	ldr	r2, [r4, #0]
 8019662:	06d1      	lsls	r1, r2, #27
 8019664:	bf5f      	itttt	pl
 8019666:	681a      	ldrpl	r2, [r3, #0]
 8019668:	1d11      	addpl	r1, r2, #4
 801966a:	6019      	strpl	r1, [r3, #0]
 801966c:	6817      	ldrpl	r7, [r2, #0]
 801966e:	2600      	movs	r6, #0
 8019670:	69a3      	ldr	r3, [r4, #24]
 8019672:	b1db      	cbz	r3, 80196ac <_scanf_chars+0x68>
 8019674:	2b01      	cmp	r3, #1
 8019676:	d107      	bne.n	8019688 <_scanf_chars+0x44>
 8019678:	682b      	ldr	r3, [r5, #0]
 801967a:	6962      	ldr	r2, [r4, #20]
 801967c:	781b      	ldrb	r3, [r3, #0]
 801967e:	5cd3      	ldrb	r3, [r2, r3]
 8019680:	b9a3      	cbnz	r3, 80196ac <_scanf_chars+0x68>
 8019682:	2e00      	cmp	r6, #0
 8019684:	d132      	bne.n	80196ec <_scanf_chars+0xa8>
 8019686:	e006      	b.n	8019696 <_scanf_chars+0x52>
 8019688:	2b02      	cmp	r3, #2
 801968a:	d007      	beq.n	801969c <_scanf_chars+0x58>
 801968c:	2e00      	cmp	r6, #0
 801968e:	d12d      	bne.n	80196ec <_scanf_chars+0xa8>
 8019690:	69a3      	ldr	r3, [r4, #24]
 8019692:	2b01      	cmp	r3, #1
 8019694:	d12a      	bne.n	80196ec <_scanf_chars+0xa8>
 8019696:	2001      	movs	r0, #1
 8019698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801969c:	f7fe ffde 	bl	801865c <__locale_ctype_ptr>
 80196a0:	682b      	ldr	r3, [r5, #0]
 80196a2:	781b      	ldrb	r3, [r3, #0]
 80196a4:	4418      	add	r0, r3
 80196a6:	7843      	ldrb	r3, [r0, #1]
 80196a8:	071b      	lsls	r3, r3, #28
 80196aa:	d4ef      	bmi.n	801968c <_scanf_chars+0x48>
 80196ac:	6823      	ldr	r3, [r4, #0]
 80196ae:	06da      	lsls	r2, r3, #27
 80196b0:	bf5e      	ittt	pl
 80196b2:	682b      	ldrpl	r3, [r5, #0]
 80196b4:	781b      	ldrbpl	r3, [r3, #0]
 80196b6:	703b      	strbpl	r3, [r7, #0]
 80196b8:	682a      	ldr	r2, [r5, #0]
 80196ba:	686b      	ldr	r3, [r5, #4]
 80196bc:	f102 0201 	add.w	r2, r2, #1
 80196c0:	602a      	str	r2, [r5, #0]
 80196c2:	68a2      	ldr	r2, [r4, #8]
 80196c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80196c8:	f102 32ff 	add.w	r2, r2, #4294967295
 80196cc:	606b      	str	r3, [r5, #4]
 80196ce:	f106 0601 	add.w	r6, r6, #1
 80196d2:	bf58      	it	pl
 80196d4:	3701      	addpl	r7, #1
 80196d6:	60a2      	str	r2, [r4, #8]
 80196d8:	b142      	cbz	r2, 80196ec <_scanf_chars+0xa8>
 80196da:	2b00      	cmp	r3, #0
 80196dc:	dcc8      	bgt.n	8019670 <_scanf_chars+0x2c>
 80196de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80196e2:	4629      	mov	r1, r5
 80196e4:	4640      	mov	r0, r8
 80196e6:	4798      	blx	r3
 80196e8:	2800      	cmp	r0, #0
 80196ea:	d0c1      	beq.n	8019670 <_scanf_chars+0x2c>
 80196ec:	6823      	ldr	r3, [r4, #0]
 80196ee:	f013 0310 	ands.w	r3, r3, #16
 80196f2:	d105      	bne.n	8019700 <_scanf_chars+0xbc>
 80196f4:	68e2      	ldr	r2, [r4, #12]
 80196f6:	3201      	adds	r2, #1
 80196f8:	60e2      	str	r2, [r4, #12]
 80196fa:	69a2      	ldr	r2, [r4, #24]
 80196fc:	b102      	cbz	r2, 8019700 <_scanf_chars+0xbc>
 80196fe:	703b      	strb	r3, [r7, #0]
 8019700:	6923      	ldr	r3, [r4, #16]
 8019702:	441e      	add	r6, r3
 8019704:	6126      	str	r6, [r4, #16]
 8019706:	2000      	movs	r0, #0
 8019708:	e7c6      	b.n	8019698 <_scanf_chars+0x54>
	...

0801970c <_scanf_i>:
 801970c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019710:	469a      	mov	sl, r3
 8019712:	4b74      	ldr	r3, [pc, #464]	; (80198e4 <_scanf_i+0x1d8>)
 8019714:	460c      	mov	r4, r1
 8019716:	4683      	mov	fp, r0
 8019718:	4616      	mov	r6, r2
 801971a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801971e:	b087      	sub	sp, #28
 8019720:	ab03      	add	r3, sp, #12
 8019722:	68a7      	ldr	r7, [r4, #8]
 8019724:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019728:	4b6f      	ldr	r3, [pc, #444]	; (80198e8 <_scanf_i+0x1dc>)
 801972a:	69a1      	ldr	r1, [r4, #24]
 801972c:	4a6f      	ldr	r2, [pc, #444]	; (80198ec <_scanf_i+0x1e0>)
 801972e:	2903      	cmp	r1, #3
 8019730:	bf08      	it	eq
 8019732:	461a      	moveq	r2, r3
 8019734:	1e7b      	subs	r3, r7, #1
 8019736:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801973a:	bf84      	itt	hi
 801973c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019740:	60a3      	strhi	r3, [r4, #8]
 8019742:	6823      	ldr	r3, [r4, #0]
 8019744:	9200      	str	r2, [sp, #0]
 8019746:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801974a:	bf88      	it	hi
 801974c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019750:	f104 091c 	add.w	r9, r4, #28
 8019754:	6023      	str	r3, [r4, #0]
 8019756:	bf8c      	ite	hi
 8019758:	197f      	addhi	r7, r7, r5
 801975a:	2700      	movls	r7, #0
 801975c:	464b      	mov	r3, r9
 801975e:	f04f 0800 	mov.w	r8, #0
 8019762:	9301      	str	r3, [sp, #4]
 8019764:	6831      	ldr	r1, [r6, #0]
 8019766:	ab03      	add	r3, sp, #12
 8019768:	2202      	movs	r2, #2
 801976a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801976e:	7809      	ldrb	r1, [r1, #0]
 8019770:	f7e6 fd4e 	bl	8000210 <memchr>
 8019774:	9b01      	ldr	r3, [sp, #4]
 8019776:	b330      	cbz	r0, 80197c6 <_scanf_i+0xba>
 8019778:	f1b8 0f01 	cmp.w	r8, #1
 801977c:	d15a      	bne.n	8019834 <_scanf_i+0x128>
 801977e:	6862      	ldr	r2, [r4, #4]
 8019780:	b92a      	cbnz	r2, 801978e <_scanf_i+0x82>
 8019782:	6822      	ldr	r2, [r4, #0]
 8019784:	2108      	movs	r1, #8
 8019786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801978a:	6061      	str	r1, [r4, #4]
 801978c:	6022      	str	r2, [r4, #0]
 801978e:	6822      	ldr	r2, [r4, #0]
 8019790:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019794:	6022      	str	r2, [r4, #0]
 8019796:	68a2      	ldr	r2, [r4, #8]
 8019798:	1e51      	subs	r1, r2, #1
 801979a:	60a1      	str	r1, [r4, #8]
 801979c:	b19a      	cbz	r2, 80197c6 <_scanf_i+0xba>
 801979e:	6832      	ldr	r2, [r6, #0]
 80197a0:	1c51      	adds	r1, r2, #1
 80197a2:	6031      	str	r1, [r6, #0]
 80197a4:	7812      	ldrb	r2, [r2, #0]
 80197a6:	701a      	strb	r2, [r3, #0]
 80197a8:	1c5d      	adds	r5, r3, #1
 80197aa:	6873      	ldr	r3, [r6, #4]
 80197ac:	3b01      	subs	r3, #1
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	6073      	str	r3, [r6, #4]
 80197b2:	dc07      	bgt.n	80197c4 <_scanf_i+0xb8>
 80197b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197b8:	4631      	mov	r1, r6
 80197ba:	4658      	mov	r0, fp
 80197bc:	4798      	blx	r3
 80197be:	2800      	cmp	r0, #0
 80197c0:	f040 8086 	bne.w	80198d0 <_scanf_i+0x1c4>
 80197c4:	462b      	mov	r3, r5
 80197c6:	f108 0801 	add.w	r8, r8, #1
 80197ca:	f1b8 0f03 	cmp.w	r8, #3
 80197ce:	d1c8      	bne.n	8019762 <_scanf_i+0x56>
 80197d0:	6862      	ldr	r2, [r4, #4]
 80197d2:	b90a      	cbnz	r2, 80197d8 <_scanf_i+0xcc>
 80197d4:	220a      	movs	r2, #10
 80197d6:	6062      	str	r2, [r4, #4]
 80197d8:	6862      	ldr	r2, [r4, #4]
 80197da:	4945      	ldr	r1, [pc, #276]	; (80198f0 <_scanf_i+0x1e4>)
 80197dc:	6960      	ldr	r0, [r4, #20]
 80197de:	9301      	str	r3, [sp, #4]
 80197e0:	1a89      	subs	r1, r1, r2
 80197e2:	f000 f897 	bl	8019914 <__sccl>
 80197e6:	9b01      	ldr	r3, [sp, #4]
 80197e8:	f04f 0800 	mov.w	r8, #0
 80197ec:	461d      	mov	r5, r3
 80197ee:	68a3      	ldr	r3, [r4, #8]
 80197f0:	6822      	ldr	r2, [r4, #0]
 80197f2:	2b00      	cmp	r3, #0
 80197f4:	d03a      	beq.n	801986c <_scanf_i+0x160>
 80197f6:	6831      	ldr	r1, [r6, #0]
 80197f8:	6960      	ldr	r0, [r4, #20]
 80197fa:	f891 c000 	ldrb.w	ip, [r1]
 80197fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019802:	2800      	cmp	r0, #0
 8019804:	d032      	beq.n	801986c <_scanf_i+0x160>
 8019806:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801980a:	d121      	bne.n	8019850 <_scanf_i+0x144>
 801980c:	0510      	lsls	r0, r2, #20
 801980e:	d51f      	bpl.n	8019850 <_scanf_i+0x144>
 8019810:	f108 0801 	add.w	r8, r8, #1
 8019814:	b117      	cbz	r7, 801981c <_scanf_i+0x110>
 8019816:	3301      	adds	r3, #1
 8019818:	3f01      	subs	r7, #1
 801981a:	60a3      	str	r3, [r4, #8]
 801981c:	6873      	ldr	r3, [r6, #4]
 801981e:	3b01      	subs	r3, #1
 8019820:	2b00      	cmp	r3, #0
 8019822:	6073      	str	r3, [r6, #4]
 8019824:	dd1b      	ble.n	801985e <_scanf_i+0x152>
 8019826:	6833      	ldr	r3, [r6, #0]
 8019828:	3301      	adds	r3, #1
 801982a:	6033      	str	r3, [r6, #0]
 801982c:	68a3      	ldr	r3, [r4, #8]
 801982e:	3b01      	subs	r3, #1
 8019830:	60a3      	str	r3, [r4, #8]
 8019832:	e7dc      	b.n	80197ee <_scanf_i+0xe2>
 8019834:	f1b8 0f02 	cmp.w	r8, #2
 8019838:	d1ad      	bne.n	8019796 <_scanf_i+0x8a>
 801983a:	6822      	ldr	r2, [r4, #0]
 801983c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019840:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019844:	d1bf      	bne.n	80197c6 <_scanf_i+0xba>
 8019846:	2110      	movs	r1, #16
 8019848:	6061      	str	r1, [r4, #4]
 801984a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801984e:	e7a1      	b.n	8019794 <_scanf_i+0x88>
 8019850:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019854:	6022      	str	r2, [r4, #0]
 8019856:	780b      	ldrb	r3, [r1, #0]
 8019858:	702b      	strb	r3, [r5, #0]
 801985a:	3501      	adds	r5, #1
 801985c:	e7de      	b.n	801981c <_scanf_i+0x110>
 801985e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019862:	4631      	mov	r1, r6
 8019864:	4658      	mov	r0, fp
 8019866:	4798      	blx	r3
 8019868:	2800      	cmp	r0, #0
 801986a:	d0df      	beq.n	801982c <_scanf_i+0x120>
 801986c:	6823      	ldr	r3, [r4, #0]
 801986e:	05d9      	lsls	r1, r3, #23
 8019870:	d50c      	bpl.n	801988c <_scanf_i+0x180>
 8019872:	454d      	cmp	r5, r9
 8019874:	d908      	bls.n	8019888 <_scanf_i+0x17c>
 8019876:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801987a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801987e:	4632      	mov	r2, r6
 8019880:	4658      	mov	r0, fp
 8019882:	4798      	blx	r3
 8019884:	1e6f      	subs	r7, r5, #1
 8019886:	463d      	mov	r5, r7
 8019888:	454d      	cmp	r5, r9
 801988a:	d029      	beq.n	80198e0 <_scanf_i+0x1d4>
 801988c:	6822      	ldr	r2, [r4, #0]
 801988e:	f012 0210 	ands.w	r2, r2, #16
 8019892:	d113      	bne.n	80198bc <_scanf_i+0x1b0>
 8019894:	702a      	strb	r2, [r5, #0]
 8019896:	6863      	ldr	r3, [r4, #4]
 8019898:	9e00      	ldr	r6, [sp, #0]
 801989a:	4649      	mov	r1, r9
 801989c:	4658      	mov	r0, fp
 801989e:	47b0      	blx	r6
 80198a0:	f8da 3000 	ldr.w	r3, [sl]
 80198a4:	6821      	ldr	r1, [r4, #0]
 80198a6:	1d1a      	adds	r2, r3, #4
 80198a8:	f8ca 2000 	str.w	r2, [sl]
 80198ac:	f011 0f20 	tst.w	r1, #32
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	d010      	beq.n	80198d6 <_scanf_i+0x1ca>
 80198b4:	6018      	str	r0, [r3, #0]
 80198b6:	68e3      	ldr	r3, [r4, #12]
 80198b8:	3301      	adds	r3, #1
 80198ba:	60e3      	str	r3, [r4, #12]
 80198bc:	eba5 0509 	sub.w	r5, r5, r9
 80198c0:	44a8      	add	r8, r5
 80198c2:	6925      	ldr	r5, [r4, #16]
 80198c4:	4445      	add	r5, r8
 80198c6:	6125      	str	r5, [r4, #16]
 80198c8:	2000      	movs	r0, #0
 80198ca:	b007      	add	sp, #28
 80198cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198d0:	f04f 0800 	mov.w	r8, #0
 80198d4:	e7ca      	b.n	801986c <_scanf_i+0x160>
 80198d6:	07ca      	lsls	r2, r1, #31
 80198d8:	bf4c      	ite	mi
 80198da:	8018      	strhmi	r0, [r3, #0]
 80198dc:	6018      	strpl	r0, [r3, #0]
 80198de:	e7ea      	b.n	80198b6 <_scanf_i+0x1aa>
 80198e0:	2001      	movs	r0, #1
 80198e2:	e7f2      	b.n	80198ca <_scanf_i+0x1be>
 80198e4:	0801a024 	.word	0x0801a024
 80198e8:	08017319 	.word	0x08017319
 80198ec:	08019a91 	.word	0x08019a91
 80198f0:	0801a47d 	.word	0x0801a47d

080198f4 <_sbrk_r>:
 80198f4:	b538      	push	{r3, r4, r5, lr}
 80198f6:	4c06      	ldr	r4, [pc, #24]	; (8019910 <_sbrk_r+0x1c>)
 80198f8:	2300      	movs	r3, #0
 80198fa:	4605      	mov	r5, r0
 80198fc:	4608      	mov	r0, r1
 80198fe:	6023      	str	r3, [r4, #0]
 8019900:	f7ed ffc2 	bl	8007888 <_sbrk>
 8019904:	1c43      	adds	r3, r0, #1
 8019906:	d102      	bne.n	801990e <_sbrk_r+0x1a>
 8019908:	6823      	ldr	r3, [r4, #0]
 801990a:	b103      	cbz	r3, 801990e <_sbrk_r+0x1a>
 801990c:	602b      	str	r3, [r5, #0]
 801990e:	bd38      	pop	{r3, r4, r5, pc}
 8019910:	20046c94 	.word	0x20046c94

08019914 <__sccl>:
 8019914:	b570      	push	{r4, r5, r6, lr}
 8019916:	780b      	ldrb	r3, [r1, #0]
 8019918:	2b5e      	cmp	r3, #94	; 0x5e
 801991a:	bf13      	iteet	ne
 801991c:	1c4a      	addne	r2, r1, #1
 801991e:	1c8a      	addeq	r2, r1, #2
 8019920:	784b      	ldrbeq	r3, [r1, #1]
 8019922:	2100      	movne	r1, #0
 8019924:	bf08      	it	eq
 8019926:	2101      	moveq	r1, #1
 8019928:	1e44      	subs	r4, r0, #1
 801992a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801992e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019932:	42ac      	cmp	r4, r5
 8019934:	d1fb      	bne.n	801992e <__sccl+0x1a>
 8019936:	b913      	cbnz	r3, 801993e <__sccl+0x2a>
 8019938:	3a01      	subs	r2, #1
 801993a:	4610      	mov	r0, r2
 801993c:	bd70      	pop	{r4, r5, r6, pc}
 801993e:	f081 0401 	eor.w	r4, r1, #1
 8019942:	54c4      	strb	r4, [r0, r3]
 8019944:	1c51      	adds	r1, r2, #1
 8019946:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801994a:	2d2d      	cmp	r5, #45	; 0x2d
 801994c:	f101 36ff 	add.w	r6, r1, #4294967295
 8019950:	460a      	mov	r2, r1
 8019952:	d006      	beq.n	8019962 <__sccl+0x4e>
 8019954:	2d5d      	cmp	r5, #93	; 0x5d
 8019956:	d0f0      	beq.n	801993a <__sccl+0x26>
 8019958:	b90d      	cbnz	r5, 801995e <__sccl+0x4a>
 801995a:	4632      	mov	r2, r6
 801995c:	e7ed      	b.n	801993a <__sccl+0x26>
 801995e:	462b      	mov	r3, r5
 8019960:	e7ef      	b.n	8019942 <__sccl+0x2e>
 8019962:	780e      	ldrb	r6, [r1, #0]
 8019964:	2e5d      	cmp	r6, #93	; 0x5d
 8019966:	d0fa      	beq.n	801995e <__sccl+0x4a>
 8019968:	42b3      	cmp	r3, r6
 801996a:	dcf8      	bgt.n	801995e <__sccl+0x4a>
 801996c:	3301      	adds	r3, #1
 801996e:	429e      	cmp	r6, r3
 8019970:	54c4      	strb	r4, [r0, r3]
 8019972:	dcfb      	bgt.n	801996c <__sccl+0x58>
 8019974:	3102      	adds	r1, #2
 8019976:	e7e6      	b.n	8019946 <__sccl+0x32>

08019978 <strncmp>:
 8019978:	b510      	push	{r4, lr}
 801997a:	b16a      	cbz	r2, 8019998 <strncmp+0x20>
 801997c:	3901      	subs	r1, #1
 801997e:	1884      	adds	r4, r0, r2
 8019980:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019984:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019988:	4293      	cmp	r3, r2
 801998a:	d103      	bne.n	8019994 <strncmp+0x1c>
 801998c:	42a0      	cmp	r0, r4
 801998e:	d001      	beq.n	8019994 <strncmp+0x1c>
 8019990:	2b00      	cmp	r3, #0
 8019992:	d1f5      	bne.n	8019980 <strncmp+0x8>
 8019994:	1a98      	subs	r0, r3, r2
 8019996:	bd10      	pop	{r4, pc}
 8019998:	4610      	mov	r0, r2
 801999a:	e7fc      	b.n	8019996 <strncmp+0x1e>

0801999c <_strtoul_l.isra.0>:
 801999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199a0:	4680      	mov	r8, r0
 80199a2:	4689      	mov	r9, r1
 80199a4:	4692      	mov	sl, r2
 80199a6:	461e      	mov	r6, r3
 80199a8:	460f      	mov	r7, r1
 80199aa:	463d      	mov	r5, r7
 80199ac:	9808      	ldr	r0, [sp, #32]
 80199ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199b2:	f7fe fe4f 	bl	8018654 <__locale_ctype_ptr_l>
 80199b6:	4420      	add	r0, r4
 80199b8:	7843      	ldrb	r3, [r0, #1]
 80199ba:	f013 0308 	ands.w	r3, r3, #8
 80199be:	d130      	bne.n	8019a22 <_strtoul_l.isra.0+0x86>
 80199c0:	2c2d      	cmp	r4, #45	; 0x2d
 80199c2:	d130      	bne.n	8019a26 <_strtoul_l.isra.0+0x8a>
 80199c4:	787c      	ldrb	r4, [r7, #1]
 80199c6:	1cbd      	adds	r5, r7, #2
 80199c8:	2101      	movs	r1, #1
 80199ca:	2e00      	cmp	r6, #0
 80199cc:	d05c      	beq.n	8019a88 <_strtoul_l.isra.0+0xec>
 80199ce:	2e10      	cmp	r6, #16
 80199d0:	d109      	bne.n	80199e6 <_strtoul_l.isra.0+0x4a>
 80199d2:	2c30      	cmp	r4, #48	; 0x30
 80199d4:	d107      	bne.n	80199e6 <_strtoul_l.isra.0+0x4a>
 80199d6:	782b      	ldrb	r3, [r5, #0]
 80199d8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80199dc:	2b58      	cmp	r3, #88	; 0x58
 80199de:	d14e      	bne.n	8019a7e <_strtoul_l.isra.0+0xe2>
 80199e0:	786c      	ldrb	r4, [r5, #1]
 80199e2:	2610      	movs	r6, #16
 80199e4:	3502      	adds	r5, #2
 80199e6:	f04f 32ff 	mov.w	r2, #4294967295
 80199ea:	2300      	movs	r3, #0
 80199ec:	fbb2 f2f6 	udiv	r2, r2, r6
 80199f0:	fb06 fc02 	mul.w	ip, r6, r2
 80199f4:	ea6f 0c0c 	mvn.w	ip, ip
 80199f8:	4618      	mov	r0, r3
 80199fa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80199fe:	2f09      	cmp	r7, #9
 8019a00:	d817      	bhi.n	8019a32 <_strtoul_l.isra.0+0x96>
 8019a02:	463c      	mov	r4, r7
 8019a04:	42a6      	cmp	r6, r4
 8019a06:	dd23      	ble.n	8019a50 <_strtoul_l.isra.0+0xb4>
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	db1e      	blt.n	8019a4a <_strtoul_l.isra.0+0xae>
 8019a0c:	4282      	cmp	r2, r0
 8019a0e:	d31c      	bcc.n	8019a4a <_strtoul_l.isra.0+0xae>
 8019a10:	d101      	bne.n	8019a16 <_strtoul_l.isra.0+0x7a>
 8019a12:	45a4      	cmp	ip, r4
 8019a14:	db19      	blt.n	8019a4a <_strtoul_l.isra.0+0xae>
 8019a16:	fb00 4006 	mla	r0, r0, r6, r4
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a20:	e7eb      	b.n	80199fa <_strtoul_l.isra.0+0x5e>
 8019a22:	462f      	mov	r7, r5
 8019a24:	e7c1      	b.n	80199aa <_strtoul_l.isra.0+0xe>
 8019a26:	2c2b      	cmp	r4, #43	; 0x2b
 8019a28:	bf04      	itt	eq
 8019a2a:	1cbd      	addeq	r5, r7, #2
 8019a2c:	787c      	ldrbeq	r4, [r7, #1]
 8019a2e:	4619      	mov	r1, r3
 8019a30:	e7cb      	b.n	80199ca <_strtoul_l.isra.0+0x2e>
 8019a32:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a36:	2f19      	cmp	r7, #25
 8019a38:	d801      	bhi.n	8019a3e <_strtoul_l.isra.0+0xa2>
 8019a3a:	3c37      	subs	r4, #55	; 0x37
 8019a3c:	e7e2      	b.n	8019a04 <_strtoul_l.isra.0+0x68>
 8019a3e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a42:	2f19      	cmp	r7, #25
 8019a44:	d804      	bhi.n	8019a50 <_strtoul_l.isra.0+0xb4>
 8019a46:	3c57      	subs	r4, #87	; 0x57
 8019a48:	e7dc      	b.n	8019a04 <_strtoul_l.isra.0+0x68>
 8019a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a4e:	e7e5      	b.n	8019a1c <_strtoul_l.isra.0+0x80>
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	da09      	bge.n	8019a68 <_strtoul_l.isra.0+0xcc>
 8019a54:	2322      	movs	r3, #34	; 0x22
 8019a56:	f8c8 3000 	str.w	r3, [r8]
 8019a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a5e:	f1ba 0f00 	cmp.w	sl, #0
 8019a62:	d107      	bne.n	8019a74 <_strtoul_l.isra.0+0xd8>
 8019a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a68:	b101      	cbz	r1, 8019a6c <_strtoul_l.isra.0+0xd0>
 8019a6a:	4240      	negs	r0, r0
 8019a6c:	f1ba 0f00 	cmp.w	sl, #0
 8019a70:	d0f8      	beq.n	8019a64 <_strtoul_l.isra.0+0xc8>
 8019a72:	b10b      	cbz	r3, 8019a78 <_strtoul_l.isra.0+0xdc>
 8019a74:	f105 39ff 	add.w	r9, r5, #4294967295
 8019a78:	f8ca 9000 	str.w	r9, [sl]
 8019a7c:	e7f2      	b.n	8019a64 <_strtoul_l.isra.0+0xc8>
 8019a7e:	2430      	movs	r4, #48	; 0x30
 8019a80:	2e00      	cmp	r6, #0
 8019a82:	d1b0      	bne.n	80199e6 <_strtoul_l.isra.0+0x4a>
 8019a84:	2608      	movs	r6, #8
 8019a86:	e7ae      	b.n	80199e6 <_strtoul_l.isra.0+0x4a>
 8019a88:	2c30      	cmp	r4, #48	; 0x30
 8019a8a:	d0a4      	beq.n	80199d6 <_strtoul_l.isra.0+0x3a>
 8019a8c:	260a      	movs	r6, #10
 8019a8e:	e7aa      	b.n	80199e6 <_strtoul_l.isra.0+0x4a>

08019a90 <_strtoul_r>:
 8019a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a92:	4c06      	ldr	r4, [pc, #24]	; (8019aac <_strtoul_r+0x1c>)
 8019a94:	4d06      	ldr	r5, [pc, #24]	; (8019ab0 <_strtoul_r+0x20>)
 8019a96:	6824      	ldr	r4, [r4, #0]
 8019a98:	6a24      	ldr	r4, [r4, #32]
 8019a9a:	2c00      	cmp	r4, #0
 8019a9c:	bf08      	it	eq
 8019a9e:	462c      	moveq	r4, r5
 8019aa0:	9400      	str	r4, [sp, #0]
 8019aa2:	f7ff ff7b 	bl	801999c <_strtoul_l.isra.0>
 8019aa6:	b003      	add	sp, #12
 8019aa8:	bd30      	pop	{r4, r5, pc}
 8019aaa:	bf00      	nop
 8019aac:	2000000c 	.word	0x2000000c
 8019ab0:	20000070 	.word	0x20000070

08019ab4 <__submore>:
 8019ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ab8:	460c      	mov	r4, r1
 8019aba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019abc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ac0:	4299      	cmp	r1, r3
 8019ac2:	d11d      	bne.n	8019b00 <__submore+0x4c>
 8019ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019ac8:	f7ff fa66 	bl	8018f98 <_malloc_r>
 8019acc:	b918      	cbnz	r0, 8019ad6 <__submore+0x22>
 8019ace:	f04f 30ff 	mov.w	r0, #4294967295
 8019ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ada:	63a3      	str	r3, [r4, #56]	; 0x38
 8019adc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019ae0:	6360      	str	r0, [r4, #52]	; 0x34
 8019ae2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019ae6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019aea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019aee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019af2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019af6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019afa:	6020      	str	r0, [r4, #0]
 8019afc:	2000      	movs	r0, #0
 8019afe:	e7e8      	b.n	8019ad2 <__submore+0x1e>
 8019b00:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019b02:	0077      	lsls	r7, r6, #1
 8019b04:	463a      	mov	r2, r7
 8019b06:	f000 f837 	bl	8019b78 <_realloc_r>
 8019b0a:	4605      	mov	r5, r0
 8019b0c:	2800      	cmp	r0, #0
 8019b0e:	d0de      	beq.n	8019ace <__submore+0x1a>
 8019b10:	eb00 0806 	add.w	r8, r0, r6
 8019b14:	4601      	mov	r1, r0
 8019b16:	4632      	mov	r2, r6
 8019b18:	4640      	mov	r0, r8
 8019b1a:	f7fe fdd7 	bl	80186cc <memcpy>
 8019b1e:	f8c4 8000 	str.w	r8, [r4]
 8019b22:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b26:	e7e9      	b.n	8019afc <__submore+0x48>

08019b28 <__ascii_wctomb>:
 8019b28:	b149      	cbz	r1, 8019b3e <__ascii_wctomb+0x16>
 8019b2a:	2aff      	cmp	r2, #255	; 0xff
 8019b2c:	bf85      	ittet	hi
 8019b2e:	238a      	movhi	r3, #138	; 0x8a
 8019b30:	6003      	strhi	r3, [r0, #0]
 8019b32:	700a      	strbls	r2, [r1, #0]
 8019b34:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b38:	bf98      	it	ls
 8019b3a:	2001      	movls	r0, #1
 8019b3c:	4770      	bx	lr
 8019b3e:	4608      	mov	r0, r1
 8019b40:	4770      	bx	lr

08019b42 <memmove>:
 8019b42:	4288      	cmp	r0, r1
 8019b44:	b510      	push	{r4, lr}
 8019b46:	eb01 0302 	add.w	r3, r1, r2
 8019b4a:	d807      	bhi.n	8019b5c <memmove+0x1a>
 8019b4c:	1e42      	subs	r2, r0, #1
 8019b4e:	4299      	cmp	r1, r3
 8019b50:	d00a      	beq.n	8019b68 <memmove+0x26>
 8019b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b56:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019b5a:	e7f8      	b.n	8019b4e <memmove+0xc>
 8019b5c:	4283      	cmp	r3, r0
 8019b5e:	d9f5      	bls.n	8019b4c <memmove+0xa>
 8019b60:	1881      	adds	r1, r0, r2
 8019b62:	1ad2      	subs	r2, r2, r3
 8019b64:	42d3      	cmn	r3, r2
 8019b66:	d100      	bne.n	8019b6a <memmove+0x28>
 8019b68:	bd10      	pop	{r4, pc}
 8019b6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b6e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019b72:	e7f7      	b.n	8019b64 <memmove+0x22>

08019b74 <__malloc_lock>:
 8019b74:	4770      	bx	lr

08019b76 <__malloc_unlock>:
 8019b76:	4770      	bx	lr

08019b78 <_realloc_r>:
 8019b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b7a:	4607      	mov	r7, r0
 8019b7c:	4614      	mov	r4, r2
 8019b7e:	460e      	mov	r6, r1
 8019b80:	b921      	cbnz	r1, 8019b8c <_realloc_r+0x14>
 8019b82:	4611      	mov	r1, r2
 8019b84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019b88:	f7ff ba06 	b.w	8018f98 <_malloc_r>
 8019b8c:	b922      	cbnz	r2, 8019b98 <_realloc_r+0x20>
 8019b8e:	f7ff f9b5 	bl	8018efc <_free_r>
 8019b92:	4625      	mov	r5, r4
 8019b94:	4628      	mov	r0, r5
 8019b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b98:	f000 f814 	bl	8019bc4 <_malloc_usable_size_r>
 8019b9c:	42a0      	cmp	r0, r4
 8019b9e:	d20f      	bcs.n	8019bc0 <_realloc_r+0x48>
 8019ba0:	4621      	mov	r1, r4
 8019ba2:	4638      	mov	r0, r7
 8019ba4:	f7ff f9f8 	bl	8018f98 <_malloc_r>
 8019ba8:	4605      	mov	r5, r0
 8019baa:	2800      	cmp	r0, #0
 8019bac:	d0f2      	beq.n	8019b94 <_realloc_r+0x1c>
 8019bae:	4631      	mov	r1, r6
 8019bb0:	4622      	mov	r2, r4
 8019bb2:	f7fe fd8b 	bl	80186cc <memcpy>
 8019bb6:	4631      	mov	r1, r6
 8019bb8:	4638      	mov	r0, r7
 8019bba:	f7ff f99f 	bl	8018efc <_free_r>
 8019bbe:	e7e9      	b.n	8019b94 <_realloc_r+0x1c>
 8019bc0:	4635      	mov	r5, r6
 8019bc2:	e7e7      	b.n	8019b94 <_realloc_r+0x1c>

08019bc4 <_malloc_usable_size_r>:
 8019bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bc8:	1f18      	subs	r0, r3, #4
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	bfbc      	itt	lt
 8019bce:	580b      	ldrlt	r3, [r1, r0]
 8019bd0:	18c0      	addlt	r0, r0, r3
 8019bd2:	4770      	bx	lr

08019bd4 <_init>:
 8019bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bd6:	bf00      	nop
 8019bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bda:	bc08      	pop	{r3}
 8019bdc:	469e      	mov	lr, r3
 8019bde:	4770      	bx	lr

08019be0 <_fini>:
 8019be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019be2:	bf00      	nop
 8019be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019be6:	bc08      	pop	{r3}
 8019be8:	469e      	mov	lr, r3
 8019bea:	4770      	bx	lr
