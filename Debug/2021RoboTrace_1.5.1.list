
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019a54  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019c18  08019c18  00029c18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a614  0801a614  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a614  0801a614  0002a614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a61c  0801a61c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a61c  0801a61c  0002a61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a624  0801a624  0002a624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a628  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ac0  200001e0  0801a804  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046ca0  0801a804  00036ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b156  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  000752d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265ca  00000000  00000000  000ac7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110a4  00000000  00000000  000d2dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a764  00000000  00000000  001e3ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019bfc 	.word	0x08019bfc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019bfc 	.word	0x08019bfc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fab6 	bl	800b548 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044798 	.word	0x20044798

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fa9e 	bl	800b548 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044798 	.word	0x20044798

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f93f 	bl	800b2a4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fea6 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fea0 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fe9a 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fe94 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fe8e 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fe88 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fe82 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fe7c 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fe76 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fe70 	bl	8009d78 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fe64 	bl	8009d78 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fe5e 	bl	8009d78 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f931 	bl	8017390 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ff6e 	bl	800f0d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ff6a 	bl	800f0d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ff66 	bl	800f0d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ff62 	bl	800f0d8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044884 	.word	0x20044884
 8001248:	200447ec 	.word	0x200447ec
 800124c:	2004490c 	.word	0x2004490c

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044884 	.word	0x20044884
 800137c:	2004490c 	.word	0x2004490c
 8001380:	200447ec 	.word	0x200447ec

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044884 	.word	0x20044884
 80013c4:	200447ec 	.word	0x200447ec
 80013c8:	2004490c 	.word	0x2004490c

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ff22 	bl	800f278 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ff1e 	bl	800f278 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449ec 	.word	0x200449ec
 8001458:	200446d0 	.word	0x200446d0
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fab2 	bl	8013d2c <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200435dc 	.word	0x200435dc

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fe71 	bl	80164f8 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 faf6 	bl	8013e14 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 faf1 	bl	8013e14 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f85f 	bl	8013902 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019c18 	.word	0x08019c18
 8001870:	2004354c 	.word	0x2004354c
 8001874:	200435dc 	.word	0x200435dc
 8001878:	200435cc 	.word	0x200435cc

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fa6d 	bl	8013d80 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fcd8 	bl	801425c <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fa67 	bl	8013d80 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fe0c 	bl	80164f8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fa94 	bl	8013e14 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f802 	bl	8013902 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 fa06 	bl	8013d2c <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	2004344c 	.word	0x2004344c
 8001930:	2004230c 	.word	0x2004230c
 8001934:	08019c34 	.word	0x08019c34
 8001938:	08019c18 	.word	0x08019c18
 800193c:	2004354c 	.word	0x2004354c
 8001940:	200435dc 	.word	0x200435dc
 8001944:	200435cc 	.word	0x200435cc

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fe0f 	bl	80165a0 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fe36 	bl	8014618 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 f9b8 	bl	8013d2c <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019c24 	.word	0x08019c24
 80019cc:	2004354c 	.word	0x2004354c
 80019d0:	200435dc 	.word	0x200435dc

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fdc9 	bl	80165a0 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fdf0 	bl	8014618 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 f972 	bl	8013d2c <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019c30 	.word	0x08019c30
 8001a58:	2004354c 	.word	0x2004354c
 8001a5c:	200435dc 	.word	0x200435dc

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 f97b 	bl	8013d80 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fbe6 	bl	801425c <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 f975 	bl	8013d80 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fd20 	bl	80164f8 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 f9a8 	bl	8013e14 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 ff16 	bl	8013902 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 f91a 	bl	8013d2c <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2004344c 	.word	0x2004344c
 8001b08:	2004230c 	.word	0x2004230c
 8001b0c:	08019c34 	.word	0x08019c34
 8001b10:	08019c38 	.word	0x08019c38
 8001b14:	2004354c 	.word	0x2004354c
 8001b18:	200435dc 	.word	0x200435dc
 8001b1c:	200435cc 	.word	0x200435cc

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fb74 	bl	801321c <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019c40 	.word	0x08019c40
 8001b54:	2004240c 	.word	0x2004240c

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fd47 	bl	80165f8 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fd43 	bl	80165f8 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2004344c 	.word	0x2004344c
 8001b80:	2004230c 	.word	0x2004230c

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fc29 	bl	80143e0 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 f8f6 	bl	8013d80 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fb85 	bl	80132a8 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 f8ee 	bl	8013d80 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2004344c 	.word	0x2004344c
 8001bac:	2004230c 	.word	0x2004230c
 8001bb0:	200435dc 	.word	0x200435dc
 8001bb4:	08019c34 	.word	0x08019c34

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2004354c 	.word	0x2004354c

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fb4c 	bl	800b2a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fcf5 	bl	800e604 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fe22 	bl	800e86c <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fb38 	bl	800b2a4 <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044678 	.word	0x20044678

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fb1b 	bl	800b2a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fcc4 	bl	800e604 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fcbe 	bl	800e604 <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fb08 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044678 	.word	0x20044678

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20044614 	.word	0x20044614
 8001d64:	20044612 	.word	0x20044612
 8001d68:	2004460c 	.word	0x2004460c

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f007 ffc6 	bl	8009d78 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019c44 	.word	0x08019c44
 8001df8:	08019c50 	.word	0x08019c50
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	20044614 	.word	0x20044614
 8001ebc:	20044612 	.word	0x20044612
 8001ec0:	2004460c 	.word	0x2004460c
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f007 ff00 	bl	8009d78 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f007 feaa 	bl	8009d78 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019c54 	.word	0x08019c54
 800208c:	08019c60 	.word	0x08019c60

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fa4b 	bl	800b548 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fb3f 	bl	800b744 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2004482c 	.word	0x2004482c

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 fa13 	bl	800b548 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	2004482c 	.word	0x2004482c

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 f869 	bl	800b274 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 f859 	bl	800b274 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 f848 	bl	800b274 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f009 f838 	bl	800b274 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f009 f828 	bl	800b274 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f009 f819 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f813 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f80d 	bl	800b2a4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f009 f803 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f008 fffd 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 fff7 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f008 ffed 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f008 ffe7 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 ffe1 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f008 ffd7 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f008 ffd1 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 ffcb 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f008 ffc1 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f008 ffbb 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 ffb5 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f008 ffab 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f008 ffa5 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 ff9f 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f008 ff95 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f008 ff8f 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f008 ff89 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f008 ff7f 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f008 ff79 	bl	800b2a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f008 ff73 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f008 ff5a 	bl	800b2a4 <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f008 ff4f 	bl	800b2a4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f008 ff45 	bl	800b2a4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f008 ff3a 	bl	800b2a4 <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fc92 	bl	8009e44 <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20044750 	.word	0x20044750

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 facf 	bl	8009d78 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fd3e 	bl	80053a4 <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019c6c 	.word	0x08019c6c
 8002a04:	08019c78 	.word	0x08019c78
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aba:	eef0 7ae7 	vabs.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b64:	3352      	adds	r3, #82	; 0x52
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b7c:	3388      	adds	r3, #136	; 0x88
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b88:	338a      	adds	r3, #138	; 0x8a
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b94:	338c      	adds	r3, #140	; 0x8c
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba0:	338e      	adds	r3, #142	; 0x8e
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bac:	338f      	adds	r3, #143	; 0x8f
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bb8:	3390      	adds	r3, #144	; 0x90
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc4:	3394      	adds	r3, #148	; 0x94
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bd2:	3398      	adds	r3, #152	; 0x98
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002be0:	339c      	adds	r3, #156	; 0x9c
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bee:	33a0      	adds	r3, #160	; 0xa0
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bfc:	33a4      	adds	r3, #164	; 0xa4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c08:	33a6      	adds	r3, #166	; 0xa6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a3a      	ldr	r2, [r7, #32]
 8002c24:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c30:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c44:	2300      	movs	r3, #0
 8002c46:	82fb      	strh	r3, [r7, #22]
 8002c48:	8afb      	ldrh	r3, [r7, #22]
 8002c4a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d80d      	bhi.n	8002c6e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c66:	8afb      	ldrh	r3, [r7, #22]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	82fb      	strh	r3, [r7, #22]
 8002c6c:	e7ec      	b.n	8002c48 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c6e:	2300      	movs	r3, #0
 8002c70:	82bb      	strh	r3, [r7, #20]
 8002c72:	8abb      	ldrh	r3, [r7, #20]
 8002c74:	2b63      	cmp	r3, #99	; 0x63
 8002c76:	d80d      	bhi.n	8002c94 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c78:	8abb      	ldrh	r3, [r7, #20]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c80:	3316      	adds	r3, #22
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c8c:	8abb      	ldrh	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	82bb      	strh	r3, [r7, #20]
 8002c92:	e7ee      	b.n	8002c72 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c94:	2300      	movs	r3, #0
 8002c96:	827b      	strh	r3, [r7, #18]
 8002c98:	8a7b      	ldrh	r3, [r7, #18]
 8002c9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c9e:	d20d      	bcs.n	8002cbc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002ca0:	8a7b      	ldrh	r3, [r7, #18]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002ca8:	333a      	adds	r3, #58	; 0x3a
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cb4:	8a7b      	ldrh	r3, [r7, #18]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	827b      	strh	r3, [r7, #18]
 8002cba:	e7ed      	b.n	8002c98 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	823b      	strh	r3, [r7, #16]
 8002cc0:	8a3b      	ldrh	r3, [r7, #16]
 8002cc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc6:	d20d      	bcs.n	8002ce4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002cc8:	8a3b      	ldrh	r3, [r7, #16]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002cd0:	332e      	adds	r3, #46	; 0x2e
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cdc:	8a3b      	ldrh	r3, [r7, #16]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	823b      	strh	r3, [r7, #16]
 8002ce2:	e7ed      	b.n	8002cc0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d40:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	ee07 3a90 	vmov	s15, r3

}
 8002d50:	eeb0 0a67 	vmov.f32	s0, s15
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000025c 	.word	0x2000025c
 8002d64:	00000000 	.word	0x00000000

08002d68 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffbf 	bl	8002cf4 <_ZN9LineTrace9calcErrorEv>
 8002d76:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d9a:	3354      	adds	r3, #84	; 0x54
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d14c      	bne.n	8002e3e <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002daa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dce:	ee17 0a90 	vmov	r0, s15
 8002dd2:	f7fd fbd1 	bl	8000578 <__aeabi_f2d>
 8002dd6:	a350      	add	r3, pc, #320	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fd4e 	bl	800087c <__aeabi_ddiv>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	f7fd ff16 	bl	8000c18 <__aeabi_d2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fbbf 	bl	8000578 <__aeabi_f2d>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbb2 	bl	8000578 <__aeabi_f2d>
 8002e14:	a340      	add	r3, pc, #256	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fc05 	bl	8000628 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fa49 	bl	80002bc <__adddf3>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4621      	mov	r1, r4
 8002e32:	f7fd fef1 	bl	8000c18 <__aeabi_d2f>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e04b      	b.n	8002ed6 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e68:	ee17 0a90 	vmov	r0, s15
 8002e6c:	f7fd fb84 	bl	8000578 <__aeabi_f2d>
 8002e70:	a329      	add	r3, pc, #164	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fd01 	bl	800087c <__aeabi_ddiv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4621      	mov	r1, r4
 8002e82:	f7fd fec9 	bl	8000c18 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb72 	bl	8000578 <__aeabi_f2d>
 8002e94:	4604      	mov	r4, r0
 8002e96:	460d      	mov	r5, r1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb65 	bl	8000578 <__aeabi_f2d>
 8002eae:	a31a      	add	r3, pc, #104	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f7fd fbb8 	bl	8000628 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd f9fc 	bl	80002bc <__adddf3>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4621      	mov	r1, r4
 8002ecc:	f7fd fea4 	bl	8000c18 <__aeabi_d2f>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ed4:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002efa:	edd7 0a02 	vldr	s1, [r7, #8]
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	4610      	mov	r0, r2
 8002f04:	f002 ff7c 	bl	8005e00 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6013      	str	r3, [r2, #0]

}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f1c:	3f50624d 	.word	0x3f50624d
 8002f20:	20000280 	.word	0x20000280
 8002f24:	2000027c 	.word	0x2000027c

08002f28 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fbf3 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 f8f2 	bl	8005128 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fe0a 	bl	8004b62 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 fe6b 	bl	8004c46 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f92:	3388      	adds	r3, #136	; 0x88
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461c      	mov	r4, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7fe fba3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002fa8:	3316      	adds	r3, #22
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fb8:	3388      	adds	r3, #136	; 0x88
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fc6:	3388      	adds	r3, #136	; 0x88
 8002fc8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fd0:	3388      	adds	r3, #136	; 0x88
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b63      	cmp	r3, #99	; 0x63
 8002fd6:	d905      	bls.n	8002fe4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fde:	3388      	adds	r3, #136	; 0x88
 8002fe0:	2263      	movs	r2, #99	; 0x63
 8002fe2:	801a      	strh	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}

08002fec <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ffe:	338a      	adds	r3, #138	; 0x8a
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461c      	mov	r4, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fe fb6d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003014:	333a      	adds	r3, #58	; 0x3a
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003024:	338a      	adds	r3, #138	; 0x8a
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003032:	338a      	adds	r3, #138	; 0x8a
 8003034:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800303c:	338a      	adds	r3, #138	; 0x8a
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003044:	d306      	bcc.n	8003054 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800304c:	338a      	adds	r3, #138	; 0x8a
 800304e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003052:	801a      	strh	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}

0800305c <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	ed2d 8b02 	vpush	{d8}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d046      	beq.n	8003100 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003078:	3354      	adds	r3, #84	; 0x54
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11c      	bne.n	80030bc <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69dc      	ldr	r4, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fb1b 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003090:	eeb0 8a40 	vmov.f32	s16, s0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4618      	mov	r0, r3
 800309a:	f002 f834 	bl	8005106 <_ZN8Odometry8getThetaEv>
 800309e:	ec53 2b10 	vmov	r2, r3, d0
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fdb7 	bl	8000c18 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
 80030ac:	ee00 3a90 	vmov	s1, r3
 80030b0:	eeb0 0a48 	vmov.f32	s0, s16
 80030b4:	4620      	mov	r0, r4
 80030b6:	f001 fc0b 	bl	80048d0 <_ZN6Logger21storeDistanceAndThetaEff>
 80030ba:	e01b      	b.n	80030f4 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69dc      	ldr	r4, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fafe 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80030ca:	eeb0 8a40 	vmov.f32	s16, s0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 f817 	bl	8005106 <_ZN8Odometry8getThetaEv>
 80030d8:	ec53 2b10 	vmov	r2, r3, d0
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd9a 	bl	8000c18 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	ee00 3a90 	vmov	s1, r3
 80030ea:	eeb0 0a48 	vmov.f32	s0, s16
 80030ee:	4620      	mov	r0, r4
 80030f0:	f001 fc31 	bl	8004956 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030fe:	801a      	strh	r2, [r3, #0]
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	ecbd 8b02 	vpop	{d8}
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	20000260 	.word	0x20000260

08003110 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695c      	ldr	r4, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003122:	3388      	adds	r3, #136	; 0x88
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800312c:	3316      	adds	r3, #22
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fa1f 	bl	8000578 <__aeabi_f2d>
 800313a:	a317      	add	r3, pc, #92	; (adr r3, 8003198 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x88>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd fb9c 	bl	800087c <__aeabi_ddiv>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fd64 	bl	8000c18 <__aeabi_d2f>
 8003150:	4603      	mov	r3, r0
 8003152:	ee00 3a10 	vmov	s0, r3
 8003156:	4620      	mov	r0, r4
 8003158:	f7fe fad3 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003162:	3388      	adds	r3, #136	; 0x88
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003170:	3388      	adds	r3, #136	; 0x88
 8003172:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800317a:	3388      	adds	r3, #136	; 0x88
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2b63      	cmp	r3, #99	; 0x63
 8003180:	d905      	bls.n	800318e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x7e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003188:	3388      	adds	r3, #136	; 0x88
 800318a:	2263      	movs	r2, #99	; 0x63
 800318c:	801a      	strh	r2, [r3, #0]

}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	bf00      	nop
 8003198:	fa43fe5d 	.word	0xfa43fe5d
 800319c:	3feeebed 	.word	0x3feeebed

080031a0 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031b2:	3354      	adds	r3, #84	; 0x54
 80031b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d12b      	bne.n	8003214 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 300) velocity = min_velocity_;
 80031bc:	edd7 7a00 	vldr	s15, [r7]
 80031c0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80032ac <_ZN9LineTrace15radius2VelocityEf+0x10c>
 80031c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031cc:	d504      	bpl.n	80031d8 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e05e      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 80031d8:	edd7 7a00 	vldr	s15, [r7]
 80031dc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80032b0 <_ZN9LineTrace15radius2VelocityEf+0x110>
 80031e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e8:	d502      	bpl.n	80031f0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80031ea:	4b32      	ldr	r3, [pc, #200]	; (80032b4 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e052      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 80031f0:	edd7 7a00 	vldr	s15, [r7]
 80031f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80032b8 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d503      	bpl.n	800320a <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8003202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	e045      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e040      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800321a:	3354      	adds	r3, #84	; 0x54
 800321c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d136      	bne.n	8003292 <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 8003224:	edd7 7a00 	vldr	s15, [r7]
 8003228:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80032ac <_ZN9LineTrace15radius2VelocityEf+0x10c>
 800322c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d504      	bpl.n	8003240 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e02a      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 8003240:	edd7 7a00 	vldr	s15, [r7]
 8003244:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80032bc <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003250:	d502      	bpl.n	8003258 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <_ZN9LineTrace15radius2VelocityEf+0x120>)
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	e01e      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 8003258:	edd7 7a00 	vldr	s15, [r7]
 800325c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80032c4 <_ZN9LineTrace15radius2VelocityEf+0x124>
 8003260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	d502      	bpl.n	8003270 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800326a:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <_ZN9LineTrace15radius2VelocityEf+0x128>)
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e012      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 8003270:	edd7 7a00 	vldr	s15, [r7]
 8003274:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80032cc <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8003278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	d502      	bpl.n	8003288 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003282:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_ZN9LineTrace15radius2VelocityEf+0x130>)
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e006      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e001      	b.n	8003296 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 8003294:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	ee07 3a90 	vmov	s15, r3
}
 800329c:	eeb0 0a67 	vmov.f32	s0, s15
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	43960000 	.word	0x43960000
 80032b0:	44480000 	.word	0x44480000
 80032b4:	3fd9999a 	.word	0x3fd9999a
 80032b8:	44af0000 	.word	0x44af0000
 80032bc:	44bb8000 	.word	0x44bb8000
 80032c0:	40066666 	.word	0x40066666
 80032c4:	44fa0000 	.word	0x44fa0000
 80032c8:	40200000 	.word	0x40200000
 80032cc:	451c4000 	.word	0x451c4000
 80032d0:	40400000 	.word	0x40400000
 80032d4:	3fa66666 	.word	0x3fa66666

080032d8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032d8:	b5b0      	push	{r4, r5, r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032e4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032e6:	f241 736f 	movw	r3, #5999	; 0x176f
 80032ea:	83fb      	strh	r3, [r7, #30]
 80032ec:	8bfb      	ldrh	r3, [r7, #30]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 808d 	beq.w	800340e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032f4:	8bfb      	ldrh	r3, [r7, #30]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032fe:	3304      	adds	r3, #4
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	ed93 7a00 	vldr	s14, [r3]
 8003308:	8bfb      	ldrh	r3, [r7, #30]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003310:	3304      	adds	r3, #4
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003322:	edd7 7a06 	vldr	s15, [r7, #24]
 8003326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	dd6a      	ble.n	8003406 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003330:	8bfb      	ldrh	r3, [r7, #30]
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4413      	add	r3, r2
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd f91c 	bl	8000578 <__aeabi_f2d>
 8003340:	a335      	add	r3, pc, #212	; (adr r3, 8003418 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f7fd f96f 	bl	8000628 <__aeabi_dmul>
 800334a:	4603      	mov	r3, r0
 800334c:	460c      	mov	r4, r1
 800334e:	4625      	mov	r5, r4
 8003350:	461c      	mov	r4, r3
 8003352:	69b8      	ldr	r0, [r7, #24]
 8003354:	f7fd f910 	bl	8000578 <__aeabi_f2d>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4620      	mov	r0, r4
 800335e:	4629      	mov	r1, r5
 8003360:	f7fd fa8c 	bl	800087c <__aeabi_ddiv>
 8003364:	4603      	mov	r3, r0
 8003366:	460c      	mov	r4, r1
 8003368:	4618      	mov	r0, r3
 800336a:	4621      	mov	r1, r4
 800336c:	f7fd fc54 	bl	8000c18 <__aeabi_d2f>
 8003370:	4603      	mov	r3, r0
 8003372:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003374:	edd7 6a06 	vldr	s13, [r7, #24]
 8003378:	ed97 7a05 	vldr	s14, [r7, #20]
 800337c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003380:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003384:	ed97 7a04 	vldr	s14, [r7, #16]
 8003388:	edd7 7a02 	vldr	s15, [r7, #8]
 800338c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003394:	dd37      	ble.n	8003406 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003396:	8bfb      	ldrh	r3, [r7, #30]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800339e:	3304      	adds	r3, #4
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7fd f8e6 	bl	8000578 <__aeabi_f2d>
 80033ac:	4604      	mov	r4, r0
 80033ae:	460d      	mov	r5, r1
 80033b0:	8bfb      	ldrh	r3, [r7, #30]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	ed93 7a00 	vldr	s14, [r3]
 80033bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80033c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c4:	ee17 0a90 	vmov	r0, s15
 80033c8:	f7fd f8d6 	bl	8000578 <__aeabi_f2d>
 80033cc:	a312      	add	r3, pc, #72	; (adr r3, 8003418 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fd f929 	bl	8000628 <__aeabi_dmul>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fc ff6d 	bl	80002bc <__adddf3>
 80033e2:	4603      	mov	r3, r0
 80033e4:	460c      	mov	r4, r1
 80033e6:	4619      	mov	r1, r3
 80033e8:	4622      	mov	r2, r4
 80033ea:	8bfb      	ldrh	r3, [r7, #30]
 80033ec:	1e5c      	subs	r4, r3, #1
 80033ee:	4608      	mov	r0, r1
 80033f0:	4611      	mov	r1, r2
 80033f2:	f7fd fc11 	bl	8000c18 <__aeabi_d2f>
 80033f6:	4601      	mov	r1, r0
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033fe:	3304      	adds	r3, #4
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	3b01      	subs	r3, #1
 800340a:	83fb      	strh	r3, [r7, #30]
 800340c:	e76e      	b.n	80032ec <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800340e:	bf00      	nop
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bdb0      	pop	{r4, r5, r7, pc}
 8003416:	bf00      	nop
 8003418:	d2f1a9fc 	.word	0xd2f1a9fc
 800341c:	3f50624d 	.word	0x3f50624d

08003420 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003420:	b5b0      	push	{r4, r5, r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	ed87 0a02 	vstr	s0, [r7, #8]
 800342c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800342e:	2300      	movs	r3, #0
 8003430:	83fb      	strh	r3, [r7, #30]
 8003432:	8bfb      	ldrh	r3, [r7, #30]
 8003434:	f241 726f 	movw	r2, #5999	; 0x176f
 8003438:	4293      	cmp	r3, r2
 800343a:	f200 808d 	bhi.w	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800343e:	8bfb      	ldrh	r3, [r7, #30]
 8003440:	3301      	adds	r3, #1
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003448:	3304      	adds	r3, #4
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	ed93 7a00 	vldr	s14, [r3]
 8003452:	8bfb      	ldrh	r3, [r7, #30]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800345a:	3304      	adds	r3, #4
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003468:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800346c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003478:	dd6a      	ble.n	8003550 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800347a:	8bfb      	ldrh	r3, [r7, #30]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd f877 	bl	8000578 <__aeabi_f2d>
 800348a:	a335      	add	r3, pc, #212	; (adr r3, 8003560 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f7fd f8ca 	bl	8000628 <__aeabi_dmul>
 8003494:	4603      	mov	r3, r0
 8003496:	460c      	mov	r4, r1
 8003498:	4625      	mov	r5, r4
 800349a:	461c      	mov	r4, r3
 800349c:	69b8      	ldr	r0, [r7, #24]
 800349e:	f7fd f86b 	bl	8000578 <__aeabi_f2d>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4620      	mov	r0, r4
 80034a8:	4629      	mov	r1, r5
 80034aa:	f7fd f9e7 	bl	800087c <__aeabi_ddiv>
 80034ae:	4603      	mov	r3, r0
 80034b0:	460c      	mov	r4, r1
 80034b2:	4618      	mov	r0, r3
 80034b4:	4621      	mov	r1, r4
 80034b6:	f7fd fbaf 	bl	8000c18 <__aeabi_d2f>
 80034ba:	4603      	mov	r3, r0
 80034bc:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034be:	edd7 6a06 	vldr	s13, [r7, #24]
 80034c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80034c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ca:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80034d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034de:	dd37      	ble.n	8003550 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034e0:	8bfb      	ldrh	r3, [r7, #30]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034e8:	3304      	adds	r3, #4
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd f841 	bl	8000578 <__aeabi_f2d>
 80034f6:	4604      	mov	r4, r0
 80034f8:	460d      	mov	r5, r1
 80034fa:	8bfb      	ldrh	r3, [r7, #30]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	4413      	add	r3, r2
 8003502:	ed93 7a00 	vldr	s14, [r3]
 8003506:	edd7 7a02 	vldr	s15, [r7, #8]
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	ee17 0a90 	vmov	r0, s15
 8003512:	f7fd f831 	bl	8000578 <__aeabi_f2d>
 8003516:	a312      	add	r3, pc, #72	; (adr r3, 8003560 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f7fd f884 	bl	8000628 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc fec8 	bl	80002bc <__adddf3>
 800352c:	4603      	mov	r3, r0
 800352e:	460c      	mov	r4, r1
 8003530:	4619      	mov	r1, r3
 8003532:	4622      	mov	r2, r4
 8003534:	8bfb      	ldrh	r3, [r7, #30]
 8003536:	1c5c      	adds	r4, r3, #1
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	f7fd fb6c 	bl	8000c18 <__aeabi_d2f>
 8003540:	4601      	mov	r1, r0
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003548:	3304      	adds	r3, #4
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003550:	8bfb      	ldrh	r3, [r7, #30]
 8003552:	3301      	adds	r3, #1
 8003554:	83fb      	strh	r3, [r7, #30]
 8003556:	e76c      	b.n	8003432 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003558:	bf00      	nop
 800355a:	3720      	adds	r7, #32
 800355c:	46bd      	mov	sp, r7
 800355e:	bdb0      	pop	{r4, r5, r7, pc}
 8003560:	d2f1a9fc 	.word	0xd2f1a9fc
 8003564:	3f50624d 	.word	0x3f50624d

08003568 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe f8e1 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003580:	3350      	adds	r3, #80	; 0x50
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800359c:	3350      	adds	r3, #80	; 0x50
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a8:	3352      	adds	r3, #82	; 0x52
 80035aa:	2200      	movs	r2, #0
 80035ac:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035b4:	330c      	adds	r3, #12
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035d6:	3350      	adds	r3, #80	; 0x50
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 809c 	beq.w	8003718 <_ZN9LineTrace20updateTargetVelocityEv+0x150>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe f87d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80035ea:	ee10 3a10 	vmov	r3, s0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fc ffc2 	bl	8000578 <__aeabi_f2d>
 80035f4:	a34e      	add	r3, pc, #312	; (adr r3, 8003730 <_ZN9LineTrace20updateTargetVelocityEv+0x168>)
 80035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fa:	f7fd f815 	bl	8000628 <__aeabi_dmul>
 80035fe:	4603      	mov	r3, r0
 8003600:	460c      	mov	r4, r1
 8003602:	4625      	mov	r5, r4
 8003604:	461c      	mov	r4, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800360c:	330c      	adds	r3, #12
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffb1 	bl	8000578 <__aeabi_f2d>
 8003616:	460a      	mov	r2, r1
 8003618:	4601      	mov	r1, r0
 800361a:	2301      	movs	r3, #1
 800361c:	461e      	mov	r6, r3
 800361e:	4613      	mov	r3, r2
 8003620:	460a      	mov	r2, r1
 8003622:	4620      	mov	r0, r4
 8003624:	4629      	mov	r1, r5
 8003626:	f7fd fa85 	bl	8000b34 <__aeabi_dcmpge>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <_ZN9LineTrace20updateTargetVelocityEv+0x6c>
 8003630:	2300      	movs	r3, #0
 8003632:	461e      	mov	r6, r3
 8003634:	b2f3      	uxtb	r3, r6
 8003636:	2b00      	cmp	r3, #0
 8003638:	d026      	beq.n	8003688 <_ZN9LineTrace20updateTargetVelocityEv+0xc0>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003640:	330c      	adds	r3, #12
 8003642:	ed93 7a00 	vldr	s14, [r3]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800364c:	3352      	adds	r3, #82	; 0x52
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	3332      	adds	r3, #50	; 0x32
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	3304      	adds	r3, #4
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003668:	330c      	adds	r3, #12
 800366a:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003674:	3352      	adds	r3, #82	; 0x52
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	3301      	adds	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003682:	3352      	adds	r3, #82	; 0x52
 8003684:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003686:	e7ab      	b.n	80035e0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800368e:	3352      	adds	r3, #82	; 0x52
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	f241 726f 	movw	r2, #5999	; 0x176f
 8003696:	4293      	cmp	r3, r2
 8003698:	d906      	bls.n	80036a8 <_ZN9LineTrace20updateTargetVelocityEv+0xe0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036a0:	3352      	adds	r3, #82	; 0x52
 80036a2:	f241 726f 	movw	r2, #5999	; 0x176f
 80036a6:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036ae:	330c      	adds	r3, #12
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1b      	ldr	r2, [pc, #108]	; (8003720 <_ZN9LineTrace20updateTargetVelocityEv+0x158>)
 80036b4:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fe f812 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036c0:	eef0 7a40 	vmov.f32	s15, s0
 80036c4:	4b17      	ldr	r3, [pc, #92]	; (8003724 <_ZN9LineTrace20updateTargetVelocityEv+0x15c>)
 80036c6:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d0:	3352      	adds	r3, #82	; 0x52
 80036d2:	881a      	ldrh	r2, [r3, #0]
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <_ZN9LineTrace20updateTargetVelocityEv+0x160>)
 80036d6:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036de:	3352      	adds	r3, #82	; 0x52
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036e8:	3304      	adds	r3, #4
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	eeb0 0a67 	vmov.f32	s0, s15
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 faef 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003702:	3352      	adds	r3, #82	; 0x52
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800370c:	3304      	adds	r3, #4
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a05      	ldr	r2, [pc, #20]	; (800372c <_ZN9LineTrace20updateTargetVelocityEv+0x164>)
 8003716:	6013      	str	r3, [r2, #0]

	}
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003720:	2000026c 	.word	0x2000026c
 8003724:	20000270 	.word	0x20000270
 8003728:	20000274 	.word	0x20000274
 800372c:	20000278 	.word	0x20000278
 8003730:	fa43fe5d 	.word	0xfa43fe5d
 8003734:	3feeebed 	.word	0x3feeebed

08003738 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	4618      	mov	r0, r3
 800374e:	f7fd ffba 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003752:	eeb0 7a40 	vmov.f32	s14, s0
 8003756:	edd7 7a00 	vldr	s15, [r7]
 800375a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003798:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800379c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80037b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037c0:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037c4:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80037ca:	4a40      	ldr	r2, [pc, #256]	; (80038cc <_ZN9LineTrace11isCrossLineEv+0x150>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80037d0:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <_ZN9LineTrace11isCrossLineEv+0xec>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80037de:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x158>
 80037e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ee:	d50f      	bpl.n	8003810 <_ZN9LineTrace11isCrossLineEv+0x94>
 80037f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80037f4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80038d4 <_ZN9LineTrace11isCrossLineEv+0x158>
 80037f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	d506      	bpl.n	8003810 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 8003802:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	4b33      	ldr	r3, [pc, #204]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800380c:	801a      	strh	r2, [r3, #0]
 800380e:	e002      	b.n	8003816 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003810:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003812:	2200      	movs	r2, #0
 8003814:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 8003816:	4b30      	ldr	r3, [pc, #192]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d04d      	beq.n	80038ba <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = true;
 800381e:	4b2f      	ldr	r3, [pc, #188]	; (80038dc <_ZN9LineTrace11isCrossLineEv+0x160>)
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003824:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800382a:	4b2b      	ldr	r3, [pc, #172]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800382c:	2200      	movs	r2, #0
 800382e:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003836:	3390      	adds	r3, #144	; 0x90
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003842:	3354      	adds	r3, #84	; 0x54
 8003844:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d103      	bne.n	8003854 <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff fb97 	bl	8002f80 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003852:	e032      	b.n	80038ba <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff fc5b 	bl	8003110 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003860:	33a4      	adds	r3, #164	; 0xa4
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	e028      	b.n	80038ba <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003868:	edd7 7a03 	vldr	s15, [r7, #12]
 800386c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038e0 <_ZN9LineTrace11isCrossLineEv+0x164>
 8003870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003878:	dd0f      	ble.n	800389a <_ZN9LineTrace11isCrossLineEv+0x11e>
 800387a:	edd7 7a02 	vldr	s15, [r7, #8]
 800387e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80038e0 <_ZN9LineTrace11isCrossLineEv+0x164>
 8003882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800388a:	dd06      	ble.n	800389a <_ZN9LineTrace11isCrossLineEv+0x11e>
			cnt++;
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800388e:	881b      	ldrh	r3, [r3, #0]
 8003890:	3301      	adds	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003896:	801a      	strh	r2, [r3, #0]
 8003898:	e002      	b.n	80038a0 <_ZN9LineTrace11isCrossLineEv+0x124>
		}
		else{
			cnt = 0;
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800389c:	2200      	movs	r2, #0
 800389e:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	2b09      	cmp	r3, #9
 80038a6:	d908      	bls.n	80038ba <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = false;
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <_ZN9LineTrace11isCrossLineEv+0x160>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038ae:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038b4:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <_ZN9LineTrace11isCrossLineEv+0x160>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000264 	.word	0x20000264
 80038cc:	20000268 	.word	0x20000268
 80038d0:	20000287 	.word	0x20000287
 80038d4:	44160000 	.word	0x44160000
 80038d8:	20000284 	.word	0x20000284
 80038dc:	20000286 	.word	0x20000286
 80038e0:	43fa0000 	.word	0x43fa0000

080038e4 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fee6 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80038fa:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fbff 	bl	8005106 <_ZN8Odometry8getThetaEv>
 8003908:	ec54 3b10 	vmov	r3, r4, d0
 800390c:	4618      	mov	r0, r3
 800390e:	4621      	mov	r1, r4
 8003910:	f7fd f982 	bl	8000c18 <__aeabi_d2f>
 8003914:	4603      	mov	r3, r0
 8003916:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003918:	edd7 7a04 	vldr	s15, [r7, #16]
 800391c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	d101      	bne.n	800392a <_ZN9LineTrace8isStableEv+0x46>
 8003926:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <_ZN9LineTrace8isStableEv+0xd0>)
 8003928:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800392a:	ed97 7a02 	vldr	s14, [r7, #8]
 800392e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003932:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003936:	eeb0 0a66 	vmov.f32	s0, s13
 800393a:	f7ff f8b7 	bl	8002aac <_ZSt3absf>
 800393e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003942:	edd7 7a03 	vldr	s15, [r7, #12]
 8003946:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039b8 <_ZN9LineTrace8isStableEv+0xd4>
 800394a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003952:	db01      	blt.n	8003958 <_ZN9LineTrace8isStableEv+0x74>
 8003954:	4b19      	ldr	r3, [pc, #100]	; (80039bc <_ZN9LineTrace8isStableEv+0xd8>)
 8003956:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800395e:	3390      	adds	r3, #144	; 0x90
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003968:	2200      	movs	r2, #0
 800396a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003972:	3390      	adds	r3, #144	; 0x90
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003978:	edd7 7a03 	vldr	s15, [r7, #12]
 800397c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039c4 <_ZN9LineTrace8isStableEv+0xe0>
 8003980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	db06      	blt.n	8003998 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 800398a:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <_ZN9LineTrace8isStableEv+0xdc>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <_ZN9LineTrace8isStableEv+0xdc>)
 8003994:	801a      	strh	r2, [r3, #0]
 8003996:	e002      	b.n	800399e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <_ZN9LineTrace8isStableEv+0xdc>)
 800399a:	2200      	movs	r2, #0
 800399c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <_ZN9LineTrace8isStableEv+0xdc>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d901      	bls.n	80039aa <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80039a6:	2301      	movs	r3, #1
 80039a8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	3727c5ac 	.word	0x3727c5ac
 80039b8:	459c4000 	.word	0x459c4000
 80039bc:	459c4000 	.word	0x459c4000
 80039c0:	20000288 	.word	0x20000288
 80039c4:	44fa0000 	.word	0x44fa0000

080039c8 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b092      	sub	sp, #72	; 0x48
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039d4:	2201      	movs	r2, #1
 80039d6:	4963      	ldr	r1, [pc, #396]	; (8003b64 <_ZN9LineTrace4initEv+0x19c>)
 80039d8:	4863      	ldr	r0, [pc, #396]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 80039da:	f7fd ffb5 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80039de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80039e2:	2201      	movs	r2, #1
 80039e4:	4961      	ldr	r1, [pc, #388]	; (8003b6c <_ZN9LineTrace4initEv+0x1a4>)
 80039e6:	4860      	ldr	r0, [pc, #384]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 80039e8:	f7fd ffae 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80039ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f0:	2201      	movs	r2, #1
 80039f2:	495f      	ldr	r1, [pc, #380]	; (8003b70 <_ZN9LineTrace4initEv+0x1a8>)
 80039f4:	485c      	ldr	r0, [pc, #368]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 80039f6:	f7fd ffa7 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80039fe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003a02:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003a06:	eeb0 1a66 	vmov.f32	s2, s13
 8003a0a:	eef0 0a47 	vmov.f32	s1, s14
 8003a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8c6 	bl	8003ba4 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4955      	ldr	r1, [pc, #340]	; (8003b74 <_ZN9LineTrace4initEv+0x1ac>)
 8003a20:	4851      	ldr	r0, [pc, #324]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a22:	f7fd ff91 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4952      	ldr	r1, [pc, #328]	; (8003b78 <_ZN9LineTrace4initEv+0x1b0>)
 8003a2e:	484e      	ldr	r0, [pc, #312]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a30:	f7fd ff8a 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4950      	ldr	r1, [pc, #320]	; (8003b7c <_ZN9LineTrace4initEv+0x1b4>)
 8003a3c:	484a      	ldr	r0, [pc, #296]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a3e:	f7fd ff83 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a42:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a46:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a4a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a4e:	eeb0 1a66 	vmov.f32	s2, s13
 8003a52:	eef0 0a47 	vmov.f32	s1, s14
 8003a56:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8e8 	bl	8003c30 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a64:	2201      	movs	r2, #1
 8003a66:	4946      	ldr	r1, [pc, #280]	; (8003b80 <_ZN9LineTrace4initEv+0x1b8>)
 8003a68:	483f      	ldr	r0, [pc, #252]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a6a:	f7fd ff6d 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a72:	2201      	movs	r2, #1
 8003a74:	4943      	ldr	r1, [pc, #268]	; (8003b84 <_ZN9LineTrace4initEv+0x1bc>)
 8003a76:	483c      	ldr	r0, [pc, #240]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a78:	f7fd ff66 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a80:	2201      	movs	r2, #1
 8003a82:	4941      	ldr	r1, [pc, #260]	; (8003b88 <_ZN9LineTrace4initEv+0x1c0>)
 8003a84:	4838      	ldr	r0, [pc, #224]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a86:	f7fd ff5f 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a8a:	f107 0320 	add.w	r3, r7, #32
 8003a8e:	2201      	movs	r2, #1
 8003a90:	493e      	ldr	r1, [pc, #248]	; (8003b8c <_ZN9LineTrace4initEv+0x1c4>)
 8003a92:	4835      	ldr	r0, [pc, #212]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003a94:	f7fd ff58 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	493c      	ldr	r1, [pc, #240]	; (8003b90 <_ZN9LineTrace4initEv+0x1c8>)
 8003aa0:	4831      	ldr	r0, [pc, #196]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003aa2:	f7fd ff51 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003aa6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f913 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003ab4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f91c 	bl	8003cfa <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003ac2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f925 	bl	8003d1a <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ad0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f92e 	bl	8003d3a <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003ade:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f937 	bl	8003d5a <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003aec:	f107 0318 	add.w	r3, r7, #24
 8003af0:	2201      	movs	r2, #1
 8003af2:	4928      	ldr	r1, [pc, #160]	; (8003b94 <_ZN9LineTrace4initEv+0x1cc>)
 8003af4:	481c      	ldr	r0, [pc, #112]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003af6:	f7fd ff27 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003afa:	f107 0314 	add.w	r3, r7, #20
 8003afe:	2201      	movs	r2, #1
 8003b00:	4925      	ldr	r1, [pc, #148]	; (8003b98 <_ZN9LineTrace4initEv+0x1d0>)
 8003b02:	4819      	ldr	r0, [pc, #100]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003b04:	f7fd ff20 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b10:	eef0 0a47 	vmov.f32	s1, s14
 8003b14:	eeb0 0a67 	vmov.f32	s0, s15
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f97e 	bl	8003e1a <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b2a:	f107 0310 	add.w	r3, r7, #16
 8003b2e:	2201      	movs	r2, #1
 8003b30:	491a      	ldr	r1, [pc, #104]	; (8003b9c <_ZN9LineTrace4initEv+0x1d4>)
 8003b32:	480d      	ldr	r0, [pc, #52]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003b34:	f7fd ff08 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4918      	ldr	r1, [pc, #96]	; (8003ba0 <_ZN9LineTrace4initEv+0x1d8>)
 8003b40:	4809      	ldr	r0, [pc, #36]	; (8003b68 <_ZN9LineTrace4initEv+0x1a0>)
 8003b42:	f7fd ff01 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b4e:	eef0 0a47 	vmov.f32	s1, s14
 8003b52:	eeb0 0a67 	vmov.f32	s0, s15
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f979 	bl	8003e4e <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b5c:	bf00      	nop
 8003b5e:	3748      	adds	r7, #72	; 0x48
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08019cb8 	.word	0x08019cb8
 8003b68:	08019cc0 	.word	0x08019cc0
 8003b6c:	08019cc8 	.word	0x08019cc8
 8003b70:	08019cd0 	.word	0x08019cd0
 8003b74:	08019cd8 	.word	0x08019cd8
 8003b78:	08019ce4 	.word	0x08019ce4
 8003b7c:	08019cf0 	.word	0x08019cf0
 8003b80:	08019cfc 	.word	0x08019cfc
 8003b84:	08019d08 	.word	0x08019d08
 8003b88:	08019d14 	.word	0x08019d14
 8003b8c:	08019d20 	.word	0x08019d20
 8003b90:	08019d2c 	.word	0x08019d2c
 8003b94:	08019d38 	.word	0x08019d38
 8003b98:	08019d40 	.word	0x08019d40
 8003b9c:	08019d48 	.word	0x08019d48
 8003ba0:	08019d54 	.word	0x08019d54

08003ba4 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bb0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bb4:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bca:	bf00      	nop
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	ee07 3a90 	vmov	s15, r3
}
 8003be6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	return ki_;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	ee07 3a90 	vmov	s15, r3
}
 8003c04:	eeb0 0a67 	vmov.f32	s0, s15
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	ee07 3a90 	vmov	s15, r3
}
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c3c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c40:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6e:	ee07 3a90 	vmov	s15, r3
}
 8003c72:	eeb0 0a67 	vmov.f32	s0, s15
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8c:	ee07 3a90 	vmov	s15, r3
}
 8003c90:	eeb0 0a67 	vmov.f32	s0, s15
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003caa:	ee07 3a90 	vmov	s15, r3
}
 8003cae:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
 8003d02:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
 8003d62:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d88:	ee07 3a90 	vmov	s15, r3
}
 8003d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003da8:	ee07 3a90 	vmov	s15, r3
}
 8003dac:	eeb0 0a67 	vmov.f32	s0, s15
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dc8:	ee07 3a90 	vmov	s15, r3
}
 8003dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003de8:	ee07 3a90 	vmov	s15, r3
}
 8003dec:	eeb0 0a67 	vmov.f32	s0, s15
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e08:	ee07 3a90 	vmov	s15, r3
}
 8003e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e26:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e30:	3394      	adds	r3, #148	; 0x94
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e3c:	3398      	adds	r3, #152	; 0x98
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e5a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e64:	339c      	adds	r3, #156	; 0x9c
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e70:	33a0      	adds	r3, #160	; 0xa0
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e90:	3394      	adds	r3, #148	; 0x94
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	ee07 3a90 	vmov	s15, r3
}
 8003e98:	eeb0 0a67 	vmov.f32	s0, s15
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003eb4:	33a0      	adds	r3, #160	; 0xa0
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ed8:	339c      	adds	r3, #156	; 0x9c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	ee07 3a90 	vmov	s15, r3
}
 8003ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003efc:	3398      	adds	r3, #152	; 0x98
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	ee07 3a90 	vmov	s15, r3
}
 8003f04:	eeb0 0a67 	vmov.f32	s0, s15
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80f3 	beq.w	800410e <_ZN9LineTrace4flipEv+0x1fa>
		// ---- line following processing -----//
		pidTrace();
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7fe ff1d 	bl	8002d68 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fb4a 	bl	80035c8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8003f34:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8004118 <_ZN9LineTrace4flipEv+0x204>
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fbfd 	bl	8003738 <_ZN9LineTrace16isTargetDistanceEf>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d028      	beq.n	8003f96 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff f889 	bl	800305c <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fcca 	bl	80038e4 <_ZN9LineTrace8isStableEv>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <_ZN9LineTrace4flipEv+0x5c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f001 fb9e 	bl	800569c <_ZN10SideSensor10getStatusLEv>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f083 0301 	eor.w	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <_ZN9LineTrace4flipEv+0x5c>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <_ZN9LineTrace4flipEv+0x5e>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f7c:	338f      	adds	r3, #143	; 0x8f
 8003f7e:	2201      	movs	r2, #1
 8003f80:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fbca 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f8c9 	bl	8005128 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f9c:	338f      	adds	r3, #143	; 0x8f
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d009      	beq.n	8003fb8 <_ZN9LineTrace4flipEv+0xa4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fb77 	bl	800569c <_ZN10SideSensor10getStatusLEv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZN9LineTrace4flipEv+0xa4>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <_ZN9LineTrace4flipEv+0xa6>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01d      	beq.n	8003ffa <_ZN9LineTrace4flipEv+0xe6>
			if(mode_selector_ == FIRST_RUNNING){
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fc4:	3354      	adds	r3, #84	; 0x54
 8003fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <_ZN9LineTrace4flipEv+0xc2>
				storeSideLineDistance();
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff f80c 	bl	8002fec <_ZN9LineTrace21storeSideLineDistanceEv>
 8003fd4:	e005      	b.n	8003fe2 <_ZN9LineTrace4flipEv+0xce>
			}
			else{
				//correctionTotalDistanceFromSideMarker();
				correction_check_cnt_ = 0;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fdc:	33a4      	adds	r3, #164	; 0xa4
 8003fde:	2200      	movs	r2, #0
 8003fe0:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fe8:	338f      	adds	r3, #143	; 0x8f
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ff4:	3390      	adds	r3, #144	; 0x90
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fbbe 	bl	800377c <_ZN9LineTrace11isCrossLineEv>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d011      	beq.n	800402a <_ZN9LineTrace4flipEv+0x116>
			side_sensor_->enableIgnore();
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fb6e 	bl	80056ec <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fd fbae 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			led_.LR(1, -1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	330c      	adds	r3, #12
 800401e:	f04f 32ff 	mov.w	r2, #4294967295
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f7fe f9d1 	bl	80023cc <_ZN3LED2LREaa>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fb76 	bl	8005720 <_ZN10SideSensor13getIgnoreFlagEv>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00f      	beq.n	800405a <_ZN9LineTrace4flipEv+0x146>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fb8a 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8004044:	eeb0 7a40 	vmov.f32	s14, s0
 8004048:	eddf 7a34 	vldr	s15, [pc, #208]	; 800411c <_ZN9LineTrace4flipEv+0x208>
 800404c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004054:	db01      	blt.n	800405a <_ZN9LineTrace4flipEv+0x146>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <_ZN9LineTrace4flipEv+0x148>
 800405a:	2300      	movs	r3, #0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <_ZN9LineTrace4flipEv+0x166>
			side_sensor_->disableIgnore();
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	4618      	mov	r0, r3
 8004066:	f001 fb4e 	bl	8005706 <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	330c      	adds	r3, #12
 800406e:	f04f 32ff 	mov.w	r2, #4294967295
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f7fe f9a9 	bl	80023cc <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fcc4 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <_ZN9LineTrace4flipEv+0x192>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004120 <_ZN9LineTrace4flipEv+0x20c>
 8004092:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004120 <_ZN9LineTrace4flipEv+0x20c>
 8004096:	4618      	mov	r0, r3
 8004098:	f001 feb2 	bl	8005e00 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd f96f 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ac:	33a4      	adds	r3, #164	; 0xa4
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ba:	33a4      	adds	r3, #164	; 0xa4
 80040bc:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040c4:	33a4      	adds	r3, #164	; 0xa4
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d906      	bls.n	80040de <_ZN9LineTrace4flipEv+0x1ca>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040d6:	33a4      	adds	r3, #164	; 0xa4
 80040d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80040dc:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040e4:	33a4      	adds	r3, #164	; 0xa4
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	2b50      	cmp	r3, #80	; 0x50
 80040ea:	d808      	bhi.n	80040fe <_ZN9LineTrace4flipEv+0x1ea>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	330c      	adds	r3, #12
 80040f0:	2201      	movs	r2, #1
 80040f2:	f04f 31ff 	mov.w	r1, #4294967295
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe f968 	bl	80023cc <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 80040fc:	e007      	b.n	800410e <_ZN9LineTrace4flipEv+0x1fa>
		else led_.LR(-1, 0);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	330c      	adds	r3, #12
 8004102:	2200      	movs	r2, #0
 8004104:	f04f 31ff 	mov.w	r1, #4294967295
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe f95f 	bl	80023cc <_ZN3LED2LREaa>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	42480000 	.word	0x42480000
 800411c:	428c0000 	.word	0x428c0000
 8004120:	00000000 	.word	0x00000000

08004124 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004136:	3354      	adds	r3, #84	; 0x54
 8004138:	887a      	ldrh	r2, [r7, #2]
 800413a:	801a      	strh	r2, [r3, #0]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	4618      	mov	r0, r3
 8004166:	f001 fea4 	bl	8005eb2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	4618      	mov	r0, r3
 8004170:	f001 faac 	bl	80056cc <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800417a:	3388      	adds	r3, #136	; 0x88
 800417c:	2200      	movs	r2, #0
 800417e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004186:	338a      	adds	r3, #138	; 0x8a
 8004188:	2200      	movs	r2, #0
 800418a:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004192:	338c      	adds	r3, #140	; 0x8c
 8004194:	2200      	movs	r2, #0
 8004196:	801a      	strh	r2, [r3, #0]
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80041ac:	2300      	movs	r3, #0
 80041ae:	737b      	strb	r3, [r7, #13]
	start();
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ffc9 	bl	8004148 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80041b6:	7b7b      	ldrb	r3, [r7, #13]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d161      	bne.n	8004280 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d002      	beq.n	80041c8 <_ZN9LineTrace7runningEv+0x28>
 80041c2:	2b0a      	cmp	r3, #10
 80041c4:	d030      	beq.n	8004228 <_ZN9LineTrace7runningEv+0x88>
 80041c6:	e05a      	b.n	800427e <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 fa71 	bl	80056b4 <_ZN10SideSensor16getWhiteLineCntREv>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04a      	beq.n	8004278 <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fe fea0 	bl	8002f28 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041ee:	3354      	adds	r3, #84	; 0x54
 80041f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d002      	beq.n	80041fe <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff f9b5 	bl	8003568 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fd fab7 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	4618      	mov	r0, r3
 800420e:	f7fd fa95 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	330c      	adds	r3, #12
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f8d5 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 8004222:	230a      	movs	r3, #10
 8004224:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004226:	e027      	b.n	8004278 <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fa41 	bl	80056b4 <_ZN10SideSensor16getWhiteLineCntREv>
 8004232:	4603      	mov	r3, r0
 8004234:	2b02      	cmp	r3, #2
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01c      	beq.n	800427c <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	330c      	adds	r3, #12
 8004246:	214d      	movs	r1, #77	; 0x4d
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe f803 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fe fe85 	bl	8002f5e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff f99a 	bl	800358e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800425a:	2064      	movs	r0, #100	; 0x64
 800425c:	f005 fd8c 	bl	8009d78 <HAL_Delay>

				setTargetVelocity(0);
 8004260:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004290 <_ZN9LineTrace7runningEv+0xf0>
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fd38 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800426a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800426e:	f005 fd83 	bl	8009d78 <HAL_Delay>

				goal_flag = true;
 8004272:	2301      	movs	r3, #1
 8004274:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004276:	e001      	b.n	800427c <_ZN9LineTrace7runningEv+0xdc>
			break;
 8004278:	bf00      	nop
 800427a:	e79c      	b.n	80041b6 <_ZN9LineTrace7runningEv+0x16>
			break;
 800427c:	bf00      	nop
	while(goal_flag == false){
 800427e:	e79a      	b.n	80041b6 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f807 	bl	8004294 <_ZN9LineTrace4stopEv>
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	00000000 	.word	0x00000000

08004294 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f001 fe15 	bl	8005ed8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	330c      	adds	r3, #12
 80042b2:	2201      	movs	r2, #1
 80042b4:	f04f 31ff 	mov.w	r1, #4294967295
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe f887 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042c4:	3354      	adds	r3, #84	; 0x54
 80042c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69d8      	ldr	r0, [r3, #28]
 80042d2:	4b23      	ldr	r3, [pc, #140]	; (8004360 <_ZN9LineTrace4stopEv+0xcc>)
 80042d4:	4a23      	ldr	r2, [pc, #140]	; (8004364 <_ZN9LineTrace4stopEv+0xd0>)
 80042d6:	4924      	ldr	r1, [pc, #144]	; (8004368 <_ZN9LineTrace4stopEv+0xd4>)
 80042d8:	f000 fbdc 	bl	8004a94 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80042dc:	e006      	b.n	80042ec <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69d8      	ldr	r0, [r3, #28]
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <_ZN9LineTrace4stopEv+0xd8>)
 80042e4:	4a22      	ldr	r2, [pc, #136]	; (8004370 <_ZN9LineTrace4stopEv+0xdc>)
 80042e6:	4920      	ldr	r1, [pc, #128]	; (8004368 <_ZN9LineTrace4stopEv+0xd4>)
 80042e8:	f000 fbf7 	bl	8004ada <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80042f2:	3358      	adds	r3, #88	; 0x58
 80042f4:	2200      	movs	r2, #0
 80042f6:	9200      	str	r2, [sp, #0]
 80042f8:	2264      	movs	r2, #100	; 0x64
 80042fa:	491e      	ldr	r1, [pc, #120]	; (8004374 <_ZN9LineTrace4stopEv+0xe0>)
 80042fc:	481a      	ldr	r0, [pc, #104]	; (8004368 <_ZN9LineTrace4stopEv+0xd4>)
 80042fe:	f7fd fabd 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004308:	33e8      	adds	r3, #232	; 0xe8
 800430a:	2200      	movs	r2, #0
 800430c:	9200      	str	r2, [sp, #0]
 800430e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004312:	4919      	ldr	r1, [pc, #100]	; (8004378 <_ZN9LineTrace4stopEv+0xe4>)
 8004314:	4814      	ldr	r0, [pc, #80]	; (8004368 <_ZN9LineTrace4stopEv+0xd4>)
 8004316:	f7fd fab1 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8004320:	33b8      	adds	r3, #184	; 0xb8
 8004322:	2200      	movs	r2, #0
 8004324:	9200      	str	r2, [sp, #0]
 8004326:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800432a:	4914      	ldr	r1, [pc, #80]	; (800437c <_ZN9LineTrace4stopEv+0xe8>)
 800432c:	480e      	ldr	r0, [pc, #56]	; (8004368 <_ZN9LineTrace4stopEv+0xd4>)
 800432e:	f7fd faa5 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	330c      	adds	r3, #12
 8004336:	2200      	movs	r2, #0
 8004338:	f04f 31ff 	mov.w	r1, #4294967295
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe f845 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fc57 	bl	8004bfa <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fc06 	bl	8004b62 <_ZN6Logger10resetLogs2Ev>
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	08019d60 	.word	0x08019d60
 8004364:	08019d6c 	.word	0x08019d6c
 8004368:	08019d7c 	.word	0x08019d7c
 800436c:	08019d88 	.word	0x08019d88
 8004370:	08019d94 	.word	0x08019d94
 8004374:	08019da4 	.word	0x08019da4
 8004378:	08019db4 	.word	0x08019db4
 800437c:	08019dc0 	.word	0x08019dc0

08004380 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b08b      	sub	sp, #44	; 0x2c
 8004384:	af02      	add	r7, sp, #8
 8004386:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fb25 	bl	80049dc <_ZN6Logger23getDistanceArrayPointerEv>
 8004392:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fb2d 	bl	80049f8 <_ZN6Logger20getThetaArrayPointerEv>
 800439e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80043a0:	2300      	movs	r3, #0
 80043a2:	837b      	strh	r3, [r7, #26]
 80043a4:	8b7b      	ldrh	r3, [r7, #26]
 80043a6:	f241 726f 	movw	r2, #5999	; 0x176f
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d84b      	bhi.n	8004446 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4413      	add	r3, r2
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80043ba:	8b7b      	ldrh	r3, [r7, #26]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80043c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80043ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	d101      	bne.n	80043d8 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80043d4:	4b4c      	ldr	r3, [pc, #304]	; (8004508 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80043d6:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80043d8:	ed97 7a02 	vldr	s14, [r7, #8]
 80043dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80043e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80043e4:	eeb0 0a66 	vmov.f32	s0, s13
 80043e8:	f7fe fb60 	bl	8002aac <_ZSt3absf>
 80043ec:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80043f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80043f4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800450c <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80043f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004400:	db01      	blt.n	8004406 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004404:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004406:	8b7c      	ldrh	r4, [r7, #26]
 8004408:	ed97 0a05 	vldr	s0, [r7, #20]
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f7fe fec7 	bl	80031a0 <_ZN9LineTrace15radius2VelocityEf>
 8004412:	eef0 7a40 	vmov.f32	s15, s0
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800441c:	3304      	adds	r3, #4
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004426:	8b7b      	ldrh	r3, [r7, #26]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	441a      	add	r2, r3
 800442e:	8b7b      	ldrh	r3, [r7, #26]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	3332      	adds	r3, #50	; 0x32
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3304      	adds	r3, #4
 800443c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800443e:	8b7b      	ldrh	r3, [r7, #26]
 8004440:	3301      	adds	r3, #1
 8004442:	837b      	strh	r3, [r7, #26]
 8004444:	e7ae      	b.n	80043a4 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800444c:	3354      	adds	r3, #84	; 0x54
 800444e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d120      	bne.n	8004498 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004462:	3310      	adds	r3, #16
 8004464:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800446c:	3398      	adds	r3, #152	; 0x98
 800446e:	edd3 7a00 	vldr	s15, [r3]
 8004472:	6939      	ldr	r1, [r7, #16]
 8004474:	eeb0 0a67 	vmov.f32	s0, s15
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7fe ff2d 	bl	80032d8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004484:	3394      	adds	r3, #148	; 0x94
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	eeb0 0a67 	vmov.f32	s0, s15
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fe ffc5 	bl	8003420 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004496:	e027      	b.n	80044e8 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800449e:	3354      	adds	r3, #84	; 0x54
 80044a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11f      	bne.n	80044e8 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044b4:	3310      	adds	r3, #16
 80044b6:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80044be:	33a0      	adds	r3, #160	; 0xa0
 80044c0:	edd3 7a00 	vldr	s15, [r3]
 80044c4:	6939      	ldr	r1, [r7, #16]
 80044c6:	eeb0 0a67 	vmov.f32	s0, s15
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fe ff04 	bl	80032d8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80044d6:	339c      	adds	r3, #156	; 0x9c
 80044d8:	edd3 7a00 	vldr	s15, [r3]
 80044dc:	6939      	ldr	r1, [r7, #16]
 80044de:	eeb0 0a67 	vmov.f32	s0, s15
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7fe ff9c 	bl	8003420 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044ee:	3310      	adds	r3, #16
 80044f0:	2200      	movs	r2, #0
 80044f2:	9200      	str	r2, [sp, #0]
 80044f4:	f241 7270 	movw	r2, #6000	; 0x1770
 80044f8:	4906      	ldr	r1, [pc, #24]	; (8004514 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80044fa:	4807      	ldr	r0, [pc, #28]	; (8004518 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80044fc:	f7fd f9be 	bl	800187c <sd_write_array_float>

}
 8004500:	bf00      	nop
 8004502:	3724      	adds	r7, #36	; 0x24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd90      	pop	{r4, r7, pc}
 8004508:	3727c5ac 	.word	0x3727c5ac
 800450c:	459c4000 	.word	0x459c4000
 8004510:	459c4000 	.word	0x459c4000
 8004514:	08019dd0 	.word	0x08019dd0
 8004518:	08019d7c 	.word	0x08019d7c

0800451c <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 800451c:	b590      	push	{r4, r7, lr}
 800451e:	b08b      	sub	sp, #44	; 0x2c
 8004520:	af02      	add	r7, sp, #8
 8004522:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69d8      	ldr	r0, [r3, #28]
 8004528:	4b6b      	ldr	r3, [pc, #428]	; (80046d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800452a:	4a6c      	ldr	r2, [pc, #432]	; (80046dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 800452c:	496c      	ldr	r1, [pc, #432]	; (80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800452e:	f000 faf9 	bl	8004b24 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004538:	3358      	adds	r3, #88	; 0x58
 800453a:	2264      	movs	r2, #100	; 0x64
 800453c:	4969      	ldr	r1, [pc, #420]	; (80046e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800453e:	4868      	ldr	r0, [pc, #416]	; (80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004540:	f7fd fa02 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800454a:	33e8      	adds	r3, #232	; 0xe8
 800454c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004550:	4965      	ldr	r1, [pc, #404]	; (80046e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8004552:	4863      	ldr	r0, [pc, #396]	; (80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004554:	f7fd f9f8 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fa3d 	bl	80049dc <_ZN6Logger23getDistanceArrayPointerEv>
 8004562:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fa45 	bl	80049f8 <_ZN6Logger20getThetaArrayPointerEv>
 800456e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004570:	2300      	movs	r3, #0
 8004572:	837b      	strh	r3, [r7, #26]
 8004574:	8b7b      	ldrh	r3, [r7, #26]
 8004576:	f241 726f 	movw	r2, #5999	; 0x176f
 800457a:	4293      	cmp	r3, r2
 800457c:	d84b      	bhi.n	8004616 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800457e:	8b7b      	ldrh	r3, [r7, #26]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800458a:	8b7b      	ldrh	r3, [r7, #26]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004596:	edd7 7a07 	vldr	s15, [r7, #28]
 800459a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	d101      	bne.n	80045a8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80045a4:	4b51      	ldr	r3, [pc, #324]	; (80046ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80045a6:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80045a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80045ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80045b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045b4:	eeb0 0a66 	vmov.f32	s0, s13
 80045b8:	f7fe fa78 	bl	8002aac <_ZSt3absf>
 80045bc:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80045c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80046f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80045c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d0:	db01      	blt.n	80045d6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80045d2:	4b48      	ldr	r3, [pc, #288]	; (80046f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80045d4:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80045d6:	8b7c      	ldrh	r4, [r7, #26]
 80045d8:	ed97 0a05 	vldr	s0, [r7, #20]
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fe fddf 	bl	80031a0 <_ZN9LineTrace15radius2VelocityEf>
 80045e2:	eef0 7a40 	vmov.f32	s15, s0
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045ec:	3304      	adds	r3, #4
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045f6:	8b7b      	ldrh	r3, [r7, #26]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	441a      	add	r2, r3
 80045fe:	8b7b      	ldrh	r3, [r7, #26]
 8004600:	6812      	ldr	r2, [r2, #0]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	3332      	adds	r3, #50	; 0x32
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3304      	adds	r3, #4
 800460c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800460e:	8b7b      	ldrh	r3, [r7, #26]
 8004610:	3301      	adds	r3, #1
 8004612:	837b      	strh	r3, [r7, #26]
 8004614:	e7ae      	b.n	8004574 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800461c:	3354      	adds	r3, #84	; 0x54
 800461e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d120      	bne.n	8004668 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004632:	3310      	adds	r3, #16
 8004634:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800463c:	3398      	adds	r3, #152	; 0x98
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	eeb0 0a67 	vmov.f32	s0, s15
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7fe fe45 	bl	80032d8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004654:	3394      	adds	r3, #148	; 0x94
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	6939      	ldr	r1, [r7, #16]
 800465c:	eeb0 0a67 	vmov.f32	s0, s15
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fe fedd 	bl	8003420 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004666:	e027      	b.n	80046b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800466e:	3354      	adds	r3, #84	; 0x54
 8004670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d11f      	bne.n	80046b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004684:	3310      	adds	r3, #16
 8004686:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800468e:	33a0      	adds	r3, #160	; 0xa0
 8004690:	edd3 7a00 	vldr	s15, [r3]
 8004694:	6939      	ldr	r1, [r7, #16]
 8004696:	eeb0 0a67 	vmov.f32	s0, s15
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fe fe1c 	bl	80032d8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80046a6:	339c      	adds	r3, #156	; 0x9c
 80046a8:	edd3 7a00 	vldr	s15, [r3]
 80046ac:	6939      	ldr	r1, [r7, #16]
 80046ae:	eeb0 0a67 	vmov.f32	s0, s15
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe feb4 	bl	8003420 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046be:	3310      	adds	r3, #16
 80046c0:	2200      	movs	r2, #0
 80046c2:	9200      	str	r2, [sp, #0]
 80046c4:	f241 7270 	movw	r2, #6000	; 0x1770
 80046c8:	490b      	ldr	r1, [pc, #44]	; (80046f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80046ca:	4805      	ldr	r0, [pc, #20]	; (80046e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046cc:	f7fd f8d6 	bl	800187c <sd_write_array_float>

}
 80046d0:	bf00      	nop
 80046d2:	3724      	adds	r7, #36	; 0x24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd90      	pop	{r4, r7, pc}
 80046d8:	08019d60 	.word	0x08019d60
 80046dc:	08019d6c 	.word	0x08019d6c
 80046e0:	08019d7c 	.word	0x08019d7c
 80046e4:	08019da4 	.word	0x08019da4
 80046e8:	08019db4 	.word	0x08019db4
 80046ec:	3727c5ac 	.word	0x3727c5ac
 80046f0:	459c4000 	.word	0x459c4000
 80046f4:	459c4000 	.word	0x459c4000
 80046f8:	08019dd0 	.word	0x08019dd0

080046fc <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800470a:	33c0      	adds	r3, #192	; 0xc0
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004716:	33c2      	adds	r3, #194	; 0xc2
 8004718:	2200      	movs	r2, #0
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004722:	33c4      	adds	r3, #196	; 0xc4
 8004724:	2200      	movs	r2, #0
 8004726:	801a      	strh	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800472e:	33c6      	adds	r3, #198	; 0xc6
 8004730:	2200      	movs	r2, #0
 8004732:	801a      	strh	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800473a:	33c8      	adds	r3, #200	; 0xc8
 800473c:	2200      	movs	r2, #0
 800473e:	801a      	strh	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004746:	33ca      	adds	r3, #202	; 0xca
 8004748:	2200      	movs	r2, #0
 800474a:	801a      	strh	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004764:	2300      	movs	r3, #0
 8004766:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004768:	f7fd f9da 	bl	8001b20 <sd_mount>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d016      	beq.n	80047aa <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800477c:	f7fc fc90 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004780:	2100      	movs	r1, #0
 8004782:	2000      	movs	r0, #0
 8004784:	f7fc fc9c 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004788:	4815      	ldr	r0, [pc, #84]	; (80047e0 <_ZN6Logger10sdCardInitEv+0x84>)
 800478a:	f7fc fcc3 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800478e:	2101      	movs	r1, #1
 8004790:	2000      	movs	r0, #0
 8004792:	f7fc fc95 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004796:	4813      	ldr	r0, [pc, #76]	; (80047e4 <_ZN6Logger10sdCardInitEv+0x88>)
 8004798:	f7fc fcbc 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800479c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047a0:	f005 faea 	bl	8009d78 <HAL_Delay>

	  ret = true;
 80047a4:	2301      	movs	r3, #1
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e015      	b.n	80047d6 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80047aa:	f7fc fc79 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047ae:	2100      	movs	r1, #0
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fc fc85 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047b6:	480a      	ldr	r0, [pc, #40]	; (80047e0 <_ZN6Logger10sdCardInitEv+0x84>)
 80047b8:	f7fc fcac 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047bc:	2101      	movs	r1, #1
 80047be:	2000      	movs	r0, #0
 80047c0:	f7fc fc7e 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80047c4:	4808      	ldr	r0, [pc, #32]	; (80047e8 <_ZN6Logger10sdCardInitEv+0x8c>)
 80047c6:	f7fc fca5 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80047ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ce:	f005 fad3 	bl	8009d78 <HAL_Delay>

	  ret = false;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	08019de0 	.word	0x08019de0
 80047e4:	08019dec 	.word	0x08019dec
 80047e8:	08019df4 	.word	0x08019df4

080047ec <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047fe:	33c0      	adds	r3, #192	; 0xc0
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d025      	beq.n	8004852 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800480c:	33c6      	adds	r3, #198	; 0xc6
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8004818:	8879      	ldrh	r1, [r7, #2]
 800481a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004824:	33c6      	adds	r3, #198	; 0xc6
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	3301      	adds	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004832:	33c6      	adds	r3, #198	; 0xc6
 8004834:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800483c:	33c6      	adds	r3, #198	; 0xc6
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004844:	d305      	bcc.n	8004852 <_ZN6Logger11storeLogIntEs+0x66>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800484c:	33c6      	adds	r3, #198	; 0xc6
 800484e:	2200      	movs	r2, #0
 8004850:	801a      	strh	r2, [r3, #0]
	}

}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004870:	33c0      	adds	r3, #192	; 0xc0
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d025      	beq.n	80048c4 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800487e:	33c8      	adds	r3, #200	; 0xc8
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004888:	3310      	adds	r3, #16
 800488a:	8879      	ldrh	r1, [r7, #2]
 800488c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004896:	33c8      	adds	r3, #200	; 0xc8
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048a4:	33c8      	adds	r3, #200	; 0xc8
 80048a6:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ae:	33c8      	adds	r3, #200	; 0xc8
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048b6:	d305      	bcc.n	80048c4 <_ZN6Logger12storeLog2IntEs+0x66>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048be:	33c8      	adds	r3, #200	; 0xc8
 80048c0:	2200      	movs	r2, #0
 80048c2:	801a      	strh	r2, [r3, #0]
	}

}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80048dc:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048e6:	33ca      	adds	r3, #202	; 0xca
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80048f0:	3310      	adds	r3, #16
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004900:	33ca      	adds	r3, #202	; 0xca
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800490a:	3320      	adds	r3, #32
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800491a:	33ca      	adds	r3, #202	; 0xca
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	3301      	adds	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004928:	33ca      	adds	r3, #202	; 0xca
 800492a:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004932:	33ca      	adds	r3, #202	; 0xca
 8004934:	881b      	ldrh	r3, [r3, #0]
 8004936:	f241 726f 	movw	r2, #5999	; 0x176f
 800493a:	4293      	cmp	r3, r2
 800493c:	d905      	bls.n	800494a <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004944:	33ca      	adds	r3, #202	; 0xca
 8004946:	2200      	movs	r2, #0
 8004948:	801a      	strh	r2, [r3, #0]
	//}
}
 800494a:	bf00      	nop
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr

08004956 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004956:	b480      	push	{r7}
 8004958:	b085      	sub	sp, #20
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004962:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800496c:	33ca      	adds	r3, #202	; 0xca
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004976:	3350      	adds	r3, #80	; 0x50
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004986:	33ca      	adds	r3, #202	; 0xca
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004990:	3340      	adds	r3, #64	; 0x40
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049a0:	33ca      	adds	r3, #202	; 0xca
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ae:	33ca      	adds	r3, #202	; 0xca
 80049b0:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049b8:	33ca      	adds	r3, #202	; 0xca
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	f241 726f 	movw	r2, #5999	; 0x176f
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d905      	bls.n	80049d0 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ca:	33ca      	adds	r3, #202	; 0xca
 80049cc:	2200      	movs	r2, #0
 80049ce:	801a      	strh	r2, [r3, #0]
	//}
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049ea:	3340      	adds	r3, #64	; 0x40
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a06:	3380      	adds	r3, #128	; 0x80
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af02      	add	r7, sp, #8
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	2300      	movs	r3, #0
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4613      	mov	r3, r2
 8004a28:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	68b8      	ldr	r0, [r7, #8]
 8004a30:	f7fc ff24 	bl	800187c <sd_write_array_float>
}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004a4e:	2300      	movs	r3, #0
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4613      	mov	r3, r2
 8004a54:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	68b8      	ldr	r0, [r7, #8]
 8004a5c:	f7fd f800 	bl	8001a60 <sd_write_array_int>
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004a7a:	3320      	adds	r3, #32
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	9200      	str	r2, [sp, #0]
 8004a80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	68b8      	ldr	r0, [r7, #8]
 8004a88:	f7fc ffea 	bl	8001a60 <sd_write_array_int>
}
 8004a8c:	bf00      	nop
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004aa8:	3340      	adds	r3, #64	; 0x40
 8004aaa:	2200      	movs	r2, #0
 8004aac:	9200      	str	r2, [sp, #0]
 8004aae:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	68b8      	ldr	r0, [r7, #8]
 8004ab6:	f7fc fee1 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004ac0:	3380      	adds	r3, #128	; 0x80
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	9200      	str	r2, [sp, #0]
 8004ac6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004aca:	6839      	ldr	r1, [r7, #0]
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	f7fc fed5 	bl	800187c <sd_write_array_float>
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af02      	add	r7, sp, #8
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004aee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004af2:	2200      	movs	r2, #0
 8004af4:	9200      	str	r2, [sp, #0]
 8004af6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68b8      	ldr	r0, [r7, #8]
 8004afe:	f7fc febd 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	9200      	str	r2, [sp, #0]
 8004b10:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b14:	6839      	ldr	r1, [r7, #0]
 8004b16:	68b8      	ldr	r0, [r7, #8]
 8004b18:	f7fc feb0 	bl	800187c <sd_write_array_float>
}
 8004b1c:	bf00      	nop
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b38:	3340      	adds	r3, #64	; 0x40
 8004b3a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	68b8      	ldr	r0, [r7, #8]
 8004b42:	f7fc ff01 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b4c:	3380      	adds	r3, #128	; 0x80
 8004b4e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b52:	6839      	ldr	r1, [r7, #0]
 8004b54:	68b8      	ldr	r0, [r7, #8]
 8004b56:	f7fc fef7 	bl	8001948 <sd_read_array_float>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004b62:	b480      	push	{r7}
 8004b64:	b08b      	sub	sp, #44	; 0x2c
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b70:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b74:	61fb      	str	r3, [r7, #28]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b80:	3340      	adds	r3, #64	; 0x40
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d009      	beq.n	8004ba0 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	617b      	str	r3, [r7, #20]
		log = 0;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9e:	e7f1      	b.n	8004b84 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ba6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	623b      	str	r3, [r7, #32]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004bb6:	3340      	adds	r3, #64	; 0x40
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	6a3a      	ldr	r2, [r7, #32]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d009      	beq.n	8004bd6 <_ZN6Logger10resetLogs2Ev+0x74>
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	623b      	str	r3, [r7, #32]
 8004bd4:	e7f1      	b.n	8004bba <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004bdc:	33c2      	adds	r3, #194	; 0xc2
 8004bde:	2200      	movs	r2, #0
 8004be0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004be8:	33ca      	adds	r3, #202	; 0xca
 8004bea:	2200      	movs	r2, #0
 8004bec:	801a      	strh	r2, [r3, #0]
}
 8004bee:	bf00      	nop
 8004bf0:	372c      	adds	r7, #44	; 0x2c
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c08:	33c2      	adds	r3, #194	; 0xc2
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c14:	33ca      	adds	r3, #202	; 0xca
 8004c16:	2200      	movs	r2, #0
 8004c18:	801a      	strh	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c34:	33c0      	adds	r3, #192	; 0xc0
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c54:	33c0      	adds	r3, #192	; 0xc0
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	805a      	strh	r2, [r3, #2]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004c90:	2108      	movs	r1, #8
 8004c92:	4805      	ldr	r0, [pc, #20]	; (8004ca8 <_ZN5Motor4initEv+0x20>)
 8004c94:	f00a fa20 	bl	800f0d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004c98:	210c      	movs	r1, #12
 8004c9a:	4803      	ldr	r0, [pc, #12]	; (8004ca8 <_ZN5Motor4initEv+0x20>)
 8004c9c:	f00a fa1c 	bl	800f0d8 <HAL_TIM_PWM_Start>

}
 8004ca0:	bf00      	nop
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	20044710 	.word	0x20044710

08004cac <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	da0d      	bge.n	8004cda <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cc4:	481f      	ldr	r0, [pc, #124]	; (8004d44 <_ZN5Motor9motorCtrlEv+0x98>)
 8004cc6:	f006 faed 	bl	800b2a4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	81fb      	strh	r3, [r7, #14]
 8004cd8:	e00a      	b.n	8004cf0 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ce0:	4818      	ldr	r0, [pc, #96]	; (8004d44 <_ZN5Motor9motorCtrlEv+0x98>)
 8004ce2:	f006 fadf 	bl	800b2a4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0d      	bge.n	8004d16 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d00:	4810      	ldr	r0, [pc, #64]	; (8004d44 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d02:	f006 facf 	bl	800b2a4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	425b      	negs	r3, r3
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	81bb      	strh	r3, [r7, #12]
 8004d14:	e00a      	b.n	8004d2c <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d1c:	4809      	ldr	r0, [pc, #36]	; (8004d44 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d1e:	f006 fac1 	bl	800b2a4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004d2c:	89fa      	ldrh	r2, [r7, #14]
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004d34:	89ba      	ldrh	r2, [r7, #12]
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40020c00 	.word	0x40020c00
 8004d48:	20044710 	.word	0x20044710

08004d4c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b087      	sub	sp, #28
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6178      	str	r0, [r7, #20]
 8004d54:	ed87 0b02 	vstr	d0, [r7, #8]
 8004d58:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004d5c:	f04f 0200 	mov.w	r2, #0
 8004d60:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d66:	f7fb feef 	bl	8000b48 <__aeabi_dcmpgt>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <_ZN5Motor8setRatioEdd+0x30>
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	4c2b      	ldr	r4, [pc, #172]	; (8004e24 <_ZN5Motor8setRatioEdd+0xd8>)
 8004d76:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004d7a:	e00e      	b.n	8004d9a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	4b29      	ldr	r3, [pc, #164]	; (8004e28 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d86:	f7fb fec1 	bl	8000b0c <__aeabi_dcmplt>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d004      	beq.n	8004d9a <_ZN5Motor8setRatioEdd+0x4e>
 8004d90:	f04f 0300 	mov.w	r3, #0
 8004d94:	4c24      	ldr	r4, [pc, #144]	; (8004e28 <_ZN5Motor8setRatioEdd+0xdc>)
 8004d96:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	4b21      	ldr	r3, [pc, #132]	; (8004e24 <_ZN5Motor8setRatioEdd+0xd8>)
 8004da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004da4:	f7fb fed0 	bl	8000b48 <__aeabi_dcmpgt>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <_ZN5Motor8setRatioEdd+0x6e>
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	4c1c      	ldr	r4, [pc, #112]	; (8004e24 <_ZN5Motor8setRatioEdd+0xd8>)
 8004db4:	e9c7 3400 	strd	r3, r4, [r7]
 8004db8:	e00e      	b.n	8004dd8 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <_ZN5Motor8setRatioEdd+0xdc>)
 8004dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dc4:	f7fb fea2 	bl	8000b0c <__aeabi_dcmplt>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <_ZN5Motor8setRatioEdd+0x8c>
 8004dce:	f04f 0300 	mov.w	r3, #0
 8004dd2:	4c15      	ldr	r4, [pc, #84]	; (8004e28 <_ZN5Motor8setRatioEdd+0xdc>)
 8004dd4:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <_ZN5Motor8setRatioEdd+0xe0>)
 8004dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004de2:	f7fb fc21 	bl	8000628 <__aeabi_dmul>
 8004de6:	4603      	mov	r3, r0
 8004de8:	460c      	mov	r4, r1
 8004dea:	4618      	mov	r0, r3
 8004dec:	4621      	mov	r1, r4
 8004dee:	f7fb fecb 	bl	8000b88 <__aeabi_d2iz>
 8004df2:	4603      	mov	r3, r0
 8004df4:	b21a      	sxth	r2, r3
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <_ZN5Motor8setRatioEdd+0xe0>)
 8004e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e04:	f7fb fc10 	bl	8000628 <__aeabi_dmul>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	4621      	mov	r1, r4
 8004e10:	f7fb feba 	bl	8000b88 <__aeabi_d2iz>
 8004e14:	4603      	mov	r3, r0
 8004e16:	b21a      	sxth	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	805a      	strh	r2, [r3, #2]

}
 8004e1c:	bf00      	nop
 8004e1e:	371c      	adds	r7, #28
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd90      	pop	{r4, r7, pc}
 8004e24:	3ff00000 	.word	0x3ff00000
 8004e28:	bff00000 	.word	0xbff00000
 8004e2c:	409c2000 	.word	0x409c2000

08004e30 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004e64:	b490      	push	{r4, r7}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	f04f 0400 	mov.w	r4, #0
 8004e7c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	f04f 0400 	mov.w	r4, #0
 8004e8a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	f04f 0400 	mov.w	r4, #0
 8004e98:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	f04f 0400 	mov.w	r4, #0
 8004ea6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	f04f 0400 	mov.w	r4, #0
 8004eb4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	609a      	str	r2, [r3, #8]
}
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bc90      	pop	{r4, r7}
 8004ed4:	4770      	bx	lr
	...

08004ed8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fc fff2 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 8004eec:	ee10 3a10 	vmov	r3, s0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fb41 	bl	8000578 <__aeabi_f2d>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc fbd0 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004f08:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004f0c:	a376      	add	r3, pc, #472	; (adr r3, 80050e8 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f16:	f7fb fb87 	bl	8000628 <__aeabi_dmul>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f7fb fb24 	bl	8000578 <__aeabi_f2d>
 8004f30:	4682      	mov	sl, r0
 8004f32:	468b      	mov	fp, r1
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f48:	f7fb fc98 	bl	800087c <__aeabi_ddiv>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	f7fb f9b2 	bl	80002bc <__adddf3>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	ec43 2b17 	vmov	d7, r2, r3
 8004f60:	eeb0 0a47 	vmov.f32	s0, s14
 8004f64:	eef0 0a67 	vmov.f32	s1, s15
 8004f68:	f00f fbfa 	bl	8014760 <cos>
 8004f6c:	ec53 2b10 	vmov	r2, r3, d0
 8004f70:	4650      	mov	r0, sl
 8004f72:	4659      	mov	r1, fp
 8004f74:	f7fb fb58 	bl	8000628 <__aeabi_dmul>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb f99c 	bl	80002bc <__adddf3>
 8004f84:	4603      	mov	r3, r0
 8004f86:	460c      	mov	r4, r1
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7fb faef 	bl	8000578 <__aeabi_f2d>
 8004f9a:	4682      	mov	sl, r0
 8004f9c:	468b      	mov	fp, r1
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fb2:	f7fb fc63 	bl	800087c <__aeabi_ddiv>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4640      	mov	r0, r8
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	f7fb f97d 	bl	80002bc <__adddf3>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	ec43 2b17 	vmov	d7, r2, r3
 8004fca:	eeb0 0a47 	vmov.f32	s0, s14
 8004fce:	eef0 0a67 	vmov.f32	s1, s15
 8004fd2:	f00f fc09 	bl	80147e8 <sin>
 8004fd6:	ec53 2b10 	vmov	r2, r3, d0
 8004fda:	4650      	mov	r0, sl
 8004fdc:	4659      	mov	r1, fp
 8004fde:	f7fb fb23 	bl	8000628 <__aeabi_dmul>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb f967 	bl	80002bc <__adddf3>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005004:	461a      	mov	r2, r3
 8005006:	4623      	mov	r3, r4
 8005008:	f7fb f958 	bl	80002bc <__adddf3>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	ed93 7b08 	vldr	d7, [r3, #32]
 8005022:	eeb0 0a47 	vmov.f32	s0, s14
 8005026:	eef0 0a67 	vmov.f32	s1, s15
 800502a:	f00f fb99 	bl	8014760 <cos>
 800502e:	ec51 0b10 	vmov	r0, r1, d0
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005038:	f7fb faf6 	bl	8000628 <__aeabi_dmul>
 800503c:	4602      	mov	r2, r0
 800503e:	460b      	mov	r3, r1
 8005040:	4620      	mov	r0, r4
 8005042:	4629      	mov	r1, r5
 8005044:	f7fb f93a 	bl	80002bc <__adddf3>
 8005048:	4603      	mov	r3, r0
 800504a:	460c      	mov	r4, r1
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	ed93 7b08 	vldr	d7, [r3, #32]
 800505e:	eeb0 0a47 	vmov.f32	s0, s14
 8005062:	eef0 0a67 	vmov.f32	s1, s15
 8005066:	f00f fbbf 	bl	80147e8 <sin>
 800506a:	ec51 0b10 	vmov	r0, r1, d0
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005074:	f7fb fad8 	bl	8000628 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4620      	mov	r0, r4
 800507e:	4629      	mov	r1, r5
 8005080:	f7fb f91c 	bl	80002bc <__adddf3>
 8005084:	4603      	mov	r3, r0
 8005086:	460c      	mov	r4, r1
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005094:	4618      	mov	r0, r3
 8005096:	4621      	mov	r1, r4
 8005098:	f7fb fdbe 	bl	8000c18 <__aeabi_d2f>
 800509c:	4602      	mov	r2, r0
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <_ZN8Odometry12calcPotitionEv+0x204>)
 80050a0:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80050a8:	4618      	mov	r0, r3
 80050aa:	4621      	mov	r1, r4
 80050ac:	f7fb fdb4 	bl	8000c18 <__aeabi_d2f>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <_ZN8Odometry12calcPotitionEv+0x208>)
 80050b4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80050bc:	4618      	mov	r0, r3
 80050be:	4621      	mov	r1, r4
 80050c0:	f7fb fdaa 	bl	8000c18 <__aeabi_d2f>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b07      	ldr	r3, [pc, #28]	; (80050e4 <_ZN8Odometry12calcPotitionEv+0x20c>)
 80050c8:	601a      	str	r2, [r3, #0]
}
 80050ca:	bf00      	nop
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d4:	f3af 8000 	nop.w
 80050d8:	405b8000 	.word	0x405b8000
 80050dc:	2000028c 	.word	0x2000028c
 80050e0:	20000290 	.word	0x20000290
 80050e4:	20000294 	.word	0x20000294
 80050e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050ec:	3f50624d 	.word	0x3f50624d

080050f0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	calcPotition();
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff feed 	bl	8004ed8 <_ZN8Odometry12calcPotitionEv>
}
 80050fe:	bf00      	nop
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005106:	b490      	push	{r4, r7}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
	return theta_;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005114:	ec44 3b17 	vmov	d7, r3, r4
}
 8005118:	eeb0 0a47 	vmov.f32	s0, s14
 800511c:	eef0 0a67 	vmov.f32	s1, s15
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bc90      	pop	{r4, r7}
 8005126:	4770      	bx	lr

08005128 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005128:	b490      	push	{r4, r7}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	f04f 0400 	mov.w	r4, #0
 800513a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	f04f 0400 	mov.w	r4, #0
 8005148:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bc90      	pop	{r4, r7}
 8005162:	4770      	bx	lr

08005164 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005164:	b490      	push	{r4, r7}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	f04f 0400 	mov.w	r4, #0
 800517c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	f04f 0300 	mov.w	r3, #0
 8005194:	f04f 0400 	mov.w	r4, #0
 8005198:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80051a2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80051aa:	4a29      	ldr	r2, [pc, #164]	; (8005250 <_ZN13PathFollowingC1Ev+0xec>)
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80051b8:	4a25      	ldr	r2, [pc, #148]	; (8005250 <_ZN13PathFollowingC1Ev+0xec>)
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80051c6:	4a22      	ldr	r2, [pc, #136]	; (8005250 <_ZN13PathFollowingC1Ev+0xec>)
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80051d4:	4a1f      	ldr	r2, [pc, #124]	; (8005254 <_ZN13PathFollowingC1Ev+0xf0>)
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <_ZN13PathFollowingC1Ev+0xf0>)
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80051f0:	4a18      	ldr	r2, [pc, #96]	; (8005254 <_ZN13PathFollowingC1Ev+0xf0>)
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	f04f 0400 	mov.w	r4, #0
 80051fa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80051fe:	4a15      	ldr	r2, [pc, #84]	; (8005254 <_ZN13PathFollowingC1Ev+0xf0>)
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800520c:	4a11      	ldr	r2, [pc, #68]	; (8005254 <_ZN13PathFollowingC1Ev+0xf0>)
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	f04f 0400 	mov.w	r4, #0
 8005216:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800521a:	4a0e      	ldr	r2, [pc, #56]	; (8005254 <_ZN13PathFollowingC1Ev+0xf0>)
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005228:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <_ZN13PathFollowingC1Ev+0xf4>)
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	f04f 0400 	mov.w	r4, #0
 8005232:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005236:	4a08      	ldr	r2, [pc, #32]	; (8005258 <_ZN13PathFollowingC1Ev+0xf4>)
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bc90      	pop	{r4, r7}
 800524e:	4770      	bx	lr
 8005250:	20044c10 	.word	0x20044c10
 8005254:	20044ba0 	.word	0x20044ba0
 8005258:	20044c00 	.word	0x20044c00

0800525c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005264:	f001 fdce 	bl	8006e04 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005268:	f107 0318 	add.w	r3, r7, #24
 800526c:	2201      	movs	r2, #1
 800526e:	4915      	ldr	r1, [pc, #84]	; (80052c4 <_ZN13PathFollowing4initEv+0x68>)
 8005270:	4815      	ldr	r0, [pc, #84]	; (80052c8 <_ZN13PathFollowing4initEv+0x6c>)
 8005272:	f7fc fbaf 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005276:	f107 0310 	add.w	r3, r7, #16
 800527a:	2201      	movs	r2, #1
 800527c:	4913      	ldr	r1, [pc, #76]	; (80052cc <_ZN13PathFollowing4initEv+0x70>)
 800527e:	4812      	ldr	r0, [pc, #72]	; (80052c8 <_ZN13PathFollowing4initEv+0x6c>)
 8005280:	f7fc fba8 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005284:	f107 0308 	add.w	r3, r7, #8
 8005288:	2201      	movs	r2, #1
 800528a:	4911      	ldr	r1, [pc, #68]	; (80052d0 <_ZN13PathFollowing4initEv+0x74>)
 800528c:	480e      	ldr	r0, [pc, #56]	; (80052c8 <_ZN13PathFollowing4initEv+0x6c>)
 800528e:	f7fc fba1 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005292:	ed97 7b06 	vldr	d7, [r7, #24]
 8005296:	ed97 6b04 	vldr	d6, [r7, #16]
 800529a:	ed97 5b02 	vldr	d5, [r7, #8]
 800529e:	eeb0 2a45 	vmov.f32	s4, s10
 80052a2:	eef0 2a65 	vmov.f32	s5, s11
 80052a6:	eeb0 1a46 	vmov.f32	s2, s12
 80052aa:	eef0 1a66 	vmov.f32	s3, s13
 80052ae:	eeb0 0a47 	vmov.f32	s0, s14
 80052b2:	eef0 0a67 	vmov.f32	s1, s15
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f80c 	bl	80052d4 <_ZN13PathFollowing7setGainEddd>
}
 80052bc:	bf00      	nop
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	08019dfc 	.word	0x08019dfc
 80052c8:	08019e04 	.word	0x08019e04
 80052cc:	08019e0c 	.word	0x08019e0c
 80052d0:	08019e14 	.word	0x08019e14

080052d4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80052d4:	b490      	push	{r4, r7}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	61f8      	str	r0, [r7, #28]
 80052dc:	ed87 0b04 	vstr	d0, [r7, #16]
 80052e0:	ed87 1b02 	vstr	d1, [r7, #8]
 80052e4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80052e8:	4a09      	ldr	r2, [pc, #36]	; (8005310 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80052ee:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80052f2:	4a07      	ldr	r2, [pc, #28]	; (8005310 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052f4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80052fc:	4a04      	ldr	r2, [pc, #16]	; (8005310 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80052fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005302:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005306:	bf00      	nop
 8005308:	3720      	adds	r7, #32
 800530a:	46bd      	mov	sp, r7
 800530c:	bc90      	pop	{r4, r7}
 800530e:	4770      	bx	lr
 8005310:	20044c10 	.word	0x20044c10

08005314 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800531c:	2088      	movs	r0, #136	; 0x88
 800531e:	f7fc ff1a 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005322:	2080      	movs	r0, #128	; 0x80
 8005324:	f7fc ff17 	bl	8002156 <INA260_init>
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005338:	2188      	movs	r1, #136	; 0x88
 800533a:	2002      	movs	r0, #2
 800533c:	f7fc fea8 	bl	8002090 <INA260_read>
 8005340:	4603      	mov	r3, r0
 8005342:	4618      	mov	r0, r3
 8005344:	f7fb f906 	bl	8000554 <__aeabi_i2d>
 8005348:	a30c      	add	r3, pc, #48	; (adr r3, 800537c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fb f96b 	bl	8000628 <__aeabi_dmul>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	4618      	mov	r0, r3
 8005358:	4621      	mov	r1, r4
 800535a:	f7fb fc5d 	bl	8000c18 <__aeabi_d2f>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a03      	ldr	r2, [pc, #12]	; (8005378 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	f3af 8000 	nop.w
 8005378:	20000298 	.word	0x20000298
 800537c:	47ae147b 	.word	0x47ae147b
 8005380:	3f547ae1 	.word	0x3f547ae1

08005384 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	ee07 3a90 	vmov	s15, r3

}
 8005394:	eeb0 0a67 	vmov.f32	s0, s15
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
	...

080053a4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80053b0:	2102      	movs	r1, #2
 80053b2:	4822      	ldr	r0, [pc, #136]	; (800543c <_ZN12RotarySwitch8getValueEv+0x98>)
 80053b4:	f005 ff5e 	bl	800b274 <HAL_GPIO_ReadPin>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80053d0:	2108      	movs	r1, #8
 80053d2:	481a      	ldr	r0, [pc, #104]	; (800543c <_ZN12RotarySwitch8getValueEv+0x98>)
 80053d4:	f005 ff4e 	bl	800b274 <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf0c      	ite	eq
 80053de:	2301      	moveq	r3, #1
 80053e0:	2300      	movne	r3, #0
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	f043 0302 	orr.w	r3, r3, #2
 80053ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80053f0:	2110      	movs	r1, #16
 80053f2:	4812      	ldr	r0, [pc, #72]	; (800543c <_ZN12RotarySwitch8getValueEv+0x98>)
 80053f4:	f005 ff3e 	bl	800b274 <HAL_GPIO_ReadPin>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	bf0c      	ite	eq
 80053fe:	2301      	moveq	r3, #1
 8005400:	2300      	movne	r3, #0
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005408:	89fb      	ldrh	r3, [r7, #14]
 800540a:	f043 0304 	orr.w	r3, r3, #4
 800540e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005410:	2180      	movs	r1, #128	; 0x80
 8005412:	480a      	ldr	r0, [pc, #40]	; (800543c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005414:	f005 ff2e 	bl	800b274 <HAL_GPIO_ReadPin>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005428:	89fb      	ldrh	r3, [r7, #14]
 800542a:	f043 0308 	orr.w	r3, r3, #8
 800542e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005430:	89fb      	ldrh	r3, [r7, #14]

}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40020c00 	.word	0x40020c00

08005440 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	709a      	strb	r2, [r3, #2]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	70da      	strb	r2, [r3, #3]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	809a      	strh	r2, [r3, #4]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	80da      	strh	r2, [r3, #6]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	721a      	strb	r2, [r3, #8]
{

}
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4618      	mov	r0, r3
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	7a1b      	ldrb	r3, [r3, #8]
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80ea 	beq.w	8005668 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 8005494:	4b76      	ldr	r3, [pc, #472]	; (8005670 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	f083 0301 	eor.w	r3, r3, #1
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d032      	beq.n	8005508 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 80054a2:	2104      	movs	r1, #4
 80054a4:	4873      	ldr	r0, [pc, #460]	; (8005674 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80054a6:	f005 fee5 	bl	800b274 <HAL_GPIO_ReadPin>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d109      	bne.n	80054c4 <_ZN10SideSensor12updateStatusEv+0x48>
 80054b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054b4:	4870      	ldr	r0, [pc, #448]	; (8005678 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80054b6:	f005 fedd 	bl	800b274 <HAL_GPIO_ReadPin>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <_ZN10SideSensor12updateStatusEv+0x48>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <_ZN10SideSensor12updateStatusEv+0x4a>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 80054ca:	4b6c      	ldr	r3, [pc, #432]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	3301      	adds	r3, #1
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	4b6a      	ldr	r3, [pc, #424]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 80054d4:	801a      	strh	r2, [r3, #0]
 80054d6:	e002      	b.n	80054de <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 80054d8:	4b68      	ldr	r3, [pc, #416]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 80054da:	2200      	movs	r2, #0
 80054dc:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80054de:	4b67      	ldr	r3, [pc, #412]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d945      	bls.n	8005572 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 80054fa:	4b5d      	ldr	r3, [pc, #372]	; (8005670 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005500:	4b5e      	ldr	r3, [pc, #376]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005502:	2200      	movs	r2, #0
 8005504:	801a      	strh	r2, [r3, #0]
 8005506:	e034      	b.n	8005572 <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005508:	4b59      	ldr	r3, [pc, #356]	; (8005670 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d030      	beq.n	8005572 <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005510:	2104      	movs	r1, #4
 8005512:	4858      	ldr	r0, [pc, #352]	; (8005674 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005514:	f005 feae 	bl	800b274 <HAL_GPIO_ReadPin>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 8005528:	4b54      	ldr	r3, [pc, #336]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	3301      	adds	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	4b52      	ldr	r3, [pc, #328]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	e002      	b.n	800553c <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 8005536:	4b51      	ldr	r3, [pc, #324]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005538:	2200      	movs	r2, #0
 800553a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800553c:	4b4f      	ldr	r3, [pc, #316]	; (800567c <_ZN10SideSensor12updateStatusEv+0x200>)
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d916      	bls.n	8005572 <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	f083 0301 	eor.w	r3, r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005558:	4b45      	ldr	r3, [pc, #276]	; (8005670 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	88db      	ldrh	r3, [r3, #6]
 8005562:	3301      	adds	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	88da      	ldrh	r2, [r3, #6]
 800556e:	4b44      	ldr	r3, [pc, #272]	; (8005680 <_ZN10SideSensor12updateStatusEv+0x204>)
 8005570:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005572:	4b44      	ldr	r3, [pc, #272]	; (8005684 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	f083 0301 	eor.w	r3, r3, #1
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d031      	beq.n	80055e4 <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 8005580:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005584:	483c      	ldr	r0, [pc, #240]	; (8005678 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005586:	f005 fe75 	bl	800b274 <HAL_GPIO_ReadPin>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <_ZN10SideSensor12updateStatusEv+0x126>
 8005590:	2104      	movs	r1, #4
 8005592:	4838      	ldr	r0, [pc, #224]	; (8005674 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005594:	f005 fe6e 	bl	800b274 <HAL_GPIO_ReadPin>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <_ZN10SideSensor12updateStatusEv+0x126>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <_ZN10SideSensor12updateStatusEv+0x128>
 80055a2:	2300      	movs	r3, #0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 80055a8:	4b37      	ldr	r3, [pc, #220]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055b2:	801a      	strh	r2, [r3, #0]
 80055b4:	e002      	b.n	80055bc <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 80055b6:	4b34      	ldr	r3, [pc, #208]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80055bc:	4b32      	ldr	r3, [pc, #200]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d90f      	bls.n	80055e4 <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	f043 0302 	orr.w	r3, r3, #2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 80055d8:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <_ZN10SideSensor12updateStatusEv+0x208>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80055e4:	4b27      	ldr	r3, [pc, #156]	; (8005684 <_ZN10SideSensor12updateStatusEv+0x208>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d031      	beq.n	8005650 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 80055ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055f0:	4821      	ldr	r0, [pc, #132]	; (8005678 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80055f2:	f005 fe3f 	bl	800b274 <HAL_GPIO_ReadPin>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	e002      	b.n	800561a <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005616:	2200      	movs	r2, #0
 8005618:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d916      	bls.n	8005650 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	881b      	ldrh	r3, [r3, #0]
 8005626:	f083 0302 	eor.w	r3, r3, #2
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8005636:	4b13      	ldr	r3, [pc, #76]	; (8005684 <_ZN10SideSensor12updateStatusEv+0x208>)
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	889b      	ldrh	r3, [r3, #4]
 8005640:	3301      	adds	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	889a      	ldrh	r2, [r3, #4]
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <_ZN10SideSensor12updateStatusEv+0x210>)
 800564e:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	881a      	ldrh	r2, [r3, #0]
 8005654:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <_ZN10SideSensor12updateStatusEv+0x214>)
 8005656:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	789a      	ldrb	r2, [r3, #2]
 800565c:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <_ZN10SideSensor12updateStatusEv+0x218>)
 800565e:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	78da      	ldrb	r2, [r3, #3]
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <_ZN10SideSensor12updateStatusEv+0x21c>)
 8005666:	701a      	strb	r2, [r3, #0]
	}

}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	200002a4 	.word	0x200002a4
 8005674:	40021000 	.word	0x40021000
 8005678:	40020c00 	.word	0x40020c00
 800567c:	200002a8 	.word	0x200002a8
 8005680:	200002a2 	.word	0x200002a2
 8005684:	200002a5 	.word	0x200002a5
 8005688:	200002a6 	.word	0x200002a6
 800568c:	200002a0 	.word	0x200002a0
 8005690:	2000029c 	.word	0x2000029c
 8005694:	2000029e 	.word	0x2000029e
 8005698:	2000029f 	.word	0x2000029f

0800569c <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
	return status_L_;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	789b      	ldrb	r3, [r3, #2]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	88db      	ldrh	r3, [r3, #6]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	80da      	strh	r2, [r3, #6]
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	721a      	strb	r2, [r3, #8]
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	721a      	strb	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	7a1b      	ldrb	r3, [r3, #8]
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	3308      	adds	r3, #8
 8005748:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f010 f886 	bl	8015860 <memset>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575a:	811a      	strh	r2, [r3, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005762:	815a      	strh	r2, [r3, #10]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576a:	819a      	strh	r2, [r3, #12]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005772:	81da      	strh	r2, [r3, #14]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800577a:	821a      	strh	r2, [r3, #16]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005782:	825a      	strh	r2, [r3, #18]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	829a      	strh	r2, [r3, #20]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2201      	movs	r2, #1
 800578e:	82da      	strh	r2, [r3, #22]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	831a      	strh	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	835a      	strh	r2, [r3, #26]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	839a      	strh	r2, [r3, #28]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	83da      	strh	r2, [r3, #30]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	841a      	strh	r2, [r3, #32]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057b4:	845a      	strh	r2, [r3, #34]	; 0x22
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	849a      	strh	r2, [r3, #36]	; 0x24
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c2:	84da      	strh	r2, [r3, #38]	; 0x26
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	859a      	strh	r2, [r3, #44]	; 0x2c
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057de:	85da      	strh	r2, [r3, #46]	; 0x2e
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e6:	861a      	strh	r2, [r3, #48]	; 0x30
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2201      	movs	r2, #1
 80057ec:	865a      	strh	r2, [r3, #50]	; 0x32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	869a      	strh	r2, [r3, #52]	; 0x34
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005802:	871a      	strh	r2, [r3, #56]	; 0x38
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	875a      	strh	r2, [r3, #58]	; 0x3a
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2201      	movs	r2, #1
 8005814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2201      	movs	r2, #1
 8005846:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005850:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800586c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005886:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005890:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058de:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f8:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2201      	movs	r2, #1
 8005900:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2201      	movs	r2, #1
 8005912:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2201      	movs	r2, #1
 800591a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005924:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800593e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005948:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005964:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005976:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005980:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800598a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2201      	movs	r2, #1
 800599a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b6:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c0:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ca:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059dc:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a0e:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a18:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a2a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a3c:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a5e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a68:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a82:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a94:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d042      	beq.n	8005b60 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3204      	adds	r2, #4
 8005aec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005b08:	3301      	adds	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b18:	4a13      	ldr	r2, [pc, #76]	; (8005b68 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005b1a:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005b22:	2bf9      	cmp	r3, #249	; 0xf9
 8005b24:	d903      	bls.n	8005b2e <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	22fa      	movs	r2, #250	; 0xfa
 8005b2a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685c      	ldr	r4, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fa fd1d 	bl	8000578 <__aeabi_f2d>
 8005b3e:	4605      	mov	r5, r0
 8005b40:	460e      	mov	r6, r1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fa fd15 	bl	8000578 <__aeabi_f2d>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	ec43 2b11 	vmov	d1, r2, r3
 8005b56:	ec46 5b10 	vmov	d0, r5, r6
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f7ff f8f6 	bl	8004d4c <_ZN5Motor8setRatioEdd>

	}

}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b68:	200002ac 	.word	0x200002ac

08005b6c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f04f 0200 	mov.w	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	605a      	str	r2, [r3, #4]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	611a      	str	r2, [r3, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	615a      	str	r2, [r3, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	619a      	str	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	61da      	str	r2, [r3, #28]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f04f 0200 	mov.w	r2, #0
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	0000      	movs	r0, r0
 8005c04:	0000      	movs	r0, r0
	...

08005c08 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	f107 020c 	add.w	r2, r7, #12
 8005c18:	f107 0110 	add.w	r1, r7, #16
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fb fd2f 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005c22:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c36:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005c3a:	6978      	ldr	r0, [r7, #20]
 8005c3c:	f7fa fc9c 	bl	8000578 <__aeabi_f2d>
 8005c40:	a30e      	add	r3, pc, #56	; (adr r3, 8005c7c <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c46:	f7fa fcef 	bl	8000628 <__aeabi_dmul>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	4618      	mov	r0, r3
 8005c50:	4621      	mov	r1, r4
 8005c52:	f7fa ffe1 	bl	8000c18 <__aeabi_d2f>
 8005c56:	4602      	mov	r2, r0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	4a05      	ldr	r2, [pc, #20]	; (8005c78 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005c62:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	ee07 3a90 	vmov	s15, r3
}
 8005c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd90      	pop	{r4, r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200002b0 	.word	0x200002b0
 8005c7c:	1ab1d998 	.word	0x1ab1d998
 8005c80:	3f7830b5 	.word	0x3f7830b5
 8005c84:	00000000 	.word	0x00000000

08005c88 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	ed93 7a00 	vldr	s14, [r3]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	edd3 7a02 	vldr	s15, [r3, #8]
 8005c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ca0:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005cae:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005cc4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ccc:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005cd0:	4b3f      	ldr	r3, [pc, #252]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fa fc4f 	bl	8000578 <__aeabi_f2d>
 8005cda:	4604      	mov	r4, r0
 8005cdc:	460d      	mov	r5, r1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	ed93 7a06 	vldr	s14, [r3, #24]
 8005ce4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cec:	ee17 0a90 	vmov	r0, s15
 8005cf0:	f7fa fc42 	bl	8000578 <__aeabi_f2d>
 8005cf4:	a334      	add	r3, pc, #208	; (adr r3, 8005dc8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f7fa fc95 	bl	8000628 <__aeabi_dmul>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	4620      	mov	r0, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	f7fa fad9 	bl	80002bc <__adddf3>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4621      	mov	r1, r4
 8005d12:	f7fa ff81 	bl	8000c18 <__aeabi_d2f>
 8005d16:	4602      	mov	r2, r0
 8005d18:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d1a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005d22:	4b2c      	ldr	r3, [pc, #176]	; (8005dd4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	edd7 6a05 	vldr	s13, [r7, #20]
 8005d2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d34:	ee17 0a90 	vmov	r0, s15
 8005d38:	f7fa fc1e 	bl	8000578 <__aeabi_f2d>
 8005d3c:	a322      	add	r3, pc, #136	; (adr r3, 8005dc8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	f7fa fd9b 	bl	800087c <__aeabi_ddiv>
 8005d46:	4603      	mov	r3, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	f7fa ff63 	bl	8000c18 <__aeabi_d2f>
 8005d52:	4603      	mov	r3, r0
 8005d54:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005d56:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d62:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d64:	edd3 7a00 	vldr	s15, [r3]
 8005d68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d6c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005d7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d82:	ee17 0a90 	vmov	r0, s15
 8005d86:	f7fa fbf7 	bl	8000578 <__aeabi_f2d>
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	460e      	mov	r6, r1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005d94:	ed97 7a02 	vldr	s14, [r7, #8]
 8005d98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d9c:	ee17 0a90 	vmov	r0, s15
 8005da0:	f7fa fbea 	bl	8000578 <__aeabi_f2d>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	ec43 2b11 	vmov	d1, r2, r3
 8005dac:	ec46 5b10 	vmov	d0, r5, r6
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7fe ffcb 	bl	8004d4c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005db6:	4a07      	ldr	r2, [pc, #28]	; (8005dd4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	6013      	str	r3, [r2, #0]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005dcc:	3f50624d 	.word	0x3f50624d
 8005dd0:	200002b8 	.word	0x200002b8
 8005dd4:	200002b4 	.word	0x200002b4

08005dd8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005de4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
}
 8005df4:	bf00      	nop
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e0c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e34:	edc7 0a01 	vstr	s1, [r7, #4]
 8005e38:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	615a      	str	r2, [r3, #20]
}
 8005e4e:	bf00      	nop
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e66:	edc7 0a01 	vstr	s1, [r7, #4]
 8005e6a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	621a      	str	r2, [r3, #32]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff feb7 	bl	8005c08 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f7ff feef 	bl	8005c88 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005eca:	bf00      	nop
 8005ecc:	370c      	adds	r7, #12
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
	...

08005ed8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005f08 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ef0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005f08 <_ZN12VelocityCtrl4stopEv+0x30>
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe ff29 	bl	8004d4c <_ZN5Motor8setRatioEdd>

}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	f3af 8000 	nop.w
	...

08005f10 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a1e      	ldr	r2, [pc, #120]	; (8005f98 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d10e      	bne.n	8005f40 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005f22:	f001 fe11 	bl	8007b48 <cppFlip100ns>

		tim7_timer++;
 8005f26:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f2e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d902      	bls.n	8005f40 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005f3a:	4b18      	ldr	r3, [pc, #96]	; (8005f9c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a17      	ldr	r2, [pc, #92]	; (8005fa4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10e      	bne.n	8005f68 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005f4a:	f001 fdcd 	bl	8007ae8 <cppFlip1ms>

		tim6_timer++;
 8005f4e:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3301      	adds	r3, #1
 8005f54:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f56:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a10      	ldr	r2, [pc, #64]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d902      	bls.n	8005f68 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a0f      	ldr	r2, [pc, #60]	; (8005fac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d10e      	bne.n	8005f90 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005f72:	f001 fdf3 	bl	8007b5c <cppFlip10ms>

		tim13_timer++;
 8005f76:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f7e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005f80:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a06      	ldr	r2, [pc, #24]	; (8005fa0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d902      	bls.n	8005f90 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
	}

}
 8005f90:	bf00      	nop
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40001400 	.word	0x40001400
 8005f9c:	200448c4 	.word	0x200448c4
 8005fa0:	0001869f 	.word	0x0001869f
 8005fa4:	40001000 	.word	0x40001000
 8005fa8:	20044880 	.word	0x20044880
 8005fac:	40001c00 	.word	0x40001c00
 8005fb0:	200448c8 	.word	0x200448c8

08005fb4 <init>:

void init()
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fbe:	4808      	ldr	r0, [pc, #32]	; (8005fe0 <init+0x2c>)
 8005fc0:	f005 f970 	bl	800b2a4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005fc4:	4807      	ldr	r0, [pc, #28]	; (8005fe4 <init+0x30>)
 8005fc6:	f009 f838 	bl	800f03a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005fca:	4807      	ldr	r0, [pc, #28]	; (8005fe8 <init+0x34>)
 8005fcc:	f009 f835 	bl	800f03a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005fd0:	4806      	ldr	r0, [pc, #24]	; (8005fec <init+0x38>)
 8005fd2:	f009 f832 	bl	800f03a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005fd6:	f001 fce3 	bl	80079a0 <cppInit>

	//path_following_initialize();

}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	200449ac 	.word	0x200449ac
 8005fe8:	20044b50 	.word	0x20044b50
 8005fec:	200448cc 	.word	0x200448cc

08005ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ff4:	f003 fe4e 	bl	8009c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ff8:	f000 f82a 	bl	8006050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ffc:	f000 fdbc 	bl	8006b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8006000:	f000 fd8a 	bl	8006b18 <MX_DMA_Init>
  MX_I2C2_Init();
 8006004:	f000 f9e8 	bl	80063d8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006008:	f000 fa14 	bl	8006434 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800600c:	f000 fa32 	bl	8006474 <MX_SPI2_Init>
  MX_TIM1_Init();
 8006010:	f000 fa66 	bl	80064e0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8006014:	f000 fb70 	bl	80066f8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8006018:	f000 fc3c 	bl	8006894 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800601c:	f000 fd52 	bl	8006ac4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8006020:	f00a ffde 	bl	8010fe0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8006024:	f000 fbcc 	bl	80067c0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8006028:	f000 f9a8 	bl	800637c <MX_I2C1_Init>
  MX_TIM3_Init();
 800602c:	f000 fb00 	bl	8006630 <MX_TIM3_Init>
  MX_TIM10_Init();
 8006030:	f000 fc88 	bl	8006944 <MX_TIM10_Init>
  MX_TIM11_Init();
 8006034:	f000 fcd4 	bl	80069e0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8006038:	f000 f898 	bl	800616c <MX_ADC2_Init>
  MX_TIM7_Init();
 800603c:	f000 fbf6 	bl	800682c <MX_TIM7_Init>
  MX_TIM13_Init();
 8006040:	f000 fd1c 	bl	8006a7c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8006044:	f7ff ffb6 	bl	8005fb4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8006048:	f001 fdb6 	bl	8007bb8 <cppLoop>
 800604c:	e7fc      	b.n	8006048 <main+0x58>
	...

08006050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b0a4      	sub	sp, #144	; 0x90
 8006054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006056:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800605a:	2234      	movs	r2, #52	; 0x34
 800605c:	2100      	movs	r1, #0
 800605e:	4618      	mov	r0, r3
 8006060:	f00f fbfe 	bl	8015860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006064:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	223c      	movs	r2, #60	; 0x3c
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f00f fbef 	bl	8015860 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	4b37      	ldr	r3, [pc, #220]	; (8006164 <SystemClock_Config+0x114>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	4a36      	ldr	r2, [pc, #216]	; (8006164 <SystemClock_Config+0x114>)
 800608c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006090:	6413      	str	r3, [r2, #64]	; 0x40
 8006092:	4b34      	ldr	r3, [pc, #208]	; (8006164 <SystemClock_Config+0x114>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800609e:	2300      	movs	r3, #0
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <SystemClock_Config+0x118>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a30      	ldr	r2, [pc, #192]	; (8006168 <SystemClock_Config+0x118>)
 80060a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <SystemClock_Config+0x118>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060b6:	607b      	str	r3, [r7, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060c4:	2302      	movs	r3, #2
 80060c6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80060cc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80060ce:	2308      	movs	r3, #8
 80060d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80060d2:	23b4      	movs	r3, #180	; 0xb4
 80060d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80060d8:	2302      	movs	r3, #2
 80060da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80060de:	2308      	movs	r3, #8
 80060e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80060e4:	2302      	movs	r3, #2
 80060e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060ee:	4618      	mov	r0, r3
 80060f0:	f006 fcfa 	bl	800cae8 <HAL_RCC_OscConfig>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80060fa:	f000 fe7f 	bl	8006dfc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80060fe:	f006 f875 	bl	800c1ec <HAL_PWREx_EnableOverDrive>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006108:	f000 fe78 	bl	8006dfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800610c:	230f      	movs	r3, #15
 800610e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006110:	2302      	movs	r3, #2
 8006112:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006114:	2300      	movs	r3, #0
 8006116:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006118:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800611c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800611e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006122:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006128:	2105      	movs	r1, #5
 800612a:	4618      	mov	r0, r3
 800612c:	f006 f8ae 	bl	800c28c <HAL_RCC_ClockConfig>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006136:	f000 fe61 	bl	8006dfc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800613a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800613e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006140:	2300      	movs	r3, #0
 8006142:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006144:	2300      	movs	r3, #0
 8006146:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006148:	f107 030c 	add.w	r3, r7, #12
 800614c:	4618      	mov	r0, r3
 800614e:	f006 fa8d 	bl	800c66c <HAL_RCCEx_PeriphCLKConfig>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006158:	f000 fe50 	bl	8006dfc <Error_Handler>
  }
}
 800615c:	bf00      	nop
 800615e:	3790      	adds	r7, #144	; 0x90
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	40023800 	.word	0x40023800
 8006168:	40007000 	.word	0x40007000

0800616c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006172:	463b      	mov	r3, r7
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800617e:	4b7c      	ldr	r3, [pc, #496]	; (8006370 <MX_ADC2_Init+0x204>)
 8006180:	4a7c      	ldr	r2, [pc, #496]	; (8006374 <MX_ADC2_Init+0x208>)
 8006182:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006184:	4b7a      	ldr	r3, [pc, #488]	; (8006370 <MX_ADC2_Init+0x204>)
 8006186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800618a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800618c:	4b78      	ldr	r3, [pc, #480]	; (8006370 <MX_ADC2_Init+0x204>)
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006192:	4b77      	ldr	r3, [pc, #476]	; (8006370 <MX_ADC2_Init+0x204>)
 8006194:	2201      	movs	r2, #1
 8006196:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006198:	4b75      	ldr	r3, [pc, #468]	; (8006370 <MX_ADC2_Init+0x204>)
 800619a:	2201      	movs	r2, #1
 800619c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800619e:	4b74      	ldr	r3, [pc, #464]	; (8006370 <MX_ADC2_Init+0x204>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80061a6:	4b72      	ldr	r3, [pc, #456]	; (8006370 <MX_ADC2_Init+0x204>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80061ac:	4b70      	ldr	r3, [pc, #448]	; (8006370 <MX_ADC2_Init+0x204>)
 80061ae:	4a72      	ldr	r2, [pc, #456]	; (8006378 <MX_ADC2_Init+0x20c>)
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80061b2:	4b6f      	ldr	r3, [pc, #444]	; (8006370 <MX_ADC2_Init+0x204>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80061b8:	4b6d      	ldr	r3, [pc, #436]	; (8006370 <MX_ADC2_Init+0x204>)
 80061ba:	220e      	movs	r2, #14
 80061bc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80061be:	4b6c      	ldr	r3, [pc, #432]	; (8006370 <MX_ADC2_Init+0x204>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80061c6:	4b6a      	ldr	r3, [pc, #424]	; (8006370 <MX_ADC2_Init+0x204>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80061cc:	4868      	ldr	r0, [pc, #416]	; (8006370 <MX_ADC2_Init+0x204>)
 80061ce:	f003 fdf5 	bl	8009dbc <HAL_ADC_Init>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80061d8:	f000 fe10 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80061dc:	230a      	movs	r3, #10
 80061de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80061e4:	2306      	movs	r3, #6
 80061e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061e8:	463b      	mov	r3, r7
 80061ea:	4619      	mov	r1, r3
 80061ec:	4860      	ldr	r0, [pc, #384]	; (8006370 <MX_ADC2_Init+0x204>)
 80061ee:	f003 ff39 	bl	800a064 <HAL_ADC_ConfigChannel>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80061f8:	f000 fe00 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80061fc:	230b      	movs	r3, #11
 80061fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006200:	2302      	movs	r3, #2
 8006202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006204:	463b      	mov	r3, r7
 8006206:	4619      	mov	r1, r3
 8006208:	4859      	ldr	r0, [pc, #356]	; (8006370 <MX_ADC2_Init+0x204>)
 800620a:	f003 ff2b 	bl	800a064 <HAL_ADC_ConfigChannel>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006214:	f000 fdf2 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006218:	230c      	movs	r3, #12
 800621a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800621c:	2303      	movs	r3, #3
 800621e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006220:	463b      	mov	r3, r7
 8006222:	4619      	mov	r1, r3
 8006224:	4852      	ldr	r0, [pc, #328]	; (8006370 <MX_ADC2_Init+0x204>)
 8006226:	f003 ff1d 	bl	800a064 <HAL_ADC_ConfigChannel>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006230:	f000 fde4 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006234:	230d      	movs	r3, #13
 8006236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006238:	2304      	movs	r3, #4
 800623a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800623c:	463b      	mov	r3, r7
 800623e:	4619      	mov	r1, r3
 8006240:	484b      	ldr	r0, [pc, #300]	; (8006370 <MX_ADC2_Init+0x204>)
 8006242:	f003 ff0f 	bl	800a064 <HAL_ADC_ConfigChannel>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800624c:	f000 fdd6 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006250:	2300      	movs	r3, #0
 8006252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006254:	2305      	movs	r3, #5
 8006256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006258:	463b      	mov	r3, r7
 800625a:	4619      	mov	r1, r3
 800625c:	4844      	ldr	r0, [pc, #272]	; (8006370 <MX_ADC2_Init+0x204>)
 800625e:	f003 ff01 	bl	800a064 <HAL_ADC_ConfigChannel>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006268:	f000 fdc8 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800626c:	2301      	movs	r3, #1
 800626e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006270:	2306      	movs	r3, #6
 8006272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006274:	463b      	mov	r3, r7
 8006276:	4619      	mov	r1, r3
 8006278:	483d      	ldr	r0, [pc, #244]	; (8006370 <MX_ADC2_Init+0x204>)
 800627a:	f003 fef3 	bl	800a064 <HAL_ADC_ConfigChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006284:	f000 fdba 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006288:	2302      	movs	r3, #2
 800628a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800628c:	2307      	movs	r3, #7
 800628e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006290:	463b      	mov	r3, r7
 8006292:	4619      	mov	r1, r3
 8006294:	4836      	ldr	r0, [pc, #216]	; (8006370 <MX_ADC2_Init+0x204>)
 8006296:	f003 fee5 	bl	800a064 <HAL_ADC_ConfigChannel>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80062a0:	f000 fdac 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80062a4:	2303      	movs	r3, #3
 80062a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80062a8:	2308      	movs	r3, #8
 80062aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062ac:	463b      	mov	r3, r7
 80062ae:	4619      	mov	r1, r3
 80062b0:	482f      	ldr	r0, [pc, #188]	; (8006370 <MX_ADC2_Init+0x204>)
 80062b2:	f003 fed7 	bl	800a064 <HAL_ADC_ConfigChannel>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80062bc:	f000 fd9e 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80062c0:	2304      	movs	r3, #4
 80062c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80062c4:	2309      	movs	r3, #9
 80062c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062c8:	463b      	mov	r3, r7
 80062ca:	4619      	mov	r1, r3
 80062cc:	4828      	ldr	r0, [pc, #160]	; (8006370 <MX_ADC2_Init+0x204>)
 80062ce:	f003 fec9 	bl	800a064 <HAL_ADC_ConfigChannel>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80062d8:	f000 fd90 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80062dc:	2305      	movs	r3, #5
 80062de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80062e0:	230a      	movs	r3, #10
 80062e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062e4:	463b      	mov	r3, r7
 80062e6:	4619      	mov	r1, r3
 80062e8:	4821      	ldr	r0, [pc, #132]	; (8006370 <MX_ADC2_Init+0x204>)
 80062ea:	f003 febb 	bl	800a064 <HAL_ADC_ConfigChannel>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80062f4:	f000 fd82 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80062f8:	2306      	movs	r3, #6
 80062fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80062fc:	230b      	movs	r3, #11
 80062fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006300:	463b      	mov	r3, r7
 8006302:	4619      	mov	r1, r3
 8006304:	481a      	ldr	r0, [pc, #104]	; (8006370 <MX_ADC2_Init+0x204>)
 8006306:	f003 fead 	bl	800a064 <HAL_ADC_ConfigChannel>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006310:	f000 fd74 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006314:	2307      	movs	r3, #7
 8006316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006318:	230c      	movs	r3, #12
 800631a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800631c:	463b      	mov	r3, r7
 800631e:	4619      	mov	r1, r3
 8006320:	4813      	ldr	r0, [pc, #76]	; (8006370 <MX_ADC2_Init+0x204>)
 8006322:	f003 fe9f 	bl	800a064 <HAL_ADC_ConfigChannel>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800632c:	f000 fd66 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006330:	2308      	movs	r3, #8
 8006332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006334:	230d      	movs	r3, #13
 8006336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006338:	463b      	mov	r3, r7
 800633a:	4619      	mov	r1, r3
 800633c:	480c      	ldr	r0, [pc, #48]	; (8006370 <MX_ADC2_Init+0x204>)
 800633e:	f003 fe91 	bl	800a064 <HAL_ADC_ConfigChannel>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006348:	f000 fd58 	bl	8006dfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800634c:	2309      	movs	r3, #9
 800634e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006350:	230e      	movs	r3, #14
 8006352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006354:	463b      	mov	r3, r7
 8006356:	4619      	mov	r1, r3
 8006358:	4805      	ldr	r0, [pc, #20]	; (8006370 <MX_ADC2_Init+0x204>)
 800635a:	f003 fe83 	bl	800a064 <HAL_ADC_ConfigChannel>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006364:	f000 fd4a 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006368:	bf00      	nop
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	20044750 	.word	0x20044750
 8006374:	40012100 	.word	0x40012100
 8006378:	0f000001 	.word	0x0f000001

0800637c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <MX_I2C1_Init+0x50>)
 8006382:	4a13      	ldr	r2, [pc, #76]	; (80063d0 <MX_I2C1_Init+0x54>)
 8006384:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006386:	4b11      	ldr	r3, [pc, #68]	; (80063cc <MX_I2C1_Init+0x50>)
 8006388:	4a12      	ldr	r2, [pc, #72]	; (80063d4 <MX_I2C1_Init+0x58>)
 800638a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800638c:	4b0f      	ldr	r3, [pc, #60]	; (80063cc <MX_I2C1_Init+0x50>)
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006392:	4b0e      	ldr	r3, [pc, #56]	; (80063cc <MX_I2C1_Init+0x50>)
 8006394:	2200      	movs	r2, #0
 8006396:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <MX_I2C1_Init+0x50>)
 800639a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800639e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063a0:	4b0a      	ldr	r3, [pc, #40]	; (80063cc <MX_I2C1_Init+0x50>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80063a6:	4b09      	ldr	r3, [pc, #36]	; (80063cc <MX_I2C1_Init+0x50>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063ac:	4b07      	ldr	r3, [pc, #28]	; (80063cc <MX_I2C1_Init+0x50>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <MX_I2C1_Init+0x50>)
 80063b4:	2280      	movs	r2, #128	; 0x80
 80063b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80063b8:	4804      	ldr	r0, [pc, #16]	; (80063cc <MX_I2C1_Init+0x50>)
 80063ba:	f004 ff8d 	bl	800b2d8 <HAL_I2C_Init>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80063c4:	f000 fd1a 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80063c8:	bf00      	nop
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	20044798 	.word	0x20044798
 80063d0:	40005400 	.word	0x40005400
 80063d4:	000186a0 	.word	0x000186a0

080063d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80063dc:	4b12      	ldr	r3, [pc, #72]	; (8006428 <MX_I2C2_Init+0x50>)
 80063de:	4a13      	ldr	r2, [pc, #76]	; (800642c <MX_I2C2_Init+0x54>)
 80063e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80063e2:	4b11      	ldr	r3, [pc, #68]	; (8006428 <MX_I2C2_Init+0x50>)
 80063e4:	4a12      	ldr	r2, [pc, #72]	; (8006430 <MX_I2C2_Init+0x58>)
 80063e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <MX_I2C2_Init+0x50>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <MX_I2C2_Init+0x50>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <MX_I2C2_Init+0x50>)
 80063f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80063fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <MX_I2C2_Init+0x50>)
 80063fe:	2200      	movs	r2, #0
 8006400:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <MX_I2C2_Init+0x50>)
 8006404:	2200      	movs	r2, #0
 8006406:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <MX_I2C2_Init+0x50>)
 800640a:	2200      	movs	r2, #0
 800640c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <MX_I2C2_Init+0x50>)
 8006410:	2280      	movs	r2, #128	; 0x80
 8006412:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006414:	4804      	ldr	r0, [pc, #16]	; (8006428 <MX_I2C2_Init+0x50>)
 8006416:	f004 ff5f 	bl	800b2d8 <HAL_I2C_Init>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006420:	f000 fcec 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2004482c 	.word	0x2004482c
 800642c:	40005800 	.word	0x40005800
 8006430:	000186a0 	.word	0x000186a0

08006434 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006438:	4b0c      	ldr	r3, [pc, #48]	; (800646c <MX_SDIO_SD_Init+0x38>)
 800643a:	4a0d      	ldr	r2, [pc, #52]	; (8006470 <MX_SDIO_SD_Init+0x3c>)
 800643c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <MX_SDIO_SD_Init+0x38>)
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006444:	4b09      	ldr	r3, [pc, #36]	; (800646c <MX_SDIO_SD_Init+0x38>)
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800644a:	4b08      	ldr	r3, [pc, #32]	; (800646c <MX_SDIO_SD_Init+0x38>)
 800644c:	2200      	movs	r2, #0
 800644e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <MX_SDIO_SD_Init+0x38>)
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006456:	4b05      	ldr	r3, [pc, #20]	; (800646c <MX_SDIO_SD_Init+0x38>)
 8006458:	2200      	movs	r2, #0
 800645a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800645c:	4b03      	ldr	r3, [pc, #12]	; (800646c <MX_SDIO_SD_Init+0x38>)
 800645e:	2202      	movs	r2, #2
 8006460:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006462:	bf00      	nop
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20044a2c 	.word	0x20044a2c
 8006470:	40012c00 	.word	0x40012c00

08006474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006478:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <MX_SPI2_Init+0x64>)
 800647a:	4a18      	ldr	r2, [pc, #96]	; (80064dc <MX_SPI2_Init+0x68>)
 800647c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800647e:	4b16      	ldr	r3, [pc, #88]	; (80064d8 <MX_SPI2_Init+0x64>)
 8006480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006486:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <MX_SPI2_Init+0x64>)
 8006488:	2200      	movs	r2, #0
 800648a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800648c:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <MX_SPI2_Init+0x64>)
 800648e:	2200      	movs	r2, #0
 8006490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <MX_SPI2_Init+0x64>)
 8006494:	2202      	movs	r2, #2
 8006496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006498:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <MX_SPI2_Init+0x64>)
 800649a:	2201      	movs	r2, #1
 800649c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800649e:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80064a6:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064a8:	2228      	movs	r2, #40	; 0x28
 80064aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b8:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80064be:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064c0:	220a      	movs	r2, #10
 80064c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80064c4:	4804      	ldr	r0, [pc, #16]	; (80064d8 <MX_SPI2_Init+0x64>)
 80064c6:	f008 f839 	bl	800e53c <HAL_SPI_Init>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80064d0:	f000 fc94 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80064d4:	bf00      	nop
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20044678 	.word	0x20044678
 80064dc:	40003800 	.word	0x40003800

080064e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b09a      	sub	sp, #104	; 0x68
 80064e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80064e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064ea:	2224      	movs	r2, #36	; 0x24
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f00f f9b6 	bl	8015860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064fe:	f107 0320 	add.w	r3, r7, #32
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	605a      	str	r2, [r3, #4]
 8006508:	609a      	str	r2, [r3, #8]
 800650a:	60da      	str	r2, [r3, #12]
 800650c:	611a      	str	r2, [r3, #16]
 800650e:	615a      	str	r2, [r3, #20]
 8006510:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006512:	463b      	mov	r3, r7
 8006514:	2220      	movs	r2, #32
 8006516:	2100      	movs	r1, #0
 8006518:	4618      	mov	r0, r3
 800651a:	f00f f9a1 	bl	8015860 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800651e:	4b42      	ldr	r3, [pc, #264]	; (8006628 <MX_TIM1_Init+0x148>)
 8006520:	4a42      	ldr	r2, [pc, #264]	; (800662c <MX_TIM1_Init+0x14c>)
 8006522:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006524:	4b40      	ldr	r3, [pc, #256]	; (8006628 <MX_TIM1_Init+0x148>)
 8006526:	2200      	movs	r2, #0
 8006528:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800652a:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <MX_TIM1_Init+0x148>)
 800652c:	2200      	movs	r2, #0
 800652e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006530:	4b3d      	ldr	r3, [pc, #244]	; (8006628 <MX_TIM1_Init+0x148>)
 8006532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006536:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006538:	4b3b      	ldr	r3, [pc, #236]	; (8006628 <MX_TIM1_Init+0x148>)
 800653a:	2200      	movs	r2, #0
 800653c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800653e:	4b3a      	ldr	r3, [pc, #232]	; (8006628 <MX_TIM1_Init+0x148>)
 8006540:	2200      	movs	r2, #0
 8006542:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006544:	4b38      	ldr	r3, [pc, #224]	; (8006628 <MX_TIM1_Init+0x148>)
 8006546:	2200      	movs	r2, #0
 8006548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800654a:	4837      	ldr	r0, [pc, #220]	; (8006628 <MX_TIM1_Init+0x148>)
 800654c:	f008 fd99 	bl	800f082 <HAL_TIM_PWM_Init>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006556:	f000 fc51 	bl	8006dfc <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800655a:	2303      	movs	r3, #3
 800655c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800655e:	2300      	movs	r3, #0
 8006560:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006562:	2301      	movs	r3, #1
 8006564:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006566:	2300      	movs	r3, #0
 8006568:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800656e:	2300      	movs	r3, #0
 8006570:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006572:	2301      	movs	r3, #1
 8006574:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006576:	2300      	movs	r3, #0
 8006578:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800657e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006582:	4619      	mov	r1, r3
 8006584:	4828      	ldr	r0, [pc, #160]	; (8006628 <MX_TIM1_Init+0x148>)
 8006586:	f008 fde5 	bl	800f154 <HAL_TIM_Encoder_Init>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006590:	f000 fc34 	bl	8006dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006594:	2300      	movs	r3, #0
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006598:	2300      	movs	r3, #0
 800659a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800659c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80065a0:	4619      	mov	r1, r3
 80065a2:	4821      	ldr	r0, [pc, #132]	; (8006628 <MX_TIM1_Init+0x148>)
 80065a4:	f009 fb0c 	bl	800fbc0 <HAL_TIMEx_MasterConfigSynchronization>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80065ae:	f000 fc25 	bl	8006dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065b2:	2360      	movs	r3, #96	; 0x60
 80065b4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065ba:	2300      	movs	r3, #0
 80065bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80065be:	2300      	movs	r3, #0
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80065ce:	f107 0320 	add.w	r3, r7, #32
 80065d2:	2208      	movs	r2, #8
 80065d4:	4619      	mov	r1, r3
 80065d6:	4814      	ldr	r0, [pc, #80]	; (8006628 <MX_TIM1_Init+0x148>)
 80065d8:	f008 ff8e 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80065e2:	f000 fc0b 	bl	8006dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80065e6:	2300      	movs	r3, #0
 80065e8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065f6:	2300      	movs	r3, #0
 80065f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006600:	2300      	movs	r3, #0
 8006602:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006604:	463b      	mov	r3, r7
 8006606:	4619      	mov	r1, r3
 8006608:	4807      	ldr	r0, [pc, #28]	; (8006628 <MX_TIM1_Init+0x148>)
 800660a:	f009 fb55 	bl	800fcb8 <HAL_TIMEx_ConfigBreakDeadTime>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006614:	f000 fbf2 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006618:	4803      	ldr	r0, [pc, #12]	; (8006628 <MX_TIM1_Init+0x148>)
 800661a:	f000 ffdf 	bl	80075dc <HAL_TIM_MspPostInit>

}
 800661e:	bf00      	nop
 8006620:	3768      	adds	r7, #104	; 0x68
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200449ec 	.word	0x200449ec
 800662c:	40010000 	.word	0x40010000

08006630 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b08a      	sub	sp, #40	; 0x28
 8006634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006636:	f107 0320 	add.w	r3, r7, #32
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006640:	1d3b      	adds	r3, r7, #4
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	611a      	str	r2, [r3, #16]
 800664e:	615a      	str	r2, [r3, #20]
 8006650:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006652:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <MX_TIM3_Init+0xc0>)
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <MX_TIM3_Init+0xc4>)
 8006656:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006658:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <MX_TIM3_Init+0xc0>)
 800665a:	2201      	movs	r2, #1
 800665c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800665e:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <MX_TIM3_Init+0xc0>)
 8006660:	2200      	movs	r2, #0
 8006662:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006664:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <MX_TIM3_Init+0xc0>)
 8006666:	f241 1293 	movw	r2, #4499	; 0x1193
 800666a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800666c:	4b20      	ldr	r3, [pc, #128]	; (80066f0 <MX_TIM3_Init+0xc0>)
 800666e:	2200      	movs	r2, #0
 8006670:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006672:	4b1f      	ldr	r3, [pc, #124]	; (80066f0 <MX_TIM3_Init+0xc0>)
 8006674:	2200      	movs	r2, #0
 8006676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006678:	481d      	ldr	r0, [pc, #116]	; (80066f0 <MX_TIM3_Init+0xc0>)
 800667a:	f008 fd02 	bl	800f082 <HAL_TIM_PWM_Init>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006684:	f000 fbba 	bl	8006dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006688:	2300      	movs	r3, #0
 800668a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800668c:	2300      	movs	r3, #0
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006690:	f107 0320 	add.w	r3, r7, #32
 8006694:	4619      	mov	r1, r3
 8006696:	4816      	ldr	r0, [pc, #88]	; (80066f0 <MX_TIM3_Init+0xc0>)
 8006698:	f009 fa92 	bl	800fbc0 <HAL_TIMEx_MasterConfigSynchronization>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80066a2:	f000 fbab 	bl	8006dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066a6:	2360      	movs	r3, #96	; 0x60
 80066a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066b6:	1d3b      	adds	r3, r7, #4
 80066b8:	2200      	movs	r2, #0
 80066ba:	4619      	mov	r1, r3
 80066bc:	480c      	ldr	r0, [pc, #48]	; (80066f0 <MX_TIM3_Init+0xc0>)
 80066be:	f008 ff1b 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80066c8:	f000 fb98 	bl	8006dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	2204      	movs	r2, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4807      	ldr	r0, [pc, #28]	; (80066f0 <MX_TIM3_Init+0xc0>)
 80066d4:	f008 ff10 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80066de:	f000 fb8d 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80066e2:	4803      	ldr	r0, [pc, #12]	; (80066f0 <MX_TIM3_Init+0xc0>)
 80066e4:	f000 ff7a 	bl	80075dc <HAL_TIM_MspPostInit>

}
 80066e8:	bf00      	nop
 80066ea:	3728      	adds	r7, #40	; 0x28
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20044884 	.word	0x20044884
 80066f4:	40000400 	.word	0x40000400

080066f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066fe:	f107 0320 	add.w	r3, r7, #32
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	2200      	movs	r2, #0
 800670c:	601a      	str	r2, [r3, #0]
 800670e:	605a      	str	r2, [r3, #4]
 8006710:	609a      	str	r2, [r3, #8]
 8006712:	60da      	str	r2, [r3, #12]
 8006714:	611a      	str	r2, [r3, #16]
 8006716:	615a      	str	r2, [r3, #20]
 8006718:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800671a:	4b27      	ldr	r3, [pc, #156]	; (80067b8 <MX_TIM4_Init+0xc0>)
 800671c:	4a27      	ldr	r2, [pc, #156]	; (80067bc <MX_TIM4_Init+0xc4>)
 800671e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006720:	4b25      	ldr	r3, [pc, #148]	; (80067b8 <MX_TIM4_Init+0xc0>)
 8006722:	2200      	movs	r2, #0
 8006724:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006726:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <MX_TIM4_Init+0xc0>)
 8006728:	2200      	movs	r2, #0
 800672a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800672c:	4b22      	ldr	r3, [pc, #136]	; (80067b8 <MX_TIM4_Init+0xc0>)
 800672e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006732:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006734:	4b20      	ldr	r3, [pc, #128]	; (80067b8 <MX_TIM4_Init+0xc0>)
 8006736:	2200      	movs	r2, #0
 8006738:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800673a:	4b1f      	ldr	r3, [pc, #124]	; (80067b8 <MX_TIM4_Init+0xc0>)
 800673c:	2200      	movs	r2, #0
 800673e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006740:	481d      	ldr	r0, [pc, #116]	; (80067b8 <MX_TIM4_Init+0xc0>)
 8006742:	f008 fc9e 	bl	800f082 <HAL_TIM_PWM_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800674c:	f000 fb56 	bl	8006dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006750:	2300      	movs	r3, #0
 8006752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006758:	f107 0320 	add.w	r3, r7, #32
 800675c:	4619      	mov	r1, r3
 800675e:	4816      	ldr	r0, [pc, #88]	; (80067b8 <MX_TIM4_Init+0xc0>)
 8006760:	f009 fa2e 	bl	800fbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800676a:	f000 fb47 	bl	8006dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800676e:	2360      	movs	r3, #96	; 0x60
 8006770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	2208      	movs	r2, #8
 8006782:	4619      	mov	r1, r3
 8006784:	480c      	ldr	r0, [pc, #48]	; (80067b8 <MX_TIM4_Init+0xc0>)
 8006786:	f008 feb7 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d001      	beq.n	8006794 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006790:	f000 fb34 	bl	8006dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006794:	1d3b      	adds	r3, r7, #4
 8006796:	220c      	movs	r2, #12
 8006798:	4619      	mov	r1, r3
 800679a:	4807      	ldr	r0, [pc, #28]	; (80067b8 <MX_TIM4_Init+0xc0>)
 800679c:	f008 feac 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80067a6:	f000 fb29 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80067aa:	4803      	ldr	r0, [pc, #12]	; (80067b8 <MX_TIM4_Init+0xc0>)
 80067ac:	f000 ff16 	bl	80075dc <HAL_TIM_MspPostInit>

}
 80067b0:	bf00      	nop
 80067b2:	3728      	adds	r7, #40	; 0x28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20044710 	.word	0x20044710
 80067bc:	40000800 	.word	0x40000800

080067c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067c6:	463b      	mov	r3, r7
 80067c8:	2200      	movs	r2, #0
 80067ca:	601a      	str	r2, [r3, #0]
 80067cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80067ce:	4b15      	ldr	r3, [pc, #84]	; (8006824 <MX_TIM6_Init+0x64>)
 80067d0:	4a15      	ldr	r2, [pc, #84]	; (8006828 <MX_TIM6_Init+0x68>)
 80067d2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <MX_TIM6_Init+0x64>)
 80067d6:	2259      	movs	r2, #89	; 0x59
 80067d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067da:	4b12      	ldr	r3, [pc, #72]	; (8006824 <MX_TIM6_Init+0x64>)
 80067dc:	2200      	movs	r2, #0
 80067de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80067e0:	4b10      	ldr	r3, [pc, #64]	; (8006824 <MX_TIM6_Init+0x64>)
 80067e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80067e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80067e8:	4b0e      	ldr	r3, [pc, #56]	; (8006824 <MX_TIM6_Init+0x64>)
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80067ee:	480d      	ldr	r0, [pc, #52]	; (8006824 <MX_TIM6_Init+0x64>)
 80067f0:	f008 fbf8 	bl	800efe4 <HAL_TIM_Base_Init>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80067fa:	f000 faff 	bl	8006dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067fe:	2300      	movs	r3, #0
 8006800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006806:	463b      	mov	r3, r7
 8006808:	4619      	mov	r1, r3
 800680a:	4806      	ldr	r0, [pc, #24]	; (8006824 <MX_TIM6_Init+0x64>)
 800680c:	f009 f9d8 	bl	800fbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006816:	f000 faf1 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	200449ac 	.word	0x200449ac
 8006828:	40001000 	.word	0x40001000

0800682c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006832:	463b      	mov	r3, r7
 8006834:	2200      	movs	r2, #0
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <MX_TIM7_Init+0x60>)
 800683c:	4a14      	ldr	r2, [pc, #80]	; (8006890 <MX_TIM7_Init+0x64>)
 800683e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <MX_TIM7_Init+0x60>)
 8006842:	22b3      	movs	r2, #179	; 0xb3
 8006844:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <MX_TIM7_Init+0x60>)
 8006848:	2200      	movs	r2, #0
 800684a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <MX_TIM7_Init+0x60>)
 800684e:	2231      	movs	r2, #49	; 0x31
 8006850:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <MX_TIM7_Init+0x60>)
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006858:	480c      	ldr	r0, [pc, #48]	; (800688c <MX_TIM7_Init+0x60>)
 800685a:	f008 fbc3 	bl	800efe4 <HAL_TIM_Base_Init>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d001      	beq.n	8006868 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006864:	f000 faca 	bl	8006dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006868:	2300      	movs	r3, #0
 800686a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800686c:	2300      	movs	r3, #0
 800686e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006870:	463b      	mov	r3, r7
 8006872:	4619      	mov	r1, r3
 8006874:	4805      	ldr	r0, [pc, #20]	; (800688c <MX_TIM7_Init+0x60>)
 8006876:	f009 f9a3 	bl	800fbc0 <HAL_TIMEx_MasterConfigSynchronization>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006880:	f000 fabc 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20044b50 	.word	0x20044b50
 8006890:	40001400 	.word	0x40001400

08006894 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b08c      	sub	sp, #48	; 0x30
 8006898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800689a:	f107 030c 	add.w	r3, r7, #12
 800689e:	2224      	movs	r2, #36	; 0x24
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f00e ffdc 	bl	8015860 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068a8:	1d3b      	adds	r3, r7, #4
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
 80068ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80068b0:	4b22      	ldr	r3, [pc, #136]	; (800693c <MX_TIM8_Init+0xa8>)
 80068b2:	4a23      	ldr	r2, [pc, #140]	; (8006940 <MX_TIM8_Init+0xac>)
 80068b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <MX_TIM8_Init+0xa8>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80068bc:	4b1f      	ldr	r3, [pc, #124]	; (800693c <MX_TIM8_Init+0xa8>)
 80068be:	2210      	movs	r2, #16
 80068c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80068c2:	4b1e      	ldr	r3, [pc, #120]	; (800693c <MX_TIM8_Init+0xa8>)
 80068c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <MX_TIM8_Init+0xa8>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80068d0:	4b1a      	ldr	r3, [pc, #104]	; (800693c <MX_TIM8_Init+0xa8>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068d6:	4b19      	ldr	r3, [pc, #100]	; (800693c <MX_TIM8_Init+0xa8>)
 80068d8:	2200      	movs	r2, #0
 80068da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80068dc:	2303      	movs	r3, #3
 80068de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80068e0:	2300      	movs	r3, #0
 80068e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80068e8:	2300      	movs	r3, #0
 80068ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80068f0:	2300      	movs	r3, #0
 80068f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80068f4:	2301      	movs	r3, #1
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80068f8:	2300      	movs	r3, #0
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006900:	f107 030c 	add.w	r3, r7, #12
 8006904:	4619      	mov	r1, r3
 8006906:	480d      	ldr	r0, [pc, #52]	; (800693c <MX_TIM8_Init+0xa8>)
 8006908:	f008 fc24 	bl	800f154 <HAL_TIM_Encoder_Init>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006912:	f000 fa73 	bl	8006dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800691e:	1d3b      	adds	r3, r7, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4806      	ldr	r0, [pc, #24]	; (800693c <MX_TIM8_Init+0xa8>)
 8006924:	f009 f94c 	bl	800fbc0 <HAL_TIMEx_MasterConfigSynchronization>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800692e:	f000 fa65 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006932:	bf00      	nop
 8006934:	3730      	adds	r7, #48	; 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	200446d0 	.word	0x200446d0
 8006940:	40010400 	.word	0x40010400

08006944 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800694a:	1d3b      	adds	r3, r7, #4
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	60da      	str	r2, [r3, #12]
 8006956:	611a      	str	r2, [r3, #16]
 8006958:	615a      	str	r2, [r3, #20]
 800695a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800695c:	4b1e      	ldr	r3, [pc, #120]	; (80069d8 <MX_TIM10_Init+0x94>)
 800695e:	4a1f      	ldr	r2, [pc, #124]	; (80069dc <MX_TIM10_Init+0x98>)
 8006960:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006962:	4b1d      	ldr	r3, [pc, #116]	; (80069d8 <MX_TIM10_Init+0x94>)
 8006964:	2201      	movs	r2, #1
 8006966:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006968:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <MX_TIM10_Init+0x94>)
 800696a:	2200      	movs	r2, #0
 800696c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 800696e:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <MX_TIM10_Init+0x94>)
 8006970:	f242 3227 	movw	r2, #8999	; 0x2327
 8006974:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006976:	4b18      	ldr	r3, [pc, #96]	; (80069d8 <MX_TIM10_Init+0x94>)
 8006978:	2200      	movs	r2, #0
 800697a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800697c:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <MX_TIM10_Init+0x94>)
 800697e:	2200      	movs	r2, #0
 8006980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006982:	4815      	ldr	r0, [pc, #84]	; (80069d8 <MX_TIM10_Init+0x94>)
 8006984:	f008 fb2e 	bl	800efe4 <HAL_TIM_Base_Init>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d001      	beq.n	8006992 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800698e:	f000 fa35 	bl	8006dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006992:	4811      	ldr	r0, [pc, #68]	; (80069d8 <MX_TIM10_Init+0x94>)
 8006994:	f008 fb75 	bl	800f082 <HAL_TIM_PWM_Init>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800699e:	f000 fa2d 	bl	8006dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069a2:	2360      	movs	r3, #96	; 0x60
 80069a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	2200      	movs	r2, #0
 80069b6:	4619      	mov	r1, r3
 80069b8:	4807      	ldr	r0, [pc, #28]	; (80069d8 <MX_TIM10_Init+0x94>)
 80069ba:	f008 fd9d 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80069c4:	f000 fa1a 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80069c8:	4803      	ldr	r0, [pc, #12]	; (80069d8 <MX_TIM10_Init+0x94>)
 80069ca:	f000 fe07 	bl	80075dc <HAL_TIM_MspPostInit>

}
 80069ce:	bf00      	nop
 80069d0:	3720      	adds	r7, #32
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200447ec 	.word	0x200447ec
 80069dc:	40014400 	.word	0x40014400

080069e0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	609a      	str	r2, [r3, #8]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	611a      	str	r2, [r3, #16]
 80069f4:	615a      	str	r2, [r3, #20]
 80069f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80069f8:	4b1e      	ldr	r3, [pc, #120]	; (8006a74 <MX_TIM11_Init+0x94>)
 80069fa:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <MX_TIM11_Init+0x98>)
 80069fc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80069fe:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a04:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006a0a:	4b1a      	ldr	r3, [pc, #104]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a0c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006a10:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a12:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a18:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006a1e:	4815      	ldr	r0, [pc, #84]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a20:	f008 fae0 	bl	800efe4 <HAL_TIM_Base_Init>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006a2a:	f000 f9e7 	bl	8006dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006a2e:	4811      	ldr	r0, [pc, #68]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a30:	f008 fb27 	bl	800f082 <HAL_TIM_PWM_Init>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006a3a:	f000 f9df 	bl	8006dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a3e:	2360      	movs	r3, #96	; 0x60
 8006a40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	2200      	movs	r2, #0
 8006a52:	4619      	mov	r1, r3
 8006a54:	4807      	ldr	r0, [pc, #28]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a56:	f008 fd4f 	bl	800f4f8 <HAL_TIM_PWM_ConfigChannel>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006a60:	f000 f9cc 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006a64:	4803      	ldr	r0, [pc, #12]	; (8006a74 <MX_TIM11_Init+0x94>)
 8006a66:	f000 fdb9 	bl	80075dc <HAL_TIM_MspPostInit>

}
 8006a6a:	bf00      	nop
 8006a6c:	3720      	adds	r7, #32
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	2004490c 	.word	0x2004490c
 8006a78:	40014800 	.word	0x40014800

08006a7c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <MX_TIM13_Init+0x40>)
 8006a82:	4a0f      	ldr	r2, [pc, #60]	; (8006ac0 <MX_TIM13_Init+0x44>)
 8006a84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006a86:	4b0d      	ldr	r3, [pc, #52]	; (8006abc <MX_TIM13_Init+0x40>)
 8006a88:	2259      	movs	r2, #89	; 0x59
 8006a8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <MX_TIM13_Init+0x40>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <MX_TIM13_Init+0x40>)
 8006a94:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a9a:	4b08      	ldr	r3, [pc, #32]	; (8006abc <MX_TIM13_Init+0x40>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006aa0:	4b06      	ldr	r3, [pc, #24]	; (8006abc <MX_TIM13_Init+0x40>)
 8006aa2:	2280      	movs	r2, #128	; 0x80
 8006aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006aa6:	4805      	ldr	r0, [pc, #20]	; (8006abc <MX_TIM13_Init+0x40>)
 8006aa8:	f008 fa9c 	bl	800efe4 <HAL_TIM_Base_Init>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006ab2:	f000 f9a3 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006ab6:	bf00      	nop
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200448cc 	.word	0x200448cc
 8006ac0:	40001c00 	.word	0x40001c00

08006ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006ac8:	4b11      	ldr	r3, [pc, #68]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006aca:	4a12      	ldr	r2, [pc, #72]	; (8006b14 <MX_USART2_UART_Init+0x50>)
 8006acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006ace:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006ad6:	4b0e      	ldr	r3, [pc, #56]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006adc:	4b0c      	ldr	r3, [pc, #48]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006ae8:	4b09      	ldr	r3, [pc, #36]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006aea:	220c      	movs	r2, #12
 8006aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006aee:	4b08      	ldr	r3, [pc, #32]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006af4:	4b06      	ldr	r3, [pc, #24]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006afa:	4805      	ldr	r0, [pc, #20]	; (8006b10 <MX_USART2_UART_Init+0x4c>)
 8006afc:	f009 f942 	bl	800fd84 <HAL_UART_Init>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b06:	f000 f979 	bl	8006dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20044ab0 	.word	0x20044ab0
 8006b14:	40004400 	.word	0x40004400

08006b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	4b14      	ldr	r3, [pc, #80]	; (8006b74 <MX_DMA_Init+0x5c>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	4a13      	ldr	r2, [pc, #76]	; (8006b74 <MX_DMA_Init+0x5c>)
 8006b28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b2e:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <MX_DMA_Init+0x5c>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b36:	607b      	str	r3, [r7, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	203a      	movs	r0, #58	; 0x3a
 8006b40:	f003 fe1b 	bl	800a77a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006b44:	203a      	movs	r0, #58	; 0x3a
 8006b46:	f003 fe34 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	203b      	movs	r0, #59	; 0x3b
 8006b50:	f003 fe13 	bl	800a77a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006b54:	203b      	movs	r0, #59	; 0x3b
 8006b56:	f003 fe2c 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	2045      	movs	r0, #69	; 0x45
 8006b60:	f003 fe0b 	bl	800a77a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006b64:	2045      	movs	r0, #69	; 0x45
 8006b66:	f003 fe24 	bl	800a7b2 <HAL_NVIC_EnableIRQ>

}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800

08006b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b08c      	sub	sp, #48	; 0x30
 8006b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b7e:	f107 031c 	add.w	r3, r7, #28
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	605a      	str	r2, [r3, #4]
 8006b88:	609a      	str	r2, [r3, #8]
 8006b8a:	60da      	str	r2, [r3, #12]
 8006b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	4b94      	ldr	r3, [pc, #592]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b96:	4a93      	ldr	r2, [pc, #588]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006b98:	f043 0310 	orr.w	r3, r3, #16
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9e:	4b91      	ldr	r3, [pc, #580]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f003 0310 	and.w	r3, r3, #16
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006baa:	2300      	movs	r3, #0
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	4b8d      	ldr	r3, [pc, #564]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4a8c      	ldr	r2, [pc, #560]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006bba:	4b8a      	ldr	r3, [pc, #552]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	4b86      	ldr	r3, [pc, #536]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bce:	4a85      	ldr	r2, [pc, #532]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bd0:	f043 0304 	orr.w	r3, r3, #4
 8006bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8006bd6:	4b83      	ldr	r3, [pc, #524]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bda:	f003 0304 	and.w	r3, r3, #4
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	4b7f      	ldr	r3, [pc, #508]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	4a7e      	ldr	r2, [pc, #504]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf2:	4b7c      	ldr	r3, [pc, #496]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60bb      	str	r3, [r7, #8]
 8006c02:	4b78      	ldr	r3, [pc, #480]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	4a77      	ldr	r2, [pc, #476]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006c08:	f043 0302 	orr.w	r3, r3, #2
 8006c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0e:	4b75      	ldr	r3, [pc, #468]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	60bb      	str	r3, [r7, #8]
 8006c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	607b      	str	r3, [r7, #4]
 8006c1e:	4b71      	ldr	r3, [pc, #452]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	4a70      	ldr	r2, [pc, #448]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006c24:	f043 0308 	orr.w	r3, r3, #8
 8006c28:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2a:	4b6e      	ldr	r3, [pc, #440]	; (8006de4 <MX_GPIO_Init+0x26c>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	f003 0308 	and.w	r3, r3, #8
 8006c32:	607b      	str	r3, [r7, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006c36:	2200      	movs	r2, #0
 8006c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c3c:	486a      	ldr	r0, [pc, #424]	; (8006de8 <MX_GPIO_Init+0x270>)
 8006c3e:	f004 fb31 	bl	800b2a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006c42:	2200      	movs	r2, #0
 8006c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c48:	4868      	ldr	r0, [pc, #416]	; (8006dec <MX_GPIO_Init+0x274>)
 8006c4a:	f004 fb2b 	bl	800b2a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c54:	4866      	ldr	r0, [pc, #408]	; (8006df0 <MX_GPIO_Init+0x278>)
 8006c56:	f004 fb25 	bl	800b2a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006c60:	4864      	ldr	r0, [pc, #400]	; (8006df4 <MX_GPIO_Init+0x27c>)
 8006c62:	f004 fb1f 	bl	800b2a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c66:	2304      	movs	r3, #4
 8006c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c72:	f107 031c 	add.w	r3, r7, #28
 8006c76:	4619      	mov	r1, r3
 8006c78:	485b      	ldr	r0, [pc, #364]	; (8006de8 <MX_GPIO_Init+0x270>)
 8006c7a:	f004 f951 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006c7e:	230f      	movs	r3, #15
 8006c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c82:	2303      	movs	r3, #3
 8006c84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c8a:	f107 031c 	add.w	r3, r7, #28
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4859      	ldr	r0, [pc, #356]	; (8006df8 <MX_GPIO_Init+0x280>)
 8006c92:	f004 f945 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c96:	23e1      	movs	r3, #225	; 0xe1
 8006c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca2:	f107 031c 	add.w	r3, r7, #28
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	4852      	ldr	r0, [pc, #328]	; (8006df4 <MX_GPIO_Init+0x27c>)
 8006caa:	f004 f939 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cb2:	2303      	movs	r3, #3
 8006cb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cba:	f107 031c 	add.w	r3, r7, #28
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	484a      	ldr	r0, [pc, #296]	; (8006dec <MX_GPIO_Init+0x274>)
 8006cc2:	f004 f92d 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd2:	f107 031c 	add.w	r3, r7, #28
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4844      	ldr	r0, [pc, #272]	; (8006dec <MX_GPIO_Init+0x274>)
 8006cda:	f004 f921 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006cde:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006cec:	f107 031c 	add.w	r3, r7, #28
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	483d      	ldr	r0, [pc, #244]	; (8006de8 <MX_GPIO_Init+0x270>)
 8006cf4:	f004 f914 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006cf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d06:	2300      	movs	r3, #0
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d0a:	f107 031c 	add.w	r3, r7, #28
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4835      	ldr	r0, [pc, #212]	; (8006de8 <MX_GPIO_Init+0x270>)
 8006d12:	f004 f905 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d28:	f107 031c 	add.w	r3, r7, #28
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	482f      	ldr	r0, [pc, #188]	; (8006dec <MX_GPIO_Init+0x274>)
 8006d30:	f004 f8f6 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d42:	f107 031c 	add.w	r3, r7, #28
 8006d46:	4619      	mov	r1, r3
 8006d48:	4829      	ldr	r0, [pc, #164]	; (8006df0 <MX_GPIO_Init+0x278>)
 8006d4a:	f004 f8e9 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d54:	2301      	movs	r3, #1
 8006d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d60:	f107 031c 	add.w	r3, r7, #28
 8006d64:	4619      	mov	r1, r3
 8006d66:	4822      	ldr	r0, [pc, #136]	; (8006df0 <MX_GPIO_Init+0x278>)
 8006d68:	f004 f8da 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d72:	2301      	movs	r3, #1
 8006d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d76:	2301      	movs	r3, #1
 8006d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d7e:	f107 031c 	add.w	r3, r7, #28
 8006d82:	4619      	mov	r1, r3
 8006d84:	481a      	ldr	r0, [pc, #104]	; (8006df0 <MX_GPIO_Init+0x278>)
 8006d86:	f004 f8cb 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d8a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d8e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d90:	2301      	movs	r3, #1
 8006d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d94:	2300      	movs	r3, #0
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d9c:	f107 031c 	add.w	r3, r7, #28
 8006da0:	4619      	mov	r1, r3
 8006da2:	4814      	ldr	r0, [pc, #80]	; (8006df4 <MX_GPIO_Init+0x27c>)
 8006da4:	f004 f8bc 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dae:	2300      	movs	r3, #0
 8006db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db2:	2300      	movs	r3, #0
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006db6:	f107 031c 	add.w	r3, r7, #28
 8006dba:	4619      	mov	r1, r3
 8006dbc:	480d      	ldr	r0, [pc, #52]	; (8006df4 <MX_GPIO_Init+0x27c>)
 8006dbe:	f004 f8af 	bl	800af20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006dc2:	239b      	movs	r3, #155	; 0x9b
 8006dc4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4806      	ldr	r0, [pc, #24]	; (8006df0 <MX_GPIO_Init+0x278>)
 8006dd6:	f004 f8a3 	bl	800af20 <HAL_GPIO_Init>

}
 8006dda:	bf00      	nop
 8006ddc:	3730      	adds	r7, #48	; 0x30
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40023800 	.word	0x40023800
 8006de8:	40021000 	.word	0x40021000
 8006dec:	40020400 	.word	0x40020400
 8006df0:	40020c00 	.word	0x40020c00
 8006df4:	40020000 	.word	0x40020000
 8006df8:	40020800 	.word	0x40020800

08006dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e02:	e7fe      	b.n	8006e02 <Error_Handler+0x6>

08006e04 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006e08:	bf00      	nop
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	607b      	str	r3, [r7, #4]
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <HAL_MspInit+0x4c>)
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <HAL_MspInit+0x4c>)
 8006e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e28:	6453      	str	r3, [r2, #68]	; 0x44
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <HAL_MspInit+0x4c>)
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e32:	607b      	str	r3, [r7, #4]
 8006e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e36:	2300      	movs	r3, #0
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <HAL_MspInit+0x4c>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	4a08      	ldr	r2, [pc, #32]	; (8006e60 <HAL_MspInit+0x4c>)
 8006e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e44:	6413      	str	r3, [r2, #64]	; 0x40
 8006e46:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <HAL_MspInit+0x4c>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e4e:	603b      	str	r3, [r7, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40023800 	.word	0x40023800

08006e64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b08c      	sub	sp, #48	; 0x30
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e6c:	f107 031c 	add.w	r3, r7, #28
 8006e70:	2200      	movs	r2, #0
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a4a      	ldr	r2, [pc, #296]	; (8006fac <HAL_ADC_MspInit+0x148>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f040 808e 	bne.w	8006fa4 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61bb      	str	r3, [r7, #24]
 8006e8c:	4b48      	ldr	r3, [pc, #288]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e90:	4a47      	ldr	r2, [pc, #284]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e96:	6453      	str	r3, [r2, #68]	; 0x44
 8006e98:	4b45      	ldr	r3, [pc, #276]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	4b41      	ldr	r3, [pc, #260]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eac:	4a40      	ldr	r2, [pc, #256]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006eae:	f043 0304 	orr.w	r3, r3, #4
 8006eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb4:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	613b      	str	r3, [r7, #16]
 8006ec4:	4b3a      	ldr	r3, [pc, #232]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	4a39      	ldr	r2, [pc, #228]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006eca:	f043 0301 	orr.w	r3, r3, #1
 8006ece:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed0:	4b37      	ldr	r3, [pc, #220]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	4b33      	ldr	r3, [pc, #204]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee4:	4a32      	ldr	r2, [pc, #200]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006ee6:	f043 0302 	orr.w	r3, r3, #2
 8006eea:	6313      	str	r3, [r2, #48]	; 0x30
 8006eec:	4b30      	ldr	r3, [pc, #192]	; (8006fb0 <HAL_ADC_MspInit+0x14c>)
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ef8:	230f      	movs	r3, #15
 8006efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006efc:	2303      	movs	r3, #3
 8006efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f04:	f107 031c 	add.w	r3, r7, #28
 8006f08:	4619      	mov	r1, r3
 8006f0a:	482a      	ldr	r0, [pc, #168]	; (8006fb4 <HAL_ADC_MspInit+0x150>)
 8006f0c:	f004 f808 	bl	800af20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006f10:	23ff      	movs	r3, #255	; 0xff
 8006f12:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f14:	2303      	movs	r3, #3
 8006f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f1c:	f107 031c 	add.w	r3, r7, #28
 8006f20:	4619      	mov	r1, r3
 8006f22:	4825      	ldr	r0, [pc, #148]	; (8006fb8 <HAL_ADC_MspInit+0x154>)
 8006f24:	f003 fffc 	bl	800af20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f30:	2300      	movs	r3, #0
 8006f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f34:	f107 031c 	add.w	r3, r7, #28
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4820      	ldr	r0, [pc, #128]	; (8006fbc <HAL_ADC_MspInit+0x158>)
 8006f3c:	f003 fff0 	bl	800af20 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006f40:	4b1f      	ldr	r3, [pc, #124]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f42:	4a20      	ldr	r2, [pc, #128]	; (8006fc4 <HAL_ADC_MspInit+0x160>)
 8006f44:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006f46:	4b1e      	ldr	r3, [pc, #120]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f4c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f4e:	4b1c      	ldr	r3, [pc, #112]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f54:	4b1a      	ldr	r3, [pc, #104]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006f5a:	4b19      	ldr	r3, [pc, #100]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f60:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f62:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f68:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f70:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f78:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f7a:	4b11      	ldr	r3, [pc, #68]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f80:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f82:	4b0f      	ldr	r3, [pc, #60]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f88:	480d      	ldr	r0, [pc, #52]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f8a:	f003 fc2d 	bl	800a7e8 <HAL_DMA_Init>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006f94:	f7ff ff32 	bl	8006dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a09      	ldr	r2, [pc, #36]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
 8006f9e:	4a08      	ldr	r2, [pc, #32]	; (8006fc0 <HAL_ADC_MspInit+0x15c>)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006fa4:	bf00      	nop
 8006fa6:	3730      	adds	r7, #48	; 0x30
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	40012100 	.word	0x40012100
 8006fb0:	40023800 	.word	0x40023800
 8006fb4:	40020800 	.word	0x40020800
 8006fb8:	40020000 	.word	0x40020000
 8006fbc:	40020400 	.word	0x40020400
 8006fc0:	20044af0 	.word	0x20044af0
 8006fc4:	40026440 	.word	0x40026440

08006fc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08c      	sub	sp, #48	; 0x30
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd0:	f107 031c 	add.w	r3, r7, #28
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	609a      	str	r2, [r3, #8]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a32      	ldr	r2, [pc, #200]	; (80070b0 <HAL_I2C_MspInit+0xe8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d12c      	bne.n	8007044 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fea:	2300      	movs	r3, #0
 8006fec:	61bb      	str	r3, [r7, #24]
 8006fee:	4b31      	ldr	r3, [pc, #196]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff2:	4a30      	ldr	r2, [pc, #192]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8006ff4:	f043 0302 	orr.w	r3, r3, #2
 8006ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8006ffa:	4b2e      	ldr	r3, [pc, #184]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007006:	23c0      	movs	r3, #192	; 0xc0
 8007008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800700a:	2312      	movs	r3, #18
 800700c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800700e:	2301      	movs	r3, #1
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007012:	2303      	movs	r3, #3
 8007014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007016:	2304      	movs	r3, #4
 8007018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800701a:	f107 031c 	add.w	r3, r7, #28
 800701e:	4619      	mov	r1, r3
 8007020:	4825      	ldr	r0, [pc, #148]	; (80070b8 <HAL_I2C_MspInit+0xf0>)
 8007022:	f003 ff7d 	bl	800af20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007026:	2300      	movs	r3, #0
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	4b22      	ldr	r3, [pc, #136]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	4a21      	ldr	r2, [pc, #132]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007034:	6413      	str	r3, [r2, #64]	; 0x40
 8007036:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007042:	e031      	b.n	80070a8 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <HAL_I2C_MspInit+0xf4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d12c      	bne.n	80070a8 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007056:	4a17      	ldr	r2, [pc, #92]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007058:	f043 0302 	orr.w	r3, r3, #2
 800705c:	6313      	str	r3, [r2, #48]	; 0x30
 800705e:	4b15      	ldr	r3, [pc, #84]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800706a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800706e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007070:	2312      	movs	r3, #18
 8007072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007074:	2301      	movs	r3, #1
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007078:	2303      	movs	r3, #3
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800707c:	2304      	movs	r3, #4
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007080:	f107 031c 	add.w	r3, r7, #28
 8007084:	4619      	mov	r1, r3
 8007086:	480c      	ldr	r0, [pc, #48]	; (80070b8 <HAL_I2C_MspInit+0xf0>)
 8007088:	f003 ff4a 	bl	800af20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007094:	4a07      	ldr	r2, [pc, #28]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 8007096:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800709a:	6413      	str	r3, [r2, #64]	; 0x40
 800709c:	4b05      	ldr	r3, [pc, #20]	; (80070b4 <HAL_I2C_MspInit+0xec>)
 800709e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	bf00      	nop
 80070aa:	3730      	adds	r7, #48	; 0x30
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	40005400 	.word	0x40005400
 80070b4:	40023800 	.word	0x40023800
 80070b8:	40020400 	.word	0x40020400
 80070bc:	40005800 	.word	0x40005800

080070c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c8:	f107 0314 	add.w	r3, r7, #20
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	605a      	str	r2, [r3, #4]
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	60da      	str	r2, [r3, #12]
 80070d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a69      	ldr	r2, [pc, #420]	; (8007284 <HAL_SD_MspInit+0x1c4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	f040 80cb 	bne.w	800727a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80070e4:	2300      	movs	r3, #0
 80070e6:	613b      	str	r3, [r7, #16]
 80070e8:	4b67      	ldr	r3, [pc, #412]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	4a66      	ldr	r2, [pc, #408]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 80070ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070f2:	6453      	str	r3, [r2, #68]	; 0x44
 80070f4:	4b64      	ldr	r3, [pc, #400]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 80070f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	4b60      	ldr	r3, [pc, #384]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 8007106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007108:	4a5f      	ldr	r2, [pc, #380]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 800710a:	f043 0304 	orr.w	r3, r3, #4
 800710e:	6313      	str	r3, [r2, #48]	; 0x30
 8007110:	4b5d      	ldr	r3, [pc, #372]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800711c:	2300      	movs	r3, #0
 800711e:	60bb      	str	r3, [r7, #8]
 8007120:	4b59      	ldr	r3, [pc, #356]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	4a58      	ldr	r2, [pc, #352]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 8007126:	f043 0308 	orr.w	r3, r3, #8
 800712a:	6313      	str	r3, [r2, #48]	; 0x30
 800712c:	4b56      	ldr	r3, [pc, #344]	; (8007288 <HAL_SD_MspInit+0x1c8>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	60bb      	str	r3, [r7, #8]
 8007136:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007138:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800713c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713e:	2302      	movs	r3, #2
 8007140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007142:	2300      	movs	r3, #0
 8007144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007146:	2303      	movs	r3, #3
 8007148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800714a:	230c      	movs	r3, #12
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800714e:	f107 0314 	add.w	r3, r7, #20
 8007152:	4619      	mov	r1, r3
 8007154:	484d      	ldr	r0, [pc, #308]	; (800728c <HAL_SD_MspInit+0x1cc>)
 8007156:	f003 fee3 	bl	800af20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800715a:	2304      	movs	r3, #4
 800715c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800715e:	2302      	movs	r3, #2
 8007160:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007162:	2300      	movs	r3, #0
 8007164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007166:	2303      	movs	r3, #3
 8007168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800716a:	230c      	movs	r3, #12
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800716e:	f107 0314 	add.w	r3, r7, #20
 8007172:	4619      	mov	r1, r3
 8007174:	4846      	ldr	r0, [pc, #280]	; (8007290 <HAL_SD_MspInit+0x1d0>)
 8007176:	f003 fed3 	bl	800af20 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800717a:	4b46      	ldr	r3, [pc, #280]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 800717c:	4a46      	ldr	r2, [pc, #280]	; (8007298 <HAL_SD_MspInit+0x1d8>)
 800717e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007180:	4b44      	ldr	r3, [pc, #272]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 8007182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007186:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007188:	4b42      	ldr	r3, [pc, #264]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800718e:	4b41      	ldr	r3, [pc, #260]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 8007190:	2200      	movs	r2, #0
 8007192:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007194:	4b3f      	ldr	r3, [pc, #252]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 8007196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800719a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800719c:	4b3d      	ldr	r3, [pc, #244]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 800719e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071a2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80071a4:	4b3b      	ldr	r3, [pc, #236]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071aa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80071ac:	4b39      	ldr	r3, [pc, #228]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071ae:	2220      	movs	r2, #32
 80071b0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071b2:	4b38      	ldr	r3, [pc, #224]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80071b8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071ba:	4b36      	ldr	r3, [pc, #216]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071bc:	2204      	movs	r2, #4
 80071be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80071c0:	4b34      	ldr	r3, [pc, #208]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071c2:	2203      	movs	r2, #3
 80071c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80071c6:	4b33      	ldr	r3, [pc, #204]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80071cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80071ce:	4b31      	ldr	r3, [pc, #196]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80071d6:	482f      	ldr	r0, [pc, #188]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071d8:	f003 fb06 	bl	800a7e8 <HAL_DMA_Init>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80071e2:	f7ff fe0b 	bl	8006dfc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a2a      	ldr	r2, [pc, #168]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071ea:	641a      	str	r2, [r3, #64]	; 0x40
 80071ec:	4a29      	ldr	r2, [pc, #164]	; (8007294 <HAL_SD_MspInit+0x1d4>)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80071f2:	4b2a      	ldr	r3, [pc, #168]	; (800729c <HAL_SD_MspInit+0x1dc>)
 80071f4:	4a2a      	ldr	r2, [pc, #168]	; (80072a0 <HAL_SD_MspInit+0x1e0>)
 80071f6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80071f8:	4b28      	ldr	r3, [pc, #160]	; (800729c <HAL_SD_MspInit+0x1dc>)
 80071fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071fe:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007200:	4b26      	ldr	r3, [pc, #152]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007202:	2240      	movs	r2, #64	; 0x40
 8007204:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007206:	4b25      	ldr	r3, [pc, #148]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007208:	2200      	movs	r2, #0
 800720a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800720c:	4b23      	ldr	r3, [pc, #140]	; (800729c <HAL_SD_MspInit+0x1dc>)
 800720e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007212:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007214:	4b21      	ldr	r3, [pc, #132]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007216:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800721a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800721c:	4b1f      	ldr	r3, [pc, #124]	; (800729c <HAL_SD_MspInit+0x1dc>)
 800721e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007222:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007224:	4b1d      	ldr	r3, [pc, #116]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007226:	2220      	movs	r2, #32
 8007228:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800722a:	4b1c      	ldr	r3, [pc, #112]	; (800729c <HAL_SD_MspInit+0x1dc>)
 800722c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007230:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007232:	4b1a      	ldr	r3, [pc, #104]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007234:	2204      	movs	r2, #4
 8007236:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007238:	4b18      	ldr	r3, [pc, #96]	; (800729c <HAL_SD_MspInit+0x1dc>)
 800723a:	2203      	movs	r2, #3
 800723c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800723e:	4b17      	ldr	r3, [pc, #92]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007240:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007244:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007246:	4b15      	ldr	r3, [pc, #84]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007248:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800724e:	4813      	ldr	r0, [pc, #76]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007250:	f003 faca 	bl	800a7e8 <HAL_DMA_Init>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800725a:	f7ff fdcf 	bl	8006dfc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a0e      	ldr	r2, [pc, #56]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007262:	63da      	str	r2, [r3, #60]	; 0x3c
 8007264:	4a0d      	ldr	r2, [pc, #52]	; (800729c <HAL_SD_MspInit+0x1dc>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800726a:	2200      	movs	r2, #0
 800726c:	2100      	movs	r1, #0
 800726e:	2031      	movs	r0, #49	; 0x31
 8007270:	f003 fa83 	bl	800a77a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007274:	2031      	movs	r0, #49	; 0x31
 8007276:	f003 fa9c 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800727a:	bf00      	nop
 800727c:	3728      	adds	r7, #40	; 0x28
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	40012c00 	.word	0x40012c00
 8007288:	40023800 	.word	0x40023800
 800728c:	40020800 	.word	0x40020800
 8007290:	40020c00 	.word	0x40020c00
 8007294:	20044618 	.word	0x20044618
 8007298:	40026458 	.word	0x40026458
 800729c:	2004494c 	.word	0x2004494c
 80072a0:	400264a0 	.word	0x400264a0

080072a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08a      	sub	sp, #40	; 0x28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072ac:	f107 0314 	add.w	r3, r7, #20
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	60da      	str	r2, [r3, #12]
 80072ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a19      	ldr	r2, [pc, #100]	; (8007328 <HAL_SPI_MspInit+0x84>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d12c      	bne.n	8007320 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	4b18      	ldr	r3, [pc, #96]	; (800732c <HAL_SPI_MspInit+0x88>)
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	4a17      	ldr	r2, [pc, #92]	; (800732c <HAL_SPI_MspInit+0x88>)
 80072d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072d4:	6413      	str	r3, [r2, #64]	; 0x40
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <HAL_SPI_MspInit+0x88>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072de:	613b      	str	r3, [r7, #16]
 80072e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
 80072e6:	4b11      	ldr	r3, [pc, #68]	; (800732c <HAL_SPI_MspInit+0x88>)
 80072e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ea:	4a10      	ldr	r2, [pc, #64]	; (800732c <HAL_SPI_MspInit+0x88>)
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	6313      	str	r3, [r2, #48]	; 0x30
 80072f2:	4b0e      	ldr	r3, [pc, #56]	; (800732c <HAL_SPI_MspInit+0x88>)
 80072f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80072fe:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007304:	2302      	movs	r3, #2
 8007306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800730c:	2303      	movs	r3, #3
 800730e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007310:	2305      	movs	r3, #5
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4619      	mov	r1, r3
 800731a:	4805      	ldr	r0, [pc, #20]	; (8007330 <HAL_SPI_MspInit+0x8c>)
 800731c:	f003 fe00 	bl	800af20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007320:	bf00      	nop
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40003800 	.word	0x40003800
 800732c:	40023800 	.word	0x40023800
 8007330:	40020400 	.word	0x40020400

08007334 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08c      	sub	sp, #48	; 0x30
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733c:	f107 031c 	add.w	r3, r7, #28
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2d      	ldr	r2, [pc, #180]	; (8007408 <HAL_TIM_PWM_MspInit+0xd4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d12d      	bne.n	80073b2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	4b2c      	ldr	r3, [pc, #176]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 800735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735e:	4a2b      	ldr	r2, [pc, #172]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	6453      	str	r3, [r2, #68]	; 0x44
 8007366:	4b29      	ldr	r3, [pc, #164]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 8007368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	617b      	str	r3, [r7, #20]
 8007376:	4b25      	ldr	r3, [pc, #148]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	4a24      	ldr	r2, [pc, #144]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 800737c:	f043 0310 	orr.w	r3, r3, #16
 8007380:	6313      	str	r3, [r2, #48]	; 0x30
 8007382:	4b22      	ldr	r3, [pc, #136]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	f003 0310 	and.w	r3, r3, #16
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800738e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007394:	2302      	movs	r3, #2
 8007396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739c:	2300      	movs	r3, #0
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80073a0:	2301      	movs	r3, #1
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073a4:	f107 031c 	add.w	r3, r7, #28
 80073a8:	4619      	mov	r1, r3
 80073aa:	4819      	ldr	r0, [pc, #100]	; (8007410 <HAL_TIM_PWM_MspInit+0xdc>)
 80073ac:	f003 fdb8 	bl	800af20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80073b0:	e026      	b.n	8007400 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a17      	ldr	r2, [pc, #92]	; (8007414 <HAL_TIM_PWM_MspInit+0xe0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]
 80073c0:	4b12      	ldr	r3, [pc, #72]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 80073c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c4:	4a11      	ldr	r2, [pc, #68]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 80073c6:	f043 0302 	orr.w	r3, r3, #2
 80073ca:	6413      	str	r3, [r2, #64]	; 0x40
 80073cc:	4b0f      	ldr	r3, [pc, #60]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	613b      	str	r3, [r7, #16]
 80073d6:	693b      	ldr	r3, [r7, #16]
}
 80073d8:	e012      	b.n	8007400 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a0e      	ldr	r2, [pc, #56]	; (8007418 <HAL_TIM_PWM_MspInit+0xe4>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d10d      	bne.n	8007400 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	4b08      	ldr	r3, [pc, #32]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	4a07      	ldr	r2, [pc, #28]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	6413      	str	r3, [r2, #64]	; 0x40
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <HAL_TIM_PWM_MspInit+0xd8>)
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	bf00      	nop
 8007402:	3730      	adds	r7, #48	; 0x30
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40010000 	.word	0x40010000
 800740c:	40023800 	.word	0x40023800
 8007410:	40021000 	.word	0x40021000
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800

0800741c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a3e      	ldr	r2, [pc, #248]	; (8007524 <HAL_TIM_Base_MspInit+0x108>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d116      	bne.n	800745c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800742e:	2300      	movs	r3, #0
 8007430:	61fb      	str	r3, [r7, #28]
 8007432:	4b3d      	ldr	r3, [pc, #244]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 8007434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007436:	4a3c      	ldr	r2, [pc, #240]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 8007438:	f043 0310 	orr.w	r3, r3, #16
 800743c:	6413      	str	r3, [r2, #64]	; 0x40
 800743e:	4b3a      	ldr	r3, [pc, #232]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800744a:	2200      	movs	r2, #0
 800744c:	2101      	movs	r1, #1
 800744e:	2036      	movs	r0, #54	; 0x36
 8007450:	f003 f993 	bl	800a77a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007454:	2036      	movs	r0, #54	; 0x36
 8007456:	f003 f9ac 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800745a:	e05e      	b.n	800751a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a32      	ldr	r2, [pc, #200]	; (800752c <HAL_TIM_Base_MspInit+0x110>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d116      	bne.n	8007494 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007466:	2300      	movs	r3, #0
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	4b2f      	ldr	r3, [pc, #188]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 800746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746e:	4a2e      	ldr	r2, [pc, #184]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 8007470:	f043 0320 	orr.w	r3, r3, #32
 8007474:	6413      	str	r3, [r2, #64]	; 0x40
 8007476:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 8007478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	61bb      	str	r3, [r7, #24]
 8007480:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007482:	2200      	movs	r2, #0
 8007484:	2100      	movs	r1, #0
 8007486:	2037      	movs	r0, #55	; 0x37
 8007488:	f003 f977 	bl	800a77a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800748c:	2037      	movs	r0, #55	; 0x37
 800748e:	f003 f990 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
}
 8007492:	e042      	b.n	800751a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a25      	ldr	r2, [pc, #148]	; (8007530 <HAL_TIM_Base_MspInit+0x114>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10e      	bne.n	80074bc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800749e:	2300      	movs	r3, #0
 80074a0:	617b      	str	r3, [r7, #20]
 80074a2:	4b21      	ldr	r3, [pc, #132]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	4a20      	ldr	r2, [pc, #128]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ac:	6453      	str	r3, [r2, #68]	; 0x44
 80074ae:	4b1e      	ldr	r3, [pc, #120]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	697b      	ldr	r3, [r7, #20]
}
 80074ba:	e02e      	b.n	800751a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <HAL_TIM_Base_MspInit+0x118>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d10e      	bne.n	80074e4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80074c6:	2300      	movs	r3, #0
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	4a16      	ldr	r2, [pc, #88]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074d4:	6453      	str	r3, [r2, #68]	; 0x44
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	693b      	ldr	r3, [r7, #16]
}
 80074e2:	e01a      	b.n	800751a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a13      	ldr	r2, [pc, #76]	; (8007538 <HAL_TIM_Base_MspInit+0x11c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d115      	bne.n	800751a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	4b0d      	ldr	r3, [pc, #52]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f6:	4a0c      	ldr	r2, [pc, #48]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 80074f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074fc:	6413      	str	r3, [r2, #64]	; 0x40
 80074fe:	4b0a      	ldr	r3, [pc, #40]	; (8007528 <HAL_TIM_Base_MspInit+0x10c>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	202c      	movs	r0, #44	; 0x2c
 8007510:	f003 f933 	bl	800a77a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007514:	202c      	movs	r0, #44	; 0x2c
 8007516:	f003 f94c 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
}
 800751a:	bf00      	nop
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40001000 	.word	0x40001000
 8007528:	40023800 	.word	0x40023800
 800752c:	40001400 	.word	0x40001400
 8007530:	40014400 	.word	0x40014400
 8007534:	40014800 	.word	0x40014800
 8007538:	40001c00 	.word	0x40001c00

0800753c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007544:	f107 0314 	add.w	r3, r7, #20
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	605a      	str	r2, [r3, #4]
 800754e:	609a      	str	r2, [r3, #8]
 8007550:	60da      	str	r2, [r3, #12]
 8007552:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1d      	ldr	r2, [pc, #116]	; (80075d0 <HAL_TIM_Encoder_MspInit+0x94>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d133      	bne.n	80075c6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	4b1c      	ldr	r3, [pc, #112]	; (80075d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	4a1b      	ldr	r2, [pc, #108]	; (80075d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007568:	f043 0302 	orr.w	r3, r3, #2
 800756c:	6453      	str	r3, [r2, #68]	; 0x44
 800756e:	4b19      	ldr	r3, [pc, #100]	; (80075d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007584:	f043 0304 	orr.w	r3, r3, #4
 8007588:	6313      	str	r3, [r2, #48]	; 0x30
 800758a:	4b12      	ldr	r3, [pc, #72]	; (80075d4 <HAL_TIM_Encoder_MspInit+0x98>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007596:	23c0      	movs	r3, #192	; 0xc0
 8007598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800759a:	2302      	movs	r3, #2
 800759c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a2:	2300      	movs	r3, #0
 80075a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80075a6:	2303      	movs	r3, #3
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075aa:	f107 0314 	add.w	r3, r7, #20
 80075ae:	4619      	mov	r1, r3
 80075b0:	4809      	ldr	r0, [pc, #36]	; (80075d8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80075b2:	f003 fcb5 	bl	800af20 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80075b6:	2200      	movs	r2, #0
 80075b8:	2100      	movs	r1, #0
 80075ba:	202c      	movs	r0, #44	; 0x2c
 80075bc:	f003 f8dd 	bl	800a77a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80075c0:	202c      	movs	r0, #44	; 0x2c
 80075c2:	f003 f8f6 	bl	800a7b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80075c6:	bf00      	nop
 80075c8:	3728      	adds	r7, #40	; 0x28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	40010400 	.word	0x40010400
 80075d4:	40023800 	.word	0x40023800
 80075d8:	40020800 	.word	0x40020800

080075dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08c      	sub	sp, #48	; 0x30
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e4:	f107 031c 	add.w	r3, r7, #28
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	605a      	str	r2, [r3, #4]
 80075ee:	609a      	str	r2, [r3, #8]
 80075f0:	60da      	str	r2, [r3, #12]
 80075f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a5c      	ldr	r2, [pc, #368]	; (800776c <HAL_TIM_MspPostInit+0x190>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d11f      	bne.n	800763e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80075fe:	2300      	movs	r3, #0
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	4b5b      	ldr	r3, [pc, #364]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	4a5a      	ldr	r2, [pc, #360]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 8007608:	f043 0310 	orr.w	r3, r3, #16
 800760c:	6313      	str	r3, [r2, #48]	; 0x30
 800760e:	4b58      	ldr	r3, [pc, #352]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800761a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800761e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007620:	2302      	movs	r3, #2
 8007622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007624:	2300      	movs	r3, #0
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007628:	2300      	movs	r3, #0
 800762a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800762c:	2301      	movs	r3, #1
 800762e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007630:	f107 031c 	add.w	r3, r7, #28
 8007634:	4619      	mov	r1, r3
 8007636:	484f      	ldr	r0, [pc, #316]	; (8007774 <HAL_TIM_MspPostInit+0x198>)
 8007638:	f003 fc72 	bl	800af20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800763c:	e091      	b.n	8007762 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a4d      	ldr	r2, [pc, #308]	; (8007778 <HAL_TIM_MspPostInit+0x19c>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d11e      	bne.n	8007686 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	4b48      	ldr	r3, [pc, #288]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	4a47      	ldr	r2, [pc, #284]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 8007652:	f043 0302 	orr.w	r3, r3, #2
 8007656:	6313      	str	r3, [r2, #48]	; 0x30
 8007658:	4b45      	ldr	r3, [pc, #276]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 800765a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007664:	2330      	movs	r3, #48	; 0x30
 8007666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007668:	2302      	movs	r3, #2
 800766a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766c:	2300      	movs	r3, #0
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007670:	2300      	movs	r3, #0
 8007672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007674:	2302      	movs	r3, #2
 8007676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007678:	f107 031c 	add.w	r3, r7, #28
 800767c:	4619      	mov	r1, r3
 800767e:	483f      	ldr	r0, [pc, #252]	; (800777c <HAL_TIM_MspPostInit+0x1a0>)
 8007680:	f003 fc4e 	bl	800af20 <HAL_GPIO_Init>
}
 8007684:	e06d      	b.n	8007762 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3d      	ldr	r2, [pc, #244]	; (8007780 <HAL_TIM_MspPostInit+0x1a4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d11f      	bne.n	80076d0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007690:	2300      	movs	r3, #0
 8007692:	613b      	str	r3, [r7, #16]
 8007694:	4b36      	ldr	r3, [pc, #216]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 8007696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007698:	4a35      	ldr	r2, [pc, #212]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 800769a:	f043 0308 	orr.w	r3, r3, #8
 800769e:	6313      	str	r3, [r2, #48]	; 0x30
 80076a0:	4b33      	ldr	r3, [pc, #204]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 80076a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a4:	f003 0308 	and.w	r3, r3, #8
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80076ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80076b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b2:	2302      	movs	r3, #2
 80076b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076ba:	2300      	movs	r3, #0
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80076be:	2302      	movs	r3, #2
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076c2:	f107 031c 	add.w	r3, r7, #28
 80076c6:	4619      	mov	r1, r3
 80076c8:	482e      	ldr	r0, [pc, #184]	; (8007784 <HAL_TIM_MspPostInit+0x1a8>)
 80076ca:	f003 fc29 	bl	800af20 <HAL_GPIO_Init>
}
 80076ce:	e048      	b.n	8007762 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2c      	ldr	r2, [pc, #176]	; (8007788 <HAL_TIM_MspPostInit+0x1ac>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d11f      	bne.n	800771a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 80076e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e2:	4a23      	ldr	r2, [pc, #140]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 80076e4:	f043 0302 	orr.w	r3, r3, #2
 80076e8:	6313      	str	r3, [r2, #48]	; 0x30
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	60fb      	str	r3, [r7, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80076f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076fc:	2302      	movs	r3, #2
 80076fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007700:	2300      	movs	r3, #0
 8007702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007704:	2300      	movs	r3, #0
 8007706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007708:	2303      	movs	r3, #3
 800770a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800770c:	f107 031c 	add.w	r3, r7, #28
 8007710:	4619      	mov	r1, r3
 8007712:	481a      	ldr	r0, [pc, #104]	; (800777c <HAL_TIM_MspPostInit+0x1a0>)
 8007714:	f003 fc04 	bl	800af20 <HAL_GPIO_Init>
}
 8007718:	e023      	b.n	8007762 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1b      	ldr	r2, [pc, #108]	; (800778c <HAL_TIM_MspPostInit+0x1b0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d11e      	bne.n	8007762 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007724:	2300      	movs	r3, #0
 8007726:	60bb      	str	r3, [r7, #8]
 8007728:	4b11      	ldr	r3, [pc, #68]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	4a10      	ldr	r2, [pc, #64]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 800772e:	f043 0302 	orr.w	r3, r3, #2
 8007732:	6313      	str	r3, [r2, #48]	; 0x30
 8007734:	4b0e      	ldr	r3, [pc, #56]	; (8007770 <HAL_TIM_MspPostInit+0x194>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007746:	2302      	movs	r3, #2
 8007748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774a:	2300      	movs	r3, #0
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800774e:	2300      	movs	r3, #0
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007752:	2303      	movs	r3, #3
 8007754:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007756:	f107 031c 	add.w	r3, r7, #28
 800775a:	4619      	mov	r1, r3
 800775c:	4807      	ldr	r0, [pc, #28]	; (800777c <HAL_TIM_MspPostInit+0x1a0>)
 800775e:	f003 fbdf 	bl	800af20 <HAL_GPIO_Init>
}
 8007762:	bf00      	nop
 8007764:	3730      	adds	r7, #48	; 0x30
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40010000 	.word	0x40010000
 8007770:	40023800 	.word	0x40023800
 8007774:	40021000 	.word	0x40021000
 8007778:	40000400 	.word	0x40000400
 800777c:	40020400 	.word	0x40020400
 8007780:	40000800 	.word	0x40000800
 8007784:	40020c00 	.word	0x40020c00
 8007788:	40014400 	.word	0x40014400
 800778c:	40014800 	.word	0x40014800

08007790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08a      	sub	sp, #40	; 0x28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007798:	f107 0314 	add.w	r3, r7, #20
 800779c:	2200      	movs	r2, #0
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	609a      	str	r2, [r3, #8]
 80077a4:	60da      	str	r2, [r3, #12]
 80077a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a19      	ldr	r2, [pc, #100]	; (8007814 <HAL_UART_MspInit+0x84>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d12b      	bne.n	800780a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80077b2:	2300      	movs	r3, #0
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	4b18      	ldr	r3, [pc, #96]	; (8007818 <HAL_UART_MspInit+0x88>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	4a17      	ldr	r2, [pc, #92]	; (8007818 <HAL_UART_MspInit+0x88>)
 80077bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077c0:	6413      	str	r3, [r2, #64]	; 0x40
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <HAL_UART_MspInit+0x88>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <HAL_UART_MspInit+0x88>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <HAL_UART_MspInit+0x88>)
 80077d8:	f043 0308 	orr.w	r3, r3, #8
 80077dc:	6313      	str	r3, [r2, #48]	; 0x30
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <HAL_UART_MspInit+0x88>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80077ea:	2360      	movs	r3, #96	; 0x60
 80077ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ee:	2302      	movs	r3, #2
 80077f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f6:	2303      	movs	r3, #3
 80077f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80077fa:	2307      	movs	r3, #7
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077fe:	f107 0314 	add.w	r3, r7, #20
 8007802:	4619      	mov	r1, r3
 8007804:	4805      	ldr	r0, [pc, #20]	; (800781c <HAL_UART_MspInit+0x8c>)
 8007806:	f003 fb8b 	bl	800af20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800780a:	bf00      	nop
 800780c:	3728      	adds	r7, #40	; 0x28
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40004400 	.word	0x40004400
 8007818:	40023800 	.word	0x40023800
 800781c:	40020c00 	.word	0x40020c00

08007820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007824:	e7fe      	b.n	8007824 <NMI_Handler+0x4>

08007826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007826:	b480      	push	{r7}
 8007828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800782a:	e7fe      	b.n	800782a <HardFault_Handler+0x4>

0800782c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007830:	e7fe      	b.n	8007830 <MemManage_Handler+0x4>

08007832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007832:	b480      	push	{r7}
 8007834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007836:	e7fe      	b.n	8007836 <BusFault_Handler+0x4>

08007838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800783c:	e7fe      	b.n	800783c <UsageFault_Handler+0x4>

0800783e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800783e:	b480      	push	{r7}
 8007840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007842:	bf00      	nop
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007850:	bf00      	nop
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800785a:	b480      	push	{r7}
 800785c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800785e:	bf00      	nop
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800786c:	f002 fa64 	bl	8009d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007870:	bf00      	nop
 8007872:	bd80      	pop	{r7, pc}

08007874 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007878:	4803      	ldr	r0, [pc, #12]	; (8007888 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800787a:	f007 fd34 	bl	800f2e6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800787e:	4803      	ldr	r0, [pc, #12]	; (800788c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007880:	f007 fd31 	bl	800f2e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007884:	bf00      	nop
 8007886:	bd80      	pop	{r7, pc}
 8007888:	200446d0 	.word	0x200446d0
 800788c:	200448cc 	.word	0x200448cc

08007890 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007894:	4802      	ldr	r0, [pc, #8]	; (80078a0 <SDIO_IRQHandler+0x10>)
 8007896:	f005 fdcd 	bl	800d434 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20044a2c 	.word	0x20044a2c

080078a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80078a8:	4802      	ldr	r0, [pc, #8]	; (80078b4 <TIM6_DAC_IRQHandler+0x10>)
 80078aa:	f007 fd1c 	bl	800f2e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	200449ac 	.word	0x200449ac

080078b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80078bc:	4802      	ldr	r0, [pc, #8]	; (80078c8 <TIM7_IRQHandler+0x10>)
 80078be:	f007 fd12 	bl	800f2e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80078c2:	bf00      	nop
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20044b50 	.word	0x20044b50

080078cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80078d0:	4802      	ldr	r0, [pc, #8]	; (80078dc <DMA2_Stream2_IRQHandler+0x10>)
 80078d2:	f003 f8b1 	bl	800aa38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80078d6:	bf00      	nop
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20044af0 	.word	0x20044af0

080078e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80078e4:	4802      	ldr	r0, [pc, #8]	; (80078f0 <DMA2_Stream3_IRQHandler+0x10>)
 80078e6:	f003 f8a7 	bl	800aa38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80078ea:	bf00      	nop
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20044618 	.word	0x20044618

080078f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80078f8:	4802      	ldr	r0, [pc, #8]	; (8007904 <DMA2_Stream6_IRQHandler+0x10>)
 80078fa:	f003 f89d 	bl	800aa38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80078fe:	bf00      	nop
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	2004494c 	.word	0x2004494c

08007908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007910:	4a14      	ldr	r2, [pc, #80]	; (8007964 <_sbrk+0x5c>)
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <_sbrk+0x60>)
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800791c:	4b13      	ldr	r3, [pc, #76]	; (800796c <_sbrk+0x64>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d102      	bne.n	800792a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007924:	4b11      	ldr	r3, [pc, #68]	; (800796c <_sbrk+0x64>)
 8007926:	4a12      	ldr	r2, [pc, #72]	; (8007970 <_sbrk+0x68>)
 8007928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800792a:	4b10      	ldr	r3, [pc, #64]	; (800796c <_sbrk+0x64>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4413      	add	r3, r2
 8007932:	693a      	ldr	r2, [r7, #16]
 8007934:	429a      	cmp	r2, r3
 8007936:	d207      	bcs.n	8007948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007938:	f00d ff68 	bl	801580c <__errno>
 800793c:	4602      	mov	r2, r0
 800793e:	230c      	movs	r3, #12
 8007940:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007942:	f04f 33ff 	mov.w	r3, #4294967295
 8007946:	e009      	b.n	800795c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007948:	4b08      	ldr	r3, [pc, #32]	; (800796c <_sbrk+0x64>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800794e:	4b07      	ldr	r3, [pc, #28]	; (800796c <_sbrk+0x64>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	4a05      	ldr	r2, [pc, #20]	; (800796c <_sbrk+0x64>)
 8007958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800795a:	68fb      	ldr	r3, [r7, #12]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20050000 	.word	0x20050000
 8007968:	00000800 	.word	0x00000800
 800796c:	200002bc 	.word	0x200002bc
 8007970:	20046ca0 	.word	0x20046ca0

08007974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <SystemInit+0x28>)
 800797a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800797e:	4a07      	ldr	r2, [pc, #28]	; (800799c <SystemInit+0x28>)
 8007980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007988:	4b04      	ldr	r3, [pc, #16]	; (800799c <SystemInit+0x28>)
 800798a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800798e:	609a      	str	r2, [r3, #8]
#endif
}
 8007990:	bf00      	nop
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	e000ed00 	.word	0xe000ed00

080079a0 <cppInit>:
		}
	}
}

void cppInit(void)
{
 80079a0:	b598      	push	{r3, r4, r7, lr}
 80079a2:	af00      	add	r7, sp, #0
	lcd_init();
 80079a4:	f7f9 fb38 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80079a8:	483b      	ldr	r0, [pc, #236]	; (8007a98 <cppInit+0xf8>)
 80079aa:	f7fd fcb3 	bl	8005314 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80079ae:	2064      	movs	r0, #100	; 0x64
 80079b0:	f002 f9e2 	bl	8009d78 <HAL_Delay>
	power_sensor.updateValues();
 80079b4:	4838      	ldr	r0, [pc, #224]	; (8007a98 <cppInit+0xf8>)
 80079b6:	f7fd fcbb 	bl	8005330 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80079ba:	f7f9 fb71 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80079be:	2100      	movs	r1, #0
 80079c0:	2000      	movs	r0, #0
 80079c2:	f7f9 fb7d 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80079c6:	4835      	ldr	r0, [pc, #212]	; (8007a9c <cppInit+0xfc>)
 80079c8:	f7f9 fba4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80079cc:	2101      	movs	r1, #1
 80079ce:	2000      	movs	r0, #0
 80079d0:	f7f9 fb76 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80079d4:	4830      	ldr	r0, [pc, #192]	; (8007a98 <cppInit+0xf8>)
 80079d6:	f7fd fcd5 	bl	8005384 <_ZN11PowerSensor17getButteryVoltageEv>
 80079da:	ee10 3a10 	vmov	r3, s0
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f8 fdca 	bl	8000578 <__aeabi_f2d>
 80079e4:	4603      	mov	r3, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	461a      	mov	r2, r3
 80079ea:	4623      	mov	r3, r4
 80079ec:	482c      	ldr	r0, [pc, #176]	; (8007aa0 <cppInit+0x100>)
 80079ee:	f7f9 fb91 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80079f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079f6:	f002 f9bf 	bl	8009d78 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80079fa:	482a      	ldr	r0, [pc, #168]	; (8007aa4 <cppInit+0x104>)
 80079fc:	f7fc feae 	bl	800475c <_ZN6Logger10sdCardInitEv>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <cppInit+0x76>
		led.fullColor('G');
 8007a06:	2147      	movs	r1, #71	; 0x47
 8007a08:	4827      	ldr	r0, [pc, #156]	; (8007aa8 <cppInit+0x108>)
 8007a0a:	f7fa fc23 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007a0e:	2064      	movs	r0, #100	; 0x64
 8007a10:	f002 f9b2 	bl	8009d78 <HAL_Delay>
 8007a14:	e006      	b.n	8007a24 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007a16:	2152      	movs	r1, #82	; 0x52
 8007a18:	4823      	ldr	r0, [pc, #140]	; (8007aa8 <cppInit+0x108>)
 8007a1a:	f7fa fc1b 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007a1e:	2064      	movs	r0, #100	; 0x64
 8007a20:	f002 f9aa 	bl	8009d78 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007a24:	4821      	ldr	r0, [pc, #132]	; (8007aac <cppInit+0x10c>)
 8007a26:	f7fa fd71 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007a2a:	4821      	ldr	r0, [pc, #132]	; (8007ab0 <cppInit+0x110>)
 8007a2c:	f7fd f92c 	bl	8004c88 <_ZN5Motor4initEv>
	encoder.init();
 8007a30:	4820      	ldr	r0, [pc, #128]	; (8007ab4 <cppInit+0x114>)
 8007a32:	f7f9 fcf7 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007a36:	4820      	ldr	r0, [pc, #128]	; (8007ab8 <cppInit+0x118>)
 8007a38:	f7fa f9ba 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 8007a3c:	481f      	ldr	r0, [pc, #124]	; (8007abc <cppInit+0x11c>)
 8007a3e:	f7fb ffc3 	bl	80039c8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007a42:	481a      	ldr	r0, [pc, #104]	; (8007aac <cppInit+0x10c>)
 8007a44:	f7fa fec2 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a4c:	f002 f994 	bl	8009d78 <HAL_Delay>

	led.fullColor('M');
 8007a50:	214d      	movs	r1, #77	; 0x4d
 8007a52:	4815      	ldr	r0, [pc, #84]	; (8007aa8 <cppInit+0x108>)
 8007a54:	f7fa fbfe 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007a58:	4817      	ldr	r0, [pc, #92]	; (8007ab8 <cppInit+0x118>)
 8007a5a:	f7fa fa83 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007a5e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007ac0 <cppInit+0x120>
 8007a62:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007ac4 <cppInit+0x124>
 8007a66:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007ac8 <cppInit+0x128>
 8007a6a:	4818      	ldr	r0, [pc, #96]	; (8007acc <cppInit+0x12c>)
 8007a6c:	f7fe f9dc 	bl	8005e28 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007a70:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007ad0 <cppInit+0x130>
 8007a74:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007ad4 <cppInit+0x134>
 8007a78:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007ad8 <cppInit+0x138>
 8007a7c:	4813      	ldr	r0, [pc, #76]	; (8007acc <cppInit+0x12c>)
 8007a7e:	f7fe f9ec 	bl	8005e5a <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007a82:	4816      	ldr	r0, [pc, #88]	; (8007adc <cppInit+0x13c>)
 8007a84:	f7fd fb50 	bl	8005128 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007a88:	4815      	ldr	r0, [pc, #84]	; (8007ae0 <cppInit+0x140>)
 8007a8a:	f7fd fbe7 	bl	800525c <_ZN13PathFollowing4initEv>

	esc.init();
 8007a8e:	4815      	ldr	r0, [pc, #84]	; (8007ae4 <cppInit+0x144>)
 8007a90:	f7f9 fbac 	bl	80011ec <_ZN3ESC4initEv>

}
 8007a94:	bf00      	nop
 8007a96:	bd98      	pop	{r3, r4, r7, pc}
 8007a98:	200005d4 	.word	0x200005d4
 8007a9c:	08019e44 	.word	0x08019e44
 8007aa0:	08019e4c 	.word	0x08019e4c
 8007aa4:	200005f4 	.word	0x200005f4
 8007aa8:	200005d0 	.word	0x200005d0
 8007aac:	200002c0 	.word	0x200002c0
 8007ab0:	200005cc 	.word	0x200005cc
 8007ab4:	2001dac0 	.word	0x2001dac0
 8007ab8:	200005e0 	.word	0x200005e0
 8007abc:	2001db64 	.word	0x2001db64
 8007ac0:	3a8439b6 	.word	0x3a8439b6
 8007ac4:	40d1a29c 	.word	0x40d1a29c
 8007ac8:	3f81f8a1 	.word	0x3f81f8a1
 8007acc:	2001dae0 	.word	0x2001dae0
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	3f5e3fbc 	.word	0x3f5e3fbc
 8007ad8:	3d75c28f 	.word	0x3d75c28f
 8007adc:	2001db20 	.word	0x2001db20
 8007ae0:	2002ab18 	.word	0x2002ab18
 8007ae4:	2001db60 	.word	0x2001db60

08007ae8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007aec:	480e      	ldr	r0, [pc, #56]	; (8007b28 <cppFlip1ms+0x40>)
 8007aee:	f7fa fd6b 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007af2:	480e      	ldr	r0, [pc, #56]	; (8007b2c <cppFlip1ms+0x44>)
 8007af4:	f7fa f984 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007af8:	480d      	ldr	r0, [pc, #52]	; (8007b30 <cppFlip1ms+0x48>)
 8007afa:	f7f9 fcb5 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007afe:	480d      	ldr	r0, [pc, #52]	; (8007b34 <cppFlip1ms+0x4c>)
 8007b00:	f7fc fa08 	bl	8003f14 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007b04:	480c      	ldr	r0, [pc, #48]	; (8007b38 <cppFlip1ms+0x50>)
 8007b06:	f7fe f9c1 	bl	8005e8c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007b0a:	480c      	ldr	r0, [pc, #48]	; (8007b3c <cppFlip1ms+0x54>)
 8007b0c:	f7fd faf0 	bl	80050f0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007b10:	480b      	ldr	r0, [pc, #44]	; (8007b40 <cppFlip1ms+0x58>)
 8007b12:	f7fd fcb3 	bl	800547c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007b16:	480b      	ldr	r0, [pc, #44]	; (8007b44 <cppFlip1ms+0x5c>)
 8007b18:	f7fd f8c8 	bl	8004cac <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007b1c:	4804      	ldr	r0, [pc, #16]	; (8007b30 <cppFlip1ms+0x48>)
 8007b1e:	f7f9 fd8d 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007b22:	bf00      	nop
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	200002c0 	.word	0x200002c0
 8007b2c:	200005e0 	.word	0x200005e0
 8007b30:	2001dac0 	.word	0x2001dac0
 8007b34:	2001db64 	.word	0x2001db64
 8007b38:	2001dae0 	.word	0x2001dae0
 8007b3c:	2001db20 	.word	0x2001db20
 8007b40:	200005b8 	.word	0x200005b8
 8007b44:	200005cc 	.word	0x200005cc

08007b48 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007b4c:	4802      	ldr	r0, [pc, #8]	; (8007b58 <cppFlip100ns+0x10>)
 8007b4e:	f7fa fced 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007b52:	bf00      	nop
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	200002c0 	.word	0x200002c0

08007b5c <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <cppFlip10ms+0x48>)
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	3301      	adds	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	4b0e      	ldr	r3, [pc, #56]	; (8007ba4 <cppFlip10ms+0x48>)
 8007b6a:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <cppFlip10ms+0x48>)
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d905      	bls.n	8007b80 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007b74:	480c      	ldr	r0, [pc, #48]	; (8007ba8 <cppFlip10ms+0x4c>)
 8007b76:	f7fd ffa7 	bl	8005ac8 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <cppFlip10ms+0x48>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007b80:	480a      	ldr	r0, [pc, #40]	; (8007bac <cppFlip10ms+0x50>)
 8007b82:	f7fd f955 	bl	8004e30 <_ZN5Motor20getLeftCounterPeriodEv>
 8007b86:	4603      	mov	r3, r0
 8007b88:	4619      	mov	r1, r3
 8007b8a:	4809      	ldr	r0, [pc, #36]	; (8007bb0 <cppFlip10ms+0x54>)
 8007b8c:	f7fc fe2e 	bl	80047ec <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007b90:	4806      	ldr	r0, [pc, #24]	; (8007bac <cppFlip10ms+0x50>)
 8007b92:	f7fd f95a 	bl	8004e4a <_ZN5Motor21getRightCounterPeriodEv>
 8007b96:	4603      	mov	r3, r0
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4805      	ldr	r0, [pc, #20]	; (8007bb0 <cppFlip10ms+0x54>)
 8007b9c:	f7fc fe5f 	bl	800485e <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007ba0:	bf00      	nop
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	20042240 	.word	0x20042240
 8007ba8:	2002a90c 	.word	0x2002a90c
 8007bac:	200005cc 	.word	0x200005cc
 8007bb0:	200005f4 	.word	0x200005f4
 8007bb4:	00000000 	.word	0x00000000

08007bb8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007bbe:	4baf      	ldr	r3, [pc, #700]	; (8007e7c <cppLoop+0x2c4>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f3bf 8f5b 	dmb	ish
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0301 	and.w	r3, r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d015      	beq.n	8007c06 <cppLoop+0x4e>
 8007bda:	48a8      	ldr	r0, [pc, #672]	; (8007e7c <cppLoop+0x2c4>)
 8007bdc:	f00c fdb1 	bl	8014742 <__cxa_guard_acquire>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf14      	ite	ne
 8007be6:	2301      	movne	r3, #1
 8007be8:	2300      	moveq	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00a      	beq.n	8007c06 <cppLoop+0x4e>
 8007bf0:	48a3      	ldr	r0, [pc, #652]	; (8007e80 <cppLoop+0x2c8>)
 8007bf2:	f7fb fff0 	bl	8003bd6 <_ZN9LineTrace5getKpEv>
 8007bf6:	eef0 7a40 	vmov.f32	s15, s0
 8007bfa:	4ba2      	ldr	r3, [pc, #648]	; (8007e84 <cppLoop+0x2cc>)
 8007bfc:	edc3 7a00 	vstr	s15, [r3]
 8007c00:	489e      	ldr	r0, [pc, #632]	; (8007e7c <cppLoop+0x2c4>)
 8007c02:	f00c fdaa 	bl	801475a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007c06:	4ba0      	ldr	r3, [pc, #640]	; (8007e88 <cppLoop+0x2d0>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	f3bf 8f5b 	dmb	ish
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bf0c      	ite	eq
 8007c18:	2301      	moveq	r3, #1
 8007c1a:	2300      	movne	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d015      	beq.n	8007c4e <cppLoop+0x96>
 8007c22:	4899      	ldr	r0, [pc, #612]	; (8007e88 <cppLoop+0x2d0>)
 8007c24:	f00c fd8d 	bl	8014742 <__cxa_guard_acquire>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <cppLoop+0x96>
 8007c38:	4891      	ldr	r0, [pc, #580]	; (8007e80 <cppLoop+0x2c8>)
 8007c3a:	f7fb ffdb 	bl	8003bf4 <_ZN9LineTrace5getKiEv>
 8007c3e:	eef0 7a40 	vmov.f32	s15, s0
 8007c42:	4b92      	ldr	r3, [pc, #584]	; (8007e8c <cppLoop+0x2d4>)
 8007c44:	edc3 7a00 	vstr	s15, [r3]
 8007c48:	488f      	ldr	r0, [pc, #572]	; (8007e88 <cppLoop+0x2d0>)
 8007c4a:	f00c fd86 	bl	801475a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007c4e:	4b90      	ldr	r3, [pc, #576]	; (8007e90 <cppLoop+0x2d8>)
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	f3bf 8f5b 	dmb	ish
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bf0c      	ite	eq
 8007c60:	2301      	moveq	r3, #1
 8007c62:	2300      	movne	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d015      	beq.n	8007c96 <cppLoop+0xde>
 8007c6a:	4889      	ldr	r0, [pc, #548]	; (8007e90 <cppLoop+0x2d8>)
 8007c6c:	f00c fd69 	bl	8014742 <__cxa_guard_acquire>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bf14      	ite	ne
 8007c76:	2301      	movne	r3, #1
 8007c78:	2300      	moveq	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <cppLoop+0xde>
 8007c80:	487f      	ldr	r0, [pc, #508]	; (8007e80 <cppLoop+0x2c8>)
 8007c82:	f7fb ffc6 	bl	8003c12 <_ZN9LineTrace5getKdEv>
 8007c86:	eef0 7a40 	vmov.f32	s15, s0
 8007c8a:	4b82      	ldr	r3, [pc, #520]	; (8007e94 <cppLoop+0x2dc>)
 8007c8c:	edc3 7a00 	vstr	s15, [r3]
 8007c90:	487f      	ldr	r0, [pc, #508]	; (8007e90 <cppLoop+0x2d8>)
 8007c92:	f00c fd62 	bl	801475a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007c96:	4b80      	ldr	r3, [pc, #512]	; (8007e98 <cppLoop+0x2e0>)
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	f3bf 8f5b 	dmb	ish
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	bf0c      	ite	eq
 8007ca8:	2301      	moveq	r3, #1
 8007caa:	2300      	movne	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d015      	beq.n	8007cde <cppLoop+0x126>
 8007cb2:	4879      	ldr	r0, [pc, #484]	; (8007e98 <cppLoop+0x2e0>)
 8007cb4:	f00c fd45 	bl	8014742 <__cxa_guard_acquire>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	bf14      	ite	ne
 8007cbe:	2301      	movne	r3, #1
 8007cc0:	2300      	moveq	r3, #0
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00a      	beq.n	8007cde <cppLoop+0x126>
 8007cc8:	486d      	ldr	r0, [pc, #436]	; (8007e80 <cppLoop+0x2c8>)
 8007cca:	f7fb ffca 	bl	8003c62 <_ZN9LineTrace9getKpSlowEv>
 8007cce:	eef0 7a40 	vmov.f32	s15, s0
 8007cd2:	4b72      	ldr	r3, [pc, #456]	; (8007e9c <cppLoop+0x2e4>)
 8007cd4:	edc3 7a00 	vstr	s15, [r3]
 8007cd8:	486f      	ldr	r0, [pc, #444]	; (8007e98 <cppLoop+0x2e0>)
 8007cda:	f00c fd3e 	bl	801475a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007cde:	4b70      	ldr	r3, [pc, #448]	; (8007ea0 <cppLoop+0x2e8>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	f3bf 8f5b 	dmb	ish
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	f003 0301 	and.w	r3, r3, #1
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d015      	beq.n	8007d26 <cppLoop+0x16e>
 8007cfa:	4869      	ldr	r0, [pc, #420]	; (8007ea0 <cppLoop+0x2e8>)
 8007cfc:	f00c fd21 	bl	8014742 <__cxa_guard_acquire>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	bf14      	ite	ne
 8007d06:	2301      	movne	r3, #1
 8007d08:	2300      	moveq	r3, #0
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00a      	beq.n	8007d26 <cppLoop+0x16e>
 8007d10:	485b      	ldr	r0, [pc, #364]	; (8007e80 <cppLoop+0x2c8>)
 8007d12:	f7fb ffb5 	bl	8003c80 <_ZN9LineTrace9getKiSlowEv>
 8007d16:	eef0 7a40 	vmov.f32	s15, s0
 8007d1a:	4b62      	ldr	r3, [pc, #392]	; (8007ea4 <cppLoop+0x2ec>)
 8007d1c:	edc3 7a00 	vstr	s15, [r3]
 8007d20:	485f      	ldr	r0, [pc, #380]	; (8007ea0 <cppLoop+0x2e8>)
 8007d22:	f00c fd1a 	bl	801475a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007d26:	4b60      	ldr	r3, [pc, #384]	; (8007ea8 <cppLoop+0x2f0>)
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	f3bf 8f5b 	dmb	ish
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	bf0c      	ite	eq
 8007d38:	2301      	moveq	r3, #1
 8007d3a:	2300      	movne	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d015      	beq.n	8007d6e <cppLoop+0x1b6>
 8007d42:	4859      	ldr	r0, [pc, #356]	; (8007ea8 <cppLoop+0x2f0>)
 8007d44:	f00c fcfd 	bl	8014742 <__cxa_guard_acquire>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	bf14      	ite	ne
 8007d4e:	2301      	movne	r3, #1
 8007d50:	2300      	moveq	r3, #0
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00a      	beq.n	8007d6e <cppLoop+0x1b6>
 8007d58:	4849      	ldr	r0, [pc, #292]	; (8007e80 <cppLoop+0x2c8>)
 8007d5a:	f7fb ffa0 	bl	8003c9e <_ZN9LineTrace9getKdSlowEv>
 8007d5e:	eef0 7a40 	vmov.f32	s15, s0
 8007d62:	4b52      	ldr	r3, [pc, #328]	; (8007eac <cppLoop+0x2f4>)
 8007d64:	edc3 7a00 	vstr	s15, [r3]
 8007d68:	484f      	ldr	r0, [pc, #316]	; (8007ea8 <cppLoop+0x2f0>)
 8007d6a:	f00c fcf6 	bl	801475a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007d6e:	4b50      	ldr	r3, [pc, #320]	; (8007eb0 <cppLoop+0x2f8>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	f3bf 8f5b 	dmb	ish
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	bf0c      	ite	eq
 8007d80:	2301      	moveq	r3, #1
 8007d82:	2300      	movne	r3, #0
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d015      	beq.n	8007db6 <cppLoop+0x1fe>
 8007d8a:	4849      	ldr	r0, [pc, #292]	; (8007eb0 <cppLoop+0x2f8>)
 8007d8c:	f00c fcd9 	bl	8014742 <__cxa_guard_acquire>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	bf14      	ite	ne
 8007d96:	2301      	movne	r3, #1
 8007d98:	2300      	moveq	r3, #0
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <cppLoop+0x1fe>
 8007da0:	4837      	ldr	r0, [pc, #220]	; (8007e80 <cppLoop+0x2c8>)
 8007da2:	f7fb ffea 	bl	8003d7a <_ZN9LineTrace17getTargetVelocityEv>
 8007da6:	eef0 7a40 	vmov.f32	s15, s0
 8007daa:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <cppLoop+0x2fc>)
 8007dac:	edc3 7a00 	vstr	s15, [r3]
 8007db0:	483f      	ldr	r0, [pc, #252]	; (8007eb0 <cppLoop+0x2f8>)
 8007db2:	f00c fcd2 	bl	801475a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007db6:	4b40      	ldr	r3, [pc, #256]	; (8007eb8 <cppLoop+0x300>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	f3bf 8f5b 	dmb	ish
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2301      	moveq	r3, #1
 8007dca:	2300      	movne	r3, #0
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d015      	beq.n	8007dfe <cppLoop+0x246>
 8007dd2:	4839      	ldr	r0, [pc, #228]	; (8007eb8 <cppLoop+0x300>)
 8007dd4:	f00c fcb5 	bl	8014742 <__cxa_guard_acquire>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf14      	ite	ne
 8007dde:	2301      	movne	r3, #1
 8007de0:	2300      	moveq	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00a      	beq.n	8007dfe <cppLoop+0x246>
 8007de8:	4825      	ldr	r0, [pc, #148]	; (8007e80 <cppLoop+0x2c8>)
 8007dea:	f7fb ffd6 	bl	8003d9a <_ZN9LineTrace14getMaxVelocityEv>
 8007dee:	eef0 7a40 	vmov.f32	s15, s0
 8007df2:	4b32      	ldr	r3, [pc, #200]	; (8007ebc <cppLoop+0x304>)
 8007df4:	edc3 7a00 	vstr	s15, [r3]
 8007df8:	482f      	ldr	r0, [pc, #188]	; (8007eb8 <cppLoop+0x300>)
 8007dfa:	f00c fcae 	bl	801475a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007dfe:	4b30      	ldr	r3, [pc, #192]	; (8007ec0 <cppLoop+0x308>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	f3bf 8f5b 	dmb	ish
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d015      	beq.n	8007e46 <cppLoop+0x28e>
 8007e1a:	4829      	ldr	r0, [pc, #164]	; (8007ec0 <cppLoop+0x308>)
 8007e1c:	f00c fc91 	bl	8014742 <__cxa_guard_acquire>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bf14      	ite	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <cppLoop+0x28e>
 8007e30:	4813      	ldr	r0, [pc, #76]	; (8007e80 <cppLoop+0x2c8>)
 8007e32:	f7fb ffc2 	bl	8003dba <_ZN9LineTrace15getMaxVelocity2Ev>
 8007e36:	eef0 7a40 	vmov.f32	s15, s0
 8007e3a:	4b22      	ldr	r3, [pc, #136]	; (8007ec4 <cppLoop+0x30c>)
 8007e3c:	edc3 7a00 	vstr	s15, [r3]
 8007e40:	481f      	ldr	r0, [pc, #124]	; (8007ec0 <cppLoop+0x308>)
 8007e42:	f00c fc8a 	bl	801475a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007e46:	4b20      	ldr	r3, [pc, #128]	; (8007ec8 <cppLoop+0x310>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f3bf 8f5b 	dmb	ish
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bf0c      	ite	eq
 8007e58:	2301      	moveq	r3, #1
 8007e5a:	2300      	movne	r3, #0
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d03f      	beq.n	8007ee2 <cppLoop+0x32a>
 8007e62:	4819      	ldr	r0, [pc, #100]	; (8007ec8 <cppLoop+0x310>)
 8007e64:	f00c fc6d 	bl	8014742 <__cxa_guard_acquire>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	bf14      	ite	ne
 8007e6e:	2301      	movne	r3, #1
 8007e70:	2300      	moveq	r3, #0
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d034      	beq.n	8007ee2 <cppLoop+0x32a>
 8007e78:	e028      	b.n	8007ecc <cppLoop+0x314>
 8007e7a:	bf00      	nop
 8007e7c:	20042250 	.word	0x20042250
 8007e80:	2001db64 	.word	0x2001db64
 8007e84:	2004224c 	.word	0x2004224c
 8007e88:	20042258 	.word	0x20042258
 8007e8c:	20042254 	.word	0x20042254
 8007e90:	20042260 	.word	0x20042260
 8007e94:	2004225c 	.word	0x2004225c
 8007e98:	20042268 	.word	0x20042268
 8007e9c:	20042264 	.word	0x20042264
 8007ea0:	20042270 	.word	0x20042270
 8007ea4:	2004226c 	.word	0x2004226c
 8007ea8:	20042278 	.word	0x20042278
 8007eac:	20042274 	.word	0x20042274
 8007eb0:	20042280 	.word	0x20042280
 8007eb4:	2004227c 	.word	0x2004227c
 8007eb8:	20042288 	.word	0x20042288
 8007ebc:	20042284 	.word	0x20042284
 8007ec0:	20042290 	.word	0x20042290
 8007ec4:	2004228c 	.word	0x2004228c
 8007ec8:	20042298 	.word	0x20042298
 8007ecc:	48b6      	ldr	r0, [pc, #728]	; (80081a8 <cppLoop+0x5f0>)
 8007ece:	f7fb ff84 	bl	8003dda <_ZN9LineTrace14getMinVelocityEv>
 8007ed2:	eef0 7a40 	vmov.f32	s15, s0
 8007ed6:	4bb5      	ldr	r3, [pc, #724]	; (80081ac <cppLoop+0x5f4>)
 8007ed8:	edc3 7a00 	vstr	s15, [r3]
 8007edc:	48b4      	ldr	r0, [pc, #720]	; (80081b0 <cppLoop+0x5f8>)
 8007ede:	f00c fc3c 	bl	801475a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007ee2:	4bb4      	ldr	r3, [pc, #720]	; (80081b4 <cppLoop+0x5fc>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	f3bf 8f5b 	dmb	ish
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d015      	beq.n	8007f2a <cppLoop+0x372>
 8007efe:	48ad      	ldr	r0, [pc, #692]	; (80081b4 <cppLoop+0x5fc>)
 8007f00:	f00c fc1f 	bl	8014742 <__cxa_guard_acquire>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	bf14      	ite	ne
 8007f0a:	2301      	movne	r3, #1
 8007f0c:	2300      	moveq	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00a      	beq.n	8007f2a <cppLoop+0x372>
 8007f14:	48a4      	ldr	r0, [pc, #656]	; (80081a8 <cppLoop+0x5f0>)
 8007f16:	f7fb ff70 	bl	8003dfa <_ZN9LineTrace15getMinVelocity2Ev>
 8007f1a:	eef0 7a40 	vmov.f32	s15, s0
 8007f1e:	4ba6      	ldr	r3, [pc, #664]	; (80081b8 <cppLoop+0x600>)
 8007f20:	edc3 7a00 	vstr	s15, [r3]
 8007f24:	48a3      	ldr	r0, [pc, #652]	; (80081b4 <cppLoop+0x5fc>)
 8007f26:	f00c fc18 	bl	801475a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007f2a:	4ba4      	ldr	r3, [pc, #656]	; (80081bc <cppLoop+0x604>)
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	f3bf 8f5b 	dmb	ish
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	bf0c      	ite	eq
 8007f3c:	2301      	moveq	r3, #1
 8007f3e:	2300      	movne	r3, #0
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d015      	beq.n	8007f72 <cppLoop+0x3ba>
 8007f46:	489d      	ldr	r0, [pc, #628]	; (80081bc <cppLoop+0x604>)
 8007f48:	f00c fbfb 	bl	8014742 <__cxa_guard_acquire>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bf14      	ite	ne
 8007f52:	2301      	movne	r3, #1
 8007f54:	2300      	moveq	r3, #0
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <cppLoop+0x3ba>
 8007f5c:	4892      	ldr	r0, [pc, #584]	; (80081a8 <cppLoop+0x5f0>)
 8007f5e:	f7fb ff90 	bl	8003e82 <_ZN9LineTrace9getMaxAccEv>
 8007f62:	eef0 7a40 	vmov.f32	s15, s0
 8007f66:	4b96      	ldr	r3, [pc, #600]	; (80081c0 <cppLoop+0x608>)
 8007f68:	edc3 7a00 	vstr	s15, [r3]
 8007f6c:	4893      	ldr	r0, [pc, #588]	; (80081bc <cppLoop+0x604>)
 8007f6e:	f00c fbf4 	bl	801475a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007f72:	4b94      	ldr	r3, [pc, #592]	; (80081c4 <cppLoop+0x60c>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	f3bf 8f5b 	dmb	ish
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	f003 0301 	and.w	r3, r3, #1
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	bf0c      	ite	eq
 8007f84:	2301      	moveq	r3, #1
 8007f86:	2300      	movne	r3, #0
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d015      	beq.n	8007fba <cppLoop+0x402>
 8007f8e:	488d      	ldr	r0, [pc, #564]	; (80081c4 <cppLoop+0x60c>)
 8007f90:	f00c fbd7 	bl	8014742 <__cxa_guard_acquire>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	bf14      	ite	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	2300      	moveq	r3, #0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <cppLoop+0x402>
 8007fa4:	4880      	ldr	r0, [pc, #512]	; (80081a8 <cppLoop+0x5f0>)
 8007fa6:	f7fb ffa2 	bl	8003eee <_ZN9LineTrace9getMaxDecEv>
 8007faa:	eef0 7a40 	vmov.f32	s15, s0
 8007fae:	4b86      	ldr	r3, [pc, #536]	; (80081c8 <cppLoop+0x610>)
 8007fb0:	edc3 7a00 	vstr	s15, [r3]
 8007fb4:	4883      	ldr	r0, [pc, #524]	; (80081c4 <cppLoop+0x60c>)
 8007fb6:	f00c fbd0 	bl	801475a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007fba:	4b84      	ldr	r3, [pc, #528]	; (80081cc <cppLoop+0x614>)
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	f3bf 8f5b 	dmb	ish
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	bf0c      	ite	eq
 8007fcc:	2301      	moveq	r3, #1
 8007fce:	2300      	movne	r3, #0
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d015      	beq.n	8008002 <cppLoop+0x44a>
 8007fd6:	487d      	ldr	r0, [pc, #500]	; (80081cc <cppLoop+0x614>)
 8007fd8:	f00c fbb3 	bl	8014742 <__cxa_guard_acquire>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf14      	ite	ne
 8007fe2:	2301      	movne	r3, #1
 8007fe4:	2300      	moveq	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00a      	beq.n	8008002 <cppLoop+0x44a>
 8007fec:	486e      	ldr	r0, [pc, #440]	; (80081a8 <cppLoop+0x5f0>)
 8007fee:	f7fb ff6c 	bl	8003eca <_ZN9LineTrace10getMaxAcc2Ev>
 8007ff2:	eef0 7a40 	vmov.f32	s15, s0
 8007ff6:	4b76      	ldr	r3, [pc, #472]	; (80081d0 <cppLoop+0x618>)
 8007ff8:	edc3 7a00 	vstr	s15, [r3]
 8007ffc:	4873      	ldr	r0, [pc, #460]	; (80081cc <cppLoop+0x614>)
 8007ffe:	f00c fbac 	bl	801475a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008002:	4b74      	ldr	r3, [pc, #464]	; (80081d4 <cppLoop+0x61c>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	f3bf 8f5b 	dmb	ish
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	bf0c      	ite	eq
 8008014:	2301      	moveq	r3, #1
 8008016:	2300      	movne	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d015      	beq.n	800804a <cppLoop+0x492>
 800801e:	486d      	ldr	r0, [pc, #436]	; (80081d4 <cppLoop+0x61c>)
 8008020:	f00c fb8f 	bl	8014742 <__cxa_guard_acquire>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	bf14      	ite	ne
 800802a:	2301      	movne	r3, #1
 800802c:	2300      	moveq	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00a      	beq.n	800804a <cppLoop+0x492>
 8008034:	485c      	ldr	r0, [pc, #368]	; (80081a8 <cppLoop+0x5f0>)
 8008036:	f7fb ff36 	bl	8003ea6 <_ZN9LineTrace10getMaxDec2Ev>
 800803a:	eef0 7a40 	vmov.f32	s15, s0
 800803e:	4b66      	ldr	r3, [pc, #408]	; (80081d8 <cppLoop+0x620>)
 8008040:	edc3 7a00 	vstr	s15, [r3]
 8008044:	4863      	ldr	r0, [pc, #396]	; (80081d4 <cppLoop+0x61c>)
 8008046:	f00c fb88 	bl	801475a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 800804a:	4864      	ldr	r0, [pc, #400]	; (80081dc <cppLoop+0x624>)
 800804c:	f7fd f9aa 	bl	80053a4 <_ZN12RotarySwitch8getValueEv>
 8008050:	4603      	mov	r3, r0
 8008052:	2b0f      	cmp	r3, #15
 8008054:	f201 8546 	bhi.w	8009ae4 <cppLoop+0x1f2c>
 8008058:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <cppLoop+0x4a8>)
 800805a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805e:	bf00      	nop
 8008060:	080080a1 	.word	0x080080a1
 8008064:	08008425 	.word	0x08008425
 8008068:	08008541 	.word	0x08008541
 800806c:	08008693 	.word	0x08008693
 8008070:	0800876d 	.word	0x0800876d
 8008074:	080089fd 	.word	0x080089fd
 8008078:	08008b39 	.word	0x08008b39
 800807c:	08008dbd 	.word	0x08008dbd
 8008080:	08009007 	.word	0x08009007
 8008084:	08009297 	.word	0x08009297
 8008088:	08009353 	.word	0x08009353
 800808c:	08009449 	.word	0x08009449
 8008090:	080094cf 	.word	0x080094cf
 8008094:	08009595 	.word	0x08009595
 8008098:	0800965b 	.word	0x0800965b
 800809c:	08009775 	.word	0x08009775
	case 0:
		led.fullColor('W');
 80080a0:	2157      	movs	r1, #87	; 0x57
 80080a2:	484f      	ldr	r0, [pc, #316]	; (80081e0 <cppLoop+0x628>)
 80080a4:	f7fa f8d6 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80080a8:	f7f8 fffa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80080ac:	2100      	movs	r1, #0
 80080ae:	2000      	movs	r0, #0
 80080b0:	f7f9 f806 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 80080b4:	483c      	ldr	r0, [pc, #240]	; (80081a8 <cppLoop+0x5f0>)
 80080b6:	f7fb fdd4 	bl	8003c62 <_ZN9LineTrace9getKpSlowEv>
 80080ba:	eeb0 7a40 	vmov.f32	s14, s0
 80080be:	eddf 7a49 	vldr	s15, [pc, #292]	; 80081e4 <cppLoop+0x62c>
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	eeb0 0a67 	vmov.f32	s0, s15
 80080ca:	f7fa fcef 	bl	8002aac <_ZSt3absf>
 80080ce:	ee10 3a10 	vmov	r3, s0
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f8 fa50 	bl	8000578 <__aeabi_f2d>
 80080d8:	4603      	mov	r3, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	461a      	mov	r2, r3
 80080de:	4623      	mov	r3, r4
 80080e0:	4841      	ldr	r0, [pc, #260]	; (80081e8 <cppLoop+0x630>)
 80080e2:	f7f9 f817 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080e6:	2101      	movs	r1, #1
 80080e8:	2000      	movs	r0, #0
 80080ea:	f7f8 ffe9 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 80080ee:	482e      	ldr	r0, [pc, #184]	; (80081a8 <cppLoop+0x5f0>)
 80080f0:	f7fb fdc6 	bl	8003c80 <_ZN9LineTrace9getKiSlowEv>
 80080f4:	eeb0 7a40 	vmov.f32	s14, s0
 80080f8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80081ec <cppLoop+0x634>
 80080fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008100:	eeb0 0a67 	vmov.f32	s0, s15
 8008104:	f7fa fcd2 	bl	8002aac <_ZSt3absf>
 8008108:	ee10 3a10 	vmov	r3, s0
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 fa33 	bl	8000578 <__aeabi_f2d>
 8008112:	4605      	mov	r5, r0
 8008114:	460e      	mov	r6, r1
 8008116:	4824      	ldr	r0, [pc, #144]	; (80081a8 <cppLoop+0x5f0>)
 8008118:	f7fb fdc1 	bl	8003c9e <_ZN9LineTrace9getKdSlowEv>
 800811c:	eeb0 7a40 	vmov.f32	s14, s0
 8008120:	eddf 7a33 	vldr	s15, [pc, #204]	; 80081f0 <cppLoop+0x638>
 8008124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008128:	eeb0 0a67 	vmov.f32	s0, s15
 800812c:	f7fa fcbe 	bl	8002aac <_ZSt3absf>
 8008130:	ee10 3a10 	vmov	r3, s0
 8008134:	4618      	mov	r0, r3
 8008136:	f7f8 fa1f 	bl	8000578 <__aeabi_f2d>
 800813a:	4603      	mov	r3, r0
 800813c:	460c      	mov	r4, r1
 800813e:	e9cd 3400 	strd	r3, r4, [sp]
 8008142:	462a      	mov	r2, r5
 8008144:	4633      	mov	r3, r6
 8008146:	482b      	ldr	r0, [pc, #172]	; (80081f4 <cppLoop+0x63c>)
 8008148:	f7f8 ffe4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800814c:	482a      	ldr	r0, [pc, #168]	; (80081f8 <cppLoop+0x640>)
 800814e:	f7fa f81d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008152:	4603      	mov	r3, r0
 8008154:	2b08      	cmp	r3, #8
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d04e      	beq.n	8008200 <cppLoop+0x648>
			led.LR(-1, 1);
 8008162:	2201      	movs	r2, #1
 8008164:	f04f 31ff 	mov.w	r1, #4294967295
 8008168:	481d      	ldr	r0, [pc, #116]	; (80081e0 <cppLoop+0x628>)
 800816a:	f7fa f92f 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800816e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008172:	f001 fe01 	bl	8009d78 <HAL_Delay>

			selector++;
 8008176:	4b21      	ldr	r3, [pc, #132]	; (80081fc <cppLoop+0x644>)
 8008178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800817c:	b29b      	uxth	r3, r3
 800817e:	3301      	adds	r3, #1
 8008180:	b29b      	uxth	r3, r3
 8008182:	b21a      	sxth	r2, r3
 8008184:	4b1d      	ldr	r3, [pc, #116]	; (80081fc <cppLoop+0x644>)
 8008186:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008188:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <cppLoop+0x644>)
 800818a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800818e:	2b02      	cmp	r3, #2
 8008190:	dd02      	ble.n	8008198 <cppLoop+0x5e0>
 8008192:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <cppLoop+0x644>)
 8008194:	2200      	movs	r2, #0
 8008196:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008198:	2200      	movs	r2, #0
 800819a:	f04f 31ff 	mov.w	r1, #4294967295
 800819e:	4810      	ldr	r0, [pc, #64]	; (80081e0 <cppLoop+0x628>)
 80081a0:	f7fa f914 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 80081a4:	f001 bca0 	b.w	8009ae8 <cppLoop+0x1f30>
 80081a8:	2001db64 	.word	0x2001db64
 80081ac:	20042294 	.word	0x20042294
 80081b0:	20042298 	.word	0x20042298
 80081b4:	200422a0 	.word	0x200422a0
 80081b8:	2004229c 	.word	0x2004229c
 80081bc:	200422a8 	.word	0x200422a8
 80081c0:	200422a4 	.word	0x200422a4
 80081c4:	200422b0 	.word	0x200422b0
 80081c8:	200422ac 	.word	0x200422ac
 80081cc:	200422b8 	.word	0x200422b8
 80081d0:	200422b4 	.word	0x200422b4
 80081d4:	200422c0 	.word	0x200422c0
 80081d8:	200422bc 	.word	0x200422bc
 80081dc:	200005c8 	.word	0x200005c8
 80081e0:	200005d0 	.word	0x200005d0
 80081e4:	447a0000 	.word	0x447a0000
 80081e8:	08019e50 	.word	0x08019e50
 80081ec:	42c80000 	.word	0x42c80000
 80081f0:	461c4000 	.word	0x461c4000
 80081f4:	08019e5c 	.word	0x08019e5c
 80081f8:	200005c4 	.word	0x200005c4
 80081fc:	20042242 	.word	0x20042242
		else if(joy_stick.getValue() == JOY_R){
 8008200:	48bd      	ldr	r0, [pc, #756]	; (80084f8 <cppLoop+0x940>)
 8008202:	f7f9 ffc3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008206:	4603      	mov	r3, r0
 8008208:	2b10      	cmp	r3, #16
 800820a:	bf0c      	ite	eq
 800820c:	2301      	moveq	r3, #1
 800820e:	2300      	movne	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	d059      	beq.n	80082ca <cppLoop+0x712>
			led.LR(-1, 1);
 8008216:	2201      	movs	r2, #1
 8008218:	f04f 31ff 	mov.w	r1, #4294967295
 800821c:	48b7      	ldr	r0, [pc, #732]	; (80084fc <cppLoop+0x944>)
 800821e:	f7fa f8d5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008222:	2064      	movs	r0, #100	; 0x64
 8008224:	f001 fda8 	bl	8009d78 <HAL_Delay>
			if(selector == 0){
 8008228:	4bb5      	ldr	r3, [pc, #724]	; (8008500 <cppLoop+0x948>)
 800822a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d113      	bne.n	800825a <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 8008232:	4bb4      	ldr	r3, [pc, #720]	; (8008504 <cppLoop+0x94c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4618      	mov	r0, r3
 8008238:	f7f8 f99e 	bl	8000578 <__aeabi_f2d>
 800823c:	a3a8      	add	r3, pc, #672	; (adr r3, 80084e0 <cppLoop+0x928>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f8 f83b 	bl	80002bc <__adddf3>
 8008246:	4603      	mov	r3, r0
 8008248:	460c      	mov	r4, r1
 800824a:	4618      	mov	r0, r3
 800824c:	4621      	mov	r1, r4
 800824e:	f7f8 fce3 	bl	8000c18 <__aeabi_d2f>
 8008252:	4602      	mov	r2, r0
 8008254:	4bab      	ldr	r3, [pc, #684]	; (8008504 <cppLoop+0x94c>)
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	e02b      	b.n	80082b2 <cppLoop+0x6fa>
			else if(selector == 1){
 800825a:	4ba9      	ldr	r3, [pc, #676]	; (8008500 <cppLoop+0x948>)
 800825c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d113      	bne.n	800828c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 8008264:	4ba8      	ldr	r3, [pc, #672]	; (8008508 <cppLoop+0x950>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f7f8 f985 	bl	8000578 <__aeabi_f2d>
 800826e:	a39e      	add	r3, pc, #632	; (adr r3, 80084e8 <cppLoop+0x930>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f8 f822 	bl	80002bc <__adddf3>
 8008278:	4603      	mov	r3, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4618      	mov	r0, r3
 800827e:	4621      	mov	r1, r4
 8008280:	f7f8 fcca 	bl	8000c18 <__aeabi_d2f>
 8008284:	4602      	mov	r2, r0
 8008286:	4ba0      	ldr	r3, [pc, #640]	; (8008508 <cppLoop+0x950>)
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	e012      	b.n	80082b2 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 800828c:	4b9f      	ldr	r3, [pc, #636]	; (800850c <cppLoop+0x954>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4618      	mov	r0, r3
 8008292:	f7f8 f971 	bl	8000578 <__aeabi_f2d>
 8008296:	a396      	add	r3, pc, #600	; (adr r3, 80084f0 <cppLoop+0x938>)
 8008298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800829c:	f7f8 f80e 	bl	80002bc <__adddf3>
 80082a0:	4603      	mov	r3, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	4618      	mov	r0, r3
 80082a6:	4621      	mov	r1, r4
 80082a8:	f7f8 fcb6 	bl	8000c18 <__aeabi_d2f>
 80082ac:	4602      	mov	r2, r0
 80082ae:	4b97      	ldr	r3, [pc, #604]	; (800850c <cppLoop+0x954>)
 80082b0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80082b2:	2152      	movs	r1, #82	; 0x52
 80082b4:	4891      	ldr	r0, [pc, #580]	; (80084fc <cppLoop+0x944>)
 80082b6:	f7f9 ffcd 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80082ba:	2200      	movs	r2, #0
 80082bc:	f04f 31ff 	mov.w	r1, #4294967295
 80082c0:	488e      	ldr	r0, [pc, #568]	; (80084fc <cppLoop+0x944>)
 80082c2:	f7fa f883 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80082c6:	f001 bc0f 	b.w	8009ae8 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 80082ca:	488b      	ldr	r0, [pc, #556]	; (80084f8 <cppLoop+0x940>)
 80082cc:	f7f9 ff5e 	bl	800218c <_ZN8JoyStick8getValueEv>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	bf0c      	ite	eq
 80082d6:	2301      	moveq	r3, #1
 80082d8:	2300      	movne	r3, #0
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d059      	beq.n	8008394 <cppLoop+0x7dc>
			led.LR(-1, 1);
 80082e0:	2201      	movs	r2, #1
 80082e2:	f04f 31ff 	mov.w	r1, #4294967295
 80082e6:	4885      	ldr	r0, [pc, #532]	; (80084fc <cppLoop+0x944>)
 80082e8:	f7fa f870 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082ec:	2064      	movs	r0, #100	; 0x64
 80082ee:	f001 fd43 	bl	8009d78 <HAL_Delay>
			if(selector == 0){
 80082f2:	4b83      	ldr	r3, [pc, #524]	; (8008500 <cppLoop+0x948>)
 80082f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d113      	bne.n	8008324 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 80082fc:	4b81      	ldr	r3, [pc, #516]	; (8008504 <cppLoop+0x94c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f7f8 f939 	bl	8000578 <__aeabi_f2d>
 8008306:	a376      	add	r3, pc, #472	; (adr r3, 80084e0 <cppLoop+0x928>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ffd4 	bl	80002b8 <__aeabi_dsub>
 8008310:	4603      	mov	r3, r0
 8008312:	460c      	mov	r4, r1
 8008314:	4618      	mov	r0, r3
 8008316:	4621      	mov	r1, r4
 8008318:	f7f8 fc7e 	bl	8000c18 <__aeabi_d2f>
 800831c:	4602      	mov	r2, r0
 800831e:	4b79      	ldr	r3, [pc, #484]	; (8008504 <cppLoop+0x94c>)
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e02b      	b.n	800837c <cppLoop+0x7c4>
			else if(selector == 1){
 8008324:	4b76      	ldr	r3, [pc, #472]	; (8008500 <cppLoop+0x948>)
 8008326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d113      	bne.n	8008356 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 800832e:	4b76      	ldr	r3, [pc, #472]	; (8008508 <cppLoop+0x950>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7f8 f920 	bl	8000578 <__aeabi_f2d>
 8008338:	a36b      	add	r3, pc, #428	; (adr r3, 80084e8 <cppLoop+0x930>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ffbb 	bl	80002b8 <__aeabi_dsub>
 8008342:	4603      	mov	r3, r0
 8008344:	460c      	mov	r4, r1
 8008346:	4618      	mov	r0, r3
 8008348:	4621      	mov	r1, r4
 800834a:	f7f8 fc65 	bl	8000c18 <__aeabi_d2f>
 800834e:	4602      	mov	r2, r0
 8008350:	4b6d      	ldr	r3, [pc, #436]	; (8008508 <cppLoop+0x950>)
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	e012      	b.n	800837c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008356:	4b6d      	ldr	r3, [pc, #436]	; (800850c <cppLoop+0x954>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4618      	mov	r0, r3
 800835c:	f7f8 f90c 	bl	8000578 <__aeabi_f2d>
 8008360:	a363      	add	r3, pc, #396	; (adr r3, 80084f0 <cppLoop+0x938>)
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f7 ffa7 	bl	80002b8 <__aeabi_dsub>
 800836a:	4603      	mov	r3, r0
 800836c:	460c      	mov	r4, r1
 800836e:	4618      	mov	r0, r3
 8008370:	4621      	mov	r1, r4
 8008372:	f7f8 fc51 	bl	8000c18 <__aeabi_d2f>
 8008376:	4602      	mov	r2, r0
 8008378:	4b64      	ldr	r3, [pc, #400]	; (800850c <cppLoop+0x954>)
 800837a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800837c:	2152      	movs	r1, #82	; 0x52
 800837e:	485f      	ldr	r0, [pc, #380]	; (80084fc <cppLoop+0x944>)
 8008380:	f7f9 ff68 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008384:	2200      	movs	r2, #0
 8008386:	f04f 31ff 	mov.w	r1, #4294967295
 800838a:	485c      	ldr	r0, [pc, #368]	; (80084fc <cppLoop+0x944>)
 800838c:	f7fa f81e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008390:	f001 bbaa 	b.w	8009ae8 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 8008394:	4858      	ldr	r0, [pc, #352]	; (80084f8 <cppLoop+0x940>)
 8008396:	f7f9 fef9 	bl	800218c <_ZN8JoyStick8getValueEv>
 800839a:	4603      	mov	r3, r0
 800839c:	2b02      	cmp	r3, #2
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f001 839e 	beq.w	8009ae8 <cppLoop+0x1f30>
			led.LR(-1, 1);
 80083ac:	2201      	movs	r2, #1
 80083ae:	f04f 31ff 	mov.w	r1, #4294967295
 80083b2:	4852      	ldr	r0, [pc, #328]	; (80084fc <cppLoop+0x944>)
 80083b4:	f7fa f80a 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083bc:	f001 fcdc 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80083c0:	2300      	movs	r3, #0
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4b4f      	ldr	r3, [pc, #316]	; (8008504 <cppLoop+0x94c>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	4951      	ldr	r1, [pc, #324]	; (8008510 <cppLoop+0x958>)
 80083ca:	4852      	ldr	r0, [pc, #328]	; (8008514 <cppLoop+0x95c>)
 80083cc:	f7f9 fa56 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80083d0:	2300      	movs	r3, #0
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <cppLoop+0x950>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	494f      	ldr	r1, [pc, #316]	; (8008518 <cppLoop+0x960>)
 80083da:	484e      	ldr	r0, [pc, #312]	; (8008514 <cppLoop+0x95c>)
 80083dc:	f7f9 fa4e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80083e0:	2300      	movs	r3, #0
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	4b49      	ldr	r3, [pc, #292]	; (800850c <cppLoop+0x954>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	494c      	ldr	r1, [pc, #304]	; (800851c <cppLoop+0x964>)
 80083ea:	484a      	ldr	r0, [pc, #296]	; (8008514 <cppLoop+0x95c>)
 80083ec:	f7f9 fa46 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 80083f0:	4b44      	ldr	r3, [pc, #272]	; (8008504 <cppLoop+0x94c>)
 80083f2:	edd3 7a00 	vldr	s15, [r3]
 80083f6:	4b44      	ldr	r3, [pc, #272]	; (8008508 <cppLoop+0x950>)
 80083f8:	ed93 7a00 	vldr	s14, [r3]
 80083fc:	4b43      	ldr	r3, [pc, #268]	; (800850c <cppLoop+0x954>)
 80083fe:	edd3 6a00 	vldr	s13, [r3]
 8008402:	eeb0 1a66 	vmov.f32	s2, s13
 8008406:	eef0 0a47 	vmov.f32	s1, s14
 800840a:	eeb0 0a67 	vmov.f32	s0, s15
 800840e:	4844      	ldr	r0, [pc, #272]	; (8008520 <cppLoop+0x968>)
 8008410:	f7fb fc0e 	bl	8003c30 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008414:	2200      	movs	r2, #0
 8008416:	f04f 31ff 	mov.w	r1, #4294967295
 800841a:	4838      	ldr	r0, [pc, #224]	; (80084fc <cppLoop+0x944>)
 800841c:	f7f9 ffd6 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008420:	f001 bb62 	b.w	8009ae8 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 8008424:	2143      	movs	r1, #67	; 0x43
 8008426:	4835      	ldr	r0, [pc, #212]	; (80084fc <cppLoop+0x944>)
 8008428:	f7f9 ff14 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800842c:	f7f8 fe38 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008430:	2100      	movs	r1, #0
 8008432:	2000      	movs	r0, #0
 8008434:	f7f8 fe44 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008438:	483a      	ldr	r0, [pc, #232]	; (8008524 <cppLoop+0x96c>)
 800843a:	f7f8 fe6b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800843e:	2101      	movs	r1, #1
 8008440:	2000      	movs	r0, #0
 8008442:	f7f8 fe3d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008446:	4b38      	ldr	r3, [pc, #224]	; (8008528 <cppLoop+0x970>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f7f8 f894 	bl	8000578 <__aeabi_f2d>
 8008450:	4603      	mov	r3, r0
 8008452:	460c      	mov	r4, r1
 8008454:	461a      	mov	r2, r3
 8008456:	4623      	mov	r3, r4
 8008458:	4834      	ldr	r0, [pc, #208]	; (800852c <cppLoop+0x974>)
 800845a:	f7f8 fe5b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800845e:	4826      	ldr	r0, [pc, #152]	; (80084f8 <cppLoop+0x940>)
 8008460:	f7f9 fe94 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008464:	4603      	mov	r3, r0
 8008466:	2b02      	cmp	r3, #2
 8008468:	bf0c      	ite	eq
 800846a:	2301      	moveq	r3, #1
 800846c:	2300      	movne	r3, #0
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	f001 833b 	beq.w	8009aec <cppLoop+0x1f34>
			HAL_Delay(500);
 8008476:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800847a:	f001 fc7d 	bl	8009d78 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800847e:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <cppLoop+0x970>)
 8008480:	edd3 7a00 	vldr	s15, [r3]
 8008484:	eeb0 0a67 	vmov.f32	s0, s15
 8008488:	4825      	ldr	r0, [pc, #148]	; (8008520 <cppLoop+0x968>)
 800848a:	f7fb fc26 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800848e:	f04f 32ff 	mov.w	r2, #4294967295
 8008492:	2101      	movs	r1, #1
 8008494:	4819      	ldr	r0, [pc, #100]	; (80084fc <cppLoop+0x944>)
 8008496:	f7f9 ff99 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800849a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800849e:	f001 fc6b 	bl	8009d78 <HAL_Delay>
			logger.start();
 80084a2:	4823      	ldr	r0, [pc, #140]	; (8008530 <cppLoop+0x978>)
 80084a4:	f7fc fbbf 	bl	8004c26 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80084a8:	2100      	movs	r1, #0
 80084aa:	481d      	ldr	r0, [pc, #116]	; (8008520 <cppLoop+0x968>)
 80084ac:	f7fb fe3a 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80084b0:	481b      	ldr	r0, [pc, #108]	; (8008520 <cppLoop+0x968>)
 80084b2:	f7fb fe75 	bl	80041a0 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 80084b6:	481e      	ldr	r0, [pc, #120]	; (8008530 <cppLoop+0x978>)
 80084b8:	f7fc fbc5 	bl	8004c46 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 80084bc:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <cppLoop+0x97c>)
 80084be:	491e      	ldr	r1, [pc, #120]	; (8008538 <cppLoop+0x980>)
 80084c0:	481b      	ldr	r0, [pc, #108]	; (8008530 <cppLoop+0x978>)
 80084c2:	f7fc fabb 	bl	8004a3c <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 80084c6:	4a1d      	ldr	r2, [pc, #116]	; (800853c <cppLoop+0x984>)
 80084c8:	491b      	ldr	r1, [pc, #108]	; (8008538 <cppLoop+0x980>)
 80084ca:	4819      	ldr	r0, [pc, #100]	; (8008530 <cppLoop+0x978>)
 80084cc:	f7fc facc 	bl	8004a68 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 80084d0:	f04f 32ff 	mov.w	r2, #4294967295
 80084d4:	2100      	movs	r1, #0
 80084d6:	4809      	ldr	r0, [pc, #36]	; (80084fc <cppLoop+0x944>)
 80084d8:	f7f9 ff78 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80084dc:	f001 bb06 	b.w	8009aec <cppLoop+0x1f34>
 80084e0:	88e368f1 	.word	0x88e368f1
 80084e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80084e8:	eb1c432d 	.word	0xeb1c432d
 80084ec:	3f1a36e2 	.word	0x3f1a36e2
 80084f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80084f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80084f8:	200005c4 	.word	0x200005c4
 80084fc:	200005d0 	.word	0x200005d0
 8008500:	20042242 	.word	0x20042242
 8008504:	20042264 	.word	0x20042264
 8008508:	2004226c 	.word	0x2004226c
 800850c:	20042274 	.word	0x20042274
 8008510:	08019e6c 	.word	0x08019e6c
 8008514:	08019e78 	.word	0x08019e78
 8008518:	08019e80 	.word	0x08019e80
 800851c:	08019e8c 	.word	0x08019e8c
 8008520:	2001db64 	.word	0x2001db64
 8008524:	08019e98 	.word	0x08019e98
 8008528:	2004227c 	.word	0x2004227c
 800852c:	08019ea4 	.word	0x08019ea4
 8008530:	200005f4 	.word	0x200005f4
 8008534:	08019eb0 	.word	0x08019eb0
 8008538:	08019ebc 	.word	0x08019ebc
 800853c:	08019ec8 	.word	0x08019ec8

	case 2:
		led.fullColor('B');
 8008540:	2142      	movs	r1, #66	; 0x42
 8008542:	48b9      	ldr	r0, [pc, #740]	; (8008828 <cppLoop+0xc70>)
 8008544:	f7f9 fe86 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008548:	f7f8 fdaa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800854c:	2100      	movs	r1, #0
 800854e:	2000      	movs	r0, #0
 8008550:	f7f8 fdb6 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008554:	48b5      	ldr	r0, [pc, #724]	; (800882c <cppLoop+0xc74>)
 8008556:	f7f8 fddd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800855a:	2101      	movs	r1, #1
 800855c:	2000      	movs	r0, #0
 800855e:	f7f8 fdaf 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008562:	4bb3      	ldr	r3, [pc, #716]	; (8008830 <cppLoop+0xc78>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7f8 f806 	bl	8000578 <__aeabi_f2d>
 800856c:	4603      	mov	r3, r0
 800856e:	460c      	mov	r4, r1
 8008570:	461a      	mov	r2, r3
 8008572:	4623      	mov	r3, r4
 8008574:	48af      	ldr	r0, [pc, #700]	; (8008834 <cppLoop+0xc7c>)
 8008576:	f7f8 fdcd 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800857a:	48af      	ldr	r0, [pc, #700]	; (8008838 <cppLoop+0xc80>)
 800857c:	f7f9 fe06 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008580:	4603      	mov	r3, r0
 8008582:	2b10      	cmp	r3, #16
 8008584:	bf0c      	ite	eq
 8008586:	2301      	moveq	r3, #1
 8008588:	2300      	movne	r3, #0
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d023      	beq.n	80085d8 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008590:	2201      	movs	r2, #1
 8008592:	f04f 31ff 	mov.w	r1, #4294967295
 8008596:	48a4      	ldr	r0, [pc, #656]	; (8008828 <cppLoop+0xc70>)
 8008598:	f7f9 ff18 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800859c:	2064      	movs	r0, #100	; 0x64
 800859e:	f001 fbeb 	bl	8009d78 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80085a2:	4ba3      	ldr	r3, [pc, #652]	; (8008830 <cppLoop+0xc78>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7f7 ffe6 	bl	8000578 <__aeabi_f2d>
 80085ac:	a39c      	add	r3, pc, #624	; (adr r3, 8008820 <cppLoop+0xc68>)
 80085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b2:	f7f7 fe83 	bl	80002bc <__adddf3>
 80085b6:	4603      	mov	r3, r0
 80085b8:	460c      	mov	r4, r1
 80085ba:	4618      	mov	r0, r3
 80085bc:	4621      	mov	r1, r4
 80085be:	f7f8 fb2b 	bl	8000c18 <__aeabi_d2f>
 80085c2:	4602      	mov	r2, r0
 80085c4:	4b9a      	ldr	r3, [pc, #616]	; (8008830 <cppLoop+0xc78>)
 80085c6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80085c8:	2200      	movs	r2, #0
 80085ca:	f04f 31ff 	mov.w	r1, #4294967295
 80085ce:	4896      	ldr	r0, [pc, #600]	; (8008828 <cppLoop+0xc70>)
 80085d0:	f7f9 fefc 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80085d4:	f001 ba8c 	b.w	8009af0 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 80085d8:	4897      	ldr	r0, [pc, #604]	; (8008838 <cppLoop+0xc80>)
 80085da:	f7f9 fdd7 	bl	800218c <_ZN8JoyStick8getValueEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	bf0c      	ite	eq
 80085e4:	2301      	moveq	r3, #1
 80085e6:	2300      	movne	r3, #0
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d023      	beq.n	8008636 <cppLoop+0xa7e>
			led.LR(-1, 1);
 80085ee:	2201      	movs	r2, #1
 80085f0:	f04f 31ff 	mov.w	r1, #4294967295
 80085f4:	488c      	ldr	r0, [pc, #560]	; (8008828 <cppLoop+0xc70>)
 80085f6:	f7f9 fee9 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085fa:	2064      	movs	r0, #100	; 0x64
 80085fc:	f001 fbbc 	bl	8009d78 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008600:	4b8b      	ldr	r3, [pc, #556]	; (8008830 <cppLoop+0xc78>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4618      	mov	r0, r3
 8008606:	f7f7 ffb7 	bl	8000578 <__aeabi_f2d>
 800860a:	a385      	add	r3, pc, #532	; (adr r3, 8008820 <cppLoop+0xc68>)
 800860c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008610:	f7f7 fe52 	bl	80002b8 <__aeabi_dsub>
 8008614:	4603      	mov	r3, r0
 8008616:	460c      	mov	r4, r1
 8008618:	4618      	mov	r0, r3
 800861a:	4621      	mov	r1, r4
 800861c:	f7f8 fafc 	bl	8000c18 <__aeabi_d2f>
 8008620:	4602      	mov	r2, r0
 8008622:	4b83      	ldr	r3, [pc, #524]	; (8008830 <cppLoop+0xc78>)
 8008624:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008626:	2200      	movs	r2, #0
 8008628:	f04f 31ff 	mov.w	r1, #4294967295
 800862c:	487e      	ldr	r0, [pc, #504]	; (8008828 <cppLoop+0xc70>)
 800862e:	f7f9 fecd 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008632:	f001 ba5d 	b.w	8009af0 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 8008636:	4880      	ldr	r0, [pc, #512]	; (8008838 <cppLoop+0xc80>)
 8008638:	f7f9 fda8 	bl	800218c <_ZN8JoyStick8getValueEv>
 800863c:	4603      	mov	r3, r0
 800863e:	2b02      	cmp	r3, #2
 8008640:	bf0c      	ite	eq
 8008642:	2301      	moveq	r3, #1
 8008644:	2300      	movne	r3, #0
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	f001 8251 	beq.w	8009af0 <cppLoop+0x1f38>
			led.LR(-1, 1);
 800864e:	2201      	movs	r2, #1
 8008650:	f04f 31ff 	mov.w	r1, #4294967295
 8008654:	4874      	ldr	r0, [pc, #464]	; (8008828 <cppLoop+0xc70>)
 8008656:	f7f9 feb9 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800865a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800865e:	f001 fb8b 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008662:	2300      	movs	r3, #0
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4b72      	ldr	r3, [pc, #456]	; (8008830 <cppLoop+0xc78>)
 8008668:	2201      	movs	r2, #1
 800866a:	4974      	ldr	r1, [pc, #464]	; (800883c <cppLoop+0xc84>)
 800866c:	4874      	ldr	r0, [pc, #464]	; (8008840 <cppLoop+0xc88>)
 800866e:	f7f9 f905 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008672:	4b6f      	ldr	r3, [pc, #444]	; (8008830 <cppLoop+0xc78>)
 8008674:	edd3 7a00 	vldr	s15, [r3]
 8008678:	eeb0 0a67 	vmov.f32	s0, s15
 800867c:	4871      	ldr	r0, [pc, #452]	; (8008844 <cppLoop+0xc8c>)
 800867e:	f7fb fb2c 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	f04f 31ff 	mov.w	r1, #4294967295
 8008688:	4867      	ldr	r0, [pc, #412]	; (8008828 <cppLoop+0xc70>)
 800868a:	f7f9 fe9f 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800868e:	f001 ba2f 	b.w	8009af0 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 8008692:	2159      	movs	r1, #89	; 0x59
 8008694:	4864      	ldr	r0, [pc, #400]	; (8008828 <cppLoop+0xc70>)
 8008696:	f7f9 fddd 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800869a:	f7f8 fd01 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800869e:	2100      	movs	r1, #0
 80086a0:	2000      	movs	r0, #0
 80086a2:	f7f8 fd0d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80086a6:	4b68      	ldr	r3, [pc, #416]	; (8008848 <cppLoop+0xc90>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7f7 ff64 	bl	8000578 <__aeabi_f2d>
 80086b0:	4603      	mov	r3, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	461a      	mov	r2, r3
 80086b6:	4623      	mov	r3, r4
 80086b8:	4864      	ldr	r0, [pc, #400]	; (800884c <cppLoop+0xc94>)
 80086ba:	f7f8 fd2b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086be:	2101      	movs	r1, #1
 80086c0:	2000      	movs	r0, #0
 80086c2:	f7f8 fcfd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80086c6:	4b62      	ldr	r3, [pc, #392]	; (8008850 <cppLoop+0xc98>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 ff54 	bl	8000578 <__aeabi_f2d>
 80086d0:	4603      	mov	r3, r0
 80086d2:	460c      	mov	r4, r1
 80086d4:	461a      	mov	r2, r3
 80086d6:	4623      	mov	r3, r4
 80086d8:	485e      	ldr	r0, [pc, #376]	; (8008854 <cppLoop+0xc9c>)
 80086da:	f7f8 fd1b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80086de:	4856      	ldr	r0, [pc, #344]	; (8008838 <cppLoop+0xc80>)
 80086e0:	f7f9 fd54 	bl	800218c <_ZN8JoyStick8getValueEv>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f001 81ff 	beq.w	8009af4 <cppLoop+0x1f3c>
			HAL_Delay(500);
 80086f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80086fa:	f001 fb3d 	bl	8009d78 <HAL_Delay>

			led.LR(1, -1);
 80086fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008702:	2101      	movs	r1, #1
 8008704:	4848      	ldr	r0, [pc, #288]	; (8008828 <cppLoop+0xc70>)
 8008706:	f7f9 fe61 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800870a:	2101      	movs	r1, #1
 800870c:	484d      	ldr	r0, [pc, #308]	; (8008844 <cppLoop+0xc8c>)
 800870e:	f7fb fd09 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <cppLoop+0xc98>)
 8008714:	edd3 7a00 	vldr	s15, [r3]
 8008718:	eeb0 0a67 	vmov.f32	s0, s15
 800871c:	4849      	ldr	r0, [pc, #292]	; (8008844 <cppLoop+0xc8c>)
 800871e:	f7fb fadc 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008722:	4b49      	ldr	r3, [pc, #292]	; (8008848 <cppLoop+0xc90>)
 8008724:	edd3 7a00 	vldr	s15, [r3]
 8008728:	eeb0 0a67 	vmov.f32	s0, s15
 800872c:	4845      	ldr	r0, [pc, #276]	; (8008844 <cppLoop+0xc8c>)
 800872e:	f7fb fae4 	bl	8003cfa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008732:	4b47      	ldr	r3, [pc, #284]	; (8008850 <cppLoop+0xc98>)
 8008734:	edd3 7a00 	vldr	s15, [r3]
 8008738:	eeb0 0a67 	vmov.f32	s0, s15
 800873c:	4841      	ldr	r0, [pc, #260]	; (8008844 <cppLoop+0xc8c>)
 800873e:	f7fb fafc 	bl	8003d3a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008742:	4840      	ldr	r0, [pc, #256]	; (8008844 <cppLoop+0xc8c>)
 8008744:	f7fb fe1c 	bl	8004380 <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8008748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800874c:	f001 fb14 	bl	8009d78 <HAL_Delay>

			line_trace.running();
 8008750:	483c      	ldr	r0, [pc, #240]	; (8008844 <cppLoop+0xc8c>)
 8008752:	f7fb fd25 	bl	80041a0 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 8008756:	4840      	ldr	r0, [pc, #256]	; (8008858 <cppLoop+0xca0>)
 8008758:	f7f8 fe14 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800875c:	f04f 32ff 	mov.w	r2, #4294967295
 8008760:	2100      	movs	r1, #0
 8008762:	4831      	ldr	r0, [pc, #196]	; (8008828 <cppLoop+0xc70>)
 8008764:	f7f9 fe32 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008768:	f001 b9c4 	b.w	8009af4 <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 800876c:	2147      	movs	r1, #71	; 0x47
 800876e:	482e      	ldr	r0, [pc, #184]	; (8008828 <cppLoop+0xc70>)
 8008770:	f7f9 fd70 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008774:	f7f8 fc94 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008778:	2100      	movs	r1, #0
 800877a:	2000      	movs	r0, #0
 800877c:	f7f8 fca0 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008780:	4830      	ldr	r0, [pc, #192]	; (8008844 <cppLoop+0xc8c>)
 8008782:	f7fb fb0a 	bl	8003d9a <_ZN9LineTrace14getMaxVelocityEv>
 8008786:	ee10 3a10 	vmov	r3, s0
 800878a:	4618      	mov	r0, r3
 800878c:	f7f7 fef4 	bl	8000578 <__aeabi_f2d>
 8008790:	4603      	mov	r3, r0
 8008792:	460c      	mov	r4, r1
 8008794:	461a      	mov	r2, r3
 8008796:	4623      	mov	r3, r4
 8008798:	482c      	ldr	r0, [pc, #176]	; (800884c <cppLoop+0xc94>)
 800879a:	f7f8 fcbb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800879e:	2101      	movs	r1, #1
 80087a0:	2000      	movs	r0, #0
 80087a2:	f7f8 fc8d 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80087a6:	4827      	ldr	r0, [pc, #156]	; (8008844 <cppLoop+0xc8c>)
 80087a8:	f7fb fb17 	bl	8003dda <_ZN9LineTrace14getMinVelocityEv>
 80087ac:	ee10 3a10 	vmov	r3, s0
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7f7 fee1 	bl	8000578 <__aeabi_f2d>
 80087b6:	4603      	mov	r3, r0
 80087b8:	460c      	mov	r4, r1
 80087ba:	461a      	mov	r2, r3
 80087bc:	4623      	mov	r3, r4
 80087be:	481d      	ldr	r0, [pc, #116]	; (8008834 <cppLoop+0xc7c>)
 80087c0:	f7f8 fca8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80087c4:	481c      	ldr	r0, [pc, #112]	; (8008838 <cppLoop+0xc80>)
 80087c6:	f7f9 fce1 	bl	800218c <_ZN8JoyStick8getValueEv>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	bf0c      	ite	eq
 80087d0:	2301      	moveq	r3, #1
 80087d2:	2300      	movne	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d042      	beq.n	8008860 <cppLoop+0xca8>
			led.LR(-1, 1);
 80087da:	2201      	movs	r2, #1
 80087dc:	f04f 31ff 	mov.w	r1, #4294967295
 80087e0:	4811      	ldr	r0, [pc, #68]	; (8008828 <cppLoop+0xc70>)
 80087e2:	f7f9 fdf3 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087ea:	f001 fac5 	bl	8009d78 <HAL_Delay>

			selector_vel++;
 80087ee:	4b1b      	ldr	r3, [pc, #108]	; (800885c <cppLoop+0xca4>)
 80087f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	3301      	adds	r3, #1
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	b21a      	sxth	r2, r3
 80087fc:	4b17      	ldr	r3, [pc, #92]	; (800885c <cppLoop+0xca4>)
 80087fe:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008800:	4b16      	ldr	r3, [pc, #88]	; (800885c <cppLoop+0xca4>)
 8008802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008806:	2b01      	cmp	r3, #1
 8008808:	dd02      	ble.n	8008810 <cppLoop+0xc58>
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <cppLoop+0xca4>)
 800880c:	2200      	movs	r2, #0
 800880e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008810:	2200      	movs	r2, #0
 8008812:	f04f 31ff 	mov.w	r1, #4294967295
 8008816:	4804      	ldr	r0, [pc, #16]	; (8008828 <cppLoop+0xc70>)
 8008818:	f7f9 fdd8 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800881c:	f001 b96c 	b.w	8009af8 <cppLoop+0x1f40>
 8008820:	9999999a 	.word	0x9999999a
 8008824:	3fb99999 	.word	0x3fb99999
 8008828:	200005d0 	.word	0x200005d0
 800882c:	08019e98 	.word	0x08019e98
 8008830:	2004227c 	.word	0x2004227c
 8008834:	08019ed4 	.word	0x08019ed4
 8008838:	200005c4 	.word	0x200005c4
 800883c:	08019ee0 	.word	0x08019ee0
 8008840:	08019e78 	.word	0x08019e78
 8008844:	2001db64 	.word	0x2001db64
 8008848:	20042284 	.word	0x20042284
 800884c:	08019eec 	.word	0x08019eec
 8008850:	20042294 	.word	0x20042294
 8008854:	08019ea4 	.word	0x08019ea4
 8008858:	2001db60 	.word	0x2001db60
 800885c:	20042248 	.word	0x20042248
		else if(joy_stick.getValue() == JOY_R){
 8008860:	48a5      	ldr	r0, [pc, #660]	; (8008af8 <cppLoop+0xf40>)
 8008862:	f7f9 fc93 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008866:	4603      	mov	r3, r0
 8008868:	2b10      	cmp	r3, #16
 800886a:	bf0c      	ite	eq
 800886c:	2301      	moveq	r3, #1
 800886e:	2300      	movne	r3, #0
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	d03c      	beq.n	80088f0 <cppLoop+0xd38>
			led.LR(-1, 1);
 8008876:	2201      	movs	r2, #1
 8008878:	f04f 31ff 	mov.w	r1, #4294967295
 800887c:	489f      	ldr	r0, [pc, #636]	; (8008afc <cppLoop+0xf44>)
 800887e:	f7f9 fda5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008882:	2064      	movs	r0, #100	; 0x64
 8008884:	f001 fa78 	bl	8009d78 <HAL_Delay>
			if(selector_vel == 0)
 8008888:	4b9d      	ldr	r3, [pc, #628]	; (8008b00 <cppLoop+0xf48>)
 800888a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d113      	bne.n	80088ba <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 8008892:	4b9c      	ldr	r3, [pc, #624]	; (8008b04 <cppLoop+0xf4c>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f7 fe6e 	bl	8000578 <__aeabi_f2d>
 800889c:	a394      	add	r3, pc, #592	; (adr r3, 8008af0 <cppLoop+0xf38>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	f7f7 fd0b 	bl	80002bc <__adddf3>
 80088a6:	4603      	mov	r3, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	4618      	mov	r0, r3
 80088ac:	4621      	mov	r1, r4
 80088ae:	f7f8 f9b3 	bl	8000c18 <__aeabi_d2f>
 80088b2:	4602      	mov	r2, r0
 80088b4:	4b93      	ldr	r3, [pc, #588]	; (8008b04 <cppLoop+0xf4c>)
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	e012      	b.n	80088e0 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 80088ba:	4b93      	ldr	r3, [pc, #588]	; (8008b08 <cppLoop+0xf50>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4618      	mov	r0, r3
 80088c0:	f7f7 fe5a 	bl	8000578 <__aeabi_f2d>
 80088c4:	a38a      	add	r3, pc, #552	; (adr r3, 8008af0 <cppLoop+0xf38>)
 80088c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ca:	f7f7 fcf7 	bl	80002bc <__adddf3>
 80088ce:	4603      	mov	r3, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	4618      	mov	r0, r3
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7f8 f99f 	bl	8000c18 <__aeabi_d2f>
 80088da:	4602      	mov	r2, r0
 80088dc:	4b8a      	ldr	r3, [pc, #552]	; (8008b08 <cppLoop+0xf50>)
 80088de:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80088e0:	2200      	movs	r2, #0
 80088e2:	f04f 31ff 	mov.w	r1, #4294967295
 80088e6:	4885      	ldr	r0, [pc, #532]	; (8008afc <cppLoop+0xf44>)
 80088e8:	f7f9 fd70 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80088ec:	f001 b904 	b.w	8009af8 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 80088f0:	4881      	ldr	r0, [pc, #516]	; (8008af8 <cppLoop+0xf40>)
 80088f2:	f7f9 fc4b 	bl	800218c <_ZN8JoyStick8getValueEv>
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	bf0c      	ite	eq
 80088fc:	2301      	moveq	r3, #1
 80088fe:	2300      	movne	r3, #0
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d03c      	beq.n	8008980 <cppLoop+0xdc8>
			led.LR(-1, 1);
 8008906:	2201      	movs	r2, #1
 8008908:	f04f 31ff 	mov.w	r1, #4294967295
 800890c:	487b      	ldr	r0, [pc, #492]	; (8008afc <cppLoop+0xf44>)
 800890e:	f7f9 fd5d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008912:	2064      	movs	r0, #100	; 0x64
 8008914:	f001 fa30 	bl	8009d78 <HAL_Delay>
			if(selector_vel == 0)
 8008918:	4b79      	ldr	r3, [pc, #484]	; (8008b00 <cppLoop+0xf48>)
 800891a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d113      	bne.n	800894a <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008922:	4b78      	ldr	r3, [pc, #480]	; (8008b04 <cppLoop+0xf4c>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4618      	mov	r0, r3
 8008928:	f7f7 fe26 	bl	8000578 <__aeabi_f2d>
 800892c:	a370      	add	r3, pc, #448	; (adr r3, 8008af0 <cppLoop+0xf38>)
 800892e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008932:	f7f7 fcc1 	bl	80002b8 <__aeabi_dsub>
 8008936:	4603      	mov	r3, r0
 8008938:	460c      	mov	r4, r1
 800893a:	4618      	mov	r0, r3
 800893c:	4621      	mov	r1, r4
 800893e:	f7f8 f96b 	bl	8000c18 <__aeabi_d2f>
 8008942:	4602      	mov	r2, r0
 8008944:	4b6f      	ldr	r3, [pc, #444]	; (8008b04 <cppLoop+0xf4c>)
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	e012      	b.n	8008970 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 800894a:	4b6f      	ldr	r3, [pc, #444]	; (8008b08 <cppLoop+0xf50>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f7f7 fe12 	bl	8000578 <__aeabi_f2d>
 8008954:	a366      	add	r3, pc, #408	; (adr r3, 8008af0 <cppLoop+0xf38>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fcad 	bl	80002b8 <__aeabi_dsub>
 800895e:	4603      	mov	r3, r0
 8008960:	460c      	mov	r4, r1
 8008962:	4618      	mov	r0, r3
 8008964:	4621      	mov	r1, r4
 8008966:	f7f8 f957 	bl	8000c18 <__aeabi_d2f>
 800896a:	4602      	mov	r2, r0
 800896c:	4b66      	ldr	r3, [pc, #408]	; (8008b08 <cppLoop+0xf50>)
 800896e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008970:	2200      	movs	r2, #0
 8008972:	f04f 31ff 	mov.w	r1, #4294967295
 8008976:	4861      	ldr	r0, [pc, #388]	; (8008afc <cppLoop+0xf44>)
 8008978:	f7f9 fd28 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800897c:	f001 b8bc 	b.w	8009af8 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 8008980:	485d      	ldr	r0, [pc, #372]	; (8008af8 <cppLoop+0xf40>)
 8008982:	f7f9 fc03 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008986:	4603      	mov	r3, r0
 8008988:	2b02      	cmp	r3, #2
 800898a:	bf0c      	ite	eq
 800898c:	2301      	moveq	r3, #1
 800898e:	2300      	movne	r3, #0
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	f001 80b0 	beq.w	8009af8 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008998:	2201      	movs	r2, #1
 800899a:	f04f 31ff 	mov.w	r1, #4294967295
 800899e:	4857      	ldr	r0, [pc, #348]	; (8008afc <cppLoop+0xf44>)
 80089a0:	f7f9 fd14 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80089a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089a8:	f001 f9e6 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80089ac:	2300      	movs	r3, #0
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	4b54      	ldr	r3, [pc, #336]	; (8008b04 <cppLoop+0xf4c>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	4955      	ldr	r1, [pc, #340]	; (8008b0c <cppLoop+0xf54>)
 80089b6:	4856      	ldr	r0, [pc, #344]	; (8008b10 <cppLoop+0xf58>)
 80089b8:	f7f8 ff60 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80089bc:	2300      	movs	r3, #0
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	4b51      	ldr	r3, [pc, #324]	; (8008b08 <cppLoop+0xf50>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	4953      	ldr	r1, [pc, #332]	; (8008b14 <cppLoop+0xf5c>)
 80089c6:	4852      	ldr	r0, [pc, #328]	; (8008b10 <cppLoop+0xf58>)
 80089c8:	f7f8 ff58 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80089cc:	4b4d      	ldr	r3, [pc, #308]	; (8008b04 <cppLoop+0xf4c>)
 80089ce:	edd3 7a00 	vldr	s15, [r3]
 80089d2:	eeb0 0a67 	vmov.f32	s0, s15
 80089d6:	4850      	ldr	r0, [pc, #320]	; (8008b18 <cppLoop+0xf60>)
 80089d8:	f7fb f98f 	bl	8003cfa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80089dc:	4b4a      	ldr	r3, [pc, #296]	; (8008b08 <cppLoop+0xf50>)
 80089de:	edd3 7a00 	vldr	s15, [r3]
 80089e2:	eeb0 0a67 	vmov.f32	s0, s15
 80089e6:	484c      	ldr	r0, [pc, #304]	; (8008b18 <cppLoop+0xf60>)
 80089e8:	f7fb f9a7 	bl	8003d3a <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80089ec:	2200      	movs	r2, #0
 80089ee:	f04f 31ff 	mov.w	r1, #4294967295
 80089f2:	4842      	ldr	r0, [pc, #264]	; (8008afc <cppLoop+0xf44>)
 80089f4:	f7f9 fcea 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80089f8:	f001 b87e 	b.w	8009af8 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 80089fc:	214d      	movs	r1, #77	; 0x4d
 80089fe:	483f      	ldr	r0, [pc, #252]	; (8008afc <cppLoop+0xf44>)
 8008a00:	f7f9 fc28 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a04:	f7f8 fb4c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a08:	2100      	movs	r1, #0
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	f7f8 fb58 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008a10:	4b42      	ldr	r3, [pc, #264]	; (8008b1c <cppLoop+0xf64>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7f7 fdaf 	bl	8000578 <__aeabi_f2d>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	460c      	mov	r4, r1
 8008a1e:	461a      	mov	r2, r3
 8008a20:	4623      	mov	r3, r4
 8008a22:	483f      	ldr	r0, [pc, #252]	; (8008b20 <cppLoop+0xf68>)
 8008a24:	f7f8 fb76 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a28:	2101      	movs	r1, #1
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	f7f8 fb48 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008a30:	4b3c      	ldr	r3, [pc, #240]	; (8008b24 <cppLoop+0xf6c>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7f7 fd9f 	bl	8000578 <__aeabi_f2d>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4623      	mov	r3, r4
 8008a42:	4839      	ldr	r0, [pc, #228]	; (8008b28 <cppLoop+0xf70>)
 8008a44:	f7f8 fb66 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008a48:	482b      	ldr	r0, [pc, #172]	; (8008af8 <cppLoop+0xf40>)
 8008a4a:	f7f9 fb9f 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	bf0c      	ite	eq
 8008a54:	2301      	moveq	r3, #1
 8008a56:	2300      	movne	r3, #0
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f001 804e 	beq.w	8009afc <cppLoop+0x1f44>
			HAL_Delay(500);
 8008a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a64:	f001 f988 	bl	8009d78 <HAL_Delay>

			led.LR(1, -1);
 8008a68:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4823      	ldr	r0, [pc, #140]	; (8008afc <cppLoop+0xf44>)
 8008a70:	f7f9 fcac 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008a74:	4b2d      	ldr	r3, [pc, #180]	; (8008b2c <cppLoop+0xf74>)
 8008a76:	edd3 7a00 	vldr	s15, [r3]
 8008a7a:	4b2d      	ldr	r3, [pc, #180]	; (8008b30 <cppLoop+0xf78>)
 8008a7c:	ed93 7a00 	vldr	s14, [r3]
 8008a80:	4b2c      	ldr	r3, [pc, #176]	; (8008b34 <cppLoop+0xf7c>)
 8008a82:	edd3 6a00 	vldr	s13, [r3]
 8008a86:	eeb0 1a66 	vmov.f32	s2, s13
 8008a8a:	eef0 0a47 	vmov.f32	s1, s14
 8008a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a92:	4821      	ldr	r0, [pc, #132]	; (8008b18 <cppLoop+0xf60>)
 8008a94:	f7fb f886 	bl	8003ba4 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008a98:	2102      	movs	r1, #2
 8008a9a:	481f      	ldr	r0, [pc, #124]	; (8008b18 <cppLoop+0xf60>)
 8008a9c:	f7fb fb42 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008aa0:	4b20      	ldr	r3, [pc, #128]	; (8008b24 <cppLoop+0xf6c>)
 8008aa2:	edd3 7a00 	vldr	s15, [r3]
 8008aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aaa:	481b      	ldr	r0, [pc, #108]	; (8008b18 <cppLoop+0xf60>)
 8008aac:	f7fb f915 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008ab0:	4b1a      	ldr	r3, [pc, #104]	; (8008b1c <cppLoop+0xf64>)
 8008ab2:	edd3 7a00 	vldr	s15, [r3]
 8008ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aba:	4817      	ldr	r0, [pc, #92]	; (8008b18 <cppLoop+0xf60>)
 8008abc:	f7fb f92d 	bl	8003d1a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008ac0:	4b18      	ldr	r3, [pc, #96]	; (8008b24 <cppLoop+0xf6c>)
 8008ac2:	edd3 7a00 	vldr	s15, [r3]
 8008ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8008aca:	4813      	ldr	r0, [pc, #76]	; (8008b18 <cppLoop+0xf60>)
 8008acc:	f7fb f945 	bl	8003d5a <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008ad0:	4811      	ldr	r0, [pc, #68]	; (8008b18 <cppLoop+0xf60>)
 8008ad2:	f7fb fc55 	bl	8004380 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008ad6:	4810      	ldr	r0, [pc, #64]	; (8008b18 <cppLoop+0xf60>)
 8008ad8:	f7fb fb62 	bl	80041a0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008adc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4806      	ldr	r0, [pc, #24]	; (8008afc <cppLoop+0xf44>)
 8008ae4:	f7f9 fc72 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008ae8:	f001 b808 	b.w	8009afc <cppLoop+0x1f44>
 8008aec:	f3af 8000 	nop.w
 8008af0:	9999999a 	.word	0x9999999a
 8008af4:	3fb99999 	.word	0x3fb99999
 8008af8:	200005c4 	.word	0x200005c4
 8008afc:	200005d0 	.word	0x200005d0
 8008b00:	20042248 	.word	0x20042248
 8008b04:	20042284 	.word	0x20042284
 8008b08:	20042294 	.word	0x20042294
 8008b0c:	08019ef8 	.word	0x08019ef8
 8008b10:	08019e78 	.word	0x08019e78
 8008b14:	08019f04 	.word	0x08019f04
 8008b18:	2001db64 	.word	0x2001db64
 8008b1c:	2004228c 	.word	0x2004228c
 8008b20:	08019f10 	.word	0x08019f10
 8008b24:	2004229c 	.word	0x2004229c
 8008b28:	08019ea4 	.word	0x08019ea4
 8008b2c:	2004224c 	.word	0x2004224c
 8008b30:	20042254 	.word	0x20042254
 8008b34:	2004225c 	.word	0x2004225c

	case 6:
		led.fullColor('R');
 8008b38:	2152      	movs	r1, #82	; 0x52
 8008b3a:	4895      	ldr	r0, [pc, #596]	; (8008d90 <cppLoop+0x11d8>)
 8008b3c:	f7f9 fb8a 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008b40:	f7f8 faae 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008b44:	2100      	movs	r1, #0
 8008b46:	2000      	movs	r0, #0
 8008b48:	f7f8 faba 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008b4c:	4891      	ldr	r0, [pc, #580]	; (8008d94 <cppLoop+0x11dc>)
 8008b4e:	f7fb f934 	bl	8003dba <_ZN9LineTrace15getMaxVelocity2Ev>
 8008b52:	ee10 3a10 	vmov	r3, s0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f7 fd0e 	bl	8000578 <__aeabi_f2d>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	460c      	mov	r4, r1
 8008b60:	461a      	mov	r2, r3
 8008b62:	4623      	mov	r3, r4
 8008b64:	488c      	ldr	r0, [pc, #560]	; (8008d98 <cppLoop+0x11e0>)
 8008b66:	f7f8 fad5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b6a:	2101      	movs	r1, #1
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	f7f8 faa7 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008b72:	4888      	ldr	r0, [pc, #544]	; (8008d94 <cppLoop+0x11dc>)
 8008b74:	f7fb f941 	bl	8003dfa <_ZN9LineTrace15getMinVelocity2Ev>
 8008b78:	ee10 3a10 	vmov	r3, s0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7f7 fcfb 	bl	8000578 <__aeabi_f2d>
 8008b82:	4603      	mov	r3, r0
 8008b84:	460c      	mov	r4, r1
 8008b86:	461a      	mov	r2, r3
 8008b88:	4623      	mov	r3, r4
 8008b8a:	4884      	ldr	r0, [pc, #528]	; (8008d9c <cppLoop+0x11e4>)
 8008b8c:	f7f8 fac2 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b90:	4883      	ldr	r0, [pc, #524]	; (8008da0 <cppLoop+0x11e8>)
 8008b92:	f7f9 fafb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	bf0c      	ite	eq
 8008b9c:	2301      	moveq	r3, #1
 8008b9e:	2300      	movne	r3, #0
 8008ba0:	b2db      	uxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d022      	beq.n	8008bec <cppLoop+0x1034>
			led.LR(-1, 1);
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bac:	4878      	ldr	r0, [pc, #480]	; (8008d90 <cppLoop+0x11d8>)
 8008bae:	f7f9 fc0d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008bb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008bb6:	f001 f8df 	bl	8009d78 <HAL_Delay>

			selector_vel2++;
 8008bba:	4b7a      	ldr	r3, [pc, #488]	; (8008da4 <cppLoop+0x11ec>)
 8008bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	b21a      	sxth	r2, r3
 8008bc8:	4b76      	ldr	r3, [pc, #472]	; (8008da4 <cppLoop+0x11ec>)
 8008bca:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008bcc:	4b75      	ldr	r3, [pc, #468]	; (8008da4 <cppLoop+0x11ec>)
 8008bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	dd02      	ble.n	8008bdc <cppLoop+0x1024>
 8008bd6:	4b73      	ldr	r3, [pc, #460]	; (8008da4 <cppLoop+0x11ec>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f04f 31ff 	mov.w	r1, #4294967295
 8008be2:	486b      	ldr	r0, [pc, #428]	; (8008d90 <cppLoop+0x11d8>)
 8008be4:	f7f9 fbf2 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008be8:	f000 bf8a 	b.w	8009b00 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008bec:	486c      	ldr	r0, [pc, #432]	; (8008da0 <cppLoop+0x11e8>)
 8008bee:	f7f9 facd 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b10      	cmp	r3, #16
 8008bf6:	bf0c      	ite	eq
 8008bf8:	2301      	moveq	r3, #1
 8008bfa:	2300      	movne	r3, #0
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03c      	beq.n	8008c7c <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008c02:	2201      	movs	r2, #1
 8008c04:	f04f 31ff 	mov.w	r1, #4294967295
 8008c08:	4861      	ldr	r0, [pc, #388]	; (8008d90 <cppLoop+0x11d8>)
 8008c0a:	f7f9 fbdf 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c0e:	2064      	movs	r0, #100	; 0x64
 8008c10:	f001 f8b2 	bl	8009d78 <HAL_Delay>
			if(selector_vel2 == 0)
 8008c14:	4b63      	ldr	r3, [pc, #396]	; (8008da4 <cppLoop+0x11ec>)
 8008c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d113      	bne.n	8008c46 <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008c1e:	4b62      	ldr	r3, [pc, #392]	; (8008da8 <cppLoop+0x11f0>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f7 fca8 	bl	8000578 <__aeabi_f2d>
 8008c28:	a357      	add	r3, pc, #348	; (adr r3, 8008d88 <cppLoop+0x11d0>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	f7f7 fb45 	bl	80002bc <__adddf3>
 8008c32:	4603      	mov	r3, r0
 8008c34:	460c      	mov	r4, r1
 8008c36:	4618      	mov	r0, r3
 8008c38:	4621      	mov	r1, r4
 8008c3a:	f7f7 ffed 	bl	8000c18 <__aeabi_d2f>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	4b59      	ldr	r3, [pc, #356]	; (8008da8 <cppLoop+0x11f0>)
 8008c42:	601a      	str	r2, [r3, #0]
 8008c44:	e012      	b.n	8008c6c <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008c46:	4b59      	ldr	r3, [pc, #356]	; (8008dac <cppLoop+0x11f4>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f7 fc94 	bl	8000578 <__aeabi_f2d>
 8008c50:	a34d      	add	r3, pc, #308	; (adr r3, 8008d88 <cppLoop+0x11d0>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fb31 	bl	80002bc <__adddf3>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4618      	mov	r0, r3
 8008c60:	4621      	mov	r1, r4
 8008c62:	f7f7 ffd9 	bl	8000c18 <__aeabi_d2f>
 8008c66:	4602      	mov	r2, r0
 8008c68:	4b50      	ldr	r3, [pc, #320]	; (8008dac <cppLoop+0x11f4>)
 8008c6a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c72:	4847      	ldr	r0, [pc, #284]	; (8008d90 <cppLoop+0x11d8>)
 8008c74:	f7f9 fbaa 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008c78:	f000 bf42 	b.w	8009b00 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008c7c:	4848      	ldr	r0, [pc, #288]	; (8008da0 <cppLoop+0x11e8>)
 8008c7e:	f7f9 fa85 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	bf0c      	ite	eq
 8008c88:	2301      	moveq	r3, #1
 8008c8a:	2300      	movne	r3, #0
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d03c      	beq.n	8008d0c <cppLoop+0x1154>
			led.LR(-1, 1);
 8008c92:	2201      	movs	r2, #1
 8008c94:	f04f 31ff 	mov.w	r1, #4294967295
 8008c98:	483d      	ldr	r0, [pc, #244]	; (8008d90 <cppLoop+0x11d8>)
 8008c9a:	f7f9 fb97 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c9e:	2064      	movs	r0, #100	; 0x64
 8008ca0:	f001 f86a 	bl	8009d78 <HAL_Delay>
			if(selector_vel2 == 0)
 8008ca4:	4b3f      	ldr	r3, [pc, #252]	; (8008da4 <cppLoop+0x11ec>)
 8008ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d113      	bne.n	8008cd6 <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008cae:	4b3e      	ldr	r3, [pc, #248]	; (8008da8 <cppLoop+0x11f0>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7f7 fc60 	bl	8000578 <__aeabi_f2d>
 8008cb8:	a333      	add	r3, pc, #204	; (adr r3, 8008d88 <cppLoop+0x11d0>)
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f7f7 fafb 	bl	80002b8 <__aeabi_dsub>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	460c      	mov	r4, r1
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	4621      	mov	r1, r4
 8008cca:	f7f7 ffa5 	bl	8000c18 <__aeabi_d2f>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	4b35      	ldr	r3, [pc, #212]	; (8008da8 <cppLoop+0x11f0>)
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e012      	b.n	8008cfc <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008cd6:	4b35      	ldr	r3, [pc, #212]	; (8008dac <cppLoop+0x11f4>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7f7 fc4c 	bl	8000578 <__aeabi_f2d>
 8008ce0:	a329      	add	r3, pc, #164	; (adr r3, 8008d88 <cppLoop+0x11d0>)
 8008ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce6:	f7f7 fae7 	bl	80002b8 <__aeabi_dsub>
 8008cea:	4603      	mov	r3, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	4618      	mov	r0, r3
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	f7f7 ff91 	bl	8000c18 <__aeabi_d2f>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	4b2c      	ldr	r3, [pc, #176]	; (8008dac <cppLoop+0x11f4>)
 8008cfa:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8008d02:	4823      	ldr	r0, [pc, #140]	; (8008d90 <cppLoop+0x11d8>)
 8008d04:	f7f9 fb62 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008d08:	f000 befa 	b.w	8009b00 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 8008d0c:	4824      	ldr	r0, [pc, #144]	; (8008da0 <cppLoop+0x11e8>)
 8008d0e:	f7f9 fa3d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 86ee 	beq.w	8009b00 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8008d24:	2201      	movs	r2, #1
 8008d26:	f04f 31ff 	mov.w	r1, #4294967295
 8008d2a:	4819      	ldr	r0, [pc, #100]	; (8008d90 <cppLoop+0x11d8>)
 8008d2c:	f7f9 fb4e 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d34:	f001 f820 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4b1a      	ldr	r3, [pc, #104]	; (8008da8 <cppLoop+0x11f0>)
 8008d3e:	2201      	movs	r2, #1
 8008d40:	491b      	ldr	r1, [pc, #108]	; (8008db0 <cppLoop+0x11f8>)
 8008d42:	481c      	ldr	r0, [pc, #112]	; (8008db4 <cppLoop+0x11fc>)
 8008d44:	f7f8 fd9a 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	4b17      	ldr	r3, [pc, #92]	; (8008dac <cppLoop+0x11f4>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4919      	ldr	r1, [pc, #100]	; (8008db8 <cppLoop+0x1200>)
 8008d52:	4818      	ldr	r0, [pc, #96]	; (8008db4 <cppLoop+0x11fc>)
 8008d54:	f7f8 fd92 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008d58:	4b13      	ldr	r3, [pc, #76]	; (8008da8 <cppLoop+0x11f0>)
 8008d5a:	edd3 7a00 	vldr	s15, [r3]
 8008d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d62:	480c      	ldr	r0, [pc, #48]	; (8008d94 <cppLoop+0x11dc>)
 8008d64:	f7fa ffd9 	bl	8003d1a <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008d68:	4b10      	ldr	r3, [pc, #64]	; (8008dac <cppLoop+0x11f4>)
 8008d6a:	edd3 7a00 	vldr	s15, [r3]
 8008d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008d72:	4808      	ldr	r0, [pc, #32]	; (8008d94 <cppLoop+0x11dc>)
 8008d74:	f7fa fff1 	bl	8003d5a <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d7e:	4804      	ldr	r0, [pc, #16]	; (8008d90 <cppLoop+0x11d8>)
 8008d80:	f7f9 fb24 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008d84:	f000 bebc 	b.w	8009b00 <cppLoop+0x1f48>
 8008d88:	9999999a 	.word	0x9999999a
 8008d8c:	3fb99999 	.word	0x3fb99999
 8008d90:	200005d0 	.word	0x200005d0
 8008d94:	2001db64 	.word	0x2001db64
 8008d98:	08019f10 	.word	0x08019f10
 8008d9c:	08019ed4 	.word	0x08019ed4
 8008da0:	200005c4 	.word	0x200005c4
 8008da4:	2004224a 	.word	0x2004224a
 8008da8:	2004228c 	.word	0x2004228c
 8008dac:	2004229c 	.word	0x2004229c
 8008db0:	08019f1c 	.word	0x08019f1c
 8008db4:	08019e78 	.word	0x08019e78
 8008db8:	08019f28 	.word	0x08019f28

	case 7:
		led.fullColor('W');
 8008dbc:	2157      	movs	r1, #87	; 0x57
 8008dbe:	48c2      	ldr	r0, [pc, #776]	; (80090c8 <cppLoop+0x1510>)
 8008dc0:	f7f9 fa48 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008dc4:	f7f8 f96c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008dc8:	2100      	movs	r1, #0
 8008dca:	2000      	movs	r0, #0
 8008dcc:	f7f8 f978 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008dd0:	48be      	ldr	r0, [pc, #760]	; (80090cc <cppLoop+0x1514>)
 8008dd2:	f7fb f856 	bl	8003e82 <_ZN9LineTrace9getMaxAccEv>
 8008dd6:	ee10 3a10 	vmov	r3, s0
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f7 fbcc 	bl	8000578 <__aeabi_f2d>
 8008de0:	4603      	mov	r3, r0
 8008de2:	460c      	mov	r4, r1
 8008de4:	461a      	mov	r2, r3
 8008de6:	4623      	mov	r3, r4
 8008de8:	48b9      	ldr	r0, [pc, #740]	; (80090d0 <cppLoop+0x1518>)
 8008dea:	f7f8 f993 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008dee:	2101      	movs	r1, #1
 8008df0:	2000      	movs	r0, #0
 8008df2:	f7f8 f965 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008df6:	48b5      	ldr	r0, [pc, #724]	; (80090cc <cppLoop+0x1514>)
 8008df8:	f7fb f879 	bl	8003eee <_ZN9LineTrace9getMaxDecEv>
 8008dfc:	ee10 3a10 	vmov	r3, s0
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f7 fbb9 	bl	8000578 <__aeabi_f2d>
 8008e06:	4603      	mov	r3, r0
 8008e08:	460c      	mov	r4, r1
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	4623      	mov	r3, r4
 8008e0e:	48b1      	ldr	r0, [pc, #708]	; (80090d4 <cppLoop+0x151c>)
 8008e10:	f7f8 f980 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008e14:	48b0      	ldr	r0, [pc, #704]	; (80090d8 <cppLoop+0x1520>)
 8008e16:	f7f9 f9b9 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b08      	cmp	r3, #8
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d022      	beq.n	8008e70 <cppLoop+0x12b8>
			led.LR(-1, 1);
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e30:	48a5      	ldr	r0, [pc, #660]	; (80090c8 <cppLoop+0x1510>)
 8008e32:	f7f9 facb 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e3a:	f000 ff9d 	bl	8009d78 <HAL_Delay>

			selector_acc++;
 8008e3e:	4ba7      	ldr	r3, [pc, #668]	; (80090dc <cppLoop+0x1524>)
 8008e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3301      	adds	r3, #1
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	b21a      	sxth	r2, r3
 8008e4c:	4ba3      	ldr	r3, [pc, #652]	; (80090dc <cppLoop+0x1524>)
 8008e4e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008e50:	4ba2      	ldr	r3, [pc, #648]	; (80090dc <cppLoop+0x1524>)
 8008e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	dd02      	ble.n	8008e60 <cppLoop+0x12a8>
 8008e5a:	4ba0      	ldr	r3, [pc, #640]	; (80090dc <cppLoop+0x1524>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e60:	2200      	movs	r2, #0
 8008e62:	f04f 31ff 	mov.w	r1, #4294967295
 8008e66:	4898      	ldr	r0, [pc, #608]	; (80090c8 <cppLoop+0x1510>)
 8008e68:	f7f9 fab0 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008e6c:	f000 be4a 	b.w	8009b04 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 8008e70:	4899      	ldr	r0, [pc, #612]	; (80090d8 <cppLoop+0x1520>)
 8008e72:	f7f9 f98b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b10      	cmp	r3, #16
 8008e7a:	bf0c      	ite	eq
 8008e7c:	2301      	moveq	r3, #1
 8008e7e:	2300      	movne	r3, #0
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d03c      	beq.n	8008f00 <cppLoop+0x1348>
			led.LR(-1, 1);
 8008e86:	2201      	movs	r2, #1
 8008e88:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8c:	488e      	ldr	r0, [pc, #568]	; (80090c8 <cppLoop+0x1510>)
 8008e8e:	f7f9 fa9d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e92:	2064      	movs	r0, #100	; 0x64
 8008e94:	f000 ff70 	bl	8009d78 <HAL_Delay>
			if(selector_acc == 0){
 8008e98:	4b90      	ldr	r3, [pc, #576]	; (80090dc <cppLoop+0x1524>)
 8008e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d113      	bne.n	8008eca <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 8008ea2:	4b8f      	ldr	r3, [pc, #572]	; (80090e0 <cppLoop+0x1528>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f7 fb66 	bl	8000578 <__aeabi_f2d>
 8008eac:	a384      	add	r3, pc, #528	; (adr r3, 80090c0 <cppLoop+0x1508>)
 8008eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb2:	f7f7 fa03 	bl	80002bc <__adddf3>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	4618      	mov	r0, r3
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	f7f7 feab 	bl	8000c18 <__aeabi_d2f>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	4b86      	ldr	r3, [pc, #536]	; (80090e0 <cppLoop+0x1528>)
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	e012      	b.n	8008ef0 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 8008eca:	4b86      	ldr	r3, [pc, #536]	; (80090e4 <cppLoop+0x152c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f7 fb52 	bl	8000578 <__aeabi_f2d>
 8008ed4:	a37a      	add	r3, pc, #488	; (adr r3, 80090c0 <cppLoop+0x1508>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	f7f7 f9ef 	bl	80002bc <__adddf3>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7f7 fe97 	bl	8000c18 <__aeabi_d2f>
 8008eea:	4602      	mov	r2, r0
 8008eec:	4b7d      	ldr	r3, [pc, #500]	; (80090e4 <cppLoop+0x152c>)
 8008eee:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ef6:	4874      	ldr	r0, [pc, #464]	; (80090c8 <cppLoop+0x1510>)
 8008ef8:	f7f9 fa68 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008efc:	f000 be02 	b.w	8009b04 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 8008f00:	4875      	ldr	r0, [pc, #468]	; (80090d8 <cppLoop+0x1520>)
 8008f02:	f7f9 f943 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d03c      	beq.n	8008f90 <cppLoop+0x13d8>
			led.LR(-1, 1);
 8008f16:	2201      	movs	r2, #1
 8008f18:	f04f 31ff 	mov.w	r1, #4294967295
 8008f1c:	486a      	ldr	r0, [pc, #424]	; (80090c8 <cppLoop+0x1510>)
 8008f1e:	f7f9 fa55 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f22:	2064      	movs	r0, #100	; 0x64
 8008f24:	f000 ff28 	bl	8009d78 <HAL_Delay>
			if(selector_acc == 0){
 8008f28:	4b6c      	ldr	r3, [pc, #432]	; (80090dc <cppLoop+0x1524>)
 8008f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d113      	bne.n	8008f5a <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 8008f32:	4b6b      	ldr	r3, [pc, #428]	; (80090e0 <cppLoop+0x1528>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7f7 fb1e 	bl	8000578 <__aeabi_f2d>
 8008f3c:	a360      	add	r3, pc, #384	; (adr r3, 80090c0 <cppLoop+0x1508>)
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f9b9 	bl	80002b8 <__aeabi_dsub>
 8008f46:	4603      	mov	r3, r0
 8008f48:	460c      	mov	r4, r1
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	4621      	mov	r1, r4
 8008f4e:	f7f7 fe63 	bl	8000c18 <__aeabi_d2f>
 8008f52:	4602      	mov	r2, r0
 8008f54:	4b62      	ldr	r3, [pc, #392]	; (80090e0 <cppLoop+0x1528>)
 8008f56:	601a      	str	r2, [r3, #0]
 8008f58:	e012      	b.n	8008f80 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 8008f5a:	4b62      	ldr	r3, [pc, #392]	; (80090e4 <cppLoop+0x152c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7f7 fb0a 	bl	8000578 <__aeabi_f2d>
 8008f64:	a356      	add	r3, pc, #344	; (adr r3, 80090c0 <cppLoop+0x1508>)
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 f9a5 	bl	80002b8 <__aeabi_dsub>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	460c      	mov	r4, r1
 8008f72:	4618      	mov	r0, r3
 8008f74:	4621      	mov	r1, r4
 8008f76:	f7f7 fe4f 	bl	8000c18 <__aeabi_d2f>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b59      	ldr	r3, [pc, #356]	; (80090e4 <cppLoop+0x152c>)
 8008f7e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f80:	2200      	movs	r2, #0
 8008f82:	f04f 31ff 	mov.w	r1, #4294967295
 8008f86:	4850      	ldr	r0, [pc, #320]	; (80090c8 <cppLoop+0x1510>)
 8008f88:	f7f9 fa20 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f8c:	f000 bdba 	b.w	8009b04 <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 8008f90:	4851      	ldr	r0, [pc, #324]	; (80090d8 <cppLoop+0x1520>)
 8008f92:	f7f9 f8fb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2301      	moveq	r3, #1
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 85ae 	beq.w	8009b04 <cppLoop+0x1f4c>
			led.LR(-1, 1);
 8008fa8:	2201      	movs	r2, #1
 8008faa:	f04f 31ff 	mov.w	r1, #4294967295
 8008fae:	4846      	ldr	r0, [pc, #280]	; (80090c8 <cppLoop+0x1510>)
 8008fb0:	f7f9 fa0c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008fb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008fb8:	f000 fede 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	4b47      	ldr	r3, [pc, #284]	; (80090e0 <cppLoop+0x1528>)
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4948      	ldr	r1, [pc, #288]	; (80090e8 <cppLoop+0x1530>)
 8008fc6:	4849      	ldr	r0, [pc, #292]	; (80090ec <cppLoop+0x1534>)
 8008fc8:	f7f8 fc58 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008fcc:	2300      	movs	r3, #0
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	4b44      	ldr	r3, [pc, #272]	; (80090e4 <cppLoop+0x152c>)
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	4946      	ldr	r1, [pc, #280]	; (80090f0 <cppLoop+0x1538>)
 8008fd6:	4845      	ldr	r0, [pc, #276]	; (80090ec <cppLoop+0x1534>)
 8008fd8:	f7f8 fc50 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008fdc:	4b40      	ldr	r3, [pc, #256]	; (80090e0 <cppLoop+0x1528>)
 8008fde:	edd3 7a00 	vldr	s15, [r3]
 8008fe2:	4b40      	ldr	r3, [pc, #256]	; (80090e4 <cppLoop+0x152c>)
 8008fe4:	ed93 7a00 	vldr	s14, [r3]
 8008fe8:	eef0 0a47 	vmov.f32	s1, s14
 8008fec:	eeb0 0a67 	vmov.f32	s0, s15
 8008ff0:	4836      	ldr	r0, [pc, #216]	; (80090cc <cppLoop+0x1514>)
 8008ff2:	f7fa ff12 	bl	8003e1a <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8008ffc:	4832      	ldr	r0, [pc, #200]	; (80090c8 <cppLoop+0x1510>)
 8008ffe:	f7f9 f9e5 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009002:	f000 bd7f 	b.w	8009b04 <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 8009006:	2157      	movs	r1, #87	; 0x57
 8009008:	482f      	ldr	r0, [pc, #188]	; (80090c8 <cppLoop+0x1510>)
 800900a:	f7f9 f923 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800900e:	f7f8 f847 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009012:	2100      	movs	r1, #0
 8009014:	2000      	movs	r0, #0
 8009016:	f7f8 f853 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800901a:	482c      	ldr	r0, [pc, #176]	; (80090cc <cppLoop+0x1514>)
 800901c:	f7fa ff55 	bl	8003eca <_ZN9LineTrace10getMaxAcc2Ev>
 8009020:	ee10 3a10 	vmov	r3, s0
 8009024:	4618      	mov	r0, r3
 8009026:	f7f7 faa7 	bl	8000578 <__aeabi_f2d>
 800902a:	4603      	mov	r3, r0
 800902c:	460c      	mov	r4, r1
 800902e:	461a      	mov	r2, r3
 8009030:	4623      	mov	r3, r4
 8009032:	4830      	ldr	r0, [pc, #192]	; (80090f4 <cppLoop+0x153c>)
 8009034:	f7f8 f86e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009038:	2101      	movs	r1, #1
 800903a:	2000      	movs	r0, #0
 800903c:	f7f8 f840 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8009040:	4822      	ldr	r0, [pc, #136]	; (80090cc <cppLoop+0x1514>)
 8009042:	f7fa ff30 	bl	8003ea6 <_ZN9LineTrace10getMaxDec2Ev>
 8009046:	ee10 3a10 	vmov	r3, s0
 800904a:	4618      	mov	r0, r3
 800904c:	f7f7 fa94 	bl	8000578 <__aeabi_f2d>
 8009050:	4603      	mov	r3, r0
 8009052:	460c      	mov	r4, r1
 8009054:	461a      	mov	r2, r3
 8009056:	4623      	mov	r3, r4
 8009058:	4827      	ldr	r0, [pc, #156]	; (80090f8 <cppLoop+0x1540>)
 800905a:	f7f8 f85b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800905e:	481e      	ldr	r0, [pc, #120]	; (80090d8 <cppLoop+0x1520>)
 8009060:	f7f9 f894 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009064:	4603      	mov	r3, r0
 8009066:	2b08      	cmp	r3, #8
 8009068:	bf0c      	ite	eq
 800906a:	2301      	moveq	r3, #1
 800906c:	2300      	movne	r3, #0
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d045      	beq.n	8009100 <cppLoop+0x1548>
			led.LR(-1, 1);
 8009074:	2201      	movs	r2, #1
 8009076:	f04f 31ff 	mov.w	r1, #4294967295
 800907a:	4813      	ldr	r0, [pc, #76]	; (80090c8 <cppLoop+0x1510>)
 800907c:	f7f9 f9a6 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009080:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009084:	f000 fe78 	bl	8009d78 <HAL_Delay>

			selector_acc2++;
 8009088:	4b1c      	ldr	r3, [pc, #112]	; (80090fc <cppLoop+0x1544>)
 800908a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800908e:	b29b      	uxth	r3, r3
 8009090:	3301      	adds	r3, #1
 8009092:	b29b      	uxth	r3, r3
 8009094:	b21a      	sxth	r2, r3
 8009096:	4b19      	ldr	r3, [pc, #100]	; (80090fc <cppLoop+0x1544>)
 8009098:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 800909a:	4b18      	ldr	r3, [pc, #96]	; (80090fc <cppLoop+0x1544>)
 800909c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	dd02      	ble.n	80090aa <cppLoop+0x14f2>
 80090a4:	4b15      	ldr	r3, [pc, #84]	; (80090fc <cppLoop+0x1544>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80090aa:	2200      	movs	r2, #0
 80090ac:	f04f 31ff 	mov.w	r1, #4294967295
 80090b0:	4805      	ldr	r0, [pc, #20]	; (80090c8 <cppLoop+0x1510>)
 80090b2:	f7f9 f98b 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 80090b6:	f000 bd27 	b.w	8009b08 <cppLoop+0x1f50>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	9999999a 	.word	0x9999999a
 80090c4:	3fb99999 	.word	0x3fb99999
 80090c8:	200005d0 	.word	0x200005d0
 80090cc:	2001db64 	.word	0x2001db64
 80090d0:	08019f34 	.word	0x08019f34
 80090d4:	08019f40 	.word	0x08019f40
 80090d8:	200005c4 	.word	0x200005c4
 80090dc:	20042244 	.word	0x20042244
 80090e0:	200422a4 	.word	0x200422a4
 80090e4:	200422ac 	.word	0x200422ac
 80090e8:	08019f4c 	.word	0x08019f4c
 80090ec:	08019e78 	.word	0x08019e78
 80090f0:	08019f54 	.word	0x08019f54
 80090f4:	08019f5c 	.word	0x08019f5c
 80090f8:	08019f68 	.word	0x08019f68
 80090fc:	20042246 	.word	0x20042246
		else if(joy_stick.getValue() == JOY_R){
 8009100:	48bf      	ldr	r0, [pc, #764]	; (8009400 <cppLoop+0x1848>)
 8009102:	f7f9 f843 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009106:	4603      	mov	r3, r0
 8009108:	2b10      	cmp	r3, #16
 800910a:	bf0c      	ite	eq
 800910c:	2301      	moveq	r3, #1
 800910e:	2300      	movne	r3, #0
 8009110:	b2db      	uxtb	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d03c      	beq.n	8009190 <cppLoop+0x15d8>
			led.LR(-1, 1);
 8009116:	2201      	movs	r2, #1
 8009118:	f04f 31ff 	mov.w	r1, #4294967295
 800911c:	48b9      	ldr	r0, [pc, #740]	; (8009404 <cppLoop+0x184c>)
 800911e:	f7f9 f955 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009122:	2064      	movs	r0, #100	; 0x64
 8009124:	f000 fe28 	bl	8009d78 <HAL_Delay>
			if(selector_acc2 == 0){
 8009128:	4bb7      	ldr	r3, [pc, #732]	; (8009408 <cppLoop+0x1850>)
 800912a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d113      	bne.n	800915a <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 8009132:	4bb6      	ldr	r3, [pc, #728]	; (800940c <cppLoop+0x1854>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4618      	mov	r0, r3
 8009138:	f7f7 fa1e 	bl	8000578 <__aeabi_f2d>
 800913c:	a3ae      	add	r3, pc, #696	; (adr r3, 80093f8 <cppLoop+0x1840>)
 800913e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009142:	f7f7 f8bb 	bl	80002bc <__adddf3>
 8009146:	4603      	mov	r3, r0
 8009148:	460c      	mov	r4, r1
 800914a:	4618      	mov	r0, r3
 800914c:	4621      	mov	r1, r4
 800914e:	f7f7 fd63 	bl	8000c18 <__aeabi_d2f>
 8009152:	4602      	mov	r2, r0
 8009154:	4bad      	ldr	r3, [pc, #692]	; (800940c <cppLoop+0x1854>)
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	e012      	b.n	8009180 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 800915a:	4bad      	ldr	r3, [pc, #692]	; (8009410 <cppLoop+0x1858>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4618      	mov	r0, r3
 8009160:	f7f7 fa0a 	bl	8000578 <__aeabi_f2d>
 8009164:	a3a4      	add	r3, pc, #656	; (adr r3, 80093f8 <cppLoop+0x1840>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 f8a7 	bl	80002bc <__adddf3>
 800916e:	4603      	mov	r3, r0
 8009170:	460c      	mov	r4, r1
 8009172:	4618      	mov	r0, r3
 8009174:	4621      	mov	r1, r4
 8009176:	f7f7 fd4f 	bl	8000c18 <__aeabi_d2f>
 800917a:	4602      	mov	r2, r0
 800917c:	4ba4      	ldr	r3, [pc, #656]	; (8009410 <cppLoop+0x1858>)
 800917e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009180:	2200      	movs	r2, #0
 8009182:	f04f 31ff 	mov.w	r1, #4294967295
 8009186:	489f      	ldr	r0, [pc, #636]	; (8009404 <cppLoop+0x184c>)
 8009188:	f7f9 f920 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800918c:	f000 bcbc 	b.w	8009b08 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8009190:	489b      	ldr	r0, [pc, #620]	; (8009400 <cppLoop+0x1848>)
 8009192:	f7f8 fffb 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009196:	4603      	mov	r3, r0
 8009198:	2b01      	cmp	r3, #1
 800919a:	bf0c      	ite	eq
 800919c:	2301      	moveq	r3, #1
 800919e:	2300      	movne	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d03c      	beq.n	8009220 <cppLoop+0x1668>
			led.LR(-1, 1);
 80091a6:	2201      	movs	r2, #1
 80091a8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ac:	4895      	ldr	r0, [pc, #596]	; (8009404 <cppLoop+0x184c>)
 80091ae:	f7f9 f90d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80091b2:	2064      	movs	r0, #100	; 0x64
 80091b4:	f000 fde0 	bl	8009d78 <HAL_Delay>
			if(selector_acc2 == 0){
 80091b8:	4b93      	ldr	r3, [pc, #588]	; (8009408 <cppLoop+0x1850>)
 80091ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d113      	bne.n	80091ea <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 80091c2:	4b92      	ldr	r3, [pc, #584]	; (800940c <cppLoop+0x1854>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f7 f9d6 	bl	8000578 <__aeabi_f2d>
 80091cc:	a38a      	add	r3, pc, #552	; (adr r3, 80093f8 <cppLoop+0x1840>)
 80091ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d2:	f7f7 f871 	bl	80002b8 <__aeabi_dsub>
 80091d6:	4603      	mov	r3, r0
 80091d8:	460c      	mov	r4, r1
 80091da:	4618      	mov	r0, r3
 80091dc:	4621      	mov	r1, r4
 80091de:	f7f7 fd1b 	bl	8000c18 <__aeabi_d2f>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4b89      	ldr	r3, [pc, #548]	; (800940c <cppLoop+0x1854>)
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	e012      	b.n	8009210 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 80091ea:	4b89      	ldr	r3, [pc, #548]	; (8009410 <cppLoop+0x1858>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7f7 f9c2 	bl	8000578 <__aeabi_f2d>
 80091f4:	a380      	add	r3, pc, #512	; (adr r3, 80093f8 <cppLoop+0x1840>)
 80091f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fa:	f7f7 f85d 	bl	80002b8 <__aeabi_dsub>
 80091fe:	4603      	mov	r3, r0
 8009200:	460c      	mov	r4, r1
 8009202:	4618      	mov	r0, r3
 8009204:	4621      	mov	r1, r4
 8009206:	f7f7 fd07 	bl	8000c18 <__aeabi_d2f>
 800920a:	4602      	mov	r2, r0
 800920c:	4b80      	ldr	r3, [pc, #512]	; (8009410 <cppLoop+0x1858>)
 800920e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009210:	2200      	movs	r2, #0
 8009212:	f04f 31ff 	mov.w	r1, #4294967295
 8009216:	487b      	ldr	r0, [pc, #492]	; (8009404 <cppLoop+0x184c>)
 8009218:	f7f9 f8d8 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800921c:	f000 bc74 	b.w	8009b08 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 8009220:	4877      	ldr	r0, [pc, #476]	; (8009400 <cppLoop+0x1848>)
 8009222:	f7f8 ffb3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009226:	4603      	mov	r3, r0
 8009228:	2b02      	cmp	r3, #2
 800922a:	bf0c      	ite	eq
 800922c:	2301      	moveq	r3, #1
 800922e:	2300      	movne	r3, #0
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 8468 	beq.w	8009b08 <cppLoop+0x1f50>
			led.LR(-1, 1);
 8009238:	2201      	movs	r2, #1
 800923a:	f04f 31ff 	mov.w	r1, #4294967295
 800923e:	4871      	ldr	r0, [pc, #452]	; (8009404 <cppLoop+0x184c>)
 8009240:	f7f9 f8c4 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009244:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009248:	f000 fd96 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800924c:	2300      	movs	r3, #0
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	4b6e      	ldr	r3, [pc, #440]	; (800940c <cppLoop+0x1854>)
 8009252:	2201      	movs	r2, #1
 8009254:	496f      	ldr	r1, [pc, #444]	; (8009414 <cppLoop+0x185c>)
 8009256:	4870      	ldr	r0, [pc, #448]	; (8009418 <cppLoop+0x1860>)
 8009258:	f7f8 fb10 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800925c:	2300      	movs	r3, #0
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4b6b      	ldr	r3, [pc, #428]	; (8009410 <cppLoop+0x1858>)
 8009262:	2201      	movs	r2, #1
 8009264:	496d      	ldr	r1, [pc, #436]	; (800941c <cppLoop+0x1864>)
 8009266:	486c      	ldr	r0, [pc, #432]	; (8009418 <cppLoop+0x1860>)
 8009268:	f7f8 fb08 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800926c:	4b67      	ldr	r3, [pc, #412]	; (800940c <cppLoop+0x1854>)
 800926e:	edd3 7a00 	vldr	s15, [r3]
 8009272:	4b67      	ldr	r3, [pc, #412]	; (8009410 <cppLoop+0x1858>)
 8009274:	ed93 7a00 	vldr	s14, [r3]
 8009278:	eef0 0a47 	vmov.f32	s1, s14
 800927c:	eeb0 0a67 	vmov.f32	s0, s15
 8009280:	4867      	ldr	r0, [pc, #412]	; (8009420 <cppLoop+0x1868>)
 8009282:	f7fa fde4 	bl	8003e4e <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009286:	2200      	movs	r2, #0
 8009288:	f04f 31ff 	mov.w	r1, #4294967295
 800928c:	485d      	ldr	r0, [pc, #372]	; (8009404 <cppLoop+0x184c>)
 800928e:	f7f9 f89d 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009292:	f000 bc39 	b.w	8009b08 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 8009296:	217e      	movs	r1, #126	; 0x7e
 8009298:	485a      	ldr	r0, [pc, #360]	; (8009404 <cppLoop+0x184c>)
 800929a:	f7f8 ffdb 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800929e:	f7f7 feff 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092a2:	2100      	movs	r1, #0
 80092a4:	2000      	movs	r0, #0
 80092a6:	f7f7 ff0b 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80092aa:	485e      	ldr	r0, [pc, #376]	; (8009424 <cppLoop+0x186c>)
 80092ac:	f7f7 ff32 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092b0:	2101      	movs	r1, #1
 80092b2:	2000      	movs	r0, #0
 80092b4:	f7f7 ff04 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80092b8:	485b      	ldr	r0, [pc, #364]	; (8009428 <cppLoop+0x1870>)
 80092ba:	f7f7 ff2b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092be:	4850      	ldr	r0, [pc, #320]	; (8009400 <cppLoop+0x1848>)
 80092c0:	f7f8 ff64 	bl	800218c <_ZN8JoyStick8getValueEv>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	bf0c      	ite	eq
 80092ca:	2301      	moveq	r3, #1
 80092cc:	2300      	movne	r3, #0
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 841b 	beq.w	8009b0c <cppLoop+0x1f54>
			led.LR(-1, 1);
 80092d6:	2201      	movs	r2, #1
 80092d8:	f04f 31ff 	mov.w	r1, #4294967295
 80092dc:	4849      	ldr	r0, [pc, #292]	; (8009404 <cppLoop+0x184c>)
 80092de:	f7f9 f875 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 80092e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092e6:	f000 fd47 	bl	8009d78 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80092ea:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800942c <cppLoop+0x1874>
 80092ee:	484c      	ldr	r0, [pc, #304]	; (8009420 <cppLoop+0x1868>)
 80092f0:	f7fa fce4 	bl	8003cbc <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80092f4:	484a      	ldr	r0, [pc, #296]	; (8009420 <cppLoop+0x1868>)
 80092f6:	f7fa ff27 	bl	8004148 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80092fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092fe:	f000 fd3b 	bl	8009d78 <HAL_Delay>

			led.fullColor('R');
 8009302:	2152      	movs	r1, #82	; 0x52
 8009304:	483f      	ldr	r0, [pc, #252]	; (8009404 <cppLoop+0x184c>)
 8009306:	f7f8 ffa5 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800930a:	4849      	ldr	r0, [pc, #292]	; (8009430 <cppLoop+0x1878>)
 800930c:	f7f8 fa08 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009310:	f242 7010 	movw	r0, #10000	; 0x2710
 8009314:	f000 fd30 	bl	8009d78 <HAL_Delay>

			line_trace.stop();
 8009318:	4841      	ldr	r0, [pc, #260]	; (8009420 <cppLoop+0x1868>)
 800931a:	f7fa ffbb 	bl	8004294 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800931e:	4945      	ldr	r1, [pc, #276]	; (8009434 <cppLoop+0x187c>)
 8009320:	4845      	ldr	r0, [pc, #276]	; (8009438 <cppLoop+0x1880>)
 8009322:	f7f8 fa36 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8009326:	4842      	ldr	r0, [pc, #264]	; (8009430 <cppLoop+0x1878>)
 8009328:	f7f8 f9be 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 800932c:	eef0 7a40 	vmov.f32	s15, s0
 8009330:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009334:	1d3b      	adds	r3, r7, #4
 8009336:	2201      	movs	r2, #1
 8009338:	4619      	mov	r1, r3
 800933a:	2001      	movs	r0, #1
 800933c:	f7f8 fa4c 	bl	80017d8 <sd_write_float>
			user_fclose();
 8009340:	f7f8 fa3a 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 8009344:	2200      	movs	r2, #0
 8009346:	f04f 31ff 	mov.w	r1, #4294967295
 800934a:	482e      	ldr	r0, [pc, #184]	; (8009404 <cppLoop+0x184c>)
 800934c:	f7f9 f83e 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 8009350:	e3dc      	b.n	8009b0c <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 8009352:	217e      	movs	r1, #126	; 0x7e
 8009354:	482b      	ldr	r0, [pc, #172]	; (8009404 <cppLoop+0x184c>)
 8009356:	f7f8 ff7d 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800935a:	f7f7 fea1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800935e:	2100      	movs	r1, #0
 8009360:	2000      	movs	r0, #0
 8009362:	f7f7 fead 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009366:	4835      	ldr	r0, [pc, #212]	; (800943c <cppLoop+0x1884>)
 8009368:	f7f7 fed4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800936c:	2101      	movs	r1, #1
 800936e:	2000      	movs	r0, #0
 8009370:	f7f7 fea6 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009374:	4832      	ldr	r0, [pc, #200]	; (8009440 <cppLoop+0x1888>)
 8009376:	f7f7 fecd 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800937a:	4821      	ldr	r0, [pc, #132]	; (8009400 <cppLoop+0x1848>)
 800937c:	f7f8 ff06 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009380:	4603      	mov	r3, r0
 8009382:	2b02      	cmp	r3, #2
 8009384:	bf0c      	ite	eq
 8009386:	2301      	moveq	r3, #1
 8009388:	2300      	movne	r3, #0
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b00      	cmp	r3, #0
 800938e:	f000 83bf 	beq.w	8009b10 <cppLoop+0x1f58>
			HAL_Delay(500);
 8009392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009396:	f000 fcef 	bl	8009d78 <HAL_Delay>
			led.LR(-1, 1);
 800939a:	2201      	movs	r2, #1
 800939c:	f04f 31ff 	mov.w	r1, #4294967295
 80093a0:	4818      	ldr	r0, [pc, #96]	; (8009404 <cppLoop+0x184c>)
 80093a2:	f7f9 f813 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80093a6:	2102      	movs	r1, #2
 80093a8:	481d      	ldr	r0, [pc, #116]	; (8009420 <cppLoop+0x1868>)
 80093aa:	f7fa febb 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80093ae:	4b25      	ldr	r3, [pc, #148]	; (8009444 <cppLoop+0x188c>)
 80093b0:	edd3 7a00 	vldr	s15, [r3]
 80093b4:	eeb0 0a67 	vmov.f32	s0, s15
 80093b8:	4819      	ldr	r0, [pc, #100]	; (8009420 <cppLoop+0x1868>)
 80093ba:	f7fa fc8e 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80093be:	4b21      	ldr	r3, [pc, #132]	; (8009444 <cppLoop+0x188c>)
 80093c0:	edd3 7a00 	vldr	s15, [r3]
 80093c4:	eeb0 0a67 	vmov.f32	s0, s15
 80093c8:	4815      	ldr	r0, [pc, #84]	; (8009420 <cppLoop+0x1868>)
 80093ca:	f7fa fc96 	bl	8003cfa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80093ce:	4b1d      	ldr	r3, [pc, #116]	; (8009444 <cppLoop+0x188c>)
 80093d0:	edd3 7a00 	vldr	s15, [r3]
 80093d4:	eeb0 0a67 	vmov.f32	s0, s15
 80093d8:	4811      	ldr	r0, [pc, #68]	; (8009420 <cppLoop+0x1868>)
 80093da:	f7fa fcae 	bl	8003d3a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80093de:	4810      	ldr	r0, [pc, #64]	; (8009420 <cppLoop+0x1868>)
 80093e0:	f7fb f89c 	bl	800451c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80093e4:	2200      	movs	r2, #0
 80093e6:	f04f 31ff 	mov.w	r1, #4294967295
 80093ea:	4806      	ldr	r0, [pc, #24]	; (8009404 <cppLoop+0x184c>)
 80093ec:	f7f8 ffee 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80093f0:	e38e      	b.n	8009b10 <cppLoop+0x1f58>
 80093f2:	bf00      	nop
 80093f4:	f3af 8000 	nop.w
 80093f8:	9999999a 	.word	0x9999999a
 80093fc:	3fb99999 	.word	0x3fb99999
 8009400:	200005c4 	.word	0x200005c4
 8009404:	200005d0 	.word	0x200005d0
 8009408:	20042246 	.word	0x20042246
 800940c:	200422b4 	.word	0x200422b4
 8009410:	200422bc 	.word	0x200422bc
 8009414:	08019f74 	.word	0x08019f74
 8009418:	08019e78 	.word	0x08019e78
 800941c:	08019f80 	.word	0x08019f80
 8009420:	2001db64 	.word	0x2001db64
 8009424:	08019f8c 	.word	0x08019f8c
 8009428:	08019f94 	.word	0x08019f94
 800942c:	00000000 	.word	0x00000000
 8009430:	2001dac0 	.word	0x2001dac0
 8009434:	08019fa0 	.word	0x08019fa0
 8009438:	08019fa8 	.word	0x08019fa8
 800943c:	08019fb4 	.word	0x08019fb4
 8009440:	08019fc0 	.word	0x08019fc0
 8009444:	2004228c 	.word	0x2004228c

	case 11:
		led.fullColor('~');
 8009448:	217e      	movs	r1, #126	; 0x7e
 800944a:	48b5      	ldr	r0, [pc, #724]	; (8009720 <cppLoop+0x1b68>)
 800944c:	f7f8 ff02 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 8009450:	f7f7 fe26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009454:	2100      	movs	r1, #0
 8009456:	2000      	movs	r0, #0
 8009458:	f7f7 fe32 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 800945c:	48b1      	ldr	r0, [pc, #708]	; (8009724 <cppLoop+0x1b6c>)
 800945e:	f7f7 fe59 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009462:	2101      	movs	r1, #1
 8009464:	2000      	movs	r0, #0
 8009466:	f7f7 fe2b 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800946a:	48af      	ldr	r0, [pc, #700]	; (8009728 <cppLoop+0x1b70>)
 800946c:	f7f7 fe52 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009470:	48ae      	ldr	r0, [pc, #696]	; (800972c <cppLoop+0x1b74>)
 8009472:	f7f8 fe8b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009476:	4603      	mov	r3, r0
 8009478:	2b02      	cmp	r3, #2
 800947a:	bf0c      	ite	eq
 800947c:	2301      	moveq	r3, #1
 800947e:	2300      	movne	r3, #0
 8009480:	b2db      	uxtb	r3, r3
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 8346 	beq.w	8009b14 <cppLoop+0x1f5c>
			HAL_Delay(1000);
 8009488:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800948c:	f000 fc74 	bl	8009d78 <HAL_Delay>
			led.LR(-1, 1);
 8009490:	2201      	movs	r2, #1
 8009492:	f04f 31ff 	mov.w	r1, #4294967295
 8009496:	48a2      	ldr	r0, [pc, #648]	; (8009720 <cppLoop+0x1b68>)
 8009498:	f7f8 ff98 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800949c:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8009730 <cppLoop+0x1b78>
 80094a0:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8009730 <cppLoop+0x1b78>
 80094a4:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8009730 <cppLoop+0x1b78>
 80094a8:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8009730 <cppLoop+0x1b78>
 80094ac:	48a1      	ldr	r0, [pc, #644]	; (8009734 <cppLoop+0x1b7c>)
 80094ae:	f7f7 fecf 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 80094b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80094b6:	f000 fc5f 	bl	8009d78 <HAL_Delay>
			esc.off();
 80094ba:	489e      	ldr	r0, [pc, #632]	; (8009734 <cppLoop+0x1b7c>)
 80094bc:	f7f7 ff62 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80094c0:	2200      	movs	r2, #0
 80094c2:	f04f 31ff 	mov.w	r1, #4294967295
 80094c6:	4896      	ldr	r0, [pc, #600]	; (8009720 <cppLoop+0x1b68>)
 80094c8:	f7f8 ff80 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 80094cc:	e322      	b.n	8009b14 <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 80094ce:	217e      	movs	r1, #126	; 0x7e
 80094d0:	4893      	ldr	r0, [pc, #588]	; (8009720 <cppLoop+0x1b68>)
 80094d2:	f7f8 febf 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80094d6:	f7f7 fde3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094da:	2100      	movs	r1, #0
 80094dc:	2000      	movs	r0, #0
 80094de:	f7f7 fdef 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80094e2:	4895      	ldr	r0, [pc, #596]	; (8009738 <cppLoop+0x1b80>)
 80094e4:	f7f7 fe16 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094e8:	2101      	movs	r1, #1
 80094ea:	2000      	movs	r0, #0
 80094ec:	f7f7 fde8 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80094f0:	4892      	ldr	r0, [pc, #584]	; (800973c <cppLoop+0x1b84>)
 80094f2:	f7f7 fe0f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80094f6:	488d      	ldr	r0, [pc, #564]	; (800972c <cppLoop+0x1b74>)
 80094f8:	f7f8 fe48 	bl	800218c <_ZN8JoyStick8getValueEv>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b02      	cmp	r3, #2
 8009500:	bf0c      	ite	eq
 8009502:	2301      	moveq	r3, #1
 8009504:	2300      	movne	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 8305 	beq.w	8009b18 <cppLoop+0x1f60>
			HAL_Delay(1500);
 800950e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009512:	f000 fc31 	bl	8009d78 <HAL_Delay>
			led.LR(-1, 1);
 8009516:	2201      	movs	r2, #1
 8009518:	f04f 31ff 	mov.w	r1, #4294967295
 800951c:	4880      	ldr	r0, [pc, #512]	; (8009720 <cppLoop+0x1b68>)
 800951e:	f7f8 ff55 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009522:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009526:	f000 fc27 	bl	8009d78 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800952a:	eddf 1a81 	vldr	s3, [pc, #516]	; 8009730 <cppLoop+0x1b78>
 800952e:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8009730 <cppLoop+0x1b78>
 8009532:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8009730 <cppLoop+0x1b78>
 8009536:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8009730 <cppLoop+0x1b78>
 800953a:	487e      	ldr	r0, [pc, #504]	; (8009734 <cppLoop+0x1b7c>)
 800953c:	f7f7 fe88 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009544:	f000 fc18 	bl	8009d78 <HAL_Delay>

			logger.start();
 8009548:	487d      	ldr	r0, [pc, #500]	; (8009740 <cppLoop+0x1b88>)
 800954a:	f7fb fb6c 	bl	8004c26 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800954e:	487d      	ldr	r0, [pc, #500]	; (8009744 <cppLoop+0x1b8c>)
 8009550:	f7fc fcaf 	bl	8005eb2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8009554:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8009748 <cppLoop+0x1b90>
 8009558:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800955c:	4879      	ldr	r0, [pc, #484]	; (8009744 <cppLoop+0x1b8c>)
 800955e:	f7fc fc3b 	bl	8005dd8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009566:	f000 fc07 	bl	8009d78 <HAL_Delay>

			logger.stop();
 800956a:	4875      	ldr	r0, [pc, #468]	; (8009740 <cppLoop+0x1b88>)
 800956c:	f7fb fb6b 	bl	8004c46 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009570:	4874      	ldr	r0, [pc, #464]	; (8009744 <cppLoop+0x1b8c>)
 8009572:	f7fc fcb1 	bl	8005ed8 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009576:	486f      	ldr	r0, [pc, #444]	; (8009734 <cppLoop+0x1b7c>)
 8009578:	f7f7 ff04 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800957c:	4a73      	ldr	r2, [pc, #460]	; (800974c <cppLoop+0x1b94>)
 800957e:	4974      	ldr	r1, [pc, #464]	; (8009750 <cppLoop+0x1b98>)
 8009580:	486f      	ldr	r0, [pc, #444]	; (8009740 <cppLoop+0x1b88>)
 8009582:	f7fb fa47 	bl	8004a14 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009586:	2200      	movs	r2, #0
 8009588:	f04f 31ff 	mov.w	r1, #4294967295
 800958c:	4864      	ldr	r0, [pc, #400]	; (8009720 <cppLoop+0x1b68>)
 800958e:	f7f8 ff1d 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 8009592:	e2c1      	b.n	8009b18 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 8009594:	2157      	movs	r1, #87	; 0x57
 8009596:	4862      	ldr	r0, [pc, #392]	; (8009720 <cppLoop+0x1b68>)
 8009598:	f7f8 fe5c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800959c:	f7f7 fd80 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80095a0:	2100      	movs	r1, #0
 80095a2:	2000      	movs	r0, #0
 80095a4:	f7f7 fd8c 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80095a8:	486a      	ldr	r0, [pc, #424]	; (8009754 <cppLoop+0x1b9c>)
 80095aa:	f7f7 fdb3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095ae:	2101      	movs	r1, #1
 80095b0:	2000      	movs	r0, #0
 80095b2:	f7f7 fd85 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80095b6:	4b68      	ldr	r3, [pc, #416]	; (8009758 <cppLoop+0x1ba0>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7f6 ffdc 	bl	8000578 <__aeabi_f2d>
 80095c0:	4603      	mov	r3, r0
 80095c2:	460c      	mov	r4, r1
 80095c4:	461a      	mov	r2, r3
 80095c6:	4623      	mov	r3, r4
 80095c8:	4864      	ldr	r0, [pc, #400]	; (800975c <cppLoop+0x1ba4>)
 80095ca:	f7f7 fda3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095ce:	4857      	ldr	r0, [pc, #348]	; (800972c <cppLoop+0x1b74>)
 80095d0:	f7f8 fddc 	bl	800218c <_ZN8JoyStick8getValueEv>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	bf0c      	ite	eq
 80095da:	2301      	moveq	r3, #1
 80095dc:	2300      	movne	r3, #0
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 829b 	beq.w	8009b1c <cppLoop+0x1f64>
			HAL_Delay(500);
 80095e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095ea:	f000 fbc5 	bl	8009d78 <HAL_Delay>

			led.LR(1, -1);
 80095ee:	f04f 32ff 	mov.w	r2, #4294967295
 80095f2:	2101      	movs	r1, #1
 80095f4:	484a      	ldr	r0, [pc, #296]	; (8009720 <cppLoop+0x1b68>)
 80095f6:	f7f8 fee9 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80095fa:	2102      	movs	r1, #2
 80095fc:	4858      	ldr	r0, [pc, #352]	; (8009760 <cppLoop+0x1ba8>)
 80095fe:	f7fa fd91 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009602:	4b58      	ldr	r3, [pc, #352]	; (8009764 <cppLoop+0x1bac>)
 8009604:	edd3 7a00 	vldr	s15, [r3]
 8009608:	eeb0 0a67 	vmov.f32	s0, s15
 800960c:	4854      	ldr	r0, [pc, #336]	; (8009760 <cppLoop+0x1ba8>)
 800960e:	f7fa fb64 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009612:	4b51      	ldr	r3, [pc, #324]	; (8009758 <cppLoop+0x1ba0>)
 8009614:	edd3 7a00 	vldr	s15, [r3]
 8009618:	eeb0 0a67 	vmov.f32	s0, s15
 800961c:	4850      	ldr	r0, [pc, #320]	; (8009760 <cppLoop+0x1ba8>)
 800961e:	f7fa fb6c 	bl	8003cfa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009622:	4b4d      	ldr	r3, [pc, #308]	; (8009758 <cppLoop+0x1ba0>)
 8009624:	edd3 7a00 	vldr	s15, [r3]
 8009628:	eeb0 0a67 	vmov.f32	s0, s15
 800962c:	484c      	ldr	r0, [pc, #304]	; (8009760 <cppLoop+0x1ba8>)
 800962e:	f7fa fb84 	bl	8003d3a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009632:	484b      	ldr	r0, [pc, #300]	; (8009760 <cppLoop+0x1ba8>)
 8009634:	f7fa ff72 	bl	800451c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800963c:	f000 fb9c 	bl	8009d78 <HAL_Delay>

			line_trace.running();
 8009640:	4847      	ldr	r0, [pc, #284]	; (8009760 <cppLoop+0x1ba8>)
 8009642:	f7fa fdad 	bl	80041a0 <_ZN9LineTrace7runningEv>

			esc.off();
 8009646:	483b      	ldr	r0, [pc, #236]	; (8009734 <cppLoop+0x1b7c>)
 8009648:	f7f7 fe9c 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800964c:	f04f 32ff 	mov.w	r2, #4294967295
 8009650:	2100      	movs	r1, #0
 8009652:	4833      	ldr	r0, [pc, #204]	; (8009720 <cppLoop+0x1b68>)
 8009654:	f7f8 feba 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009658:	e260      	b.n	8009b1c <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 800965a:	2157      	movs	r1, #87	; 0x57
 800965c:	4830      	ldr	r0, [pc, #192]	; (8009720 <cppLoop+0x1b68>)
 800965e:	f7f8 fdf9 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009662:	f7f7 fd1d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009666:	2100      	movs	r1, #0
 8009668:	2000      	movs	r0, #0
 800966a:	f7f7 fd29 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800966e:	483e      	ldr	r0, [pc, #248]	; (8009768 <cppLoop+0x1bb0>)
 8009670:	f7f7 fd50 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009674:	2101      	movs	r1, #1
 8009676:	2000      	movs	r0, #0
 8009678:	f7f7 fd22 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800967c:	4b3b      	ldr	r3, [pc, #236]	; (800976c <cppLoop+0x1bb4>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f7f6 ff79 	bl	8000578 <__aeabi_f2d>
 8009686:	4603      	mov	r3, r0
 8009688:	460c      	mov	r4, r1
 800968a:	461a      	mov	r2, r3
 800968c:	4623      	mov	r3, r4
 800968e:	4833      	ldr	r0, [pc, #204]	; (800975c <cppLoop+0x1ba4>)
 8009690:	f7f7 fd40 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009694:	4825      	ldr	r0, [pc, #148]	; (800972c <cppLoop+0x1b74>)
 8009696:	f7f8 fd79 	bl	800218c <_ZN8JoyStick8getValueEv>
 800969a:	4603      	mov	r3, r0
 800969c:	2b02      	cmp	r3, #2
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 823a 	beq.w	8009b20 <cppLoop+0x1f68>
			HAL_Delay(500);
 80096ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80096b0:	f000 fb62 	bl	8009d78 <HAL_Delay>

			led.LR(1, -1);
 80096b4:	f04f 32ff 	mov.w	r2, #4294967295
 80096b8:	2101      	movs	r1, #1
 80096ba:	4819      	ldr	r0, [pc, #100]	; (8009720 <cppLoop+0x1b68>)
 80096bc:	f7f8 fe86 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80096c0:	2101      	movs	r1, #1
 80096c2:	4827      	ldr	r0, [pc, #156]	; (8009760 <cppLoop+0x1ba8>)
 80096c4:	f7fa fd2e 	bl	8004124 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80096c8:	4b29      	ldr	r3, [pc, #164]	; (8009770 <cppLoop+0x1bb8>)
 80096ca:	edd3 7a00 	vldr	s15, [r3]
 80096ce:	eeb0 0a67 	vmov.f32	s0, s15
 80096d2:	4823      	ldr	r0, [pc, #140]	; (8009760 <cppLoop+0x1ba8>)
 80096d4:	f7fa fb01 	bl	8003cda <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80096d8:	4b24      	ldr	r3, [pc, #144]	; (800976c <cppLoop+0x1bb4>)
 80096da:	edd3 7a00 	vldr	s15, [r3]
 80096de:	eeb0 0a67 	vmov.f32	s0, s15
 80096e2:	481f      	ldr	r0, [pc, #124]	; (8009760 <cppLoop+0x1ba8>)
 80096e4:	f7fa fb09 	bl	8003cfa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80096e8:	4b21      	ldr	r3, [pc, #132]	; (8009770 <cppLoop+0x1bb8>)
 80096ea:	edd3 7a00 	vldr	s15, [r3]
 80096ee:	eeb0 0a67 	vmov.f32	s0, s15
 80096f2:	481b      	ldr	r0, [pc, #108]	; (8009760 <cppLoop+0x1ba8>)
 80096f4:	f7fa fb21 	bl	8003d3a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096f8:	4819      	ldr	r0, [pc, #100]	; (8009760 <cppLoop+0x1ba8>)
 80096fa:	f7fa ff0f 	bl	800451c <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80096fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009702:	f000 fb39 	bl	8009d78 <HAL_Delay>

			line_trace.running();
 8009706:	4816      	ldr	r0, [pc, #88]	; (8009760 <cppLoop+0x1ba8>)
 8009708:	f7fa fd4a 	bl	80041a0 <_ZN9LineTrace7runningEv>

			esc.off();
 800970c:	4809      	ldr	r0, [pc, #36]	; (8009734 <cppLoop+0x1b7c>)
 800970e:	f7f7 fe39 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8009712:	f04f 32ff 	mov.w	r2, #4294967295
 8009716:	2100      	movs	r1, #0
 8009718:	4801      	ldr	r0, [pc, #4]	; (8009720 <cppLoop+0x1b68>)
 800971a:	f7f8 fe57 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 800971e:	e1ff      	b.n	8009b20 <cppLoop+0x1f68>
 8009720:	200005d0 	.word	0x200005d0
 8009724:	08019fcc 	.word	0x08019fcc
 8009728:	08019fd0 	.word	0x08019fd0
 800972c:	200005c4 	.word	0x200005c4
 8009730:	3ea3d70a 	.word	0x3ea3d70a
 8009734:	2001db60 	.word	0x2001db60
 8009738:	08019fd8 	.word	0x08019fd8
 800973c:	08019fdc 	.word	0x08019fdc
 8009740:	200005f4 	.word	0x200005f4
 8009744:	2001dae0 	.word	0x2001dae0
 8009748:	00000000 	.word	0x00000000
 800974c:	08019fe8 	.word	0x08019fe8
 8009750:	08019ff4 	.word	0x08019ff4
 8009754:	0801a000 	.word	0x0801a000
 8009758:	2004228c 	.word	0x2004228c
 800975c:	08019ea4 	.word	0x08019ea4
 8009760:	2001db64 	.word	0x2001db64
 8009764:	2004229c 	.word	0x2004229c
 8009768:	0801a00c 	.word	0x0801a00c
 800976c:	20042284 	.word	0x20042284
 8009770:	20042294 	.word	0x20042294

	case 15:
		led.fullColor('W');
 8009774:	2157      	movs	r1, #87	; 0x57
 8009776:	48ac      	ldr	r0, [pc, #688]	; (8009a28 <cppLoop+0x1e70>)
 8009778:	f7f8 fd6c 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800977c:	f7f7 fc90 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009780:	2100      	movs	r1, #0
 8009782:	2000      	movs	r0, #0
 8009784:	f7f7 fc9c 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009788:	48a8      	ldr	r0, [pc, #672]	; (8009a2c <cppLoop+0x1e74>)
 800978a:	f7fa fa24 	bl	8003bd6 <_ZN9LineTrace5getKpEv>
 800978e:	eeb0 7a40 	vmov.f32	s14, s0
 8009792:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009a30 <cppLoop+0x1e78>
 8009796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800979a:	eeb0 0a67 	vmov.f32	s0, s15
 800979e:	f7f9 f985 	bl	8002aac <_ZSt3absf>
 80097a2:	ee10 3a10 	vmov	r3, s0
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7f6 fee6 	bl	8000578 <__aeabi_f2d>
 80097ac:	4603      	mov	r3, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	461a      	mov	r2, r3
 80097b2:	4623      	mov	r3, r4
 80097b4:	489f      	ldr	r0, [pc, #636]	; (8009a34 <cppLoop+0x1e7c>)
 80097b6:	f7f7 fcad 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097ba:	2101      	movs	r1, #1
 80097bc:	2000      	movs	r0, #0
 80097be:	f7f7 fc7f 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 80097c2:	489a      	ldr	r0, [pc, #616]	; (8009a2c <cppLoop+0x1e74>)
 80097c4:	f7fa fa16 	bl	8003bf4 <_ZN9LineTrace5getKiEv>
 80097c8:	eeb0 7a40 	vmov.f32	s14, s0
 80097cc:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009a38 <cppLoop+0x1e80>
 80097d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097d4:	eeb0 0a67 	vmov.f32	s0, s15
 80097d8:	f7f9 f968 	bl	8002aac <_ZSt3absf>
 80097dc:	ee10 3a10 	vmov	r3, s0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f7f6 fec9 	bl	8000578 <__aeabi_f2d>
 80097e6:	4605      	mov	r5, r0
 80097e8:	460e      	mov	r6, r1
 80097ea:	4890      	ldr	r0, [pc, #576]	; (8009a2c <cppLoop+0x1e74>)
 80097ec:	f7fa fa11 	bl	8003c12 <_ZN9LineTrace5getKdEv>
 80097f0:	eeb0 7a40 	vmov.f32	s14, s0
 80097f4:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009a3c <cppLoop+0x1e84>
 80097f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009800:	f7f9 f954 	bl	8002aac <_ZSt3absf>
 8009804:	ee10 3a10 	vmov	r3, s0
 8009808:	4618      	mov	r0, r3
 800980a:	f7f6 feb5 	bl	8000578 <__aeabi_f2d>
 800980e:	4603      	mov	r3, r0
 8009810:	460c      	mov	r4, r1
 8009812:	e9cd 3400 	strd	r3, r4, [sp]
 8009816:	462a      	mov	r2, r5
 8009818:	4633      	mov	r3, r6
 800981a:	4889      	ldr	r0, [pc, #548]	; (8009a40 <cppLoop+0x1e88>)
 800981c:	f7f7 fc7a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8009820:	4888      	ldr	r0, [pc, #544]	; (8009a44 <cppLoop+0x1e8c>)
 8009822:	f7f8 fcb3 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009826:	4603      	mov	r3, r0
 8009828:	2b08      	cmp	r3, #8
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b00      	cmp	r3, #0
 8009834:	d021      	beq.n	800987a <cppLoop+0x1cc2>
			led.LR(-1, 1);
 8009836:	2201      	movs	r2, #1
 8009838:	f04f 31ff 	mov.w	r1, #4294967295
 800983c:	487a      	ldr	r0, [pc, #488]	; (8009a28 <cppLoop+0x1e70>)
 800983e:	f7f8 fdc5 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009842:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009846:	f000 fa97 	bl	8009d78 <HAL_Delay>

			selector++;
 800984a:	4b7f      	ldr	r3, [pc, #508]	; (8009a48 <cppLoop+0x1e90>)
 800984c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009850:	b29b      	uxth	r3, r3
 8009852:	3301      	adds	r3, #1
 8009854:	b29b      	uxth	r3, r3
 8009856:	b21a      	sxth	r2, r3
 8009858:	4b7b      	ldr	r3, [pc, #492]	; (8009a48 <cppLoop+0x1e90>)
 800985a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800985c:	4b7a      	ldr	r3, [pc, #488]	; (8009a48 <cppLoop+0x1e90>)
 800985e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009862:	2b02      	cmp	r3, #2
 8009864:	dd02      	ble.n	800986c <cppLoop+0x1cb4>
 8009866:	4b78      	ldr	r3, [pc, #480]	; (8009a48 <cppLoop+0x1e90>)
 8009868:	2200      	movs	r2, #0
 800986a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800986c:	2200      	movs	r2, #0
 800986e:	f04f 31ff 	mov.w	r1, #4294967295
 8009872:	486d      	ldr	r0, [pc, #436]	; (8009a28 <cppLoop+0x1e70>)
 8009874:	f7f8 fdaa 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009878:	e154      	b.n	8009b24 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 800987a:	4872      	ldr	r0, [pc, #456]	; (8009a44 <cppLoop+0x1e8c>)
 800987c:	f7f8 fc86 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009880:	4603      	mov	r3, r0
 8009882:	2b10      	cmp	r3, #16
 8009884:	bf0c      	ite	eq
 8009886:	2301      	moveq	r3, #1
 8009888:	2300      	movne	r3, #0
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d058      	beq.n	8009942 <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009890:	2201      	movs	r2, #1
 8009892:	f04f 31ff 	mov.w	r1, #4294967295
 8009896:	4864      	ldr	r0, [pc, #400]	; (8009a28 <cppLoop+0x1e70>)
 8009898:	f7f8 fd98 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800989c:	2064      	movs	r0, #100	; 0x64
 800989e:	f000 fa6b 	bl	8009d78 <HAL_Delay>
			if(selector == 0){
 80098a2:	4b69      	ldr	r3, [pc, #420]	; (8009a48 <cppLoop+0x1e90>)
 80098a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d113      	bne.n	80098d4 <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 80098ac:	4b67      	ldr	r3, [pc, #412]	; (8009a4c <cppLoop+0x1e94>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7f6 fe61 	bl	8000578 <__aeabi_f2d>
 80098b6:	a356      	add	r3, pc, #344	; (adr r3, 8009a10 <cppLoop+0x1e58>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f6 fcfe 	bl	80002bc <__adddf3>
 80098c0:	4603      	mov	r3, r0
 80098c2:	460c      	mov	r4, r1
 80098c4:	4618      	mov	r0, r3
 80098c6:	4621      	mov	r1, r4
 80098c8:	f7f7 f9a6 	bl	8000c18 <__aeabi_d2f>
 80098cc:	4602      	mov	r2, r0
 80098ce:	4b5f      	ldr	r3, [pc, #380]	; (8009a4c <cppLoop+0x1e94>)
 80098d0:	601a      	str	r2, [r3, #0]
 80098d2:	e02b      	b.n	800992c <cppLoop+0x1d74>
			else if(selector == 1){
 80098d4:	4b5c      	ldr	r3, [pc, #368]	; (8009a48 <cppLoop+0x1e90>)
 80098d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d113      	bne.n	8009906 <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 80098de:	4b5c      	ldr	r3, [pc, #368]	; (8009a50 <cppLoop+0x1e98>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7f6 fe48 	bl	8000578 <__aeabi_f2d>
 80098e8:	a34b      	add	r3, pc, #300	; (adr r3, 8009a18 <cppLoop+0x1e60>)
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	f7f6 fce5 	bl	80002bc <__adddf3>
 80098f2:	4603      	mov	r3, r0
 80098f4:	460c      	mov	r4, r1
 80098f6:	4618      	mov	r0, r3
 80098f8:	4621      	mov	r1, r4
 80098fa:	f7f7 f98d 	bl	8000c18 <__aeabi_d2f>
 80098fe:	4602      	mov	r2, r0
 8009900:	4b53      	ldr	r3, [pc, #332]	; (8009a50 <cppLoop+0x1e98>)
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	e012      	b.n	800992c <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 8009906:	4b53      	ldr	r3, [pc, #332]	; (8009a54 <cppLoop+0x1e9c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f7f6 fe34 	bl	8000578 <__aeabi_f2d>
 8009910:	a343      	add	r3, pc, #268	; (adr r3, 8009a20 <cppLoop+0x1e68>)
 8009912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009916:	f7f6 fcd1 	bl	80002bc <__adddf3>
 800991a:	4603      	mov	r3, r0
 800991c:	460c      	mov	r4, r1
 800991e:	4618      	mov	r0, r3
 8009920:	4621      	mov	r1, r4
 8009922:	f7f7 f979 	bl	8000c18 <__aeabi_d2f>
 8009926:	4602      	mov	r2, r0
 8009928:	4b4a      	ldr	r3, [pc, #296]	; (8009a54 <cppLoop+0x1e9c>)
 800992a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800992c:	2152      	movs	r1, #82	; 0x52
 800992e:	483e      	ldr	r0, [pc, #248]	; (8009a28 <cppLoop+0x1e70>)
 8009930:	f7f8 fc90 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009934:	2200      	movs	r2, #0
 8009936:	f04f 31ff 	mov.w	r1, #4294967295
 800993a:	483b      	ldr	r0, [pc, #236]	; (8009a28 <cppLoop+0x1e70>)
 800993c:	f7f8 fd46 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009940:	e0f0      	b.n	8009b24 <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 8009942:	4840      	ldr	r0, [pc, #256]	; (8009a44 <cppLoop+0x1e8c>)
 8009944:	f7f8 fc22 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009948:	4603      	mov	r3, r0
 800994a:	2b01      	cmp	r3, #1
 800994c:	bf0c      	ite	eq
 800994e:	2301      	moveq	r3, #1
 8009950:	2300      	movne	r3, #0
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b00      	cmp	r3, #0
 8009956:	d07f      	beq.n	8009a58 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 8009958:	2201      	movs	r2, #1
 800995a:	f04f 31ff 	mov.w	r1, #4294967295
 800995e:	4832      	ldr	r0, [pc, #200]	; (8009a28 <cppLoop+0x1e70>)
 8009960:	f7f8 fd34 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009964:	2064      	movs	r0, #100	; 0x64
 8009966:	f000 fa07 	bl	8009d78 <HAL_Delay>
			if(selector == 0){
 800996a:	4b37      	ldr	r3, [pc, #220]	; (8009a48 <cppLoop+0x1e90>)
 800996c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d113      	bne.n	800999c <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 8009974:	4b35      	ldr	r3, [pc, #212]	; (8009a4c <cppLoop+0x1e94>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7f6 fdfd 	bl	8000578 <__aeabi_f2d>
 800997e:	a324      	add	r3, pc, #144	; (adr r3, 8009a10 <cppLoop+0x1e58>)
 8009980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009984:	f7f6 fc98 	bl	80002b8 <__aeabi_dsub>
 8009988:	4603      	mov	r3, r0
 800998a:	460c      	mov	r4, r1
 800998c:	4618      	mov	r0, r3
 800998e:	4621      	mov	r1, r4
 8009990:	f7f7 f942 	bl	8000c18 <__aeabi_d2f>
 8009994:	4602      	mov	r2, r0
 8009996:	4b2d      	ldr	r3, [pc, #180]	; (8009a4c <cppLoop+0x1e94>)
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	e02b      	b.n	80099f4 <cppLoop+0x1e3c>
			else if(selector == 1){
 800999c:	4b2a      	ldr	r3, [pc, #168]	; (8009a48 <cppLoop+0x1e90>)
 800999e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d113      	bne.n	80099ce <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 80099a6:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <cppLoop+0x1e98>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f6 fde4 	bl	8000578 <__aeabi_f2d>
 80099b0:	a319      	add	r3, pc, #100	; (adr r3, 8009a18 <cppLoop+0x1e60>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 fc7f 	bl	80002b8 <__aeabi_dsub>
 80099ba:	4603      	mov	r3, r0
 80099bc:	460c      	mov	r4, r1
 80099be:	4618      	mov	r0, r3
 80099c0:	4621      	mov	r1, r4
 80099c2:	f7f7 f929 	bl	8000c18 <__aeabi_d2f>
 80099c6:	4602      	mov	r2, r0
 80099c8:	4b21      	ldr	r3, [pc, #132]	; (8009a50 <cppLoop+0x1e98>)
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	e012      	b.n	80099f4 <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 80099ce:	4b21      	ldr	r3, [pc, #132]	; (8009a54 <cppLoop+0x1e9c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7f6 fdd0 	bl	8000578 <__aeabi_f2d>
 80099d8:	a311      	add	r3, pc, #68	; (adr r3, 8009a20 <cppLoop+0x1e68>)
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f7f6 fc6b 	bl	80002b8 <__aeabi_dsub>
 80099e2:	4603      	mov	r3, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	4618      	mov	r0, r3
 80099e8:	4621      	mov	r1, r4
 80099ea:	f7f7 f915 	bl	8000c18 <__aeabi_d2f>
 80099ee:	4602      	mov	r2, r0
 80099f0:	4b18      	ldr	r3, [pc, #96]	; (8009a54 <cppLoop+0x1e9c>)
 80099f2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80099f4:	2152      	movs	r1, #82	; 0x52
 80099f6:	480c      	ldr	r0, [pc, #48]	; (8009a28 <cppLoop+0x1e70>)
 80099f8:	f7f8 fc2c 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80099fc:	2200      	movs	r2, #0
 80099fe:	f04f 31ff 	mov.w	r1, #4294967295
 8009a02:	4809      	ldr	r0, [pc, #36]	; (8009a28 <cppLoop+0x1e70>)
 8009a04:	f7f8 fce2 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009a08:	e08c      	b.n	8009b24 <cppLoop+0x1f6c>
 8009a0a:	bf00      	nop
 8009a0c:	f3af 8000 	nop.w
 8009a10:	88e368f1 	.word	0x88e368f1
 8009a14:	3ee4f8b5 	.word	0x3ee4f8b5
 8009a18:	eb1c432d 	.word	0xeb1c432d
 8009a1c:	3f1a36e2 	.word	0x3f1a36e2
 8009a20:	a0b5ed8d 	.word	0xa0b5ed8d
 8009a24:	3eb0c6f7 	.word	0x3eb0c6f7
 8009a28:	200005d0 	.word	0x200005d0
 8009a2c:	2001db64 	.word	0x2001db64
 8009a30:	447a0000 	.word	0x447a0000
 8009a34:	0801a018 	.word	0x0801a018
 8009a38:	42c80000 	.word	0x42c80000
 8009a3c:	461c4000 	.word	0x461c4000
 8009a40:	08019e5c 	.word	0x08019e5c
 8009a44:	200005c4 	.word	0x200005c4
 8009a48:	20042242 	.word	0x20042242
 8009a4c:	2004224c 	.word	0x2004224c
 8009a50:	20042254 	.word	0x20042254
 8009a54:	2004225c 	.word	0x2004225c
		else if(joy_stick.getValue() == JOY_C){
 8009a58:	4836      	ldr	r0, [pc, #216]	; (8009b34 <cppLoop+0x1f7c>)
 8009a5a:	f7f8 fb97 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	bf0c      	ite	eq
 8009a64:	2301      	moveq	r3, #1
 8009a66:	2300      	movne	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d05a      	beq.n	8009b24 <cppLoop+0x1f6c>
			led.LR(-1, 1);
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f04f 31ff 	mov.w	r1, #4294967295
 8009a74:	4830      	ldr	r0, [pc, #192]	; (8009b38 <cppLoop+0x1f80>)
 8009a76:	f7f8 fca9 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009a7a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009a7e:	f000 f97b 	bl	8009d78 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009a82:	2300      	movs	r3, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4b2d      	ldr	r3, [pc, #180]	; (8009b3c <cppLoop+0x1f84>)
 8009a88:	2201      	movs	r2, #1
 8009a8a:	492d      	ldr	r1, [pc, #180]	; (8009b40 <cppLoop+0x1f88>)
 8009a8c:	482d      	ldr	r0, [pc, #180]	; (8009b44 <cppLoop+0x1f8c>)
 8009a8e:	f7f7 fef5 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009a92:	2300      	movs	r3, #0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4b2c      	ldr	r3, [pc, #176]	; (8009b48 <cppLoop+0x1f90>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	492c      	ldr	r1, [pc, #176]	; (8009b4c <cppLoop+0x1f94>)
 8009a9c:	4829      	ldr	r0, [pc, #164]	; (8009b44 <cppLoop+0x1f8c>)
 8009a9e:	f7f7 feed 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	4b2a      	ldr	r3, [pc, #168]	; (8009b50 <cppLoop+0x1f98>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	492a      	ldr	r1, [pc, #168]	; (8009b54 <cppLoop+0x1f9c>)
 8009aac:	4825      	ldr	r0, [pc, #148]	; (8009b44 <cppLoop+0x1f8c>)
 8009aae:	f7f7 fee5 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009ab2:	4b22      	ldr	r3, [pc, #136]	; (8009b3c <cppLoop+0x1f84>)
 8009ab4:	edd3 7a00 	vldr	s15, [r3]
 8009ab8:	4b23      	ldr	r3, [pc, #140]	; (8009b48 <cppLoop+0x1f90>)
 8009aba:	ed93 7a00 	vldr	s14, [r3]
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <cppLoop+0x1f98>)
 8009ac0:	edd3 6a00 	vldr	s13, [r3]
 8009ac4:	eeb0 1a66 	vmov.f32	s2, s13
 8009ac8:	eef0 0a47 	vmov.f32	s1, s14
 8009acc:	eeb0 0a67 	vmov.f32	s0, s15
 8009ad0:	4821      	ldr	r0, [pc, #132]	; (8009b58 <cppLoop+0x1fa0>)
 8009ad2:	f7fa f867 	bl	8003ba4 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8009adc:	4816      	ldr	r0, [pc, #88]	; (8009b38 <cppLoop+0x1f80>)
 8009ade:	f7f8 fc75 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009ae2:	e01f      	b.n	8009b24 <cppLoop+0x1f6c>

	default:
		break;
 8009ae4:	bf00      	nop
 8009ae6:	e01e      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009ae8:	bf00      	nop
 8009aea:	e01c      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009aec:	bf00      	nop
 8009aee:	e01a      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009af0:	bf00      	nop
 8009af2:	e018      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009af4:	bf00      	nop
 8009af6:	e016      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009af8:	bf00      	nop
 8009afa:	e014      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009afc:	bf00      	nop
 8009afe:	e012      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b00:	bf00      	nop
 8009b02:	e010      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b04:	bf00      	nop
 8009b06:	e00e      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b08:	bf00      	nop
 8009b0a:	e00c      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b0c:	bf00      	nop
 8009b0e:	e00a      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b10:	bf00      	nop
 8009b12:	e008      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b14:	bf00      	nop
 8009b16:	e006      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b18:	bf00      	nop
 8009b1a:	e004      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b1c:	bf00      	nop
 8009b1e:	e002      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b20:	bf00      	nop
 8009b22:	e000      	b.n	8009b26 <cppLoop+0x1f6e>
		break;
 8009b24:	bf00      	nop

	}

	HAL_Delay(30);
 8009b26:	201e      	movs	r0, #30
 8009b28:	f000 f926 	bl	8009d78 <HAL_Delay>

}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b34:	200005c4 	.word	0x200005c4
 8009b38:	200005d0 	.word	0x200005d0
 8009b3c:	2004224c 	.word	0x2004224c
 8009b40:	0801a024 	.word	0x0801a024
 8009b44:	08019e78 	.word	0x08019e78
 8009b48:	20042254 	.word	0x20042254
 8009b4c:	0801a02c 	.word	0x0801a02c
 8009b50:	2004225c 	.word	0x2004225c
 8009b54:	0801a034 	.word	0x0801a034
 8009b58:	2001db64 	.word	0x2001db64

08009b5c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af06      	add	r7, sp, #24
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d142      	bne.n	8009bf2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d13d      	bne.n	8009bf2 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009b76:	4821      	ldr	r0, [pc, #132]	; (8009bfc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b78:	f7f8 fc60 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009b7c:	4820      	ldr	r0, [pc, #128]	; (8009c00 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b7e:	f7fb fc5f 	bl	8005440 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009b82:	4820      	ldr	r0, [pc, #128]	; (8009c04 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009b84:	f7f8 faf6 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009b88:	481f      	ldr	r0, [pc, #124]	; (8009c08 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b8a:	f7fb f86c 	bl	8004c66 <_ZN5MotorC1Ev>
IMU imu;
 8009b8e:	481f      	ldr	r0, [pc, #124]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b90:	f7f8 f8ec 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009b94:	481e      	ldr	r0, [pc, #120]	; (8009c10 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b96:	f7fa fdb1 	bl	80046fc <_ZN6LoggerC1Ev>
Encoder encoder;
 8009b9a:	481e      	ldr	r0, [pc, #120]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b9c:	f7f7 fc16 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009ba0:	4b1a      	ldr	r3, [pc, #104]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009ba4:	4918      	ldr	r1, [pc, #96]	; (8009c08 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009ba6:	481c      	ldr	r0, [pc, #112]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009ba8:	f7fb ffe0 	bl	8005b6c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009bac:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009bae:	4a17      	ldr	r2, [pc, #92]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bb0:	4918      	ldr	r1, [pc, #96]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009bb2:	481a      	ldr	r0, [pc, #104]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009bb4:	f7fb f956 	bl	8004e64 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009bb8:	4819      	ldr	r0, [pc, #100]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009bba:	f7f7 fb0b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009bbe:	4b18      	ldr	r3, [pc, #96]	; (8009c20 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009bc0:	9305      	str	r3, [sp, #20]
 8009bc2:	4b12      	ldr	r3, [pc, #72]	; (8009c0c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009bc8:	9303      	str	r3, [sp, #12]
 8009bca:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009bcc:	9302      	str	r3, [sp, #8]
 8009bce:	4b11      	ldr	r3, [pc, #68]	; (8009c14 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009bd0:	9301      	str	r3, [sp, #4]
 8009bd2:	4b0b      	ldr	r3, [pc, #44]	; (8009c00 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	4b10      	ldr	r3, [pc, #64]	; (8009c18 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009bd8:	4a08      	ldr	r2, [pc, #32]	; (8009bfc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009bda:	490b      	ldr	r1, [pc, #44]	; (8009c08 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009bdc:	4811      	ldr	r0, [pc, #68]	; (8009c24 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009bde:	f7f8 ff75 	bl	8002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009be2:	4a09      	ldr	r2, [pc, #36]	; (8009c08 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009be4:	490a      	ldr	r1, [pc, #40]	; (8009c10 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009be6:	4810      	ldr	r0, [pc, #64]	; (8009c28 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009be8:	f7fb fda6 	bl	8005738 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009bec:	480f      	ldr	r0, [pc, #60]	; (8009c2c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009bee:	f7fb fab9 	bl	8005164 <_ZN13PathFollowingC1Ev>
}
 8009bf2:	bf00      	nop
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200002c0 	.word	0x200002c0
 8009c00:	200005b8 	.word	0x200005b8
 8009c04:	200005c4 	.word	0x200005c4
 8009c08:	200005cc 	.word	0x200005cc
 8009c0c:	200005e0 	.word	0x200005e0
 8009c10:	200005f4 	.word	0x200005f4
 8009c14:	2001dac0 	.word	0x2001dac0
 8009c18:	2001dae0 	.word	0x2001dae0
 8009c1c:	2001db20 	.word	0x2001db20
 8009c20:	2001db60 	.word	0x2001db60
 8009c24:	2001db64 	.word	0x2001db64
 8009c28:	2002a90c 	.word	0x2002a90c
 8009c2c:	2002ab18 	.word	0x2002ab18

08009c30 <_GLOBAL__sub_I_line_sensor>:
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c38:	2001      	movs	r0, #1
 8009c3a:	f7ff ff8f 	bl	8009b5c <_Z41__static_initialization_and_destruction_0ii>
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009c44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009c46:	e003      	b.n	8009c50 <LoopCopyDataInit>

08009c48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009c48:	4b0c      	ldr	r3, [pc, #48]	; (8009c7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009c4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009c4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009c4e:	3104      	adds	r1, #4

08009c50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009c50:	480b      	ldr	r0, [pc, #44]	; (8009c80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009c52:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009c54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009c56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009c58:	d3f6      	bcc.n	8009c48 <CopyDataInit>
  ldr  r2, =_sbss
 8009c5a:	4a0b      	ldr	r2, [pc, #44]	; (8009c88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009c5c:	e002      	b.n	8009c64 <LoopFillZerobss>

08009c5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009c5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009c60:	f842 3b04 	str.w	r3, [r2], #4

08009c64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009c64:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009c66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009c68:	d3f9      	bcc.n	8009c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009c6a:	f7fd fe83 	bl	8007974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c6e:	f00b fdd3 	bl	8015818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c72:	f7fc f9bd 	bl	8005ff0 <main>
  bx  lr    
 8009c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009c78:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009c7c:	0801a628 	.word	0x0801a628
  ldr  r0, =_sdata
 8009c80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009c84:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009c88:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009c8c:	20046ca0 	.word	0x20046ca0

08009c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c90:	e7fe      	b.n	8009c90 <ADC_IRQHandler>
	...

08009c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c98:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <HAL_Init+0x40>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a0d      	ldr	r2, [pc, #52]	; (8009cd4 <HAL_Init+0x40>)
 8009c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009ca4:	4b0b      	ldr	r3, [pc, #44]	; (8009cd4 <HAL_Init+0x40>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a0a      	ldr	r2, [pc, #40]	; (8009cd4 <HAL_Init+0x40>)
 8009caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009cb0:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <HAL_Init+0x40>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a07      	ldr	r2, [pc, #28]	; (8009cd4 <HAL_Init+0x40>)
 8009cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009cbc:	2003      	movs	r0, #3
 8009cbe:	f000 fd51 	bl	800a764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	f000 f808 	bl	8009cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009cc8:	f7fd f8a4 	bl	8006e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	40023c00 	.word	0x40023c00

08009cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009ce0:	4b12      	ldr	r3, [pc, #72]	; (8009d2c <HAL_InitTick+0x54>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	4b12      	ldr	r3, [pc, #72]	; (8009d30 <HAL_InitTick+0x58>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 fd69 	bl	800a7ce <HAL_SYSTICK_Config>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	e00e      	b.n	8009d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b0f      	cmp	r3, #15
 8009d0a:	d80a      	bhi.n	8009d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	f04f 30ff 	mov.w	r0, #4294967295
 8009d14:	f000 fd31 	bl	800a77a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009d18:	4a06      	ldr	r2, [pc, #24]	; (8009d34 <HAL_InitTick+0x5c>)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	e000      	b.n	8009d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	20000000 	.word	0x20000000
 8009d30:	20000008 	.word	0x20000008
 8009d34:	20000004 	.word	0x20000004

08009d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d3c:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <HAL_IncTick+0x20>)
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	461a      	mov	r2, r3
 8009d42:	4b06      	ldr	r3, [pc, #24]	; (8009d5c <HAL_IncTick+0x24>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4413      	add	r3, r2
 8009d48:	4a04      	ldr	r2, [pc, #16]	; (8009d5c <HAL_IncTick+0x24>)
 8009d4a:	6013      	str	r3, [r2, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	20000008 	.word	0x20000008
 8009d5c:	20044c28 	.word	0x20044c28

08009d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  return uwTick;
 8009d64:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <HAL_GetTick+0x14>)
 8009d66:	681b      	ldr	r3, [r3, #0]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20044c28 	.word	0x20044c28

08009d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d80:	f7ff ffee 	bl	8009d60 <HAL_GetTick>
 8009d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d90:	d005      	beq.n	8009d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <HAL_Delay+0x40>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d9e:	bf00      	nop
 8009da0:	f7ff ffde 	bl	8009d60 <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d8f7      	bhi.n	8009da0 <HAL_Delay+0x28>
  {
  }
}
 8009db0:	bf00      	nop
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	20000008 	.word	0x20000008

08009dbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d101      	bne.n	8009dd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e033      	b.n	8009e3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7fd f842 	bl	8006e64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f003 0310 	and.w	r3, r3, #16
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d118      	bne.n	8009e2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009e02:	f023 0302 	bic.w	r3, r3, #2
 8009e06:	f043 0202 	orr.w	r2, r3, #2
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fa5a 	bl	800a2c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1e:	f023 0303 	bic.w	r3, r3, #3
 8009e22:	f043 0201 	orr.w	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	641a      	str	r2, [r3, #64]	; 0x40
 8009e2a:	e001      	b.n	8009e30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009e50:	2300      	movs	r3, #0
 8009e52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d101      	bne.n	8009e62 <HAL_ADC_Start_DMA+0x1e>
 8009e5e:	2302      	movs	r3, #2
 8009e60:	e0cc      	b.n	8009ffc <HAL_ADC_Start_DMA+0x1b8>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d018      	beq.n	8009eaa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0201 	orr.w	r2, r2, #1
 8009e86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009e88:	4b5e      	ldr	r3, [pc, #376]	; (800a004 <HAL_ADC_Start_DMA+0x1c0>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a5e      	ldr	r2, [pc, #376]	; (800a008 <HAL_ADC_Start_DMA+0x1c4>)
 8009e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e92:	0c9a      	lsrs	r2, r3, #18
 8009e94:	4613      	mov	r3, r2
 8009e96:	005b      	lsls	r3, r3, #1
 8009e98:	4413      	add	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009e9c:	e002      	b.n	8009ea4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1f9      	bne.n	8009e9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	f040 80a0 	bne.w	8009ffa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ec2:	f023 0301 	bic.w	r3, r3, #1
 8009ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d007      	beq.n	8009eec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef8:	d106      	bne.n	8009f08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	f023 0206 	bic.w	r2, r3, #6
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	645a      	str	r2, [r3, #68]	; 0x44
 8009f06:	e002      	b.n	8009f0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009f16:	4b3d      	ldr	r3, [pc, #244]	; (800a00c <HAL_ADC_Start_DMA+0x1c8>)
 8009f18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	4a3c      	ldr	r2, [pc, #240]	; (800a010 <HAL_ADC_Start_DMA+0x1cc>)
 8009f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	4a3b      	ldr	r2, [pc, #236]	; (800a014 <HAL_ADC_Start_DMA+0x1d0>)
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	4a3a      	ldr	r2, [pc, #232]	; (800a018 <HAL_ADC_Start_DMA+0x1d4>)
 8009f30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009f3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009f4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	334c      	adds	r3, #76	; 0x4c
 8009f66:	4619      	mov	r1, r3
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f000 fcea 	bl	800a944 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d12a      	bne.n	8009fd2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a26      	ldr	r2, [pc, #152]	; (800a01c <HAL_ADC_Start_DMA+0x1d8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d015      	beq.n	8009fb2 <HAL_ADC_Start_DMA+0x16e>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a25      	ldr	r2, [pc, #148]	; (800a020 <HAL_ADC_Start_DMA+0x1dc>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d105      	bne.n	8009f9c <HAL_ADC_Start_DMA+0x158>
 8009f90:	4b1e      	ldr	r3, [pc, #120]	; (800a00c <HAL_ADC_Start_DMA+0x1c8>)
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f003 031f 	and.w	r3, r3, #31
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00a      	beq.n	8009fb2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a20      	ldr	r2, [pc, #128]	; (800a024 <HAL_ADC_Start_DMA+0x1e0>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d129      	bne.n	8009ffa <HAL_ADC_Start_DMA+0x1b6>
 8009fa6:	4b19      	ldr	r3, [pc, #100]	; (800a00c <HAL_ADC_Start_DMA+0x1c8>)
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f003 031f 	and.w	r3, r3, #31
 8009fae:	2b0f      	cmp	r3, #15
 8009fb0:	d823      	bhi.n	8009ffa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d11c      	bne.n	8009ffa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009fce:	609a      	str	r2, [r3, #8]
 8009fd0:	e013      	b.n	8009ffa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a11      	ldr	r2, [pc, #68]	; (800a01c <HAL_ADC_Start_DMA+0x1d8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d10e      	bne.n	8009ffa <HAL_ADC_Start_DMA+0x1b6>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d107      	bne.n	8009ffa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ff8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3718      	adds	r7, #24
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	20000000 	.word	0x20000000
 800a008:	431bde83 	.word	0x431bde83
 800a00c:	40012300 	.word	0x40012300
 800a010:	0800a4c1 	.word	0x0800a4c1
 800a014:	0800a57b 	.word	0x0800a57b
 800a018:	0800a597 	.word	0x0800a597
 800a01c:	40012000 	.word	0x40012000
 800a020:	40012100 	.word	0x40012100
 800a024:	40012200 	.word	0x40012200

0800a028 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_ADC_ConfigChannel+0x1c>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e113      	b.n	800a2a8 <HAL_ADC_ConfigChannel+0x244>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b09      	cmp	r3, #9
 800a08e:	d925      	bls.n	800a0dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68d9      	ldr	r1, [r3, #12]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	4613      	mov	r3, r2
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	4413      	add	r3, r2
 800a0a4:	3b1e      	subs	r3, #30
 800a0a6:	2207      	movs	r2, #7
 800a0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ac:	43da      	mvns	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	400a      	ands	r2, r1
 800a0b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68d9      	ldr	r1, [r3, #12]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	689a      	ldr	r2, [r3, #8]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	4403      	add	r3, r0
 800a0ce:	3b1e      	subs	r3, #30
 800a0d0:	409a      	lsls	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	430a      	orrs	r2, r1
 800a0d8:	60da      	str	r2, [r3, #12]
 800a0da:	e022      	b.n	800a122 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6919      	ldr	r1, [r3, #16]
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	4413      	add	r3, r2
 800a0f0:	2207      	movs	r2, #7
 800a0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	400a      	ands	r2, r1
 800a0fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6919      	ldr	r1, [r3, #16]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	4618      	mov	r0, r3
 800a112:	4603      	mov	r3, r0
 800a114:	005b      	lsls	r3, r3, #1
 800a116:	4403      	add	r3, r0
 800a118:	409a      	lsls	r2, r3
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	2b06      	cmp	r3, #6
 800a128:	d824      	bhi.n	800a174 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	4613      	mov	r3, r2
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	4413      	add	r3, r2
 800a13a:	3b05      	subs	r3, #5
 800a13c:	221f      	movs	r2, #31
 800a13e:	fa02 f303 	lsl.w	r3, r2, r3
 800a142:	43da      	mvns	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	400a      	ands	r2, r1
 800a14a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	b29b      	uxth	r3, r3
 800a158:	4618      	mov	r0, r3
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	3b05      	subs	r3, #5
 800a166:	fa00 f203 	lsl.w	r2, r0, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	635a      	str	r2, [r3, #52]	; 0x34
 800a172:	e04c      	b.n	800a20e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	2b0c      	cmp	r3, #12
 800a17a:	d824      	bhi.n	800a1c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	4613      	mov	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	4413      	add	r3, r2
 800a18c:	3b23      	subs	r3, #35	; 0x23
 800a18e:	221f      	movs	r2, #31
 800a190:	fa02 f303 	lsl.w	r3, r2, r3
 800a194:	43da      	mvns	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	400a      	ands	r2, r1
 800a19c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	4613      	mov	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3b23      	subs	r3, #35	; 0x23
 800a1b8:	fa00 f203 	lsl.w	r2, r0, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	430a      	orrs	r2, r1
 800a1c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a1c4:	e023      	b.n	800a20e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	685a      	ldr	r2, [r3, #4]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	3b41      	subs	r3, #65	; 0x41
 800a1d8:	221f      	movs	r2, #31
 800a1da:	fa02 f303 	lsl.w	r3, r2, r3
 800a1de:	43da      	mvns	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	400a      	ands	r2, r1
 800a1e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	3b41      	subs	r3, #65	; 0x41
 800a202:	fa00 f203 	lsl.w	r2, r0, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	430a      	orrs	r2, r1
 800a20c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a20e:	4b29      	ldr	r3, [pc, #164]	; (800a2b4 <HAL_ADC_ConfigChannel+0x250>)
 800a210:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a28      	ldr	r2, [pc, #160]	; (800a2b8 <HAL_ADC_ConfigChannel+0x254>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d10f      	bne.n	800a23c <HAL_ADC_ConfigChannel+0x1d8>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b12      	cmp	r3, #18
 800a222:	d10b      	bne.n	800a23c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1d      	ldr	r2, [pc, #116]	; (800a2b8 <HAL_ADC_ConfigChannel+0x254>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d12b      	bne.n	800a29e <HAL_ADC_ConfigChannel+0x23a>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a1c      	ldr	r2, [pc, #112]	; (800a2bc <HAL_ADC_ConfigChannel+0x258>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d003      	beq.n	800a258 <HAL_ADC_ConfigChannel+0x1f4>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2b11      	cmp	r3, #17
 800a256:	d122      	bne.n	800a29e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a11      	ldr	r2, [pc, #68]	; (800a2bc <HAL_ADC_ConfigChannel+0x258>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d111      	bne.n	800a29e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a27a:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <HAL_ADC_ConfigChannel+0x25c>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a11      	ldr	r2, [pc, #68]	; (800a2c4 <HAL_ADC_ConfigChannel+0x260>)
 800a280:	fba2 2303 	umull	r2, r3, r2, r3
 800a284:	0c9a      	lsrs	r2, r3, #18
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	005b      	lsls	r3, r3, #1
 800a28e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a290:	e002      	b.n	800a298 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	3b01      	subs	r3, #1
 800a296:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1f9      	bne.n	800a292 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3714      	adds	r7, #20
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	40012300 	.word	0x40012300
 800a2b8:	40012000 	.word	0x40012000
 800a2bc:	10000012 	.word	0x10000012
 800a2c0:	20000000 	.word	0x20000000
 800a2c4:	431bde83 	.word	0x431bde83

0800a2c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a2d0:	4b79      	ldr	r3, [pc, #484]	; (800a4b8 <ADC_Init+0x1f0>)
 800a2d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	431a      	orrs	r2, r3
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	6859      	ldr	r1, [r3, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	021a      	lsls	r2, r3, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	430a      	orrs	r2, r1
 800a310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	685a      	ldr	r2, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6859      	ldr	r1, [r3, #4]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689a      	ldr	r2, [r3, #8]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	430a      	orrs	r2, r1
 800a332:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	689a      	ldr	r2, [r3, #8]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6899      	ldr	r1, [r3, #8]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35a:	4a58      	ldr	r2, [pc, #352]	; (800a4bc <ADC_Init+0x1f4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d022      	beq.n	800a3a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689a      	ldr	r2, [r3, #8]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a36e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	6899      	ldr	r1, [r3, #8]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	430a      	orrs	r2, r1
 800a380:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	689a      	ldr	r2, [r3, #8]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a390:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	6899      	ldr	r1, [r3, #8]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	609a      	str	r2, [r3, #8]
 800a3a4:	e00f      	b.n	800a3c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a3b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689a      	ldr	r2, [r3, #8]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f022 0202 	bic.w	r2, r2, #2
 800a3d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6899      	ldr	r1, [r3, #8]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	7e1b      	ldrb	r3, [r3, #24]
 800a3e0:	005a      	lsls	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d01b      	beq.n	800a42c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685a      	ldr	r2, [r3, #4]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a402:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	685a      	ldr	r2, [r3, #4]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a412:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	6859      	ldr	r1, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41e:	3b01      	subs	r3, #1
 800a420:	035a      	lsls	r2, r3, #13
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	430a      	orrs	r2, r1
 800a428:	605a      	str	r2, [r3, #4]
 800a42a:	e007      	b.n	800a43c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a43a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a44a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	69db      	ldr	r3, [r3, #28]
 800a456:	3b01      	subs	r3, #1
 800a458:	051a      	lsls	r2, r3, #20
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689a      	ldr	r2, [r3, #8]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a470:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	6899      	ldr	r1, [r3, #8]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a47e:	025a      	lsls	r2, r3, #9
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	430a      	orrs	r2, r1
 800a486:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689a      	ldr	r2, [r3, #8]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6899      	ldr	r1, [r3, #8]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	029a      	lsls	r2, r3, #10
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	609a      	str	r2, [r3, #8]
}
 800a4ac:	bf00      	nop
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr
 800a4b8:	40012300 	.word	0x40012300
 800a4bc:	0f000001 	.word	0x0f000001

0800a4c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d13c      	bne.n	800a554 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d12b      	bne.n	800a54c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d127      	bne.n	800a54c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a506:	2b00      	cmp	r3, #0
 800a508:	d006      	beq.n	800a518 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a514:	2b00      	cmp	r3, #0
 800a516:	d119      	bne.n	800a54c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0220 	bic.w	r2, r2, #32
 800a526:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d105      	bne.n	800a54c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a544:	f043 0201 	orr.w	r2, r3, #1
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f7ff fd6b 	bl	800a028 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a552:	e00e      	b.n	800a572 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a558:	f003 0310 	and.w	r3, r3, #16
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f7ff fd75 	bl	800a050 <HAL_ADC_ErrorCallback>
}
 800a566:	e004      	b.n	800a572 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	4798      	blx	r3
}
 800a572:	bf00      	nop
 800a574:	3710      	adds	r7, #16
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}

0800a57a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a57a:	b580      	push	{r7, lr}
 800a57c:	b084      	sub	sp, #16
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a586:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff fd57 	bl	800a03c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2240      	movs	r2, #64	; 0x40
 800a5a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ae:	f043 0204 	orr.w	r2, r3, #4
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f7ff fd4a 	bl	800a050 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f003 0307 	and.w	r3, r3, #7
 800a5d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <__NVIC_SetPriorityGrouping+0x44>)
 800a5d6:	68db      	ldr	r3, [r3, #12]
 800a5d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a5ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a5f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a5f6:	4a04      	ldr	r2, [pc, #16]	; (800a608 <__NVIC_SetPriorityGrouping+0x44>)
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	60d3      	str	r3, [r2, #12]
}
 800a5fc:	bf00      	nop
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	e000ed00 	.word	0xe000ed00

0800a60c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <__NVIC_GetPriorityGrouping+0x18>)
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	0a1b      	lsrs	r3, r3, #8
 800a616:	f003 0307 	and.w	r3, r3, #7
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	e000ed00 	.word	0xe000ed00

0800a628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	4603      	mov	r3, r0
 800a630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a636:	2b00      	cmp	r3, #0
 800a638:	db0b      	blt.n	800a652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a63a:	79fb      	ldrb	r3, [r7, #7]
 800a63c:	f003 021f 	and.w	r2, r3, #31
 800a640:	4907      	ldr	r1, [pc, #28]	; (800a660 <__NVIC_EnableIRQ+0x38>)
 800a642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a646:	095b      	lsrs	r3, r3, #5
 800a648:	2001      	movs	r0, #1
 800a64a:	fa00 f202 	lsl.w	r2, r0, r2
 800a64e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a652:	bf00      	nop
 800a654:	370c      	adds	r7, #12
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	e000e100 	.word	0xe000e100

0800a664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	4603      	mov	r3, r0
 800a66c:	6039      	str	r1, [r7, #0]
 800a66e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a674:	2b00      	cmp	r3, #0
 800a676:	db0a      	blt.n	800a68e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	b2da      	uxtb	r2, r3
 800a67c:	490c      	ldr	r1, [pc, #48]	; (800a6b0 <__NVIC_SetPriority+0x4c>)
 800a67e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a682:	0112      	lsls	r2, r2, #4
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	440b      	add	r3, r1
 800a688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a68c:	e00a      	b.n	800a6a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	b2da      	uxtb	r2, r3
 800a692:	4908      	ldr	r1, [pc, #32]	; (800a6b4 <__NVIC_SetPriority+0x50>)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	3b04      	subs	r3, #4
 800a69c:	0112      	lsls	r2, r2, #4
 800a69e:	b2d2      	uxtb	r2, r2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	761a      	strb	r2, [r3, #24]
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	e000e100 	.word	0xe000e100
 800a6b4:	e000ed00 	.word	0xe000ed00

0800a6b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b089      	sub	sp, #36	; 0x24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	f1c3 0307 	rsb	r3, r3, #7
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	bf28      	it	cs
 800a6d6:	2304      	movcs	r3, #4
 800a6d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	3304      	adds	r3, #4
 800a6de:	2b06      	cmp	r3, #6
 800a6e0:	d902      	bls.n	800a6e8 <NVIC_EncodePriority+0x30>
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	3b03      	subs	r3, #3
 800a6e6:	e000      	b.n	800a6ea <NVIC_EncodePriority+0x32>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	43da      	mvns	r2, r3
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	401a      	ands	r2, r3
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a700:	f04f 31ff 	mov.w	r1, #4294967295
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	fa01 f303 	lsl.w	r3, r1, r3
 800a70a:	43d9      	mvns	r1, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a710:	4313      	orrs	r3, r2
         );
}
 800a712:	4618      	mov	r0, r3
 800a714:	3724      	adds	r7, #36	; 0x24
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
	...

0800a720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a730:	d301      	bcc.n	800a736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a732:	2301      	movs	r3, #1
 800a734:	e00f      	b.n	800a756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a736:	4a0a      	ldr	r2, [pc, #40]	; (800a760 <SysTick_Config+0x40>)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a73e:	210f      	movs	r1, #15
 800a740:	f04f 30ff 	mov.w	r0, #4294967295
 800a744:	f7ff ff8e 	bl	800a664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a748:	4b05      	ldr	r3, [pc, #20]	; (800a760 <SysTick_Config+0x40>)
 800a74a:	2200      	movs	r2, #0
 800a74c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a74e:	4b04      	ldr	r3, [pc, #16]	; (800a760 <SysTick_Config+0x40>)
 800a750:	2207      	movs	r2, #7
 800a752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	e000e010 	.word	0xe000e010

0800a764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f7ff ff29 	bl	800a5c4 <__NVIC_SetPriorityGrouping>
}
 800a772:	bf00      	nop
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b086      	sub	sp, #24
 800a77e:	af00      	add	r7, sp, #0
 800a780:	4603      	mov	r3, r0
 800a782:	60b9      	str	r1, [r7, #8]
 800a784:	607a      	str	r2, [r7, #4]
 800a786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a788:	2300      	movs	r3, #0
 800a78a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a78c:	f7ff ff3e 	bl	800a60c <__NVIC_GetPriorityGrouping>
 800a790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	6978      	ldr	r0, [r7, #20]
 800a798:	f7ff ff8e 	bl	800a6b8 <NVIC_EncodePriority>
 800a79c:	4602      	mov	r2, r0
 800a79e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff ff5d 	bl	800a664 <__NVIC_SetPriority>
}
 800a7aa:	bf00      	nop
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a7bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff ff31 	bl	800a628 <__NVIC_EnableIRQ>
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff ffa2 	bl	800a720 <SysTick_Config>
 800a7dc:	4603      	mov	r3, r0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3708      	adds	r7, #8
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
	...

0800a7e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b086      	sub	sp, #24
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a7f4:	f7ff fab4 	bl	8009d60 <HAL_GetTick>
 800a7f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e099      	b.n	800a938 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0201 	bic.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a824:	e00f      	b.n	800a846 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a826:	f7ff fa9b 	bl	8009d60 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b05      	cmp	r3, #5
 800a832:	d908      	bls.n	800a846 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2220      	movs	r2, #32
 800a838:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2203      	movs	r2, #3
 800a83e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e078      	b.n	800a938 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e8      	bne.n	800a826 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	4b38      	ldr	r3, [pc, #224]	; (800a940 <HAL_DMA_Init+0x158>)
 800a860:	4013      	ands	r3, r2
 800a862:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a872:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a87e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a88a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a1b      	ldr	r3, [r3, #32]
 800a890:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a892:	697a      	ldr	r2, [r7, #20]
 800a894:	4313      	orrs	r3, r2
 800a896:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	d107      	bne.n	800a8b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f023 0307 	bic.w	r3, r3, #7
 800a8c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	697a      	ldr	r2, [r7, #20]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d6:	2b04      	cmp	r3, #4
 800a8d8:	d117      	bne.n	800a90a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00e      	beq.n	800a90a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fa9d 	bl	800ae2c <DMA_CheckFifoParam>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d008      	beq.n	800a90a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2240      	movs	r2, #64	; 0x40
 800a8fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a906:	2301      	movs	r3, #1
 800a908:	e016      	b.n	800a938 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	f000 fa54 	bl	800adc0 <DMA_CalcBaseAndBitshift>
 800a918:	4603      	mov	r3, r0
 800a91a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a920:	223f      	movs	r2, #63	; 0x3f
 800a922:	409a      	lsls	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a936:	2300      	movs	r3, #0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	f010803f 	.word	0xf010803f

0800a944 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	60b9      	str	r1, [r7, #8]
 800a94e:	607a      	str	r2, [r7, #4]
 800a950:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a952:	2300      	movs	r3, #0
 800a954:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a95a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a962:	2b01      	cmp	r3, #1
 800a964:	d101      	bne.n	800a96a <HAL_DMA_Start_IT+0x26>
 800a966:	2302      	movs	r3, #2
 800a968:	e040      	b.n	800a9ec <HAL_DMA_Start_IT+0xa8>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2201      	movs	r2, #1
 800a96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d12f      	bne.n	800a9de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2202      	movs	r2, #2
 800a982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 f9e6 	bl	800ad64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a99c:	223f      	movs	r2, #63	; 0x3f
 800a99e:	409a      	lsls	r2, r3
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f042 0216 	orr.w	r2, r2, #22
 800a9b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d007      	beq.n	800a9cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0208 	orr.w	r2, r2, #8
 800a9ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f042 0201 	orr.w	r2, r2, #1
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	e005      	b.n	800a9ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3718      	adds	r7, #24
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d004      	beq.n	800aa12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2280      	movs	r2, #128	; 0x80
 800aa0c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e00c      	b.n	800aa2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2205      	movs	r2, #5
 800aa16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f022 0201 	bic.w	r2, r2, #1
 800aa28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa44:	4b92      	ldr	r3, [pc, #584]	; (800ac90 <HAL_DMA_IRQHandler+0x258>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a92      	ldr	r2, [pc, #584]	; (800ac94 <HAL_DMA_IRQHandler+0x25c>)
 800aa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4e:	0a9b      	lsrs	r3, r3, #10
 800aa50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa58:	693b      	ldr	r3, [r7, #16]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa62:	2208      	movs	r2, #8
 800aa64:	409a      	lsls	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d01a      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 0304 	and.w	r3, r3, #4
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d013      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f022 0204 	bic.w	r2, r2, #4
 800aa8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa90:	2208      	movs	r2, #8
 800aa92:	409a      	lsls	r2, r3
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9c:	f043 0201 	orr.w	r2, r3, #1
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	409a      	lsls	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4013      	ands	r3, r2
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d012      	beq.n	800aada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d00b      	beq.n	800aada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac6:	2201      	movs	r2, #1
 800aac8:	409a      	lsls	r2, r3
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aad2:	f043 0202 	orr.w	r2, r3, #2
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aade:	2204      	movs	r2, #4
 800aae0:	409a      	lsls	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	4013      	ands	r3, r2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d012      	beq.n	800ab10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0302 	and.w	r3, r3, #2
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafc:	2204      	movs	r2, #4
 800aafe:	409a      	lsls	r2, r3
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab08:	f043 0204 	orr.w	r2, r3, #4
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab14:	2210      	movs	r2, #16
 800ab16:	409a      	lsls	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d043      	beq.n	800aba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0308 	and.w	r3, r3, #8
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d03c      	beq.n	800aba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab32:	2210      	movs	r2, #16
 800ab34:	409a      	lsls	r2, r3
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d018      	beq.n	800ab7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d108      	bne.n	800ab68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d024      	beq.n	800aba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
 800ab66:	e01f      	b.n	800aba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d01b      	beq.n	800aba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	4798      	blx	r3
 800ab78:	e016      	b.n	800aba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d107      	bne.n	800ab98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0208 	bic.w	r2, r2, #8
 800ab96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abac:	2220      	movs	r2, #32
 800abae:	409a      	lsls	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4013      	ands	r3, r2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 808e 	beq.w	800acd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 8086 	beq.w	800acd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abce:	2220      	movs	r2, #32
 800abd0:	409a      	lsls	r2, r3
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b05      	cmp	r3, #5
 800abe0:	d136      	bne.n	800ac50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0216 	bic.w	r2, r2, #22
 800abf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	695a      	ldr	r2, [r3, #20]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d103      	bne.n	800ac12 <HAL_DMA_IRQHandler+0x1da>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d007      	beq.n	800ac22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 0208 	bic.w	r2, r2, #8
 800ac20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac26:	223f      	movs	r2, #63	; 0x3f
 800ac28:	409a      	lsls	r2, r3
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d07d      	beq.n	800ad42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	4798      	blx	r3
        }
        return;
 800ac4e:	e078      	b.n	800ad42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d01c      	beq.n	800ac98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d108      	bne.n	800ac7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d030      	beq.n	800acd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	4798      	blx	r3
 800ac7c:	e02b      	b.n	800acd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d027      	beq.n	800acd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	4798      	blx	r3
 800ac8e:	e022      	b.n	800acd6 <HAL_DMA_IRQHandler+0x29e>
 800ac90:	20000000 	.word	0x20000000
 800ac94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d10f      	bne.n	800acc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 0210 	bic.w	r2, r2, #16
 800acb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2201      	movs	r2, #1
 800acc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d032      	beq.n	800ad44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ace2:	f003 0301 	and.w	r3, r3, #1
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d022      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2205      	movs	r2, #5
 800acee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f022 0201 	bic.w	r2, r2, #1
 800ad00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	3301      	adds	r3, #1
 800ad06:	60bb      	str	r3, [r7, #8]
 800ad08:	697a      	ldr	r2, [r7, #20]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d307      	bcc.n	800ad1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d1f2      	bne.n	800ad02 <HAL_DMA_IRQHandler+0x2ca>
 800ad1c:	e000      	b.n	800ad20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ad1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d005      	beq.n	800ad44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	4798      	blx	r3
 800ad40:	e000      	b.n	800ad44 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ad42:	bf00      	nop
    }
  }
}
 800ad44:	3718      	adds	r7, #24
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop

0800ad4c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
 800ad70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	683a      	ldr	r2, [r7, #0]
 800ad88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	2b40      	cmp	r3, #64	; 0x40
 800ad90:	d108      	bne.n	800ada4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ada2:	e007      	b.n	800adb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	60da      	str	r2, [r3, #12]
}
 800adb4:	bf00      	nop
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	3b10      	subs	r3, #16
 800add0:	4a14      	ldr	r2, [pc, #80]	; (800ae24 <DMA_CalcBaseAndBitshift+0x64>)
 800add2:	fba2 2303 	umull	r2, r3, r2, r3
 800add6:	091b      	lsrs	r3, r3, #4
 800add8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800adda:	4a13      	ldr	r2, [pc, #76]	; (800ae28 <DMA_CalcBaseAndBitshift+0x68>)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2b03      	cmp	r3, #3
 800adec:	d909      	bls.n	800ae02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	1d1a      	adds	r2, r3, #4
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	659a      	str	r2, [r3, #88]	; 0x58
 800ae00:	e007      	b.n	800ae12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae0a:	f023 0303 	bic.w	r3, r3, #3
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
 800ae22:	bf00      	nop
 800ae24:	aaaaaaab 	.word	0xaaaaaaab
 800ae28:	0801a070 	.word	0x0801a070

0800ae2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d11f      	bne.n	800ae86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d855      	bhi.n	800aef8 <DMA_CheckFifoParam+0xcc>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <DMA_CheckFifoParam+0x28>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae65 	.word	0x0800ae65
 800ae58:	0800ae77 	.word	0x0800ae77
 800ae5c:	0800ae65 	.word	0x0800ae65
 800ae60:	0800aef9 	.word	0x0800aef9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d045      	beq.n	800aefc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae74:	e042      	b.n	800aefc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae7e:	d13f      	bne.n	800af00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae84:	e03c      	b.n	800af00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae8e:	d121      	bne.n	800aed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b03      	cmp	r3, #3
 800ae94:	d836      	bhi.n	800af04 <DMA_CheckFifoParam+0xd8>
 800ae96:	a201      	add	r2, pc, #4	; (adr r2, 800ae9c <DMA_CheckFifoParam+0x70>)
 800ae98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9c:	0800aead 	.word	0x0800aead
 800aea0:	0800aeb3 	.word	0x0800aeb3
 800aea4:	0800aead 	.word	0x0800aead
 800aea8:	0800aec5 	.word	0x0800aec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb0:	e02f      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d024      	beq.n	800af08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aebe:	2301      	movs	r3, #1
 800aec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aec2:	e021      	b.n	800af08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aecc:	d11e      	bne.n	800af0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aed2:	e01b      	b.n	800af0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d902      	bls.n	800aee0 <DMA_CheckFifoParam+0xb4>
 800aeda:	2b03      	cmp	r3, #3
 800aedc:	d003      	beq.n	800aee6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aede:	e018      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	73fb      	strb	r3, [r7, #15]
      break;
 800aee4:	e015      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00e      	beq.n	800af10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	73fb      	strb	r3, [r7, #15]
      break;
 800aef6:	e00b      	b.n	800af10 <DMA_CheckFifoParam+0xe4>
      break;
 800aef8:	bf00      	nop
 800aefa:	e00a      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;
 800aefc:	bf00      	nop
 800aefe:	e008      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;
 800af00:	bf00      	nop
 800af02:	e006      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;
 800af04:	bf00      	nop
 800af06:	e004      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;
 800af08:	bf00      	nop
 800af0a:	e002      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;   
 800af0c:	bf00      	nop
 800af0e:	e000      	b.n	800af12 <DMA_CheckFifoParam+0xe6>
      break;
 800af10:	bf00      	nop
    }
  } 
  
  return status; 
 800af12:	7bfb      	ldrb	r3, [r7, #15]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3714      	adds	r7, #20
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af20:	b480      	push	{r7}
 800af22:	b089      	sub	sp, #36	; 0x24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af32:	2300      	movs	r3, #0
 800af34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af36:	2300      	movs	r3, #0
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	e177      	b.n	800b22c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af3c:	2201      	movs	r2, #1
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	fa02 f303 	lsl.w	r3, r2, r3
 800af44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4013      	ands	r3, r2
 800af4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	429a      	cmp	r2, r3
 800af56:	f040 8166 	bne.w	800b226 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d00b      	beq.n	800af7a <HAL_GPIO_Init+0x5a>
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	2b02      	cmp	r3, #2
 800af68:	d007      	beq.n	800af7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af6e:	2b11      	cmp	r3, #17
 800af70:	d003      	beq.n	800af7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b12      	cmp	r3, #18
 800af78:	d130      	bne.n	800afdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	2203      	movs	r2, #3
 800af86:	fa02 f303 	lsl.w	r3, r2, r3
 800af8a:	43db      	mvns	r3, r3
 800af8c:	69ba      	ldr	r2, [r7, #24]
 800af8e:	4013      	ands	r3, r2
 800af90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68da      	ldr	r2, [r3, #12]
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	005b      	lsls	r3, r3, #1
 800af9a:	fa02 f303 	lsl.w	r3, r2, r3
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800afb0:	2201      	movs	r2, #1
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	fa02 f303 	lsl.w	r3, r2, r3
 800afb8:	43db      	mvns	r3, r3
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	4013      	ands	r3, r2
 800afbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	091b      	lsrs	r3, r3, #4
 800afc6:	f003 0201 	and.w	r2, r3, #1
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	fa02 f303 	lsl.w	r3, r2, r3
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	69ba      	ldr	r2, [r7, #24]
 800afda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	2203      	movs	r2, #3
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	43db      	mvns	r3, r3
 800afee:	69ba      	ldr	r2, [r7, #24]
 800aff0:	4013      	ands	r3, r2
 800aff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	689a      	ldr	r2, [r3, #8]
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	005b      	lsls	r3, r3, #1
 800affc:	fa02 f303 	lsl.w	r3, r2, r3
 800b000:	69ba      	ldr	r2, [r7, #24]
 800b002:	4313      	orrs	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	2b02      	cmp	r3, #2
 800b012:	d003      	beq.n	800b01c <HAL_GPIO_Init+0xfc>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b12      	cmp	r3, #18
 800b01a:	d123      	bne.n	800b064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	08da      	lsrs	r2, r3, #3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	3208      	adds	r2, #8
 800b024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	f003 0307 	and.w	r3, r3, #7
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	220f      	movs	r2, #15
 800b034:	fa02 f303 	lsl.w	r3, r2, r3
 800b038:	43db      	mvns	r3, r3
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	4013      	ands	r3, r2
 800b03e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	691a      	ldr	r2, [r3, #16]
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	f003 0307 	and.w	r3, r3, #7
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	fa02 f303 	lsl.w	r3, r2, r3
 800b050:	69ba      	ldr	r2, [r7, #24]
 800b052:	4313      	orrs	r3, r2
 800b054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	08da      	lsrs	r2, r3, #3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	3208      	adds	r2, #8
 800b05e:	69b9      	ldr	r1, [r7, #24]
 800b060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	2203      	movs	r2, #3
 800b070:	fa02 f303 	lsl.w	r3, r2, r3
 800b074:	43db      	mvns	r3, r3
 800b076:	69ba      	ldr	r2, [r7, #24]
 800b078:	4013      	ands	r3, r2
 800b07a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	f003 0203 	and.w	r2, r3, #3
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	005b      	lsls	r3, r3, #1
 800b088:	fa02 f303 	lsl.w	r3, r2, r3
 800b08c:	69ba      	ldr	r2, [r7, #24]
 800b08e:	4313      	orrs	r3, r2
 800b090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	f000 80c0 	beq.w	800b226 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	4b65      	ldr	r3, [pc, #404]	; (800b240 <HAL_GPIO_Init+0x320>)
 800b0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ae:	4a64      	ldr	r2, [pc, #400]	; (800b240 <HAL_GPIO_Init+0x320>)
 800b0b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b0b4:	6453      	str	r3, [r2, #68]	; 0x44
 800b0b6:	4b62      	ldr	r3, [pc, #392]	; (800b240 <HAL_GPIO_Init+0x320>)
 800b0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0be:	60fb      	str	r3, [r7, #12]
 800b0c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0c2:	4a60      	ldr	r2, [pc, #384]	; (800b244 <HAL_GPIO_Init+0x324>)
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	089b      	lsrs	r3, r3, #2
 800b0c8:	3302      	adds	r3, #2
 800b0ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	f003 0303 	and.w	r3, r3, #3
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	220f      	movs	r2, #15
 800b0da:	fa02 f303 	lsl.w	r3, r2, r3
 800b0de:	43db      	mvns	r3, r3
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a57      	ldr	r2, [pc, #348]	; (800b248 <HAL_GPIO_Init+0x328>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d037      	beq.n	800b15e <HAL_GPIO_Init+0x23e>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a56      	ldr	r2, [pc, #344]	; (800b24c <HAL_GPIO_Init+0x32c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d031      	beq.n	800b15a <HAL_GPIO_Init+0x23a>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a55      	ldr	r2, [pc, #340]	; (800b250 <HAL_GPIO_Init+0x330>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d02b      	beq.n	800b156 <HAL_GPIO_Init+0x236>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4a54      	ldr	r2, [pc, #336]	; (800b254 <HAL_GPIO_Init+0x334>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d025      	beq.n	800b152 <HAL_GPIO_Init+0x232>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	4a53      	ldr	r2, [pc, #332]	; (800b258 <HAL_GPIO_Init+0x338>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d01f      	beq.n	800b14e <HAL_GPIO_Init+0x22e>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	4a52      	ldr	r2, [pc, #328]	; (800b25c <HAL_GPIO_Init+0x33c>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d019      	beq.n	800b14a <HAL_GPIO_Init+0x22a>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4a51      	ldr	r2, [pc, #324]	; (800b260 <HAL_GPIO_Init+0x340>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d013      	beq.n	800b146 <HAL_GPIO_Init+0x226>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a50      	ldr	r2, [pc, #320]	; (800b264 <HAL_GPIO_Init+0x344>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d00d      	beq.n	800b142 <HAL_GPIO_Init+0x222>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	4a4f      	ldr	r2, [pc, #316]	; (800b268 <HAL_GPIO_Init+0x348>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d007      	beq.n	800b13e <HAL_GPIO_Init+0x21e>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	4a4e      	ldr	r2, [pc, #312]	; (800b26c <HAL_GPIO_Init+0x34c>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d101      	bne.n	800b13a <HAL_GPIO_Init+0x21a>
 800b136:	2309      	movs	r3, #9
 800b138:	e012      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b13a:	230a      	movs	r3, #10
 800b13c:	e010      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b13e:	2308      	movs	r3, #8
 800b140:	e00e      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b142:	2307      	movs	r3, #7
 800b144:	e00c      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b146:	2306      	movs	r3, #6
 800b148:	e00a      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b14a:	2305      	movs	r3, #5
 800b14c:	e008      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b14e:	2304      	movs	r3, #4
 800b150:	e006      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b152:	2303      	movs	r3, #3
 800b154:	e004      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b156:	2302      	movs	r3, #2
 800b158:	e002      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e000      	b.n	800b160 <HAL_GPIO_Init+0x240>
 800b15e:	2300      	movs	r3, #0
 800b160:	69fa      	ldr	r2, [r7, #28]
 800b162:	f002 0203 	and.w	r2, r2, #3
 800b166:	0092      	lsls	r2, r2, #2
 800b168:	4093      	lsls	r3, r2
 800b16a:	69ba      	ldr	r2, [r7, #24]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b170:	4934      	ldr	r1, [pc, #208]	; (800b244 <HAL_GPIO_Init+0x324>)
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	089b      	lsrs	r3, r3, #2
 800b176:	3302      	adds	r3, #2
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b17e:	4b3c      	ldr	r3, [pc, #240]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	43db      	mvns	r3, r3
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	4013      	ands	r3, r2
 800b18c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b19a:	69ba      	ldr	r2, [r7, #24]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b1a2:	4a33      	ldr	r2, [pc, #204]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b1a8:	4b31      	ldr	r3, [pc, #196]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	43db      	mvns	r3, r3
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d003      	beq.n	800b1cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1cc:	4a28      	ldr	r2, [pc, #160]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b1d2:	4b27      	ldr	r3, [pc, #156]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	43db      	mvns	r3, r3
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	4013      	ands	r3, r2
 800b1e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b1f6:	4a1e      	ldr	r2, [pc, #120]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b1fc:	4b1c      	ldr	r3, [pc, #112]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	43db      	mvns	r3, r3
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	4013      	ands	r3, r2
 800b20a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d003      	beq.n	800b220 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b218:	69ba      	ldr	r2, [r7, #24]
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	4313      	orrs	r3, r2
 800b21e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b220:	4a13      	ldr	r2, [pc, #76]	; (800b270 <HAL_GPIO_Init+0x350>)
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	3301      	adds	r3, #1
 800b22a:	61fb      	str	r3, [r7, #28]
 800b22c:	69fb      	ldr	r3, [r7, #28]
 800b22e:	2b0f      	cmp	r3, #15
 800b230:	f67f ae84 	bls.w	800af3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b234:	bf00      	nop
 800b236:	3724      	adds	r7, #36	; 0x24
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr
 800b240:	40023800 	.word	0x40023800
 800b244:	40013800 	.word	0x40013800
 800b248:	40020000 	.word	0x40020000
 800b24c:	40020400 	.word	0x40020400
 800b250:	40020800 	.word	0x40020800
 800b254:	40020c00 	.word	0x40020c00
 800b258:	40021000 	.word	0x40021000
 800b25c:	40021400 	.word	0x40021400
 800b260:	40021800 	.word	0x40021800
 800b264:	40021c00 	.word	0x40021c00
 800b268:	40022000 	.word	0x40022000
 800b26c:	40022400 	.word	0x40022400
 800b270:	40013c00 	.word	0x40013c00

0800b274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	887b      	ldrh	r3, [r7, #2]
 800b286:	4013      	ands	r3, r2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b28c:	2301      	movs	r3, #1
 800b28e:	73fb      	strb	r3, [r7, #15]
 800b290:	e001      	b.n	800b296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	807b      	strh	r3, [r7, #2]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b2b4:	787b      	ldrb	r3, [r7, #1]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b2ba:	887a      	ldrh	r2, [r7, #2]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b2c0:	e003      	b.n	800b2ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b2c2:	887b      	ldrh	r3, [r7, #2]
 800b2c4:	041a      	lsls	r2, r3, #16
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	619a      	str	r2, [r3, #24]
}
 800b2ca:	bf00      	nop
 800b2cc:	370c      	adds	r7, #12
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d101      	bne.n	800b2ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	e11f      	b.n	800b52a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d106      	bne.n	800b304 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7fb fe62 	bl	8006fc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2224      	movs	r2, #36	; 0x24
 800b308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f022 0201 	bic.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b32a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b33a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b33c:	f001 f96e 	bl	800c61c <HAL_RCC_GetPCLK1Freq>
 800b340:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	4a7b      	ldr	r2, [pc, #492]	; (800b534 <HAL_I2C_Init+0x25c>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d807      	bhi.n	800b35c <HAL_I2C_Init+0x84>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	4a7a      	ldr	r2, [pc, #488]	; (800b538 <HAL_I2C_Init+0x260>)
 800b350:	4293      	cmp	r3, r2
 800b352:	bf94      	ite	ls
 800b354:	2301      	movls	r3, #1
 800b356:	2300      	movhi	r3, #0
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	e006      	b.n	800b36a <HAL_I2C_Init+0x92>
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	4a77      	ldr	r2, [pc, #476]	; (800b53c <HAL_I2C_Init+0x264>)
 800b360:	4293      	cmp	r3, r2
 800b362:	bf94      	ite	ls
 800b364:	2301      	movls	r3, #1
 800b366:	2300      	movhi	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d001      	beq.n	800b372 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e0db      	b.n	800b52a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4a72      	ldr	r2, [pc, #456]	; (800b540 <HAL_I2C_Init+0x268>)
 800b376:	fba2 2303 	umull	r2, r3, r2, r3
 800b37a:	0c9b      	lsrs	r3, r3, #18
 800b37c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	430a      	orrs	r2, r1
 800b390:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	4a64      	ldr	r2, [pc, #400]	; (800b534 <HAL_I2C_Init+0x25c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d802      	bhi.n	800b3ac <HAL_I2C_Init+0xd4>
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	e009      	b.n	800b3c0 <HAL_I2C_Init+0xe8>
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b3b2:	fb02 f303 	mul.w	r3, r2, r3
 800b3b6:	4a63      	ldr	r2, [pc, #396]	; (800b544 <HAL_I2C_Init+0x26c>)
 800b3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3bc:	099b      	lsrs	r3, r3, #6
 800b3be:	3301      	adds	r3, #1
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6812      	ldr	r2, [r2, #0]
 800b3c4:	430b      	orrs	r3, r1
 800b3c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b3d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	4956      	ldr	r1, [pc, #344]	; (800b534 <HAL_I2C_Init+0x25c>)
 800b3dc:	428b      	cmp	r3, r1
 800b3de:	d80d      	bhi.n	800b3fc <HAL_I2C_Init+0x124>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	1e59      	subs	r1, r3, #1
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	005b      	lsls	r3, r3, #1
 800b3ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	bf38      	it	cc
 800b3f8:	2304      	movcc	r3, #4
 800b3fa:	e04f      	b.n	800b49c <HAL_I2C_Init+0x1c4>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d111      	bne.n	800b428 <HAL_I2C_Init+0x150>
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	1e58      	subs	r0, r3, #1
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6859      	ldr	r1, [r3, #4]
 800b40c:	460b      	mov	r3, r1
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	440b      	add	r3, r1
 800b412:	fbb0 f3f3 	udiv	r3, r0, r3
 800b416:	3301      	adds	r3, #1
 800b418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bf0c      	ite	eq
 800b420:	2301      	moveq	r3, #1
 800b422:	2300      	movne	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	e012      	b.n	800b44e <HAL_I2C_Init+0x176>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	1e58      	subs	r0, r3, #1
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6859      	ldr	r1, [r3, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	440b      	add	r3, r1
 800b436:	0099      	lsls	r1, r3, #2
 800b438:	440b      	add	r3, r1
 800b43a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b43e:	3301      	adds	r3, #1
 800b440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b444:	2b00      	cmp	r3, #0
 800b446:	bf0c      	ite	eq
 800b448:	2301      	moveq	r3, #1
 800b44a:	2300      	movne	r3, #0
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d001      	beq.n	800b456 <HAL_I2C_Init+0x17e>
 800b452:	2301      	movs	r3, #1
 800b454:	e022      	b.n	800b49c <HAL_I2C_Init+0x1c4>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d10e      	bne.n	800b47c <HAL_I2C_Init+0x1a4>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	1e58      	subs	r0, r3, #1
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6859      	ldr	r1, [r3, #4]
 800b466:	460b      	mov	r3, r1
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	440b      	add	r3, r1
 800b46c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b470:	3301      	adds	r3, #1
 800b472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b47a:	e00f      	b.n	800b49c <HAL_I2C_Init+0x1c4>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	1e58      	subs	r0, r3, #1
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6859      	ldr	r1, [r3, #4]
 800b484:	460b      	mov	r3, r1
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	0099      	lsls	r1, r3, #2
 800b48c:	440b      	add	r3, r1
 800b48e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b492:	3301      	adds	r3, #1
 800b494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b49c:	6879      	ldr	r1, [r7, #4]
 800b49e:	6809      	ldr	r1, [r1, #0]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	69da      	ldr	r2, [r3, #28]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a1b      	ldr	r3, [r3, #32]
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	430a      	orrs	r2, r1
 800b4be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b4ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	6911      	ldr	r1, [r2, #16]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	68d2      	ldr	r2, [r2, #12]
 800b4d6:	4311      	orrs	r1, r2
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	6812      	ldr	r2, [r2, #0]
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	695a      	ldr	r2, [r3, #20]
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	430a      	orrs	r2, r1
 800b4fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0201 	orr.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2220      	movs	r2, #32
 800b516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b528:	2300      	movs	r3, #0
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	000186a0 	.word	0x000186a0
 800b538:	001e847f 	.word	0x001e847f
 800b53c:	003d08ff 	.word	0x003d08ff
 800b540:	431bde83 	.word	0x431bde83
 800b544:	10624dd3 	.word	0x10624dd3

0800b548 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b088      	sub	sp, #32
 800b54c:	af02      	add	r7, sp, #8
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	607a      	str	r2, [r7, #4]
 800b552:	461a      	mov	r2, r3
 800b554:	460b      	mov	r3, r1
 800b556:	817b      	strh	r3, [r7, #10]
 800b558:	4613      	mov	r3, r2
 800b55a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b55c:	f7fe fc00 	bl	8009d60 <HAL_GetTick>
 800b560:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	2b20      	cmp	r3, #32
 800b56c:	f040 80e0 	bne.w	800b730 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	2319      	movs	r3, #25
 800b576:	2201      	movs	r2, #1
 800b578:	4970      	ldr	r1, [pc, #448]	; (800b73c <HAL_I2C_Master_Transmit+0x1f4>)
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f000 fc58 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d001      	beq.n	800b58a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b586:	2302      	movs	r3, #2
 800b588:	e0d3      	b.n	800b732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b590:	2b01      	cmp	r3, #1
 800b592:	d101      	bne.n	800b598 <HAL_I2C_Master_Transmit+0x50>
 800b594:	2302      	movs	r3, #2
 800b596:	e0cc      	b.n	800b732 <HAL_I2C_Master_Transmit+0x1ea>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2201      	movs	r2, #1
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d007      	beq.n	800b5be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f042 0201 	orr.w	r2, r2, #1
 800b5bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2221      	movs	r2, #33	; 0x21
 800b5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2210      	movs	r2, #16
 800b5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	893a      	ldrh	r2, [r7, #8]
 800b5ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	4a50      	ldr	r2, [pc, #320]	; (800b740 <HAL_I2C_Master_Transmit+0x1f8>)
 800b5fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b600:	8979      	ldrh	r1, [r7, #10]
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	6a3a      	ldr	r2, [r7, #32]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 fac2 	bl	800bb90 <I2C_MasterRequestWrite>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e08d      	b.n	800b732 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b616:	2300      	movs	r3, #0
 800b618:	613b      	str	r3, [r7, #16]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	613b      	str	r3, [r7, #16]
 800b62a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b62c:	e066      	b.n	800b6fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	6a39      	ldr	r1, [r7, #32]
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 fcd2 	bl	800bfdc <I2C_WaitOnTXEFlagUntilTimeout>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00d      	beq.n	800b65a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b642:	2b04      	cmp	r3, #4
 800b644:	d107      	bne.n	800b656 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e06b      	b.n	800b732 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b65e:	781a      	ldrb	r2, [r3, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	1c5a      	adds	r2, r3, #1
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b674:	b29b      	uxth	r3, r3
 800b676:	3b01      	subs	r3, #1
 800b678:	b29a      	uxth	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b682:	3b01      	subs	r3, #1
 800b684:	b29a      	uxth	r2, r3
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	f003 0304 	and.w	r3, r3, #4
 800b694:	2b04      	cmp	r3, #4
 800b696:	d11b      	bne.n	800b6d0 <HAL_I2C_Master_Transmit+0x188>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d017      	beq.n	800b6d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	3b01      	subs	r3, #1
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	6a39      	ldr	r1, [r7, #32]
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 fcc2 	bl	800c05e <I2C_WaitOnBTFFlagUntilTimeout>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00d      	beq.n	800b6fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e4:	2b04      	cmp	r3, #4
 800b6e6:	d107      	bne.n	800b6f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e01a      	b.n	800b732 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	d194      	bne.n	800b62e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2220      	movs	r2, #32
 800b718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2200      	movs	r2, #0
 800b720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2200      	movs	r2, #0
 800b728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b72c:	2300      	movs	r3, #0
 800b72e:	e000      	b.n	800b732 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b730:	2302      	movs	r3, #2
  }
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	00100002 	.word	0x00100002
 800b740:	ffff0000 	.word	0xffff0000

0800b744 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b08c      	sub	sp, #48	; 0x30
 800b748:	af02      	add	r7, sp, #8
 800b74a:	60f8      	str	r0, [r7, #12]
 800b74c:	607a      	str	r2, [r7, #4]
 800b74e:	461a      	mov	r2, r3
 800b750:	460b      	mov	r3, r1
 800b752:	817b      	strh	r3, [r7, #10]
 800b754:	4613      	mov	r3, r2
 800b756:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b758:	f7fe fb02 	bl	8009d60 <HAL_GetTick>
 800b75c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b20      	cmp	r3, #32
 800b768:	f040 820b 	bne.w	800bb82 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	2319      	movs	r3, #25
 800b772:	2201      	movs	r2, #1
 800b774:	497c      	ldr	r1, [pc, #496]	; (800b968 <HAL_I2C_Master_Receive+0x224>)
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f000 fb5a 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d001      	beq.n	800b786 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b782:	2302      	movs	r3, #2
 800b784:	e1fe      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_I2C_Master_Receive+0x50>
 800b790:	2302      	movs	r3, #2
 800b792:	e1f7      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f003 0301 	and.w	r3, r3, #1
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d007      	beq.n	800b7ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f042 0201 	orr.w	r2, r2, #1
 800b7b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b7c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2222      	movs	r2, #34	; 0x22
 800b7ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2210      	movs	r2, #16
 800b7d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	893a      	ldrh	r2, [r7, #8]
 800b7ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7f0:	b29a      	uxth	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	4a5c      	ldr	r2, [pc, #368]	; (800b96c <HAL_I2C_Master_Receive+0x228>)
 800b7fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b7fc:	8979      	ldrh	r1, [r7, #10]
 800b7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 fa46 	bl	800bc94 <I2C_MasterRequestRead>
 800b808:	4603      	mov	r3, r0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d001      	beq.n	800b812 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e1b8      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b816:	2b00      	cmp	r3, #0
 800b818:	d113      	bne.n	800b842 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b81a:	2300      	movs	r3, #0
 800b81c:	623b      	str	r3, [r7, #32]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	623b      	str	r3, [r7, #32]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	623b      	str	r3, [r7, #32]
 800b82e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b83e:	601a      	str	r2, [r3, #0]
 800b840:	e18c      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b846:	2b01      	cmp	r3, #1
 800b848:	d11b      	bne.n	800b882 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b858:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b85a:	2300      	movs	r3, #0
 800b85c:	61fb      	str	r3, [r7, #28]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	61fb      	str	r3, [r7, #28]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	61fb      	str	r3, [r7, #28]
 800b86e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b87e:	601a      	str	r2, [r3, #0]
 800b880:	e16c      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b886:	2b02      	cmp	r3, #2
 800b888:	d11b      	bne.n	800b8c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b898:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	61bb      	str	r3, [r7, #24]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	61bb      	str	r3, [r7, #24]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	61bb      	str	r3, [r7, #24]
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	e14c      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	699b      	ldr	r3, [r3, #24]
 800b8e4:	617b      	str	r3, [r7, #20]
 800b8e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b8e8:	e138      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	f200 80f1 	bhi.w	800bad6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d123      	bne.n	800b944 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b8fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b900:	68f8      	ldr	r0, [r7, #12]
 800b902:	f000 fbed 	bl	800c0e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e139      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b91a:	b2d2      	uxtb	r2, r2
 800b91c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b922:	1c5a      	adds	r2, r3, #1
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b92c:	3b01      	subs	r3, #1
 800b92e:	b29a      	uxth	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b938:	b29b      	uxth	r3, r3
 800b93a:	3b01      	subs	r3, #1
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b942:	e10b      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b948:	2b02      	cmp	r3, #2
 800b94a:	d14e      	bne.n	800b9ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b952:	2200      	movs	r2, #0
 800b954:	4906      	ldr	r1, [pc, #24]	; (800b970 <HAL_I2C_Master_Receive+0x22c>)
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f000 fa6a 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d008      	beq.n	800b974 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e10e      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
 800b966:	bf00      	nop
 800b968:	00100002 	.word	0x00100002
 800b96c:	ffff0000 	.word	0xffff0000
 800b970:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	691a      	ldr	r2, [r3, #16]
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b98e:	b2d2      	uxtb	r2, r2
 800b990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b996:	1c5a      	adds	r2, r3, #1
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	b29a      	uxth	r2, r3
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	691a      	ldr	r2, [r3, #16]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c0:	b2d2      	uxtb	r2, r2
 800b9c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c8:	1c5a      	adds	r2, r3, #1
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9e8:	e0b8      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	9300      	str	r3, [sp, #0]
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	4966      	ldr	r1, [pc, #408]	; (800bb8c <HAL_I2C_Master_Receive+0x448>)
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f000 fa1b 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e0bf      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	691a      	ldr	r2, [r3, #16]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	b2d2      	uxtb	r2, r2
 800ba20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	1c5a      	adds	r2, r3, #1
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	494f      	ldr	r1, [pc, #316]	; (800bb8c <HAL_I2C_Master_Receive+0x448>)
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f9ed 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e091      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	691a      	ldr	r2, [r3, #16]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7a:	b2d2      	uxtb	r2, r2
 800ba7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba8c:	3b01      	subs	r3, #1
 800ba8e:	b29a      	uxth	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	691a      	ldr	r2, [r3, #16]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab4:	1c5a      	adds	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800babe:	3b01      	subs	r3, #1
 800bac0:	b29a      	uxth	r2, r3
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baca:	b29b      	uxth	r3, r3
 800bacc:	3b01      	subs	r3, #1
 800bace:	b29a      	uxth	r2, r3
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bad4:	e042      	b.n	800bb5c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bad8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f000 fb00 	bl	800c0e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bae0:	4603      	mov	r3, r0
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d001      	beq.n	800baea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	e04c      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	691a      	ldr	r2, [r3, #16]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	b2d2      	uxtb	r2, r2
 800baf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafc:	1c5a      	adds	r2, r3, #1
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb06:	3b01      	subs	r3, #1
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	3b01      	subs	r3, #1
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	f003 0304 	and.w	r3, r3, #4
 800bb26:	2b04      	cmp	r3, #4
 800bb28:	d118      	bne.n	800bb5c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691a      	ldr	r2, [r3, #16]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3c:	1c5a      	adds	r2, r3, #1
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb46:	3b01      	subs	r3, #1
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	3b01      	subs	r3, #1
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	f47f aec2 	bne.w	800b8ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	e000      	b.n	800bb84 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bb82:	2302      	movs	r3, #2
  }
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3728      	adds	r7, #40	; 0x28
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	00010004 	.word	0x00010004

0800bb90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	603b      	str	r3, [r7, #0]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	2b08      	cmp	r3, #8
 800bbaa:	d006      	beq.n	800bbba <I2C_MasterRequestWrite+0x2a>
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d003      	beq.n	800bbba <I2C_MasterRequestWrite+0x2a>
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bbb8:	d108      	bne.n	800bbcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbc8:	601a      	str	r2, [r3, #0]
 800bbca:	e00b      	b.n	800bbe4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbd0:	2b12      	cmp	r3, #18
 800bbd2:	d107      	bne.n	800bbe4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	681a      	ldr	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	9300      	str	r3, [sp, #0]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bbf0:	68f8      	ldr	r0, [r7, #12]
 800bbf2:	f000 f91d 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d00d      	beq.n	800bc18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc0a:	d103      	bne.n	800bc14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bc14:	2303      	movs	r3, #3
 800bc16:	e035      	b.n	800bc84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc20:	d108      	bne.n	800bc34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bc22:	897b      	ldrh	r3, [r7, #10]
 800bc24:	b2db      	uxtb	r3, r3
 800bc26:	461a      	mov	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bc30:	611a      	str	r2, [r3, #16]
 800bc32:	e01b      	b.n	800bc6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bc34:	897b      	ldrh	r3, [r7, #10]
 800bc36:	11db      	asrs	r3, r3, #7
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	f003 0306 	and.w	r3, r3, #6
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	f063 030f 	orn	r3, r3, #15
 800bc44:	b2da      	uxtb	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	490e      	ldr	r1, [pc, #56]	; (800bc8c <I2C_MasterRequestWrite+0xfc>)
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f943 	bl	800bede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d001      	beq.n	800bc62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e010      	b.n	800bc84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bc62:	897b      	ldrh	r3, [r7, #10]
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	4907      	ldr	r1, [pc, #28]	; (800bc90 <I2C_MasterRequestWrite+0x100>)
 800bc72:	68f8      	ldr	r0, [r7, #12]
 800bc74:	f000 f933 	bl	800bede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d001      	beq.n	800bc82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	00010008 	.word	0x00010008
 800bc90:	00010002 	.word	0x00010002

0800bc94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b088      	sub	sp, #32
 800bc98:	af02      	add	r7, sp, #8
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	607a      	str	r2, [r7, #4]
 800bc9e:	603b      	str	r3, [r7, #0]
 800bca0:	460b      	mov	r3, r1
 800bca2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bcb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	2b08      	cmp	r3, #8
 800bcbe:	d006      	beq.n	800bcce <I2C_MasterRequestRead+0x3a>
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d003      	beq.n	800bcce <I2C_MasterRequestRead+0x3a>
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bccc:	d108      	bne.n	800bce0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e00b      	b.n	800bcf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce4:	2b11      	cmp	r3, #17
 800bce6:	d107      	bne.n	800bcf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	9300      	str	r3, [sp, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f893 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00d      	beq.n	800bd2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd1e:	d103      	bne.n	800bd28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bd28:	2303      	movs	r3, #3
 800bd2a:	e079      	b.n	800be20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	691b      	ldr	r3, [r3, #16]
 800bd30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd34:	d108      	bne.n	800bd48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bd36:	897b      	ldrh	r3, [r7, #10]
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	f043 0301 	orr.w	r3, r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	611a      	str	r2, [r3, #16]
 800bd46:	e05f      	b.n	800be08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd48:	897b      	ldrh	r3, [r7, #10]
 800bd4a:	11db      	asrs	r3, r3, #7
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0306 	and.w	r3, r3, #6
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	f063 030f 	orn	r3, r3, #15
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	4930      	ldr	r1, [pc, #192]	; (800be28 <I2C_MasterRequestRead+0x194>)
 800bd66:	68f8      	ldr	r0, [r7, #12]
 800bd68:	f000 f8b9 	bl	800bede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	e054      	b.n	800be20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd76:	897b      	ldrh	r3, [r7, #10]
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	4929      	ldr	r1, [pc, #164]	; (800be2c <I2C_MasterRequestRead+0x198>)
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f000 f8a9 	bl	800bede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d001      	beq.n	800bd96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	e044      	b.n	800be20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd96:	2300      	movs	r3, #0
 800bd98:	613b      	str	r3, [r7, #16]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	695b      	ldr	r3, [r3, #20]
 800bda0:	613b      	str	r3, [r7, #16]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	613b      	str	r3, [r7, #16]
 800bdaa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f000 f831 	bl	800be30 <I2C_WaitOnFlagUntilTimeout>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d00d      	beq.n	800bdf0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bde2:	d103      	bne.n	800bdec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e017      	b.n	800be20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bdf0:	897b      	ldrh	r3, [r7, #10]
 800bdf2:	11db      	asrs	r3, r3, #7
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	f003 0306 	and.w	r3, r3, #6
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	f063 030e 	orn	r3, r3, #14
 800be00:	b2da      	uxtb	r2, r3
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	687a      	ldr	r2, [r7, #4]
 800be0c:	4907      	ldr	r1, [pc, #28]	; (800be2c <I2C_MasterRequestRead+0x198>)
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f000 f865 	bl	800bede <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e000      	b.n	800be20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800be1e:	2300      	movs	r3, #0
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}
 800be28:	00010008 	.word	0x00010008
 800be2c:	00010002 	.word	0x00010002

0800be30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	603b      	str	r3, [r7, #0]
 800be3c:	4613      	mov	r3, r2
 800be3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be40:	e025      	b.n	800be8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be48:	d021      	beq.n	800be8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be4a:	f7fd ff89 	bl	8009d60 <HAL_GetTick>
 800be4e:	4602      	mov	r2, r0
 800be50:	69bb      	ldr	r3, [r7, #24]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	683a      	ldr	r2, [r7, #0]
 800be56:	429a      	cmp	r2, r3
 800be58:	d302      	bcc.n	800be60 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d116      	bne.n	800be8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2220      	movs	r2, #32
 800be6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	f043 0220 	orr.w	r2, r3, #32
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e023      	b.n	800bed6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	0c1b      	lsrs	r3, r3, #16
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b01      	cmp	r3, #1
 800be96:	d10d      	bne.n	800beb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	43da      	mvns	r2, r3
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	4013      	ands	r3, r2
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bf0c      	ite	eq
 800beaa:	2301      	moveq	r3, #1
 800beac:	2300      	movne	r3, #0
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	461a      	mov	r2, r3
 800beb2:	e00c      	b.n	800bece <I2C_WaitOnFlagUntilTimeout+0x9e>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	699b      	ldr	r3, [r3, #24]
 800beba:	43da      	mvns	r2, r3
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	4013      	ands	r3, r2
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	bf0c      	ite	eq
 800bec6:	2301      	moveq	r3, #1
 800bec8:	2300      	movne	r3, #0
 800beca:	b2db      	uxtb	r3, r3
 800becc:	461a      	mov	r2, r3
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d0b6      	beq.n	800be42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	607a      	str	r2, [r7, #4]
 800beea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800beec:	e051      	b.n	800bf92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	695b      	ldr	r3, [r3, #20]
 800bef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800befc:	d123      	bne.n	800bf46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bf16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2220      	movs	r2, #32
 800bf22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf32:	f043 0204 	orr.w	r2, r3, #4
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e046      	b.n	800bfd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d021      	beq.n	800bf92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf4e:	f7fd ff07 	bl	8009d60 <HAL_GetTick>
 800bf52:	4602      	mov	r2, r0
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d302      	bcc.n	800bf64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d116      	bne.n	800bf92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2220      	movs	r2, #32
 800bf6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7e:	f043 0220 	orr.w	r2, r3, #32
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	e020      	b.n	800bfd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	0c1b      	lsrs	r3, r3, #16
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d10c      	bne.n	800bfb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	695b      	ldr	r3, [r3, #20]
 800bfa2:	43da      	mvns	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	bf14      	ite	ne
 800bfae:	2301      	movne	r3, #1
 800bfb0:	2300      	moveq	r3, #0
 800bfb2:	b2db      	uxtb	r3, r3
 800bfb4:	e00b      	b.n	800bfce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	43da      	mvns	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bf14      	ite	ne
 800bfc8:	2301      	movne	r3, #1
 800bfca:	2300      	moveq	r3, #0
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d18d      	bne.n	800beee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	60f8      	str	r0, [r7, #12]
 800bfe4:	60b9      	str	r1, [r7, #8]
 800bfe6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bfe8:	e02d      	b.n	800c046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f8ce 	bl	800c18c <I2C_IsAcknowledgeFailed>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e02d      	b.n	800c056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bffa:	68bb      	ldr	r3, [r7, #8]
 800bffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c000:	d021      	beq.n	800c046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c002:	f7fd fead 	bl	8009d60 <HAL_GetTick>
 800c006:	4602      	mov	r2, r0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	1ad3      	subs	r3, r2, r3
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d302      	bcc.n	800c018 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d116      	bne.n	800c046 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2220      	movs	r2, #32
 800c022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c032:	f043 0220 	orr.w	r2, r3, #32
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2200      	movs	r2, #0
 800c03e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e007      	b.n	800c056 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c050:	2b80      	cmp	r3, #128	; 0x80
 800c052:	d1ca      	bne.n	800bfea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b084      	sub	sp, #16
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	60b9      	str	r1, [r7, #8]
 800c068:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c06a:	e02d      	b.n	800c0c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f88d 	bl	800c18c <I2C_IsAcknowledgeFailed>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d001      	beq.n	800c07c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c078:	2301      	movs	r3, #1
 800c07a:	e02d      	b.n	800c0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c082:	d021      	beq.n	800c0c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c084:	f7fd fe6c 	bl	8009d60 <HAL_GetTick>
 800c088:	4602      	mov	r2, r0
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	429a      	cmp	r2, r3
 800c092:	d302      	bcc.n	800c09a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d116      	bne.n	800c0c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2220      	movs	r2, #32
 800c0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b4:	f043 0220 	orr.w	r2, r3, #32
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	e007      	b.n	800c0d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	f003 0304 	and.w	r3, r3, #4
 800c0d2:	2b04      	cmp	r3, #4
 800c0d4:	d1ca      	bne.n	800c06c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3710      	adds	r7, #16
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}

0800c0e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0ec:	e042      	b.n	800c174 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	f003 0310 	and.w	r3, r3, #16
 800c0f8:	2b10      	cmp	r3, #16
 800c0fa:	d119      	bne.n	800c130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f06f 0210 	mvn.w	r2, #16
 800c104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2200      	movs	r2, #0
 800c128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e029      	b.n	800c184 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c130:	f7fd fe16 	bl	8009d60 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d302      	bcc.n	800c146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c140:	68bb      	ldr	r3, [r7, #8]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d116      	bne.n	800c174 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2200      	movs	r2, #0
 800c14a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2220      	movs	r2, #32
 800c150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c160:	f043 0220 	orr.w	r2, r3, #32
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e007      	b.n	800c184 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c17e:	2b40      	cmp	r3, #64	; 0x40
 800c180:	d1b5      	bne.n	800c0ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a2:	d11b      	bne.n	800c1dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c1ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2220      	movs	r2, #32
 800c1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1c8:	f043 0204 	orr.w	r2, r3, #4
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e000      	b.n	800c1de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	370c      	adds	r7, #12
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
	...

0800c1ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	603b      	str	r3, [r7, #0]
 800c1fa:	4b20      	ldr	r3, [pc, #128]	; (800c27c <HAL_PWREx_EnableOverDrive+0x90>)
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	4a1f      	ldr	r2, [pc, #124]	; (800c27c <HAL_PWREx_EnableOverDrive+0x90>)
 800c200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c204:	6413      	str	r3, [r2, #64]	; 0x40
 800c206:	4b1d      	ldr	r3, [pc, #116]	; (800c27c <HAL_PWREx_EnableOverDrive+0x90>)
 800c208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c212:	4b1b      	ldr	r3, [pc, #108]	; (800c280 <HAL_PWREx_EnableOverDrive+0x94>)
 800c214:	2201      	movs	r2, #1
 800c216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c218:	f7fd fda2 	bl	8009d60 <HAL_GetTick>
 800c21c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c21e:	e009      	b.n	800c234 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c220:	f7fd fd9e 	bl	8009d60 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c22e:	d901      	bls.n	800c234 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e01f      	b.n	800c274 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c234:	4b13      	ldr	r3, [pc, #76]	; (800c284 <HAL_PWREx_EnableOverDrive+0x98>)
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c23c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c240:	d1ee      	bne.n	800c220 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c242:	4b11      	ldr	r3, [pc, #68]	; (800c288 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c248:	f7fd fd8a 	bl	8009d60 <HAL_GetTick>
 800c24c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c24e:	e009      	b.n	800c264 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c250:	f7fd fd86 	bl	8009d60 <HAL_GetTick>
 800c254:	4602      	mov	r2, r0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	1ad3      	subs	r3, r2, r3
 800c25a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c25e:	d901      	bls.n	800c264 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c260:	2303      	movs	r3, #3
 800c262:	e007      	b.n	800c274 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c264:	4b07      	ldr	r3, [pc, #28]	; (800c284 <HAL_PWREx_EnableOverDrive+0x98>)
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c26c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c270:	d1ee      	bne.n	800c250 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	40023800 	.word	0x40023800
 800c280:	420e0040 	.word	0x420e0040
 800c284:	40007000 	.word	0x40007000
 800c288:	420e0044 	.word	0x420e0044

0800c28c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d101      	bne.n	800c2a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e0cc      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c2a0:	4b68      	ldr	r3, [pc, #416]	; (800c444 <HAL_RCC_ClockConfig+0x1b8>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 030f 	and.w	r3, r3, #15
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d90c      	bls.n	800c2c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2ae:	4b65      	ldr	r3, [pc, #404]	; (800c444 <HAL_RCC_ClockConfig+0x1b8>)
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	b2d2      	uxtb	r2, r2
 800c2b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2b6:	4b63      	ldr	r3, [pc, #396]	; (800c444 <HAL_RCC_ClockConfig+0x1b8>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f003 030f 	and.w	r3, r3, #15
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d001      	beq.n	800c2c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e0b8      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0302 	and.w	r3, r3, #2
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d020      	beq.n	800c316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0304 	and.w	r3, r3, #4
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d005      	beq.n	800c2ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2e0:	4b59      	ldr	r3, [pc, #356]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	4a58      	ldr	r2, [pc, #352]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c2ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 0308 	and.w	r3, r3, #8
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d005      	beq.n	800c304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2f8:	4b53      	ldr	r3, [pc, #332]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	4a52      	ldr	r2, [pc, #328]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c2fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c304:	4b50      	ldr	r3, [pc, #320]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	494d      	ldr	r1, [pc, #308]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c312:	4313      	orrs	r3, r2
 800c314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f003 0301 	and.w	r3, r3, #1
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d044      	beq.n	800c3ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	2b01      	cmp	r3, #1
 800c328:	d107      	bne.n	800c33a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c32a:	4b47      	ldr	r3, [pc, #284]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c332:	2b00      	cmp	r3, #0
 800c334:	d119      	bne.n	800c36a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e07f      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d003      	beq.n	800c34a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c346:	2b03      	cmp	r3, #3
 800c348:	d107      	bne.n	800c35a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c34a:	4b3f      	ldr	r3, [pc, #252]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c352:	2b00      	cmp	r3, #0
 800c354:	d109      	bne.n	800c36a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e06f      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c35a:	4b3b      	ldr	r3, [pc, #236]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0302 	and.w	r3, r3, #2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d101      	bne.n	800c36a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	e067      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c36a:	4b37      	ldr	r3, [pc, #220]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f023 0203 	bic.w	r2, r3, #3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	4934      	ldr	r1, [pc, #208]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c37c:	f7fd fcf0 	bl	8009d60 <HAL_GetTick>
 800c380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c382:	e00a      	b.n	800c39a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c384:	f7fd fcec 	bl	8009d60 <HAL_GetTick>
 800c388:	4602      	mov	r2, r0
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c392:	4293      	cmp	r3, r2
 800c394:	d901      	bls.n	800c39a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c396:	2303      	movs	r3, #3
 800c398:	e04f      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c39a:	4b2b      	ldr	r3, [pc, #172]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f003 020c 	and.w	r2, r3, #12
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d1eb      	bne.n	800c384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c3ac:	4b25      	ldr	r3, [pc, #148]	; (800c444 <HAL_RCC_ClockConfig+0x1b8>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 030f 	and.w	r3, r3, #15
 800c3b4:	683a      	ldr	r2, [r7, #0]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d20c      	bcs.n	800c3d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ba:	4b22      	ldr	r3, [pc, #136]	; (800c444 <HAL_RCC_ClockConfig+0x1b8>)
 800c3bc:	683a      	ldr	r2, [r7, #0]
 800c3be:	b2d2      	uxtb	r2, r2
 800c3c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3c2:	4b20      	ldr	r3, [pc, #128]	; (800c444 <HAL_RCC_ClockConfig+0x1b8>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f003 030f 	and.w	r3, r3, #15
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d001      	beq.n	800c3d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	e032      	b.n	800c43a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0304 	and.w	r3, r3, #4
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d008      	beq.n	800c3f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3e0:	4b19      	ldr	r3, [pc, #100]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	4916      	ldr	r1, [pc, #88]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0308 	and.w	r3, r3, #8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d009      	beq.n	800c412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c3fe:	4b12      	ldr	r3, [pc, #72]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	490e      	ldr	r1, [pc, #56]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c40e:	4313      	orrs	r3, r2
 800c410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c412:	f000 f821 	bl	800c458 <HAL_RCC_GetSysClockFreq>
 800c416:	4601      	mov	r1, r0
 800c418:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <HAL_RCC_ClockConfig+0x1bc>)
 800c41a:	689b      	ldr	r3, [r3, #8]
 800c41c:	091b      	lsrs	r3, r3, #4
 800c41e:	f003 030f 	and.w	r3, r3, #15
 800c422:	4a0a      	ldr	r2, [pc, #40]	; (800c44c <HAL_RCC_ClockConfig+0x1c0>)
 800c424:	5cd3      	ldrb	r3, [r2, r3]
 800c426:	fa21 f303 	lsr.w	r3, r1, r3
 800c42a:	4a09      	ldr	r2, [pc, #36]	; (800c450 <HAL_RCC_ClockConfig+0x1c4>)
 800c42c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c42e:	4b09      	ldr	r3, [pc, #36]	; (800c454 <HAL_RCC_ClockConfig+0x1c8>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4618      	mov	r0, r3
 800c434:	f7fd fc50 	bl	8009cd8 <HAL_InitTick>

  return HAL_OK;
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	40023c00 	.word	0x40023c00
 800c448:	40023800 	.word	0x40023800
 800c44c:	0801a058 	.word	0x0801a058
 800c450:	20000000 	.word	0x20000000
 800c454:	20000004 	.word	0x20000004

0800c458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	607b      	str	r3, [r7, #4]
 800c462:	2300      	movs	r3, #0
 800c464:	60fb      	str	r3, [r7, #12]
 800c466:	2300      	movs	r3, #0
 800c468:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c46e:	4b63      	ldr	r3, [pc, #396]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	f003 030c 	and.w	r3, r3, #12
 800c476:	2b04      	cmp	r3, #4
 800c478:	d007      	beq.n	800c48a <HAL_RCC_GetSysClockFreq+0x32>
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	d008      	beq.n	800c490 <HAL_RCC_GetSysClockFreq+0x38>
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f040 80b4 	bne.w	800c5ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c484:	4b5e      	ldr	r3, [pc, #376]	; (800c600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c486:	60bb      	str	r3, [r7, #8]
       break;
 800c488:	e0b3      	b.n	800c5f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c48a:	4b5d      	ldr	r3, [pc, #372]	; (800c600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c48c:	60bb      	str	r3, [r7, #8]
      break;
 800c48e:	e0b0      	b.n	800c5f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c490:	4b5a      	ldr	r3, [pc, #360]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c498:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c49a:	4b58      	ldr	r3, [pc, #352]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d04a      	beq.n	800c53c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4a6:	4b55      	ldr	r3, [pc, #340]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	099b      	lsrs	r3, r3, #6
 800c4ac:	f04f 0400 	mov.w	r4, #0
 800c4b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	ea03 0501 	and.w	r5, r3, r1
 800c4bc:	ea04 0602 	and.w	r6, r4, r2
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4632      	mov	r2, r6
 800c4c4:	f04f 0300 	mov.w	r3, #0
 800c4c8:	f04f 0400 	mov.w	r4, #0
 800c4cc:	0154      	lsls	r4, r2, #5
 800c4ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c4d2:	014b      	lsls	r3, r1, #5
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	1b49      	subs	r1, r1, r5
 800c4da:	eb62 0206 	sbc.w	r2, r2, r6
 800c4de:	f04f 0300 	mov.w	r3, #0
 800c4e2:	f04f 0400 	mov.w	r4, #0
 800c4e6:	0194      	lsls	r4, r2, #6
 800c4e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c4ec:	018b      	lsls	r3, r1, #6
 800c4ee:	1a5b      	subs	r3, r3, r1
 800c4f0:	eb64 0402 	sbc.w	r4, r4, r2
 800c4f4:	f04f 0100 	mov.w	r1, #0
 800c4f8:	f04f 0200 	mov.w	r2, #0
 800c4fc:	00e2      	lsls	r2, r4, #3
 800c4fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c502:	00d9      	lsls	r1, r3, #3
 800c504:	460b      	mov	r3, r1
 800c506:	4614      	mov	r4, r2
 800c508:	195b      	adds	r3, r3, r5
 800c50a:	eb44 0406 	adc.w	r4, r4, r6
 800c50e:	f04f 0100 	mov.w	r1, #0
 800c512:	f04f 0200 	mov.w	r2, #0
 800c516:	02a2      	lsls	r2, r4, #10
 800c518:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c51c:	0299      	lsls	r1, r3, #10
 800c51e:	460b      	mov	r3, r1
 800c520:	4614      	mov	r4, r2
 800c522:	4618      	mov	r0, r3
 800c524:	4621      	mov	r1, r4
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f04f 0400 	mov.w	r4, #0
 800c52c:	461a      	mov	r2, r3
 800c52e:	4623      	mov	r3, r4
 800c530:	f7f4 fbc2 	bl	8000cb8 <__aeabi_uldivmod>
 800c534:	4603      	mov	r3, r0
 800c536:	460c      	mov	r4, r1
 800c538:	60fb      	str	r3, [r7, #12]
 800c53a:	e049      	b.n	800c5d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c53c:	4b2f      	ldr	r3, [pc, #188]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	099b      	lsrs	r3, r3, #6
 800c542:	f04f 0400 	mov.w	r4, #0
 800c546:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c54a:	f04f 0200 	mov.w	r2, #0
 800c54e:	ea03 0501 	and.w	r5, r3, r1
 800c552:	ea04 0602 	and.w	r6, r4, r2
 800c556:	4629      	mov	r1, r5
 800c558:	4632      	mov	r2, r6
 800c55a:	f04f 0300 	mov.w	r3, #0
 800c55e:	f04f 0400 	mov.w	r4, #0
 800c562:	0154      	lsls	r4, r2, #5
 800c564:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c568:	014b      	lsls	r3, r1, #5
 800c56a:	4619      	mov	r1, r3
 800c56c:	4622      	mov	r2, r4
 800c56e:	1b49      	subs	r1, r1, r5
 800c570:	eb62 0206 	sbc.w	r2, r2, r6
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	f04f 0400 	mov.w	r4, #0
 800c57c:	0194      	lsls	r4, r2, #6
 800c57e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c582:	018b      	lsls	r3, r1, #6
 800c584:	1a5b      	subs	r3, r3, r1
 800c586:	eb64 0402 	sbc.w	r4, r4, r2
 800c58a:	f04f 0100 	mov.w	r1, #0
 800c58e:	f04f 0200 	mov.w	r2, #0
 800c592:	00e2      	lsls	r2, r4, #3
 800c594:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c598:	00d9      	lsls	r1, r3, #3
 800c59a:	460b      	mov	r3, r1
 800c59c:	4614      	mov	r4, r2
 800c59e:	195b      	adds	r3, r3, r5
 800c5a0:	eb44 0406 	adc.w	r4, r4, r6
 800c5a4:	f04f 0100 	mov.w	r1, #0
 800c5a8:	f04f 0200 	mov.w	r2, #0
 800c5ac:	02a2      	lsls	r2, r4, #10
 800c5ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c5b2:	0299      	lsls	r1, r3, #10
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4614      	mov	r4, r2
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	4621      	mov	r1, r4
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f04f 0400 	mov.w	r4, #0
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4623      	mov	r3, r4
 800c5c6:	f7f4 fb77 	bl	8000cb8 <__aeabi_uldivmod>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	0c1b      	lsrs	r3, r3, #16
 800c5d6:	f003 0303 	and.w	r3, r3, #3
 800c5da:	3301      	adds	r3, #1
 800c5dc:	005b      	lsls	r3, r3, #1
 800c5de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5e8:	60bb      	str	r3, [r7, #8]
      break;
 800c5ea:	e002      	b.n	800c5f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c5ec:	4b04      	ldr	r3, [pc, #16]	; (800c600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c5ee:	60bb      	str	r3, [r7, #8]
      break;
 800c5f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c5f2:	68bb      	ldr	r3, [r7, #8]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5fc:	40023800 	.word	0x40023800
 800c600:	00f42400 	.word	0x00f42400

0800c604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c604:	b480      	push	{r7}
 800c606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c608:	4b03      	ldr	r3, [pc, #12]	; (800c618 <HAL_RCC_GetHCLKFreq+0x14>)
 800c60a:	681b      	ldr	r3, [r3, #0]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	20000000 	.word	0x20000000

0800c61c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c620:	f7ff fff0 	bl	800c604 <HAL_RCC_GetHCLKFreq>
 800c624:	4601      	mov	r1, r0
 800c626:	4b05      	ldr	r3, [pc, #20]	; (800c63c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	0a9b      	lsrs	r3, r3, #10
 800c62c:	f003 0307 	and.w	r3, r3, #7
 800c630:	4a03      	ldr	r2, [pc, #12]	; (800c640 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c632:	5cd3      	ldrb	r3, [r2, r3]
 800c634:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c638:	4618      	mov	r0, r3
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	40023800 	.word	0x40023800
 800c640:	0801a068 	.word	0x0801a068

0800c644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c648:	f7ff ffdc 	bl	800c604 <HAL_RCC_GetHCLKFreq>
 800c64c:	4601      	mov	r1, r0
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	0b5b      	lsrs	r3, r3, #13
 800c654:	f003 0307 	and.w	r3, r3, #7
 800c658:	4a03      	ldr	r2, [pc, #12]	; (800c668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c65a:	5cd3      	ldrb	r3, [r2, r3]
 800c65c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c660:	4618      	mov	r0, r3
 800c662:	bd80      	pop	{r7, pc}
 800c664:	40023800 	.word	0x40023800
 800c668:	0801a068 	.word	0x0801a068

0800c66c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b088      	sub	sp, #32
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c674:	2300      	movs	r3, #0
 800c676:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c678:	2300      	movs	r3, #0
 800c67a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c67c:	2300      	movs	r3, #0
 800c67e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c680:	2300      	movs	r3, #0
 800c682:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00a      	beq.n	800c6aa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c694:	4b66      	ldr	r3, [pc, #408]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a2:	4963      	ldr	r1, [pc, #396]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c6b6:	4b5e      	ldr	r3, [pc, #376]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c4:	495a      	ldr	r1, [pc, #360]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6c6:	4313      	orrs	r3, r2
 800c6c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 0301 	and.w	r3, r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10b      	bne.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d105      	bne.n	800c6f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d075      	beq.n	800c7dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c6f0:	4b50      	ldr	r3, [pc, #320]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6f6:	f7fd fb33 	bl	8009d60 <HAL_GetTick>
 800c6fa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c6fc:	e008      	b.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c6fe:	f7fd fb2f 	bl	8009d60 <HAL_GetTick>
 800c702:	4602      	mov	r2, r0
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	1ad3      	subs	r3, r2, r3
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d901      	bls.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c70c:	2303      	movs	r3, #3
 800c70e:	e1dc      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c710:	4b47      	ldr	r3, [pc, #284]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1f0      	bne.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 0301 	and.w	r3, r3, #1
 800c724:	2b00      	cmp	r3, #0
 800c726:	d009      	beq.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	019a      	lsls	r2, r3, #6
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	689b      	ldr	r3, [r3, #8]
 800c732:	071b      	lsls	r3, r3, #28
 800c734:	493e      	ldr	r1, [pc, #248]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c736:	4313      	orrs	r3, r2
 800c738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 0302 	and.w	r3, r3, #2
 800c744:	2b00      	cmp	r3, #0
 800c746:	d01f      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c748:	4b39      	ldr	r3, [pc, #228]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c74e:	0f1b      	lsrs	r3, r3, #28
 800c750:	f003 0307 	and.w	r3, r3, #7
 800c754:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	019a      	lsls	r2, r3, #6
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	061b      	lsls	r3, r3, #24
 800c762:	431a      	orrs	r2, r3
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	071b      	lsls	r3, r3, #28
 800c768:	4931      	ldr	r1, [pc, #196]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c76a:	4313      	orrs	r3, r2
 800c76c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c770:	4b2f      	ldr	r3, [pc, #188]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c776:	f023 021f 	bic.w	r2, r3, #31
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	3b01      	subs	r3, #1
 800c780:	492b      	ldr	r1, [pc, #172]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c782:	4313      	orrs	r3, r2
 800c784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00d      	beq.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	019a      	lsls	r2, r3, #6
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	061b      	lsls	r3, r3, #24
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	071b      	lsls	r3, r3, #28
 800c7a8:	4921      	ldr	r1, [pc, #132]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c7b0:	4b20      	ldr	r3, [pc, #128]	; (800c834 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7b6:	f7fd fad3 	bl	8009d60 <HAL_GetTick>
 800c7ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7bc:	e008      	b.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c7be:	f7fd facf 	bl	8009d60 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e17c      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c7d0:	4b17      	ldr	r3, [pc, #92]	; (800c830 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0f0      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0304 	and.w	r3, r3, #4
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d112      	bne.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10c      	bne.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	f000 80ce 	beq.w	800c99e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c80a:	f040 80c8 	bne.w	800c99e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c80e:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c814:	f7fd faa4 	bl	8009d60 <HAL_GetTick>
 800c818:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c81a:	e00f      	b.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c81c:	f7fd faa0 	bl	8009d60 <HAL_GetTick>
 800c820:	4602      	mov	r2, r0
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	1ad3      	subs	r3, r2, r3
 800c826:	2b02      	cmp	r3, #2
 800c828:	d908      	bls.n	800c83c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c82a:	2303      	movs	r3, #3
 800c82c:	e14d      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c82e:	bf00      	nop
 800c830:	40023800 	.word	0x40023800
 800c834:	42470068 	.word	0x42470068
 800c838:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c83c:	4ba5      	ldr	r3, [pc, #660]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c848:	d0e8      	beq.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0304 	and.w	r3, r3, #4
 800c852:	2b00      	cmp	r3, #0
 800c854:	d02e      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c856:	4b9f      	ldr	r3, [pc, #636]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c85c:	0c1b      	lsrs	r3, r3, #16
 800c85e:	f003 0303 	and.w	r3, r3, #3
 800c862:	3301      	adds	r3, #1
 800c864:	005b      	lsls	r3, r3, #1
 800c866:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c868:	4b9a      	ldr	r3, [pc, #616]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c86a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c86e:	0f1b      	lsrs	r3, r3, #28
 800c870:	f003 0307 	and.w	r3, r3, #7
 800c874:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	019a      	lsls	r2, r3, #6
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	085b      	lsrs	r3, r3, #1
 800c880:	3b01      	subs	r3, #1
 800c882:	041b      	lsls	r3, r3, #16
 800c884:	431a      	orrs	r2, r3
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	699b      	ldr	r3, [r3, #24]
 800c88a:	061b      	lsls	r3, r3, #24
 800c88c:	431a      	orrs	r2, r3
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	071b      	lsls	r3, r3, #28
 800c892:	4990      	ldr	r1, [pc, #576]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c894:	4313      	orrs	r3, r2
 800c896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c89a:	4b8e      	ldr	r3, [pc, #568]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c89c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	021b      	lsls	r3, r3, #8
 800c8ac:	4989      	ldr	r1, [pc, #548]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 0308 	and.w	r3, r3, #8
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d02c      	beq.n	800c91a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c8c0:	4b84      	ldr	r3, [pc, #528]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8c6:	0c1b      	lsrs	r3, r3, #16
 800c8c8:	f003 0303 	and.w	r3, r3, #3
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c8d2:	4b80      	ldr	r3, [pc, #512]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8d8:	0e1b      	lsrs	r3, r3, #24
 800c8da:	f003 030f 	and.w	r3, r3, #15
 800c8de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	019a      	lsls	r2, r3, #6
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	085b      	lsrs	r3, r3, #1
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	041b      	lsls	r3, r3, #16
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	061b      	lsls	r3, r3, #24
 800c8f4:	431a      	orrs	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	69db      	ldr	r3, [r3, #28]
 800c8fa:	071b      	lsls	r3, r3, #28
 800c8fc:	4975      	ldr	r1, [pc, #468]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c904:	4b73      	ldr	r3, [pc, #460]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c90a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c912:	4970      	ldr	r1, [pc, #448]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c914:	4313      	orrs	r3, r2
 800c916:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c922:	2b00      	cmp	r3, #0
 800c924:	d024      	beq.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c92a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c92e:	d11f      	bne.n	800c970 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c930:	4b68      	ldr	r3, [pc, #416]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c936:	0e1b      	lsrs	r3, r3, #24
 800c938:	f003 030f 	and.w	r3, r3, #15
 800c93c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c93e:	4b65      	ldr	r3, [pc, #404]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c944:	0f1b      	lsrs	r3, r3, #28
 800c946:	f003 0307 	and.w	r3, r3, #7
 800c94a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	019a      	lsls	r2, r3, #6
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	085b      	lsrs	r3, r3, #1
 800c958:	3b01      	subs	r3, #1
 800c95a:	041b      	lsls	r3, r3, #16
 800c95c:	431a      	orrs	r2, r3
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	061b      	lsls	r3, r3, #24
 800c962:	431a      	orrs	r2, r3
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	071b      	lsls	r3, r3, #28
 800c968:	495a      	ldr	r1, [pc, #360]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96a:	4313      	orrs	r3, r2
 800c96c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c970:	4b59      	ldr	r3, [pc, #356]	; (800cad8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c972:	2201      	movs	r2, #1
 800c974:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c976:	f7fd f9f3 	bl	8009d60 <HAL_GetTick>
 800c97a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c97c:	e008      	b.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c97e:	f7fd f9ef 	bl	8009d60 <HAL_GetTick>
 800c982:	4602      	mov	r2, r0
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d901      	bls.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e09c      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c990:	4b50      	ldr	r3, [pc, #320]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c99c:	d1ef      	bne.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f003 0320 	and.w	r3, r3, #32
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f000 8083 	beq.w	800cab2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60bb      	str	r3, [r7, #8]
 800c9b0:	4b48      	ldr	r3, [pc, #288]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	4a47      	ldr	r2, [pc, #284]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9ba:	6413      	str	r3, [r2, #64]	; 0x40
 800c9bc:	4b45      	ldr	r3, [pc, #276]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9c4:	60bb      	str	r3, [r7, #8]
 800c9c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c9c8:	4b44      	ldr	r3, [pc, #272]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a43      	ldr	r2, [pc, #268]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9d4:	f7fd f9c4 	bl	8009d60 <HAL_GetTick>
 800c9d8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9da:	e008      	b.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c9dc:	f7fd f9c0 	bl	8009d60 <HAL_GetTick>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	1ad3      	subs	r3, r2, r3
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d901      	bls.n	800c9ee <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c9ea:	2303      	movs	r3, #3
 800c9ec:	e06d      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c9ee:	4b3b      	ldr	r3, [pc, #236]	; (800cadc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d0f0      	beq.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c9fa:	4b36      	ldr	r3, [pc, #216]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca02:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d02f      	beq.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca12:	69ba      	ldr	r2, [r7, #24]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d028      	beq.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca18:	4b2e      	ldr	r3, [pc, #184]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca20:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ca22:	4b2f      	ldr	r3, [pc, #188]	; (800cae0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ca24:	2201      	movs	r2, #1
 800ca26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ca28:	4b2d      	ldr	r3, [pc, #180]	; (800cae0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ca2e:	4a29      	ldr	r2, [pc, #164]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ca34:	4b27      	ldr	r3, [pc, #156]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca38:	f003 0301 	and.w	r3, r3, #1
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d114      	bne.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ca40:	f7fd f98e 	bl	8009d60 <HAL_GetTick>
 800ca44:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca46:	e00a      	b.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca48:	f7fd f98a 	bl	8009d60 <HAL_GetTick>
 800ca4c:	4602      	mov	r2, r0
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	1ad3      	subs	r3, r2, r3
 800ca52:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d901      	bls.n	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800ca5a:	2303      	movs	r3, #3
 800ca5c:	e035      	b.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca5e:	4b1d      	ldr	r3, [pc, #116]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca62:	f003 0302 	and.w	r3, r3, #2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0ee      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca76:	d10d      	bne.n	800ca94 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800ca78:	4b16      	ldr	r3, [pc, #88]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ca88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca8c:	4911      	ldr	r1, [pc, #68]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	608b      	str	r3, [r1, #8]
 800ca92:	e005      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800ca94:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	4a0e      	ldr	r2, [pc, #56]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ca9e:	6093      	str	r3, [r2, #8]
 800caa0:	4b0c      	ldr	r3, [pc, #48]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800caac:	4909      	ldr	r1, [pc, #36]	; (800cad4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caae:	4313      	orrs	r3, r2
 800cab0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 0310 	and.w	r3, r3, #16
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d004      	beq.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cac4:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cac6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3720      	adds	r7, #32
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	40023800 	.word	0x40023800
 800cad8:	42470070 	.word	0x42470070
 800cadc:	40007000 	.word	0x40007000
 800cae0:	42470e40 	.word	0x42470e40
 800cae4:	424711e0 	.word	0x424711e0

0800cae8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b086      	sub	sp, #24
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d075      	beq.n	800cbec <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb00:	4ba2      	ldr	r3, [pc, #648]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	f003 030c 	and.w	r3, r3, #12
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d00c      	beq.n	800cb26 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb0c:	4b9f      	ldr	r3, [pc, #636]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	d112      	bne.n	800cb3e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb18:	4b9c      	ldr	r3, [pc, #624]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb24:	d10b      	bne.n	800cb3e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb26:	4b99      	ldr	r3, [pc, #612]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d05b      	beq.n	800cbea <HAL_RCC_OscConfig+0x102>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d157      	bne.n	800cbea <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e20b      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb46:	d106      	bne.n	800cb56 <HAL_RCC_OscConfig+0x6e>
 800cb48:	4b90      	ldr	r3, [pc, #576]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a8f      	ldr	r2, [pc, #572]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb52:	6013      	str	r3, [r2, #0]
 800cb54:	e01d      	b.n	800cb92 <HAL_RCC_OscConfig+0xaa>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb5e:	d10c      	bne.n	800cb7a <HAL_RCC_OscConfig+0x92>
 800cb60:	4b8a      	ldr	r3, [pc, #552]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a89      	ldr	r2, [pc, #548]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cb6a:	6013      	str	r3, [r2, #0]
 800cb6c:	4b87      	ldr	r3, [pc, #540]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a86      	ldr	r2, [pc, #536]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	e00b      	b.n	800cb92 <HAL_RCC_OscConfig+0xaa>
 800cb7a:	4b84      	ldr	r3, [pc, #528]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a83      	ldr	r2, [pc, #524]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb84:	6013      	str	r3, [r2, #0]
 800cb86:	4b81      	ldr	r3, [pc, #516]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a80      	ldr	r2, [pc, #512]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cb8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb90:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d013      	beq.n	800cbc2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb9a:	f7fd f8e1 	bl	8009d60 <HAL_GetTick>
 800cb9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cba0:	e008      	b.n	800cbb4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cba2:	f7fd f8dd 	bl	8009d60 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b64      	cmp	r3, #100	; 0x64
 800cbae:	d901      	bls.n	800cbb4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e1d0      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbb4:	4b75      	ldr	r3, [pc, #468]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0f0      	beq.n	800cba2 <HAL_RCC_OscConfig+0xba>
 800cbc0:	e014      	b.n	800cbec <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbc2:	f7fd f8cd 	bl	8009d60 <HAL_GetTick>
 800cbc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cbc8:	e008      	b.n	800cbdc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cbca:	f7fd f8c9 	bl	8009d60 <HAL_GetTick>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	2b64      	cmp	r3, #100	; 0x64
 800cbd6:	d901      	bls.n	800cbdc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e1bc      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cbdc:	4b6b      	ldr	r3, [pc, #428]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d1f0      	bne.n	800cbca <HAL_RCC_OscConfig+0xe2>
 800cbe8:	e000      	b.n	800cbec <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 0302 	and.w	r3, r3, #2
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d063      	beq.n	800ccc0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cbf8:	4b64      	ldr	r3, [pc, #400]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	f003 030c 	and.w	r3, r3, #12
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00b      	beq.n	800cc1c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc04:	4b61      	ldr	r3, [pc, #388]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cc0c:	2b08      	cmp	r3, #8
 800cc0e:	d11c      	bne.n	800cc4a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc10:	4b5e      	ldr	r3, [pc, #376]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d116      	bne.n	800cc4a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc1c:	4b5b      	ldr	r3, [pc, #364]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 0302 	and.w	r3, r3, #2
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d005      	beq.n	800cc34 <HAL_RCC_OscConfig+0x14c>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	68db      	ldr	r3, [r3, #12]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d001      	beq.n	800cc34 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e190      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc34:	4b55      	ldr	r3, [pc, #340]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	00db      	lsls	r3, r3, #3
 800cc42:	4952      	ldr	r1, [pc, #328]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc44:	4313      	orrs	r3, r2
 800cc46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc48:	e03a      	b.n	800ccc0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68db      	ldr	r3, [r3, #12]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d020      	beq.n	800cc94 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cc52:	4b4f      	ldr	r3, [pc, #316]	; (800cd90 <HAL_RCC_OscConfig+0x2a8>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc58:	f7fd f882 	bl	8009d60 <HAL_GetTick>
 800cc5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc5e:	e008      	b.n	800cc72 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc60:	f7fd f87e 	bl	8009d60 <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	2b02      	cmp	r3, #2
 800cc6c:	d901      	bls.n	800cc72 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e171      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cc72:	4b46      	ldr	r3, [pc, #280]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0302 	and.w	r3, r3, #2
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0f0      	beq.n	800cc60 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc7e:	4b43      	ldr	r3, [pc, #268]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	493f      	ldr	r1, [pc, #252]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	600b      	str	r3, [r1, #0]
 800cc92:	e015      	b.n	800ccc0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc94:	4b3e      	ldr	r3, [pc, #248]	; (800cd90 <HAL_RCC_OscConfig+0x2a8>)
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc9a:	f7fd f861 	bl	8009d60 <HAL_GetTick>
 800cc9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cca0:	e008      	b.n	800ccb4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cca2:	f7fd f85d 	bl	8009d60 <HAL_GetTick>
 800cca6:	4602      	mov	r2, r0
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d901      	bls.n	800ccb4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e150      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ccb4:	4b35      	ldr	r3, [pc, #212]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 0302 	and.w	r3, r3, #2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d1f0      	bne.n	800cca2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0308 	and.w	r3, r3, #8
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d030      	beq.n	800cd2e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	695b      	ldr	r3, [r3, #20]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d016      	beq.n	800cd02 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ccd4:	4b2f      	ldr	r3, [pc, #188]	; (800cd94 <HAL_RCC_OscConfig+0x2ac>)
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccda:	f7fd f841 	bl	8009d60 <HAL_GetTick>
 800ccde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cce0:	e008      	b.n	800ccf4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cce2:	f7fd f83d 	bl	8009d60 <HAL_GetTick>
 800cce6:	4602      	mov	r2, r0
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d901      	bls.n	800ccf4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	e130      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ccf4:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800ccf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccf8:	f003 0302 	and.w	r3, r3, #2
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d0f0      	beq.n	800cce2 <HAL_RCC_OscConfig+0x1fa>
 800cd00:	e015      	b.n	800cd2e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd02:	4b24      	ldr	r3, [pc, #144]	; (800cd94 <HAL_RCC_OscConfig+0x2ac>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd08:	f7fd f82a 	bl	8009d60 <HAL_GetTick>
 800cd0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd0e:	e008      	b.n	800cd22 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd10:	f7fd f826 	bl	8009d60 <HAL_GetTick>
 800cd14:	4602      	mov	r2, r0
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d901      	bls.n	800cd22 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e119      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd22:	4b1a      	ldr	r3, [pc, #104]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cd24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd26:	f003 0302 	and.w	r3, r3, #2
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1f0      	bne.n	800cd10 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 0304 	and.w	r3, r3, #4
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 809f 	beq.w	800ce7a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd40:	4b12      	ldr	r3, [pc, #72]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cd42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10f      	bne.n	800cd6c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]
 800cd50:	4b0e      	ldr	r3, [pc, #56]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd54:	4a0d      	ldr	r2, [pc, #52]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cd56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd5a:	6413      	str	r3, [r2, #64]	; 0x40
 800cd5c:	4b0b      	ldr	r3, [pc, #44]	; (800cd8c <HAL_RCC_OscConfig+0x2a4>)
 800cd5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd64:	60fb      	str	r3, [r7, #12]
 800cd66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <HAL_RCC_OscConfig+0x2b0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d120      	bne.n	800cdba <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cd78:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <HAL_RCC_OscConfig+0x2b0>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a06      	ldr	r2, [pc, #24]	; (800cd98 <HAL_RCC_OscConfig+0x2b0>)
 800cd7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd82:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd84:	f7fc ffec 	bl	8009d60 <HAL_GetTick>
 800cd88:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cd8a:	e010      	b.n	800cdae <HAL_RCC_OscConfig+0x2c6>
 800cd8c:	40023800 	.word	0x40023800
 800cd90:	42470000 	.word	0x42470000
 800cd94:	42470e80 	.word	0x42470e80
 800cd98:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd9c:	f7fc ffe0 	bl	8009d60 <HAL_GetTick>
 800cda0:	4602      	mov	r2, r0
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	d901      	bls.n	800cdae <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	e0d3      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cdae:	4b6c      	ldr	r3, [pc, #432]	; (800cf60 <HAL_RCC_OscConfig+0x478>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d0f0      	beq.n	800cd9c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d106      	bne.n	800cdd0 <HAL_RCC_OscConfig+0x2e8>
 800cdc2:	4b68      	ldr	r3, [pc, #416]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc6:	4a67      	ldr	r2, [pc, #412]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdc8:	f043 0301 	orr.w	r3, r3, #1
 800cdcc:	6713      	str	r3, [r2, #112]	; 0x70
 800cdce:	e01c      	b.n	800ce0a <HAL_RCC_OscConfig+0x322>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	2b05      	cmp	r3, #5
 800cdd6:	d10c      	bne.n	800cdf2 <HAL_RCC_OscConfig+0x30a>
 800cdd8:	4b62      	ldr	r3, [pc, #392]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cddc:	4a61      	ldr	r2, [pc, #388]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdde:	f043 0304 	orr.w	r3, r3, #4
 800cde2:	6713      	str	r3, [r2, #112]	; 0x70
 800cde4:	4b5f      	ldr	r3, [pc, #380]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cde6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cde8:	4a5e      	ldr	r2, [pc, #376]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdea:	f043 0301 	orr.w	r3, r3, #1
 800cdee:	6713      	str	r3, [r2, #112]	; 0x70
 800cdf0:	e00b      	b.n	800ce0a <HAL_RCC_OscConfig+0x322>
 800cdf2:	4b5c      	ldr	r3, [pc, #368]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdf6:	4a5b      	ldr	r2, [pc, #364]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cdf8:	f023 0301 	bic.w	r3, r3, #1
 800cdfc:	6713      	str	r3, [r2, #112]	; 0x70
 800cdfe:	4b59      	ldr	r3, [pc, #356]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce02:	4a58      	ldr	r2, [pc, #352]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce04:	f023 0304 	bic.w	r3, r3, #4
 800ce08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d015      	beq.n	800ce3e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce12:	f7fc ffa5 	bl	8009d60 <HAL_GetTick>
 800ce16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce18:	e00a      	b.n	800ce30 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce1a:	f7fc ffa1 	bl	8009d60 <HAL_GetTick>
 800ce1e:	4602      	mov	r2, r0
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	1ad3      	subs	r3, r2, r3
 800ce24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d901      	bls.n	800ce30 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	e092      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce30:	4b4c      	ldr	r3, [pc, #304]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d0ee      	beq.n	800ce1a <HAL_RCC_OscConfig+0x332>
 800ce3c:	e014      	b.n	800ce68 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce3e:	f7fc ff8f 	bl	8009d60 <HAL_GetTick>
 800ce42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce44:	e00a      	b.n	800ce5c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ce46:	f7fc ff8b 	bl	8009d60 <HAL_GetTick>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	1ad3      	subs	r3, r2, r3
 800ce50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e07c      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce5c:	4b41      	ldr	r3, [pc, #260]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce60:	f003 0302 	and.w	r3, r3, #2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1ee      	bne.n	800ce46 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce68:	7dfb      	ldrb	r3, [r7, #23]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d105      	bne.n	800ce7a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce6e:	4b3d      	ldr	r3, [pc, #244]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce72:	4a3c      	ldr	r2, [pc, #240]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce78:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	699b      	ldr	r3, [r3, #24]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d068      	beq.n	800cf54 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ce82:	4b38      	ldr	r3, [pc, #224]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	f003 030c 	and.w	r3, r3, #12
 800ce8a:	2b08      	cmp	r3, #8
 800ce8c:	d060      	beq.n	800cf50 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	699b      	ldr	r3, [r3, #24]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	d145      	bne.n	800cf22 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce96:	4b34      	ldr	r3, [pc, #208]	; (800cf68 <HAL_RCC_OscConfig+0x480>)
 800ce98:	2200      	movs	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce9c:	f7fc ff60 	bl	8009d60 <HAL_GetTick>
 800cea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cea2:	e008      	b.n	800ceb6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cea4:	f7fc ff5c 	bl	8009d60 <HAL_GetTick>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	1ad3      	subs	r3, r2, r3
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d901      	bls.n	800ceb6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800ceb2:	2303      	movs	r3, #3
 800ceb4:	e04f      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ceb6:	4b2b      	ldr	r3, [pc, #172]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d1f0      	bne.n	800cea4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	69da      	ldr	r2, [r3, #28]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6a1b      	ldr	r3, [r3, #32]
 800ceca:	431a      	orrs	r2, r3
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced0:	019b      	lsls	r3, r3, #6
 800ced2:	431a      	orrs	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	085b      	lsrs	r3, r3, #1
 800ceda:	3b01      	subs	r3, #1
 800cedc:	041b      	lsls	r3, r3, #16
 800cede:	431a      	orrs	r2, r3
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	061b      	lsls	r3, r3, #24
 800cee6:	431a      	orrs	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceec:	071b      	lsls	r3, r3, #28
 800ceee:	491d      	ldr	r1, [pc, #116]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cef4:	4b1c      	ldr	r3, [pc, #112]	; (800cf68 <HAL_RCC_OscConfig+0x480>)
 800cef6:	2201      	movs	r2, #1
 800cef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cefa:	f7fc ff31 	bl	8009d60 <HAL_GetTick>
 800cefe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf00:	e008      	b.n	800cf14 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf02:	f7fc ff2d 	bl	8009d60 <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	2b02      	cmp	r3, #2
 800cf0e:	d901      	bls.n	800cf14 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cf10:	2303      	movs	r3, #3
 800cf12:	e020      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf14:	4b13      	ldr	r3, [pc, #76]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d0f0      	beq.n	800cf02 <HAL_RCC_OscConfig+0x41a>
 800cf20:	e018      	b.n	800cf54 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf22:	4b11      	ldr	r3, [pc, #68]	; (800cf68 <HAL_RCC_OscConfig+0x480>)
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf28:	f7fc ff1a 	bl	8009d60 <HAL_GetTick>
 800cf2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf2e:	e008      	b.n	800cf42 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf30:	f7fc ff16 	bl	8009d60 <HAL_GetTick>
 800cf34:	4602      	mov	r2, r0
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	1ad3      	subs	r3, r2, r3
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	d901      	bls.n	800cf42 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	e009      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf42:	4b08      	ldr	r3, [pc, #32]	; (800cf64 <HAL_RCC_OscConfig+0x47c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f0      	bne.n	800cf30 <HAL_RCC_OscConfig+0x448>
 800cf4e:	e001      	b.n	800cf54 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	e000      	b.n	800cf56 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3718      	adds	r7, #24
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	40007000 	.word	0x40007000
 800cf64:	40023800 	.word	0x40023800
 800cf68:	42470060 	.word	0x42470060

0800cf6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d101      	bne.n	800cf7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e022      	b.n	800cfc4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf84:	b2db      	uxtb	r3, r3
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d105      	bne.n	800cf96 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7fa f895 	bl	80070c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2203      	movs	r2, #3
 800cf9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 f814 	bl	800cfcc <HAL_SD_InitCard>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e00a      	b.n	800cfc4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cfcc:	b5b0      	push	{r4, r5, r7, lr}
 800cfce:	b08e      	sub	sp, #56	; 0x38
 800cfd0:	af04      	add	r7, sp, #16
 800cfd2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cfe8:	2376      	movs	r3, #118	; 0x76
 800cfea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681d      	ldr	r5, [r3, #0]
 800cff0:	466c      	mov	r4, sp
 800cff2:	f107 0314 	add.w	r3, r7, #20
 800cff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cffa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cffe:	f107 0308 	add.w	r3, r7, #8
 800d002:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d004:	4628      	mov	r0, r5
 800d006:	f003 fa87 	bl	8010518 <SDIO_Init>
 800d00a:	4603      	mov	r3, r0
 800d00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d018:	2301      	movs	r3, #1
 800d01a:	e031      	b.n	800d080 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d01c:	4b1a      	ldr	r3, [pc, #104]	; (800d088 <HAL_SD_InitCard+0xbc>)
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4618      	mov	r0, r3
 800d028:	f003 fabf 	bl	80105aa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d02c:	4b16      	ldr	r3, [pc, #88]	; (800d088 <HAL_SD_InitCard+0xbc>)
 800d02e:	2201      	movs	r2, #1
 800d030:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f000 ffc6 	bl	800dfc4 <SD_PowerON>
 800d038:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d03a:	6a3b      	ldr	r3, [r7, #32]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d00b      	beq.n	800d058 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	431a      	orrs	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	e013      	b.n	800d080 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f000 fee5 	bl	800de28 <SD_InitCard>
 800d05e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d060:	6a3b      	ldr	r3, [r7, #32]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00b      	beq.n	800d07e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d072:	6a3b      	ldr	r3, [r7, #32]
 800d074:	431a      	orrs	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e000      	b.n	800d080 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3728      	adds	r7, #40	; 0x28
 800d084:	46bd      	mov	sp, r7
 800d086:	bdb0      	pop	{r4, r5, r7, pc}
 800d088:	422580a0 	.word	0x422580a0

0800d08c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08c      	sub	sp, #48	; 0x30
 800d090:	af00      	add	r7, sp, #0
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d107      	bne.n	800d0b4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e0c7      	b.n	800d244 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d0ba:	b2db      	uxtb	r3, r3
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	f040 80c0 	bne.w	800d242 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	441a      	add	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d907      	bls.n	800d0e6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e0ae      	b.n	800d244 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2203      	movs	r2, #3
 800d0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d104:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10a:	4a50      	ldr	r2, [pc, #320]	; (800d24c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d10c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	4a4f      	ldr	r2, [pc, #316]	; (800d250 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d114:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11a:	2200      	movs	r2, #0
 800d11c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	3380      	adds	r3, #128	; 0x80
 800d128:	4619      	mov	r1, r3
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	025b      	lsls	r3, r3, #9
 800d130:	089b      	lsrs	r3, r3, #2
 800d132:	f7fd fc07 	bl	800a944 <HAL_DMA_Start_IT>
 800d136:	4603      	mov	r3, r0
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d017      	beq.n	800d16c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d14a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a40      	ldr	r2, [pc, #256]	; (800d254 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d152:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d158:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2201      	movs	r2, #1
 800d164:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d168:	2301      	movs	r3, #1
 800d16a:	e06b      	b.n	800d244 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d16c:	4b3a      	ldr	r3, [pc, #232]	; (800d258 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d176:	2b01      	cmp	r3, #1
 800d178:	d002      	beq.n	800d180 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17c:	025b      	lsls	r3, r3, #9
 800d17e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d188:	4618      	mov	r0, r3
 800d18a:	f003 faa1 	bl	80106d0 <SDMMC_CmdBlockLength>
 800d18e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	2b00      	cmp	r3, #0
 800d194:	d00f      	beq.n	800d1b6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a2e      	ldr	r2, [pc, #184]	; (800d254 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d19c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	431a      	orrs	r2, r3
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e046      	b.n	800d244 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	025b      	lsls	r3, r3, #9
 800d1c0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d1c2:	2390      	movs	r3, #144	; 0x90
 800d1c4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d1c6:	2302      	movs	r3, #2
 800d1c8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f107 0210 	add.w	r2, r7, #16
 800d1da:	4611      	mov	r1, r2
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f003 fa4b 	bl	8010678 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d90a      	bls.n	800d1fe <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2282      	movs	r2, #130	; 0x82
 800d1ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f003 faaf 	bl	8010758 <SDMMC_CmdReadMultiBlock>
 800d1fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d1fc:	e009      	b.n	800d212 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2281      	movs	r2, #129	; 0x81
 800d202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d20a:	4618      	mov	r0, r3
 800d20c:	f003 fa82 	bl	8010714 <SDMMC_CmdReadSingleBlock>
 800d210:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d214:	2b00      	cmp	r3, #0
 800d216:	d012      	beq.n	800d23e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a0d      	ldr	r2, [pc, #52]	; (800d254 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d21e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d226:	431a      	orrs	r2, r3
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2200      	movs	r2, #0
 800d238:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e002      	b.n	800d244 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	e000      	b.n	800d244 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d242:	2302      	movs	r3, #2
  }
}
 800d244:	4618      	mov	r0, r3
 800d246:	3730      	adds	r7, #48	; 0x30
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	0800dc37 	.word	0x0800dc37
 800d250:	0800dca9 	.word	0x0800dca9
 800d254:	004005ff 	.word	0x004005ff
 800d258:	4225858c 	.word	0x4225858c

0800d25c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08c      	sub	sp, #48	; 0x30
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d107      	bne.n	800d284 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d278:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e0ca      	b.n	800d41a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	f040 80c3 	bne.w	800d418 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	441a      	add	r2, r3
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d907      	bls.n	800d2b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e0b1      	b.n	800d41a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f042 021a 	orr.w	r2, r2, #26
 800d2d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2da:	4a52      	ldr	r2, [pc, #328]	; (800d424 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d2dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2e2:	4a51      	ldr	r2, [pc, #324]	; (800d428 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d2e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d002      	beq.n	800d2fc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f8:	025b      	lsls	r3, r3, #9
 800d2fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d304:	4618      	mov	r0, r3
 800d306:	f003 f9e3 	bl	80106d0 <SDMMC_CmdBlockLength>
 800d30a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d00f      	beq.n	800d332 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a45      	ldr	r2, [pc, #276]	; (800d42c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d318:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	431a      	orrs	r2, r3
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2201      	movs	r2, #1
 800d32a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e073      	b.n	800d41a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	2b01      	cmp	r3, #1
 800d336:	d90a      	bls.n	800d34e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	22a0      	movs	r2, #160	; 0xa0
 800d33c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d344:	4618      	mov	r0, r3
 800d346:	f003 fa4b 	bl	80107e0 <SDMMC_CmdWriteMultiBlock>
 800d34a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d34c:	e009      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2290      	movs	r2, #144	; 0x90
 800d352:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d35a:	4618      	mov	r0, r3
 800d35c:	f003 fa1e 	bl	801079c <SDMMC_CmdWriteSingleBlock>
 800d360:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d364:	2b00      	cmp	r3, #0
 800d366:	d012      	beq.n	800d38e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a2f      	ldr	r2, [pc, #188]	; (800d42c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d36e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	431a      	orrs	r2, r3
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2200      	movs	r2, #0
 800d388:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e045      	b.n	800d41a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d38e:	4b28      	ldr	r3, [pc, #160]	; (800d430 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d390:	2201      	movs	r2, #1
 800d392:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d398:	68b9      	ldr	r1, [r7, #8]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3380      	adds	r3, #128	; 0x80
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	025b      	lsls	r3, r3, #9
 800d3a6:	089b      	lsrs	r3, r3, #2
 800d3a8:	f7fd facc 	bl	800a944 <HAL_DMA_Start_IT>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d01a      	beq.n	800d3e8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f022 021a 	bic.w	r2, r2, #26
 800d3c0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a19      	ldr	r2, [pc, #100]	; (800d42c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d3c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e018      	b.n	800d41a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	025b      	lsls	r3, r3, #9
 800d3f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d3f4:	2390      	movs	r3, #144	; 0x90
 800d3f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d400:	2301      	movs	r3, #1
 800d402:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f107 0210 	add.w	r2, r7, #16
 800d40c:	4611      	mov	r1, r2
 800d40e:	4618      	mov	r0, r3
 800d410:	f003 f932 	bl	8010678 <SDIO_ConfigData>

      return HAL_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	e000      	b.n	800d41a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d418:	2302      	movs	r3, #2
  }
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3730      	adds	r7, #48	; 0x30
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	0800dc0d 	.word	0x0800dc0d
 800d428:	0800dca9 	.word	0x0800dca9
 800d42c:	004005ff 	.word	0x004005ff
 800d430:	4225858c 	.word	0x4225858c

0800d434 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b084      	sub	sp, #16
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d440:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d008      	beq.n	800d462 <HAL_SD_IRQHandler+0x2e>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	f003 0308 	and.w	r3, r3, #8
 800d456:	2b00      	cmp	r3, #0
 800d458:	d003      	beq.n	800d462 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 ffc8 	bl	800e3f0 <SD_Read_IT>
 800d460:	e155      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 808f 	beq.w	800d590 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d47a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	6812      	ldr	r2, [r2, #0]
 800d486:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d48a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d48e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0201 	bic.w	r2, r2, #1
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f003 0308 	and.w	r3, r3, #8
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d039      	beq.n	800d51e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f003 0302 	and.w	r3, r3, #2
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d104      	bne.n	800d4be <HAL_SD_IRQHandler+0x8a>
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f003 0320 	and.w	r3, r3, #32
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d011      	beq.n	800d4e2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f003 f9ae 	bl	8010824 <SDMMC_CmdStopTransfer>
 800d4c8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d008      	beq.n	800d4e2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	431a      	orrs	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f000 f91f 	bl	800d720 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b00      	cmp	r3, #0
 800d502:	d104      	bne.n	800d50e <HAL_SD_IRQHandler+0xda>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d003      	beq.n	800d516 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f003 fe04 	bl	801111c <HAL_SD_RxCpltCallback>
 800d514:	e0fb      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f003 fdf6 	bl	8011108 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d51c:	e0f7      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d524:	2b00      	cmp	r3, #0
 800d526:	f000 80f2 	beq.w	800d70e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b00      	cmp	r3, #0
 800d532:	d011      	beq.n	800d558 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4618      	mov	r0, r3
 800d53a:	f003 f973 	bl	8010824 <SDMMC_CmdStopTransfer>
 800d53e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d008      	beq.n	800d558 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	431a      	orrs	r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f8e4 	bl	800d720 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f040 80d5 	bne.w	800d70e <HAL_SD_IRQHandler+0x2da>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f003 0302 	and.w	r3, r3, #2
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	f040 80cf 	bne.w	800d70e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f022 0208 	bic.w	r2, r2, #8
 800d57e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f003 fdbd 	bl	8011108 <HAL_SD_TxCpltCallback>
}
 800d58e:	e0be      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d008      	beq.n	800d5b0 <HAL_SD_IRQHandler+0x17c>
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d003      	beq.n	800d5b0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f000 ff72 	bl	800e492 <SD_Write_IT>
 800d5ae:	e0ae      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	f000 80a7 	beq.w	800d70e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d2:	f043 0202 	orr.w	r2, r3, #2
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e0:	f003 0308 	and.w	r3, r3, #8
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d005      	beq.n	800d5f4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	f043 0208 	orr.w	r2, r3, #8
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fa:	f003 0320 	and.w	r3, r3, #32
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d005      	beq.n	800d60e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	f043 0220 	orr.w	r2, r3, #32
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d614:	f003 0310 	and.w	r3, r3, #16
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d005      	beq.n	800d628 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d620:	f043 0210 	orr.w	r2, r3, #16
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d630:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d640:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4618      	mov	r0, r3
 800d648:	f003 f8ec 	bl	8010824 <SDMMC_CmdStopTransfer>
 800d64c:	4602      	mov	r2, r0
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	431a      	orrs	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f003 0308 	and.w	r3, r3, #8
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00a      	beq.n	800d678 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2201      	movs	r2, #1
 800d666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 f855 	bl	800d720 <HAL_SD_ErrorCallback>
}
 800d676:	e04a      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d045      	beq.n	800d70e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f003 0310 	and.w	r3, r3, #16
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d104      	bne.n	800d696 <HAL_SD_IRQHandler+0x262>
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f003 0320 	and.w	r3, r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	d011      	beq.n	800d6ba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d69a:	4a1f      	ldr	r2, [pc, #124]	; (800d718 <HAL_SD_IRQHandler+0x2e4>)
 800d69c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fd f9a6 	bl	800a9f4 <HAL_DMA_Abort_IT>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d02f      	beq.n	800d70e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f000 fb4a 	bl	800dd4c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d6b8:	e029      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f003 0301 	and.w	r3, r3, #1
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d104      	bne.n	800d6ce <HAL_SD_IRQHandler+0x29a>
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f003 0302 	and.w	r3, r3, #2
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d011      	beq.n	800d6f2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d2:	4a12      	ldr	r2, [pc, #72]	; (800d71c <HAL_SD_IRQHandler+0x2e8>)
 800d6d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd f98a 	bl	800a9f4 <HAL_DMA_Abort_IT>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d013      	beq.n	800d70e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f000 fb65 	bl	800ddba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6f0:	e00d      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2200      	movs	r2, #0
 800d704:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f003 fcf4 	bl	80110f4 <HAL_SD_AbortCallback>
}
 800d70c:	e7ff      	b.n	800d70e <HAL_SD_IRQHandler+0x2da>
 800d70e:	bf00      	nop
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	0800dd4d 	.word	0x0800dd4d
 800d71c:	0800ddbb 	.word	0x0800ddbb

0800d720 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d728:	bf00      	nop
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d734:	b480      	push	{r7}
 800d736:	b083      	sub	sp, #12
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d742:	0f9b      	lsrs	r3, r3, #30
 800d744:	b2da      	uxtb	r2, r3
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d74e:	0e9b      	lsrs	r3, r3, #26
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 030f 	and.w	r3, r3, #15
 800d756:	b2da      	uxtb	r2, r3
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d760:	0e1b      	lsrs	r3, r3, #24
 800d762:	b2db      	uxtb	r3, r3
 800d764:	f003 0303 	and.w	r3, r3, #3
 800d768:	b2da      	uxtb	r2, r3
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d772:	0c1b      	lsrs	r3, r3, #16
 800d774:	b2da      	uxtb	r2, r3
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d77e:	0a1b      	lsrs	r3, r3, #8
 800d780:	b2da      	uxtb	r2, r3
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d794:	0d1b      	lsrs	r3, r3, #20
 800d796:	b29a      	uxth	r2, r3
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7a0:	0c1b      	lsrs	r3, r3, #16
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 030f 	and.w	r3, r3, #15
 800d7a8:	b2da      	uxtb	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7b2:	0bdb      	lsrs	r3, r3, #15
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	f003 0301 	and.w	r3, r3, #1
 800d7ba:	b2da      	uxtb	r2, r3
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7c4:	0b9b      	lsrs	r3, r3, #14
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7d6:	0b5b      	lsrs	r3, r3, #13
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d7e8:	0b1b      	lsrs	r3, r3, #12
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	f003 0301 	and.w	r3, r3, #1
 800d7f0:	b2da      	uxtb	r2, r3
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d800:	2b00      	cmp	r3, #0
 800d802:	d163      	bne.n	800d8cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d808:	009a      	lsls	r2, r3, #2
 800d80a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d80e:	4013      	ands	r3, r2
 800d810:	687a      	ldr	r2, [r7, #4]
 800d812:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d814:	0f92      	lsrs	r2, r2, #30
 800d816:	431a      	orrs	r2, r3
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d820:	0edb      	lsrs	r3, r3, #27
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0307 	and.w	r3, r3, #7
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d832:	0e1b      	lsrs	r3, r3, #24
 800d834:	b2db      	uxtb	r3, r3
 800d836:	f003 0307 	and.w	r3, r3, #7
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d844:	0d5b      	lsrs	r3, r3, #21
 800d846:	b2db      	uxtb	r3, r3
 800d848:	f003 0307 	and.w	r3, r3, #7
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d856:	0c9b      	lsrs	r3, r3, #18
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	f003 0307 	and.w	r3, r3, #7
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d868:	0bdb      	lsrs	r3, r3, #15
 800d86a:	b2db      	uxtb	r3, r3
 800d86c:	f003 0307 	and.w	r3, r3, #7
 800d870:	b2da      	uxtb	r2, r3
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	691b      	ldr	r3, [r3, #16]
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	7e1b      	ldrb	r3, [r3, #24]
 800d884:	b2db      	uxtb	r3, r3
 800d886:	f003 0307 	and.w	r3, r3, #7
 800d88a:	3302      	adds	r3, #2
 800d88c:	2201      	movs	r2, #1
 800d88e:	fa02 f303 	lsl.w	r3, r2, r3
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d896:	fb02 f203 	mul.w	r2, r2, r3
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	7a1b      	ldrb	r3, [r3, #8]
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	f003 030f 	and.w	r3, r3, #15
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	409a      	lsls	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8b4:	687a      	ldr	r2, [r7, #4]
 800d8b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d8b8:	0a52      	lsrs	r2, r2, #9
 800d8ba:	fb02 f203 	mul.w	r2, r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8c8:	661a      	str	r2, [r3, #96]	; 0x60
 800d8ca:	e031      	b.n	800d930 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d0:	2b01      	cmp	r3, #1
 800d8d2:	d11d      	bne.n	800d910 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8d8:	041b      	lsls	r3, r3, #16
 800d8da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e2:	0c1b      	lsrs	r3, r3, #16
 800d8e4:	431a      	orrs	r2, r3
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	691b      	ldr	r3, [r3, #16]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	029a      	lsls	r2, r3, #10
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d904:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	661a      	str	r2, [r3, #96]	; 0x60
 800d90e:	e00f      	b.n	800d930 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a58      	ldr	r2, [pc, #352]	; (800da78 <HAL_SD_GetCardCSD+0x344>)
 800d916:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d92c:	2301      	movs	r3, #1
 800d92e:	e09d      	b.n	800da6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d934:	0b9b      	lsrs	r3, r3, #14
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d946:	09db      	lsrs	r3, r3, #7
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d968:	0fdb      	lsrs	r3, r3, #31
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d974:	0f5b      	lsrs	r3, r3, #29
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f003 0303 	and.w	r3, r3, #3
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d986:	0e9b      	lsrs	r3, r3, #26
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0307 	and.w	r3, r3, #7
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d998:	0d9b      	lsrs	r3, r3, #22
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f003 030f 	and.w	r3, r3, #15
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9aa:	0d5b      	lsrs	r3, r3, #21
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	2200      	movs	r2, #0
 800d9be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c6:	0c1b      	lsrs	r3, r3, #16
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9da:	0bdb      	lsrs	r3, r3, #15
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ee:	0b9b      	lsrs	r3, r3, #14
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da02:	0b5b      	lsrs	r3, r3, #13
 800da04:	b2db      	uxtb	r3, r3
 800da06:	f003 0301 	and.w	r3, r3, #1
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da16:	0b1b      	lsrs	r3, r3, #12
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da2a:	0a9b      	lsrs	r3, r3, #10
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 0303 	and.w	r3, r3, #3
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3e:	0a1b      	lsrs	r3, r3, #8
 800da40:	b2db      	uxtb	r3, r3
 800da42:	f003 0303 	and.w	r3, r3, #3
 800da46:	b2da      	uxtb	r2, r3
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da52:	085b      	lsrs	r3, r3, #1
 800da54:	b2db      	uxtb	r3, r3
 800da56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2201      	movs	r2, #1
 800da66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr
 800da78:	004005ff 	.word	0x004005ff

0800da7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dad4:	b5b0      	push	{r4, r5, r7, lr}
 800dad6:	b08e      	sub	sp, #56	; 0x38
 800dad8:	af04      	add	r7, sp, #16
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2203      	movs	r2, #3
 800dae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800daea:	2b03      	cmp	r3, #3
 800daec:	d02e      	beq.n	800db4c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf4:	d106      	bne.n	800db04 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dafa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	639a      	str	r2, [r3, #56]	; 0x38
 800db02:	e029      	b.n	800db58 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db0a:	d10a      	bne.n	800db22 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800db0c:	6878      	ldr	r0, [r7, #4]
 800db0e:	f000 fb0f 	bl	800e130 <SD_WideBus_Enable>
 800db12:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	431a      	orrs	r2, r3
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38
 800db20:	e01a      	b.n	800db58 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fb4c 	bl	800e1c6 <SD_WideBus_Disable>
 800db2e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db36:	431a      	orrs	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	639a      	str	r2, [r3, #56]	; 0x38
 800db3c:	e00c      	b.n	800db58 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	639a      	str	r2, [r3, #56]	; 0x38
 800db4a:	e005      	b.n	800db58 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d009      	beq.n	800db74 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	4a18      	ldr	r2, [pc, #96]	; (800dbc8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800db66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2201      	movs	r2, #1
 800db6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800db70:	2301      	movs	r3, #1
 800db72:	e024      	b.n	800dbbe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681d      	ldr	r5, [r3, #0]
 800db9a:	466c      	mov	r4, sp
 800db9c:	f107 0318 	add.w	r3, r7, #24
 800dba0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dba4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dba8:	f107 030c 	add.w	r3, r7, #12
 800dbac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbae:	4628      	mov	r0, r5
 800dbb0:	f002 fcb2 	bl	8010518 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3728      	adds	r7, #40	; 0x28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	004005ff 	.word	0x004005ff

0800dbcc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b086      	sub	sp, #24
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dbd8:	f107 030c 	add.w	r3, r7, #12
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 fa7e 	bl	800e0e0 <SD_SendStatus>
 800dbe4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	431a      	orrs	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	0a5b      	lsrs	r3, r3, #9
 800dbfc:	f003 030f 	and.w	r3, r3, #15
 800dc00:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dc02:	693b      	ldr	r3, [r7, #16]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3718      	adds	r7, #24
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc28:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dc2a:	bf00      	nop
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr

0800dc36 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dc36:	b580      	push	{r7, lr}
 800dc38:	b084      	sub	sp, #16
 800dc3a:	af00      	add	r7, sp, #0
 800dc3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc42:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc48:	2b82      	cmp	r3, #130	; 0x82
 800dc4a:	d111      	bne.n	800dc70 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f002 fde7 	bl	8010824 <SDMMC_CmdStopTransfer>
 800dc56:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d008      	beq.n	800dc70 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	431a      	orrs	r2, r3
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f7ff fd58 	bl	800d720 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f022 0208 	bic.w	r2, r2, #8
 800dc7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc88:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2201      	movs	r2, #1
 800dc8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f003 fa3f 	bl	801111c <HAL_SD_RxCpltCallback>
#endif
}
 800dc9e:	bf00      	nop
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
	...

0800dca8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f7fd f848 	bl	800ad4c <HAL_DMA_GetError>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	d03e      	beq.n	800dd40 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcc8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d002      	beq.n	800dcde <SD_DMAError+0x36>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d12d      	bne.n	800dd3a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4a19      	ldr	r2, [pc, #100]	; (800dd48 <SD_DMAError+0xa0>)
 800dce4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dcf4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcfa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dd02:	6978      	ldr	r0, [r7, #20]
 800dd04:	f7ff ff62 	bl	800dbcc <HAL_SD_GetCardState>
 800dd08:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b06      	cmp	r3, #6
 800dd0e:	d002      	beq.n	800dd16 <SD_DMAError+0x6e>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	2b05      	cmp	r3, #5
 800dd14:	d10a      	bne.n	800dd2c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f002 fd82 	bl	8010824 <SDMMC_CmdStopTransfer>
 800dd20:	4602      	mov	r2, r0
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd26:	431a      	orrs	r2, r3
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	2200      	movs	r2, #0
 800dd38:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dd3a:	6978      	ldr	r0, [r7, #20]
 800dd3c:	f7ff fcf0 	bl	800d720 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dd40:	bf00      	nop
 800dd42:	3718      	adds	r7, #24
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	004005ff 	.word	0x004005ff

0800dd4c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd62:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff ff31 	bl	800dbcc <HAL_SD_GetCardState>
 800dd6a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2200      	movs	r2, #0
 800dd78:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b06      	cmp	r3, #6
 800dd7e:	d002      	beq.n	800dd86 <SD_DMATxAbort+0x3a>
 800dd80:	68bb      	ldr	r3, [r7, #8]
 800dd82:	2b05      	cmp	r3, #5
 800dd84:	d10a      	bne.n	800dd9c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f002 fd4a 	bl	8010824 <SDMMC_CmdStopTransfer>
 800dd90:	4602      	mov	r2, r0
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	431a      	orrs	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d103      	bne.n	800ddac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dda4:	68f8      	ldr	r0, [r7, #12]
 800dda6:	f003 f9a5 	bl	80110f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ddaa:	e002      	b.n	800ddb2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f7ff fcb7 	bl	800d720 <HAL_SD_ErrorCallback>
}
 800ddb2:	bf00      	nop
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f240 523a 	movw	r2, #1338	; 0x53a
 800ddd0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f7ff fefa 	bl	800dbcc <HAL_SD_GetCardState>
 800ddd8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2201      	movs	r2, #1
 800ddde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	2b06      	cmp	r3, #6
 800ddec:	d002      	beq.n	800ddf4 <SD_DMARxAbort+0x3a>
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2b05      	cmp	r3, #5
 800ddf2:	d10a      	bne.n	800de0a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f002 fd13 	bl	8010824 <SDMMC_CmdStopTransfer>
 800ddfe:	4602      	mov	r2, r0
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de04:	431a      	orrs	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d103      	bne.n	800de1a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f003 f96e 	bl	80110f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800de18:	e002      	b.n	800de20 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff fc80 	bl	800d720 <HAL_SD_ErrorCallback>
}
 800de20:	bf00      	nop
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800de28:	b5b0      	push	{r4, r5, r7, lr}
 800de2a:	b094      	sub	sp, #80	; 0x50
 800de2c:	af04      	add	r7, sp, #16
 800de2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800de30:	2301      	movs	r3, #1
 800de32:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4618      	mov	r0, r3
 800de3a:	f002 fbc5 	bl	80105c8 <SDIO_GetPowerState>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d102      	bne.n	800de4a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de44:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de48:	e0b7      	b.n	800dfba <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de4e:	2b03      	cmp	r3, #3
 800de50:	d02f      	beq.n	800deb2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	4618      	mov	r0, r3
 800de58:	f002 fdee 	bl	8010a38 <SDMMC_CmdSendCID>
 800de5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <SD_InitCard+0x40>
    {
      return errorstate;
 800de64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de66:	e0a8      	b.n	800dfba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2100      	movs	r1, #0
 800de6e:	4618      	mov	r0, r3
 800de70:	f002 fbef 	bl	8010652 <SDIO_GetResponse>
 800de74:	4602      	mov	r2, r0
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	2104      	movs	r1, #4
 800de80:	4618      	mov	r0, r3
 800de82:	f002 fbe6 	bl	8010652 <SDIO_GetResponse>
 800de86:	4602      	mov	r2, r0
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	2108      	movs	r1, #8
 800de92:	4618      	mov	r0, r3
 800de94:	f002 fbdd 	bl	8010652 <SDIO_GetResponse>
 800de98:	4602      	mov	r2, r0
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	210c      	movs	r1, #12
 800dea4:	4618      	mov	r0, r3
 800dea6:	f002 fbd4 	bl	8010652 <SDIO_GetResponse>
 800deaa:	4602      	mov	r2, r0
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deb6:	2b03      	cmp	r3, #3
 800deb8:	d00d      	beq.n	800ded6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f107 020e 	add.w	r2, r7, #14
 800dec2:	4611      	mov	r1, r2
 800dec4:	4618      	mov	r0, r3
 800dec6:	f002 fdf4 	bl	8010ab2 <SDMMC_CmdSetRelAdd>
 800deca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800decc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <SD_InitCard+0xae>
    {
      return errorstate;
 800ded2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded4:	e071      	b.n	800dfba <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deda:	2b03      	cmp	r3, #3
 800dedc:	d036      	beq.n	800df4c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dede:	89fb      	ldrh	r3, [r7, #14]
 800dee0:	461a      	mov	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deee:	041b      	lsls	r3, r3, #16
 800def0:	4619      	mov	r1, r3
 800def2:	4610      	mov	r0, r2
 800def4:	f002 fdbe 	bl	8010a74 <SDMMC_CmdSendCSD>
 800def8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800defa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <SD_InitCard+0xdc>
    {
      return errorstate;
 800df00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df02:	e05a      	b.n	800dfba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2100      	movs	r1, #0
 800df0a:	4618      	mov	r0, r3
 800df0c:	f002 fba1 	bl	8010652 <SDIO_GetResponse>
 800df10:	4602      	mov	r2, r0
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	2104      	movs	r1, #4
 800df1c:	4618      	mov	r0, r3
 800df1e:	f002 fb98 	bl	8010652 <SDIO_GetResponse>
 800df22:	4602      	mov	r2, r0
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2108      	movs	r1, #8
 800df2e:	4618      	mov	r0, r3
 800df30:	f002 fb8f 	bl	8010652 <SDIO_GetResponse>
 800df34:	4602      	mov	r2, r0
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	210c      	movs	r1, #12
 800df40:	4618      	mov	r0, r3
 800df42:	f002 fb86 	bl	8010652 <SDIO_GetResponse>
 800df46:	4602      	mov	r2, r0
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2104      	movs	r1, #4
 800df52:	4618      	mov	r0, r3
 800df54:	f002 fb7d 	bl	8010652 <SDIO_GetResponse>
 800df58:	4603      	mov	r3, r0
 800df5a:	0d1a      	lsrs	r2, r3, #20
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df60:	f107 0310 	add.w	r3, r7, #16
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7ff fbe4 	bl	800d734 <HAL_SD_GetCardCSD>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df76:	e020      	b.n	800dfba <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6819      	ldr	r1, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df80:	041b      	lsls	r3, r3, #16
 800df82:	f04f 0400 	mov.w	r4, #0
 800df86:	461a      	mov	r2, r3
 800df88:	4623      	mov	r3, r4
 800df8a:	4608      	mov	r0, r1
 800df8c:	f002 fc6c 	bl	8010868 <SDMMC_CmdSelDesel>
 800df90:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <SD_InitCard+0x174>
  {
    return errorstate;
 800df98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9a:	e00e      	b.n	800dfba <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681d      	ldr	r5, [r3, #0]
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	466c      	mov	r4, sp
 800dfa4:	f103 0210 	add.w	r2, r3, #16
 800dfa8:	ca07      	ldmia	r2, {r0, r1, r2}
 800dfaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dfae:	3304      	adds	r3, #4
 800dfb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f002 fab0 	bl	8010518 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3740      	adds	r7, #64	; 0x40
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800dfc4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	617b      	str	r3, [r7, #20]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f002 fc66 	bl	80108ae <SDMMC_CmdGoIdleState>
 800dfe2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d001      	beq.n	800dfee <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	e072      	b.n	800e0d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	4618      	mov	r0, r3
 800dff4:	f002 fc79 	bl	80108ea <SDMMC_CmdOperCond>
 800dff8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00d      	beq.n	800e01c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f002 fc4f 	bl	80108ae <SDMMC_CmdGoIdleState>
 800e010:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d004      	beq.n	800e022 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	e05b      	b.n	800e0d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e026:	2b01      	cmp	r3, #1
 800e028:	d137      	bne.n	800e09a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2100      	movs	r1, #0
 800e030:	4618      	mov	r0, r3
 800e032:	f002 fc79 	bl	8010928 <SDMMC_CmdAppCommand>
 800e036:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d02d      	beq.n	800e09a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e03e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e042:	e047      	b.n	800e0d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2100      	movs	r1, #0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f002 fc6c 	bl	8010928 <SDMMC_CmdAppCommand>
 800e050:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d001      	beq.n	800e05c <SD_PowerON+0x98>
    {
      return errorstate;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	e03b      	b.n	800e0d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	491e      	ldr	r1, [pc, #120]	; (800e0dc <SD_PowerON+0x118>)
 800e062:	4618      	mov	r0, r3
 800e064:	f002 fc82 	bl	801096c <SDMMC_CmdAppOperCommand>
 800e068:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e074:	e02e      	b.n	800e0d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2100      	movs	r1, #0
 800e07c:	4618      	mov	r0, r3
 800e07e:	f002 fae8 	bl	8010652 <SDIO_GetResponse>
 800e082:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e084:	697b      	ldr	r3, [r7, #20]
 800e086:	0fdb      	lsrs	r3, r3, #31
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d101      	bne.n	800e090 <SD_PowerON+0xcc>
 800e08c:	2301      	movs	r3, #1
 800e08e:	e000      	b.n	800e092 <SD_PowerON+0xce>
 800e090:	2300      	movs	r3, #0
 800e092:	613b      	str	r3, [r7, #16]

    count++;
 800e094:	68bb      	ldr	r3, [r7, #8]
 800e096:	3301      	adds	r3, #1
 800e098:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d802      	bhi.n	800e0aa <SD_PowerON+0xe6>
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d0cc      	beq.n	800e044 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d902      	bls.n	800e0ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e0b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0b8:	e00c      	b.n	800e0d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d003      	beq.n	800e0cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	645a      	str	r2, [r3, #68]	; 0x44
 800e0ca:	e002      	b.n	800e0d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e0d2:	2300      	movs	r3, #0
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3718      	adds	r7, #24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	c1100000 	.word	0xc1100000

0800e0e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d102      	bne.n	800e0f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e0f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0f4:	e018      	b.n	800e128 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0fe:	041b      	lsls	r3, r3, #16
 800e100:	4619      	mov	r1, r3
 800e102:	4610      	mov	r0, r2
 800e104:	f002 fcf6 	bl	8010af4 <SDMMC_CmdSendStatus>
 800e108:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d001      	beq.n	800e114 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	e009      	b.n	800e128 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2100      	movs	r1, #0
 800e11a:	4618      	mov	r0, r3
 800e11c:	f002 fa99 	bl	8010652 <SDIO_GetResponse>
 800e120:	4602      	mov	r2, r0
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e138:	2300      	movs	r3, #0
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	2300      	movs	r3, #0
 800e13e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	2100      	movs	r1, #0
 800e146:	4618      	mov	r0, r3
 800e148:	f002 fa83 	bl	8010652 <SDIO_GetResponse>
 800e14c:	4603      	mov	r3, r0
 800e14e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e156:	d102      	bne.n	800e15e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e15c:	e02f      	b.n	800e1be <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e15e:	f107 030c 	add.w	r3, r7, #12
 800e162:	4619      	mov	r1, r3
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f879 	bl	800e25c <SD_FindSCR>
 800e16a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	e023      	b.n	800e1be <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d01c      	beq.n	800e1ba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e188:	041b      	lsls	r3, r3, #16
 800e18a:	4619      	mov	r1, r3
 800e18c:	4610      	mov	r0, r2
 800e18e:	f002 fbcb 	bl	8010928 <SDMMC_CmdAppCommand>
 800e192:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	e00f      	b.n	800e1be <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2102      	movs	r1, #2
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f002 fc04 	bl	80109b2 <SDMMC_CmdBusWidth>
 800e1aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d001      	beq.n	800e1b6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	e003      	b.n	800e1be <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	e001      	b.n	800e1be <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e1ba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3718      	adds	r7, #24
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e1c6:	b580      	push	{r7, lr}
 800e1c8:	b086      	sub	sp, #24
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2100      	movs	r1, #0
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f002 fa38 	bl	8010652 <SDIO_GetResponse>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1ec:	d102      	bne.n	800e1f4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1f2:	e02f      	b.n	800e254 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1f4:	f107 030c 	add.w	r3, r7, #12
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 f82e 	bl	800e25c <SD_FindSCR>
 800e200:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e208:	697b      	ldr	r3, [r7, #20]
 800e20a:	e023      	b.n	800e254 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e212:	2b00      	cmp	r3, #0
 800e214:	d01c      	beq.n	800e250 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e21e:	041b      	lsls	r3, r3, #16
 800e220:	4619      	mov	r1, r3
 800e222:	4610      	mov	r0, r2
 800e224:	f002 fb80 	bl	8010928 <SDMMC_CmdAppCommand>
 800e228:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e230:	697b      	ldr	r3, [r7, #20]
 800e232:	e00f      	b.n	800e254 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2100      	movs	r1, #0
 800e23a:	4618      	mov	r0, r3
 800e23c:	f002 fbb9 	bl	80109b2 <SDMMC_CmdBusWidth>
 800e240:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e242:	697b      	ldr	r3, [r7, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d001      	beq.n	800e24c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	e003      	b.n	800e254 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e24c:	2300      	movs	r3, #0
 800e24e:	e001      	b.n	800e254 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e250:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e254:	4618      	mov	r0, r3
 800e256:	3718      	adds	r7, #24
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e25c:	b590      	push	{r4, r7, lr}
 800e25e:	b08f      	sub	sp, #60	; 0x3c
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e266:	f7fb fd7b 	bl	8009d60 <HAL_GetTick>
 800e26a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e26c:	2300      	movs	r3, #0
 800e26e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e270:	2300      	movs	r3, #0
 800e272:	60bb      	str	r3, [r7, #8]
 800e274:	2300      	movs	r3, #0
 800e276:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	2108      	movs	r1, #8
 800e282:	4618      	mov	r0, r3
 800e284:	f002 fa24 	bl	80106d0 <SDMMC_CmdBlockLength>
 800e288:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d001      	beq.n	800e294 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e292:	e0a9      	b.n	800e3e8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e29c:	041b      	lsls	r3, r3, #16
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	f002 fb41 	bl	8010928 <SDMMC_CmdAppCommand>
 800e2a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b0:	e09a      	b.n	800e3e8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e2b8:	2308      	movs	r3, #8
 800e2ba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e2bc:	2330      	movs	r3, #48	; 0x30
 800e2be:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e2c0:	2302      	movs	r3, #2
 800e2c2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f107 0210 	add.w	r2, r7, #16
 800e2d4:	4611      	mov	r1, r2
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f002 f9ce 	bl	8010678 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f002 fb88 	bl	80109f6 <SDMMC_CmdSendSCR>
 800e2e6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d022      	beq.n	800e334 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f0:	e07a      	b.n	800e3e8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00e      	beq.n	800e31e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	f107 0208 	add.w	r2, r7, #8
 800e30c:	18d4      	adds	r4, r2, r3
 800e30e:	4608      	mov	r0, r1
 800e310:	f002 f92d 	bl	801056e <SDIO_ReadFIFO>
 800e314:	4603      	mov	r3, r0
 800e316:	6023      	str	r3, [r4, #0]
      index++;
 800e318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31a:	3301      	adds	r3, #1
 800e31c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e31e:	f7fb fd1f 	bl	8009d60 <HAL_GetTick>
 800e322:	4602      	mov	r2, r0
 800e324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e32c:	d102      	bne.n	800e334 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e32e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e332:	e059      	b.n	800e3e8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e33a:	f240 432a 	movw	r3, #1066	; 0x42a
 800e33e:	4013      	ands	r3, r2
 800e340:	2b00      	cmp	r3, #0
 800e342:	d0d6      	beq.n	800e2f2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34a:	f003 0308 	and.w	r3, r3, #8
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d005      	beq.n	800e35e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2208      	movs	r2, #8
 800e358:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e35a:	2308      	movs	r3, #8
 800e35c:	e044      	b.n	800e3e8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e364:	f003 0302 	and.w	r3, r3, #2
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d005      	beq.n	800e378 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	2202      	movs	r2, #2
 800e372:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e374:	2302      	movs	r3, #2
 800e376:	e037      	b.n	800e3e8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37e:	f003 0320 	and.w	r3, r3, #32
 800e382:	2b00      	cmp	r3, #0
 800e384:	d005      	beq.n	800e392 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2220      	movs	r2, #32
 800e38c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e38e:	2320      	movs	r3, #32
 800e390:	e02a      	b.n	800e3e8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f240 523a 	movw	r2, #1338	; 0x53a
 800e39a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	061a      	lsls	r2, r3, #24
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	021b      	lsls	r3, r3, #8
 800e3a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3a8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	0a1b      	lsrs	r3, r3, #8
 800e3ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3b2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	0e1b      	lsrs	r3, r3, #24
 800e3b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3bc:	601a      	str	r2, [r3, #0]
    scr++;
 800e3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	061a      	lsls	r2, r3, #24
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	021b      	lsls	r3, r3, #8
 800e3cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3d0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	0a1b      	lsrs	r3, r3, #8
 800e3d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3da:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	0e1b      	lsrs	r3, r3, #24
 800e3e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	373c      	adds	r7, #60	; 0x3c
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd90      	pop	{r4, r7, pc}

0800e3f0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b086      	sub	sp, #24
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e402:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d03f      	beq.n	800e48a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e40a:	2300      	movs	r3, #0
 800e40c:	617b      	str	r3, [r7, #20]
 800e40e:	e033      	b.n	800e478 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f002 f8aa 	bl	801056e <SDIO_ReadFIFO>
 800e41a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3301      	adds	r3, #1
 800e428:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	3b01      	subs	r3, #1
 800e42e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e430:	68bb      	ldr	r3, [r7, #8]
 800e432:	0a1b      	lsrs	r3, r3, #8
 800e434:	b2da      	uxtb	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	3301      	adds	r3, #1
 800e43e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	3b01      	subs	r3, #1
 800e444:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	0c1b      	lsrs	r3, r3, #16
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	3301      	adds	r3, #1
 800e454:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e456:	693b      	ldr	r3, [r7, #16]
 800e458:	3b01      	subs	r3, #1
 800e45a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	0e1b      	lsrs	r3, r3, #24
 800e460:	b2da      	uxtb	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	3301      	adds	r3, #1
 800e46a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	3b01      	subs	r3, #1
 800e470:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	3301      	adds	r3, #1
 800e476:	617b      	str	r3, [r7, #20]
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	2b07      	cmp	r3, #7
 800e47c:	d9c8      	bls.n	800e410 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	693a      	ldr	r2, [r7, #16]
 800e488:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e48a:	bf00      	nop
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}

0800e492 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e492:	b580      	push	{r7, lr}
 800e494:	b086      	sub	sp, #24
 800e496:	af00      	add	r7, sp, #0
 800e498:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a1b      	ldr	r3, [r3, #32]
 800e49e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d043      	beq.n	800e534 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	617b      	str	r3, [r7, #20]
 800e4b0:	e037      	b.n	800e522 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	021a      	lsls	r2, r3, #8
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	3b01      	subs	r3, #1
 800e4da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	041a      	lsls	r2, r3, #16
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	061a      	lsls	r2, r3, #24
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	3301      	adds	r3, #1
 800e504:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	3b01      	subs	r3, #1
 800e50a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f107 0208 	add.w	r2, r7, #8
 800e514:	4611      	mov	r1, r2
 800e516:	4618      	mov	r0, r3
 800e518:	f002 f836 	bl	8010588 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	3301      	adds	r3, #1
 800e520:	617b      	str	r3, [r7, #20]
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2b07      	cmp	r3, #7
 800e526:	d9c4      	bls.n	800e4b2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	68fa      	ldr	r2, [r7, #12]
 800e52c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	693a      	ldr	r2, [r7, #16]
 800e532:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e534:	bf00      	nop
 800e536:	3718      	adds	r7, #24
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}

0800e53c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b082      	sub	sp, #8
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d101      	bne.n	800e54e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e54a:	2301      	movs	r3, #1
 800e54c:	e056      	b.n	800e5fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d106      	bne.n	800e56e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2200      	movs	r2, #0
 800e564:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e568:	6878      	ldr	r0, [r7, #4]
 800e56a:	f7f8 fe9b 	bl	80072a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2202      	movs	r2, #2
 800e572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e584:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	431a      	orrs	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	431a      	orrs	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	431a      	orrs	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5aa:	431a      	orrs	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	69db      	ldr	r3, [r3, #28]
 800e5b0:	431a      	orrs	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6a1b      	ldr	r3, [r3, #32]
 800e5b6:	ea42 0103 	orr.w	r1, r2, r3
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	0c1b      	lsrs	r3, r3, #16
 800e5cc:	f003 0104 	and.w	r1, r3, #4
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	430a      	orrs	r2, r1
 800e5da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69da      	ldr	r2, [r3, #28]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b088      	sub	sp, #32
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	603b      	str	r3, [r7, #0]
 800e610:	4613      	mov	r3, r2
 800e612:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e614:	2300      	movs	r3, #0
 800e616:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d101      	bne.n	800e626 <HAL_SPI_Transmit+0x22>
 800e622:	2302      	movs	r3, #2
 800e624:	e11e      	b.n	800e864 <HAL_SPI_Transmit+0x260>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e62e:	f7fb fb97 	bl	8009d60 <HAL_GetTick>
 800e632:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e634:	88fb      	ldrh	r3, [r7, #6]
 800e636:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b01      	cmp	r3, #1
 800e642:	d002      	beq.n	800e64a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e644:	2302      	movs	r3, #2
 800e646:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e648:	e103      	b.n	800e852 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d002      	beq.n	800e656 <HAL_SPI_Transmit+0x52>
 800e650:	88fb      	ldrh	r3, [r7, #6]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d102      	bne.n	800e65c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e65a:	e0fa      	b.n	800e852 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2203      	movs	r2, #3
 800e660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	68ba      	ldr	r2, [r7, #8]
 800e66e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	88fa      	ldrh	r2, [r7, #6]
 800e674:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	88fa      	ldrh	r2, [r7, #6]
 800e67a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2200      	movs	r2, #0
 800e680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	2200      	movs	r2, #0
 800e686:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2200      	movs	r2, #0
 800e68c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	2200      	movs	r2, #0
 800e692:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2200      	movs	r2, #0
 800e698:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6a2:	d107      	bne.n	800e6b4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e6b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6be:	2b40      	cmp	r3, #64	; 0x40
 800e6c0:	d007      	beq.n	800e6d2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e6d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e6da:	d14b      	bne.n	800e774 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d002      	beq.n	800e6ea <HAL_SPI_Transmit+0xe6>
 800e6e4:	8afb      	ldrh	r3, [r7, #22]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d13e      	bne.n	800e768 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ee:	881a      	ldrh	r2, [r3, #0]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fa:	1c9a      	adds	r2, r3, #2
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e704:	b29b      	uxth	r3, r3
 800e706:	3b01      	subs	r3, #1
 800e708:	b29a      	uxth	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e70e:	e02b      	b.n	800e768 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	f003 0302 	and.w	r3, r3, #2
 800e71a:	2b02      	cmp	r3, #2
 800e71c:	d112      	bne.n	800e744 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e722:	881a      	ldrh	r2, [r3, #0]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e72e:	1c9a      	adds	r2, r3, #2
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e738:	b29b      	uxth	r3, r3
 800e73a:	3b01      	subs	r3, #1
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	86da      	strh	r2, [r3, #54]	; 0x36
 800e742:	e011      	b.n	800e768 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e744:	f7fb fb0c 	bl	8009d60 <HAL_GetTick>
 800e748:	4602      	mov	r2, r0
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d803      	bhi.n	800e75c <HAL_SPI_Transmit+0x158>
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75a:	d102      	bne.n	800e762 <HAL_SPI_Transmit+0x15e>
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d102      	bne.n	800e768 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e762:	2303      	movs	r3, #3
 800e764:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e766:	e074      	b.n	800e852 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1ce      	bne.n	800e710 <HAL_SPI_Transmit+0x10c>
 800e772:	e04c      	b.n	800e80e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <HAL_SPI_Transmit+0x17e>
 800e77c:	8afb      	ldrh	r3, [r7, #22]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d140      	bne.n	800e804 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	330c      	adds	r3, #12
 800e78c:	7812      	ldrb	r2, [r2, #0]
 800e78e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e794:	1c5a      	adds	r2, r3, #1
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e7a8:	e02c      	b.n	800e804 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	f003 0302 	and.w	r3, r3, #2
 800e7b4:	2b02      	cmp	r3, #2
 800e7b6:	d113      	bne.n	800e7e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	330c      	adds	r3, #12
 800e7c2:	7812      	ldrb	r2, [r2, #0]
 800e7c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	3b01      	subs	r3, #1
 800e7d8:	b29a      	uxth	r2, r3
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	86da      	strh	r2, [r3, #54]	; 0x36
 800e7de:	e011      	b.n	800e804 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7e0:	f7fb fabe 	bl	8009d60 <HAL_GetTick>
 800e7e4:	4602      	mov	r2, r0
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d803      	bhi.n	800e7f8 <HAL_SPI_Transmit+0x1f4>
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f6:	d102      	bne.n	800e7fe <HAL_SPI_Transmit+0x1fa>
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d102      	bne.n	800e804 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e7fe:	2303      	movs	r3, #3
 800e800:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e802:	e026      	b.n	800e852 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e808:	b29b      	uxth	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d1cd      	bne.n	800e7aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e80e:	69ba      	ldr	r2, [r7, #24]
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	68f8      	ldr	r0, [r7, #12]
 800e814:	f000 fba4 	bl	800ef60 <SPI_EndRxTxTransaction>
 800e818:	4603      	mov	r3, r0
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2220      	movs	r2, #32
 800e822:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10a      	bne.n	800e842 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e82c:	2300      	movs	r3, #0
 800e82e:	613b      	str	r3, [r7, #16]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	613b      	str	r3, [r7, #16]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	613b      	str	r3, [r7, #16]
 800e840:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e846:	2b00      	cmp	r3, #0
 800e848:	d002      	beq.n	800e850 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e84a:	2301      	movs	r3, #1
 800e84c:	77fb      	strb	r3, [r7, #31]
 800e84e:	e000      	b.n	800e852 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e850:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2201      	movs	r2, #1
 800e856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2200      	movs	r2, #0
 800e85e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e862:	7ffb      	ldrb	r3, [r7, #31]
}
 800e864:	4618      	mov	r0, r3
 800e866:	3720      	adds	r7, #32
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b088      	sub	sp, #32
 800e870:	af02      	add	r7, sp, #8
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	60b9      	str	r1, [r7, #8]
 800e876:	603b      	str	r3, [r7, #0]
 800e878:	4613      	mov	r3, r2
 800e87a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e87c:	2300      	movs	r3, #0
 800e87e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e888:	d112      	bne.n	800e8b0 <HAL_SPI_Receive+0x44>
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10e      	bne.n	800e8b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	2204      	movs	r2, #4
 800e896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e89a:	88fa      	ldrh	r2, [r7, #6]
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	4613      	mov	r3, r2
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	68b9      	ldr	r1, [r7, #8]
 800e8a6:	68f8      	ldr	r0, [r7, #12]
 800e8a8:	f000 f8e9 	bl	800ea7e <HAL_SPI_TransmitReceive>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	e0e2      	b.n	800ea76 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d101      	bne.n	800e8be <HAL_SPI_Receive+0x52>
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	e0db      	b.n	800ea76 <HAL_SPI_Receive+0x20a>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8c6:	f7fb fa4b 	bl	8009d60 <HAL_GetTick>
 800e8ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d002      	beq.n	800e8de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e8d8:	2302      	movs	r3, #2
 800e8da:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8dc:	e0c2      	b.n	800ea64 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <HAL_SPI_Receive+0x7e>
 800e8e4:	88fb      	ldrh	r3, [r7, #6]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d102      	bne.n	800e8f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e8ee:	e0b9      	b.n	800ea64 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2204      	movs	r2, #4
 800e8f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	68ba      	ldr	r2, [r7, #8]
 800e902:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	88fa      	ldrh	r2, [r7, #6]
 800e908:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	88fa      	ldrh	r2, [r7, #6]
 800e90e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2200      	movs	r2, #0
 800e914:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	2200      	movs	r2, #0
 800e91a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2200      	movs	r2, #0
 800e920:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	2200      	movs	r2, #0
 800e926:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2200      	movs	r2, #0
 800e92c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	689b      	ldr	r3, [r3, #8]
 800e932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e936:	d107      	bne.n	800e948 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e946:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e952:	2b40      	cmp	r3, #64	; 0x40
 800e954:	d007      	beq.n	800e966 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	681a      	ldr	r2, [r3, #0]
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e964:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	68db      	ldr	r3, [r3, #12]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d162      	bne.n	800ea34 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e96e:	e02e      	b.n	800e9ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	689b      	ldr	r3, [r3, #8]
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d115      	bne.n	800e9aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f103 020c 	add.w	r2, r3, #12
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98a:	7812      	ldrb	r2, [r2, #0]
 800e98c:	b2d2      	uxtb	r2, r2
 800e98e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e994:	1c5a      	adds	r2, r3, #1
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e99e:	b29b      	uxth	r3, r3
 800e9a0:	3b01      	subs	r3, #1
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e9a8:	e011      	b.n	800e9ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e9aa:	f7fb f9d9 	bl	8009d60 <HAL_GetTick>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	693b      	ldr	r3, [r7, #16]
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	683a      	ldr	r2, [r7, #0]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d803      	bhi.n	800e9c2 <HAL_SPI_Receive+0x156>
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d102      	bne.n	800e9c8 <HAL_SPI_Receive+0x15c>
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d102      	bne.n	800e9ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e9c8:	2303      	movs	r3, #3
 800e9ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e9cc:	e04a      	b.n	800ea64 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d1cb      	bne.n	800e970 <HAL_SPI_Receive+0x104>
 800e9d8:	e031      	b.n	800ea3e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	689b      	ldr	r3, [r3, #8]
 800e9e0:	f003 0301 	and.w	r3, r3, #1
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d113      	bne.n	800ea10 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	68da      	ldr	r2, [r3, #12]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f2:	b292      	uxth	r2, r2
 800e9f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fa:	1c9a      	adds	r2, r3, #2
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea04:	b29b      	uxth	r3, r3
 800ea06:	3b01      	subs	r3, #1
 800ea08:	b29a      	uxth	r2, r3
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea0e:	e011      	b.n	800ea34 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea10:	f7fb f9a6 	bl	8009d60 <HAL_GetTick>
 800ea14:	4602      	mov	r2, r0
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	683a      	ldr	r2, [r7, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d803      	bhi.n	800ea28 <HAL_SPI_Receive+0x1bc>
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea26:	d102      	bne.n	800ea2e <HAL_SPI_Receive+0x1c2>
 800ea28:	683b      	ldr	r3, [r7, #0]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d102      	bne.n	800ea34 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ea2e:	2303      	movs	r3, #3
 800ea30:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ea32:	e017      	b.n	800ea64 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1cd      	bne.n	800e9da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ea3e:	693a      	ldr	r2, [r7, #16]
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	68f8      	ldr	r0, [r7, #12]
 800ea44:	f000 fa27 	bl	800ee96 <SPI_EndRxTransaction>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d002      	beq.n	800ea54 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2220      	movs	r2, #32
 800ea52:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d002      	beq.n	800ea62 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	75fb      	strb	r3, [r7, #23]
 800ea60:	e000      	b.n	800ea64 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ea62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3718      	adds	r7, #24
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ea7e:	b580      	push	{r7, lr}
 800ea80:	b08c      	sub	sp, #48	; 0x30
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	60f8      	str	r0, [r7, #12]
 800ea86:	60b9      	str	r1, [r7, #8]
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d101      	bne.n	800eaa4 <HAL_SPI_TransmitReceive+0x26>
 800eaa0:	2302      	movs	r3, #2
 800eaa2:	e18a      	b.n	800edba <HAL_SPI_TransmitReceive+0x33c>
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eaac:	f7fb f958 	bl	8009d60 <HAL_GetTick>
 800eab0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	685b      	ldr	r3, [r3, #4]
 800eac0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eac2:	887b      	ldrh	r3, [r7, #2]
 800eac4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eac6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d00f      	beq.n	800eaee <HAL_SPI_TransmitReceive+0x70>
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ead4:	d107      	bne.n	800eae6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d103      	bne.n	800eae6 <HAL_SPI_TransmitReceive+0x68>
 800eade:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eae2:	2b04      	cmp	r3, #4
 800eae4:	d003      	beq.n	800eaee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eae6:	2302      	movs	r3, #2
 800eae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eaec:	e15b      	b.n	800eda6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d005      	beq.n	800eb00 <HAL_SPI_TransmitReceive+0x82>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d002      	beq.n	800eb00 <HAL_SPI_TransmitReceive+0x82>
 800eafa:	887b      	ldrh	r3, [r7, #2]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d103      	bne.n	800eb08 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eb00:	2301      	movs	r3, #1
 800eb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eb06:	e14e      	b.n	800eda6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b04      	cmp	r3, #4
 800eb12:	d003      	beq.n	800eb1c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2205      	movs	r2, #5
 800eb18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	887a      	ldrh	r2, [r7, #2]
 800eb2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	887a      	ldrh	r2, [r7, #2]
 800eb32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	68ba      	ldr	r2, [r7, #8]
 800eb38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	887a      	ldrh	r2, [r7, #2]
 800eb3e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	887a      	ldrh	r2, [r7, #2]
 800eb44:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb5c:	2b40      	cmp	r3, #64	; 0x40
 800eb5e:	d007      	beq.n	800eb70 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	681a      	ldr	r2, [r3, #0]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb78:	d178      	bne.n	800ec6c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	685b      	ldr	r3, [r3, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d002      	beq.n	800eb88 <HAL_SPI_TransmitReceive+0x10a>
 800eb82:	8b7b      	ldrh	r3, [r7, #26]
 800eb84:	2b01      	cmp	r3, #1
 800eb86:	d166      	bne.n	800ec56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb8c:	881a      	ldrh	r2, [r3, #0]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb98:	1c9a      	adds	r2, r3, #2
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	3b01      	subs	r3, #1
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebac:	e053      	b.n	800ec56 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	f003 0302 	and.w	r3, r3, #2
 800ebb8:	2b02      	cmp	r3, #2
 800ebba:	d11b      	bne.n	800ebf4 <HAL_SPI_TransmitReceive+0x176>
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d016      	beq.n	800ebf4 <HAL_SPI_TransmitReceive+0x176>
 800ebc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d113      	bne.n	800ebf4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd0:	881a      	ldrh	r2, [r3, #0]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebdc:	1c9a      	adds	r2, r3, #2
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebe6:	b29b      	uxth	r3, r3
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	f003 0301 	and.w	r3, r3, #1
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d119      	bne.n	800ec36 <HAL_SPI_TransmitReceive+0x1b8>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec06:	b29b      	uxth	r3, r3
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d014      	beq.n	800ec36 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	68da      	ldr	r2, [r3, #12]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec16:	b292      	uxth	r2, r2
 800ec18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec1e:	1c9a      	adds	r2, r3, #2
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec28:	b29b      	uxth	r3, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec32:	2301      	movs	r3, #1
 800ec34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ec36:	f7fb f893 	bl	8009d60 <HAL_GetTick>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec3e:	1ad3      	subs	r3, r2, r3
 800ec40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec42:	429a      	cmp	r2, r3
 800ec44:	d807      	bhi.n	800ec56 <HAL_SPI_TransmitReceive+0x1d8>
 800ec46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec4c:	d003      	beq.n	800ec56 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ec4e:	2303      	movs	r3, #3
 800ec50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec54:	e0a7      	b.n	800eda6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d1a6      	bne.n	800ebae <HAL_SPI_TransmitReceive+0x130>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d1a1      	bne.n	800ebae <HAL_SPI_TransmitReceive+0x130>
 800ec6a:	e07c      	b.n	800ed66 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d002      	beq.n	800ec7a <HAL_SPI_TransmitReceive+0x1fc>
 800ec74:	8b7b      	ldrh	r3, [r7, #26]
 800ec76:	2b01      	cmp	r3, #1
 800ec78:	d16b      	bne.n	800ed52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	330c      	adds	r3, #12
 800ec84:	7812      	ldrb	r2, [r2, #0]
 800ec86:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec8c:	1c5a      	adds	r2, r3, #1
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	3b01      	subs	r3, #1
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eca0:	e057      	b.n	800ed52 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	689b      	ldr	r3, [r3, #8]
 800eca8:	f003 0302 	and.w	r3, r3, #2
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d11c      	bne.n	800ecea <HAL_SPI_TransmitReceive+0x26c>
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d017      	beq.n	800ecea <HAL_SPI_TransmitReceive+0x26c>
 800ecba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d114      	bne.n	800ecea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	330c      	adds	r3, #12
 800ecca:	7812      	ldrb	r2, [r2, #0]
 800eccc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd2:	1c5a      	adds	r2, r3, #1
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	3b01      	subs	r3, #1
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ece6:	2300      	movs	r3, #0
 800ece8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	f003 0301 	and.w	r3, r3, #1
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d119      	bne.n	800ed2c <HAL_SPI_TransmitReceive+0x2ae>
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d014      	beq.n	800ed2c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	68da      	ldr	r2, [r3, #12]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed0c:	b2d2      	uxtb	r2, r2
 800ed0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed14:	1c5a      	adds	r2, r3, #1
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	3b01      	subs	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ed2c:	f7fb f818 	bl	8009d60 <HAL_GetTick>
 800ed30:	4602      	mov	r2, r0
 800ed32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	d803      	bhi.n	800ed44 <HAL_SPI_TransmitReceive+0x2c6>
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed42:	d102      	bne.n	800ed4a <HAL_SPI_TransmitReceive+0x2cc>
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d103      	bne.n	800ed52 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ed4a:	2303      	movs	r3, #3
 800ed4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed50:	e029      	b.n	800eda6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1a2      	bne.n	800eca2 <HAL_SPI_TransmitReceive+0x224>
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d19d      	bne.n	800eca2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ed66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed6a:	68f8      	ldr	r0, [r7, #12]
 800ed6c:	f000 f8f8 	bl	800ef60 <SPI_EndRxTxTransaction>
 800ed70:	4603      	mov	r3, r0
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d006      	beq.n	800ed84 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ed82:	e010      	b.n	800eda6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d10b      	bne.n	800eda4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	68db      	ldr	r3, [r3, #12]
 800ed96:	617b      	str	r3, [r7, #20]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	689b      	ldr	r3, [r3, #8]
 800ed9e:	617b      	str	r3, [r7, #20]
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	e000      	b.n	800eda6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800eda4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2201      	movs	r2, #1
 800edaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800edb6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3730      	adds	r7, #48	; 0x30
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b084      	sub	sp, #16
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	60f8      	str	r0, [r7, #12]
 800edca:	60b9      	str	r1, [r7, #8]
 800edcc:	603b      	str	r3, [r7, #0]
 800edce:	4613      	mov	r3, r2
 800edd0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800edd2:	e04c      	b.n	800ee6e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edda:	d048      	beq.n	800ee6e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800eddc:	f7fa ffc0 	bl	8009d60 <HAL_GetTick>
 800ede0:	4602      	mov	r2, r0
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	1ad3      	subs	r3, r2, r3
 800ede6:	683a      	ldr	r2, [r7, #0]
 800ede8:	429a      	cmp	r2, r3
 800edea:	d902      	bls.n	800edf2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d13d      	bne.n	800ee6e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	685a      	ldr	r2, [r3, #4]
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ee00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	685b      	ldr	r3, [r3, #4]
 800ee06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee0a:	d111      	bne.n	800ee30 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee14:	d004      	beq.n	800ee20 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	689b      	ldr	r3, [r3, #8]
 800ee1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee1e:	d107      	bne.n	800ee30 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee38:	d10f      	bne.n	800ee5a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ee58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2201      	movs	r2, #1
 800ee5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ee6a:	2303      	movs	r3, #3
 800ee6c:	e00f      	b.n	800ee8e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	689a      	ldr	r2, [r3, #8]
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	4013      	ands	r3, r2
 800ee78:	68ba      	ldr	r2, [r7, #8]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	bf0c      	ite	eq
 800ee7e:	2301      	moveq	r3, #1
 800ee80:	2300      	movne	r3, #0
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	461a      	mov	r2, r3
 800ee86:	79fb      	ldrb	r3, [r7, #7]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d1a3      	bne.n	800edd4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ee8c:	2300      	movs	r3, #0
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b086      	sub	sp, #24
 800ee9a:	af02      	add	r7, sp, #8
 800ee9c:	60f8      	str	r0, [r7, #12]
 800ee9e:	60b9      	str	r1, [r7, #8]
 800eea0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	685b      	ldr	r3, [r3, #4]
 800eea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eeaa:	d111      	bne.n	800eed0 <SPI_EndRxTransaction+0x3a>
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	689b      	ldr	r3, [r3, #8]
 800eeb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeb4:	d004      	beq.n	800eec0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eebe:	d107      	bne.n	800eed0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	681a      	ldr	r2, [r3, #0]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eece:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eed8:	d12a      	bne.n	800ef30 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eee2:	d012      	beq.n	800ef0a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2200      	movs	r2, #0
 800eeec:	2180      	movs	r1, #128	; 0x80
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7ff ff67 	bl	800edc2 <SPI_WaitFlagStateUntilTimeout>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d02d      	beq.n	800ef56 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eefe:	f043 0220 	orr.w	r2, r3, #32
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef06:	2303      	movs	r3, #3
 800ef08:	e026      	b.n	800ef58 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	9300      	str	r3, [sp, #0]
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	2200      	movs	r2, #0
 800ef12:	2101      	movs	r1, #1
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff ff54 	bl	800edc2 <SPI_WaitFlagStateUntilTimeout>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d01a      	beq.n	800ef56 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef24:	f043 0220 	orr.w	r2, r3, #32
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	e013      	b.n	800ef58 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	2200      	movs	r2, #0
 800ef38:	2101      	movs	r1, #1
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7ff ff41 	bl	800edc2 <SPI_WaitFlagStateUntilTimeout>
 800ef40:	4603      	mov	r3, r0
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d007      	beq.n	800ef56 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef4a:	f043 0220 	orr.w	r2, r3, #32
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ef52:	2303      	movs	r3, #3
 800ef54:	e000      	b.n	800ef58 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3710      	adds	r7, #16
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af02      	add	r7, sp, #8
 800ef66:	60f8      	str	r0, [r7, #12]
 800ef68:	60b9      	str	r1, [r7, #8]
 800ef6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ef6c:	4b1b      	ldr	r3, [pc, #108]	; (800efdc <SPI_EndRxTxTransaction+0x7c>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4a1b      	ldr	r2, [pc, #108]	; (800efe0 <SPI_EndRxTxTransaction+0x80>)
 800ef72:	fba2 2303 	umull	r2, r3, r2, r3
 800ef76:	0d5b      	lsrs	r3, r3, #21
 800ef78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef7c:	fb02 f303 	mul.w	r3, r2, r3
 800ef80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef8a:	d112      	bne.n	800efb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	2200      	movs	r2, #0
 800ef94:	2180      	movs	r1, #128	; 0x80
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f7ff ff13 	bl	800edc2 <SPI_WaitFlagStateUntilTimeout>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d016      	beq.n	800efd0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa6:	f043 0220 	orr.w	r2, r3, #32
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e00f      	b.n	800efd2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00a      	beq.n	800efce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	3b01      	subs	r3, #1
 800efbc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	689b      	ldr	r3, [r3, #8]
 800efc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efc8:	2b80      	cmp	r3, #128	; 0x80
 800efca:	d0f2      	beq.n	800efb2 <SPI_EndRxTxTransaction+0x52>
 800efcc:	e000      	b.n	800efd0 <SPI_EndRxTxTransaction+0x70>
        break;
 800efce:	bf00      	nop
  }

  return HAL_OK;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	20000000 	.word	0x20000000
 800efe0:	165e9f81 	.word	0x165e9f81

0800efe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d101      	bne.n	800eff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e01d      	b.n	800f032 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800effc:	b2db      	uxtb	r3, r3
 800effe:	2b00      	cmp	r3, #0
 800f000:	d106      	bne.n	800f010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7f8 fa06 	bl	800741c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2202      	movs	r2, #2
 800f014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	3304      	adds	r3, #4
 800f020:	4619      	mov	r1, r3
 800f022:	4610      	mov	r0, r2
 800f024:	f000 fb56 	bl	800f6d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f03a:	b480      	push	{r7}
 800f03c:	b085      	sub	sp, #20
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68da      	ldr	r2, [r3, #12]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f042 0201 	orr.w	r2, r2, #1
 800f050:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	f003 0307 	and.w	r3, r3, #7
 800f05c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2b06      	cmp	r3, #6
 800f062:	d007      	beq.n	800f074 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f042 0201 	orr.w	r2, r2, #1
 800f072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f074:	2300      	movs	r3, #0
}
 800f076:	4618      	mov	r0, r3
 800f078:	3714      	adds	r7, #20
 800f07a:	46bd      	mov	sp, r7
 800f07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f080:	4770      	bx	lr

0800f082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b082      	sub	sp, #8
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d101      	bne.n	800f094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f090:	2301      	movs	r3, #1
 800f092:	e01d      	b.n	800f0d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f09a:	b2db      	uxtb	r3, r3
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d106      	bne.n	800f0ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7f8 f943 	bl	8007334 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681a      	ldr	r2, [r3, #0]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	3304      	adds	r3, #4
 800f0be:	4619      	mov	r1, r3
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	f000 fb07 	bl	800f6d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2201      	movs	r2, #1
 800f0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b084      	sub	sp, #16
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fd42 	bl	800fb74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a15      	ldr	r2, [pc, #84]	; (800f14c <HAL_TIM_PWM_Start+0x74>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d004      	beq.n	800f104 <HAL_TIM_PWM_Start+0x2c>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a14      	ldr	r2, [pc, #80]	; (800f150 <HAL_TIM_PWM_Start+0x78>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d101      	bne.n	800f108 <HAL_TIM_PWM_Start+0x30>
 800f104:	2301      	movs	r3, #1
 800f106:	e000      	b.n	800f10a <HAL_TIM_PWM_Start+0x32>
 800f108:	2300      	movs	r3, #0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d007      	beq.n	800f11e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f11c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	689b      	ldr	r3, [r3, #8]
 800f124:	f003 0307 	and.w	r3, r3, #7
 800f128:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2b06      	cmp	r3, #6
 800f12e:	d007      	beq.n	800f140 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f042 0201 	orr.w	r2, r2, #1
 800f13e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f140:	2300      	movs	r3, #0
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}
 800f14a:	bf00      	nop
 800f14c:	40010000 	.word	0x40010000
 800f150:	40010400 	.word	0x40010400

0800f154 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b086      	sub	sp, #24
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d101      	bne.n	800f168 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f164:	2301      	movs	r3, #1
 800f166:	e083      	b.n	800f270 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7f8 f9dd 	bl	800753c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	2202      	movs	r2, #2
 800f186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	6812      	ldr	r2, [r2, #0]
 800f194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f198:	f023 0307 	bic.w	r3, r3, #7
 800f19c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	3304      	adds	r3, #4
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	f000 fa93 	bl	800f6d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	699b      	ldr	r3, [r3, #24]
 800f1bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	6a1b      	ldr	r3, [r3, #32]
 800f1c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1d6:	f023 0303 	bic.w	r3, r3, #3
 800f1da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	689a      	ldr	r2, [r3, #8]
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	699b      	ldr	r3, [r3, #24]
 800f1e4:	021b      	lsls	r3, r3, #8
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	693a      	ldr	r2, [r7, #16]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f1f4:	f023 030c 	bic.w	r3, r3, #12
 800f1f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	68da      	ldr	r2, [r3, #12]
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	69db      	ldr	r3, [r3, #28]
 800f20e:	021b      	lsls	r3, r3, #8
 800f210:	4313      	orrs	r3, r2
 800f212:	693a      	ldr	r2, [r7, #16]
 800f214:	4313      	orrs	r3, r2
 800f216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	691b      	ldr	r3, [r3, #16]
 800f21c:	011a      	lsls	r2, r3, #4
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	031b      	lsls	r3, r3, #12
 800f224:	4313      	orrs	r3, r2
 800f226:	693a      	ldr	r2, [r7, #16]
 800f228:	4313      	orrs	r3, r2
 800f22a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f232:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f23a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	685a      	ldr	r2, [r3, #4]
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	695b      	ldr	r3, [r3, #20]
 800f244:	011b      	lsls	r3, r3, #4
 800f246:	4313      	orrs	r3, r2
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	697a      	ldr	r2, [r7, #20]
 800f254:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	693a      	ldr	r2, [r7, #16]
 800f25c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	68fa      	ldr	r2, [r7, #12]
 800f264:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2201      	movs	r2, #1
 800f26a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f26e:	2300      	movs	r3, #0
}
 800f270:	4618      	mov	r0, r3
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	b082      	sub	sp, #8
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <HAL_TIM_Encoder_Start+0x16>
 800f288:	2b04      	cmp	r3, #4
 800f28a:	d008      	beq.n	800f29e <HAL_TIM_Encoder_Start+0x26>
 800f28c:	e00f      	b.n	800f2ae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2201      	movs	r2, #1
 800f294:	2100      	movs	r1, #0
 800f296:	4618      	mov	r0, r3
 800f298:	f000 fc6c 	bl	800fb74 <TIM_CCxChannelCmd>
      break;
 800f29c:	e016      	b.n	800f2cc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	2104      	movs	r1, #4
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f000 fc64 	bl	800fb74 <TIM_CCxChannelCmd>
      break;
 800f2ac:	e00e      	b.n	800f2cc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	2100      	movs	r1, #0
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 fc5c 	bl	800fb74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	2104      	movs	r1, #4
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f000 fc55 	bl	800fb74 <TIM_CCxChannelCmd>
      break;
 800f2ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	681a      	ldr	r2, [r3, #0]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	f042 0201 	orr.w	r2, r2, #1
 800f2da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}

0800f2e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f2e6:	b580      	push	{r7, lr}
 800f2e8:	b082      	sub	sp, #8
 800f2ea:	af00      	add	r7, sp, #0
 800f2ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d122      	bne.n	800f342 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	f003 0302 	and.w	r3, r3, #2
 800f306:	2b02      	cmp	r3, #2
 800f308:	d11b      	bne.n	800f342 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f06f 0202 	mvn.w	r2, #2
 800f312:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2201      	movs	r2, #1
 800f318:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	699b      	ldr	r3, [r3, #24]
 800f320:	f003 0303 	and.w	r3, r3, #3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d003      	beq.n	800f330 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 f9b5 	bl	800f698 <HAL_TIM_IC_CaptureCallback>
 800f32e:	e005      	b.n	800f33c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f9a7 	bl	800f684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 f9b8 	bl	800f6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b04      	cmp	r3, #4
 800f34e:	d122      	bne.n	800f396 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	f003 0304 	and.w	r3, r3, #4
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d11b      	bne.n	800f396 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	f06f 0204 	mvn.w	r2, #4
 800f366:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	2202      	movs	r2, #2
 800f36c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	699b      	ldr	r3, [r3, #24]
 800f374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f98b 	bl	800f698 <HAL_TIM_IC_CaptureCallback>
 800f382:	e005      	b.n	800f390 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f000 f97d 	bl	800f684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f98e 	bl	800f6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2200      	movs	r2, #0
 800f394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	691b      	ldr	r3, [r3, #16]
 800f39c:	f003 0308 	and.w	r3, r3, #8
 800f3a0:	2b08      	cmp	r3, #8
 800f3a2:	d122      	bne.n	800f3ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	f003 0308 	and.w	r3, r3, #8
 800f3ae:	2b08      	cmp	r3, #8
 800f3b0:	d11b      	bne.n	800f3ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	f06f 0208 	mvn.w	r2, #8
 800f3ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2204      	movs	r2, #4
 800f3c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	69db      	ldr	r3, [r3, #28]
 800f3c8:	f003 0303 	and.w	r3, r3, #3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d003      	beq.n	800f3d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 f961 	bl	800f698 <HAL_TIM_IC_CaptureCallback>
 800f3d6:	e005      	b.n	800f3e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 f953 	bl	800f684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 f964 	bl	800f6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	691b      	ldr	r3, [r3, #16]
 800f3f0:	f003 0310 	and.w	r3, r3, #16
 800f3f4:	2b10      	cmp	r3, #16
 800f3f6:	d122      	bne.n	800f43e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68db      	ldr	r3, [r3, #12]
 800f3fe:	f003 0310 	and.w	r3, r3, #16
 800f402:	2b10      	cmp	r3, #16
 800f404:	d11b      	bne.n	800f43e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	f06f 0210 	mvn.w	r2, #16
 800f40e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	2208      	movs	r2, #8
 800f414:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	69db      	ldr	r3, [r3, #28]
 800f41c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f420:	2b00      	cmp	r3, #0
 800f422:	d003      	beq.n	800f42c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f937 	bl	800f698 <HAL_TIM_IC_CaptureCallback>
 800f42a:	e005      	b.n	800f438 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f000 f929 	bl	800f684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 f93a 	bl	800f6ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	691b      	ldr	r3, [r3, #16]
 800f444:	f003 0301 	and.w	r3, r3, #1
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d10e      	bne.n	800f46a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b01      	cmp	r3, #1
 800f458:	d107      	bne.n	800f46a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f06f 0201 	mvn.w	r2, #1
 800f462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f7f6 fd53 	bl	8005f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	691b      	ldr	r3, [r3, #16]
 800f470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f474:	2b80      	cmp	r3, #128	; 0x80
 800f476:	d10e      	bne.n	800f496 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f482:	2b80      	cmp	r3, #128	; 0x80
 800f484:	d107      	bne.n	800f496 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f48e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fc6d 	bl	800fd70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	691b      	ldr	r3, [r3, #16]
 800f49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a0:	2b40      	cmp	r3, #64	; 0x40
 800f4a2:	d10e      	bne.n	800f4c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	68db      	ldr	r3, [r3, #12]
 800f4aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ae:	2b40      	cmp	r3, #64	; 0x40
 800f4b0:	d107      	bne.n	800f4c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f4ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f8ff 	bl	800f6c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	691b      	ldr	r3, [r3, #16]
 800f4c8:	f003 0320 	and.w	r3, r3, #32
 800f4cc:	2b20      	cmp	r3, #32
 800f4ce:	d10e      	bne.n	800f4ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	68db      	ldr	r3, [r3, #12]
 800f4d6:	f003 0320 	and.w	r3, r3, #32
 800f4da:	2b20      	cmp	r3, #32
 800f4dc:	d107      	bne.n	800f4ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f06f 0220 	mvn.w	r2, #32
 800f4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f000 fc37 	bl	800fd5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f4ee:	bf00      	nop
 800f4f0:	3708      	adds	r7, #8
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bd80      	pop	{r7, pc}
	...

0800f4f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f50a:	2b01      	cmp	r3, #1
 800f50c:	d101      	bne.n	800f512 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f50e:	2302      	movs	r3, #2
 800f510:	e0b4      	b.n	800f67c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2201      	movs	r2, #1
 800f516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2202      	movs	r2, #2
 800f51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b0c      	cmp	r3, #12
 800f526:	f200 809f 	bhi.w	800f668 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f52a:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f565 	.word	0x0800f565
 800f534:	0800f669 	.word	0x0800f669
 800f538:	0800f669 	.word	0x0800f669
 800f53c:	0800f669 	.word	0x0800f669
 800f540:	0800f5a5 	.word	0x0800f5a5
 800f544:	0800f669 	.word	0x0800f669
 800f548:	0800f669 	.word	0x0800f669
 800f54c:	0800f669 	.word	0x0800f669
 800f550:	0800f5e7 	.word	0x0800f5e7
 800f554:	0800f669 	.word	0x0800f669
 800f558:	0800f669 	.word	0x0800f669
 800f55c:	0800f669 	.word	0x0800f669
 800f560:	0800f627 	.word	0x0800f627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68b9      	ldr	r1, [r7, #8]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 f952 	bl	800f814 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	699a      	ldr	r2, [r3, #24]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f042 0208 	orr.w	r2, r2, #8
 800f57e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	699a      	ldr	r2, [r3, #24]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f022 0204 	bic.w	r2, r2, #4
 800f58e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	6999      	ldr	r1, [r3, #24]
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	691a      	ldr	r2, [r3, #16]
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	430a      	orrs	r2, r1
 800f5a0:	619a      	str	r2, [r3, #24]
      break;
 800f5a2:	e062      	b.n	800f66a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	68b9      	ldr	r1, [r7, #8]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f000 f9a2 	bl	800f8f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	699a      	ldr	r2, [r3, #24]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f5be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	699a      	ldr	r2, [r3, #24]
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	6999      	ldr	r1, [r3, #24]
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	691b      	ldr	r3, [r3, #16]
 800f5da:	021a      	lsls	r2, r3, #8
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	430a      	orrs	r2, r1
 800f5e2:	619a      	str	r2, [r3, #24]
      break;
 800f5e4:	e041      	b.n	800f66a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	68b9      	ldr	r1, [r7, #8]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f9f7 	bl	800f9e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	69da      	ldr	r2, [r3, #28]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	f042 0208 	orr.w	r2, r2, #8
 800f600:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	69da      	ldr	r2, [r3, #28]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f022 0204 	bic.w	r2, r2, #4
 800f610:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	69d9      	ldr	r1, [r3, #28]
 800f618:	68bb      	ldr	r3, [r7, #8]
 800f61a:	691a      	ldr	r2, [r3, #16]
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	430a      	orrs	r2, r1
 800f622:	61da      	str	r2, [r3, #28]
      break;
 800f624:	e021      	b.n	800f66a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	68b9      	ldr	r1, [r7, #8]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 fa4b 	bl	800fac8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	69da      	ldr	r2, [r3, #28]
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f640:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	69da      	ldr	r2, [r3, #28]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f650:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	69d9      	ldr	r1, [r3, #28]
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	021a      	lsls	r2, r3, #8
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	61da      	str	r2, [r3, #28]
      break;
 800f666:	e000      	b.n	800f66a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f668:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	2201      	movs	r2, #1
 800f66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2200      	movs	r2, #0
 800f676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3710      	adds	r7, #16
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6a0:	bf00      	nop
 800f6a2:	370c      	adds	r7, #12
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6aa:	4770      	bx	lr

0800f6ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b085      	sub	sp, #20
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a40      	ldr	r2, [pc, #256]	; (800f7e8 <TIM_Base_SetConfig+0x114>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d013      	beq.n	800f714 <TIM_Base_SetConfig+0x40>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6f2:	d00f      	beq.n	800f714 <TIM_Base_SetConfig+0x40>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a3d      	ldr	r2, [pc, #244]	; (800f7ec <TIM_Base_SetConfig+0x118>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d00b      	beq.n	800f714 <TIM_Base_SetConfig+0x40>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a3c      	ldr	r2, [pc, #240]	; (800f7f0 <TIM_Base_SetConfig+0x11c>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d007      	beq.n	800f714 <TIM_Base_SetConfig+0x40>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a3b      	ldr	r2, [pc, #236]	; (800f7f4 <TIM_Base_SetConfig+0x120>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d003      	beq.n	800f714 <TIM_Base_SetConfig+0x40>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a3a      	ldr	r2, [pc, #232]	; (800f7f8 <TIM_Base_SetConfig+0x124>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d108      	bne.n	800f726 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f71a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	4313      	orrs	r3, r2
 800f724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	4a2f      	ldr	r2, [pc, #188]	; (800f7e8 <TIM_Base_SetConfig+0x114>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d02b      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f734:	d027      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	4a2c      	ldr	r2, [pc, #176]	; (800f7ec <TIM_Base_SetConfig+0x118>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d023      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	4a2b      	ldr	r2, [pc, #172]	; (800f7f0 <TIM_Base_SetConfig+0x11c>)
 800f742:	4293      	cmp	r3, r2
 800f744:	d01f      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	4a2a      	ldr	r2, [pc, #168]	; (800f7f4 <TIM_Base_SetConfig+0x120>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d01b      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	4a29      	ldr	r2, [pc, #164]	; (800f7f8 <TIM_Base_SetConfig+0x124>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d017      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	4a28      	ldr	r2, [pc, #160]	; (800f7fc <TIM_Base_SetConfig+0x128>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d013      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	4a27      	ldr	r2, [pc, #156]	; (800f800 <TIM_Base_SetConfig+0x12c>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d00f      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4a26      	ldr	r2, [pc, #152]	; (800f804 <TIM_Base_SetConfig+0x130>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d00b      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a25      	ldr	r2, [pc, #148]	; (800f808 <TIM_Base_SetConfig+0x134>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d007      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4a24      	ldr	r2, [pc, #144]	; (800f80c <TIM_Base_SetConfig+0x138>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d003      	beq.n	800f786 <TIM_Base_SetConfig+0xb2>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4a23      	ldr	r2, [pc, #140]	; (800f810 <TIM_Base_SetConfig+0x13c>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d108      	bne.n	800f798 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f78c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	4313      	orrs	r3, r2
 800f796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	695b      	ldr	r3, [r3, #20]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68fa      	ldr	r2, [r7, #12]
 800f7aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	689a      	ldr	r2, [r3, #8]
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a0a      	ldr	r2, [pc, #40]	; (800f7e8 <TIM_Base_SetConfig+0x114>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d003      	beq.n	800f7cc <TIM_Base_SetConfig+0xf8>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a0c      	ldr	r2, [pc, #48]	; (800f7f8 <TIM_Base_SetConfig+0x124>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d103      	bne.n	800f7d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	691a      	ldr	r2, [r3, #16]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	615a      	str	r2, [r3, #20]
}
 800f7da:	bf00      	nop
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	40010000 	.word	0x40010000
 800f7ec:	40000400 	.word	0x40000400
 800f7f0:	40000800 	.word	0x40000800
 800f7f4:	40000c00 	.word	0x40000c00
 800f7f8:	40010400 	.word	0x40010400
 800f7fc:	40014000 	.word	0x40014000
 800f800:	40014400 	.word	0x40014400
 800f804:	40014800 	.word	0x40014800
 800f808:	40001800 	.word	0x40001800
 800f80c:	40001c00 	.word	0x40001c00
 800f810:	40002000 	.word	0x40002000

0800f814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f814:	b480      	push	{r7}
 800f816:	b087      	sub	sp, #28
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	6a1b      	ldr	r3, [r3, #32]
 800f822:	f023 0201 	bic.w	r2, r3, #1
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f023 0303 	bic.w	r3, r3, #3
 800f84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	68fa      	ldr	r2, [r7, #12]
 800f852:	4313      	orrs	r3, r2
 800f854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	f023 0302 	bic.w	r3, r3, #2
 800f85c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	697a      	ldr	r2, [r7, #20]
 800f864:	4313      	orrs	r3, r2
 800f866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a20      	ldr	r2, [pc, #128]	; (800f8ec <TIM_OC1_SetConfig+0xd8>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d003      	beq.n	800f878 <TIM_OC1_SetConfig+0x64>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a1f      	ldr	r2, [pc, #124]	; (800f8f0 <TIM_OC1_SetConfig+0xdc>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d10c      	bne.n	800f892 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	f023 0308 	bic.w	r3, r3, #8
 800f87e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	697a      	ldr	r2, [r7, #20]
 800f886:	4313      	orrs	r3, r2
 800f888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	f023 0304 	bic.w	r3, r3, #4
 800f890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4a15      	ldr	r2, [pc, #84]	; (800f8ec <TIM_OC1_SetConfig+0xd8>)
 800f896:	4293      	cmp	r3, r2
 800f898:	d003      	beq.n	800f8a2 <TIM_OC1_SetConfig+0x8e>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a14      	ldr	r2, [pc, #80]	; (800f8f0 <TIM_OC1_SetConfig+0xdc>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d111      	bne.n	800f8c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f8b2:	683b      	ldr	r3, [r7, #0]
 800f8b4:	695b      	ldr	r3, [r3, #20]
 800f8b6:	693a      	ldr	r2, [r7, #16]
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	699b      	ldr	r3, [r3, #24]
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	693a      	ldr	r2, [r7, #16]
 800f8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	685a      	ldr	r2, [r3, #4]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	697a      	ldr	r2, [r7, #20]
 800f8de:	621a      	str	r2, [r3, #32]
}
 800f8e0:	bf00      	nop
 800f8e2:	371c      	adds	r7, #28
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr
 800f8ec:	40010000 	.word	0x40010000
 800f8f0:	40010400 	.word	0x40010400

0800f8f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b087      	sub	sp, #28
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a1b      	ldr	r3, [r3, #32]
 800f902:	f023 0210 	bic.w	r2, r3, #16
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	685b      	ldr	r3, [r3, #4]
 800f914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	699b      	ldr	r3, [r3, #24]
 800f91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f92a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	021b      	lsls	r3, r3, #8
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	4313      	orrs	r3, r2
 800f936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	f023 0320 	bic.w	r3, r3, #32
 800f93e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	689b      	ldr	r3, [r3, #8]
 800f944:	011b      	lsls	r3, r3, #4
 800f946:	697a      	ldr	r2, [r7, #20]
 800f948:	4313      	orrs	r3, r2
 800f94a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4a22      	ldr	r2, [pc, #136]	; (800f9d8 <TIM_OC2_SetConfig+0xe4>)
 800f950:	4293      	cmp	r3, r2
 800f952:	d003      	beq.n	800f95c <TIM_OC2_SetConfig+0x68>
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	4a21      	ldr	r2, [pc, #132]	; (800f9dc <TIM_OC2_SetConfig+0xe8>)
 800f958:	4293      	cmp	r3, r2
 800f95a:	d10d      	bne.n	800f978 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	011b      	lsls	r3, r3, #4
 800f96a:	697a      	ldr	r2, [r7, #20]
 800f96c:	4313      	orrs	r3, r2
 800f96e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f976:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	4a17      	ldr	r2, [pc, #92]	; (800f9d8 <TIM_OC2_SetConfig+0xe4>)
 800f97c:	4293      	cmp	r3, r2
 800f97e:	d003      	beq.n	800f988 <TIM_OC2_SetConfig+0x94>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	4a16      	ldr	r2, [pc, #88]	; (800f9dc <TIM_OC2_SetConfig+0xe8>)
 800f984:	4293      	cmp	r3, r2
 800f986:	d113      	bne.n	800f9b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f98e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f996:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	695b      	ldr	r3, [r3, #20]
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	699b      	ldr	r3, [r3, #24]
 800f9a8:	009b      	lsls	r3, r3, #2
 800f9aa:	693a      	ldr	r2, [r7, #16]
 800f9ac:	4313      	orrs	r3, r2
 800f9ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	693a      	ldr	r2, [r7, #16]
 800f9b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	685a      	ldr	r2, [r3, #4]
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	697a      	ldr	r2, [r7, #20]
 800f9c8:	621a      	str	r2, [r3, #32]
}
 800f9ca:	bf00      	nop
 800f9cc:	371c      	adds	r7, #28
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	40010000 	.word	0x40010000
 800f9dc:	40010400 	.word	0x40010400

0800f9e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b087      	sub	sp, #28
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6a1b      	ldr	r3, [r3, #32]
 800f9ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a1b      	ldr	r3, [r3, #32]
 800f9fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	69db      	ldr	r3, [r3, #28]
 800fa06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f023 0303 	bic.w	r3, r3, #3
 800fa16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	68fa      	ldr	r2, [r7, #12]
 800fa1e:	4313      	orrs	r3, r2
 800fa20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fa2a:	683b      	ldr	r3, [r7, #0]
 800fa2c:	689b      	ldr	r3, [r3, #8]
 800fa2e:	021b      	lsls	r3, r3, #8
 800fa30:	697a      	ldr	r2, [r7, #20]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a21      	ldr	r2, [pc, #132]	; (800fac0 <TIM_OC3_SetConfig+0xe0>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d003      	beq.n	800fa46 <TIM_OC3_SetConfig+0x66>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4a20      	ldr	r2, [pc, #128]	; (800fac4 <TIM_OC3_SetConfig+0xe4>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d10d      	bne.n	800fa62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	021b      	lsls	r3, r3, #8
 800fa54:	697a      	ldr	r2, [r7, #20]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a16      	ldr	r2, [pc, #88]	; (800fac0 <TIM_OC3_SetConfig+0xe0>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d003      	beq.n	800fa72 <TIM_OC3_SetConfig+0x92>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4a15      	ldr	r2, [pc, #84]	; (800fac4 <TIM_OC3_SetConfig+0xe4>)
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	d113      	bne.n	800fa9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fa78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa7a:	693b      	ldr	r3, [r7, #16]
 800fa7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	011b      	lsls	r3, r3, #4
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	699b      	ldr	r3, [r3, #24]
 800fa92:	011b      	lsls	r3, r3, #4
 800fa94:	693a      	ldr	r2, [r7, #16]
 800fa96:	4313      	orrs	r3, r2
 800fa98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	693a      	ldr	r2, [r7, #16]
 800fa9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	685a      	ldr	r2, [r3, #4]
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	697a      	ldr	r2, [r7, #20]
 800fab2:	621a      	str	r2, [r3, #32]
}
 800fab4:	bf00      	nop
 800fab6:	371c      	adds	r7, #28
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr
 800fac0:	40010000 	.word	0x40010000
 800fac4:	40010400 	.word	0x40010400

0800fac8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fac8:	b480      	push	{r7}
 800faca:	b087      	sub	sp, #28
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6a1b      	ldr	r3, [r3, #32]
 800fad6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6a1b      	ldr	r3, [r3, #32]
 800fae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	69db      	ldr	r3, [r3, #28]
 800faee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800faf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fafe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	021b      	lsls	r3, r3, #8
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	4313      	orrs	r3, r2
 800fb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	689b      	ldr	r3, [r3, #8]
 800fb18:	031b      	lsls	r3, r3, #12
 800fb1a:	693a      	ldr	r2, [r7, #16]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a12      	ldr	r2, [pc, #72]	; (800fb6c <TIM_OC4_SetConfig+0xa4>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d003      	beq.n	800fb30 <TIM_OC4_SetConfig+0x68>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a11      	ldr	r2, [pc, #68]	; (800fb70 <TIM_OC4_SetConfig+0xa8>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d109      	bne.n	800fb44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fb36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	695b      	ldr	r3, [r3, #20]
 800fb3c:	019b      	lsls	r3, r3, #6
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	685a      	ldr	r2, [r3, #4]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	621a      	str	r2, [r3, #32]
}
 800fb5e:	bf00      	nop
 800fb60:	371c      	adds	r7, #28
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop
 800fb6c:	40010000 	.word	0x40010000
 800fb70:	40010400 	.word	0x40010400

0800fb74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b087      	sub	sp, #28
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	f003 031f 	and.w	r3, r3, #31
 800fb86:	2201      	movs	r2, #1
 800fb88:	fa02 f303 	lsl.w	r3, r2, r3
 800fb8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a1a      	ldr	r2, [r3, #32]
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	43db      	mvns	r3, r3
 800fb96:	401a      	ands	r2, r3
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6a1a      	ldr	r2, [r3, #32]
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	f003 031f 	and.w	r3, r3, #31
 800fba6:	6879      	ldr	r1, [r7, #4]
 800fba8:	fa01 f303 	lsl.w	r3, r1, r3
 800fbac:	431a      	orrs	r2, r3
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	621a      	str	r2, [r3, #32]
}
 800fbb2:	bf00      	nop
 800fbb4:	371c      	adds	r7, #28
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbc:	4770      	bx	lr
	...

0800fbc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b085      	sub	sp, #20
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d101      	bne.n	800fbd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbd4:	2302      	movs	r3, #2
 800fbd6:	e05a      	b.n	800fc8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2202      	movs	r2, #2
 800fbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	685b      	ldr	r3, [r3, #4]
 800fbee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68fa      	ldr	r2, [r7, #12]
 800fc10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a21      	ldr	r2, [pc, #132]	; (800fc9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d022      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc24:	d01d      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a1d      	ldr	r2, [pc, #116]	; (800fca0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d018      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a1b      	ldr	r2, [pc, #108]	; (800fca4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d013      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4a1a      	ldr	r2, [pc, #104]	; (800fca8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d00e      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	4a18      	ldr	r2, [pc, #96]	; (800fcac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d009      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	4a17      	ldr	r2, [pc, #92]	; (800fcb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d004      	beq.n	800fc62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	4a15      	ldr	r2, [pc, #84]	; (800fcb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	d10c      	bne.n	800fc7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	68ba      	ldr	r2, [r7, #8]
 800fc70:	4313      	orrs	r3, r2
 800fc72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	68ba      	ldr	r2, [r7, #8]
 800fc7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2200      	movs	r2, #0
 800fc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3714      	adds	r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr
 800fc9a:	bf00      	nop
 800fc9c:	40010000 	.word	0x40010000
 800fca0:	40000400 	.word	0x40000400
 800fca4:	40000800 	.word	0x40000800
 800fca8:	40000c00 	.word	0x40000c00
 800fcac:	40010400 	.word	0x40010400
 800fcb0:	40014000 	.word	0x40014000
 800fcb4:	40001800 	.word	0x40001800

0800fcb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b085      	sub	sp, #20
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d101      	bne.n	800fcd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fcd0:	2302      	movs	r3, #2
 800fcd2:	e03d      	b.n	800fd50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	4313      	orrs	r3, r2
 800fce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	689b      	ldr	r3, [r3, #8]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	4313      	orrs	r3, r2
 800fd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd0c:	683b      	ldr	r3, [r7, #0]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4313      	orrs	r3, r2
 800fd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd1a:	683b      	ldr	r3, [r7, #0]
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	4313      	orrs	r3, r2
 800fd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	695b      	ldr	r3, [r3, #20]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd4e:	2300      	movs	r3, #0
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3714      	adds	r7, #20
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr

0800fd5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fd64:	bf00      	nop
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d101      	bne.n	800fd96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e03f      	b.n	800fe16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d106      	bne.n	800fdb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdaa:	6878      	ldr	r0, [r7, #4]
 800fdac:	f7f7 fcf0 	bl	8007790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2224      	movs	r2, #36	; 0x24
 800fdb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	68da      	ldr	r2, [r3, #12]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fdc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f829 	bl	800fe20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	691a      	ldr	r2, [r3, #16]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	695a      	ldr	r2, [r3, #20]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fdec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	68da      	ldr	r2, [r3, #12]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fdfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2220      	movs	r2, #32
 800fe08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2220      	movs	r2, #32
 800fe10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3708      	adds	r7, #8
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}
	...

0800fe20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fe20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe24:	b085      	sub	sp, #20
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	691b      	ldr	r3, [r3, #16]
 800fe30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	68da      	ldr	r2, [r3, #12]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	430a      	orrs	r2, r1
 800fe3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	689a      	ldr	r2, [r3, #8]
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	431a      	orrs	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	431a      	orrs	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	69db      	ldr	r3, [r3, #28]
 800fe54:	4313      	orrs	r3, r2
 800fe56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fe62:	f023 030c 	bic.w	r3, r3, #12
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	6812      	ldr	r2, [r2, #0]
 800fe6a:	68f9      	ldr	r1, [r7, #12]
 800fe6c:	430b      	orrs	r3, r1
 800fe6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	699a      	ldr	r2, [r3, #24]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	430a      	orrs	r2, r1
 800fe84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	69db      	ldr	r3, [r3, #28]
 800fe8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe8e:	f040 818b 	bne.w	80101a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4ac1      	ldr	r2, [pc, #772]	; (801019c <UART_SetConfig+0x37c>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d005      	beq.n	800fea8 <UART_SetConfig+0x88>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	4abf      	ldr	r2, [pc, #764]	; (80101a0 <UART_SetConfig+0x380>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	f040 80bd 	bne.w	8010022 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fea8:	f7fc fbcc 	bl	800c644 <HAL_RCC_GetPCLK2Freq>
 800feac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	461d      	mov	r5, r3
 800feb2:	f04f 0600 	mov.w	r6, #0
 800feb6:	46a8      	mov	r8, r5
 800feb8:	46b1      	mov	r9, r6
 800feba:	eb18 0308 	adds.w	r3, r8, r8
 800febe:	eb49 0409 	adc.w	r4, r9, r9
 800fec2:	4698      	mov	r8, r3
 800fec4:	46a1      	mov	r9, r4
 800fec6:	eb18 0805 	adds.w	r8, r8, r5
 800feca:	eb49 0906 	adc.w	r9, r9, r6
 800fece:	f04f 0100 	mov.w	r1, #0
 800fed2:	f04f 0200 	mov.w	r2, #0
 800fed6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800feda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fede:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fee2:	4688      	mov	r8, r1
 800fee4:	4691      	mov	r9, r2
 800fee6:	eb18 0005 	adds.w	r0, r8, r5
 800feea:	eb49 0106 	adc.w	r1, r9, r6
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	461d      	mov	r5, r3
 800fef4:	f04f 0600 	mov.w	r6, #0
 800fef8:	196b      	adds	r3, r5, r5
 800fefa:	eb46 0406 	adc.w	r4, r6, r6
 800fefe:	461a      	mov	r2, r3
 800ff00:	4623      	mov	r3, r4
 800ff02:	f7f0 fed9 	bl	8000cb8 <__aeabi_uldivmod>
 800ff06:	4603      	mov	r3, r0
 800ff08:	460c      	mov	r4, r1
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	4ba5      	ldr	r3, [pc, #660]	; (80101a4 <UART_SetConfig+0x384>)
 800ff0e:	fba3 2302 	umull	r2, r3, r3, r2
 800ff12:	095b      	lsrs	r3, r3, #5
 800ff14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	461d      	mov	r5, r3
 800ff1c:	f04f 0600 	mov.w	r6, #0
 800ff20:	46a9      	mov	r9, r5
 800ff22:	46b2      	mov	sl, r6
 800ff24:	eb19 0309 	adds.w	r3, r9, r9
 800ff28:	eb4a 040a 	adc.w	r4, sl, sl
 800ff2c:	4699      	mov	r9, r3
 800ff2e:	46a2      	mov	sl, r4
 800ff30:	eb19 0905 	adds.w	r9, r9, r5
 800ff34:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff38:	f04f 0100 	mov.w	r1, #0
 800ff3c:	f04f 0200 	mov.w	r2, #0
 800ff40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff4c:	4689      	mov	r9, r1
 800ff4e:	4692      	mov	sl, r2
 800ff50:	eb19 0005 	adds.w	r0, r9, r5
 800ff54:	eb4a 0106 	adc.w	r1, sl, r6
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	461d      	mov	r5, r3
 800ff5e:	f04f 0600 	mov.w	r6, #0
 800ff62:	196b      	adds	r3, r5, r5
 800ff64:	eb46 0406 	adc.w	r4, r6, r6
 800ff68:	461a      	mov	r2, r3
 800ff6a:	4623      	mov	r3, r4
 800ff6c:	f7f0 fea4 	bl	8000cb8 <__aeabi_uldivmod>
 800ff70:	4603      	mov	r3, r0
 800ff72:	460c      	mov	r4, r1
 800ff74:	461a      	mov	r2, r3
 800ff76:	4b8b      	ldr	r3, [pc, #556]	; (80101a4 <UART_SetConfig+0x384>)
 800ff78:	fba3 1302 	umull	r1, r3, r3, r2
 800ff7c:	095b      	lsrs	r3, r3, #5
 800ff7e:	2164      	movs	r1, #100	; 0x64
 800ff80:	fb01 f303 	mul.w	r3, r1, r3
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	00db      	lsls	r3, r3, #3
 800ff88:	3332      	adds	r3, #50	; 0x32
 800ff8a:	4a86      	ldr	r2, [pc, #536]	; (80101a4 <UART_SetConfig+0x384>)
 800ff8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ff90:	095b      	lsrs	r3, r3, #5
 800ff92:	005b      	lsls	r3, r3, #1
 800ff94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ff98:	4498      	add	r8, r3
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	461d      	mov	r5, r3
 800ff9e:	f04f 0600 	mov.w	r6, #0
 800ffa2:	46a9      	mov	r9, r5
 800ffa4:	46b2      	mov	sl, r6
 800ffa6:	eb19 0309 	adds.w	r3, r9, r9
 800ffaa:	eb4a 040a 	adc.w	r4, sl, sl
 800ffae:	4699      	mov	r9, r3
 800ffb0:	46a2      	mov	sl, r4
 800ffb2:	eb19 0905 	adds.w	r9, r9, r5
 800ffb6:	eb4a 0a06 	adc.w	sl, sl, r6
 800ffba:	f04f 0100 	mov.w	r1, #0
 800ffbe:	f04f 0200 	mov.w	r2, #0
 800ffc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffce:	4689      	mov	r9, r1
 800ffd0:	4692      	mov	sl, r2
 800ffd2:	eb19 0005 	adds.w	r0, r9, r5
 800ffd6:	eb4a 0106 	adc.w	r1, sl, r6
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	461d      	mov	r5, r3
 800ffe0:	f04f 0600 	mov.w	r6, #0
 800ffe4:	196b      	adds	r3, r5, r5
 800ffe6:	eb46 0406 	adc.w	r4, r6, r6
 800ffea:	461a      	mov	r2, r3
 800ffec:	4623      	mov	r3, r4
 800ffee:	f7f0 fe63 	bl	8000cb8 <__aeabi_uldivmod>
 800fff2:	4603      	mov	r3, r0
 800fff4:	460c      	mov	r4, r1
 800fff6:	461a      	mov	r2, r3
 800fff8:	4b6a      	ldr	r3, [pc, #424]	; (80101a4 <UART_SetConfig+0x384>)
 800fffa:	fba3 1302 	umull	r1, r3, r3, r2
 800fffe:	095b      	lsrs	r3, r3, #5
 8010000:	2164      	movs	r1, #100	; 0x64
 8010002:	fb01 f303 	mul.w	r3, r1, r3
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	00db      	lsls	r3, r3, #3
 801000a:	3332      	adds	r3, #50	; 0x32
 801000c:	4a65      	ldr	r2, [pc, #404]	; (80101a4 <UART_SetConfig+0x384>)
 801000e:	fba2 2303 	umull	r2, r3, r2, r3
 8010012:	095b      	lsrs	r3, r3, #5
 8010014:	f003 0207 	and.w	r2, r3, #7
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	4442      	add	r2, r8
 801001e:	609a      	str	r2, [r3, #8]
 8010020:	e26f      	b.n	8010502 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010022:	f7fc fafb 	bl	800c61c <HAL_RCC_GetPCLK1Freq>
 8010026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	461d      	mov	r5, r3
 801002c:	f04f 0600 	mov.w	r6, #0
 8010030:	46a8      	mov	r8, r5
 8010032:	46b1      	mov	r9, r6
 8010034:	eb18 0308 	adds.w	r3, r8, r8
 8010038:	eb49 0409 	adc.w	r4, r9, r9
 801003c:	4698      	mov	r8, r3
 801003e:	46a1      	mov	r9, r4
 8010040:	eb18 0805 	adds.w	r8, r8, r5
 8010044:	eb49 0906 	adc.w	r9, r9, r6
 8010048:	f04f 0100 	mov.w	r1, #0
 801004c:	f04f 0200 	mov.w	r2, #0
 8010050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801005c:	4688      	mov	r8, r1
 801005e:	4691      	mov	r9, r2
 8010060:	eb18 0005 	adds.w	r0, r8, r5
 8010064:	eb49 0106 	adc.w	r1, r9, r6
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	461d      	mov	r5, r3
 801006e:	f04f 0600 	mov.w	r6, #0
 8010072:	196b      	adds	r3, r5, r5
 8010074:	eb46 0406 	adc.w	r4, r6, r6
 8010078:	461a      	mov	r2, r3
 801007a:	4623      	mov	r3, r4
 801007c:	f7f0 fe1c 	bl	8000cb8 <__aeabi_uldivmod>
 8010080:	4603      	mov	r3, r0
 8010082:	460c      	mov	r4, r1
 8010084:	461a      	mov	r2, r3
 8010086:	4b47      	ldr	r3, [pc, #284]	; (80101a4 <UART_SetConfig+0x384>)
 8010088:	fba3 2302 	umull	r2, r3, r3, r2
 801008c:	095b      	lsrs	r3, r3, #5
 801008e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	461d      	mov	r5, r3
 8010096:	f04f 0600 	mov.w	r6, #0
 801009a:	46a9      	mov	r9, r5
 801009c:	46b2      	mov	sl, r6
 801009e:	eb19 0309 	adds.w	r3, r9, r9
 80100a2:	eb4a 040a 	adc.w	r4, sl, sl
 80100a6:	4699      	mov	r9, r3
 80100a8:	46a2      	mov	sl, r4
 80100aa:	eb19 0905 	adds.w	r9, r9, r5
 80100ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80100b2:	f04f 0100 	mov.w	r1, #0
 80100b6:	f04f 0200 	mov.w	r2, #0
 80100ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100c6:	4689      	mov	r9, r1
 80100c8:	4692      	mov	sl, r2
 80100ca:	eb19 0005 	adds.w	r0, r9, r5
 80100ce:	eb4a 0106 	adc.w	r1, sl, r6
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	461d      	mov	r5, r3
 80100d8:	f04f 0600 	mov.w	r6, #0
 80100dc:	196b      	adds	r3, r5, r5
 80100de:	eb46 0406 	adc.w	r4, r6, r6
 80100e2:	461a      	mov	r2, r3
 80100e4:	4623      	mov	r3, r4
 80100e6:	f7f0 fde7 	bl	8000cb8 <__aeabi_uldivmod>
 80100ea:	4603      	mov	r3, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	461a      	mov	r2, r3
 80100f0:	4b2c      	ldr	r3, [pc, #176]	; (80101a4 <UART_SetConfig+0x384>)
 80100f2:	fba3 1302 	umull	r1, r3, r3, r2
 80100f6:	095b      	lsrs	r3, r3, #5
 80100f8:	2164      	movs	r1, #100	; 0x64
 80100fa:	fb01 f303 	mul.w	r3, r1, r3
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	00db      	lsls	r3, r3, #3
 8010102:	3332      	adds	r3, #50	; 0x32
 8010104:	4a27      	ldr	r2, [pc, #156]	; (80101a4 <UART_SetConfig+0x384>)
 8010106:	fba2 2303 	umull	r2, r3, r2, r3
 801010a:	095b      	lsrs	r3, r3, #5
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010112:	4498      	add	r8, r3
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	461d      	mov	r5, r3
 8010118:	f04f 0600 	mov.w	r6, #0
 801011c:	46a9      	mov	r9, r5
 801011e:	46b2      	mov	sl, r6
 8010120:	eb19 0309 	adds.w	r3, r9, r9
 8010124:	eb4a 040a 	adc.w	r4, sl, sl
 8010128:	4699      	mov	r9, r3
 801012a:	46a2      	mov	sl, r4
 801012c:	eb19 0905 	adds.w	r9, r9, r5
 8010130:	eb4a 0a06 	adc.w	sl, sl, r6
 8010134:	f04f 0100 	mov.w	r1, #0
 8010138:	f04f 0200 	mov.w	r2, #0
 801013c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010148:	4689      	mov	r9, r1
 801014a:	4692      	mov	sl, r2
 801014c:	eb19 0005 	adds.w	r0, r9, r5
 8010150:	eb4a 0106 	adc.w	r1, sl, r6
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	461d      	mov	r5, r3
 801015a:	f04f 0600 	mov.w	r6, #0
 801015e:	196b      	adds	r3, r5, r5
 8010160:	eb46 0406 	adc.w	r4, r6, r6
 8010164:	461a      	mov	r2, r3
 8010166:	4623      	mov	r3, r4
 8010168:	f7f0 fda6 	bl	8000cb8 <__aeabi_uldivmod>
 801016c:	4603      	mov	r3, r0
 801016e:	460c      	mov	r4, r1
 8010170:	461a      	mov	r2, r3
 8010172:	4b0c      	ldr	r3, [pc, #48]	; (80101a4 <UART_SetConfig+0x384>)
 8010174:	fba3 1302 	umull	r1, r3, r3, r2
 8010178:	095b      	lsrs	r3, r3, #5
 801017a:	2164      	movs	r1, #100	; 0x64
 801017c:	fb01 f303 	mul.w	r3, r1, r3
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	00db      	lsls	r3, r3, #3
 8010184:	3332      	adds	r3, #50	; 0x32
 8010186:	4a07      	ldr	r2, [pc, #28]	; (80101a4 <UART_SetConfig+0x384>)
 8010188:	fba2 2303 	umull	r2, r3, r2, r3
 801018c:	095b      	lsrs	r3, r3, #5
 801018e:	f003 0207 	and.w	r2, r3, #7
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4442      	add	r2, r8
 8010198:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801019a:	e1b2      	b.n	8010502 <UART_SetConfig+0x6e2>
 801019c:	40011000 	.word	0x40011000
 80101a0:	40011400 	.word	0x40011400
 80101a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4ad7      	ldr	r2, [pc, #860]	; (801050c <UART_SetConfig+0x6ec>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d005      	beq.n	80101be <UART_SetConfig+0x39e>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	4ad6      	ldr	r2, [pc, #856]	; (8010510 <UART_SetConfig+0x6f0>)
 80101b8:	4293      	cmp	r3, r2
 80101ba:	f040 80d1 	bne.w	8010360 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80101be:	f7fc fa41 	bl	800c644 <HAL_RCC_GetPCLK2Freq>
 80101c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	469a      	mov	sl, r3
 80101c8:	f04f 0b00 	mov.w	fp, #0
 80101cc:	46d0      	mov	r8, sl
 80101ce:	46d9      	mov	r9, fp
 80101d0:	eb18 0308 	adds.w	r3, r8, r8
 80101d4:	eb49 0409 	adc.w	r4, r9, r9
 80101d8:	4698      	mov	r8, r3
 80101da:	46a1      	mov	r9, r4
 80101dc:	eb18 080a 	adds.w	r8, r8, sl
 80101e0:	eb49 090b 	adc.w	r9, r9, fp
 80101e4:	f04f 0100 	mov.w	r1, #0
 80101e8:	f04f 0200 	mov.w	r2, #0
 80101ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80101f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80101f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80101f8:	4688      	mov	r8, r1
 80101fa:	4691      	mov	r9, r2
 80101fc:	eb1a 0508 	adds.w	r5, sl, r8
 8010200:	eb4b 0609 	adc.w	r6, fp, r9
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	4619      	mov	r1, r3
 801020a:	f04f 0200 	mov.w	r2, #0
 801020e:	f04f 0300 	mov.w	r3, #0
 8010212:	f04f 0400 	mov.w	r4, #0
 8010216:	0094      	lsls	r4, r2, #2
 8010218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801021c:	008b      	lsls	r3, r1, #2
 801021e:	461a      	mov	r2, r3
 8010220:	4623      	mov	r3, r4
 8010222:	4628      	mov	r0, r5
 8010224:	4631      	mov	r1, r6
 8010226:	f7f0 fd47 	bl	8000cb8 <__aeabi_uldivmod>
 801022a:	4603      	mov	r3, r0
 801022c:	460c      	mov	r4, r1
 801022e:	461a      	mov	r2, r3
 8010230:	4bb8      	ldr	r3, [pc, #736]	; (8010514 <UART_SetConfig+0x6f4>)
 8010232:	fba3 2302 	umull	r2, r3, r3, r2
 8010236:	095b      	lsrs	r3, r3, #5
 8010238:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	469b      	mov	fp, r3
 8010240:	f04f 0c00 	mov.w	ip, #0
 8010244:	46d9      	mov	r9, fp
 8010246:	46e2      	mov	sl, ip
 8010248:	eb19 0309 	adds.w	r3, r9, r9
 801024c:	eb4a 040a 	adc.w	r4, sl, sl
 8010250:	4699      	mov	r9, r3
 8010252:	46a2      	mov	sl, r4
 8010254:	eb19 090b 	adds.w	r9, r9, fp
 8010258:	eb4a 0a0c 	adc.w	sl, sl, ip
 801025c:	f04f 0100 	mov.w	r1, #0
 8010260:	f04f 0200 	mov.w	r2, #0
 8010264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801026c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010270:	4689      	mov	r9, r1
 8010272:	4692      	mov	sl, r2
 8010274:	eb1b 0509 	adds.w	r5, fp, r9
 8010278:	eb4c 060a 	adc.w	r6, ip, sl
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	4619      	mov	r1, r3
 8010282:	f04f 0200 	mov.w	r2, #0
 8010286:	f04f 0300 	mov.w	r3, #0
 801028a:	f04f 0400 	mov.w	r4, #0
 801028e:	0094      	lsls	r4, r2, #2
 8010290:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010294:	008b      	lsls	r3, r1, #2
 8010296:	461a      	mov	r2, r3
 8010298:	4623      	mov	r3, r4
 801029a:	4628      	mov	r0, r5
 801029c:	4631      	mov	r1, r6
 801029e:	f7f0 fd0b 	bl	8000cb8 <__aeabi_uldivmod>
 80102a2:	4603      	mov	r3, r0
 80102a4:	460c      	mov	r4, r1
 80102a6:	461a      	mov	r2, r3
 80102a8:	4b9a      	ldr	r3, [pc, #616]	; (8010514 <UART_SetConfig+0x6f4>)
 80102aa:	fba3 1302 	umull	r1, r3, r3, r2
 80102ae:	095b      	lsrs	r3, r3, #5
 80102b0:	2164      	movs	r1, #100	; 0x64
 80102b2:	fb01 f303 	mul.w	r3, r1, r3
 80102b6:	1ad3      	subs	r3, r2, r3
 80102b8:	011b      	lsls	r3, r3, #4
 80102ba:	3332      	adds	r3, #50	; 0x32
 80102bc:	4a95      	ldr	r2, [pc, #596]	; (8010514 <UART_SetConfig+0x6f4>)
 80102be:	fba2 2303 	umull	r2, r3, r2, r3
 80102c2:	095b      	lsrs	r3, r3, #5
 80102c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80102c8:	4498      	add	r8, r3
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	469b      	mov	fp, r3
 80102ce:	f04f 0c00 	mov.w	ip, #0
 80102d2:	46d9      	mov	r9, fp
 80102d4:	46e2      	mov	sl, ip
 80102d6:	eb19 0309 	adds.w	r3, r9, r9
 80102da:	eb4a 040a 	adc.w	r4, sl, sl
 80102de:	4699      	mov	r9, r3
 80102e0:	46a2      	mov	sl, r4
 80102e2:	eb19 090b 	adds.w	r9, r9, fp
 80102e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102ea:	f04f 0100 	mov.w	r1, #0
 80102ee:	f04f 0200 	mov.w	r2, #0
 80102f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102fe:	4689      	mov	r9, r1
 8010300:	4692      	mov	sl, r2
 8010302:	eb1b 0509 	adds.w	r5, fp, r9
 8010306:	eb4c 060a 	adc.w	r6, ip, sl
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	4619      	mov	r1, r3
 8010310:	f04f 0200 	mov.w	r2, #0
 8010314:	f04f 0300 	mov.w	r3, #0
 8010318:	f04f 0400 	mov.w	r4, #0
 801031c:	0094      	lsls	r4, r2, #2
 801031e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010322:	008b      	lsls	r3, r1, #2
 8010324:	461a      	mov	r2, r3
 8010326:	4623      	mov	r3, r4
 8010328:	4628      	mov	r0, r5
 801032a:	4631      	mov	r1, r6
 801032c:	f7f0 fcc4 	bl	8000cb8 <__aeabi_uldivmod>
 8010330:	4603      	mov	r3, r0
 8010332:	460c      	mov	r4, r1
 8010334:	461a      	mov	r2, r3
 8010336:	4b77      	ldr	r3, [pc, #476]	; (8010514 <UART_SetConfig+0x6f4>)
 8010338:	fba3 1302 	umull	r1, r3, r3, r2
 801033c:	095b      	lsrs	r3, r3, #5
 801033e:	2164      	movs	r1, #100	; 0x64
 8010340:	fb01 f303 	mul.w	r3, r1, r3
 8010344:	1ad3      	subs	r3, r2, r3
 8010346:	011b      	lsls	r3, r3, #4
 8010348:	3332      	adds	r3, #50	; 0x32
 801034a:	4a72      	ldr	r2, [pc, #456]	; (8010514 <UART_SetConfig+0x6f4>)
 801034c:	fba2 2303 	umull	r2, r3, r2, r3
 8010350:	095b      	lsrs	r3, r3, #5
 8010352:	f003 020f 	and.w	r2, r3, #15
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4442      	add	r2, r8
 801035c:	609a      	str	r2, [r3, #8]
 801035e:	e0d0      	b.n	8010502 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010360:	f7fc f95c 	bl	800c61c <HAL_RCC_GetPCLK1Freq>
 8010364:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	469a      	mov	sl, r3
 801036a:	f04f 0b00 	mov.w	fp, #0
 801036e:	46d0      	mov	r8, sl
 8010370:	46d9      	mov	r9, fp
 8010372:	eb18 0308 	adds.w	r3, r8, r8
 8010376:	eb49 0409 	adc.w	r4, r9, r9
 801037a:	4698      	mov	r8, r3
 801037c:	46a1      	mov	r9, r4
 801037e:	eb18 080a 	adds.w	r8, r8, sl
 8010382:	eb49 090b 	adc.w	r9, r9, fp
 8010386:	f04f 0100 	mov.w	r1, #0
 801038a:	f04f 0200 	mov.w	r2, #0
 801038e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010392:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010396:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801039a:	4688      	mov	r8, r1
 801039c:	4691      	mov	r9, r2
 801039e:	eb1a 0508 	adds.w	r5, sl, r8
 80103a2:	eb4b 0609 	adc.w	r6, fp, r9
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	4619      	mov	r1, r3
 80103ac:	f04f 0200 	mov.w	r2, #0
 80103b0:	f04f 0300 	mov.w	r3, #0
 80103b4:	f04f 0400 	mov.w	r4, #0
 80103b8:	0094      	lsls	r4, r2, #2
 80103ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103be:	008b      	lsls	r3, r1, #2
 80103c0:	461a      	mov	r2, r3
 80103c2:	4623      	mov	r3, r4
 80103c4:	4628      	mov	r0, r5
 80103c6:	4631      	mov	r1, r6
 80103c8:	f7f0 fc76 	bl	8000cb8 <__aeabi_uldivmod>
 80103cc:	4603      	mov	r3, r0
 80103ce:	460c      	mov	r4, r1
 80103d0:	461a      	mov	r2, r3
 80103d2:	4b50      	ldr	r3, [pc, #320]	; (8010514 <UART_SetConfig+0x6f4>)
 80103d4:	fba3 2302 	umull	r2, r3, r3, r2
 80103d8:	095b      	lsrs	r3, r3, #5
 80103da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	469b      	mov	fp, r3
 80103e2:	f04f 0c00 	mov.w	ip, #0
 80103e6:	46d9      	mov	r9, fp
 80103e8:	46e2      	mov	sl, ip
 80103ea:	eb19 0309 	adds.w	r3, r9, r9
 80103ee:	eb4a 040a 	adc.w	r4, sl, sl
 80103f2:	4699      	mov	r9, r3
 80103f4:	46a2      	mov	sl, r4
 80103f6:	eb19 090b 	adds.w	r9, r9, fp
 80103fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103fe:	f04f 0100 	mov.w	r1, #0
 8010402:	f04f 0200 	mov.w	r2, #0
 8010406:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801040a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801040e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010412:	4689      	mov	r9, r1
 8010414:	4692      	mov	sl, r2
 8010416:	eb1b 0509 	adds.w	r5, fp, r9
 801041a:	eb4c 060a 	adc.w	r6, ip, sl
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	4619      	mov	r1, r3
 8010424:	f04f 0200 	mov.w	r2, #0
 8010428:	f04f 0300 	mov.w	r3, #0
 801042c:	f04f 0400 	mov.w	r4, #0
 8010430:	0094      	lsls	r4, r2, #2
 8010432:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010436:	008b      	lsls	r3, r1, #2
 8010438:	461a      	mov	r2, r3
 801043a:	4623      	mov	r3, r4
 801043c:	4628      	mov	r0, r5
 801043e:	4631      	mov	r1, r6
 8010440:	f7f0 fc3a 	bl	8000cb8 <__aeabi_uldivmod>
 8010444:	4603      	mov	r3, r0
 8010446:	460c      	mov	r4, r1
 8010448:	461a      	mov	r2, r3
 801044a:	4b32      	ldr	r3, [pc, #200]	; (8010514 <UART_SetConfig+0x6f4>)
 801044c:	fba3 1302 	umull	r1, r3, r3, r2
 8010450:	095b      	lsrs	r3, r3, #5
 8010452:	2164      	movs	r1, #100	; 0x64
 8010454:	fb01 f303 	mul.w	r3, r1, r3
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	011b      	lsls	r3, r3, #4
 801045c:	3332      	adds	r3, #50	; 0x32
 801045e:	4a2d      	ldr	r2, [pc, #180]	; (8010514 <UART_SetConfig+0x6f4>)
 8010460:	fba2 2303 	umull	r2, r3, r2, r3
 8010464:	095b      	lsrs	r3, r3, #5
 8010466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801046a:	4498      	add	r8, r3
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	469b      	mov	fp, r3
 8010470:	f04f 0c00 	mov.w	ip, #0
 8010474:	46d9      	mov	r9, fp
 8010476:	46e2      	mov	sl, ip
 8010478:	eb19 0309 	adds.w	r3, r9, r9
 801047c:	eb4a 040a 	adc.w	r4, sl, sl
 8010480:	4699      	mov	r9, r3
 8010482:	46a2      	mov	sl, r4
 8010484:	eb19 090b 	adds.w	r9, r9, fp
 8010488:	eb4a 0a0c 	adc.w	sl, sl, ip
 801048c:	f04f 0100 	mov.w	r1, #0
 8010490:	f04f 0200 	mov.w	r2, #0
 8010494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801049c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104a0:	4689      	mov	r9, r1
 80104a2:	4692      	mov	sl, r2
 80104a4:	eb1b 0509 	adds.w	r5, fp, r9
 80104a8:	eb4c 060a 	adc.w	r6, ip, sl
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4619      	mov	r1, r3
 80104b2:	f04f 0200 	mov.w	r2, #0
 80104b6:	f04f 0300 	mov.w	r3, #0
 80104ba:	f04f 0400 	mov.w	r4, #0
 80104be:	0094      	lsls	r4, r2, #2
 80104c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104c4:	008b      	lsls	r3, r1, #2
 80104c6:	461a      	mov	r2, r3
 80104c8:	4623      	mov	r3, r4
 80104ca:	4628      	mov	r0, r5
 80104cc:	4631      	mov	r1, r6
 80104ce:	f7f0 fbf3 	bl	8000cb8 <__aeabi_uldivmod>
 80104d2:	4603      	mov	r3, r0
 80104d4:	460c      	mov	r4, r1
 80104d6:	461a      	mov	r2, r3
 80104d8:	4b0e      	ldr	r3, [pc, #56]	; (8010514 <UART_SetConfig+0x6f4>)
 80104da:	fba3 1302 	umull	r1, r3, r3, r2
 80104de:	095b      	lsrs	r3, r3, #5
 80104e0:	2164      	movs	r1, #100	; 0x64
 80104e2:	fb01 f303 	mul.w	r3, r1, r3
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	011b      	lsls	r3, r3, #4
 80104ea:	3332      	adds	r3, #50	; 0x32
 80104ec:	4a09      	ldr	r2, [pc, #36]	; (8010514 <UART_SetConfig+0x6f4>)
 80104ee:	fba2 2303 	umull	r2, r3, r2, r3
 80104f2:	095b      	lsrs	r3, r3, #5
 80104f4:	f003 020f 	and.w	r2, r3, #15
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4442      	add	r2, r8
 80104fe:	609a      	str	r2, [r3, #8]
}
 8010500:	e7ff      	b.n	8010502 <UART_SetConfig+0x6e2>
 8010502:	bf00      	nop
 8010504:	3714      	adds	r7, #20
 8010506:	46bd      	mov	sp, r7
 8010508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801050c:	40011000 	.word	0x40011000
 8010510:	40011400 	.word	0x40011400
 8010514:	51eb851f 	.word	0x51eb851f

08010518 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010518:	b084      	sub	sp, #16
 801051a:	b480      	push	{r7}
 801051c:	b085      	sub	sp, #20
 801051e:	af00      	add	r7, sp, #0
 8010520:	6078      	str	r0, [r7, #4]
 8010522:	f107 001c 	add.w	r0, r7, #28
 8010526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801052e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010530:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010532:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010536:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010538:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801053a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801053c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 801053e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010542:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010544:	68fa      	ldr	r2, [r7, #12]
 8010546:	4313      	orrs	r3, r2
 8010548:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010552:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	431a      	orrs	r2, r3
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3714      	adds	r7, #20
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	b004      	add	sp, #16
 801056c:	4770      	bx	lr

0801056e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801056e:	b480      	push	{r7}
 8010570:	b083      	sub	sp, #12
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801057c:	4618      	mov	r0, r3
 801057e:	370c      	adds	r7, #12
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr

08010588 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801059c:	2300      	movs	r3, #0
}
 801059e:	4618      	mov	r0, r3
 80105a0:	370c      	adds	r7, #12
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b082      	sub	sp, #8
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2203      	movs	r2, #3
 80105b6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80105b8:	2002      	movs	r0, #2
 80105ba:	f7f9 fbdd 	bl	8009d78 <HAL_Delay>
  
  return HAL_OK;
 80105be:	2300      	movs	r3, #0
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3708      	adds	r7, #8
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80105c8:	b480      	push	{r7}
 80105ca:	b083      	sub	sp, #12
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f003 0303 	and.w	r3, r3, #3
}
 80105d8:	4618      	mov	r0, r3
 80105da:	370c      	adds	r7, #12
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	681a      	ldr	r2, [r3, #0]
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010602:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010608:	431a      	orrs	r2, r3
                       Command->CPSM);
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801060e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	4313      	orrs	r3, r2
 8010614:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	68db      	ldr	r3, [r3, #12]
 801061a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801061e:	f023 030f 	bic.w	r3, r3, #15
 8010622:	68fa      	ldr	r2, [r7, #12]
 8010624:	431a      	orrs	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801062a:	2300      	movs	r3, #0
}
 801062c:	4618      	mov	r0, r3
 801062e:	3714      	adds	r7, #20
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010638:	b480      	push	{r7}
 801063a:	b083      	sub	sp, #12
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	b2db      	uxtb	r3, r3
}
 8010646:	4618      	mov	r0, r3
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010652:	b480      	push	{r7}
 8010654:	b085      	sub	sp, #20
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	3314      	adds	r3, #20
 8010660:	461a      	mov	r2, r3
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	4413      	add	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
}  
 801066c:	4618      	mov	r0, r3
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010678:	b480      	push	{r7}
 801067a:	b085      	sub	sp, #20
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
 8010680:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801069e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80106a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80106aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	4313      	orrs	r3, r2
 80106b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	431a      	orrs	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80106c2:	2300      	movs	r3, #0

}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b088      	sub	sp, #32
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
 80106d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80106de:	2310      	movs	r3, #16
 80106e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106e2:	2340      	movs	r3, #64	; 0x40
 80106e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106e6:	2300      	movs	r3, #0
 80106e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106f0:	f107 0308 	add.w	r3, r7, #8
 80106f4:	4619      	mov	r1, r3
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f7ff ff74 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80106fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010700:	2110      	movs	r1, #16
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 fa40 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801070a:	69fb      	ldr	r3, [r7, #28]
}
 801070c:	4618      	mov	r0, r3
 801070e:	3720      	adds	r7, #32
 8010710:	46bd      	mov	sp, r7
 8010712:	bd80      	pop	{r7, pc}

08010714 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b088      	sub	sp, #32
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010722:	2311      	movs	r3, #17
 8010724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801072a:	2300      	movs	r3, #0
 801072c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010734:	f107 0308 	add.w	r3, r7, #8
 8010738:	4619      	mov	r1, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f7ff ff52 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010740:	f241 3288 	movw	r2, #5000	; 0x1388
 8010744:	2111      	movs	r1, #17
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f000 fa1e 	bl	8010b88 <SDMMC_GetCmdResp1>
 801074c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801074e:	69fb      	ldr	r3, [r7, #28]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3720      	adds	r7, #32
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010766:	2312      	movs	r3, #18
 8010768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801076a:	2340      	movs	r3, #64	; 0x40
 801076c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801076e:	2300      	movs	r3, #0
 8010770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010778:	f107 0308 	add.w	r3, r7, #8
 801077c:	4619      	mov	r1, r3
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7ff ff30 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010784:	f241 3288 	movw	r2, #5000	; 0x1388
 8010788:	2112      	movs	r1, #18
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 f9fc 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010792:	69fb      	ldr	r3, [r7, #28]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3720      	adds	r7, #32
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80107aa:	2318      	movs	r3, #24
 80107ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107ae:	2340      	movs	r3, #64	; 0x40
 80107b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107b2:	2300      	movs	r3, #0
 80107b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107bc:	f107 0308 	add.w	r3, r7, #8
 80107c0:	4619      	mov	r1, r3
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7ff ff0e 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80107c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107cc:	2118      	movs	r1, #24
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f9da 	bl	8010b88 <SDMMC_GetCmdResp1>
 80107d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d6:	69fb      	ldr	r3, [r7, #28]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3720      	adds	r7, #32
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80107ee:	2319      	movs	r3, #25
 80107f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107f2:	2340      	movs	r3, #64	; 0x40
 80107f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107f6:	2300      	movs	r3, #0
 80107f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010800:	f107 0308 	add.w	r3, r7, #8
 8010804:	4619      	mov	r1, r3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff feec 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801080c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010810:	2119      	movs	r1, #25
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f9b8 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801081a:	69fb      	ldr	r3, [r7, #28]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3720      	adds	r7, #32
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b088      	sub	sp, #32
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801082c:	2300      	movs	r3, #0
 801082e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010830:	230c      	movs	r3, #12
 8010832:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010834:	2340      	movs	r3, #64	; 0x40
 8010836:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010838:	2300      	movs	r3, #0
 801083a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801083c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010840:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010842:	f107 0308 	add.w	r3, r7, #8
 8010846:	4619      	mov	r1, r3
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff fecb 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801084e:	4a05      	ldr	r2, [pc, #20]	; (8010864 <SDMMC_CmdStopTransfer+0x40>)
 8010850:	210c      	movs	r1, #12
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f000 f998 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801085a:	69fb      	ldr	r3, [r7, #28]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3720      	adds	r7, #32
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	05f5e100 	.word	0x05f5e100

08010868 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08a      	sub	sp, #40	; 0x28
 801086c:	af00      	add	r7, sp, #0
 801086e:	60f8      	str	r0, [r7, #12]
 8010870:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010878:	2307      	movs	r3, #7
 801087a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801087c:	2340      	movs	r3, #64	; 0x40
 801087e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010880:	2300      	movs	r3, #0
 8010882:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010888:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801088a:	f107 0310 	add.w	r3, r7, #16
 801088e:	4619      	mov	r1, r3
 8010890:	68f8      	ldr	r0, [r7, #12]
 8010892:	f7ff fea7 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010896:	f241 3288 	movw	r2, #5000	; 0x1388
 801089a:	2107      	movs	r1, #7
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f973 	bl	8010b88 <SDMMC_GetCmdResp1>
 80108a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80108a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3728      	adds	r7, #40	; 0x28
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b088      	sub	sp, #32
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80108b6:	2300      	movs	r3, #0
 80108b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80108ba:	2300      	movs	r3, #0
 80108bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80108be:	2300      	movs	r3, #0
 80108c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108c2:	2300      	movs	r3, #0
 80108c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108cc:	f107 0308 	add.w	r3, r7, #8
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fe86 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 f92d 	bl	8010b38 <SDMMC_GetCmdError>
 80108de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108e0:	69fb      	ldr	r3, [r7, #28]
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3720      	adds	r7, #32
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}

080108ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80108ea:	b580      	push	{r7, lr}
 80108ec:	b088      	sub	sp, #32
 80108ee:	af00      	add	r7, sp, #0
 80108f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80108f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80108f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80108f8:	2308      	movs	r3, #8
 80108fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108fc:	2340      	movs	r3, #64	; 0x40
 80108fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010900:	2300      	movs	r3, #0
 8010902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010904:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010908:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801090a:	f107 0308 	add.w	r3, r7, #8
 801090e:	4619      	mov	r1, r3
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f7ff fe67 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fb16 	bl	8010f48 <SDMMC_GetCmdResp7>
 801091c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801091e:	69fb      	ldr	r3, [r7, #28]
}
 8010920:	4618      	mov	r0, r3
 8010922:	3720      	adds	r7, #32
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}

08010928 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b088      	sub	sp, #32
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010936:	2337      	movs	r3, #55	; 0x37
 8010938:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801093a:	2340      	movs	r3, #64	; 0x40
 801093c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801093e:	2300      	movs	r3, #0
 8010940:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010942:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010946:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010948:	f107 0308 	add.w	r3, r7, #8
 801094c:	4619      	mov	r1, r3
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f7ff fe48 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010954:	f241 3288 	movw	r2, #5000	; 0x1388
 8010958:	2137      	movs	r1, #55	; 0x37
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f000 f914 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010960:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010962:	69fb      	ldr	r3, [r7, #28]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3720      	adds	r7, #32
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b088      	sub	sp, #32
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801097c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010982:	2329      	movs	r3, #41	; 0x29
 8010984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010986:	2340      	movs	r3, #64	; 0x40
 8010988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801098a:	2300      	movs	r3, #0
 801098c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801098e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010994:	f107 0308 	add.w	r3, r7, #8
 8010998:	4619      	mov	r1, r3
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff fe22 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 fa23 	bl	8010dec <SDMMC_GetCmdResp3>
 80109a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a8:	69fb      	ldr	r3, [r7, #28]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3720      	adds	r7, #32
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b088      	sub	sp, #32
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
 80109ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80109c0:	2306      	movs	r3, #6
 80109c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109c4:	2340      	movs	r3, #64	; 0x40
 80109c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109c8:	2300      	movs	r3, #0
 80109ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109d2:	f107 0308 	add.w	r3, r7, #8
 80109d6:	4619      	mov	r1, r3
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f7ff fe03 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80109de:	f241 3288 	movw	r2, #5000	; 0x1388
 80109e2:	2106      	movs	r1, #6
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f8cf 	bl	8010b88 <SDMMC_GetCmdResp1>
 80109ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ec:	69fb      	ldr	r3, [r7, #28]
}
 80109ee:	4618      	mov	r0, r3
 80109f0:	3720      	adds	r7, #32
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}

080109f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b088      	sub	sp, #32
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80109fe:	2300      	movs	r3, #0
 8010a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010a02:	2333      	movs	r3, #51	; 0x33
 8010a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a06:	2340      	movs	r3, #64	; 0x40
 8010a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a14:	f107 0308 	add.w	r3, r7, #8
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7ff fde2 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a24:	2133      	movs	r1, #51	; 0x33
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 f8ae 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a2e:	69fb      	ldr	r3, [r7, #28]
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3720      	adds	r7, #32
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b088      	sub	sp, #32
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010a40:	2300      	movs	r3, #0
 8010a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010a44:	2302      	movs	r3, #2
 8010a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a48:	23c0      	movs	r3, #192	; 0xc0
 8010a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a56:	f107 0308 	add.w	r3, r7, #8
 8010a5a:	4619      	mov	r1, r3
 8010a5c:	6878      	ldr	r0, [r7, #4]
 8010a5e:	f7ff fdc1 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 f97c 	bl	8010d60 <SDMMC_GetCmdResp2>
 8010a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a6a:	69fb      	ldr	r3, [r7, #28]
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3720      	adds	r7, #32
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b088      	sub	sp, #32
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010a82:	2309      	movs	r3, #9
 8010a84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010a86:	23c0      	movs	r3, #192	; 0xc0
 8010a88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a92:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a94:	f107 0308 	add.w	r3, r7, #8
 8010a98:	4619      	mov	r1, r3
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f7ff fda2 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f000 f95d 	bl	8010d60 <SDMMC_GetCmdResp2>
 8010aa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa8:	69fb      	ldr	r3, [r7, #28]
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3720      	adds	r7, #32
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b088      	sub	sp, #32
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010abc:	2300      	movs	r3, #0
 8010abe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010ac0:	2303      	movs	r3, #3
 8010ac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ac4:	2340      	movs	r3, #64	; 0x40
 8010ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ac8:	2300      	movs	r3, #0
 8010aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ad0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ad2:	f107 0308 	add.w	r3, r7, #8
 8010ad6:	4619      	mov	r1, r3
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7ff fd83 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010ade:	683a      	ldr	r2, [r7, #0]
 8010ae0:	2103      	movs	r1, #3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f9bc 	bl	8010e60 <SDMMC_GetCmdResp6>
 8010ae8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aea:	69fb      	ldr	r3, [r7, #28]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3720      	adds	r7, #32
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b088      	sub	sp, #32
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010b02:	230d      	movs	r3, #13
 8010b04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b06:	2340      	movs	r3, #64	; 0x40
 8010b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b14:	f107 0308 	add.w	r3, r7, #8
 8010b18:	4619      	mov	r1, r3
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f7ff fd62 	bl	80105e4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b24:	210d      	movs	r1, #13
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f000 f82e 	bl	8010b88 <SDMMC_GetCmdResp1>
 8010b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b2e:	69fb      	ldr	r3, [r7, #28]
}
 8010b30:	4618      	mov	r0, r3
 8010b32:	3720      	adds	r7, #32
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}

08010b38 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010b38:	b490      	push	{r4, r7}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010b40:	4b0f      	ldr	r3, [pc, #60]	; (8010b80 <SDMMC_GetCmdError+0x48>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	4a0f      	ldr	r2, [pc, #60]	; (8010b84 <SDMMC_GetCmdError+0x4c>)
 8010b46:	fba2 2303 	umull	r2, r3, r2, r3
 8010b4a:	0a5b      	lsrs	r3, r3, #9
 8010b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010b54:	4623      	mov	r3, r4
 8010b56:	1e5c      	subs	r4, r3, #1
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d102      	bne.n	8010b62 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010b60:	e009      	b.n	8010b76 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d0f2      	beq.n	8010b54 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	22c5      	movs	r2, #197	; 0xc5
 8010b72:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010b74:	2300      	movs	r3, #0
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3708      	adds	r7, #8
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bc90      	pop	{r4, r7}
 8010b7e:	4770      	bx	lr
 8010b80:	20000000 	.word	0x20000000
 8010b84:	10624dd3 	.word	0x10624dd3

08010b88 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010b88:	b590      	push	{r4, r7, lr}
 8010b8a:	b087      	sub	sp, #28
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	60f8      	str	r0, [r7, #12]
 8010b90:	460b      	mov	r3, r1
 8010b92:	607a      	str	r2, [r7, #4]
 8010b94:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010b96:	4b6f      	ldr	r3, [pc, #444]	; (8010d54 <SDMMC_GetCmdResp1+0x1cc>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a6f      	ldr	r2, [pc, #444]	; (8010d58 <SDMMC_GetCmdResp1+0x1d0>)
 8010b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8010ba0:	0a5b      	lsrs	r3, r3, #9
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ba8:	4623      	mov	r3, r4
 8010baa:	1e5c      	subs	r4, r3, #1
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d102      	bne.n	8010bb6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bb4:	e0c9      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d0f0      	beq.n	8010ba8 <SDMMC_GetCmdResp1+0x20>
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d1eb      	bne.n	8010ba8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bd4:	f003 0304 	and.w	r3, r3, #4
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d004      	beq.n	8010be6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	2204      	movs	r2, #4
 8010be0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010be2:	2304      	movs	r3, #4
 8010be4:	e0b1      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bea:	f003 0301 	and.w	r3, r3, #1
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d004      	beq.n	8010bfc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e0a6      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	22c5      	movs	r2, #197	; 0xc5
 8010c00:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010c02:	68f8      	ldr	r0, [r7, #12]
 8010c04:	f7ff fd18 	bl	8010638 <SDIO_GetCommandResponse>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	7afb      	ldrb	r3, [r7, #11]
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d001      	beq.n	8010c16 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c12:	2301      	movs	r3, #1
 8010c14:	e099      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010c16:	2100      	movs	r1, #0
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f7ff fd1a 	bl	8010652 <SDIO_GetResponse>
 8010c1e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	4b4e      	ldr	r3, [pc, #312]	; (8010d5c <SDMMC_GetCmdResp1+0x1d4>)
 8010c24:	4013      	ands	r3, r2
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d101      	bne.n	8010c2e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	e08d      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	da02      	bge.n	8010c3a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010c38:	e087      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d001      	beq.n	8010c48 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010c44:	2340      	movs	r3, #64	; 0x40
 8010c46:	e080      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d001      	beq.n	8010c56 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010c52:	2380      	movs	r3, #128	; 0x80
 8010c54:	e079      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d002      	beq.n	8010c66 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010c60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c64:	e071      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010c66:	693b      	ldr	r3, [r7, #16]
 8010c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d002      	beq.n	8010c76 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c74:	e069      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c84:	e061      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d002      	beq.n	8010c96 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010c94:	e059      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ca4:	e051      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010cb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010cb4:	e049      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010cc4:	e041      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d002      	beq.n	8010cd6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010cd4:	e039      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010ce4:	e031      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010ce6:	693b      	ldr	r3, [r7, #16]
 8010ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d002      	beq.n	8010cf6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010cf0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010cf4:	e029      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d04:	e021      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010d10:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010d14:	e019      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010d20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d24:	e011      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d34:	e009      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	f003 0308 	and.w	r3, r3, #8
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010d40:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010d44:	e001      	b.n	8010d4a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	371c      	adds	r7, #28
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd90      	pop	{r4, r7, pc}
 8010d52:	bf00      	nop
 8010d54:	20000000 	.word	0x20000000
 8010d58:	10624dd3 	.word	0x10624dd3
 8010d5c:	fdffe008 	.word	0xfdffe008

08010d60 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010d60:	b490      	push	{r4, r7}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d68:	4b1e      	ldr	r3, [pc, #120]	; (8010de4 <SDMMC_GetCmdResp2+0x84>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a1e      	ldr	r2, [pc, #120]	; (8010de8 <SDMMC_GetCmdResp2+0x88>)
 8010d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8010d72:	0a5b      	lsrs	r3, r3, #9
 8010d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d78:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d7c:	4623      	mov	r3, r4
 8010d7e:	1e5c      	subs	r4, r3, #1
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d102      	bne.n	8010d8a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d88:	e026      	b.n	8010dd8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d8e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d0f0      	beq.n	8010d7c <SDMMC_GetCmdResp2+0x1c>
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d1eb      	bne.n	8010d7c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da8:	f003 0304 	and.w	r3, r3, #4
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d004      	beq.n	8010dba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2204      	movs	r2, #4
 8010db4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010db6:	2304      	movs	r3, #4
 8010db8:	e00e      	b.n	8010dd8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dbe:	f003 0301 	and.w	r3, r3, #1
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d004      	beq.n	8010dd0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dcc:	2301      	movs	r3, #1
 8010dce:	e003      	b.n	8010dd8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	22c5      	movs	r2, #197	; 0xc5
 8010dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3710      	adds	r7, #16
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bc90      	pop	{r4, r7}
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	20000000 	.word	0x20000000
 8010de8:	10624dd3 	.word	0x10624dd3

08010dec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010dec:	b490      	push	{r4, r7}
 8010dee:	b084      	sub	sp, #16
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010df4:	4b18      	ldr	r3, [pc, #96]	; (8010e58 <SDMMC_GetCmdResp3+0x6c>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4a18      	ldr	r2, [pc, #96]	; (8010e5c <SDMMC_GetCmdResp3+0x70>)
 8010dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8010dfe:	0a5b      	lsrs	r3, r3, #9
 8010e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e04:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e08:	4623      	mov	r3, r4
 8010e0a:	1e5c      	subs	r4, r3, #1
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d102      	bne.n	8010e16 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e14:	e01b      	b.n	8010e4e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e1a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d0f0      	beq.n	8010e08 <SDMMC_GetCmdResp3+0x1c>
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d1eb      	bne.n	8010e08 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e34:	f003 0304 	and.w	r3, r3, #4
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d004      	beq.n	8010e46 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2204      	movs	r2, #4
 8010e40:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e42:	2304      	movs	r3, #4
 8010e44:	e003      	b.n	8010e4e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	22c5      	movs	r2, #197	; 0xc5
 8010e4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e4c:	2300      	movs	r3, #0
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3710      	adds	r7, #16
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bc90      	pop	{r4, r7}
 8010e56:	4770      	bx	lr
 8010e58:	20000000 	.word	0x20000000
 8010e5c:	10624dd3 	.word	0x10624dd3

08010e60 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010e60:	b590      	push	{r4, r7, lr}
 8010e62:	b087      	sub	sp, #28
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	607a      	str	r2, [r7, #4]
 8010e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e6e:	4b34      	ldr	r3, [pc, #208]	; (8010f40 <SDMMC_GetCmdResp6+0xe0>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	4a34      	ldr	r2, [pc, #208]	; (8010f44 <SDMMC_GetCmdResp6+0xe4>)
 8010e74:	fba2 2303 	umull	r2, r3, r2, r3
 8010e78:	0a5b      	lsrs	r3, r3, #9
 8010e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e7e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e82:	4623      	mov	r3, r4
 8010e84:	1e5c      	subs	r4, r3, #1
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d102      	bne.n	8010e90 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e8e:	e052      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e94:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d0f0      	beq.n	8010e82 <SDMMC_GetCmdResp6+0x22>
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d1eb      	bne.n	8010e82 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eae:	f003 0304 	and.w	r3, r3, #4
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d004      	beq.n	8010ec0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2204      	movs	r2, #4
 8010eba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ebc:	2304      	movs	r3, #4
 8010ebe:	e03a      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ec4:	f003 0301 	and.w	r3, r3, #1
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d004      	beq.n	8010ed6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e02f      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010ed6:	68f8      	ldr	r0, [r7, #12]
 8010ed8:	f7ff fbae 	bl	8010638 <SDIO_GetCommandResponse>
 8010edc:	4603      	mov	r3, r0
 8010ede:	461a      	mov	r2, r3
 8010ee0:	7afb      	ldrb	r3, [r7, #11]
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d001      	beq.n	8010eea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e025      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	22c5      	movs	r2, #197	; 0xc5
 8010eee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7ff fbad 	bl	8010652 <SDIO_GetResponse>
 8010ef8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d106      	bne.n	8010f12 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	0c1b      	lsrs	r3, r3, #16
 8010f08:	b29a      	uxth	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010f0e:	2300      	movs	r3, #0
 8010f10:	e011      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d002      	beq.n	8010f22 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f20:	e009      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d002      	beq.n	8010f32 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f30:	e001      	b.n	8010f36 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd90      	pop	{r4, r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	20000000 	.word	0x20000000
 8010f44:	10624dd3 	.word	0x10624dd3

08010f48 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010f48:	b490      	push	{r4, r7}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f50:	4b21      	ldr	r3, [pc, #132]	; (8010fd8 <SDMMC_GetCmdResp7+0x90>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	4a21      	ldr	r2, [pc, #132]	; (8010fdc <SDMMC_GetCmdResp7+0x94>)
 8010f56:	fba2 2303 	umull	r2, r3, r2, r3
 8010f5a:	0a5b      	lsrs	r3, r3, #9
 8010f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f64:	4623      	mov	r3, r4
 8010f66:	1e5c      	subs	r4, r3, #1
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d102      	bne.n	8010f72 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f70:	e02c      	b.n	8010fcc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d0f0      	beq.n	8010f64 <SDMMC_GetCmdResp7+0x1c>
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d1eb      	bne.n	8010f64 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f90:	f003 0304 	and.w	r3, r3, #4
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d004      	beq.n	8010fa2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2204      	movs	r2, #4
 8010f9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f9e:	2304      	movs	r3, #4
 8010fa0:	e014      	b.n	8010fcc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d004      	beq.n	8010fb8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2201      	movs	r2, #1
 8010fb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	e009      	b.n	8010fcc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2240      	movs	r2, #64	; 0x40
 8010fc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010fca:	2300      	movs	r3, #0
  
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bc90      	pop	{r4, r7}
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	20000000 	.word	0x20000000
 8010fdc:	10624dd3 	.word	0x10624dd3

08010fe0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010fe4:	4904      	ldr	r1, [pc, #16]	; (8010ff8 <MX_FATFS_Init+0x18>)
 8010fe6:	4805      	ldr	r0, [pc, #20]	; (8010ffc <MX_FATFS_Init+0x1c>)
 8010fe8:	f003 fb9c 	bl	8014724 <FATFS_LinkDriver>
 8010fec:	4603      	mov	r3, r0
 8010fee:	461a      	mov	r2, r3
 8010ff0:	4b03      	ldr	r3, [pc, #12]	; (8011000 <MX_FATFS_Init+0x20>)
 8010ff2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ff4:	bf00      	nop
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	20044c30 	.word	0x20044c30
 8010ffc:	0801a078 	.word	0x0801a078
 8011000:	20044c2c 	.word	0x20044c2c

08011004 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801100e:	f000 f896 	bl	801113e <BSP_SD_IsDetected>
 8011012:	4603      	mov	r3, r0
 8011014:	2b01      	cmp	r3, #1
 8011016:	d001      	beq.n	801101c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011018:	2301      	movs	r3, #1
 801101a:	e012      	b.n	8011042 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801101c:	480b      	ldr	r0, [pc, #44]	; (801104c <BSP_SD_Init+0x48>)
 801101e:	f7fb ffa5 	bl	800cf6c <HAL_SD_Init>
 8011022:	4603      	mov	r3, r0
 8011024:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011026:	79fb      	ldrb	r3, [r7, #7]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d109      	bne.n	8011040 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801102c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011030:	4806      	ldr	r0, [pc, #24]	; (801104c <BSP_SD_Init+0x48>)
 8011032:	f7fc fd4f 	bl	800dad4 <HAL_SD_ConfigWideBusOperation>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	d001      	beq.n	8011040 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801103c:	2301      	movs	r3, #1
 801103e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011040:	79fb      	ldrb	r3, [r7, #7]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3708      	adds	r7, #8
 8011046:	46bd      	mov	sp, r7
 8011048:	bd80      	pop	{r7, pc}
 801104a:	bf00      	nop
 801104c:	20044a2c 	.word	0x20044a2c

08011050 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801105c:	2300      	movs	r3, #0
 801105e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	68f9      	ldr	r1, [r7, #12]
 8011066:	4806      	ldr	r0, [pc, #24]	; (8011080 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011068:	f7fc f810 	bl	800d08c <HAL_SD_ReadBlocks_DMA>
 801106c:	4603      	mov	r3, r0
 801106e:	2b00      	cmp	r3, #0
 8011070:	d001      	beq.n	8011076 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011072:	2301      	movs	r3, #1
 8011074:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011076:	7dfb      	ldrb	r3, [r7, #23]
}
 8011078:	4618      	mov	r0, r3
 801107a:	3718      	adds	r7, #24
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}
 8011080:	20044a2c 	.word	0x20044a2c

08011084 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011090:	2300      	movs	r3, #0
 8011092:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	68ba      	ldr	r2, [r7, #8]
 8011098:	68f9      	ldr	r1, [r7, #12]
 801109a:	4806      	ldr	r0, [pc, #24]	; (80110b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801109c:	f7fc f8de 	bl	800d25c <HAL_SD_WriteBlocks_DMA>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d001      	beq.n	80110aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80110a6:	2301      	movs	r3, #1
 80110a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ac:	4618      	mov	r0, r3
 80110ae:	3718      	adds	r7, #24
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	20044a2c 	.word	0x20044a2c

080110b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80110bc:	4805      	ldr	r0, [pc, #20]	; (80110d4 <BSP_SD_GetCardState+0x1c>)
 80110be:	f7fc fd85 	bl	800dbcc <HAL_SD_GetCardState>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b04      	cmp	r3, #4
 80110c6:	bf14      	ite	ne
 80110c8:	2301      	movne	r3, #1
 80110ca:	2300      	moveq	r3, #0
 80110cc:	b2db      	uxtb	r3, r3
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	20044a2c 	.word	0x20044a2c

080110d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b082      	sub	sp, #8
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80110e0:	6879      	ldr	r1, [r7, #4]
 80110e2:	4803      	ldr	r0, [pc, #12]	; (80110f0 <BSP_SD_GetCardInfo+0x18>)
 80110e4:	f7fc fcca 	bl	800da7c <HAL_SD_GetCardInfo>
}
 80110e8:	bf00      	nop
 80110ea:	3708      	adds	r7, #8
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	20044a2c 	.word	0x20044a2c

080110f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80110fc:	f000 f818 	bl	8011130 <BSP_SD_AbortCallback>
}
 8011100:	bf00      	nop
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}

08011108 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011110:	f000 f9a8 	bl	8011464 <BSP_SD_WriteCpltCallback>
}
 8011114:	bf00      	nop
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}

0801111c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011124:	f000 f9aa 	bl	801147c <BSP_SD_ReadCpltCallback>
}
 8011128:	bf00      	nop
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011130:	b480      	push	{r7}
 8011132:	af00      	add	r7, sp, #0

}
 8011134:	bf00      	nop
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr

0801113e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b082      	sub	sp, #8
 8011142:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011144:	2301      	movs	r3, #1
 8011146:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011148:	f000 f80c 	bl	8011164 <BSP_PlatformIsDetected>
 801114c:	4603      	mov	r3, r0
 801114e:	2b00      	cmp	r3, #0
 8011150:	d101      	bne.n	8011156 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011152:	2300      	movs	r3, #0
 8011154:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011156:	79fb      	ldrb	r3, [r7, #7]
 8011158:	b2db      	uxtb	r3, r3
}
 801115a:	4618      	mov	r0, r3
 801115c:	3708      	adds	r7, #8
 801115e:	46bd      	mov	sp, r7
 8011160:	bd80      	pop	{r7, pc}
	...

08011164 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011164:	b580      	push	{r7, lr}
 8011166:	b082      	sub	sp, #8
 8011168:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801116a:	2301      	movs	r3, #1
 801116c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801116e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011172:	4806      	ldr	r0, [pc, #24]	; (801118c <BSP_PlatformIsDetected+0x28>)
 8011174:	f7fa f87e 	bl	800b274 <HAL_GPIO_ReadPin>
 8011178:	4603      	mov	r3, r0
 801117a:	2b00      	cmp	r3, #0
 801117c:	d001      	beq.n	8011182 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801117e:	2300      	movs	r3, #0
 8011180:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011182:	79fb      	ldrb	r3, [r7, #7]
}
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	40020000 	.word	0x40020000

08011190 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b084      	sub	sp, #16
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011198:	f7f8 fde2 	bl	8009d60 <HAL_GetTick>
 801119c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801119e:	e006      	b.n	80111ae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80111a0:	f7ff ff8a 	bl	80110b8 <BSP_SD_GetCardState>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d101      	bne.n	80111ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80111aa:	2300      	movs	r3, #0
 80111ac:	e009      	b.n	80111c2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80111ae:	f7f8 fdd7 	bl	8009d60 <HAL_GetTick>
 80111b2:	4602      	mov	r2, r0
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	1ad3      	subs	r3, r2, r3
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d8f0      	bhi.n	80111a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80111be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
	...

080111cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	4603      	mov	r3, r0
 80111d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80111d6:	4b0b      	ldr	r3, [pc, #44]	; (8011204 <SD_CheckStatus+0x38>)
 80111d8:	2201      	movs	r2, #1
 80111da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80111dc:	f7ff ff6c 	bl	80110b8 <BSP_SD_GetCardState>
 80111e0:	4603      	mov	r3, r0
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d107      	bne.n	80111f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80111e6:	4b07      	ldr	r3, [pc, #28]	; (8011204 <SD_CheckStatus+0x38>)
 80111e8:	781b      	ldrb	r3, [r3, #0]
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	f023 0301 	bic.w	r3, r3, #1
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	4b04      	ldr	r3, [pc, #16]	; (8011204 <SD_CheckStatus+0x38>)
 80111f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80111f6:	4b03      	ldr	r3, [pc, #12]	; (8011204 <SD_CheckStatus+0x38>)
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	b2db      	uxtb	r3, r3
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3708      	adds	r7, #8
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}
 8011204:	20000009 	.word	0x20000009

08011208 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	4603      	mov	r3, r0
 8011210:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011212:	f7ff fef7 	bl	8011004 <BSP_SD_Init>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d107      	bne.n	801122c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801121c:	79fb      	ldrb	r3, [r7, #7]
 801121e:	4618      	mov	r0, r3
 8011220:	f7ff ffd4 	bl	80111cc <SD_CheckStatus>
 8011224:	4603      	mov	r3, r0
 8011226:	461a      	mov	r2, r3
 8011228:	4b04      	ldr	r3, [pc, #16]	; (801123c <SD_initialize+0x34>)
 801122a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801122c:	4b03      	ldr	r3, [pc, #12]	; (801123c <SD_initialize+0x34>)
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	b2db      	uxtb	r3, r3
}
 8011232:	4618      	mov	r0, r3
 8011234:	3708      	adds	r7, #8
 8011236:	46bd      	mov	sp, r7
 8011238:	bd80      	pop	{r7, pc}
 801123a:	bf00      	nop
 801123c:	20000009 	.word	0x20000009

08011240 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	b082      	sub	sp, #8
 8011244:	af00      	add	r7, sp, #0
 8011246:	4603      	mov	r3, r0
 8011248:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801124a:	79fb      	ldrb	r3, [r7, #7]
 801124c:	4618      	mov	r0, r3
 801124e:	f7ff ffbd 	bl	80111cc <SD_CheckStatus>
 8011252:	4603      	mov	r3, r0
}
 8011254:	4618      	mov	r0, r3
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}

0801125c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af00      	add	r7, sp, #0
 8011262:	60b9      	str	r1, [r7, #8]
 8011264:	607a      	str	r2, [r7, #4]
 8011266:	603b      	str	r3, [r7, #0]
 8011268:	4603      	mov	r3, r0
 801126a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801126c:	2301      	movs	r3, #1
 801126e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011270:	f247 5030 	movw	r0, #30000	; 0x7530
 8011274:	f7ff ff8c 	bl	8011190 <SD_CheckStatusWithTimeout>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	da01      	bge.n	8011282 <SD_read+0x26>
  {
    return res;
 801127e:	7dfb      	ldrb	r3, [r7, #23]
 8011280:	e03b      	b.n	80112fa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011282:	683a      	ldr	r2, [r7, #0]
 8011284:	6879      	ldr	r1, [r7, #4]
 8011286:	68b8      	ldr	r0, [r7, #8]
 8011288:	f7ff fee2 	bl	8011050 <BSP_SD_ReadBlocks_DMA>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	d132      	bne.n	80112f8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011292:	4b1c      	ldr	r3, [pc, #112]	; (8011304 <SD_read+0xa8>)
 8011294:	2200      	movs	r2, #0
 8011296:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011298:	f7f8 fd62 	bl	8009d60 <HAL_GetTick>
 801129c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801129e:	bf00      	nop
 80112a0:	4b18      	ldr	r3, [pc, #96]	; (8011304 <SD_read+0xa8>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d108      	bne.n	80112ba <SD_read+0x5e>
 80112a8:	f7f8 fd5a 	bl	8009d60 <HAL_GetTick>
 80112ac:	4602      	mov	r2, r0
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d9f2      	bls.n	80112a0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80112ba:	4b12      	ldr	r3, [pc, #72]	; (8011304 <SD_read+0xa8>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d102      	bne.n	80112c8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80112c2:	2301      	movs	r3, #1
 80112c4:	75fb      	strb	r3, [r7, #23]
 80112c6:	e017      	b.n	80112f8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80112c8:	4b0e      	ldr	r3, [pc, #56]	; (8011304 <SD_read+0xa8>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80112ce:	f7f8 fd47 	bl	8009d60 <HAL_GetTick>
 80112d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112d4:	e007      	b.n	80112e6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112d6:	f7ff feef 	bl	80110b8 <BSP_SD_GetCardState>
 80112da:	4603      	mov	r3, r0
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d102      	bne.n	80112e6 <SD_read+0x8a>
          {
            res = RES_OK;
 80112e0:	2300      	movs	r3, #0
 80112e2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80112e4:	e008      	b.n	80112f8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112e6:	f7f8 fd3b 	bl	8009d60 <HAL_GetTick>
 80112ea:	4602      	mov	r2, r0
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	1ad3      	subs	r3, r2, r3
 80112f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80112f4:	4293      	cmp	r3, r2
 80112f6:	d9ee      	bls.n	80112d6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80112f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3718      	adds	r7, #24
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	200422c8 	.word	0x200422c8

08011308 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af00      	add	r7, sp, #0
 801130e:	60b9      	str	r1, [r7, #8]
 8011310:	607a      	str	r2, [r7, #4]
 8011312:	603b      	str	r3, [r7, #0]
 8011314:	4603      	mov	r3, r0
 8011316:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011318:	2301      	movs	r3, #1
 801131a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801131c:	4b24      	ldr	r3, [pc, #144]	; (80113b0 <SD_write+0xa8>)
 801131e:	2200      	movs	r2, #0
 8011320:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011322:	f247 5030 	movw	r0, #30000	; 0x7530
 8011326:	f7ff ff33 	bl	8011190 <SD_CheckStatusWithTimeout>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	da01      	bge.n	8011334 <SD_write+0x2c>
  {
    return res;
 8011330:	7dfb      	ldrb	r3, [r7, #23]
 8011332:	e038      	b.n	80113a6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011334:	683a      	ldr	r2, [r7, #0]
 8011336:	6879      	ldr	r1, [r7, #4]
 8011338:	68b8      	ldr	r0, [r7, #8]
 801133a:	f7ff fea3 	bl	8011084 <BSP_SD_WriteBlocks_DMA>
 801133e:	4603      	mov	r3, r0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d12f      	bne.n	80113a4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011344:	f7f8 fd0c 	bl	8009d60 <HAL_GetTick>
 8011348:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801134a:	bf00      	nop
 801134c:	4b18      	ldr	r3, [pc, #96]	; (80113b0 <SD_write+0xa8>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d108      	bne.n	8011366 <SD_write+0x5e>
 8011354:	f7f8 fd04 	bl	8009d60 <HAL_GetTick>
 8011358:	4602      	mov	r2, r0
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011362:	4293      	cmp	r3, r2
 8011364:	d9f2      	bls.n	801134c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011366:	4b12      	ldr	r3, [pc, #72]	; (80113b0 <SD_write+0xa8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d102      	bne.n	8011374 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801136e:	2301      	movs	r3, #1
 8011370:	75fb      	strb	r3, [r7, #23]
 8011372:	e017      	b.n	80113a4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011374:	4b0e      	ldr	r3, [pc, #56]	; (80113b0 <SD_write+0xa8>)
 8011376:	2200      	movs	r2, #0
 8011378:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801137a:	f7f8 fcf1 	bl	8009d60 <HAL_GetTick>
 801137e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011380:	e007      	b.n	8011392 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011382:	f7ff fe99 	bl	80110b8 <BSP_SD_GetCardState>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d102      	bne.n	8011392 <SD_write+0x8a>
          {
            res = RES_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	75fb      	strb	r3, [r7, #23]
            break;
 8011390:	e008      	b.n	80113a4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011392:	f7f8 fce5 	bl	8009d60 <HAL_GetTick>
 8011396:	4602      	mov	r2, r0
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	1ad3      	subs	r3, r2, r3
 801139c:	f247 522f 	movw	r2, #29999	; 0x752f
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d9ee      	bls.n	8011382 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80113a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80113a6:	4618      	mov	r0, r3
 80113a8:	3718      	adds	r7, #24
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	200422c4 	.word	0x200422c4

080113b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b08c      	sub	sp, #48	; 0x30
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	4603      	mov	r3, r0
 80113bc:	603a      	str	r2, [r7, #0]
 80113be:	71fb      	strb	r3, [r7, #7]
 80113c0:	460b      	mov	r3, r1
 80113c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80113c4:	2301      	movs	r3, #1
 80113c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80113ca:	4b25      	ldr	r3, [pc, #148]	; (8011460 <SD_ioctl+0xac>)
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	b2db      	uxtb	r3, r3
 80113d0:	f003 0301 	and.w	r3, r3, #1
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d001      	beq.n	80113dc <SD_ioctl+0x28>
 80113d8:	2303      	movs	r3, #3
 80113da:	e03c      	b.n	8011456 <SD_ioctl+0xa2>

  switch (cmd)
 80113dc:	79bb      	ldrb	r3, [r7, #6]
 80113de:	2b03      	cmp	r3, #3
 80113e0:	d834      	bhi.n	801144c <SD_ioctl+0x98>
 80113e2:	a201      	add	r2, pc, #4	; (adr r2, 80113e8 <SD_ioctl+0x34>)
 80113e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e8:	080113f9 	.word	0x080113f9
 80113ec:	08011401 	.word	0x08011401
 80113f0:	08011419 	.word	0x08011419
 80113f4:	08011433 	.word	0x08011433
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113fe:	e028      	b.n	8011452 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011400:	f107 030c 	add.w	r3, r7, #12
 8011404:	4618      	mov	r0, r3
 8011406:	f7ff fe67 	bl	80110d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801140a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011410:	2300      	movs	r3, #0
 8011412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011416:	e01c      	b.n	8011452 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011418:	f107 030c 	add.w	r3, r7, #12
 801141c:	4618      	mov	r0, r3
 801141e:	f7ff fe5b 	bl	80110d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011424:	b29a      	uxth	r2, r3
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801142a:	2300      	movs	r3, #0
 801142c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011430:	e00f      	b.n	8011452 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011432:	f107 030c 	add.w	r3, r7, #12
 8011436:	4618      	mov	r0, r3
 8011438:	f7ff fe4e 	bl	80110d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143e:	0a5a      	lsrs	r2, r3, #9
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011444:	2300      	movs	r3, #0
 8011446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801144a:	e002      	b.n	8011452 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801144c:	2304      	movs	r3, #4
 801144e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011456:	4618      	mov	r0, r3
 8011458:	3730      	adds	r7, #48	; 0x30
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	20000009 	.word	0x20000009

08011464 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011464:	b480      	push	{r7}
 8011466:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011468:	4b03      	ldr	r3, [pc, #12]	; (8011478 <BSP_SD_WriteCpltCallback+0x14>)
 801146a:	2201      	movs	r2, #1
 801146c:	601a      	str	r2, [r3, #0]
}
 801146e:	bf00      	nop
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr
 8011478:	200422c4 	.word	0x200422c4

0801147c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801147c:	b480      	push	{r7}
 801147e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011480:	4b03      	ldr	r3, [pc, #12]	; (8011490 <BSP_SD_ReadCpltCallback+0x14>)
 8011482:	2201      	movs	r2, #1
 8011484:	601a      	str	r2, [r3, #0]
}
 8011486:	bf00      	nop
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr
 8011490:	200422c8 	.word	0x200422c8

08011494 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	4603      	mov	r3, r0
 801149c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801149e:	79fb      	ldrb	r3, [r7, #7]
 80114a0:	4a08      	ldr	r2, [pc, #32]	; (80114c4 <disk_status+0x30>)
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	685b      	ldr	r3, [r3, #4]
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	79fa      	ldrb	r2, [r7, #7]
 80114ac:	4905      	ldr	r1, [pc, #20]	; (80114c4 <disk_status+0x30>)
 80114ae:	440a      	add	r2, r1
 80114b0:	7a12      	ldrb	r2, [r2, #8]
 80114b2:	4610      	mov	r0, r2
 80114b4:	4798      	blx	r3
 80114b6:	4603      	mov	r3, r0
 80114b8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80114ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3710      	adds	r7, #16
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	200422f4 	.word	0x200422f4

080114c8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b084      	sub	sp, #16
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	4603      	mov	r3, r0
 80114d0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80114d2:	2300      	movs	r3, #0
 80114d4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80114d6:	79fb      	ldrb	r3, [r7, #7]
 80114d8:	4a0d      	ldr	r2, [pc, #52]	; (8011510 <disk_initialize+0x48>)
 80114da:	5cd3      	ldrb	r3, [r2, r3]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d111      	bne.n	8011504 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80114e0:	79fb      	ldrb	r3, [r7, #7]
 80114e2:	4a0b      	ldr	r2, [pc, #44]	; (8011510 <disk_initialize+0x48>)
 80114e4:	2101      	movs	r1, #1
 80114e6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80114e8:	79fb      	ldrb	r3, [r7, #7]
 80114ea:	4a09      	ldr	r2, [pc, #36]	; (8011510 <disk_initialize+0x48>)
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	4413      	add	r3, r2
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	79fa      	ldrb	r2, [r7, #7]
 80114f6:	4906      	ldr	r1, [pc, #24]	; (8011510 <disk_initialize+0x48>)
 80114f8:	440a      	add	r2, r1
 80114fa:	7a12      	ldrb	r2, [r2, #8]
 80114fc:	4610      	mov	r0, r2
 80114fe:	4798      	blx	r3
 8011500:	4603      	mov	r3, r0
 8011502:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011504:	7bfb      	ldrb	r3, [r7, #15]
}
 8011506:	4618      	mov	r0, r3
 8011508:	3710      	adds	r7, #16
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	200422f4 	.word	0x200422f4

08011514 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011514:	b590      	push	{r4, r7, lr}
 8011516:	b087      	sub	sp, #28
 8011518:	af00      	add	r7, sp, #0
 801151a:	60b9      	str	r1, [r7, #8]
 801151c:	607a      	str	r2, [r7, #4]
 801151e:	603b      	str	r3, [r7, #0]
 8011520:	4603      	mov	r3, r0
 8011522:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011524:	7bfb      	ldrb	r3, [r7, #15]
 8011526:	4a0a      	ldr	r2, [pc, #40]	; (8011550 <disk_read+0x3c>)
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	4413      	add	r3, r2
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	689c      	ldr	r4, [r3, #8]
 8011530:	7bfb      	ldrb	r3, [r7, #15]
 8011532:	4a07      	ldr	r2, [pc, #28]	; (8011550 <disk_read+0x3c>)
 8011534:	4413      	add	r3, r2
 8011536:	7a18      	ldrb	r0, [r3, #8]
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	68b9      	ldr	r1, [r7, #8]
 801153e:	47a0      	blx	r4
 8011540:	4603      	mov	r3, r0
 8011542:	75fb      	strb	r3, [r7, #23]
  return res;
 8011544:	7dfb      	ldrb	r3, [r7, #23]
}
 8011546:	4618      	mov	r0, r3
 8011548:	371c      	adds	r7, #28
 801154a:	46bd      	mov	sp, r7
 801154c:	bd90      	pop	{r4, r7, pc}
 801154e:	bf00      	nop
 8011550:	200422f4 	.word	0x200422f4

08011554 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011554:	b590      	push	{r4, r7, lr}
 8011556:	b087      	sub	sp, #28
 8011558:	af00      	add	r7, sp, #0
 801155a:	60b9      	str	r1, [r7, #8]
 801155c:	607a      	str	r2, [r7, #4]
 801155e:	603b      	str	r3, [r7, #0]
 8011560:	4603      	mov	r3, r0
 8011562:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011564:	7bfb      	ldrb	r3, [r7, #15]
 8011566:	4a0a      	ldr	r2, [pc, #40]	; (8011590 <disk_write+0x3c>)
 8011568:	009b      	lsls	r3, r3, #2
 801156a:	4413      	add	r3, r2
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	68dc      	ldr	r4, [r3, #12]
 8011570:	7bfb      	ldrb	r3, [r7, #15]
 8011572:	4a07      	ldr	r2, [pc, #28]	; (8011590 <disk_write+0x3c>)
 8011574:	4413      	add	r3, r2
 8011576:	7a18      	ldrb	r0, [r3, #8]
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	687a      	ldr	r2, [r7, #4]
 801157c:	68b9      	ldr	r1, [r7, #8]
 801157e:	47a0      	blx	r4
 8011580:	4603      	mov	r3, r0
 8011582:	75fb      	strb	r3, [r7, #23]
  return res;
 8011584:	7dfb      	ldrb	r3, [r7, #23]
}
 8011586:	4618      	mov	r0, r3
 8011588:	371c      	adds	r7, #28
 801158a:	46bd      	mov	sp, r7
 801158c:	bd90      	pop	{r4, r7, pc}
 801158e:	bf00      	nop
 8011590:	200422f4 	.word	0x200422f4

08011594 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b084      	sub	sp, #16
 8011598:	af00      	add	r7, sp, #0
 801159a:	4603      	mov	r3, r0
 801159c:	603a      	str	r2, [r7, #0]
 801159e:	71fb      	strb	r3, [r7, #7]
 80115a0:	460b      	mov	r3, r1
 80115a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80115a4:	79fb      	ldrb	r3, [r7, #7]
 80115a6:	4a09      	ldr	r2, [pc, #36]	; (80115cc <disk_ioctl+0x38>)
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	4413      	add	r3, r2
 80115ac:	685b      	ldr	r3, [r3, #4]
 80115ae:	691b      	ldr	r3, [r3, #16]
 80115b0:	79fa      	ldrb	r2, [r7, #7]
 80115b2:	4906      	ldr	r1, [pc, #24]	; (80115cc <disk_ioctl+0x38>)
 80115b4:	440a      	add	r2, r1
 80115b6:	7a10      	ldrb	r0, [r2, #8]
 80115b8:	79b9      	ldrb	r1, [r7, #6]
 80115ba:	683a      	ldr	r2, [r7, #0]
 80115bc:	4798      	blx	r3
 80115be:	4603      	mov	r3, r0
 80115c0:	73fb      	strb	r3, [r7, #15]
  return res;
 80115c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3710      	adds	r7, #16
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	200422f4 	.word	0x200422f4

080115d0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80115d0:	b480      	push	{r7}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	3301      	adds	r3, #1
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80115e0:	89fb      	ldrh	r3, [r7, #14]
 80115e2:	021b      	lsls	r3, r3, #8
 80115e4:	b21a      	sxth	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	781b      	ldrb	r3, [r3, #0]
 80115ea:	b21b      	sxth	r3, r3
 80115ec:	4313      	orrs	r3, r2
 80115ee:	b21b      	sxth	r3, r3
 80115f0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80115f2:	89fb      	ldrh	r3, [r7, #14]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011600:	b480      	push	{r7}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	3303      	adds	r3, #3
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	021b      	lsls	r3, r3, #8
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	3202      	adds	r2, #2
 8011618:	7812      	ldrb	r2, [r2, #0]
 801161a:	4313      	orrs	r3, r2
 801161c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	021b      	lsls	r3, r3, #8
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	3201      	adds	r2, #1
 8011626:	7812      	ldrb	r2, [r2, #0]
 8011628:	4313      	orrs	r3, r2
 801162a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	021b      	lsls	r3, r3, #8
 8011630:	687a      	ldr	r2, [r7, #4]
 8011632:	7812      	ldrb	r2, [r2, #0]
 8011634:	4313      	orrs	r3, r2
 8011636:	60fb      	str	r3, [r7, #12]
	return rv;
 8011638:	68fb      	ldr	r3, [r7, #12]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3714      	adds	r7, #20
 801163e:	46bd      	mov	sp, r7
 8011640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011644:	4770      	bx	lr

08011646 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011646:	b480      	push	{r7}
 8011648:	b083      	sub	sp, #12
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
 801164e:	460b      	mov	r3, r1
 8011650:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	1c5a      	adds	r2, r3, #1
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	887a      	ldrh	r2, [r7, #2]
 801165a:	b2d2      	uxtb	r2, r2
 801165c:	701a      	strb	r2, [r3, #0]
 801165e:	887b      	ldrh	r3, [r7, #2]
 8011660:	0a1b      	lsrs	r3, r3, #8
 8011662:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	1c5a      	adds	r2, r3, #1
 8011668:	607a      	str	r2, [r7, #4]
 801166a:	887a      	ldrh	r2, [r7, #2]
 801166c:	b2d2      	uxtb	r2, r2
 801166e:	701a      	strb	r2, [r3, #0]
}
 8011670:	bf00      	nop
 8011672:	370c      	adds	r7, #12
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801167c:	b480      	push	{r7}
 801167e:	b083      	sub	sp, #12
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	1c5a      	adds	r2, r3, #1
 801168a:	607a      	str	r2, [r7, #4]
 801168c:	683a      	ldr	r2, [r7, #0]
 801168e:	b2d2      	uxtb	r2, r2
 8011690:	701a      	strb	r2, [r3, #0]
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	0a1b      	lsrs	r3, r3, #8
 8011696:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	1c5a      	adds	r2, r3, #1
 801169c:	607a      	str	r2, [r7, #4]
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	b2d2      	uxtb	r2, r2
 80116a2:	701a      	strb	r2, [r3, #0]
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	0a1b      	lsrs	r3, r3, #8
 80116a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	683a      	ldr	r2, [r7, #0]
 80116b2:	b2d2      	uxtb	r2, r2
 80116b4:	701a      	strb	r2, [r3, #0]
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	0a1b      	lsrs	r3, r3, #8
 80116ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	607a      	str	r2, [r7, #4]
 80116c2:	683a      	ldr	r2, [r7, #0]
 80116c4:	b2d2      	uxtb	r2, r2
 80116c6:	701a      	strb	r2, [r3, #0]
}
 80116c8:	bf00      	nop
 80116ca:	370c      	adds	r7, #12
 80116cc:	46bd      	mov	sp, r7
 80116ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d2:	4770      	bx	lr

080116d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80116d4:	b480      	push	{r7}
 80116d6:	b087      	sub	sp, #28
 80116d8:	af00      	add	r7, sp, #0
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d00d      	beq.n	801170a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80116ee:	693a      	ldr	r2, [r7, #16]
 80116f0:	1c53      	adds	r3, r2, #1
 80116f2:	613b      	str	r3, [r7, #16]
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	1c59      	adds	r1, r3, #1
 80116f8:	6179      	str	r1, [r7, #20]
 80116fa:	7812      	ldrb	r2, [r2, #0]
 80116fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	3b01      	subs	r3, #1
 8011702:	607b      	str	r3, [r7, #4]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d1f1      	bne.n	80116ee <mem_cpy+0x1a>
	}
}
 801170a:	bf00      	nop
 801170c:	371c      	adds	r7, #28
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr

08011716 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011716:	b480      	push	{r7}
 8011718:	b087      	sub	sp, #28
 801171a:	af00      	add	r7, sp, #0
 801171c:	60f8      	str	r0, [r7, #12]
 801171e:	60b9      	str	r1, [r7, #8]
 8011720:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	1c5a      	adds	r2, r3, #1
 801172a:	617a      	str	r2, [r7, #20]
 801172c:	68ba      	ldr	r2, [r7, #8]
 801172e:	b2d2      	uxtb	r2, r2
 8011730:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	3b01      	subs	r3, #1
 8011736:	607b      	str	r3, [r7, #4]
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1f3      	bne.n	8011726 <mem_set+0x10>
}
 801173e:	bf00      	nop
 8011740:	371c      	adds	r7, #28
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr

0801174a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801174a:	b480      	push	{r7}
 801174c:	b089      	sub	sp, #36	; 0x24
 801174e:	af00      	add	r7, sp, #0
 8011750:	60f8      	str	r0, [r7, #12]
 8011752:	60b9      	str	r1, [r7, #8]
 8011754:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	61fb      	str	r3, [r7, #28]
 801175a:	68bb      	ldr	r3, [r7, #8]
 801175c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801175e:	2300      	movs	r3, #0
 8011760:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011762:	69fb      	ldr	r3, [r7, #28]
 8011764:	1c5a      	adds	r2, r3, #1
 8011766:	61fa      	str	r2, [r7, #28]
 8011768:	781b      	ldrb	r3, [r3, #0]
 801176a:	4619      	mov	r1, r3
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	1c5a      	adds	r2, r3, #1
 8011770:	61ba      	str	r2, [r7, #24]
 8011772:	781b      	ldrb	r3, [r3, #0]
 8011774:	1acb      	subs	r3, r1, r3
 8011776:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	3b01      	subs	r3, #1
 801177c:	607b      	str	r3, [r7, #4]
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <mem_cmp+0x40>
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0eb      	beq.n	8011762 <mem_cmp+0x18>

	return r;
 801178a:	697b      	ldr	r3, [r7, #20]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3724      	adds	r7, #36	; 0x24
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80117a2:	e002      	b.n	80117aa <chk_chr+0x12>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	3301      	adds	r3, #1
 80117a8:	607b      	str	r3, [r7, #4]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	781b      	ldrb	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d005      	beq.n	80117be <chk_chr+0x26>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	461a      	mov	r2, r3
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d1f2      	bne.n	80117a4 <chk_chr+0xc>
	return *str;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	781b      	ldrb	r3, [r3, #0]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	370c      	adds	r7, #12
 80117c6:	46bd      	mov	sp, r7
 80117c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117cc:	4770      	bx	lr
	...

080117d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b085      	sub	sp, #20
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80117da:	2300      	movs	r3, #0
 80117dc:	60bb      	str	r3, [r7, #8]
 80117de:	68bb      	ldr	r3, [r7, #8]
 80117e0:	60fb      	str	r3, [r7, #12]
 80117e2:	e029      	b.n	8011838 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80117e4:	4a27      	ldr	r2, [pc, #156]	; (8011884 <chk_lock+0xb4>)
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	011b      	lsls	r3, r3, #4
 80117ea:	4413      	add	r3, r2
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d01d      	beq.n	801182e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80117f2:	4a24      	ldr	r2, [pc, #144]	; (8011884 <chk_lock+0xb4>)
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	011b      	lsls	r3, r3, #4
 80117f8:	4413      	add	r3, r2
 80117fa:	681a      	ldr	r2, [r3, #0]
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	429a      	cmp	r2, r3
 8011802:	d116      	bne.n	8011832 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011804:	4a1f      	ldr	r2, [pc, #124]	; (8011884 <chk_lock+0xb4>)
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	011b      	lsls	r3, r3, #4
 801180a:	4413      	add	r3, r2
 801180c:	3304      	adds	r3, #4
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011814:	429a      	cmp	r2, r3
 8011816:	d10c      	bne.n	8011832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011818:	4a1a      	ldr	r2, [pc, #104]	; (8011884 <chk_lock+0xb4>)
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	011b      	lsls	r3, r3, #4
 801181e:	4413      	add	r3, r2
 8011820:	3308      	adds	r3, #8
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011828:	429a      	cmp	r2, r3
 801182a:	d102      	bne.n	8011832 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801182c:	e007      	b.n	801183e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801182e:	2301      	movs	r3, #1
 8011830:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	3301      	adds	r3, #1
 8011836:	60fb      	str	r3, [r7, #12]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d9d2      	bls.n	80117e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2b02      	cmp	r3, #2
 8011842:	d109      	bne.n	8011858 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d102      	bne.n	8011850 <chk_lock+0x80>
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	2b02      	cmp	r3, #2
 801184e:	d101      	bne.n	8011854 <chk_lock+0x84>
 8011850:	2300      	movs	r3, #0
 8011852:	e010      	b.n	8011876 <chk_lock+0xa6>
 8011854:	2312      	movs	r3, #18
 8011856:	e00e      	b.n	8011876 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d108      	bne.n	8011870 <chk_lock+0xa0>
 801185e:	4a09      	ldr	r2, [pc, #36]	; (8011884 <chk_lock+0xb4>)
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	011b      	lsls	r3, r3, #4
 8011864:	4413      	add	r3, r2
 8011866:	330c      	adds	r3, #12
 8011868:	881b      	ldrh	r3, [r3, #0]
 801186a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801186e:	d101      	bne.n	8011874 <chk_lock+0xa4>
 8011870:	2310      	movs	r3, #16
 8011872:	e000      	b.n	8011876 <chk_lock+0xa6>
 8011874:	2300      	movs	r3, #0
}
 8011876:	4618      	mov	r0, r3
 8011878:	3714      	adds	r7, #20
 801187a:	46bd      	mov	sp, r7
 801187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011880:	4770      	bx	lr
 8011882:	bf00      	nop
 8011884:	200422d4 	.word	0x200422d4

08011888 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011888:	b480      	push	{r7}
 801188a:	b083      	sub	sp, #12
 801188c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801188e:	2300      	movs	r3, #0
 8011890:	607b      	str	r3, [r7, #4]
 8011892:	e002      	b.n	801189a <enq_lock+0x12>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	3301      	adds	r3, #1
 8011898:	607b      	str	r3, [r7, #4]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d806      	bhi.n	80118ae <enq_lock+0x26>
 80118a0:	4a09      	ldr	r2, [pc, #36]	; (80118c8 <enq_lock+0x40>)
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	011b      	lsls	r3, r3, #4
 80118a6:	4413      	add	r3, r2
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d1f2      	bne.n	8011894 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	2b02      	cmp	r3, #2
 80118b2:	bf14      	ite	ne
 80118b4:	2301      	movne	r3, #1
 80118b6:	2300      	moveq	r3, #0
 80118b8:	b2db      	uxtb	r3, r3
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	370c      	adds	r7, #12
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop
 80118c8:	200422d4 	.word	0x200422d4

080118cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80118d6:	2300      	movs	r3, #0
 80118d8:	60fb      	str	r3, [r7, #12]
 80118da:	e01f      	b.n	801191c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80118dc:	4a41      	ldr	r2, [pc, #260]	; (80119e4 <inc_lock+0x118>)
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	011b      	lsls	r3, r3, #4
 80118e2:	4413      	add	r3, r2
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d113      	bne.n	8011916 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80118ee:	4a3d      	ldr	r2, [pc, #244]	; (80119e4 <inc_lock+0x118>)
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	011b      	lsls	r3, r3, #4
 80118f4:	4413      	add	r3, r2
 80118f6:	3304      	adds	r3, #4
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80118fe:	429a      	cmp	r2, r3
 8011900:	d109      	bne.n	8011916 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011902:	4a38      	ldr	r2, [pc, #224]	; (80119e4 <inc_lock+0x118>)
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	011b      	lsls	r3, r3, #4
 8011908:	4413      	add	r3, r2
 801190a:	3308      	adds	r3, #8
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011912:	429a      	cmp	r2, r3
 8011914:	d006      	beq.n	8011924 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	3301      	adds	r3, #1
 801191a:	60fb      	str	r3, [r7, #12]
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2b01      	cmp	r3, #1
 8011920:	d9dc      	bls.n	80118dc <inc_lock+0x10>
 8011922:	e000      	b.n	8011926 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011924:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	2b02      	cmp	r3, #2
 801192a:	d132      	bne.n	8011992 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801192c:	2300      	movs	r3, #0
 801192e:	60fb      	str	r3, [r7, #12]
 8011930:	e002      	b.n	8011938 <inc_lock+0x6c>
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	3301      	adds	r3, #1
 8011936:	60fb      	str	r3, [r7, #12]
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d806      	bhi.n	801194c <inc_lock+0x80>
 801193e:	4a29      	ldr	r2, [pc, #164]	; (80119e4 <inc_lock+0x118>)
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	011b      	lsls	r3, r3, #4
 8011944:	4413      	add	r3, r2
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1f2      	bne.n	8011932 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	2b02      	cmp	r3, #2
 8011950:	d101      	bne.n	8011956 <inc_lock+0x8a>
 8011952:	2300      	movs	r3, #0
 8011954:	e040      	b.n	80119d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681a      	ldr	r2, [r3, #0]
 801195a:	4922      	ldr	r1, [pc, #136]	; (80119e4 <inc_lock+0x118>)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	011b      	lsls	r3, r3, #4
 8011960:	440b      	add	r3, r1
 8011962:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	689a      	ldr	r2, [r3, #8]
 8011968:	491e      	ldr	r1, [pc, #120]	; (80119e4 <inc_lock+0x118>)
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	011b      	lsls	r3, r3, #4
 801196e:	440b      	add	r3, r1
 8011970:	3304      	adds	r3, #4
 8011972:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	695a      	ldr	r2, [r3, #20]
 8011978:	491a      	ldr	r1, [pc, #104]	; (80119e4 <inc_lock+0x118>)
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	011b      	lsls	r3, r3, #4
 801197e:	440b      	add	r3, r1
 8011980:	3308      	adds	r3, #8
 8011982:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011984:	4a17      	ldr	r2, [pc, #92]	; (80119e4 <inc_lock+0x118>)
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	011b      	lsls	r3, r3, #4
 801198a:	4413      	add	r3, r2
 801198c:	330c      	adds	r3, #12
 801198e:	2200      	movs	r2, #0
 8011990:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d009      	beq.n	80119ac <inc_lock+0xe0>
 8011998:	4a12      	ldr	r2, [pc, #72]	; (80119e4 <inc_lock+0x118>)
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	011b      	lsls	r3, r3, #4
 801199e:	4413      	add	r3, r2
 80119a0:	330c      	adds	r3, #12
 80119a2:	881b      	ldrh	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <inc_lock+0xe0>
 80119a8:	2300      	movs	r3, #0
 80119aa:	e015      	b.n	80119d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d108      	bne.n	80119c4 <inc_lock+0xf8>
 80119b2:	4a0c      	ldr	r2, [pc, #48]	; (80119e4 <inc_lock+0x118>)
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	011b      	lsls	r3, r3, #4
 80119b8:	4413      	add	r3, r2
 80119ba:	330c      	adds	r3, #12
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	3301      	adds	r3, #1
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	e001      	b.n	80119c8 <inc_lock+0xfc>
 80119c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80119c8:	4906      	ldr	r1, [pc, #24]	; (80119e4 <inc_lock+0x118>)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	011b      	lsls	r3, r3, #4
 80119ce:	440b      	add	r3, r1
 80119d0:	330c      	adds	r3, #12
 80119d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	3301      	adds	r3, #1
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3714      	adds	r7, #20
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr
 80119e4:	200422d4 	.word	0x200422d4

080119e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b085      	sub	sp, #20
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	3b01      	subs	r3, #1
 80119f4:	607b      	str	r3, [r7, #4]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	d825      	bhi.n	8011a48 <dec_lock+0x60>
		n = Files[i].ctr;
 80119fc:	4a17      	ldr	r2, [pc, #92]	; (8011a5c <dec_lock+0x74>)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	011b      	lsls	r3, r3, #4
 8011a02:	4413      	add	r3, r2
 8011a04:	330c      	adds	r3, #12
 8011a06:	881b      	ldrh	r3, [r3, #0]
 8011a08:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011a0a:	89fb      	ldrh	r3, [r7, #14]
 8011a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a10:	d101      	bne.n	8011a16 <dec_lock+0x2e>
 8011a12:	2300      	movs	r3, #0
 8011a14:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011a16:	89fb      	ldrh	r3, [r7, #14]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d002      	beq.n	8011a22 <dec_lock+0x3a>
 8011a1c:	89fb      	ldrh	r3, [r7, #14]
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011a22:	4a0e      	ldr	r2, [pc, #56]	; (8011a5c <dec_lock+0x74>)
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	011b      	lsls	r3, r3, #4
 8011a28:	4413      	add	r3, r2
 8011a2a:	330c      	adds	r3, #12
 8011a2c:	89fa      	ldrh	r2, [r7, #14]
 8011a2e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011a30:	89fb      	ldrh	r3, [r7, #14]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d105      	bne.n	8011a42 <dec_lock+0x5a>
 8011a36:	4a09      	ldr	r2, [pc, #36]	; (8011a5c <dec_lock+0x74>)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	011b      	lsls	r3, r3, #4
 8011a3c:	4413      	add	r3, r2
 8011a3e:	2200      	movs	r2, #0
 8011a40:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011a42:	2300      	movs	r3, #0
 8011a44:	737b      	strb	r3, [r7, #13]
 8011a46:	e001      	b.n	8011a4c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011a48:	2302      	movs	r3, #2
 8011a4a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011a4c:	7b7b      	ldrb	r3, [r7, #13]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3714      	adds	r7, #20
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop
 8011a5c:	200422d4 	.word	0x200422d4

08011a60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011a68:	2300      	movs	r3, #0
 8011a6a:	60fb      	str	r3, [r7, #12]
 8011a6c:	e010      	b.n	8011a90 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a6e:	4a0d      	ldr	r2, [pc, #52]	; (8011aa4 <clear_lock+0x44>)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	011b      	lsls	r3, r3, #4
 8011a74:	4413      	add	r3, r2
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d105      	bne.n	8011a8a <clear_lock+0x2a>
 8011a7e:	4a09      	ldr	r2, [pc, #36]	; (8011aa4 <clear_lock+0x44>)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	011b      	lsls	r3, r3, #4
 8011a84:	4413      	add	r3, r2
 8011a86:	2200      	movs	r2, #0
 8011a88:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	60fb      	str	r3, [r7, #12]
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2b01      	cmp	r3, #1
 8011a94:	d9eb      	bls.n	8011a6e <clear_lock+0xe>
	}
}
 8011a96:	bf00      	nop
 8011a98:	3714      	adds	r7, #20
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop
 8011aa4:	200422d4 	.word	0x200422d4

08011aa8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b086      	sub	sp, #24
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	78db      	ldrb	r3, [r3, #3]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d034      	beq.n	8011b26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ac0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	7858      	ldrb	r0, [r3, #1]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011acc:	2301      	movs	r3, #1
 8011ace:	697a      	ldr	r2, [r7, #20]
 8011ad0:	f7ff fd40 	bl	8011554 <disk_write>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d002      	beq.n	8011ae0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ada:	2301      	movs	r3, #1
 8011adc:	73fb      	strb	r3, [r7, #15]
 8011ade:	e022      	b.n	8011b26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aea:	697a      	ldr	r2, [r7, #20]
 8011aec:	1ad2      	subs	r2, r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d217      	bcs.n	8011b26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	789b      	ldrb	r3, [r3, #2]
 8011afa:	613b      	str	r3, [r7, #16]
 8011afc:	e010      	b.n	8011b20 <sync_window+0x78>
					wsect += fs->fsize;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	6a1b      	ldr	r3, [r3, #32]
 8011b02:	697a      	ldr	r2, [r7, #20]
 8011b04:	4413      	add	r3, r2
 8011b06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	7858      	ldrb	r0, [r3, #1]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b12:	2301      	movs	r3, #1
 8011b14:	697a      	ldr	r2, [r7, #20]
 8011b16:	f7ff fd1d 	bl	8011554 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	3b01      	subs	r3, #1
 8011b1e:	613b      	str	r3, [r7, #16]
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d8eb      	bhi.n	8011afe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3718      	adds	r7, #24
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d01b      	beq.n	8011b80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f7ff ffad 	bl	8011aa8 <sync_window>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011b52:	7bfb      	ldrb	r3, [r7, #15]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d113      	bne.n	8011b80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	7858      	ldrb	r0, [r3, #1]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b62:	2301      	movs	r3, #1
 8011b64:	683a      	ldr	r2, [r7, #0]
 8011b66:	f7ff fcd5 	bl	8011514 <disk_read>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d004      	beq.n	8011b7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011b70:	f04f 33ff 	mov.w	r3, #4294967295
 8011b74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011b76:	2301      	movs	r3, #1
 8011b78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	683a      	ldr	r2, [r7, #0]
 8011b7e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3710      	adds	r7, #16
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
	...

08011b8c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7ff ff87 	bl	8011aa8 <sync_window>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011b9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d159      	bne.n	8011c58 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	2b03      	cmp	r3, #3
 8011baa:	d149      	bne.n	8011c40 <sync_fs+0xb4>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	791b      	ldrb	r3, [r3, #4]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d145      	bne.n	8011c40 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	899b      	ldrh	r3, [r3, #12]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	2100      	movs	r1, #0
 8011bc2:	f7ff fda8 	bl	8011716 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	3338      	adds	r3, #56	; 0x38
 8011bca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011bce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7ff fd37 	bl	8011646 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	3338      	adds	r3, #56	; 0x38
 8011bdc:	4921      	ldr	r1, [pc, #132]	; (8011c64 <sync_fs+0xd8>)
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff fd4c 	bl	801167c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	3338      	adds	r3, #56	; 0x38
 8011be8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011bec:	491e      	ldr	r1, [pc, #120]	; (8011c68 <sync_fs+0xdc>)
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7ff fd44 	bl	801167c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	3338      	adds	r3, #56	; 0x38
 8011bf8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	695b      	ldr	r3, [r3, #20]
 8011c00:	4619      	mov	r1, r3
 8011c02:	4610      	mov	r0, r2
 8011c04:	f7ff fd3a 	bl	801167c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	3338      	adds	r3, #56	; 0x38
 8011c0c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	691b      	ldr	r3, [r3, #16]
 8011c14:	4619      	mov	r1, r3
 8011c16:	4610      	mov	r0, r2
 8011c18:	f7ff fd30 	bl	801167c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c20:	1c5a      	adds	r2, r3, #1
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	7858      	ldrb	r0, [r3, #1]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011c34:	2301      	movs	r3, #1
 8011c36:	f7ff fc8d 	bl	8011554 <disk_write>
			fs->fsi_flag = 0;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	785b      	ldrb	r3, [r3, #1]
 8011c44:	2200      	movs	r2, #0
 8011c46:	2100      	movs	r1, #0
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7ff fca3 	bl	8011594 <disk_ioctl>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d001      	beq.n	8011c58 <sync_fs+0xcc>
 8011c54:	2301      	movs	r3, #1
 8011c56:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	41615252 	.word	0x41615252
 8011c68:	61417272 	.word	0x61417272

08011c6c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	3b02      	subs	r3, #2
 8011c7a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	69db      	ldr	r3, [r3, #28]
 8011c80:	3b02      	subs	r3, #2
 8011c82:	683a      	ldr	r2, [r7, #0]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d301      	bcc.n	8011c8c <clust2sect+0x20>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	e008      	b.n	8011c9e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	895b      	ldrh	r3, [r3, #10]
 8011c90:	461a      	mov	r2, r3
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	fb03 f202 	mul.w	r2, r3, r2
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c9c:	4413      	add	r3, r2
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	370c      	adds	r7, #12
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca8:	4770      	bx	lr

08011caa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b086      	sub	sp, #24
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d904      	bls.n	8011cca <get_fat+0x20>
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	69db      	ldr	r3, [r3, #28]
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d302      	bcc.n	8011cd0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011cca:	2301      	movs	r3, #1
 8011ccc:	617b      	str	r3, [r7, #20]
 8011cce:	e0b7      	b.n	8011e40 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	2b02      	cmp	r3, #2
 8011cdc:	d05a      	beq.n	8011d94 <get_fat+0xea>
 8011cde:	2b03      	cmp	r3, #3
 8011ce0:	d07d      	beq.n	8011dde <get_fat+0x134>
 8011ce2:	2b01      	cmp	r3, #1
 8011ce4:	f040 80a2 	bne.w	8011e2c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	60fb      	str	r3, [r7, #12]
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	085b      	lsrs	r3, r3, #1
 8011cf0:	68fa      	ldr	r2, [r7, #12]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011cfa:	693b      	ldr	r3, [r7, #16]
 8011cfc:	899b      	ldrh	r3, [r3, #12]
 8011cfe:	4619      	mov	r1, r3
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d06:	4413      	add	r3, r2
 8011d08:	4619      	mov	r1, r3
 8011d0a:	6938      	ldr	r0, [r7, #16]
 8011d0c:	f7ff ff10 	bl	8011b30 <move_window>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	f040 808d 	bne.w	8011e32 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	1c5a      	adds	r2, r3, #1
 8011d1c:	60fa      	str	r2, [r7, #12]
 8011d1e:	693a      	ldr	r2, [r7, #16]
 8011d20:	8992      	ldrh	r2, [r2, #12]
 8011d22:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d26:	fb02 f201 	mul.w	r2, r2, r1
 8011d2a:	1a9b      	subs	r3, r3, r2
 8011d2c:	693a      	ldr	r2, [r7, #16]
 8011d2e:	4413      	add	r3, r2
 8011d30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d36:	693b      	ldr	r3, [r7, #16]
 8011d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	899b      	ldrh	r3, [r3, #12]
 8011d3e:	4619      	mov	r1, r3
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d46:	4413      	add	r3, r2
 8011d48:	4619      	mov	r1, r3
 8011d4a:	6938      	ldr	r0, [r7, #16]
 8011d4c:	f7ff fef0 	bl	8011b30 <move_window>
 8011d50:	4603      	mov	r3, r0
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d16f      	bne.n	8011e36 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d56:	693b      	ldr	r3, [r7, #16]
 8011d58:	899b      	ldrh	r3, [r3, #12]
 8011d5a:	461a      	mov	r2, r3
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d62:	fb02 f201 	mul.w	r2, r2, r1
 8011d66:	1a9b      	subs	r3, r3, r2
 8011d68:	693a      	ldr	r2, [r7, #16]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011d70:	021b      	lsls	r3, r3, #8
 8011d72:	461a      	mov	r2, r3
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	4313      	orrs	r3, r2
 8011d78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	f003 0301 	and.w	r3, r3, #1
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d002      	beq.n	8011d8a <get_fat+0xe0>
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	091b      	lsrs	r3, r3, #4
 8011d88:	e002      	b.n	8011d90 <get_fat+0xe6>
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011d90:	617b      	str	r3, [r7, #20]
			break;
 8011d92:	e055      	b.n	8011e40 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	899b      	ldrh	r3, [r3, #12]
 8011d9c:	085b      	lsrs	r3, r3, #1
 8011d9e:	b29b      	uxth	r3, r3
 8011da0:	4619      	mov	r1, r3
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011da8:	4413      	add	r3, r2
 8011daa:	4619      	mov	r1, r3
 8011dac:	6938      	ldr	r0, [r7, #16]
 8011dae:	f7ff febf 	bl	8011b30 <move_window>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d140      	bne.n	8011e3a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	005b      	lsls	r3, r3, #1
 8011dc2:	693a      	ldr	r2, [r7, #16]
 8011dc4:	8992      	ldrh	r2, [r2, #12]
 8011dc6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dca:	fb02 f200 	mul.w	r2, r2, r0
 8011dce:	1a9b      	subs	r3, r3, r2
 8011dd0:	440b      	add	r3, r1
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7ff fbfc 	bl	80115d0 <ld_word>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	617b      	str	r3, [r7, #20]
			break;
 8011ddc:	e030      	b.n	8011e40 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	899b      	ldrh	r3, [r3, #12]
 8011de6:	089b      	lsrs	r3, r3, #2
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	4619      	mov	r1, r3
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8011df2:	4413      	add	r3, r2
 8011df4:	4619      	mov	r1, r3
 8011df6:	6938      	ldr	r0, [r7, #16]
 8011df8:	f7ff fe9a 	bl	8011b30 <move_window>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d11d      	bne.n	8011e3e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	693a      	ldr	r2, [r7, #16]
 8011e0e:	8992      	ldrh	r2, [r2, #12]
 8011e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e14:	fb02 f200 	mul.w	r2, r2, r0
 8011e18:	1a9b      	subs	r3, r3, r2
 8011e1a:	440b      	add	r3, r1
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7ff fbef 	bl	8011600 <ld_dword>
 8011e22:	4603      	mov	r3, r0
 8011e24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011e28:	617b      	str	r3, [r7, #20]
			break;
 8011e2a:	e009      	b.n	8011e40 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	617b      	str	r3, [r7, #20]
 8011e30:	e006      	b.n	8011e40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e32:	bf00      	nop
 8011e34:	e004      	b.n	8011e40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011e36:	bf00      	nop
 8011e38:	e002      	b.n	8011e40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e3a:	bf00      	nop
 8011e3c:	e000      	b.n	8011e40 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e3e:	bf00      	nop
		}
	}

	return val;
 8011e40:	697b      	ldr	r3, [r7, #20]
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3718      	adds	r7, #24
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}

08011e4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011e4a:	b590      	push	{r4, r7, lr}
 8011e4c:	b089      	sub	sp, #36	; 0x24
 8011e4e:	af00      	add	r7, sp, #0
 8011e50:	60f8      	str	r0, [r7, #12]
 8011e52:	60b9      	str	r1, [r7, #8]
 8011e54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011e56:	2302      	movs	r3, #2
 8011e58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2b01      	cmp	r3, #1
 8011e5e:	f240 8106 	bls.w	801206e <put_fat+0x224>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	69db      	ldr	r3, [r3, #28]
 8011e66:	68ba      	ldr	r2, [r7, #8]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	f080 8100 	bcs.w	801206e <put_fat+0x224>
		switch (fs->fs_type) {
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	2b02      	cmp	r3, #2
 8011e74:	f000 8088 	beq.w	8011f88 <put_fat+0x13e>
 8011e78:	2b03      	cmp	r3, #3
 8011e7a:	f000 80b0 	beq.w	8011fde <put_fat+0x194>
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	f040 80f5 	bne.w	801206e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	61bb      	str	r3, [r7, #24]
 8011e88:	69bb      	ldr	r3, [r7, #24]
 8011e8a:	085b      	lsrs	r3, r3, #1
 8011e8c:	69ba      	ldr	r2, [r7, #24]
 8011e8e:	4413      	add	r3, r2
 8011e90:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	899b      	ldrh	r3, [r3, #12]
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	69bb      	ldr	r3, [r7, #24]
 8011e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ea2:	4413      	add	r3, r2
 8011ea4:	4619      	mov	r1, r3
 8011ea6:	68f8      	ldr	r0, [r7, #12]
 8011ea8:	f7ff fe42 	bl	8011b30 <move_window>
 8011eac:	4603      	mov	r3, r0
 8011eae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011eb0:	7ffb      	ldrb	r3, [r7, #31]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	f040 80d4 	bne.w	8012060 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ebe:	69bb      	ldr	r3, [r7, #24]
 8011ec0:	1c5a      	adds	r2, r3, #1
 8011ec2:	61ba      	str	r2, [r7, #24]
 8011ec4:	68fa      	ldr	r2, [r7, #12]
 8011ec6:	8992      	ldrh	r2, [r2, #12]
 8011ec8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ecc:	fb02 f200 	mul.w	r2, r2, r0
 8011ed0:	1a9b      	subs	r3, r3, r2
 8011ed2:	440b      	add	r3, r1
 8011ed4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	f003 0301 	and.w	r3, r3, #1
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d00d      	beq.n	8011efc <put_fat+0xb2>
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	781b      	ldrb	r3, [r3, #0]
 8011ee4:	b25b      	sxtb	r3, r3
 8011ee6:	f003 030f 	and.w	r3, r3, #15
 8011eea:	b25a      	sxtb	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	011b      	lsls	r3, r3, #4
 8011ef2:	b25b      	sxtb	r3, r3
 8011ef4:	4313      	orrs	r3, r2
 8011ef6:	b25b      	sxtb	r3, r3
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	e001      	b.n	8011f00 <put_fat+0xb6>
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	b2db      	uxtb	r3, r3
 8011f00:	697a      	ldr	r2, [r7, #20]
 8011f02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	2201      	movs	r2, #1
 8011f08:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	899b      	ldrh	r3, [r3, #12]
 8011f12:	4619      	mov	r1, r3
 8011f14:	69bb      	ldr	r3, [r7, #24]
 8011f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f1a:	4413      	add	r3, r2
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	f7ff fe06 	bl	8011b30 <move_window>
 8011f24:	4603      	mov	r3, r0
 8011f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f28:	7ffb      	ldrb	r3, [r7, #31]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f040 809a 	bne.w	8012064 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	899b      	ldrh	r3, [r3, #12]
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	69bb      	ldr	r3, [r7, #24]
 8011f3e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f42:	fb02 f200 	mul.w	r2, r2, r0
 8011f46:	1a9b      	subs	r3, r3, r2
 8011f48:	440b      	add	r3, r1
 8011f4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	f003 0301 	and.w	r3, r3, #1
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d003      	beq.n	8011f5e <put_fat+0x114>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	091b      	lsrs	r3, r3, #4
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	e00e      	b.n	8011f7c <put_fat+0x132>
 8011f5e:	697b      	ldr	r3, [r7, #20]
 8011f60:	781b      	ldrb	r3, [r3, #0]
 8011f62:	b25b      	sxtb	r3, r3
 8011f64:	f023 030f 	bic.w	r3, r3, #15
 8011f68:	b25a      	sxtb	r2, r3
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	0a1b      	lsrs	r3, r3, #8
 8011f6e:	b25b      	sxtb	r3, r3
 8011f70:	f003 030f 	and.w	r3, r3, #15
 8011f74:	b25b      	sxtb	r3, r3
 8011f76:	4313      	orrs	r3, r2
 8011f78:	b25b      	sxtb	r3, r3
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	697a      	ldr	r2, [r7, #20]
 8011f7e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	2201      	movs	r2, #1
 8011f84:	70da      	strb	r2, [r3, #3]
			break;
 8011f86:	e072      	b.n	801206e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	899b      	ldrh	r3, [r3, #12]
 8011f90:	085b      	lsrs	r3, r3, #1
 8011f92:	b29b      	uxth	r3, r3
 8011f94:	4619      	mov	r1, r3
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f9c:	4413      	add	r3, r2
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f7ff fdc5 	bl	8011b30 <move_window>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011faa:	7ffb      	ldrb	r3, [r7, #31]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d15b      	bne.n	8012068 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fb6:	68bb      	ldr	r3, [r7, #8]
 8011fb8:	005b      	lsls	r3, r3, #1
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	8992      	ldrh	r2, [r2, #12]
 8011fbe:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fc2:	fb02 f200 	mul.w	r2, r2, r0
 8011fc6:	1a9b      	subs	r3, r3, r2
 8011fc8:	440b      	add	r3, r1
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	b292      	uxth	r2, r2
 8011fce:	4611      	mov	r1, r2
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff fb38 	bl	8011646 <st_word>
			fs->wflag = 1;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	70da      	strb	r2, [r3, #3]
			break;
 8011fdc:	e047      	b.n	801206e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	899b      	ldrh	r3, [r3, #12]
 8011fe6:	089b      	lsrs	r3, r3, #2
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	4619      	mov	r1, r3
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ff2:	4413      	add	r3, r2
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f7ff fd9a 	bl	8011b30 <move_window>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012000:	7ffb      	ldrb	r3, [r7, #31]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d132      	bne.n	801206c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	009b      	lsls	r3, r3, #2
 8012016:	68fa      	ldr	r2, [r7, #12]
 8012018:	8992      	ldrh	r2, [r2, #12]
 801201a:	fbb3 f0f2 	udiv	r0, r3, r2
 801201e:	fb02 f200 	mul.w	r2, r2, r0
 8012022:	1a9b      	subs	r3, r3, r2
 8012024:	440b      	add	r3, r1
 8012026:	4618      	mov	r0, r3
 8012028:	f7ff faea 	bl	8011600 <ld_dword>
 801202c:	4603      	mov	r3, r0
 801202e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012032:	4323      	orrs	r3, r4
 8012034:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	009b      	lsls	r3, r3, #2
 8012040:	68fa      	ldr	r2, [r7, #12]
 8012042:	8992      	ldrh	r2, [r2, #12]
 8012044:	fbb3 f0f2 	udiv	r0, r3, r2
 8012048:	fb02 f200 	mul.w	r2, r2, r0
 801204c:	1a9b      	subs	r3, r3, r2
 801204e:	440b      	add	r3, r1
 8012050:	6879      	ldr	r1, [r7, #4]
 8012052:	4618      	mov	r0, r3
 8012054:	f7ff fb12 	bl	801167c <st_dword>
			fs->wflag = 1;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2201      	movs	r2, #1
 801205c:	70da      	strb	r2, [r3, #3]
			break;
 801205e:	e006      	b.n	801206e <put_fat+0x224>
			if (res != FR_OK) break;
 8012060:	bf00      	nop
 8012062:	e004      	b.n	801206e <put_fat+0x224>
			if (res != FR_OK) break;
 8012064:	bf00      	nop
 8012066:	e002      	b.n	801206e <put_fat+0x224>
			if (res != FR_OK) break;
 8012068:	bf00      	nop
 801206a:	e000      	b.n	801206e <put_fat+0x224>
			if (res != FR_OK) break;
 801206c:	bf00      	nop
		}
	}
	return res;
 801206e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3724      	adds	r7, #36	; 0x24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd90      	pop	{r4, r7, pc}

08012078 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b088      	sub	sp, #32
 801207c:	af00      	add	r7, sp, #0
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	60b9      	str	r1, [r7, #8]
 8012082:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012084:	2300      	movs	r3, #0
 8012086:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	2b01      	cmp	r3, #1
 8012092:	d904      	bls.n	801209e <remove_chain+0x26>
 8012094:	69bb      	ldr	r3, [r7, #24]
 8012096:	69db      	ldr	r3, [r3, #28]
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	429a      	cmp	r2, r3
 801209c:	d301      	bcc.n	80120a2 <remove_chain+0x2a>
 801209e:	2302      	movs	r3, #2
 80120a0:	e04b      	b.n	801213a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d00c      	beq.n	80120c2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80120a8:	f04f 32ff 	mov.w	r2, #4294967295
 80120ac:	6879      	ldr	r1, [r7, #4]
 80120ae:	69b8      	ldr	r0, [r7, #24]
 80120b0:	f7ff fecb 	bl	8011e4a <put_fat>
 80120b4:	4603      	mov	r3, r0
 80120b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80120b8:	7ffb      	ldrb	r3, [r7, #31]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d001      	beq.n	80120c2 <remove_chain+0x4a>
 80120be:	7ffb      	ldrb	r3, [r7, #31]
 80120c0:	e03b      	b.n	801213a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80120c2:	68b9      	ldr	r1, [r7, #8]
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f7ff fdf0 	bl	8011caa <get_fat>
 80120ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d031      	beq.n	8012136 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d101      	bne.n	80120dc <remove_chain+0x64>
 80120d8:	2302      	movs	r3, #2
 80120da:	e02e      	b.n	801213a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120e2:	d101      	bne.n	80120e8 <remove_chain+0x70>
 80120e4:	2301      	movs	r3, #1
 80120e6:	e028      	b.n	801213a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80120e8:	2200      	movs	r2, #0
 80120ea:	68b9      	ldr	r1, [r7, #8]
 80120ec:	69b8      	ldr	r0, [r7, #24]
 80120ee:	f7ff feac 	bl	8011e4a <put_fat>
 80120f2:	4603      	mov	r3, r0
 80120f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80120f6:	7ffb      	ldrb	r3, [r7, #31]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d001      	beq.n	8012100 <remove_chain+0x88>
 80120fc:	7ffb      	ldrb	r3, [r7, #31]
 80120fe:	e01c      	b.n	801213a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012100:	69bb      	ldr	r3, [r7, #24]
 8012102:	695a      	ldr	r2, [r3, #20]
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	69db      	ldr	r3, [r3, #28]
 8012108:	3b02      	subs	r3, #2
 801210a:	429a      	cmp	r2, r3
 801210c:	d20b      	bcs.n	8012126 <remove_chain+0xae>
			fs->free_clst++;
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	695b      	ldr	r3, [r3, #20]
 8012112:	1c5a      	adds	r2, r3, #1
 8012114:	69bb      	ldr	r3, [r7, #24]
 8012116:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012118:	69bb      	ldr	r3, [r7, #24]
 801211a:	791b      	ldrb	r3, [r3, #4]
 801211c:	f043 0301 	orr.w	r3, r3, #1
 8012120:	b2da      	uxtb	r2, r3
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801212a:	69bb      	ldr	r3, [r7, #24]
 801212c:	69db      	ldr	r3, [r3, #28]
 801212e:	68ba      	ldr	r2, [r7, #8]
 8012130:	429a      	cmp	r2, r3
 8012132:	d3c6      	bcc.n	80120c2 <remove_chain+0x4a>
 8012134:	e000      	b.n	8012138 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012136:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012138:	2300      	movs	r3, #0
}
 801213a:	4618      	mov	r0, r3
 801213c:	3720      	adds	r7, #32
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}

08012142 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012142:	b580      	push	{r7, lr}
 8012144:	b088      	sub	sp, #32
 8012146:	af00      	add	r7, sp, #0
 8012148:	6078      	str	r0, [r7, #4]
 801214a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10d      	bne.n	8012174 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	691b      	ldr	r3, [r3, #16]
 801215c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d004      	beq.n	801216e <create_chain+0x2c>
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	69db      	ldr	r3, [r3, #28]
 8012168:	69ba      	ldr	r2, [r7, #24]
 801216a:	429a      	cmp	r2, r3
 801216c:	d31b      	bcc.n	80121a6 <create_chain+0x64>
 801216e:	2301      	movs	r3, #1
 8012170:	61bb      	str	r3, [r7, #24]
 8012172:	e018      	b.n	80121a6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012174:	6839      	ldr	r1, [r7, #0]
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7ff fd97 	bl	8011caa <get_fat>
 801217c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2b01      	cmp	r3, #1
 8012182:	d801      	bhi.n	8012188 <create_chain+0x46>
 8012184:	2301      	movs	r3, #1
 8012186:	e070      	b.n	801226a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801218e:	d101      	bne.n	8012194 <create_chain+0x52>
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	e06a      	b.n	801226a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	69db      	ldr	r3, [r3, #28]
 8012198:	68fa      	ldr	r2, [r7, #12]
 801219a:	429a      	cmp	r2, r3
 801219c:	d201      	bcs.n	80121a2 <create_chain+0x60>
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	e063      	b.n	801226a <create_chain+0x128>
		scl = clst;
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	3301      	adds	r3, #1
 80121ae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	69db      	ldr	r3, [r3, #28]
 80121b4:	69fa      	ldr	r2, [r7, #28]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d307      	bcc.n	80121ca <create_chain+0x88>
				ncl = 2;
 80121ba:	2302      	movs	r3, #2
 80121bc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80121be:	69fa      	ldr	r2, [r7, #28]
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d901      	bls.n	80121ca <create_chain+0x88>
 80121c6:	2300      	movs	r3, #0
 80121c8:	e04f      	b.n	801226a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80121ca:	69f9      	ldr	r1, [r7, #28]
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f7ff fd6c 	bl	8011caa <get_fat>
 80121d2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d00e      	beq.n	80121f8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d003      	beq.n	80121e8 <create_chain+0xa6>
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e6:	d101      	bne.n	80121ec <create_chain+0xaa>
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	e03e      	b.n	801226a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80121ec:	69fa      	ldr	r2, [r7, #28]
 80121ee:	69bb      	ldr	r3, [r7, #24]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d1da      	bne.n	80121aa <create_chain+0x68>
 80121f4:	2300      	movs	r3, #0
 80121f6:	e038      	b.n	801226a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80121f8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80121fa:	f04f 32ff 	mov.w	r2, #4294967295
 80121fe:	69f9      	ldr	r1, [r7, #28]
 8012200:	6938      	ldr	r0, [r7, #16]
 8012202:	f7ff fe22 	bl	8011e4a <put_fat>
 8012206:	4603      	mov	r3, r0
 8012208:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801220a:	7dfb      	ldrb	r3, [r7, #23]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d109      	bne.n	8012224 <create_chain+0xe2>
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d006      	beq.n	8012224 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012216:	69fa      	ldr	r2, [r7, #28]
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	6938      	ldr	r0, [r7, #16]
 801221c:	f7ff fe15 	bl	8011e4a <put_fat>
 8012220:	4603      	mov	r3, r0
 8012222:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012224:	7dfb      	ldrb	r3, [r7, #23]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d116      	bne.n	8012258 <create_chain+0x116>
		fs->last_clst = ncl;
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	69fa      	ldr	r2, [r7, #28]
 801222e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	695a      	ldr	r2, [r3, #20]
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	69db      	ldr	r3, [r3, #28]
 8012238:	3b02      	subs	r3, #2
 801223a:	429a      	cmp	r2, r3
 801223c:	d804      	bhi.n	8012248 <create_chain+0x106>
 801223e:	693b      	ldr	r3, [r7, #16]
 8012240:	695b      	ldr	r3, [r3, #20]
 8012242:	1e5a      	subs	r2, r3, #1
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	791b      	ldrb	r3, [r3, #4]
 801224c:	f043 0301 	orr.w	r3, r3, #1
 8012250:	b2da      	uxtb	r2, r3
 8012252:	693b      	ldr	r3, [r7, #16]
 8012254:	711a      	strb	r2, [r3, #4]
 8012256:	e007      	b.n	8012268 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012258:	7dfb      	ldrb	r3, [r7, #23]
 801225a:	2b01      	cmp	r3, #1
 801225c:	d102      	bne.n	8012264 <create_chain+0x122>
 801225e:	f04f 33ff 	mov.w	r3, #4294967295
 8012262:	e000      	b.n	8012266 <create_chain+0x124>
 8012264:	2301      	movs	r3, #1
 8012266:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012268:	69fb      	ldr	r3, [r7, #28]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3720      	adds	r7, #32
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012272:	b480      	push	{r7}
 8012274:	b087      	sub	sp, #28
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012286:	3304      	adds	r3, #4
 8012288:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	899b      	ldrh	r3, [r3, #12]
 801228e:	461a      	mov	r2, r3
 8012290:	683b      	ldr	r3, [r7, #0]
 8012292:	fbb3 f3f2 	udiv	r3, r3, r2
 8012296:	68fa      	ldr	r2, [r7, #12]
 8012298:	8952      	ldrh	r2, [r2, #10]
 801229a:	fbb3 f3f2 	udiv	r3, r3, r2
 801229e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	1d1a      	adds	r2, r3, #4
 80122a4:	613a      	str	r2, [r7, #16]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d101      	bne.n	80122b4 <clmt_clust+0x42>
 80122b0:	2300      	movs	r3, #0
 80122b2:	e010      	b.n	80122d6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80122b4:	697a      	ldr	r2, [r7, #20]
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d307      	bcc.n	80122cc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80122bc:	697a      	ldr	r2, [r7, #20]
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	617b      	str	r3, [r7, #20]
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	3304      	adds	r3, #4
 80122c8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80122ca:	e7e9      	b.n	80122a0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80122cc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	681a      	ldr	r2, [r3, #0]
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	4413      	add	r3, r2
}
 80122d6:	4618      	mov	r0, r3
 80122d8:	371c      	adds	r7, #28
 80122da:	46bd      	mov	sp, r7
 80122dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e0:	4770      	bx	lr

080122e2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b086      	sub	sp, #24
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80122f8:	d204      	bcs.n	8012304 <dir_sdi+0x22>
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	f003 031f 	and.w	r3, r3, #31
 8012300:	2b00      	cmp	r3, #0
 8012302:	d001      	beq.n	8012308 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012304:	2302      	movs	r3, #2
 8012306:	e071      	b.n	80123ec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	689b      	ldr	r3, [r3, #8]
 8012312:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d106      	bne.n	8012328 <dir_sdi+0x46>
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	781b      	ldrb	r3, [r3, #0]
 801231e:	2b02      	cmp	r3, #2
 8012320:	d902      	bls.n	8012328 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012326:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d10c      	bne.n	8012348 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	095b      	lsrs	r3, r3, #5
 8012332:	693a      	ldr	r2, [r7, #16]
 8012334:	8912      	ldrh	r2, [r2, #8]
 8012336:	4293      	cmp	r3, r2
 8012338:	d301      	bcc.n	801233e <dir_sdi+0x5c>
 801233a:	2302      	movs	r3, #2
 801233c:	e056      	b.n	80123ec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	61da      	str	r2, [r3, #28]
 8012346:	e02d      	b.n	80123a4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	895b      	ldrh	r3, [r3, #10]
 801234c:	461a      	mov	r2, r3
 801234e:	693b      	ldr	r3, [r7, #16]
 8012350:	899b      	ldrh	r3, [r3, #12]
 8012352:	fb03 f302 	mul.w	r3, r3, r2
 8012356:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012358:	e019      	b.n	801238e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6979      	ldr	r1, [r7, #20]
 801235e:	4618      	mov	r0, r3
 8012360:	f7ff fca3 	bl	8011caa <get_fat>
 8012364:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	f1b3 3fff 	cmp.w	r3, #4294967295
 801236c:	d101      	bne.n	8012372 <dir_sdi+0x90>
 801236e:	2301      	movs	r3, #1
 8012370:	e03c      	b.n	80123ec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	2b01      	cmp	r3, #1
 8012376:	d904      	bls.n	8012382 <dir_sdi+0xa0>
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	69db      	ldr	r3, [r3, #28]
 801237c:	697a      	ldr	r2, [r7, #20]
 801237e:	429a      	cmp	r2, r3
 8012380:	d301      	bcc.n	8012386 <dir_sdi+0xa4>
 8012382:	2302      	movs	r3, #2
 8012384:	e032      	b.n	80123ec <dir_sdi+0x10a>
			ofs -= csz;
 8012386:	683a      	ldr	r2, [r7, #0]
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	1ad3      	subs	r3, r2, r3
 801238c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	429a      	cmp	r2, r3
 8012394:	d2e1      	bcs.n	801235a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012396:	6979      	ldr	r1, [r7, #20]
 8012398:	6938      	ldr	r0, [r7, #16]
 801239a:	f7ff fc67 	bl	8011c6c <clust2sect>
 801239e:	4602      	mov	r2, r0
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	697a      	ldr	r2, [r7, #20]
 80123a8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	69db      	ldr	r3, [r3, #28]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d101      	bne.n	80123b6 <dir_sdi+0xd4>
 80123b2:	2302      	movs	r3, #2
 80123b4:	e01a      	b.n	80123ec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	69da      	ldr	r2, [r3, #28]
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	899b      	ldrh	r3, [r3, #12]
 80123be:	4619      	mov	r1, r3
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80123c6:	441a      	add	r2, r3
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80123cc:	693b      	ldr	r3, [r7, #16]
 80123ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	899b      	ldrh	r3, [r3, #12]
 80123d6:	461a      	mov	r2, r3
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	fbb3 f0f2 	udiv	r0, r3, r2
 80123de:	fb02 f200 	mul.w	r2, r2, r0
 80123e2:	1a9b      	subs	r3, r3, r2
 80123e4:	18ca      	adds	r2, r1, r3
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80123ea:	2300      	movs	r3, #0
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3718      	adds	r7, #24
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b086      	sub	sp, #24
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	695b      	ldr	r3, [r3, #20]
 8012408:	3320      	adds	r3, #32
 801240a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	69db      	ldr	r3, [r3, #28]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d003      	beq.n	801241c <dir_next+0x28>
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801241a:	d301      	bcc.n	8012420 <dir_next+0x2c>
 801241c:	2304      	movs	r3, #4
 801241e:	e0bb      	b.n	8012598 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	899b      	ldrh	r3, [r3, #12]
 8012424:	461a      	mov	r2, r3
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	fbb3 f1f2 	udiv	r1, r3, r2
 801242c:	fb02 f201 	mul.w	r2, r2, r1
 8012430:	1a9b      	subs	r3, r3, r2
 8012432:	2b00      	cmp	r3, #0
 8012434:	f040 809d 	bne.w	8012572 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	69db      	ldr	r3, [r3, #28]
 801243c:	1c5a      	adds	r2, r3, #1
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	699b      	ldr	r3, [r3, #24]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d10b      	bne.n	8012462 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	095b      	lsrs	r3, r3, #5
 801244e:	68fa      	ldr	r2, [r7, #12]
 8012450:	8912      	ldrh	r2, [r2, #8]
 8012452:	4293      	cmp	r3, r2
 8012454:	f0c0 808d 	bcc.w	8012572 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	61da      	str	r2, [r3, #28]
 801245e:	2304      	movs	r3, #4
 8012460:	e09a      	b.n	8012598 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	899b      	ldrh	r3, [r3, #12]
 8012466:	461a      	mov	r2, r3
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	fbb3 f3f2 	udiv	r3, r3, r2
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	8952      	ldrh	r2, [r2, #10]
 8012472:	3a01      	subs	r2, #1
 8012474:	4013      	ands	r3, r2
 8012476:	2b00      	cmp	r3, #0
 8012478:	d17b      	bne.n	8012572 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801247a:	687a      	ldr	r2, [r7, #4]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	699b      	ldr	r3, [r3, #24]
 8012480:	4619      	mov	r1, r3
 8012482:	4610      	mov	r0, r2
 8012484:	f7ff fc11 	bl	8011caa <get_fat>
 8012488:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	2b01      	cmp	r3, #1
 801248e:	d801      	bhi.n	8012494 <dir_next+0xa0>
 8012490:	2302      	movs	r3, #2
 8012492:	e081      	b.n	8012598 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	f1b3 3fff 	cmp.w	r3, #4294967295
 801249a:	d101      	bne.n	80124a0 <dir_next+0xac>
 801249c:	2301      	movs	r3, #1
 801249e:	e07b      	b.n	8012598 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	69db      	ldr	r3, [r3, #28]
 80124a4:	697a      	ldr	r2, [r7, #20]
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d359      	bcc.n	801255e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d104      	bne.n	80124ba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	61da      	str	r2, [r3, #28]
 80124b6:	2304      	movs	r3, #4
 80124b8:	e06e      	b.n	8012598 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80124ba:	687a      	ldr	r2, [r7, #4]
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	4619      	mov	r1, r3
 80124c2:	4610      	mov	r0, r2
 80124c4:	f7ff fe3d 	bl	8012142 <create_chain>
 80124c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d101      	bne.n	80124d4 <dir_next+0xe0>
 80124d0:	2307      	movs	r3, #7
 80124d2:	e061      	b.n	8012598 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80124d4:	697b      	ldr	r3, [r7, #20]
 80124d6:	2b01      	cmp	r3, #1
 80124d8:	d101      	bne.n	80124de <dir_next+0xea>
 80124da:	2302      	movs	r3, #2
 80124dc:	e05c      	b.n	8012598 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124e4:	d101      	bne.n	80124ea <dir_next+0xf6>
 80124e6:	2301      	movs	r3, #1
 80124e8:	e056      	b.n	8012598 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f7ff fadc 	bl	8011aa8 <sync_window>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d001      	beq.n	80124fa <dir_next+0x106>
 80124f6:	2301      	movs	r3, #1
 80124f8:	e04e      	b.n	8012598 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	899b      	ldrh	r3, [r3, #12]
 8012504:	461a      	mov	r2, r3
 8012506:	2100      	movs	r1, #0
 8012508:	f7ff f905 	bl	8011716 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801250c:	2300      	movs	r3, #0
 801250e:	613b      	str	r3, [r7, #16]
 8012510:	6979      	ldr	r1, [r7, #20]
 8012512:	68f8      	ldr	r0, [r7, #12]
 8012514:	f7ff fbaa 	bl	8011c6c <clust2sect>
 8012518:	4602      	mov	r2, r0
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	635a      	str	r2, [r3, #52]	; 0x34
 801251e:	e012      	b.n	8012546 <dir_next+0x152>
						fs->wflag = 1;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2201      	movs	r2, #1
 8012524:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012526:	68f8      	ldr	r0, [r7, #12]
 8012528:	f7ff fabe 	bl	8011aa8 <sync_window>
 801252c:	4603      	mov	r3, r0
 801252e:	2b00      	cmp	r3, #0
 8012530:	d001      	beq.n	8012536 <dir_next+0x142>
 8012532:	2301      	movs	r3, #1
 8012534:	e030      	b.n	8012598 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	3301      	adds	r3, #1
 801253a:	613b      	str	r3, [r7, #16]
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012540:	1c5a      	adds	r2, r3, #1
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	635a      	str	r2, [r3, #52]	; 0x34
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	895b      	ldrh	r3, [r3, #10]
 801254a:	461a      	mov	r2, r3
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	4293      	cmp	r3, r2
 8012550:	d3e6      	bcc.n	8012520 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012552:	68fb      	ldr	r3, [r7, #12]
 8012554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	1ad2      	subs	r2, r2, r3
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	697a      	ldr	r2, [r7, #20]
 8012562:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012564:	6979      	ldr	r1, [r7, #20]
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	f7ff fb80 	bl	8011c6c <clust2sect>
 801256c:	4602      	mov	r2, r0
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	899b      	ldrh	r3, [r3, #12]
 8012582:	461a      	mov	r2, r3
 8012584:	68bb      	ldr	r3, [r7, #8]
 8012586:	fbb3 f0f2 	udiv	r0, r3, r2
 801258a:	fb02 f200 	mul.w	r2, r2, r0
 801258e:	1a9b      	subs	r3, r3, r2
 8012590:	18ca      	adds	r2, r1, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012596:	2300      	movs	r3, #0
}
 8012598:	4618      	mov	r0, r3
 801259a:	3718      	adds	r7, #24
 801259c:	46bd      	mov	sp, r7
 801259e:	bd80      	pop	{r7, pc}

080125a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b086      	sub	sp, #24
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80125b0:	2100      	movs	r1, #0
 80125b2:	6878      	ldr	r0, [r7, #4]
 80125b4:	f7ff fe95 	bl	80122e2 <dir_sdi>
 80125b8:	4603      	mov	r3, r0
 80125ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125bc:	7dfb      	ldrb	r3, [r7, #23]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d12b      	bne.n	801261a <dir_alloc+0x7a>
		n = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	69db      	ldr	r3, [r3, #28]
 80125ca:	4619      	mov	r1, r3
 80125cc:	68f8      	ldr	r0, [r7, #12]
 80125ce:	f7ff faaf 	bl	8011b30 <move_window>
 80125d2:	4603      	mov	r3, r0
 80125d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125d6:	7dfb      	ldrb	r3, [r7, #23]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d11d      	bne.n	8012618 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	6a1b      	ldr	r3, [r3, #32]
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	2be5      	cmp	r3, #229	; 0xe5
 80125e4:	d004      	beq.n	80125f0 <dir_alloc+0x50>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6a1b      	ldr	r3, [r3, #32]
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d107      	bne.n	8012600 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	3301      	adds	r3, #1
 80125f4:	613b      	str	r3, [r7, #16]
 80125f6:	693a      	ldr	r2, [r7, #16]
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d102      	bne.n	8012604 <dir_alloc+0x64>
 80125fe:	e00c      	b.n	801261a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012600:	2300      	movs	r3, #0
 8012602:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012604:	2101      	movs	r1, #1
 8012606:	6878      	ldr	r0, [r7, #4]
 8012608:	f7ff fef4 	bl	80123f4 <dir_next>
 801260c:	4603      	mov	r3, r0
 801260e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012610:	7dfb      	ldrb	r3, [r7, #23]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d0d7      	beq.n	80125c6 <dir_alloc+0x26>
 8012616:	e000      	b.n	801261a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012618:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801261a:	7dfb      	ldrb	r3, [r7, #23]
 801261c:	2b04      	cmp	r3, #4
 801261e:	d101      	bne.n	8012624 <dir_alloc+0x84>
 8012620:	2307      	movs	r3, #7
 8012622:	75fb      	strb	r3, [r7, #23]
	return res;
 8012624:	7dfb      	ldrb	r3, [r7, #23]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3718      	adds	r7, #24
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801262e:	b580      	push	{r7, lr}
 8012630:	b084      	sub	sp, #16
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
 8012636:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	331a      	adds	r3, #26
 801263c:	4618      	mov	r0, r3
 801263e:	f7fe ffc7 	bl	80115d0 <ld_word>
 8012642:	4603      	mov	r3, r0
 8012644:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	781b      	ldrb	r3, [r3, #0]
 801264a:	2b03      	cmp	r3, #3
 801264c:	d109      	bne.n	8012662 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801264e:	683b      	ldr	r3, [r7, #0]
 8012650:	3314      	adds	r3, #20
 8012652:	4618      	mov	r0, r3
 8012654:	f7fe ffbc 	bl	80115d0 <ld_word>
 8012658:	4603      	mov	r3, r0
 801265a:	041b      	lsls	r3, r3, #16
 801265c:	68fa      	ldr	r2, [r7, #12]
 801265e:	4313      	orrs	r3, r2
 8012660:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012662:	68fb      	ldr	r3, [r7, #12]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3710      	adds	r7, #16
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}

0801266c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	60f8      	str	r0, [r7, #12]
 8012674:	60b9      	str	r1, [r7, #8]
 8012676:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	331a      	adds	r3, #26
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	b292      	uxth	r2, r2
 8012680:	4611      	mov	r1, r2
 8012682:	4618      	mov	r0, r3
 8012684:	f7fe ffdf 	bl	8011646 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	2b03      	cmp	r3, #3
 801268e:	d109      	bne.n	80126a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	f103 0214 	add.w	r2, r3, #20
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	0c1b      	lsrs	r3, r3, #16
 801269a:	b29b      	uxth	r3, r3
 801269c:	4619      	mov	r1, r3
 801269e:	4610      	mov	r0, r2
 80126a0:	f7fe ffd1 	bl	8011646 <st_word>
	}
}
 80126a4:	bf00      	nop
 80126a6:	3710      	adds	r7, #16
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}

080126ac <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b086      	sub	sp, #24
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	6078      	str	r0, [r7, #4]
 80126b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80126b6:	2304      	movs	r3, #4
 80126b8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80126c0:	e03c      	b.n	801273c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	69db      	ldr	r3, [r3, #28]
 80126c6:	4619      	mov	r1, r3
 80126c8:	6938      	ldr	r0, [r7, #16]
 80126ca:	f7ff fa31 	bl	8011b30 <move_window>
 80126ce:	4603      	mov	r3, r0
 80126d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126d2:	7dfb      	ldrb	r3, [r7, #23]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d136      	bne.n	8012746 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6a1b      	ldr	r3, [r3, #32]
 80126dc:	781b      	ldrb	r3, [r3, #0]
 80126de:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80126e0:	7bfb      	ldrb	r3, [r7, #15]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d102      	bne.n	80126ec <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80126e6:	2304      	movs	r3, #4
 80126e8:	75fb      	strb	r3, [r7, #23]
 80126ea:	e031      	b.n	8012750 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6a1b      	ldr	r3, [r3, #32]
 80126f0:	330b      	adds	r3, #11
 80126f2:	781b      	ldrb	r3, [r3, #0]
 80126f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126f8:	73bb      	strb	r3, [r7, #14]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	7bba      	ldrb	r2, [r7, #14]
 80126fe:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012700:	7bfb      	ldrb	r3, [r7, #15]
 8012702:	2be5      	cmp	r3, #229	; 0xe5
 8012704:	d011      	beq.n	801272a <dir_read+0x7e>
 8012706:	7bfb      	ldrb	r3, [r7, #15]
 8012708:	2b2e      	cmp	r3, #46	; 0x2e
 801270a:	d00e      	beq.n	801272a <dir_read+0x7e>
 801270c:	7bbb      	ldrb	r3, [r7, #14]
 801270e:	2b0f      	cmp	r3, #15
 8012710:	d00b      	beq.n	801272a <dir_read+0x7e>
 8012712:	7bbb      	ldrb	r3, [r7, #14]
 8012714:	f023 0320 	bic.w	r3, r3, #32
 8012718:	2b08      	cmp	r3, #8
 801271a:	bf0c      	ite	eq
 801271c:	2301      	moveq	r3, #1
 801271e:	2300      	movne	r3, #0
 8012720:	b2db      	uxtb	r3, r3
 8012722:	461a      	mov	r2, r3
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	4293      	cmp	r3, r2
 8012728:	d00f      	beq.n	801274a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801272a:	2100      	movs	r1, #0
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f7ff fe61 	bl	80123f4 <dir_next>
 8012732:	4603      	mov	r3, r0
 8012734:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012736:	7dfb      	ldrb	r3, [r7, #23]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d108      	bne.n	801274e <dir_read+0xa2>
	while (dp->sect) {
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	69db      	ldr	r3, [r3, #28]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d1be      	bne.n	80126c2 <dir_read+0x16>
 8012744:	e004      	b.n	8012750 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012746:	bf00      	nop
 8012748:	e002      	b.n	8012750 <dir_read+0xa4>
				break;
 801274a:	bf00      	nop
 801274c:	e000      	b.n	8012750 <dir_read+0xa4>
		if (res != FR_OK) break;
 801274e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012750:	7dfb      	ldrb	r3, [r7, #23]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d002      	beq.n	801275c <dir_read+0xb0>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2200      	movs	r2, #0
 801275a:	61da      	str	r2, [r3, #28]
	return res;
 801275c:	7dfb      	ldrb	r3, [r7, #23]
}
 801275e:	4618      	mov	r0, r3
 8012760:	3718      	adds	r7, #24
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}

08012766 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012766:	b580      	push	{r7, lr}
 8012768:	b086      	sub	sp, #24
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012774:	2100      	movs	r1, #0
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f7ff fdb3 	bl	80122e2 <dir_sdi>
 801277c:	4603      	mov	r3, r0
 801277e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012780:	7dfb      	ldrb	r3, [r7, #23]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d001      	beq.n	801278a <dir_find+0x24>
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	e03e      	b.n	8012808 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	69db      	ldr	r3, [r3, #28]
 801278e:	4619      	mov	r1, r3
 8012790:	6938      	ldr	r0, [r7, #16]
 8012792:	f7ff f9cd 	bl	8011b30 <move_window>
 8012796:	4603      	mov	r3, r0
 8012798:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801279a:	7dfb      	ldrb	r3, [r7, #23]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d12f      	bne.n	8012800 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	6a1b      	ldr	r3, [r3, #32]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80127a8:	7bfb      	ldrb	r3, [r7, #15]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d102      	bne.n	80127b4 <dir_find+0x4e>
 80127ae:	2304      	movs	r3, #4
 80127b0:	75fb      	strb	r3, [r7, #23]
 80127b2:	e028      	b.n	8012806 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6a1b      	ldr	r3, [r3, #32]
 80127b8:	330b      	adds	r3, #11
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127c0:	b2da      	uxtb	r2, r3
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a1b      	ldr	r3, [r3, #32]
 80127ca:	330b      	adds	r3, #11
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	f003 0308 	and.w	r3, r3, #8
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d10a      	bne.n	80127ec <dir_find+0x86>
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6a18      	ldr	r0, [r3, #32]
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	3324      	adds	r3, #36	; 0x24
 80127de:	220b      	movs	r2, #11
 80127e0:	4619      	mov	r1, r3
 80127e2:	f7fe ffb2 	bl	801174a <mem_cmp>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00b      	beq.n	8012804 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80127ec:	2100      	movs	r1, #0
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	f7ff fe00 	bl	80123f4 <dir_next>
 80127f4:	4603      	mov	r3, r0
 80127f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80127f8:	7dfb      	ldrb	r3, [r7, #23]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d0c5      	beq.n	801278a <dir_find+0x24>
 80127fe:	e002      	b.n	8012806 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012800:	bf00      	nop
 8012802:	e000      	b.n	8012806 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012804:	bf00      	nop

	return res;
 8012806:	7dfb      	ldrb	r3, [r7, #23]
}
 8012808:	4618      	mov	r0, r3
 801280a:	3718      	adds	r7, #24
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}

08012810 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801281e:	2101      	movs	r1, #1
 8012820:	6878      	ldr	r0, [r7, #4]
 8012822:	f7ff febd 	bl	80125a0 <dir_alloc>
 8012826:	4603      	mov	r3, r0
 8012828:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801282a:	7bfb      	ldrb	r3, [r7, #15]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d11c      	bne.n	801286a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	69db      	ldr	r3, [r3, #28]
 8012834:	4619      	mov	r1, r3
 8012836:	68b8      	ldr	r0, [r7, #8]
 8012838:	f7ff f97a 	bl	8011b30 <move_window>
 801283c:	4603      	mov	r3, r0
 801283e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012840:	7bfb      	ldrb	r3, [r7, #15]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d111      	bne.n	801286a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a1b      	ldr	r3, [r3, #32]
 801284a:	2220      	movs	r2, #32
 801284c:	2100      	movs	r1, #0
 801284e:	4618      	mov	r0, r3
 8012850:	f7fe ff61 	bl	8011716 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	6a18      	ldr	r0, [r3, #32]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	3324      	adds	r3, #36	; 0x24
 801285c:	220b      	movs	r2, #11
 801285e:	4619      	mov	r1, r3
 8012860:	f7fe ff38 	bl	80116d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	2201      	movs	r2, #1
 8012868:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801286a:	7bfb      	ldrb	r3, [r7, #15]
}
 801286c:	4618      	mov	r0, r3
 801286e:	3710      	adds	r7, #16
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}

08012874 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	69db      	ldr	r3, [r3, #28]
 8012886:	4619      	mov	r1, r3
 8012888:	68f8      	ldr	r0, [r7, #12]
 801288a:	f7ff f951 	bl	8011b30 <move_window>
 801288e:	4603      	mov	r3, r0
 8012890:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012892:	7afb      	ldrb	r3, [r7, #11]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d106      	bne.n	80128a6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6a1b      	ldr	r3, [r3, #32]
 801289c:	22e5      	movs	r2, #229	; 0xe5
 801289e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2201      	movs	r2, #1
 80128a4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80128a6:	7afb      	ldrb	r3, [r7, #11]
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3710      	adds	r7, #16
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b088      	sub	sp, #32
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	60fb      	str	r3, [r7, #12]
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	3324      	adds	r3, #36	; 0x24
 80128c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80128c6:	220b      	movs	r2, #11
 80128c8:	2120      	movs	r1, #32
 80128ca:	68b8      	ldr	r0, [r7, #8]
 80128cc:	f7fe ff23 	bl	8011716 <mem_set>
	si = i = 0; ni = 8;
 80128d0:	2300      	movs	r3, #0
 80128d2:	613b      	str	r3, [r7, #16]
 80128d4:	693b      	ldr	r3, [r7, #16]
 80128d6:	617b      	str	r3, [r7, #20]
 80128d8:	2308      	movs	r3, #8
 80128da:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80128dc:	68fa      	ldr	r2, [r7, #12]
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	4413      	add	r3, r2
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b2e      	cmp	r3, #46	; 0x2e
 80128e6:	d12f      	bne.n	8012948 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80128e8:	697b      	ldr	r3, [r7, #20]
 80128ea:	1c5a      	adds	r2, r3, #1
 80128ec:	617a      	str	r2, [r7, #20]
 80128ee:	68fa      	ldr	r2, [r7, #12]
 80128f0:	4413      	add	r3, r2
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80128f6:	7ffb      	ldrb	r3, [r7, #31]
 80128f8:	2b2e      	cmp	r3, #46	; 0x2e
 80128fa:	d10a      	bne.n	8012912 <create_name+0x62>
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	2b02      	cmp	r3, #2
 8012900:	d807      	bhi.n	8012912 <create_name+0x62>
			sfn[i++] = c;
 8012902:	693b      	ldr	r3, [r7, #16]
 8012904:	1c5a      	adds	r2, r3, #1
 8012906:	613a      	str	r2, [r7, #16]
 8012908:	68ba      	ldr	r2, [r7, #8]
 801290a:	4413      	add	r3, r2
 801290c:	7ffa      	ldrb	r2, [r7, #31]
 801290e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012910:	e7ea      	b.n	80128e8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012912:	7ffb      	ldrb	r3, [r7, #31]
 8012914:	2b2f      	cmp	r3, #47	; 0x2f
 8012916:	d007      	beq.n	8012928 <create_name+0x78>
 8012918:	7ffb      	ldrb	r3, [r7, #31]
 801291a:	2b5c      	cmp	r3, #92	; 0x5c
 801291c:	d004      	beq.n	8012928 <create_name+0x78>
 801291e:	7ffb      	ldrb	r3, [r7, #31]
 8012920:	2b20      	cmp	r3, #32
 8012922:	d901      	bls.n	8012928 <create_name+0x78>
 8012924:	2306      	movs	r3, #6
 8012926:	e084      	b.n	8012a32 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012928:	68fa      	ldr	r2, [r7, #12]
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	441a      	add	r2, r3
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012932:	7ffb      	ldrb	r3, [r7, #31]
 8012934:	2b20      	cmp	r3, #32
 8012936:	d801      	bhi.n	801293c <create_name+0x8c>
 8012938:	2224      	movs	r2, #36	; 0x24
 801293a:	e000      	b.n	801293e <create_name+0x8e>
 801293c:	2220      	movs	r2, #32
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	330b      	adds	r3, #11
 8012942:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012944:	2300      	movs	r3, #0
 8012946:	e074      	b.n	8012a32 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	1c5a      	adds	r2, r3, #1
 801294c:	617a      	str	r2, [r7, #20]
 801294e:	68fa      	ldr	r2, [r7, #12]
 8012950:	4413      	add	r3, r2
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012956:	7ffb      	ldrb	r3, [r7, #31]
 8012958:	2b20      	cmp	r3, #32
 801295a:	d94e      	bls.n	80129fa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801295c:	7ffb      	ldrb	r3, [r7, #31]
 801295e:	2b2f      	cmp	r3, #47	; 0x2f
 8012960:	d006      	beq.n	8012970 <create_name+0xc0>
 8012962:	7ffb      	ldrb	r3, [r7, #31]
 8012964:	2b5c      	cmp	r3, #92	; 0x5c
 8012966:	d110      	bne.n	801298a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012968:	e002      	b.n	8012970 <create_name+0xc0>
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	3301      	adds	r3, #1
 801296e:	617b      	str	r3, [r7, #20]
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	4413      	add	r3, r2
 8012976:	781b      	ldrb	r3, [r3, #0]
 8012978:	2b2f      	cmp	r3, #47	; 0x2f
 801297a:	d0f6      	beq.n	801296a <create_name+0xba>
 801297c:	68fa      	ldr	r2, [r7, #12]
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	4413      	add	r3, r2
 8012982:	781b      	ldrb	r3, [r3, #0]
 8012984:	2b5c      	cmp	r3, #92	; 0x5c
 8012986:	d0f0      	beq.n	801296a <create_name+0xba>
			break;
 8012988:	e038      	b.n	80129fc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801298a:	7ffb      	ldrb	r3, [r7, #31]
 801298c:	2b2e      	cmp	r3, #46	; 0x2e
 801298e:	d003      	beq.n	8012998 <create_name+0xe8>
 8012990:	693a      	ldr	r2, [r7, #16]
 8012992:	69bb      	ldr	r3, [r7, #24]
 8012994:	429a      	cmp	r2, r3
 8012996:	d30c      	bcc.n	80129b2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	2b0b      	cmp	r3, #11
 801299c:	d002      	beq.n	80129a4 <create_name+0xf4>
 801299e:	7ffb      	ldrb	r3, [r7, #31]
 80129a0:	2b2e      	cmp	r3, #46	; 0x2e
 80129a2:	d001      	beq.n	80129a8 <create_name+0xf8>
 80129a4:	2306      	movs	r3, #6
 80129a6:	e044      	b.n	8012a32 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80129a8:	2308      	movs	r3, #8
 80129aa:	613b      	str	r3, [r7, #16]
 80129ac:	230b      	movs	r3, #11
 80129ae:	61bb      	str	r3, [r7, #24]
			continue;
 80129b0:	e022      	b.n	80129f8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80129b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	da04      	bge.n	80129c4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80129ba:	7ffb      	ldrb	r3, [r7, #31]
 80129bc:	3b80      	subs	r3, #128	; 0x80
 80129be:	4a1f      	ldr	r2, [pc, #124]	; (8012a3c <create_name+0x18c>)
 80129c0:	5cd3      	ldrb	r3, [r2, r3]
 80129c2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80129c4:	7ffb      	ldrb	r3, [r7, #31]
 80129c6:	4619      	mov	r1, r3
 80129c8:	481d      	ldr	r0, [pc, #116]	; (8012a40 <create_name+0x190>)
 80129ca:	f7fe fee5 	bl	8011798 <chk_chr>
 80129ce:	4603      	mov	r3, r0
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d001      	beq.n	80129d8 <create_name+0x128>
 80129d4:	2306      	movs	r3, #6
 80129d6:	e02c      	b.n	8012a32 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80129d8:	7ffb      	ldrb	r3, [r7, #31]
 80129da:	2b60      	cmp	r3, #96	; 0x60
 80129dc:	d905      	bls.n	80129ea <create_name+0x13a>
 80129de:	7ffb      	ldrb	r3, [r7, #31]
 80129e0:	2b7a      	cmp	r3, #122	; 0x7a
 80129e2:	d802      	bhi.n	80129ea <create_name+0x13a>
 80129e4:	7ffb      	ldrb	r3, [r7, #31]
 80129e6:	3b20      	subs	r3, #32
 80129e8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	1c5a      	adds	r2, r3, #1
 80129ee:	613a      	str	r2, [r7, #16]
 80129f0:	68ba      	ldr	r2, [r7, #8]
 80129f2:	4413      	add	r3, r2
 80129f4:	7ffa      	ldrb	r2, [r7, #31]
 80129f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80129f8:	e7a6      	b.n	8012948 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80129fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	697b      	ldr	r3, [r7, #20]
 8012a00:	441a      	add	r2, r3
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d101      	bne.n	8012a10 <create_name+0x160>
 8012a0c:	2306      	movs	r3, #6
 8012a0e:	e010      	b.n	8012a32 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	2be5      	cmp	r3, #229	; 0xe5
 8012a16:	d102      	bne.n	8012a1e <create_name+0x16e>
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	2205      	movs	r2, #5
 8012a1c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012a1e:	7ffb      	ldrb	r3, [r7, #31]
 8012a20:	2b20      	cmp	r3, #32
 8012a22:	d801      	bhi.n	8012a28 <create_name+0x178>
 8012a24:	2204      	movs	r2, #4
 8012a26:	e000      	b.n	8012a2a <create_name+0x17a>
 8012a28:	2200      	movs	r2, #0
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	330b      	adds	r3, #11
 8012a2e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012a30:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3720      	adds	r7, #32
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	0801a08c 	.word	0x0801a08c
 8012a40:	0801a03c 	.word	0x0801a03c

08012a44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b086      	sub	sp, #24
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
 8012a4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a5e:	d00b      	beq.n	8012a78 <follow_path+0x34>
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	781b      	ldrb	r3, [r3, #0]
 8012a64:	2b5c      	cmp	r3, #92	; 0x5c
 8012a66:	d007      	beq.n	8012a78 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	699a      	ldr	r2, [r3, #24]
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	609a      	str	r2, [r3, #8]
 8012a70:	e00d      	b.n	8012a8e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	3301      	adds	r3, #1
 8012a76:	603b      	str	r3, [r7, #0]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	2b2f      	cmp	r3, #47	; 0x2f
 8012a7e:	d0f8      	beq.n	8012a72 <follow_path+0x2e>
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	2b5c      	cmp	r3, #92	; 0x5c
 8012a86:	d0f4      	beq.n	8012a72 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	2b1f      	cmp	r3, #31
 8012a94:	d80a      	bhi.n	8012aac <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	2280      	movs	r2, #128	; 0x80
 8012a9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012a9e:	2100      	movs	r1, #0
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f7ff fc1e 	bl	80122e2 <dir_sdi>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	75fb      	strb	r3, [r7, #23]
 8012aaa:	e05b      	b.n	8012b64 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012aac:	463b      	mov	r3, r7
 8012aae:	4619      	mov	r1, r3
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f7ff fefd 	bl	80128b0 <create_name>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d14c      	bne.n	8012b5a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f7ff fe50 	bl	8012766 <dir_find>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012ad0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012ad2:	7dfb      	ldrb	r3, [r7, #23]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d01b      	beq.n	8012b10 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012ad8:	7dfb      	ldrb	r3, [r7, #23]
 8012ada:	2b04      	cmp	r3, #4
 8012adc:	d13f      	bne.n	8012b5e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012ade:	7afb      	ldrb	r3, [r7, #11]
 8012ae0:	f003 0320 	and.w	r3, r3, #32
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d00b      	beq.n	8012b00 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012ae8:	7afb      	ldrb	r3, [r7, #11]
 8012aea:	f003 0304 	and.w	r3, r3, #4
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d031      	beq.n	8012b56 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2280      	movs	r2, #128	; 0x80
 8012af6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012afa:	2300      	movs	r3, #0
 8012afc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012afe:	e02e      	b.n	8012b5e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012b00:	7afb      	ldrb	r3, [r7, #11]
 8012b02:	f003 0304 	and.w	r3, r3, #4
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d129      	bne.n	8012b5e <follow_path+0x11a>
 8012b0a:	2305      	movs	r3, #5
 8012b0c:	75fb      	strb	r3, [r7, #23]
				break;
 8012b0e:	e026      	b.n	8012b5e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b10:	7afb      	ldrb	r3, [r7, #11]
 8012b12:	f003 0304 	and.w	r3, r3, #4
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d123      	bne.n	8012b62 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012b1a:	693b      	ldr	r3, [r7, #16]
 8012b1c:	799b      	ldrb	r3, [r3, #6]
 8012b1e:	f003 0310 	and.w	r3, r3, #16
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d102      	bne.n	8012b2c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012b26:	2305      	movs	r3, #5
 8012b28:	75fb      	strb	r3, [r7, #23]
 8012b2a:	e01b      	b.n	8012b64 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	695b      	ldr	r3, [r3, #20]
 8012b36:	68fa      	ldr	r2, [r7, #12]
 8012b38:	8992      	ldrh	r2, [r2, #12]
 8012b3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8012b3e:	fb02 f200 	mul.w	r2, r2, r0
 8012b42:	1a9b      	subs	r3, r3, r2
 8012b44:	440b      	add	r3, r1
 8012b46:	4619      	mov	r1, r3
 8012b48:	68f8      	ldr	r0, [r7, #12]
 8012b4a:	f7ff fd70 	bl	801262e <ld_clust>
 8012b4e:	4602      	mov	r2, r0
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	609a      	str	r2, [r3, #8]
 8012b54:	e7aa      	b.n	8012aac <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012b56:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b58:	e7a8      	b.n	8012aac <follow_path+0x68>
			if (res != FR_OK) break;
 8012b5a:	bf00      	nop
 8012b5c:	e002      	b.n	8012b64 <follow_path+0x120>
				break;
 8012b5e:	bf00      	nop
 8012b60:	e000      	b.n	8012b64 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012b62:	bf00      	nop
			}
		}
	}

	return res;
 8012b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b66:	4618      	mov	r0, r3
 8012b68:	3718      	adds	r7, #24
 8012b6a:	46bd      	mov	sp, r7
 8012b6c:	bd80      	pop	{r7, pc}

08012b6e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012b6e:	b480      	push	{r7}
 8012b70:	b087      	sub	sp, #28
 8012b72:	af00      	add	r7, sp, #0
 8012b74:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012b76:	f04f 33ff 	mov.w	r3, #4294967295
 8012b7a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d031      	beq.n	8012be8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	617b      	str	r3, [r7, #20]
 8012b8a:	e002      	b.n	8012b92 <get_ldnumber+0x24>
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	617b      	str	r3, [r7, #20]
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	781b      	ldrb	r3, [r3, #0]
 8012b96:	2b20      	cmp	r3, #32
 8012b98:	d903      	bls.n	8012ba2 <get_ldnumber+0x34>
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	781b      	ldrb	r3, [r3, #0]
 8012b9e:	2b3a      	cmp	r3, #58	; 0x3a
 8012ba0:	d1f4      	bne.n	8012b8c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	781b      	ldrb	r3, [r3, #0]
 8012ba6:	2b3a      	cmp	r3, #58	; 0x3a
 8012ba8:	d11c      	bne.n	8012be4 <get_ldnumber+0x76>
			tp = *path;
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	1c5a      	adds	r2, r3, #1
 8012bb4:	60fa      	str	r2, [r7, #12]
 8012bb6:	781b      	ldrb	r3, [r3, #0]
 8012bb8:	3b30      	subs	r3, #48	; 0x30
 8012bba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	2b09      	cmp	r3, #9
 8012bc0:	d80e      	bhi.n	8012be0 <get_ldnumber+0x72>
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d10a      	bne.n	8012be0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d107      	bne.n	8012be0 <get_ldnumber+0x72>
					vol = (int)i;
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	617b      	str	r3, [r7, #20]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	697a      	ldr	r2, [r7, #20]
 8012bde:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	e002      	b.n	8012bea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012be4:	2300      	movs	r3, #0
 8012be6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012be8:	693b      	ldr	r3, [r7, #16]
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	371c      	adds	r7, #28
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf4:	4770      	bx	lr
	...

08012bf8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	2200      	movs	r2, #0
 8012c06:	70da      	strb	r2, [r3, #3]
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012c10:	6839      	ldr	r1, [r7, #0]
 8012c12:	6878      	ldr	r0, [r7, #4]
 8012c14:	f7fe ff8c 	bl	8011b30 <move_window>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d001      	beq.n	8012c22 <check_fs+0x2a>
 8012c1e:	2304      	movs	r3, #4
 8012c20:	e038      	b.n	8012c94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	3338      	adds	r3, #56	; 0x38
 8012c26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fe fcd0 	bl	80115d0 <ld_word>
 8012c30:	4603      	mov	r3, r0
 8012c32:	461a      	mov	r2, r3
 8012c34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d001      	beq.n	8012c40 <check_fs+0x48>
 8012c3c:	2303      	movs	r3, #3
 8012c3e:	e029      	b.n	8012c94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c46:	2be9      	cmp	r3, #233	; 0xe9
 8012c48:	d009      	beq.n	8012c5e <check_fs+0x66>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012c50:	2beb      	cmp	r3, #235	; 0xeb
 8012c52:	d11e      	bne.n	8012c92 <check_fs+0x9a>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012c5a:	2b90      	cmp	r3, #144	; 0x90
 8012c5c:	d119      	bne.n	8012c92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	3338      	adds	r3, #56	; 0x38
 8012c62:	3336      	adds	r3, #54	; 0x36
 8012c64:	4618      	mov	r0, r3
 8012c66:	f7fe fccb 	bl	8011600 <ld_dword>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012c70:	4a0a      	ldr	r2, [pc, #40]	; (8012c9c <check_fs+0xa4>)
 8012c72:	4293      	cmp	r3, r2
 8012c74:	d101      	bne.n	8012c7a <check_fs+0x82>
 8012c76:	2300      	movs	r3, #0
 8012c78:	e00c      	b.n	8012c94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	3338      	adds	r3, #56	; 0x38
 8012c7e:	3352      	adds	r3, #82	; 0x52
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fe fcbd 	bl	8011600 <ld_dword>
 8012c86:	4602      	mov	r2, r0
 8012c88:	4b05      	ldr	r3, [pc, #20]	; (8012ca0 <check_fs+0xa8>)
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d101      	bne.n	8012c92 <check_fs+0x9a>
 8012c8e:	2300      	movs	r3, #0
 8012c90:	e000      	b.n	8012c94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012c92:	2302      	movs	r3, #2
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	3708      	adds	r7, #8
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}
 8012c9c:	00544146 	.word	0x00544146
 8012ca0:	33544146 	.word	0x33544146

08012ca4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b096      	sub	sp, #88	; 0x58
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	60f8      	str	r0, [r7, #12]
 8012cac:	60b9      	str	r1, [r7, #8]
 8012cae:	4613      	mov	r3, r2
 8012cb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012cb2:	68bb      	ldr	r3, [r7, #8]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f7ff ff58 	bl	8012b6e <get_ldnumber>
 8012cbe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	da01      	bge.n	8012cca <find_volume+0x26>
 8012cc6:	230b      	movs	r3, #11
 8012cc8:	e268      	b.n	801319c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012cca:	4ab0      	ldr	r2, [pc, #704]	; (8012f8c <find_volume+0x2e8>)
 8012ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d101      	bne.n	8012cde <find_volume+0x3a>
 8012cda:	230c      	movs	r3, #12
 8012cdc:	e25e      	b.n	801319c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012cde:	68bb      	ldr	r3, [r7, #8]
 8012ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ce2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012ce4:	79fb      	ldrb	r3, [r7, #7]
 8012ce6:	f023 0301 	bic.w	r3, r3, #1
 8012cea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d01a      	beq.n	8012d2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf6:	785b      	ldrb	r3, [r3, #1]
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7fe fbcb 	bl	8011494 <disk_status>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d08:	f003 0301 	and.w	r3, r3, #1
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d10c      	bne.n	8012d2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012d10:	79fb      	ldrb	r3, [r7, #7]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d007      	beq.n	8012d26 <find_volume+0x82>
 8012d16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d1a:	f003 0304 	and.w	r3, r3, #4
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012d22:	230a      	movs	r3, #10
 8012d24:	e23a      	b.n	801319c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012d26:	2300      	movs	r3, #0
 8012d28:	e238      	b.n	801319c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d32:	b2da      	uxtb	r2, r3
 8012d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3a:	785b      	ldrb	r3, [r3, #1]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fe fbc3 	bl	80114c8 <disk_initialize>
 8012d42:	4603      	mov	r3, r0
 8012d44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012d48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d4c:	f003 0301 	and.w	r3, r3, #1
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d001      	beq.n	8012d58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012d54:	2303      	movs	r3, #3
 8012d56:	e221      	b.n	801319c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012d58:	79fb      	ldrb	r3, [r7, #7]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d007      	beq.n	8012d6e <find_volume+0xca>
 8012d5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d62:	f003 0304 	and.w	r3, r3, #4
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d001      	beq.n	8012d6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012d6a:	230a      	movs	r3, #10
 8012d6c:	e216      	b.n	801319c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d70:	7858      	ldrb	r0, [r3, #1]
 8012d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d74:	330c      	adds	r3, #12
 8012d76:	461a      	mov	r2, r3
 8012d78:	2102      	movs	r1, #2
 8012d7a:	f7fe fc0b 	bl	8011594 <disk_ioctl>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d001      	beq.n	8012d88 <find_volume+0xe4>
 8012d84:	2301      	movs	r3, #1
 8012d86:	e209      	b.n	801319c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8a:	899b      	ldrh	r3, [r3, #12]
 8012d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012d90:	d80d      	bhi.n	8012dae <find_volume+0x10a>
 8012d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d94:	899b      	ldrh	r3, [r3, #12]
 8012d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012d9a:	d308      	bcc.n	8012dae <find_volume+0x10a>
 8012d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d9e:	899b      	ldrh	r3, [r3, #12]
 8012da0:	461a      	mov	r2, r3
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	899b      	ldrh	r3, [r3, #12]
 8012da6:	3b01      	subs	r3, #1
 8012da8:	4013      	ands	r3, r2
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d001      	beq.n	8012db2 <find_volume+0x10e>
 8012dae:	2301      	movs	r3, #1
 8012db0:	e1f4      	b.n	801319c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012db2:	2300      	movs	r3, #0
 8012db4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012db6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012db8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dba:	f7ff ff1d 	bl	8012bf8 <check_fs>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012dc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dc8:	2b02      	cmp	r3, #2
 8012dca:	d14b      	bne.n	8012e64 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012dcc:	2300      	movs	r3, #0
 8012dce:	643b      	str	r3, [r7, #64]	; 0x40
 8012dd0:	e01f      	b.n	8012e12 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012dda:	011b      	lsls	r3, r3, #4
 8012ddc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012de0:	4413      	add	r3, r2
 8012de2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012de6:	3304      	adds	r3, #4
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d006      	beq.n	8012dfc <find_volume+0x158>
 8012dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012df0:	3308      	adds	r3, #8
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fe fc04 	bl	8011600 <ld_dword>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	e000      	b.n	8012dfe <find_volume+0x15a>
 8012dfc:	2200      	movs	r2, #0
 8012dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e00:	009b      	lsls	r3, r3, #2
 8012e02:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012e06:	440b      	add	r3, r1
 8012e08:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e0e:	3301      	adds	r3, #1
 8012e10:	643b      	str	r3, [r7, #64]	; 0x40
 8012e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e14:	2b03      	cmp	r3, #3
 8012e16:	d9dc      	bls.n	8012dd2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012e18:	2300      	movs	r3, #0
 8012e1a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d002      	beq.n	8012e28 <find_volume+0x184>
 8012e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e24:	3b01      	subs	r3, #1
 8012e26:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e2a:	009b      	lsls	r3, r3, #2
 8012e2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012e30:	4413      	add	r3, r2
 8012e32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012e36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d005      	beq.n	8012e4a <find_volume+0x1a6>
 8012e3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e42:	f7ff fed9 	bl	8012bf8 <check_fs>
 8012e46:	4603      	mov	r3, r0
 8012e48:	e000      	b.n	8012e4c <find_volume+0x1a8>
 8012e4a:	2303      	movs	r3, #3
 8012e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012e50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e54:	2b01      	cmp	r3, #1
 8012e56:	d905      	bls.n	8012e64 <find_volume+0x1c0>
 8012e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8012e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e60:	2b03      	cmp	r3, #3
 8012e62:	d9e1      	bls.n	8012e28 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012e64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e68:	2b04      	cmp	r3, #4
 8012e6a:	d101      	bne.n	8012e70 <find_volume+0x1cc>
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	e195      	b.n	801319c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012e70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d901      	bls.n	8012e7c <find_volume+0x1d8>
 8012e78:	230d      	movs	r3, #13
 8012e7a:	e18f      	b.n	801319c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e7e:	3338      	adds	r3, #56	; 0x38
 8012e80:	330b      	adds	r3, #11
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fe fba4 	bl	80115d0 <ld_word>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e8e:	899b      	ldrh	r3, [r3, #12]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d001      	beq.n	8012e98 <find_volume+0x1f4>
 8012e94:	230d      	movs	r3, #13
 8012e96:	e181      	b.n	801319c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9a:	3338      	adds	r3, #56	; 0x38
 8012e9c:	3316      	adds	r3, #22
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fe fb96 	bl	80115d0 <ld_word>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d106      	bne.n	8012ebc <find_volume+0x218>
 8012eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb0:	3338      	adds	r3, #56	; 0x38
 8012eb2:	3324      	adds	r3, #36	; 0x24
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f7fe fba3 	bl	8011600 <ld_dword>
 8012eba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ec0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ece:	789b      	ldrb	r3, [r3, #2]
 8012ed0:	2b01      	cmp	r3, #1
 8012ed2:	d005      	beq.n	8012ee0 <find_volume+0x23c>
 8012ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ed6:	789b      	ldrb	r3, [r3, #2]
 8012ed8:	2b02      	cmp	r3, #2
 8012eda:	d001      	beq.n	8012ee0 <find_volume+0x23c>
 8012edc:	230d      	movs	r3, #13
 8012ede:	e15d      	b.n	801319c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee2:	789b      	ldrb	r3, [r3, #2]
 8012ee4:	461a      	mov	r2, r3
 8012ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ee8:	fb02 f303 	mul.w	r3, r2, r3
 8012eec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ef4:	b29a      	uxth	r2, r3
 8012ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012efc:	895b      	ldrh	r3, [r3, #10]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d008      	beq.n	8012f14 <find_volume+0x270>
 8012f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f04:	895b      	ldrh	r3, [r3, #10]
 8012f06:	461a      	mov	r2, r3
 8012f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f0a:	895b      	ldrh	r3, [r3, #10]
 8012f0c:	3b01      	subs	r3, #1
 8012f0e:	4013      	ands	r3, r2
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d001      	beq.n	8012f18 <find_volume+0x274>
 8012f14:	230d      	movs	r3, #13
 8012f16:	e141      	b.n	801319c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	3338      	adds	r3, #56	; 0x38
 8012f1c:	3311      	adds	r3, #17
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fe fb56 	bl	80115d0 <ld_word>
 8012f24:	4603      	mov	r3, r0
 8012f26:	461a      	mov	r2, r3
 8012f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	891b      	ldrh	r3, [r3, #8]
 8012f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f32:	8992      	ldrh	r2, [r2, #12]
 8012f34:	0952      	lsrs	r2, r2, #5
 8012f36:	b292      	uxth	r2, r2
 8012f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8012f3c:	fb02 f201 	mul.w	r2, r2, r1
 8012f40:	1a9b      	subs	r3, r3, r2
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d001      	beq.n	8012f4c <find_volume+0x2a8>
 8012f48:	230d      	movs	r3, #13
 8012f4a:	e127      	b.n	801319c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4e:	3338      	adds	r3, #56	; 0x38
 8012f50:	3313      	adds	r3, #19
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe fb3c 	bl	80115d0 <ld_word>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d106      	bne.n	8012f70 <find_volume+0x2cc>
 8012f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f64:	3338      	adds	r3, #56	; 0x38
 8012f66:	3320      	adds	r3, #32
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7fe fb49 	bl	8011600 <ld_dword>
 8012f6e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f72:	3338      	adds	r3, #56	; 0x38
 8012f74:	330e      	adds	r3, #14
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fe fb2a 	bl	80115d0 <ld_word>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d104      	bne.n	8012f90 <find_volume+0x2ec>
 8012f86:	230d      	movs	r3, #13
 8012f88:	e108      	b.n	801319c <find_volume+0x4f8>
 8012f8a:	bf00      	nop
 8012f8c:	200422cc 	.word	0x200422cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012f90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f94:	4413      	add	r3, r2
 8012f96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f98:	8911      	ldrh	r1, [r2, #8]
 8012f9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f9c:	8992      	ldrh	r2, [r2, #12]
 8012f9e:	0952      	lsrs	r2, r2, #5
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	fbb1 f2f2 	udiv	r2, r1, r2
 8012fa6:	b292      	uxth	r2, r2
 8012fa8:	4413      	add	r3, r2
 8012faa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012fac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d201      	bcs.n	8012fb8 <find_volume+0x314>
 8012fb4:	230d      	movs	r3, #13
 8012fb6:	e0f1      	b.n	801319c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012fb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fbc:	1ad3      	subs	r3, r2, r3
 8012fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fc0:	8952      	ldrh	r2, [r2, #10]
 8012fc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012fc6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d101      	bne.n	8012fd2 <find_volume+0x32e>
 8012fce:	230d      	movs	r3, #13
 8012fd0:	e0e4      	b.n	801319c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012fd2:	2303      	movs	r3, #3
 8012fd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fda:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d802      	bhi.n	8012fe8 <find_volume+0x344>
 8012fe2:	2302      	movs	r3, #2
 8012fe4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d802      	bhi.n	8012ff8 <find_volume+0x354>
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ffa:	1c9a      	adds	r2, r3, #2
 8012ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013002:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013004:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013006:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801300a:	441a      	add	r2, r3
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013014:	441a      	add	r2, r3
 8013016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013018:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801301a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801301e:	2b03      	cmp	r3, #3
 8013020:	d11e      	bne.n	8013060 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	3338      	adds	r3, #56	; 0x38
 8013026:	332a      	adds	r3, #42	; 0x2a
 8013028:	4618      	mov	r0, r3
 801302a:	f7fe fad1 	bl	80115d0 <ld_word>
 801302e:	4603      	mov	r3, r0
 8013030:	2b00      	cmp	r3, #0
 8013032:	d001      	beq.n	8013038 <find_volume+0x394>
 8013034:	230d      	movs	r3, #13
 8013036:	e0b1      	b.n	801319c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303a:	891b      	ldrh	r3, [r3, #8]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d001      	beq.n	8013044 <find_volume+0x3a0>
 8013040:	230d      	movs	r3, #13
 8013042:	e0ab      	b.n	801319c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013046:	3338      	adds	r3, #56	; 0x38
 8013048:	332c      	adds	r3, #44	; 0x2c
 801304a:	4618      	mov	r0, r3
 801304c:	f7fe fad8 	bl	8011600 <ld_dword>
 8013050:	4602      	mov	r2, r0
 8013052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013054:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013058:	69db      	ldr	r3, [r3, #28]
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	647b      	str	r3, [r7, #68]	; 0x44
 801305e:	e01f      	b.n	80130a0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013062:	891b      	ldrh	r3, [r3, #8]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d101      	bne.n	801306c <find_volume+0x3c8>
 8013068:	230d      	movs	r3, #13
 801306a:	e097      	b.n	801319c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013072:	441a      	add	r2, r3
 8013074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013076:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801307c:	2b02      	cmp	r3, #2
 801307e:	d103      	bne.n	8013088 <find_volume+0x3e4>
 8013080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013082:	69db      	ldr	r3, [r3, #28]
 8013084:	005b      	lsls	r3, r3, #1
 8013086:	e00a      	b.n	801309e <find_volume+0x3fa>
 8013088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801308a:	69da      	ldr	r2, [r3, #28]
 801308c:	4613      	mov	r3, r2
 801308e:	005b      	lsls	r3, r3, #1
 8013090:	4413      	add	r3, r2
 8013092:	085a      	lsrs	r2, r3, #1
 8013094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	f003 0301 	and.w	r3, r3, #1
 801309c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801309e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80130a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a2:	6a1a      	ldr	r2, [r3, #32]
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	899b      	ldrh	r3, [r3, #12]
 80130a8:	4619      	mov	r1, r3
 80130aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130ac:	440b      	add	r3, r1
 80130ae:	3b01      	subs	r3, #1
 80130b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130b2:	8989      	ldrh	r1, [r1, #12]
 80130b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d201      	bcs.n	80130c0 <find_volume+0x41c>
 80130bc:	230d      	movs	r3, #13
 80130be:	e06d      	b.n	801319c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80130c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c2:	f04f 32ff 	mov.w	r2, #4294967295
 80130c6:	615a      	str	r2, [r3, #20]
 80130c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ca:	695a      	ldr	r2, [r3, #20]
 80130cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ce:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	2280      	movs	r2, #128	; 0x80
 80130d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80130d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130da:	2b03      	cmp	r3, #3
 80130dc:	d149      	bne.n	8013172 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80130de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e0:	3338      	adds	r3, #56	; 0x38
 80130e2:	3330      	adds	r3, #48	; 0x30
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7fe fa73 	bl	80115d0 <ld_word>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d140      	bne.n	8013172 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80130f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130f2:	3301      	adds	r3, #1
 80130f4:	4619      	mov	r1, r3
 80130f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130f8:	f7fe fd1a 	bl	8011b30 <move_window>
 80130fc:	4603      	mov	r3, r0
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d137      	bne.n	8013172 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8013102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013104:	2200      	movs	r2, #0
 8013106:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310a:	3338      	adds	r3, #56	; 0x38
 801310c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013110:	4618      	mov	r0, r3
 8013112:	f7fe fa5d 	bl	80115d0 <ld_word>
 8013116:	4603      	mov	r3, r0
 8013118:	461a      	mov	r2, r3
 801311a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801311e:	429a      	cmp	r2, r3
 8013120:	d127      	bne.n	8013172 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013124:	3338      	adds	r3, #56	; 0x38
 8013126:	4618      	mov	r0, r3
 8013128:	f7fe fa6a 	bl	8011600 <ld_dword>
 801312c:	4602      	mov	r2, r0
 801312e:	4b1d      	ldr	r3, [pc, #116]	; (80131a4 <find_volume+0x500>)
 8013130:	429a      	cmp	r2, r3
 8013132:	d11e      	bne.n	8013172 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	3338      	adds	r3, #56	; 0x38
 8013138:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801313c:	4618      	mov	r0, r3
 801313e:	f7fe fa5f 	bl	8011600 <ld_dword>
 8013142:	4602      	mov	r2, r0
 8013144:	4b18      	ldr	r3, [pc, #96]	; (80131a8 <find_volume+0x504>)
 8013146:	429a      	cmp	r2, r3
 8013148:	d113      	bne.n	8013172 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801314a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314c:	3338      	adds	r3, #56	; 0x38
 801314e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013152:	4618      	mov	r0, r3
 8013154:	f7fe fa54 	bl	8011600 <ld_dword>
 8013158:	4602      	mov	r2, r0
 801315a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013160:	3338      	adds	r3, #56	; 0x38
 8013162:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013166:	4618      	mov	r0, r3
 8013168:	f7fe fa4a 	bl	8011600 <ld_dword>
 801316c:	4602      	mov	r2, r0
 801316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013170:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013174:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013178:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801317a:	4b0c      	ldr	r3, [pc, #48]	; (80131ac <find_volume+0x508>)
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	3301      	adds	r3, #1
 8013180:	b29a      	uxth	r2, r3
 8013182:	4b0a      	ldr	r3, [pc, #40]	; (80131ac <find_volume+0x508>)
 8013184:	801a      	strh	r2, [r3, #0]
 8013186:	4b09      	ldr	r3, [pc, #36]	; (80131ac <find_volume+0x508>)
 8013188:	881a      	ldrh	r2, [r3, #0]
 801318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801318e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013190:	2200      	movs	r2, #0
 8013192:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013194:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013196:	f7fe fc63 	bl	8011a60 <clear_lock>
#endif
	return FR_OK;
 801319a:	2300      	movs	r3, #0
}
 801319c:	4618      	mov	r0, r3
 801319e:	3758      	adds	r7, #88	; 0x58
 80131a0:	46bd      	mov	sp, r7
 80131a2:	bd80      	pop	{r7, pc}
 80131a4:	41615252 	.word	0x41615252
 80131a8:	61417272 	.word	0x61417272
 80131ac:	200422d0 	.word	0x200422d0

080131b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80131ba:	2309      	movs	r3, #9
 80131bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d01c      	beq.n	80131fe <validate+0x4e>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d018      	beq.n	80131fe <validate+0x4e>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d013      	beq.n	80131fe <validate+0x4e>
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	889a      	ldrh	r2, [r3, #4]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	88db      	ldrh	r3, [r3, #6]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d10c      	bne.n	80131fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	785b      	ldrb	r3, [r3, #1]
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7fe f952 	bl	8011494 <disk_status>
 80131f0:	4603      	mov	r3, r0
 80131f2:	f003 0301 	and.w	r3, r3, #1
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d101      	bne.n	80131fe <validate+0x4e>
			res = FR_OK;
 80131fa:	2300      	movs	r3, #0
 80131fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80131fe:	7bfb      	ldrb	r3, [r7, #15]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d102      	bne.n	801320a <validate+0x5a>
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	e000      	b.n	801320c <validate+0x5c>
 801320a:	2300      	movs	r3, #0
 801320c:	683a      	ldr	r2, [r7, #0]
 801320e:	6013      	str	r3, [r2, #0]
	return res;
 8013210:	7bfb      	ldrb	r3, [r7, #15]
}
 8013212:	4618      	mov	r0, r3
 8013214:	3710      	adds	r7, #16
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}
	...

0801321c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b088      	sub	sp, #32
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	4613      	mov	r3, r2
 8013228:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801322e:	f107 0310 	add.w	r3, r7, #16
 8013232:	4618      	mov	r0, r3
 8013234:	f7ff fc9b 	bl	8012b6e <get_ldnumber>
 8013238:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801323a:	69fb      	ldr	r3, [r7, #28]
 801323c:	2b00      	cmp	r3, #0
 801323e:	da01      	bge.n	8013244 <f_mount+0x28>
 8013240:	230b      	movs	r3, #11
 8013242:	e02b      	b.n	801329c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013244:	4a17      	ldr	r2, [pc, #92]	; (80132a4 <f_mount+0x88>)
 8013246:	69fb      	ldr	r3, [r7, #28]
 8013248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801324c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d005      	beq.n	8013260 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013254:	69b8      	ldr	r0, [r7, #24]
 8013256:	f7fe fc03 	bl	8011a60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	2200      	movs	r2, #0
 801325e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d002      	beq.n	801326c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2200      	movs	r2, #0
 801326a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801326c:	68fa      	ldr	r2, [r7, #12]
 801326e:	490d      	ldr	r1, [pc, #52]	; (80132a4 <f_mount+0x88>)
 8013270:	69fb      	ldr	r3, [r7, #28]
 8013272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d002      	beq.n	8013282 <f_mount+0x66>
 801327c:	79fb      	ldrb	r3, [r7, #7]
 801327e:	2b01      	cmp	r3, #1
 8013280:	d001      	beq.n	8013286 <f_mount+0x6a>
 8013282:	2300      	movs	r3, #0
 8013284:	e00a      	b.n	801329c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013286:	f107 010c 	add.w	r1, r7, #12
 801328a:	f107 0308 	add.w	r3, r7, #8
 801328e:	2200      	movs	r2, #0
 8013290:	4618      	mov	r0, r3
 8013292:	f7ff fd07 	bl	8012ca4 <find_volume>
 8013296:	4603      	mov	r3, r0
 8013298:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801329a:	7dfb      	ldrb	r3, [r7, #23]
}
 801329c:	4618      	mov	r0, r3
 801329e:	3720      	adds	r7, #32
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	200422cc 	.word	0x200422cc

080132a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b098      	sub	sp, #96	; 0x60
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	4613      	mov	r3, r2
 80132b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d101      	bne.n	80132c0 <f_open+0x18>
 80132bc:	2309      	movs	r3, #9
 80132be:	e1ba      	b.n	8013636 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80132c0:	79fb      	ldrb	r3, [r7, #7]
 80132c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80132c8:	79fa      	ldrb	r2, [r7, #7]
 80132ca:	f107 0110 	add.w	r1, r7, #16
 80132ce:	f107 0308 	add.w	r3, r7, #8
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7ff fce6 	bl	8012ca4 <find_volume>
 80132d8:	4603      	mov	r3, r0
 80132da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80132de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f040 819e 	bne.w	8013624 <f_open+0x37c>
		dj.obj.fs = fs;
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80132ec:	68ba      	ldr	r2, [r7, #8]
 80132ee:	f107 0314 	add.w	r3, r7, #20
 80132f2:	4611      	mov	r1, r2
 80132f4:	4618      	mov	r0, r3
 80132f6:	f7ff fba5 	bl	8012a44 <follow_path>
 80132fa:	4603      	mov	r3, r0
 80132fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013300:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013304:	2b00      	cmp	r3, #0
 8013306:	d11a      	bne.n	801333e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013308:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801330c:	b25b      	sxtb	r3, r3
 801330e:	2b00      	cmp	r3, #0
 8013310:	da03      	bge.n	801331a <f_open+0x72>
				res = FR_INVALID_NAME;
 8013312:	2306      	movs	r3, #6
 8013314:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013318:	e011      	b.n	801333e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801331a:	79fb      	ldrb	r3, [r7, #7]
 801331c:	f023 0301 	bic.w	r3, r3, #1
 8013320:	2b00      	cmp	r3, #0
 8013322:	bf14      	ite	ne
 8013324:	2301      	movne	r3, #1
 8013326:	2300      	moveq	r3, #0
 8013328:	b2db      	uxtb	r3, r3
 801332a:	461a      	mov	r2, r3
 801332c:	f107 0314 	add.w	r3, r7, #20
 8013330:	4611      	mov	r1, r2
 8013332:	4618      	mov	r0, r3
 8013334:	f7fe fa4c 	bl	80117d0 <chk_lock>
 8013338:	4603      	mov	r3, r0
 801333a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	f003 031c 	and.w	r3, r3, #28
 8013344:	2b00      	cmp	r3, #0
 8013346:	d07e      	beq.n	8013446 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801334c:	2b00      	cmp	r3, #0
 801334e:	d017      	beq.n	8013380 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013350:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013354:	2b04      	cmp	r3, #4
 8013356:	d10e      	bne.n	8013376 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013358:	f7fe fa96 	bl	8011888 <enq_lock>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	d006      	beq.n	8013370 <f_open+0xc8>
 8013362:	f107 0314 	add.w	r3, r7, #20
 8013366:	4618      	mov	r0, r3
 8013368:	f7ff fa52 	bl	8012810 <dir_register>
 801336c:	4603      	mov	r3, r0
 801336e:	e000      	b.n	8013372 <f_open+0xca>
 8013370:	2312      	movs	r3, #18
 8013372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013376:	79fb      	ldrb	r3, [r7, #7]
 8013378:	f043 0308 	orr.w	r3, r3, #8
 801337c:	71fb      	strb	r3, [r7, #7]
 801337e:	e010      	b.n	80133a2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013380:	7ebb      	ldrb	r3, [r7, #26]
 8013382:	f003 0311 	and.w	r3, r3, #17
 8013386:	2b00      	cmp	r3, #0
 8013388:	d003      	beq.n	8013392 <f_open+0xea>
					res = FR_DENIED;
 801338a:	2307      	movs	r3, #7
 801338c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013390:	e007      	b.n	80133a2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013392:	79fb      	ldrb	r3, [r7, #7]
 8013394:	f003 0304 	and.w	r3, r3, #4
 8013398:	2b00      	cmp	r3, #0
 801339a:	d002      	beq.n	80133a2 <f_open+0xfa>
 801339c:	2308      	movs	r3, #8
 801339e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80133a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d167      	bne.n	801347a <f_open+0x1d2>
 80133aa:	79fb      	ldrb	r3, [r7, #7]
 80133ac:	f003 0308 	and.w	r3, r3, #8
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d062      	beq.n	801347a <f_open+0x1d2>
				dw = GET_FATTIME();
 80133b4:	4ba2      	ldr	r3, [pc, #648]	; (8013640 <f_open+0x398>)
 80133b6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80133b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ba:	330e      	adds	r3, #14
 80133bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fe f95c 	bl	801167c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80133c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c6:	3316      	adds	r3, #22
 80133c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fe f956 	bl	801167c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80133d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133d2:	330b      	adds	r3, #11
 80133d4:	2220      	movs	r2, #32
 80133d6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133dc:	4611      	mov	r1, r2
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff f925 	bl	801262e <ld_clust>
 80133e4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80133ea:	2200      	movs	r2, #0
 80133ec:	4618      	mov	r0, r3
 80133ee:	f7ff f93d 	bl	801266c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80133f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f4:	331c      	adds	r3, #28
 80133f6:	2100      	movs	r1, #0
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fe f93f 	bl	801167c <st_dword>
					fs->wflag = 1;
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	2201      	movs	r2, #1
 8013402:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013406:	2b00      	cmp	r3, #0
 8013408:	d037      	beq.n	801347a <f_open+0x1d2>
						dw = fs->winsect;
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801340e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013410:	f107 0314 	add.w	r3, r7, #20
 8013414:	2200      	movs	r2, #0
 8013416:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013418:	4618      	mov	r0, r3
 801341a:	f7fe fe2d 	bl	8012078 <remove_chain>
 801341e:	4603      	mov	r3, r0
 8013420:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8013424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013428:	2b00      	cmp	r3, #0
 801342a:	d126      	bne.n	801347a <f_open+0x1d2>
							res = move_window(fs, dw);
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013430:	4618      	mov	r0, r3
 8013432:	f7fe fb7d 	bl	8011b30 <move_window>
 8013436:	4603      	mov	r3, r0
 8013438:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013440:	3a01      	subs	r2, #1
 8013442:	611a      	str	r2, [r3, #16]
 8013444:	e019      	b.n	801347a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013446:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801344a:	2b00      	cmp	r3, #0
 801344c:	d115      	bne.n	801347a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801344e:	7ebb      	ldrb	r3, [r7, #26]
 8013450:	f003 0310 	and.w	r3, r3, #16
 8013454:	2b00      	cmp	r3, #0
 8013456:	d003      	beq.n	8013460 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013458:	2304      	movs	r3, #4
 801345a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801345e:	e00c      	b.n	801347a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013460:	79fb      	ldrb	r3, [r7, #7]
 8013462:	f003 0302 	and.w	r3, r3, #2
 8013466:	2b00      	cmp	r3, #0
 8013468:	d007      	beq.n	801347a <f_open+0x1d2>
 801346a:	7ebb      	ldrb	r3, [r7, #26]
 801346c:	f003 0301 	and.w	r3, r3, #1
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <f_open+0x1d2>
						res = FR_DENIED;
 8013474:	2307      	movs	r3, #7
 8013476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801347a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801347e:	2b00      	cmp	r3, #0
 8013480:	d128      	bne.n	80134d4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013482:	79fb      	ldrb	r3, [r7, #7]
 8013484:	f003 0308 	and.w	r3, r3, #8
 8013488:	2b00      	cmp	r3, #0
 801348a:	d003      	beq.n	8013494 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801348c:	79fb      	ldrb	r3, [r7, #7]
 801348e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013492:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801349c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134a2:	79fb      	ldrb	r3, [r7, #7]
 80134a4:	f023 0301 	bic.w	r3, r3, #1
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	bf14      	ite	ne
 80134ac:	2301      	movne	r3, #1
 80134ae:	2300      	moveq	r3, #0
 80134b0:	b2db      	uxtb	r3, r3
 80134b2:	461a      	mov	r2, r3
 80134b4:	f107 0314 	add.w	r3, r7, #20
 80134b8:	4611      	mov	r1, r2
 80134ba:	4618      	mov	r0, r3
 80134bc:	f7fe fa06 	bl	80118cc <inc_lock>
 80134c0:	4602      	mov	r2, r0
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	691b      	ldr	r3, [r3, #16]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d102      	bne.n	80134d4 <f_open+0x22c>
 80134ce:	2302      	movs	r3, #2
 80134d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80134d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134d8:	2b00      	cmp	r3, #0
 80134da:	f040 80a3 	bne.w	8013624 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134e2:	4611      	mov	r1, r2
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7ff f8a2 	bl	801262e <ld_clust>
 80134ea:	4602      	mov	r2, r0
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80134f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f2:	331c      	adds	r3, #28
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7fe f883 	bl	8011600 <ld_dword>
 80134fa:	4602      	mov	r2, r0
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	2200      	movs	r2, #0
 8013504:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013506:	693a      	ldr	r2, [r7, #16]
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	88da      	ldrh	r2, [r3, #6]
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	79fa      	ldrb	r2, [r7, #7]
 8013518:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	2200      	movs	r2, #0
 801351e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2200      	movs	r2, #0
 8013524:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	3330      	adds	r3, #48	; 0x30
 8013530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8013534:	2100      	movs	r1, #0
 8013536:	4618      	mov	r0, r3
 8013538:	f7fe f8ed 	bl	8011716 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801353c:	79fb      	ldrb	r3, [r7, #7]
 801353e:	f003 0320 	and.w	r3, r3, #32
 8013542:	2b00      	cmp	r3, #0
 8013544:	d06e      	beq.n	8013624 <f_open+0x37c>
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	68db      	ldr	r3, [r3, #12]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d06a      	beq.n	8013624 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	68da      	ldr	r2, [r3, #12]
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	895b      	ldrh	r3, [r3, #10]
 801355a:	461a      	mov	r2, r3
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	fb03 f302 	mul.w	r3, r3, r2
 8013564:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	689b      	ldr	r3, [r3, #8]
 801356a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	68db      	ldr	r3, [r3, #12]
 8013570:	657b      	str	r3, [r7, #84]	; 0x54
 8013572:	e016      	b.n	80135a2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013578:	4618      	mov	r0, r3
 801357a:	f7fe fb96 	bl	8011caa <get_fat>
 801357e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013580:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013582:	2b01      	cmp	r3, #1
 8013584:	d802      	bhi.n	801358c <f_open+0x2e4>
 8013586:	2302      	movs	r3, #2
 8013588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801358c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801358e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013592:	d102      	bne.n	801359a <f_open+0x2f2>
 8013594:	2301      	movs	r3, #1
 8013596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801359a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801359c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	657b      	str	r3, [r7, #84]	; 0x54
 80135a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d103      	bne.n	80135b2 <f_open+0x30a>
 80135aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80135ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d8e0      	bhi.n	8013574 <f_open+0x2cc>
				}
				fp->clust = clst;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80135b6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80135b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d131      	bne.n	8013624 <f_open+0x37c>
 80135c0:	693b      	ldr	r3, [r7, #16]
 80135c2:	899b      	ldrh	r3, [r3, #12]
 80135c4:	461a      	mov	r2, r3
 80135c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80135cc:	fb02 f201 	mul.w	r2, r2, r1
 80135d0:	1a9b      	subs	r3, r3, r2
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d026      	beq.n	8013624 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80135d6:	693b      	ldr	r3, [r7, #16]
 80135d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80135da:	4618      	mov	r0, r3
 80135dc:	f7fe fb46 	bl	8011c6c <clust2sect>
 80135e0:	6478      	str	r0, [r7, #68]	; 0x44
 80135e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d103      	bne.n	80135f0 <f_open+0x348>
						res = FR_INT_ERR;
 80135e8:	2302      	movs	r3, #2
 80135ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80135ee:	e019      	b.n	8013624 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	899b      	ldrh	r3, [r3, #12]
 80135f4:	461a      	mov	r2, r3
 80135f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80135fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80135fe:	441a      	add	r2, r3
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	7858      	ldrb	r0, [r3, #1]
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	6a1a      	ldr	r2, [r3, #32]
 8013612:	2301      	movs	r3, #1
 8013614:	f7fd ff7e 	bl	8011514 <disk_read>
 8013618:	4603      	mov	r3, r0
 801361a:	2b00      	cmp	r3, #0
 801361c:	d002      	beq.n	8013624 <f_open+0x37c>
 801361e:	2301      	movs	r3, #1
 8013620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013628:	2b00      	cmp	r3, #0
 801362a:	d002      	beq.n	8013632 <f_open+0x38a>
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2200      	movs	r2, #0
 8013630:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013636:	4618      	mov	r0, r3
 8013638:	3760      	adds	r7, #96	; 0x60
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	274a0000 	.word	0x274a0000

08013644 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b08e      	sub	sp, #56	; 0x38
 8013648:	af00      	add	r7, sp, #0
 801364a:	60f8      	str	r0, [r7, #12]
 801364c:	60b9      	str	r1, [r7, #8]
 801364e:	607a      	str	r2, [r7, #4]
 8013650:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	2200      	movs	r2, #0
 801365a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	f107 0214 	add.w	r2, r7, #20
 8013662:	4611      	mov	r1, r2
 8013664:	4618      	mov	r0, r3
 8013666:	f7ff fda3 	bl	80131b0 <validate>
 801366a:	4603      	mov	r3, r0
 801366c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013670:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013674:	2b00      	cmp	r3, #0
 8013676:	d107      	bne.n	8013688 <f_read+0x44>
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	7d5b      	ldrb	r3, [r3, #21]
 801367c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013684:	2b00      	cmp	r3, #0
 8013686:	d002      	beq.n	801368e <f_read+0x4a>
 8013688:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801368c:	e135      	b.n	80138fa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	7d1b      	ldrb	r3, [r3, #20]
 8013692:	f003 0301 	and.w	r3, r3, #1
 8013696:	2b00      	cmp	r3, #0
 8013698:	d101      	bne.n	801369e <f_read+0x5a>
 801369a:	2307      	movs	r3, #7
 801369c:	e12d      	b.n	80138fa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	68da      	ldr	r2, [r3, #12]
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	699b      	ldr	r3, [r3, #24]
 80136a6:	1ad3      	subs	r3, r2, r3
 80136a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80136aa:	687a      	ldr	r2, [r7, #4]
 80136ac:	6a3b      	ldr	r3, [r7, #32]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	f240 811e 	bls.w	80138f0 <f_read+0x2ac>
 80136b4:	6a3b      	ldr	r3, [r7, #32]
 80136b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80136b8:	e11a      	b.n	80138f0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	699b      	ldr	r3, [r3, #24]
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	8992      	ldrh	r2, [r2, #12]
 80136c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80136c6:	fb02 f201 	mul.w	r2, r2, r1
 80136ca:	1a9b      	subs	r3, r3, r2
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f040 80d5 	bne.w	801387c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	699b      	ldr	r3, [r3, #24]
 80136d6:	697a      	ldr	r2, [r7, #20]
 80136d8:	8992      	ldrh	r2, [r2, #12]
 80136da:	fbb3 f3f2 	udiv	r3, r3, r2
 80136de:	697a      	ldr	r2, [r7, #20]
 80136e0:	8952      	ldrh	r2, [r2, #10]
 80136e2:	3a01      	subs	r2, #1
 80136e4:	4013      	ands	r3, r2
 80136e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80136e8:	69fb      	ldr	r3, [r7, #28]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d12f      	bne.n	801374e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	699b      	ldr	r3, [r3, #24]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d103      	bne.n	80136fe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	689b      	ldr	r3, [r3, #8]
 80136fa:	633b      	str	r3, [r7, #48]	; 0x30
 80136fc:	e013      	b.n	8013726 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013702:	2b00      	cmp	r3, #0
 8013704:	d007      	beq.n	8013716 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	699b      	ldr	r3, [r3, #24]
 801370a:	4619      	mov	r1, r3
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7fe fdb0 	bl	8012272 <clmt_clust>
 8013712:	6338      	str	r0, [r7, #48]	; 0x30
 8013714:	e007      	b.n	8013726 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013716:	68fa      	ldr	r2, [r7, #12]
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	69db      	ldr	r3, [r3, #28]
 801371c:	4619      	mov	r1, r3
 801371e:	4610      	mov	r0, r2
 8013720:	f7fe fac3 	bl	8011caa <get_fat>
 8013724:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013728:	2b01      	cmp	r3, #1
 801372a:	d804      	bhi.n	8013736 <f_read+0xf2>
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	2202      	movs	r2, #2
 8013730:	755a      	strb	r2, [r3, #21]
 8013732:	2302      	movs	r3, #2
 8013734:	e0e1      	b.n	80138fa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	f1b3 3fff 	cmp.w	r3, #4294967295
 801373c:	d104      	bne.n	8013748 <f_read+0x104>
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2201      	movs	r2, #1
 8013742:	755a      	strb	r2, [r3, #21]
 8013744:	2301      	movs	r3, #1
 8013746:	e0d8      	b.n	80138fa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801374c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801374e:	697a      	ldr	r2, [r7, #20]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	69db      	ldr	r3, [r3, #28]
 8013754:	4619      	mov	r1, r3
 8013756:	4610      	mov	r0, r2
 8013758:	f7fe fa88 	bl	8011c6c <clust2sect>
 801375c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d104      	bne.n	801376e <f_read+0x12a>
 8013764:	68fb      	ldr	r3, [r7, #12]
 8013766:	2202      	movs	r2, #2
 8013768:	755a      	strb	r2, [r3, #21]
 801376a:	2302      	movs	r3, #2
 801376c:	e0c5      	b.n	80138fa <f_read+0x2b6>
			sect += csect;
 801376e:	69ba      	ldr	r2, [r7, #24]
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	4413      	add	r3, r2
 8013774:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	899b      	ldrh	r3, [r3, #12]
 801377a:	461a      	mov	r2, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013782:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013786:	2b00      	cmp	r3, #0
 8013788:	d041      	beq.n	801380e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801378a:	69fa      	ldr	r2, [r7, #28]
 801378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801378e:	4413      	add	r3, r2
 8013790:	697a      	ldr	r2, [r7, #20]
 8013792:	8952      	ldrh	r2, [r2, #10]
 8013794:	4293      	cmp	r3, r2
 8013796:	d905      	bls.n	80137a4 <f_read+0x160>
					cc = fs->csize - csect;
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	895b      	ldrh	r3, [r3, #10]
 801379c:	461a      	mov	r2, r3
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	1ad3      	subs	r3, r2, r3
 80137a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	7858      	ldrb	r0, [r3, #1]
 80137a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137aa:	69ba      	ldr	r2, [r7, #24]
 80137ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80137ae:	f7fd feb1 	bl	8011514 <disk_read>
 80137b2:	4603      	mov	r3, r0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d004      	beq.n	80137c2 <f_read+0x17e>
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	2201      	movs	r2, #1
 80137bc:	755a      	strb	r2, [r3, #21]
 80137be:	2301      	movs	r3, #1
 80137c0:	e09b      	b.n	80138fa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	7d1b      	ldrb	r3, [r3, #20]
 80137c6:	b25b      	sxtb	r3, r3
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	da18      	bge.n	80137fe <f_read+0x1ba>
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	6a1a      	ldr	r2, [r3, #32]
 80137d0:	69bb      	ldr	r3, [r7, #24]
 80137d2:	1ad3      	subs	r3, r2, r3
 80137d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137d6:	429a      	cmp	r2, r3
 80137d8:	d911      	bls.n	80137fe <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	6a1a      	ldr	r2, [r3, #32]
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	1ad3      	subs	r3, r2, r3
 80137e2:	697a      	ldr	r2, [r7, #20]
 80137e4:	8992      	ldrh	r2, [r2, #12]
 80137e6:	fb02 f303 	mul.w	r3, r2, r3
 80137ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137ec:	18d0      	adds	r0, r2, r3
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	899b      	ldrh	r3, [r3, #12]
 80137f8:	461a      	mov	r2, r3
 80137fa:	f7fd ff6b 	bl	80116d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	899b      	ldrh	r3, [r3, #12]
 8013802:	461a      	mov	r2, r3
 8013804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013806:	fb02 f303 	mul.w	r3, r2, r3
 801380a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801380c:	e05c      	b.n	80138c8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	6a1b      	ldr	r3, [r3, #32]
 8013812:	69ba      	ldr	r2, [r7, #24]
 8013814:	429a      	cmp	r2, r3
 8013816:	d02e      	beq.n	8013876 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	7d1b      	ldrb	r3, [r3, #20]
 801381c:	b25b      	sxtb	r3, r3
 801381e:	2b00      	cmp	r3, #0
 8013820:	da18      	bge.n	8013854 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	7858      	ldrb	r0, [r3, #1]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	6a1a      	ldr	r2, [r3, #32]
 8013830:	2301      	movs	r3, #1
 8013832:	f7fd fe8f 	bl	8011554 <disk_write>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	d004      	beq.n	8013846 <f_read+0x202>
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	2201      	movs	r2, #1
 8013840:	755a      	strb	r2, [r3, #21]
 8013842:	2301      	movs	r3, #1
 8013844:	e059      	b.n	80138fa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	7d1b      	ldrb	r3, [r3, #20]
 801384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801384e:	b2da      	uxtb	r2, r3
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	7858      	ldrb	r0, [r3, #1]
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801385e:	2301      	movs	r3, #1
 8013860:	69ba      	ldr	r2, [r7, #24]
 8013862:	f7fd fe57 	bl	8011514 <disk_read>
 8013866:	4603      	mov	r3, r0
 8013868:	2b00      	cmp	r3, #0
 801386a:	d004      	beq.n	8013876 <f_read+0x232>
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2201      	movs	r2, #1
 8013870:	755a      	strb	r2, [r3, #21]
 8013872:	2301      	movs	r3, #1
 8013874:	e041      	b.n	80138fa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	69ba      	ldr	r2, [r7, #24]
 801387a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	899b      	ldrh	r3, [r3, #12]
 8013880:	4618      	mov	r0, r3
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	699b      	ldr	r3, [r3, #24]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	8992      	ldrh	r2, [r2, #12]
 801388a:	fbb3 f1f2 	udiv	r1, r3, r2
 801388e:	fb02 f201 	mul.w	r2, r2, r1
 8013892:	1a9b      	subs	r3, r3, r2
 8013894:	1ac3      	subs	r3, r0, r3
 8013896:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	429a      	cmp	r2, r3
 801389e:	d901      	bls.n	80138a4 <f_read+0x260>
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	699b      	ldr	r3, [r3, #24]
 80138ae:	697a      	ldr	r2, [r7, #20]
 80138b0:	8992      	ldrh	r2, [r2, #12]
 80138b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80138b6:	fb02 f200 	mul.w	r2, r2, r0
 80138ba:	1a9b      	subs	r3, r3, r2
 80138bc:	440b      	add	r3, r1
 80138be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138c0:	4619      	mov	r1, r3
 80138c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138c4:	f7fd ff06 	bl	80116d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80138c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138cc:	4413      	add	r3, r2
 80138ce:	627b      	str	r3, [r7, #36]	; 0x24
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	699a      	ldr	r2, [r3, #24]
 80138d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d6:	441a      	add	r2, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	619a      	str	r2, [r3, #24]
 80138dc:	683b      	ldr	r3, [r7, #0]
 80138de:	681a      	ldr	r2, [r3, #0]
 80138e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e2:	441a      	add	r2, r3
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	601a      	str	r2, [r3, #0]
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ec:	1ad3      	subs	r3, r2, r3
 80138ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f47f aee1 	bne.w	80136ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80138f8:	2300      	movs	r3, #0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3738      	adds	r7, #56	; 0x38
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b08c      	sub	sp, #48	; 0x30
 8013906:	af00      	add	r7, sp, #0
 8013908:	60f8      	str	r0, [r7, #12]
 801390a:	60b9      	str	r1, [r7, #8]
 801390c:	607a      	str	r2, [r7, #4]
 801390e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	2200      	movs	r2, #0
 8013918:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f107 0210 	add.w	r2, r7, #16
 8013920:	4611      	mov	r1, r2
 8013922:	4618      	mov	r0, r3
 8013924:	f7ff fc44 	bl	80131b0 <validate>
 8013928:	4603      	mov	r3, r0
 801392a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801392e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013932:	2b00      	cmp	r3, #0
 8013934:	d107      	bne.n	8013946 <f_write+0x44>
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	7d5b      	ldrb	r3, [r3, #21]
 801393a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801393e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013942:	2b00      	cmp	r3, #0
 8013944:	d002      	beq.n	801394c <f_write+0x4a>
 8013946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801394a:	e16a      	b.n	8013c22 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	7d1b      	ldrb	r3, [r3, #20]
 8013950:	f003 0302 	and.w	r3, r3, #2
 8013954:	2b00      	cmp	r3, #0
 8013956:	d101      	bne.n	801395c <f_write+0x5a>
 8013958:	2307      	movs	r3, #7
 801395a:	e162      	b.n	8013c22 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	699a      	ldr	r2, [r3, #24]
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	441a      	add	r2, r3
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	699b      	ldr	r3, [r3, #24]
 8013968:	429a      	cmp	r2, r3
 801396a:	f080 814c 	bcs.w	8013c06 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	699b      	ldr	r3, [r3, #24]
 8013972:	43db      	mvns	r3, r3
 8013974:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013976:	e146      	b.n	8013c06 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	699b      	ldr	r3, [r3, #24]
 801397c:	693a      	ldr	r2, [r7, #16]
 801397e:	8992      	ldrh	r2, [r2, #12]
 8013980:	fbb3 f1f2 	udiv	r1, r3, r2
 8013984:	fb02 f201 	mul.w	r2, r2, r1
 8013988:	1a9b      	subs	r3, r3, r2
 801398a:	2b00      	cmp	r3, #0
 801398c:	f040 80f1 	bne.w	8013b72 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	699b      	ldr	r3, [r3, #24]
 8013994:	693a      	ldr	r2, [r7, #16]
 8013996:	8992      	ldrh	r2, [r2, #12]
 8013998:	fbb3 f3f2 	udiv	r3, r3, r2
 801399c:	693a      	ldr	r2, [r7, #16]
 801399e:	8952      	ldrh	r2, [r2, #10]
 80139a0:	3a01      	subs	r2, #1
 80139a2:	4013      	ands	r3, r2
 80139a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80139a6:	69bb      	ldr	r3, [r7, #24]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d143      	bne.n	8013a34 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	699b      	ldr	r3, [r3, #24]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d10c      	bne.n	80139ce <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	689b      	ldr	r3, [r3, #8]
 80139b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80139ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d11a      	bne.n	80139f6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	2100      	movs	r1, #0
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fe fbbc 	bl	8012142 <create_chain>
 80139ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80139cc:	e013      	b.n	80139f6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d007      	beq.n	80139e6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	699b      	ldr	r3, [r3, #24]
 80139da:	4619      	mov	r1, r3
 80139dc:	68f8      	ldr	r0, [r7, #12]
 80139de:	f7fe fc48 	bl	8012272 <clmt_clust>
 80139e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80139e4:	e007      	b.n	80139f6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80139e6:	68fa      	ldr	r2, [r7, #12]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	69db      	ldr	r3, [r3, #28]
 80139ec:	4619      	mov	r1, r3
 80139ee:	4610      	mov	r0, r2
 80139f0:	f7fe fba7 	bl	8012142 <create_chain>
 80139f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80139f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f000 8109 	beq.w	8013c10 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80139fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d104      	bne.n	8013a0e <f_write+0x10c>
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2202      	movs	r2, #2
 8013a08:	755a      	strb	r2, [r3, #21]
 8013a0a:	2302      	movs	r3, #2
 8013a0c:	e109      	b.n	8013c22 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a14:	d104      	bne.n	8013a20 <f_write+0x11e>
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2201      	movs	r2, #1
 8013a1a:	755a      	strb	r2, [r3, #21]
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e100      	b.n	8013c22 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a24:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	689b      	ldr	r3, [r3, #8]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d102      	bne.n	8013a34 <f_write+0x132>
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a32:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	7d1b      	ldrb	r3, [r3, #20]
 8013a38:	b25b      	sxtb	r3, r3
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	da18      	bge.n	8013a70 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	7858      	ldrb	r0, [r3, #1]
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6a1a      	ldr	r2, [r3, #32]
 8013a4c:	2301      	movs	r3, #1
 8013a4e:	f7fd fd81 	bl	8011554 <disk_write>
 8013a52:	4603      	mov	r3, r0
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d004      	beq.n	8013a62 <f_write+0x160>
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	755a      	strb	r2, [r3, #21]
 8013a5e:	2301      	movs	r3, #1
 8013a60:	e0df      	b.n	8013c22 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	7d1b      	ldrb	r3, [r3, #20]
 8013a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a6a:	b2da      	uxtb	r2, r3
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	69db      	ldr	r3, [r3, #28]
 8013a76:	4619      	mov	r1, r3
 8013a78:	4610      	mov	r0, r2
 8013a7a:	f7fe f8f7 	bl	8011c6c <clust2sect>
 8013a7e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d104      	bne.n	8013a90 <f_write+0x18e>
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2202      	movs	r2, #2
 8013a8a:	755a      	strb	r2, [r3, #21]
 8013a8c:	2302      	movs	r3, #2
 8013a8e:	e0c8      	b.n	8013c22 <f_write+0x320>
			sect += csect;
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	69bb      	ldr	r3, [r7, #24]
 8013a94:	4413      	add	r3, r2
 8013a96:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	899b      	ldrh	r3, [r3, #12]
 8013a9c:	461a      	mov	r2, r3
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013aa4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013aa6:	6a3b      	ldr	r3, [r7, #32]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d043      	beq.n	8013b34 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013aac:	69ba      	ldr	r2, [r7, #24]
 8013aae:	6a3b      	ldr	r3, [r7, #32]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	693a      	ldr	r2, [r7, #16]
 8013ab4:	8952      	ldrh	r2, [r2, #10]
 8013ab6:	4293      	cmp	r3, r2
 8013ab8:	d905      	bls.n	8013ac6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	895b      	ldrh	r3, [r3, #10]
 8013abe:	461a      	mov	r2, r3
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	7858      	ldrb	r0, [r3, #1]
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	697a      	ldr	r2, [r7, #20]
 8013ace:	69f9      	ldr	r1, [r7, #28]
 8013ad0:	f7fd fd40 	bl	8011554 <disk_write>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d004      	beq.n	8013ae4 <f_write+0x1e2>
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2201      	movs	r2, #1
 8013ade:	755a      	strb	r2, [r3, #21]
 8013ae0:	2301      	movs	r3, #1
 8013ae2:	e09e      	b.n	8013c22 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6a1a      	ldr	r2, [r3, #32]
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	1ad3      	subs	r3, r2, r3
 8013aec:	6a3a      	ldr	r2, [r7, #32]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d918      	bls.n	8013b24 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	6a1a      	ldr	r2, [r3, #32]
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	1ad3      	subs	r3, r2, r3
 8013b00:	693a      	ldr	r2, [r7, #16]
 8013b02:	8992      	ldrh	r2, [r2, #12]
 8013b04:	fb02 f303 	mul.w	r3, r2, r3
 8013b08:	69fa      	ldr	r2, [r7, #28]
 8013b0a:	18d1      	adds	r1, r2, r3
 8013b0c:	693b      	ldr	r3, [r7, #16]
 8013b0e:	899b      	ldrh	r3, [r3, #12]
 8013b10:	461a      	mov	r2, r3
 8013b12:	f7fd fddf 	bl	80116d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	7d1b      	ldrb	r3, [r3, #20]
 8013b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b1e:	b2da      	uxtb	r2, r3
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013b24:	693b      	ldr	r3, [r7, #16]
 8013b26:	899b      	ldrh	r3, [r3, #12]
 8013b28:	461a      	mov	r2, r3
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	fb02 f303 	mul.w	r3, r2, r3
 8013b30:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013b32:	e04b      	b.n	8013bcc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	6a1b      	ldr	r3, [r3, #32]
 8013b38:	697a      	ldr	r2, [r7, #20]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d016      	beq.n	8013b6c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	699a      	ldr	r2, [r3, #24]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d210      	bcs.n	8013b6c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	7858      	ldrb	r0, [r3, #1]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b54:	2301      	movs	r3, #1
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	f7fd fcdc 	bl	8011514 <disk_read>
 8013b5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d004      	beq.n	8013b6c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2201      	movs	r2, #1
 8013b66:	755a      	strb	r2, [r3, #21]
 8013b68:	2301      	movs	r3, #1
 8013b6a:	e05a      	b.n	8013c22 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	697a      	ldr	r2, [r7, #20]
 8013b70:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	899b      	ldrh	r3, [r3, #12]
 8013b76:	4618      	mov	r0, r3
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	699b      	ldr	r3, [r3, #24]
 8013b7c:	693a      	ldr	r2, [r7, #16]
 8013b7e:	8992      	ldrh	r2, [r2, #12]
 8013b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b84:	fb02 f201 	mul.w	r2, r2, r1
 8013b88:	1a9b      	subs	r3, r3, r2
 8013b8a:	1ac3      	subs	r3, r0, r3
 8013b8c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d901      	bls.n	8013b9a <f_write+0x298>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	699b      	ldr	r3, [r3, #24]
 8013ba4:	693a      	ldr	r2, [r7, #16]
 8013ba6:	8992      	ldrh	r2, [r2, #12]
 8013ba8:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bac:	fb02 f200 	mul.w	r2, r2, r0
 8013bb0:	1a9b      	subs	r3, r3, r2
 8013bb2:	440b      	add	r3, r1
 8013bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bb6:	69f9      	ldr	r1, [r7, #28]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f7fd fd8b 	bl	80116d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	7d1b      	ldrb	r3, [r3, #20]
 8013bc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013bc6:	b2da      	uxtb	r2, r3
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	4413      	add	r3, r2
 8013bd2:	61fb      	str	r3, [r7, #28]
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	699a      	ldr	r2, [r3, #24]
 8013bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bda:	441a      	add	r2, r3
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	619a      	str	r2, [r3, #24]
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	68da      	ldr	r2, [r3, #12]
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	699b      	ldr	r3, [r3, #24]
 8013be8:	429a      	cmp	r2, r3
 8013bea:	bf38      	it	cc
 8013bec:	461a      	movcc	r2, r3
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	60da      	str	r2, [r3, #12]
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	681a      	ldr	r2, [r3, #0]
 8013bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bf8:	441a      	add	r2, r3
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	601a      	str	r2, [r3, #0]
 8013bfe:	687a      	ldr	r2, [r7, #4]
 8013c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c02:	1ad3      	subs	r3, r2, r3
 8013c04:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	f47f aeb5 	bne.w	8013978 <f_write+0x76>
 8013c0e:	e000      	b.n	8013c12 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013c10:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	7d1b      	ldrb	r3, [r3, #20]
 8013c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013c20:	2300      	movs	r3, #0
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3730      	adds	r7, #48	; 0x30
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}
	...

08013c2c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b086      	sub	sp, #24
 8013c30:	af00      	add	r7, sp, #0
 8013c32:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f107 0208 	add.w	r2, r7, #8
 8013c3a:	4611      	mov	r1, r2
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f7ff fab7 	bl	80131b0 <validate>
 8013c42:	4603      	mov	r3, r0
 8013c44:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013c46:	7dfb      	ldrb	r3, [r7, #23]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d167      	bne.n	8013d1c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	7d1b      	ldrb	r3, [r3, #20]
 8013c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d061      	beq.n	8013d1c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	7d1b      	ldrb	r3, [r3, #20]
 8013c5c:	b25b      	sxtb	r3, r3
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	da15      	bge.n	8013c8e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	7858      	ldrb	r0, [r3, #1]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	6a1a      	ldr	r2, [r3, #32]
 8013c70:	2301      	movs	r3, #1
 8013c72:	f7fd fc6f 	bl	8011554 <disk_write>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d001      	beq.n	8013c80 <f_sync+0x54>
 8013c7c:	2301      	movs	r3, #1
 8013c7e:	e04e      	b.n	8013d1e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	7d1b      	ldrb	r3, [r3, #20]
 8013c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c88:	b2da      	uxtb	r2, r3
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013c8e:	4b26      	ldr	r3, [pc, #152]	; (8013d28 <f_sync+0xfc>)
 8013c90:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013c92:	68ba      	ldr	r2, [r7, #8]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c98:	4619      	mov	r1, r3
 8013c9a:	4610      	mov	r0, r2
 8013c9c:	f7fd ff48 	bl	8011b30 <move_window>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013ca4:	7dfb      	ldrb	r3, [r7, #23]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d138      	bne.n	8013d1c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	330b      	adds	r3, #11
 8013cb4:	781a      	ldrb	r2, [r3, #0]
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	330b      	adds	r3, #11
 8013cba:	f042 0220 	orr.w	r2, r2, #32
 8013cbe:	b2d2      	uxtb	r2, r2
 8013cc0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6818      	ldr	r0, [r3, #0]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	689b      	ldr	r3, [r3, #8]
 8013cca:	461a      	mov	r2, r3
 8013ccc:	68f9      	ldr	r1, [r7, #12]
 8013cce:	f7fe fccd 	bl	801266c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f103 021c 	add.w	r2, r3, #28
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	68db      	ldr	r3, [r3, #12]
 8013cdc:	4619      	mov	r1, r3
 8013cde:	4610      	mov	r0, r2
 8013ce0:	f7fd fccc 	bl	801167c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	3316      	adds	r3, #22
 8013ce8:	6939      	ldr	r1, [r7, #16]
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7fd fcc6 	bl	801167c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	3312      	adds	r3, #18
 8013cf4:	2100      	movs	r1, #0
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fd fca5 	bl	8011646 <st_word>
					fs->wflag = 1;
 8013cfc:	68bb      	ldr	r3, [r7, #8]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7fd ff41 	bl	8011b8c <sync_fs>
 8013d0a:	4603      	mov	r3, r0
 8013d0c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	7d1b      	ldrb	r3, [r3, #20]
 8013d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013d16:	b2da      	uxtb	r2, r3
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3718      	adds	r7, #24
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop
 8013d28:	274a0000 	.word	0x274a0000

08013d2c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff ff79 	bl	8013c2c <f_sync>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013d3e:	7bfb      	ldrb	r3, [r7, #15]
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d118      	bne.n	8013d76 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	f107 0208 	add.w	r2, r7, #8
 8013d4a:	4611      	mov	r1, r2
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7ff fa2f 	bl	80131b0 <validate>
 8013d52:	4603      	mov	r3, r0
 8013d54:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013d56:	7bfb      	ldrb	r3, [r7, #15]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d10c      	bne.n	8013d76 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	691b      	ldr	r3, [r3, #16]
 8013d60:	4618      	mov	r0, r3
 8013d62:	f7fd fe41 	bl	80119e8 <dec_lock>
 8013d66:	4603      	mov	r3, r0
 8013d68:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013d6a:	7bfb      	ldrb	r3, [r7, #15]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d102      	bne.n	8013d76 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2200      	movs	r2, #0
 8013d74:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	3710      	adds	r7, #16
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	bd80      	pop	{r7, pc}

08013d80 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013d80:	b590      	push	{r4, r7, lr}
 8013d82:	b091      	sub	sp, #68	; 0x44
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013d88:	f107 0108 	add.w	r1, r7, #8
 8013d8c:	1d3b      	adds	r3, r7, #4
 8013d8e:	2200      	movs	r2, #0
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fe ff87 	bl	8012ca4 <find_volume>
 8013d96:	4603      	mov	r3, r0
 8013d98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013d9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d131      	bne.n	8013e08 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	f107 030c 	add.w	r3, r7, #12
 8013dae:	4611      	mov	r1, r2
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fe fe47 	bl	8012a44 <follow_path>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013dbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d11a      	bne.n	8013dfa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013dc4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013dc8:	b25b      	sxtb	r3, r3
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	da03      	bge.n	8013dd6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	697a      	ldr	r2, [r7, #20]
 8013dd2:	619a      	str	r2, [r3, #24]
 8013dd4:	e011      	b.n	8013dfa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013dd6:	7cbb      	ldrb	r3, [r7, #18]
 8013dd8:	f003 0310 	and.w	r3, r3, #16
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d009      	beq.n	8013df4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013de4:	68bc      	ldr	r4, [r7, #8]
 8013de6:	4611      	mov	r1, r2
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fc20 	bl	801262e <ld_clust>
 8013dee:	4603      	mov	r3, r0
 8013df0:	61a3      	str	r3, [r4, #24]
 8013df2:	e002      	b.n	8013dfa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013df4:	2305      	movs	r3, #5
 8013df6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013dfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013dfe:	2b04      	cmp	r3, #4
 8013e00:	d102      	bne.n	8013e08 <f_chdir+0x88>
 8013e02:	2305      	movs	r3, #5
 8013e04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013e08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3744      	adds	r7, #68	; 0x44
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd90      	pop	{r4, r7, pc}

08013e14 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b090      	sub	sp, #64	; 0x40
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f107 0208 	add.w	r2, r7, #8
 8013e24:	4611      	mov	r1, r2
 8013e26:	4618      	mov	r0, r3
 8013e28:	f7ff f9c2 	bl	80131b0 <validate>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013e32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d103      	bne.n	8013e42 <f_lseek+0x2e>
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	7d5b      	ldrb	r3, [r3, #21]
 8013e3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013e42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d002      	beq.n	8013e50 <f_lseek+0x3c>
 8013e4a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e4e:	e201      	b.n	8014254 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 80d9 	beq.w	801400c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e60:	d15a      	bne.n	8013f18 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e66:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	1d1a      	adds	r2, r3, #4
 8013e6c:	627a      	str	r2, [r7, #36]	; 0x24
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	617b      	str	r3, [r7, #20]
 8013e72:	2302      	movs	r3, #2
 8013e74:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	689b      	ldr	r3, [r3, #8]
 8013e7a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d03a      	beq.n	8013ef8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e84:	613b      	str	r3, [r7, #16]
 8013e86:	2300      	movs	r3, #0
 8013e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e8c:	3302      	adds	r3, #2
 8013e8e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e92:	60fb      	str	r3, [r7, #12]
 8013e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e96:	3301      	adds	r3, #1
 8013e98:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f7fd ff03 	bl	8011caa <get_fat>
 8013ea4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d804      	bhi.n	8013eb6 <f_lseek+0xa2>
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2202      	movs	r2, #2
 8013eb0:	755a      	strb	r2, [r3, #21]
 8013eb2:	2302      	movs	r3, #2
 8013eb4:	e1ce      	b.n	8014254 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ebc:	d104      	bne.n	8013ec8 <f_lseek+0xb4>
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	755a      	strb	r2, [r3, #21]
 8013ec4:	2301      	movs	r3, #1
 8013ec6:	e1c5      	b.n	8014254 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d0de      	beq.n	8013e90 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ed4:	697b      	ldr	r3, [r7, #20]
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d809      	bhi.n	8013eee <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	1d1a      	adds	r2, r3, #4
 8013ede:	627a      	str	r2, [r7, #36]	; 0x24
 8013ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ee2:	601a      	str	r2, [r3, #0]
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	1d1a      	adds	r2, r3, #4
 8013ee8:	627a      	str	r2, [r7, #36]	; 0x24
 8013eea:	693a      	ldr	r2, [r7, #16]
 8013eec:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	69db      	ldr	r3, [r3, #28]
 8013ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d3c4      	bcc.n	8013e82 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013efc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013efe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013f00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d803      	bhi.n	8013f10 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	e19f      	b.n	8014250 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013f10:	2311      	movs	r3, #17
 8013f12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013f16:	e19b      	b.n	8014250 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	68db      	ldr	r3, [r3, #12]
 8013f1c:	683a      	ldr	r2, [r7, #0]
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	d902      	bls.n	8013f28 <f_lseek+0x114>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	68db      	ldr	r3, [r3, #12]
 8013f26:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	683a      	ldr	r2, [r7, #0]
 8013f2c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013f2e:	683b      	ldr	r3, [r7, #0]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	f000 818d 	beq.w	8014250 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013f36:	683b      	ldr	r3, [r7, #0]
 8013f38:	3b01      	subs	r3, #1
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f7fe f998 	bl	8012272 <clmt_clust>
 8013f42:	4602      	mov	r2, r0
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	69db      	ldr	r3, [r3, #28]
 8013f4e:	4619      	mov	r1, r3
 8013f50:	4610      	mov	r0, r2
 8013f52:	f7fd fe8b 	bl	8011c6c <clust2sect>
 8013f56:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d104      	bne.n	8013f68 <f_lseek+0x154>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2202      	movs	r2, #2
 8013f62:	755a      	strb	r2, [r3, #21]
 8013f64:	2302      	movs	r3, #2
 8013f66:	e175      	b.n	8014254 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	3b01      	subs	r3, #1
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	8992      	ldrh	r2, [r2, #12]
 8013f70:	fbb3 f3f2 	udiv	r3, r3, r2
 8013f74:	68ba      	ldr	r2, [r7, #8]
 8013f76:	8952      	ldrh	r2, [r2, #10]
 8013f78:	3a01      	subs	r2, #1
 8013f7a:	4013      	ands	r3, r2
 8013f7c:	69ba      	ldr	r2, [r7, #24]
 8013f7e:	4413      	add	r3, r2
 8013f80:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	699b      	ldr	r3, [r3, #24]
 8013f86:	68ba      	ldr	r2, [r7, #8]
 8013f88:	8992      	ldrh	r2, [r2, #12]
 8013f8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f8e:	fb02 f201 	mul.w	r2, r2, r1
 8013f92:	1a9b      	subs	r3, r3, r2
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	f000 815b 	beq.w	8014250 <f_lseek+0x43c>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	6a1b      	ldr	r3, [r3, #32]
 8013f9e:	69ba      	ldr	r2, [r7, #24]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	f000 8155 	beq.w	8014250 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	7d1b      	ldrb	r3, [r3, #20]
 8013faa:	b25b      	sxtb	r3, r3
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	da18      	bge.n	8013fe2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	7858      	ldrb	r0, [r3, #1]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6a1a      	ldr	r2, [r3, #32]
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	f7fd fac8 	bl	8011554 <disk_write>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d004      	beq.n	8013fd4 <f_lseek+0x1c0>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	2201      	movs	r2, #1
 8013fce:	755a      	strb	r2, [r3, #21]
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	e13f      	b.n	8014254 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	7d1b      	ldrb	r3, [r3, #20]
 8013fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013fdc:	b2da      	uxtb	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	7858      	ldrb	r0, [r3, #1]
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013fec:	2301      	movs	r3, #1
 8013fee:	69ba      	ldr	r2, [r7, #24]
 8013ff0:	f7fd fa90 	bl	8011514 <disk_read>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d004      	beq.n	8014004 <f_lseek+0x1f0>
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	755a      	strb	r2, [r3, #21]
 8014000:	2301      	movs	r3, #1
 8014002:	e127      	b.n	8014254 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	69ba      	ldr	r2, [r7, #24]
 8014008:	621a      	str	r2, [r3, #32]
 801400a:	e121      	b.n	8014250 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	68db      	ldr	r3, [r3, #12]
 8014010:	683a      	ldr	r2, [r7, #0]
 8014012:	429a      	cmp	r2, r3
 8014014:	d908      	bls.n	8014028 <f_lseek+0x214>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	7d1b      	ldrb	r3, [r3, #20]
 801401a:	f003 0302 	and.w	r3, r3, #2
 801401e:	2b00      	cmp	r3, #0
 8014020:	d102      	bne.n	8014028 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	68db      	ldr	r3, [r3, #12]
 8014026:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	699b      	ldr	r3, [r3, #24]
 801402c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801402e:	2300      	movs	r3, #0
 8014030:	637b      	str	r3, [r7, #52]	; 0x34
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014036:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	f000 80b5 	beq.w	80141aa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	895b      	ldrh	r3, [r3, #10]
 8014044:	461a      	mov	r2, r3
 8014046:	68bb      	ldr	r3, [r7, #8]
 8014048:	899b      	ldrh	r3, [r3, #12]
 801404a:	fb03 f302 	mul.w	r3, r3, r2
 801404e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014050:	6a3b      	ldr	r3, [r7, #32]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d01b      	beq.n	801408e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	1e5a      	subs	r2, r3, #1
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014060:	6a3b      	ldr	r3, [r7, #32]
 8014062:	1e59      	subs	r1, r3, #1
 8014064:	69fb      	ldr	r3, [r7, #28]
 8014066:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801406a:	429a      	cmp	r2, r3
 801406c:	d30f      	bcc.n	801408e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801406e:	6a3b      	ldr	r3, [r7, #32]
 8014070:	1e5a      	subs	r2, r3, #1
 8014072:	69fb      	ldr	r3, [r7, #28]
 8014074:	425b      	negs	r3, r3
 8014076:	401a      	ands	r2, r3
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	699b      	ldr	r3, [r3, #24]
 8014080:	683a      	ldr	r2, [r7, #0]
 8014082:	1ad3      	subs	r3, r2, r3
 8014084:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	69db      	ldr	r3, [r3, #28]
 801408a:	63bb      	str	r3, [r7, #56]	; 0x38
 801408c:	e022      	b.n	80140d4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	689b      	ldr	r3, [r3, #8]
 8014092:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014096:	2b00      	cmp	r3, #0
 8014098:	d119      	bne.n	80140ce <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2100      	movs	r1, #0
 801409e:	4618      	mov	r0, r3
 80140a0:	f7fe f84f 	bl	8012142 <create_chain>
 80140a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80140a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d104      	bne.n	80140b6 <f_lseek+0x2a2>
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2202      	movs	r2, #2
 80140b0:	755a      	strb	r2, [r3, #21]
 80140b2:	2302      	movs	r3, #2
 80140b4:	e0ce      	b.n	8014254 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140bc:	d104      	bne.n	80140c8 <f_lseek+0x2b4>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2201      	movs	r2, #1
 80140c2:	755a      	strb	r2, [r3, #21]
 80140c4:	2301      	movs	r3, #1
 80140c6:	e0c5      	b.n	8014254 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140cc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80140d2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80140d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d067      	beq.n	80141aa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80140da:	e03a      	b.n	8014152 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80140dc:	683a      	ldr	r2, [r7, #0]
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	1ad3      	subs	r3, r2, r3
 80140e2:	603b      	str	r3, [r7, #0]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	699a      	ldr	r2, [r3, #24]
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	441a      	add	r2, r3
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	7d1b      	ldrb	r3, [r3, #20]
 80140f4:	f003 0302 	and.w	r3, r3, #2
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d00b      	beq.n	8014114 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014100:	4618      	mov	r0, r3
 8014102:	f7fe f81e 	bl	8012142 <create_chain>
 8014106:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410a:	2b00      	cmp	r3, #0
 801410c:	d108      	bne.n	8014120 <f_lseek+0x30c>
							ofs = 0; break;
 801410e:	2300      	movs	r3, #0
 8014110:	603b      	str	r3, [r7, #0]
 8014112:	e022      	b.n	801415a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014118:	4618      	mov	r0, r3
 801411a:	f7fd fdc6 	bl	8011caa <get_fat>
 801411e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014126:	d104      	bne.n	8014132 <f_lseek+0x31e>
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2201      	movs	r2, #1
 801412c:	755a      	strb	r2, [r3, #21]
 801412e:	2301      	movs	r3, #1
 8014130:	e090      	b.n	8014254 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	2b01      	cmp	r3, #1
 8014136:	d904      	bls.n	8014142 <f_lseek+0x32e>
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	69db      	ldr	r3, [r3, #28]
 801413c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801413e:	429a      	cmp	r2, r3
 8014140:	d304      	bcc.n	801414c <f_lseek+0x338>
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	2202      	movs	r2, #2
 8014146:	755a      	strb	r2, [r3, #21]
 8014148:	2302      	movs	r3, #2
 801414a:	e083      	b.n	8014254 <f_lseek+0x440>
					fp->clust = clst;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014150:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014152:	683a      	ldr	r2, [r7, #0]
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	429a      	cmp	r2, r3
 8014158:	d8c0      	bhi.n	80140dc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	699a      	ldr	r2, [r3, #24]
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	441a      	add	r2, r3
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	899b      	ldrh	r3, [r3, #12]
 801416a:	461a      	mov	r2, r3
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014172:	fb02 f201 	mul.w	r2, r2, r1
 8014176:	1a9b      	subs	r3, r3, r2
 8014178:	2b00      	cmp	r3, #0
 801417a:	d016      	beq.n	80141aa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014180:	4618      	mov	r0, r3
 8014182:	f7fd fd73 	bl	8011c6c <clust2sect>
 8014186:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801418a:	2b00      	cmp	r3, #0
 801418c:	d104      	bne.n	8014198 <f_lseek+0x384>
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2202      	movs	r2, #2
 8014192:	755a      	strb	r2, [r3, #21]
 8014194:	2302      	movs	r3, #2
 8014196:	e05d      	b.n	8014254 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014198:	68bb      	ldr	r3, [r7, #8]
 801419a:	899b      	ldrh	r3, [r3, #12]
 801419c:	461a      	mov	r2, r3
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80141a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141a6:	4413      	add	r3, r2
 80141a8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	699a      	ldr	r2, [r3, #24]
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d90a      	bls.n	80141cc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	699a      	ldr	r2, [r3, #24]
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	7d1b      	ldrb	r3, [r3, #20]
 80141c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	699b      	ldr	r3, [r3, #24]
 80141d0:	68ba      	ldr	r2, [r7, #8]
 80141d2:	8992      	ldrh	r2, [r2, #12]
 80141d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80141d8:	fb02 f201 	mul.w	r2, r2, r1
 80141dc:	1a9b      	subs	r3, r3, r2
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d036      	beq.n	8014250 <f_lseek+0x43c>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6a1b      	ldr	r3, [r3, #32]
 80141e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141e8:	429a      	cmp	r2, r3
 80141ea:	d031      	beq.n	8014250 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	7d1b      	ldrb	r3, [r3, #20]
 80141f0:	b25b      	sxtb	r3, r3
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	da18      	bge.n	8014228 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	7858      	ldrb	r0, [r3, #1]
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	6a1a      	ldr	r2, [r3, #32]
 8014204:	2301      	movs	r3, #1
 8014206:	f7fd f9a5 	bl	8011554 <disk_write>
 801420a:	4603      	mov	r3, r0
 801420c:	2b00      	cmp	r3, #0
 801420e:	d004      	beq.n	801421a <f_lseek+0x406>
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2201      	movs	r2, #1
 8014214:	755a      	strb	r2, [r3, #21]
 8014216:	2301      	movs	r3, #1
 8014218:	e01c      	b.n	8014254 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	7d1b      	ldrb	r3, [r3, #20]
 801421e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014222:	b2da      	uxtb	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	7858      	ldrb	r0, [r3, #1]
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014232:	2301      	movs	r3, #1
 8014234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014236:	f7fd f96d 	bl	8011514 <disk_read>
 801423a:	4603      	mov	r3, r0
 801423c:	2b00      	cmp	r3, #0
 801423e:	d004      	beq.n	801424a <f_lseek+0x436>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	2201      	movs	r2, #1
 8014244:	755a      	strb	r2, [r3, #21]
 8014246:	2301      	movs	r3, #1
 8014248:	e004      	b.n	8014254 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801424e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014250:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014254:	4618      	mov	r0, r3
 8014256:	3740      	adds	r7, #64	; 0x40
 8014258:	46bd      	mov	sp, r7
 801425a:	bd80      	pop	{r7, pc}

0801425c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b09e      	sub	sp, #120	; 0x78
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014264:	2300      	movs	r3, #0
 8014266:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014268:	f107 010c 	add.w	r1, r7, #12
 801426c:	1d3b      	adds	r3, r7, #4
 801426e:	2202      	movs	r2, #2
 8014270:	4618      	mov	r0, r3
 8014272:	f7fe fd17 	bl	8012ca4 <find_volume>
 8014276:	4603      	mov	r3, r0
 8014278:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014280:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014284:	2b00      	cmp	r3, #0
 8014286:	f040 80a4 	bne.w	80143d2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014290:	4611      	mov	r1, r2
 8014292:	4618      	mov	r0, r3
 8014294:	f7fe fbd6 	bl	8012a44 <follow_path>
 8014298:	4603      	mov	r3, r0
 801429a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801429e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d108      	bne.n	80142b8 <f_unlink+0x5c>
 80142a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142aa:	f003 0320 	and.w	r3, r3, #32
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d002      	beq.n	80142b8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80142b2:	2306      	movs	r3, #6
 80142b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80142b8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d108      	bne.n	80142d2 <f_unlink+0x76>
 80142c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80142c4:	2102      	movs	r1, #2
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fd fa82 	bl	80117d0 <chk_lock>
 80142cc:	4603      	mov	r3, r0
 80142ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80142d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d17b      	bne.n	80143d2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80142da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80142de:	b25b      	sxtb	r3, r3
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	da03      	bge.n	80142ec <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80142e4:	2306      	movs	r3, #6
 80142e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80142ea:	e008      	b.n	80142fe <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80142ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80142f0:	f003 0301 	and.w	r3, r3, #1
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d002      	beq.n	80142fe <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80142f8:	2307      	movs	r3, #7
 80142fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80142fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014302:	2b00      	cmp	r3, #0
 8014304:	d13d      	bne.n	8014382 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801430a:	4611      	mov	r1, r2
 801430c:	4618      	mov	r0, r3
 801430e:	f7fe f98e 	bl	801262e <ld_clust>
 8014312:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8014314:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014318:	f003 0310 	and.w	r3, r3, #16
 801431c:	2b00      	cmp	r3, #0
 801431e:	d030      	beq.n	8014382 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	699b      	ldr	r3, [r3, #24]
 8014324:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014326:	429a      	cmp	r2, r3
 8014328:	d103      	bne.n	8014332 <f_unlink+0xd6>
						res = FR_DENIED;
 801432a:	2307      	movs	r3, #7
 801432c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014330:	e027      	b.n	8014382 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8014336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014338:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801433a:	f107 0310 	add.w	r3, r7, #16
 801433e:	2100      	movs	r1, #0
 8014340:	4618      	mov	r0, r3
 8014342:	f7fd ffce 	bl	80122e2 <dir_sdi>
 8014346:	4603      	mov	r3, r0
 8014348:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801434c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014350:	2b00      	cmp	r3, #0
 8014352:	d116      	bne.n	8014382 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014354:	f107 0310 	add.w	r3, r7, #16
 8014358:	2100      	movs	r1, #0
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe f9a6 	bl	80126ac <dir_read>
 8014360:	4603      	mov	r3, r0
 8014362:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014366:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801436a:	2b00      	cmp	r3, #0
 801436c:	d102      	bne.n	8014374 <f_unlink+0x118>
 801436e:	2307      	movs	r3, #7
 8014370:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014374:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014378:	2b04      	cmp	r3, #4
 801437a:	d102      	bne.n	8014382 <f_unlink+0x126>
 801437c:	2300      	movs	r3, #0
 801437e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014382:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014386:	2b00      	cmp	r3, #0
 8014388:	d123      	bne.n	80143d2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801438a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801438e:	4618      	mov	r0, r3
 8014390:	f7fe fa70 	bl	8012874 <dir_remove>
 8014394:	4603      	mov	r3, r0
 8014396:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801439a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d10c      	bne.n	80143bc <f_unlink+0x160>
 80143a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d009      	beq.n	80143bc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80143a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80143ac:	2200      	movs	r2, #0
 80143ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80143b0:	4618      	mov	r0, r3
 80143b2:	f7fd fe61 	bl	8012078 <remove_chain>
 80143b6:	4603      	mov	r3, r0
 80143b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80143bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d106      	bne.n	80143d2 <f_unlink+0x176>
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7fd fbe0 	bl	8011b8c <sync_fs>
 80143cc:	4603      	mov	r3, r0
 80143ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80143d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3778      	adds	r7, #120	; 0x78
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
	...

080143e0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b096      	sub	sp, #88	; 0x58
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80143e8:	f107 0108 	add.w	r1, r7, #8
 80143ec:	1d3b      	adds	r3, r7, #4
 80143ee:	2202      	movs	r2, #2
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7fe fc57 	bl	8012ca4 <find_volume>
 80143f6:	4603      	mov	r3, r0
 80143f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80143fc:	68bb      	ldr	r3, [r7, #8]
 80143fe:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014404:	2b00      	cmp	r3, #0
 8014406:	f040 80fe 	bne.w	8014606 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801440a:	687a      	ldr	r2, [r7, #4]
 801440c:	f107 030c 	add.w	r3, r7, #12
 8014410:	4611      	mov	r1, r2
 8014412:	4618      	mov	r0, r3
 8014414:	f7fe fb16 	bl	8012a44 <follow_path>
 8014418:	4603      	mov	r3, r0
 801441a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801441e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014422:	2b00      	cmp	r3, #0
 8014424:	d102      	bne.n	801442c <f_mkdir+0x4c>
 8014426:	2308      	movs	r3, #8
 8014428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801442c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014430:	2b04      	cmp	r3, #4
 8014432:	d108      	bne.n	8014446 <f_mkdir+0x66>
 8014434:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014438:	f003 0320 	and.w	r3, r3, #32
 801443c:	2b00      	cmp	r3, #0
 801443e:	d002      	beq.n	8014446 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014440:	2306      	movs	r3, #6
 8014442:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801444a:	2b04      	cmp	r3, #4
 801444c:	f040 80db 	bne.w	8014606 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014450:	f107 030c 	add.w	r3, r7, #12
 8014454:	2100      	movs	r1, #0
 8014456:	4618      	mov	r0, r3
 8014458:	f7fd fe73 	bl	8012142 <create_chain>
 801445c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	895b      	ldrh	r3, [r3, #10]
 8014462:	461a      	mov	r2, r3
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	899b      	ldrh	r3, [r3, #12]
 8014468:	fb03 f302 	mul.w	r3, r3, r2
 801446c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801446e:	2300      	movs	r3, #0
 8014470:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014476:	2b00      	cmp	r3, #0
 8014478:	d102      	bne.n	8014480 <f_mkdir+0xa0>
 801447a:	2307      	movs	r3, #7
 801447c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014482:	2b01      	cmp	r3, #1
 8014484:	d102      	bne.n	801448c <f_mkdir+0xac>
 8014486:	2302      	movs	r3, #2
 8014488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014492:	d102      	bne.n	801449a <f_mkdir+0xba>
 8014494:	2301      	movs	r3, #1
 8014496:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801449a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d106      	bne.n	80144b0 <f_mkdir+0xd0>
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7fd faff 	bl	8011aa8 <sync_window>
 80144aa:	4603      	mov	r3, r0
 80144ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80144b0:	4b58      	ldr	r3, [pc, #352]	; (8014614 <f_mkdir+0x234>)
 80144b2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80144b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d16c      	bne.n	8014596 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7fd fbd3 	bl	8011c6c <clust2sect>
 80144c6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	3338      	adds	r3, #56	; 0x38
 80144cc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	899b      	ldrh	r3, [r3, #12]
 80144d2:	461a      	mov	r2, r3
 80144d4:	2100      	movs	r1, #0
 80144d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144d8:	f7fd f91d 	bl	8011716 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80144dc:	220b      	movs	r2, #11
 80144de:	2120      	movs	r1, #32
 80144e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144e2:	f7fd f918 	bl	8011716 <mem_set>
					dir[DIR_Name] = '.';
 80144e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144e8:	222e      	movs	r2, #46	; 0x2e
 80144ea:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80144ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ee:	330b      	adds	r3, #11
 80144f0:	2210      	movs	r2, #16
 80144f2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80144f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144f6:	3316      	adds	r3, #22
 80144f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7fd f8be 	bl	801167c <st_dword>
					st_clust(fs, dir, dcl);
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014504:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014506:	4618      	mov	r0, r3
 8014508:	f7fe f8b0 	bl	801266c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801450e:	3320      	adds	r3, #32
 8014510:	2220      	movs	r2, #32
 8014512:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014514:	4618      	mov	r0, r3
 8014516:	f7fd f8dd 	bl	80116d4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801451c:	3321      	adds	r3, #33	; 0x21
 801451e:	222e      	movs	r2, #46	; 0x2e
 8014520:	701a      	strb	r2, [r3, #0]
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	2b03      	cmp	r3, #3
 801452c:	d106      	bne.n	801453c <f_mkdir+0x15c>
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014534:	429a      	cmp	r2, r3
 8014536:	d101      	bne.n	801453c <f_mkdir+0x15c>
 8014538:	2300      	movs	r3, #0
 801453a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801453c:	68b8      	ldr	r0, [r7, #8]
 801453e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014540:	3320      	adds	r3, #32
 8014542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014544:	4619      	mov	r1, r3
 8014546:	f7fe f891 	bl	801266c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	895b      	ldrh	r3, [r3, #10]
 801454e:	653b      	str	r3, [r7, #80]	; 0x50
 8014550:	e01c      	b.n	801458c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014554:	1c5a      	adds	r2, r3, #1
 8014556:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014558:	68ba      	ldr	r2, [r7, #8]
 801455a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	2201      	movs	r2, #1
 8014560:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	4618      	mov	r0, r3
 8014566:	f7fd fa9f 	bl	8011aa8 <sync_window>
 801456a:	4603      	mov	r3, r0
 801456c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014570:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014574:	2b00      	cmp	r3, #0
 8014576:	d10d      	bne.n	8014594 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	899b      	ldrh	r3, [r3, #12]
 801457c:	461a      	mov	r2, r3
 801457e:	2100      	movs	r1, #0
 8014580:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014582:	f7fd f8c8 	bl	8011716 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014588:	3b01      	subs	r3, #1
 801458a:	653b      	str	r3, [r7, #80]	; 0x50
 801458c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801458e:	2b00      	cmp	r3, #0
 8014590:	d1df      	bne.n	8014552 <f_mkdir+0x172>
 8014592:	e000      	b.n	8014596 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014594:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014596:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801459a:	2b00      	cmp	r3, #0
 801459c:	d107      	bne.n	80145ae <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801459e:	f107 030c 	add.w	r3, r7, #12
 80145a2:	4618      	mov	r0, r3
 80145a4:	f7fe f934 	bl	8012810 <dir_register>
 80145a8:	4603      	mov	r3, r0
 80145aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80145ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d120      	bne.n	80145f8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80145ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145bc:	3316      	adds	r3, #22
 80145be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7fd f85b 	bl	801167c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7fe f84d 	bl	801266c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80145d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145d4:	330b      	adds	r3, #11
 80145d6:	2210      	movs	r2, #16
 80145d8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80145da:	68bb      	ldr	r3, [r7, #8]
 80145dc:	2201      	movs	r2, #1
 80145de:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80145e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d10e      	bne.n	8014606 <f_mkdir+0x226>
					res = sync_fs(fs);
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7fd face 	bl	8011b8c <sync_fs>
 80145f0:	4603      	mov	r3, r0
 80145f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80145f6:	e006      	b.n	8014606 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80145f8:	f107 030c 	add.w	r3, r7, #12
 80145fc:	2200      	movs	r2, #0
 80145fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014600:	4618      	mov	r0, r3
 8014602:	f7fd fd39 	bl	8012078 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014606:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801460a:	4618      	mov	r0, r3
 801460c:	3758      	adds	r7, #88	; 0x58
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
 8014612:	bf00      	nop
 8014614:	274a0000 	.word	0x274a0000

08014618 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b088      	sub	sp, #32
 801461c:	af00      	add	r7, sp, #0
 801461e:	60f8      	str	r0, [r7, #12]
 8014620:	60b9      	str	r1, [r7, #8]
 8014622:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014624:	2300      	movs	r3, #0
 8014626:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801462c:	e017      	b.n	801465e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801462e:	f107 0310 	add.w	r3, r7, #16
 8014632:	f107 0114 	add.w	r1, r7, #20
 8014636:	2201      	movs	r2, #1
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f7ff f803 	bl	8013644 <f_read>
		if (rc != 1) break;
 801463e:	693b      	ldr	r3, [r7, #16]
 8014640:	2b01      	cmp	r3, #1
 8014642:	d112      	bne.n	801466a <f_gets+0x52>
		c = s[0];
 8014644:	7d3b      	ldrb	r3, [r7, #20]
 8014646:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014648:	69bb      	ldr	r3, [r7, #24]
 801464a:	1c5a      	adds	r2, r3, #1
 801464c:	61ba      	str	r2, [r7, #24]
 801464e:	7dfa      	ldrb	r2, [r7, #23]
 8014650:	701a      	strb	r2, [r3, #0]
		n++;
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	3301      	adds	r3, #1
 8014656:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014658:	7dfb      	ldrb	r3, [r7, #23]
 801465a:	2b0a      	cmp	r3, #10
 801465c:	d007      	beq.n	801466e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	3b01      	subs	r3, #1
 8014662:	69fa      	ldr	r2, [r7, #28]
 8014664:	429a      	cmp	r2, r3
 8014666:	dbe2      	blt.n	801462e <f_gets+0x16>
 8014668:	e002      	b.n	8014670 <f_gets+0x58>
		if (rc != 1) break;
 801466a:	bf00      	nop
 801466c:	e000      	b.n	8014670 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801466e:	bf00      	nop
	}
	*p = 0;
 8014670:	69bb      	ldr	r3, [r7, #24]
 8014672:	2200      	movs	r2, #0
 8014674:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014676:	69fb      	ldr	r3, [r7, #28]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d001      	beq.n	8014680 <f_gets+0x68>
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	e000      	b.n	8014682 <f_gets+0x6a>
 8014680:	2300      	movs	r3, #0
}
 8014682:	4618      	mov	r0, r3
 8014684:	3720      	adds	r7, #32
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}
	...

0801468c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801468c:	b480      	push	{r7}
 801468e:	b087      	sub	sp, #28
 8014690:	af00      	add	r7, sp, #0
 8014692:	60f8      	str	r0, [r7, #12]
 8014694:	60b9      	str	r1, [r7, #8]
 8014696:	4613      	mov	r3, r2
 8014698:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801469a:	2301      	movs	r3, #1
 801469c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801469e:	2300      	movs	r3, #0
 80146a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80146a2:	4b1f      	ldr	r3, [pc, #124]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146a4:	7a5b      	ldrb	r3, [r3, #9]
 80146a6:	b2db      	uxtb	r3, r3
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d131      	bne.n	8014710 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80146ac:	4b1c      	ldr	r3, [pc, #112]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146ae:	7a5b      	ldrb	r3, [r3, #9]
 80146b0:	b2db      	uxtb	r3, r3
 80146b2:	461a      	mov	r2, r3
 80146b4:	4b1a      	ldr	r3, [pc, #104]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146b6:	2100      	movs	r1, #0
 80146b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80146ba:	4b19      	ldr	r3, [pc, #100]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146bc:	7a5b      	ldrb	r3, [r3, #9]
 80146be:	b2db      	uxtb	r3, r3
 80146c0:	4a17      	ldr	r2, [pc, #92]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146c2:	009b      	lsls	r3, r3, #2
 80146c4:	4413      	add	r3, r2
 80146c6:	68fa      	ldr	r2, [r7, #12]
 80146c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80146ca:	4b15      	ldr	r3, [pc, #84]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146cc:	7a5b      	ldrb	r3, [r3, #9]
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	461a      	mov	r2, r3
 80146d2:	4b13      	ldr	r3, [pc, #76]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146d4:	4413      	add	r3, r2
 80146d6:	79fa      	ldrb	r2, [r7, #7]
 80146d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80146da:	4b11      	ldr	r3, [pc, #68]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146dc:	7a5b      	ldrb	r3, [r3, #9]
 80146de:	b2db      	uxtb	r3, r3
 80146e0:	1c5a      	adds	r2, r3, #1
 80146e2:	b2d1      	uxtb	r1, r2
 80146e4:	4a0e      	ldr	r2, [pc, #56]	; (8014720 <FATFS_LinkDriverEx+0x94>)
 80146e6:	7251      	strb	r1, [r2, #9]
 80146e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80146ea:	7dbb      	ldrb	r3, [r7, #22]
 80146ec:	3330      	adds	r3, #48	; 0x30
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	3301      	adds	r3, #1
 80146f8:	223a      	movs	r2, #58	; 0x3a
 80146fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	3302      	adds	r3, #2
 8014700:	222f      	movs	r2, #47	; 0x2f
 8014702:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	3303      	adds	r3, #3
 8014708:	2200      	movs	r2, #0
 801470a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801470c:	2300      	movs	r3, #0
 801470e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014710:	7dfb      	ldrb	r3, [r7, #23]
}
 8014712:	4618      	mov	r0, r3
 8014714:	371c      	adds	r7, #28
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop
 8014720:	200422f4 	.word	0x200422f4

08014724 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801472e:	2200      	movs	r2, #0
 8014730:	6839      	ldr	r1, [r7, #0]
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f7ff ffaa 	bl	801468c <FATFS_LinkDriverEx>
 8014738:	4603      	mov	r3, r0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <__cxa_guard_acquire>:
 8014742:	6803      	ldr	r3, [r0, #0]
 8014744:	07db      	lsls	r3, r3, #31
 8014746:	d406      	bmi.n	8014756 <__cxa_guard_acquire+0x14>
 8014748:	7843      	ldrb	r3, [r0, #1]
 801474a:	b103      	cbz	r3, 801474e <__cxa_guard_acquire+0xc>
 801474c:	deff      	udf	#255	; 0xff
 801474e:	2301      	movs	r3, #1
 8014750:	7043      	strb	r3, [r0, #1]
 8014752:	4618      	mov	r0, r3
 8014754:	4770      	bx	lr
 8014756:	2000      	movs	r0, #0
 8014758:	4770      	bx	lr

0801475a <__cxa_guard_release>:
 801475a:	2301      	movs	r3, #1
 801475c:	6003      	str	r3, [r0, #0]
 801475e:	4770      	bx	lr

08014760 <cos>:
 8014760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014762:	ec51 0b10 	vmov	r0, r1, d0
 8014766:	4a1e      	ldr	r2, [pc, #120]	; (80147e0 <cos+0x80>)
 8014768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801476c:	4293      	cmp	r3, r2
 801476e:	dc06      	bgt.n	801477e <cos+0x1e>
 8014770:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80147d8 <cos+0x78>
 8014774:	f000 fa74 	bl	8014c60 <__kernel_cos>
 8014778:	ec51 0b10 	vmov	r0, r1, d0
 801477c:	e007      	b.n	801478e <cos+0x2e>
 801477e:	4a19      	ldr	r2, [pc, #100]	; (80147e4 <cos+0x84>)
 8014780:	4293      	cmp	r3, r2
 8014782:	dd09      	ble.n	8014798 <cos+0x38>
 8014784:	ee10 2a10 	vmov	r2, s0
 8014788:	460b      	mov	r3, r1
 801478a:	f7eb fd95 	bl	80002b8 <__aeabi_dsub>
 801478e:	ec41 0b10 	vmov	d0, r0, r1
 8014792:	b005      	add	sp, #20
 8014794:	f85d fb04 	ldr.w	pc, [sp], #4
 8014798:	4668      	mov	r0, sp
 801479a:	f000 f86d 	bl	8014878 <__ieee754_rem_pio2>
 801479e:	f000 0003 	and.w	r0, r0, #3
 80147a2:	2801      	cmp	r0, #1
 80147a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80147a8:	ed9d 0b00 	vldr	d0, [sp]
 80147ac:	d007      	beq.n	80147be <cos+0x5e>
 80147ae:	2802      	cmp	r0, #2
 80147b0:	d00e      	beq.n	80147d0 <cos+0x70>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d0de      	beq.n	8014774 <cos+0x14>
 80147b6:	2001      	movs	r0, #1
 80147b8:	f000 fe5a 	bl	8015470 <__kernel_sin>
 80147bc:	e7dc      	b.n	8014778 <cos+0x18>
 80147be:	f000 fe57 	bl	8015470 <__kernel_sin>
 80147c2:	ec53 2b10 	vmov	r2, r3, d0
 80147c6:	ee10 0a10 	vmov	r0, s0
 80147ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147ce:	e7de      	b.n	801478e <cos+0x2e>
 80147d0:	f000 fa46 	bl	8014c60 <__kernel_cos>
 80147d4:	e7f5      	b.n	80147c2 <cos+0x62>
 80147d6:	bf00      	nop
	...
 80147e0:	3fe921fb 	.word	0x3fe921fb
 80147e4:	7fefffff 	.word	0x7fefffff

080147e8 <sin>:
 80147e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147ea:	ec51 0b10 	vmov	r0, r1, d0
 80147ee:	4a20      	ldr	r2, [pc, #128]	; (8014870 <sin+0x88>)
 80147f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80147f4:	4293      	cmp	r3, r2
 80147f6:	dc07      	bgt.n	8014808 <sin+0x20>
 80147f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014868 <sin+0x80>
 80147fc:	2000      	movs	r0, #0
 80147fe:	f000 fe37 	bl	8015470 <__kernel_sin>
 8014802:	ec51 0b10 	vmov	r0, r1, d0
 8014806:	e007      	b.n	8014818 <sin+0x30>
 8014808:	4a1a      	ldr	r2, [pc, #104]	; (8014874 <sin+0x8c>)
 801480a:	4293      	cmp	r3, r2
 801480c:	dd09      	ble.n	8014822 <sin+0x3a>
 801480e:	ee10 2a10 	vmov	r2, s0
 8014812:	460b      	mov	r3, r1
 8014814:	f7eb fd50 	bl	80002b8 <__aeabi_dsub>
 8014818:	ec41 0b10 	vmov	d0, r0, r1
 801481c:	b005      	add	sp, #20
 801481e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014822:	4668      	mov	r0, sp
 8014824:	f000 f828 	bl	8014878 <__ieee754_rem_pio2>
 8014828:	f000 0003 	and.w	r0, r0, #3
 801482c:	2801      	cmp	r0, #1
 801482e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014832:	ed9d 0b00 	vldr	d0, [sp]
 8014836:	d004      	beq.n	8014842 <sin+0x5a>
 8014838:	2802      	cmp	r0, #2
 801483a:	d005      	beq.n	8014848 <sin+0x60>
 801483c:	b970      	cbnz	r0, 801485c <sin+0x74>
 801483e:	2001      	movs	r0, #1
 8014840:	e7dd      	b.n	80147fe <sin+0x16>
 8014842:	f000 fa0d 	bl	8014c60 <__kernel_cos>
 8014846:	e7dc      	b.n	8014802 <sin+0x1a>
 8014848:	2001      	movs	r0, #1
 801484a:	f000 fe11 	bl	8015470 <__kernel_sin>
 801484e:	ec53 2b10 	vmov	r2, r3, d0
 8014852:	ee10 0a10 	vmov	r0, s0
 8014856:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801485a:	e7dd      	b.n	8014818 <sin+0x30>
 801485c:	f000 fa00 	bl	8014c60 <__kernel_cos>
 8014860:	e7f5      	b.n	801484e <sin+0x66>
 8014862:	bf00      	nop
 8014864:	f3af 8000 	nop.w
	...
 8014870:	3fe921fb 	.word	0x3fe921fb
 8014874:	7fefffff 	.word	0x7fefffff

08014878 <__ieee754_rem_pio2>:
 8014878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801487c:	ec57 6b10 	vmov	r6, r7, d0
 8014880:	4bc3      	ldr	r3, [pc, #780]	; (8014b90 <__ieee754_rem_pio2+0x318>)
 8014882:	b08d      	sub	sp, #52	; 0x34
 8014884:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014888:	4598      	cmp	r8, r3
 801488a:	4604      	mov	r4, r0
 801488c:	9704      	str	r7, [sp, #16]
 801488e:	dc07      	bgt.n	80148a0 <__ieee754_rem_pio2+0x28>
 8014890:	2200      	movs	r2, #0
 8014892:	2300      	movs	r3, #0
 8014894:	ed84 0b00 	vstr	d0, [r4]
 8014898:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801489c:	2500      	movs	r5, #0
 801489e:	e027      	b.n	80148f0 <__ieee754_rem_pio2+0x78>
 80148a0:	4bbc      	ldr	r3, [pc, #752]	; (8014b94 <__ieee754_rem_pio2+0x31c>)
 80148a2:	4598      	cmp	r8, r3
 80148a4:	dc75      	bgt.n	8014992 <__ieee754_rem_pio2+0x11a>
 80148a6:	9b04      	ldr	r3, [sp, #16]
 80148a8:	4dbb      	ldr	r5, [pc, #748]	; (8014b98 <__ieee754_rem_pio2+0x320>)
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	ee10 0a10 	vmov	r0, s0
 80148b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8014b58 <__ieee754_rem_pio2+0x2e0>)
 80148b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b6:	4639      	mov	r1, r7
 80148b8:	dd36      	ble.n	8014928 <__ieee754_rem_pio2+0xb0>
 80148ba:	f7eb fcfd 	bl	80002b8 <__aeabi_dsub>
 80148be:	45a8      	cmp	r8, r5
 80148c0:	4606      	mov	r6, r0
 80148c2:	460f      	mov	r7, r1
 80148c4:	d018      	beq.n	80148f8 <__ieee754_rem_pio2+0x80>
 80148c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014b60 <__ieee754_rem_pio2+0x2e8>)
 80148c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148cc:	f7eb fcf4 	bl	80002b8 <__aeabi_dsub>
 80148d0:	4602      	mov	r2, r0
 80148d2:	460b      	mov	r3, r1
 80148d4:	e9c4 2300 	strd	r2, r3, [r4]
 80148d8:	4630      	mov	r0, r6
 80148da:	4639      	mov	r1, r7
 80148dc:	f7eb fcec 	bl	80002b8 <__aeabi_dsub>
 80148e0:	a39f      	add	r3, pc, #636	; (adr r3, 8014b60 <__ieee754_rem_pio2+0x2e8>)
 80148e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e6:	f7eb fce7 	bl	80002b8 <__aeabi_dsub>
 80148ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148ee:	2501      	movs	r5, #1
 80148f0:	4628      	mov	r0, r5
 80148f2:	b00d      	add	sp, #52	; 0x34
 80148f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f8:	a39b      	add	r3, pc, #620	; (adr r3, 8014b68 <__ieee754_rem_pio2+0x2f0>)
 80148fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148fe:	f7eb fcdb 	bl	80002b8 <__aeabi_dsub>
 8014902:	a39b      	add	r3, pc, #620	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2f8>)
 8014904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014908:	4606      	mov	r6, r0
 801490a:	460f      	mov	r7, r1
 801490c:	f7eb fcd4 	bl	80002b8 <__aeabi_dsub>
 8014910:	4602      	mov	r2, r0
 8014912:	460b      	mov	r3, r1
 8014914:	e9c4 2300 	strd	r2, r3, [r4]
 8014918:	4630      	mov	r0, r6
 801491a:	4639      	mov	r1, r7
 801491c:	f7eb fccc 	bl	80002b8 <__aeabi_dsub>
 8014920:	a393      	add	r3, pc, #588	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2f8>)
 8014922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014926:	e7de      	b.n	80148e6 <__ieee754_rem_pio2+0x6e>
 8014928:	f7eb fcc8 	bl	80002bc <__adddf3>
 801492c:	45a8      	cmp	r8, r5
 801492e:	4606      	mov	r6, r0
 8014930:	460f      	mov	r7, r1
 8014932:	d016      	beq.n	8014962 <__ieee754_rem_pio2+0xea>
 8014934:	a38a      	add	r3, pc, #552	; (adr r3, 8014b60 <__ieee754_rem_pio2+0x2e8>)
 8014936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493a:	f7eb fcbf 	bl	80002bc <__adddf3>
 801493e:	4602      	mov	r2, r0
 8014940:	460b      	mov	r3, r1
 8014942:	e9c4 2300 	strd	r2, r3, [r4]
 8014946:	4630      	mov	r0, r6
 8014948:	4639      	mov	r1, r7
 801494a:	f7eb fcb5 	bl	80002b8 <__aeabi_dsub>
 801494e:	a384      	add	r3, pc, #528	; (adr r3, 8014b60 <__ieee754_rem_pio2+0x2e8>)
 8014950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014954:	f7eb fcb2 	bl	80002bc <__adddf3>
 8014958:	f04f 35ff 	mov.w	r5, #4294967295
 801495c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014960:	e7c6      	b.n	80148f0 <__ieee754_rem_pio2+0x78>
 8014962:	a381      	add	r3, pc, #516	; (adr r3, 8014b68 <__ieee754_rem_pio2+0x2f0>)
 8014964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014968:	f7eb fca8 	bl	80002bc <__adddf3>
 801496c:	a380      	add	r3, pc, #512	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2f8>)
 801496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014972:	4606      	mov	r6, r0
 8014974:	460f      	mov	r7, r1
 8014976:	f7eb fca1 	bl	80002bc <__adddf3>
 801497a:	4602      	mov	r2, r0
 801497c:	460b      	mov	r3, r1
 801497e:	e9c4 2300 	strd	r2, r3, [r4]
 8014982:	4630      	mov	r0, r6
 8014984:	4639      	mov	r1, r7
 8014986:	f7eb fc97 	bl	80002b8 <__aeabi_dsub>
 801498a:	a379      	add	r3, pc, #484	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2f8>)
 801498c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014990:	e7e0      	b.n	8014954 <__ieee754_rem_pio2+0xdc>
 8014992:	4b82      	ldr	r3, [pc, #520]	; (8014b9c <__ieee754_rem_pio2+0x324>)
 8014994:	4598      	cmp	r8, r3
 8014996:	f300 80d0 	bgt.w	8014b3a <__ieee754_rem_pio2+0x2c2>
 801499a:	f000 fe23 	bl	80155e4 <fabs>
 801499e:	ec57 6b10 	vmov	r6, r7, d0
 80149a2:	ee10 0a10 	vmov	r0, s0
 80149a6:	a374      	add	r3, pc, #464	; (adr r3, 8014b78 <__ieee754_rem_pio2+0x300>)
 80149a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ac:	4639      	mov	r1, r7
 80149ae:	f7eb fe3b 	bl	8000628 <__aeabi_dmul>
 80149b2:	2200      	movs	r2, #0
 80149b4:	4b7a      	ldr	r3, [pc, #488]	; (8014ba0 <__ieee754_rem_pio2+0x328>)
 80149b6:	f7eb fc81 	bl	80002bc <__adddf3>
 80149ba:	f7ec f8e5 	bl	8000b88 <__aeabi_d2iz>
 80149be:	4605      	mov	r5, r0
 80149c0:	f7eb fdc8 	bl	8000554 <__aeabi_i2d>
 80149c4:	a364      	add	r3, pc, #400	; (adr r3, 8014b58 <__ieee754_rem_pio2+0x2e0>)
 80149c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149ce:	f7eb fe2b 	bl	8000628 <__aeabi_dmul>
 80149d2:	4602      	mov	r2, r0
 80149d4:	460b      	mov	r3, r1
 80149d6:	4630      	mov	r0, r6
 80149d8:	4639      	mov	r1, r7
 80149da:	f7eb fc6d 	bl	80002b8 <__aeabi_dsub>
 80149de:	a360      	add	r3, pc, #384	; (adr r3, 8014b60 <__ieee754_rem_pio2+0x2e8>)
 80149e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e4:	4682      	mov	sl, r0
 80149e6:	468b      	mov	fp, r1
 80149e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149ec:	f7eb fe1c 	bl	8000628 <__aeabi_dmul>
 80149f0:	2d1f      	cmp	r5, #31
 80149f2:	4606      	mov	r6, r0
 80149f4:	460f      	mov	r7, r1
 80149f6:	dc0c      	bgt.n	8014a12 <__ieee754_rem_pio2+0x19a>
 80149f8:	1e6a      	subs	r2, r5, #1
 80149fa:	4b6a      	ldr	r3, [pc, #424]	; (8014ba4 <__ieee754_rem_pio2+0x32c>)
 80149fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a00:	4543      	cmp	r3, r8
 8014a02:	d006      	beq.n	8014a12 <__ieee754_rem_pio2+0x19a>
 8014a04:	4632      	mov	r2, r6
 8014a06:	463b      	mov	r3, r7
 8014a08:	4650      	mov	r0, sl
 8014a0a:	4659      	mov	r1, fp
 8014a0c:	f7eb fc54 	bl	80002b8 <__aeabi_dsub>
 8014a10:	e00e      	b.n	8014a30 <__ieee754_rem_pio2+0x1b8>
 8014a12:	4632      	mov	r2, r6
 8014a14:	463b      	mov	r3, r7
 8014a16:	4650      	mov	r0, sl
 8014a18:	4659      	mov	r1, fp
 8014a1a:	f7eb fc4d 	bl	80002b8 <__aeabi_dsub>
 8014a1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014a22:	9305      	str	r3, [sp, #20]
 8014a24:	9a05      	ldr	r2, [sp, #20]
 8014a26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a2a:	1ad3      	subs	r3, r2, r3
 8014a2c:	2b10      	cmp	r3, #16
 8014a2e:	dc02      	bgt.n	8014a36 <__ieee754_rem_pio2+0x1be>
 8014a30:	e9c4 0100 	strd	r0, r1, [r4]
 8014a34:	e039      	b.n	8014aaa <__ieee754_rem_pio2+0x232>
 8014a36:	a34c      	add	r3, pc, #304	; (adr r3, 8014b68 <__ieee754_rem_pio2+0x2f0>)
 8014a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a40:	f7eb fdf2 	bl	8000628 <__aeabi_dmul>
 8014a44:	4606      	mov	r6, r0
 8014a46:	460f      	mov	r7, r1
 8014a48:	4602      	mov	r2, r0
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	4650      	mov	r0, sl
 8014a4e:	4659      	mov	r1, fp
 8014a50:	f7eb fc32 	bl	80002b8 <__aeabi_dsub>
 8014a54:	4602      	mov	r2, r0
 8014a56:	460b      	mov	r3, r1
 8014a58:	4680      	mov	r8, r0
 8014a5a:	4689      	mov	r9, r1
 8014a5c:	4650      	mov	r0, sl
 8014a5e:	4659      	mov	r1, fp
 8014a60:	f7eb fc2a 	bl	80002b8 <__aeabi_dsub>
 8014a64:	4632      	mov	r2, r6
 8014a66:	463b      	mov	r3, r7
 8014a68:	f7eb fc26 	bl	80002b8 <__aeabi_dsub>
 8014a6c:	a340      	add	r3, pc, #256	; (adr r3, 8014b70 <__ieee754_rem_pio2+0x2f8>)
 8014a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a72:	4606      	mov	r6, r0
 8014a74:	460f      	mov	r7, r1
 8014a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a7a:	f7eb fdd5 	bl	8000628 <__aeabi_dmul>
 8014a7e:	4632      	mov	r2, r6
 8014a80:	463b      	mov	r3, r7
 8014a82:	f7eb fc19 	bl	80002b8 <__aeabi_dsub>
 8014a86:	4602      	mov	r2, r0
 8014a88:	460b      	mov	r3, r1
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	460f      	mov	r7, r1
 8014a8e:	4640      	mov	r0, r8
 8014a90:	4649      	mov	r1, r9
 8014a92:	f7eb fc11 	bl	80002b8 <__aeabi_dsub>
 8014a96:	9a05      	ldr	r2, [sp, #20]
 8014a98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014a9c:	1ad3      	subs	r3, r2, r3
 8014a9e:	2b31      	cmp	r3, #49	; 0x31
 8014aa0:	dc20      	bgt.n	8014ae4 <__ieee754_rem_pio2+0x26c>
 8014aa2:	e9c4 0100 	strd	r0, r1, [r4]
 8014aa6:	46c2      	mov	sl, r8
 8014aa8:	46cb      	mov	fp, r9
 8014aaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014aae:	4650      	mov	r0, sl
 8014ab0:	4642      	mov	r2, r8
 8014ab2:	464b      	mov	r3, r9
 8014ab4:	4659      	mov	r1, fp
 8014ab6:	f7eb fbff 	bl	80002b8 <__aeabi_dsub>
 8014aba:	463b      	mov	r3, r7
 8014abc:	4632      	mov	r2, r6
 8014abe:	f7eb fbfb 	bl	80002b8 <__aeabi_dsub>
 8014ac2:	9b04      	ldr	r3, [sp, #16]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014aca:	f6bf af11 	bge.w	80148f0 <__ieee754_rem_pio2+0x78>
 8014ace:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014ad2:	6063      	str	r3, [r4, #4]
 8014ad4:	f8c4 8000 	str.w	r8, [r4]
 8014ad8:	60a0      	str	r0, [r4, #8]
 8014ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ade:	60e3      	str	r3, [r4, #12]
 8014ae0:	426d      	negs	r5, r5
 8014ae2:	e705      	b.n	80148f0 <__ieee754_rem_pio2+0x78>
 8014ae4:	a326      	add	r3, pc, #152	; (adr r3, 8014b80 <__ieee754_rem_pio2+0x308>)
 8014ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aee:	f7eb fd9b 	bl	8000628 <__aeabi_dmul>
 8014af2:	4606      	mov	r6, r0
 8014af4:	460f      	mov	r7, r1
 8014af6:	4602      	mov	r2, r0
 8014af8:	460b      	mov	r3, r1
 8014afa:	4640      	mov	r0, r8
 8014afc:	4649      	mov	r1, r9
 8014afe:	f7eb fbdb 	bl	80002b8 <__aeabi_dsub>
 8014b02:	4602      	mov	r2, r0
 8014b04:	460b      	mov	r3, r1
 8014b06:	4682      	mov	sl, r0
 8014b08:	468b      	mov	fp, r1
 8014b0a:	4640      	mov	r0, r8
 8014b0c:	4649      	mov	r1, r9
 8014b0e:	f7eb fbd3 	bl	80002b8 <__aeabi_dsub>
 8014b12:	4632      	mov	r2, r6
 8014b14:	463b      	mov	r3, r7
 8014b16:	f7eb fbcf 	bl	80002b8 <__aeabi_dsub>
 8014b1a:	a31b      	add	r3, pc, #108	; (adr r3, 8014b88 <__ieee754_rem_pio2+0x310>)
 8014b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b20:	4606      	mov	r6, r0
 8014b22:	460f      	mov	r7, r1
 8014b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b28:	f7eb fd7e 	bl	8000628 <__aeabi_dmul>
 8014b2c:	4632      	mov	r2, r6
 8014b2e:	463b      	mov	r3, r7
 8014b30:	f7eb fbc2 	bl	80002b8 <__aeabi_dsub>
 8014b34:	4606      	mov	r6, r0
 8014b36:	460f      	mov	r7, r1
 8014b38:	e764      	b.n	8014a04 <__ieee754_rem_pio2+0x18c>
 8014b3a:	4b1b      	ldr	r3, [pc, #108]	; (8014ba8 <__ieee754_rem_pio2+0x330>)
 8014b3c:	4598      	cmp	r8, r3
 8014b3e:	dd35      	ble.n	8014bac <__ieee754_rem_pio2+0x334>
 8014b40:	ee10 2a10 	vmov	r2, s0
 8014b44:	463b      	mov	r3, r7
 8014b46:	4630      	mov	r0, r6
 8014b48:	4639      	mov	r1, r7
 8014b4a:	f7eb fbb5 	bl	80002b8 <__aeabi_dsub>
 8014b4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b52:	e9c4 0100 	strd	r0, r1, [r4]
 8014b56:	e6a1      	b.n	801489c <__ieee754_rem_pio2+0x24>
 8014b58:	54400000 	.word	0x54400000
 8014b5c:	3ff921fb 	.word	0x3ff921fb
 8014b60:	1a626331 	.word	0x1a626331
 8014b64:	3dd0b461 	.word	0x3dd0b461
 8014b68:	1a600000 	.word	0x1a600000
 8014b6c:	3dd0b461 	.word	0x3dd0b461
 8014b70:	2e037073 	.word	0x2e037073
 8014b74:	3ba3198a 	.word	0x3ba3198a
 8014b78:	6dc9c883 	.word	0x6dc9c883
 8014b7c:	3fe45f30 	.word	0x3fe45f30
 8014b80:	2e000000 	.word	0x2e000000
 8014b84:	3ba3198a 	.word	0x3ba3198a
 8014b88:	252049c1 	.word	0x252049c1
 8014b8c:	397b839a 	.word	0x397b839a
 8014b90:	3fe921fb 	.word	0x3fe921fb
 8014b94:	4002d97b 	.word	0x4002d97b
 8014b98:	3ff921fb 	.word	0x3ff921fb
 8014b9c:	413921fb 	.word	0x413921fb
 8014ba0:	3fe00000 	.word	0x3fe00000
 8014ba4:	0801a10c 	.word	0x0801a10c
 8014ba8:	7fefffff 	.word	0x7fefffff
 8014bac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014bb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014bb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014bb8:	4630      	mov	r0, r6
 8014bba:	460f      	mov	r7, r1
 8014bbc:	f7eb ffe4 	bl	8000b88 <__aeabi_d2iz>
 8014bc0:	f7eb fcc8 	bl	8000554 <__aeabi_i2d>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4630      	mov	r0, r6
 8014bca:	4639      	mov	r1, r7
 8014bcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014bd0:	f7eb fb72 	bl	80002b8 <__aeabi_dsub>
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	4b1f      	ldr	r3, [pc, #124]	; (8014c54 <__ieee754_rem_pio2+0x3dc>)
 8014bd8:	f7eb fd26 	bl	8000628 <__aeabi_dmul>
 8014bdc:	460f      	mov	r7, r1
 8014bde:	4606      	mov	r6, r0
 8014be0:	f7eb ffd2 	bl	8000b88 <__aeabi_d2iz>
 8014be4:	f7eb fcb6 	bl	8000554 <__aeabi_i2d>
 8014be8:	4602      	mov	r2, r0
 8014bea:	460b      	mov	r3, r1
 8014bec:	4630      	mov	r0, r6
 8014bee:	4639      	mov	r1, r7
 8014bf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bf4:	f7eb fb60 	bl	80002b8 <__aeabi_dsub>
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	4b16      	ldr	r3, [pc, #88]	; (8014c54 <__ieee754_rem_pio2+0x3dc>)
 8014bfc:	f7eb fd14 	bl	8000628 <__aeabi_dmul>
 8014c00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014c08:	f04f 0803 	mov.w	r8, #3
 8014c0c:	2600      	movs	r6, #0
 8014c0e:	2700      	movs	r7, #0
 8014c10:	4632      	mov	r2, r6
 8014c12:	463b      	mov	r3, r7
 8014c14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014c18:	f108 3aff 	add.w	sl, r8, #4294967295
 8014c1c:	f7eb ff6c 	bl	8000af8 <__aeabi_dcmpeq>
 8014c20:	b9b0      	cbnz	r0, 8014c50 <__ieee754_rem_pio2+0x3d8>
 8014c22:	4b0d      	ldr	r3, [pc, #52]	; (8014c58 <__ieee754_rem_pio2+0x3e0>)
 8014c24:	9301      	str	r3, [sp, #4]
 8014c26:	2302      	movs	r3, #2
 8014c28:	9300      	str	r3, [sp, #0]
 8014c2a:	462a      	mov	r2, r5
 8014c2c:	4643      	mov	r3, r8
 8014c2e:	4621      	mov	r1, r4
 8014c30:	a806      	add	r0, sp, #24
 8014c32:	f000 f8dd 	bl	8014df0 <__kernel_rem_pio2>
 8014c36:	9b04      	ldr	r3, [sp, #16]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	4605      	mov	r5, r0
 8014c3c:	f6bf ae58 	bge.w	80148f0 <__ieee754_rem_pio2+0x78>
 8014c40:	6863      	ldr	r3, [r4, #4]
 8014c42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c46:	6063      	str	r3, [r4, #4]
 8014c48:	68e3      	ldr	r3, [r4, #12]
 8014c4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c4e:	e746      	b.n	8014ade <__ieee754_rem_pio2+0x266>
 8014c50:	46d0      	mov	r8, sl
 8014c52:	e7dd      	b.n	8014c10 <__ieee754_rem_pio2+0x398>
 8014c54:	41700000 	.word	0x41700000
 8014c58:	0801a18c 	.word	0x0801a18c
 8014c5c:	00000000 	.word	0x00000000

08014c60 <__kernel_cos>:
 8014c60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c64:	ec59 8b10 	vmov	r8, r9, d0
 8014c68:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014c6c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014c70:	ed2d 8b02 	vpush	{d8}
 8014c74:	eeb0 8a41 	vmov.f32	s16, s2
 8014c78:	eef0 8a61 	vmov.f32	s17, s3
 8014c7c:	da07      	bge.n	8014c8e <__kernel_cos+0x2e>
 8014c7e:	ee10 0a10 	vmov	r0, s0
 8014c82:	4649      	mov	r1, r9
 8014c84:	f7eb ff80 	bl	8000b88 <__aeabi_d2iz>
 8014c88:	2800      	cmp	r0, #0
 8014c8a:	f000 8089 	beq.w	8014da0 <__kernel_cos+0x140>
 8014c8e:	4642      	mov	r2, r8
 8014c90:	464b      	mov	r3, r9
 8014c92:	4640      	mov	r0, r8
 8014c94:	4649      	mov	r1, r9
 8014c96:	f7eb fcc7 	bl	8000628 <__aeabi_dmul>
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	4b4e      	ldr	r3, [pc, #312]	; (8014dd8 <__kernel_cos+0x178>)
 8014c9e:	4604      	mov	r4, r0
 8014ca0:	460d      	mov	r5, r1
 8014ca2:	f7eb fcc1 	bl	8000628 <__aeabi_dmul>
 8014ca6:	a340      	add	r3, pc, #256	; (adr r3, 8014da8 <__kernel_cos+0x148>)
 8014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cac:	4682      	mov	sl, r0
 8014cae:	468b      	mov	fp, r1
 8014cb0:	4620      	mov	r0, r4
 8014cb2:	4629      	mov	r1, r5
 8014cb4:	f7eb fcb8 	bl	8000628 <__aeabi_dmul>
 8014cb8:	a33d      	add	r3, pc, #244	; (adr r3, 8014db0 <__kernel_cos+0x150>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7eb fafd 	bl	80002bc <__adddf3>
 8014cc2:	4622      	mov	r2, r4
 8014cc4:	462b      	mov	r3, r5
 8014cc6:	f7eb fcaf 	bl	8000628 <__aeabi_dmul>
 8014cca:	a33b      	add	r3, pc, #236	; (adr r3, 8014db8 <__kernel_cos+0x158>)
 8014ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd0:	f7eb faf2 	bl	80002b8 <__aeabi_dsub>
 8014cd4:	4622      	mov	r2, r4
 8014cd6:	462b      	mov	r3, r5
 8014cd8:	f7eb fca6 	bl	8000628 <__aeabi_dmul>
 8014cdc:	a338      	add	r3, pc, #224	; (adr r3, 8014dc0 <__kernel_cos+0x160>)
 8014cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce2:	f7eb faeb 	bl	80002bc <__adddf3>
 8014ce6:	4622      	mov	r2, r4
 8014ce8:	462b      	mov	r3, r5
 8014cea:	f7eb fc9d 	bl	8000628 <__aeabi_dmul>
 8014cee:	a336      	add	r3, pc, #216	; (adr r3, 8014dc8 <__kernel_cos+0x168>)
 8014cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf4:	f7eb fae0 	bl	80002b8 <__aeabi_dsub>
 8014cf8:	4622      	mov	r2, r4
 8014cfa:	462b      	mov	r3, r5
 8014cfc:	f7eb fc94 	bl	8000628 <__aeabi_dmul>
 8014d00:	a333      	add	r3, pc, #204	; (adr r3, 8014dd0 <__kernel_cos+0x170>)
 8014d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d06:	f7eb fad9 	bl	80002bc <__adddf3>
 8014d0a:	4622      	mov	r2, r4
 8014d0c:	462b      	mov	r3, r5
 8014d0e:	f7eb fc8b 	bl	8000628 <__aeabi_dmul>
 8014d12:	4622      	mov	r2, r4
 8014d14:	462b      	mov	r3, r5
 8014d16:	f7eb fc87 	bl	8000628 <__aeabi_dmul>
 8014d1a:	ec53 2b18 	vmov	r2, r3, d8
 8014d1e:	4604      	mov	r4, r0
 8014d20:	460d      	mov	r5, r1
 8014d22:	4640      	mov	r0, r8
 8014d24:	4649      	mov	r1, r9
 8014d26:	f7eb fc7f 	bl	8000628 <__aeabi_dmul>
 8014d2a:	460b      	mov	r3, r1
 8014d2c:	4602      	mov	r2, r0
 8014d2e:	4629      	mov	r1, r5
 8014d30:	4620      	mov	r0, r4
 8014d32:	f7eb fac1 	bl	80002b8 <__aeabi_dsub>
 8014d36:	4b29      	ldr	r3, [pc, #164]	; (8014ddc <__kernel_cos+0x17c>)
 8014d38:	429e      	cmp	r6, r3
 8014d3a:	4680      	mov	r8, r0
 8014d3c:	4689      	mov	r9, r1
 8014d3e:	dc11      	bgt.n	8014d64 <__kernel_cos+0x104>
 8014d40:	4602      	mov	r2, r0
 8014d42:	460b      	mov	r3, r1
 8014d44:	4650      	mov	r0, sl
 8014d46:	4659      	mov	r1, fp
 8014d48:	f7eb fab6 	bl	80002b8 <__aeabi_dsub>
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	4924      	ldr	r1, [pc, #144]	; (8014de0 <__kernel_cos+0x180>)
 8014d50:	4602      	mov	r2, r0
 8014d52:	2000      	movs	r0, #0
 8014d54:	f7eb fab0 	bl	80002b8 <__aeabi_dsub>
 8014d58:	ecbd 8b02 	vpop	{d8}
 8014d5c:	ec41 0b10 	vmov	d0, r0, r1
 8014d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d64:	4b1f      	ldr	r3, [pc, #124]	; (8014de4 <__kernel_cos+0x184>)
 8014d66:	491e      	ldr	r1, [pc, #120]	; (8014de0 <__kernel_cos+0x180>)
 8014d68:	429e      	cmp	r6, r3
 8014d6a:	bfcc      	ite	gt
 8014d6c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014de8 <__kernel_cos+0x188>)
 8014d6e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014d72:	2400      	movs	r4, #0
 8014d74:	4622      	mov	r2, r4
 8014d76:	462b      	mov	r3, r5
 8014d78:	2000      	movs	r0, #0
 8014d7a:	f7eb fa9d 	bl	80002b8 <__aeabi_dsub>
 8014d7e:	4622      	mov	r2, r4
 8014d80:	4606      	mov	r6, r0
 8014d82:	460f      	mov	r7, r1
 8014d84:	462b      	mov	r3, r5
 8014d86:	4650      	mov	r0, sl
 8014d88:	4659      	mov	r1, fp
 8014d8a:	f7eb fa95 	bl	80002b8 <__aeabi_dsub>
 8014d8e:	4642      	mov	r2, r8
 8014d90:	464b      	mov	r3, r9
 8014d92:	f7eb fa91 	bl	80002b8 <__aeabi_dsub>
 8014d96:	4602      	mov	r2, r0
 8014d98:	460b      	mov	r3, r1
 8014d9a:	4630      	mov	r0, r6
 8014d9c:	4639      	mov	r1, r7
 8014d9e:	e7d9      	b.n	8014d54 <__kernel_cos+0xf4>
 8014da0:	2000      	movs	r0, #0
 8014da2:	490f      	ldr	r1, [pc, #60]	; (8014de0 <__kernel_cos+0x180>)
 8014da4:	e7d8      	b.n	8014d58 <__kernel_cos+0xf8>
 8014da6:	bf00      	nop
 8014da8:	be8838d4 	.word	0xbe8838d4
 8014dac:	bda8fae9 	.word	0xbda8fae9
 8014db0:	bdb4b1c4 	.word	0xbdb4b1c4
 8014db4:	3e21ee9e 	.word	0x3e21ee9e
 8014db8:	809c52ad 	.word	0x809c52ad
 8014dbc:	3e927e4f 	.word	0x3e927e4f
 8014dc0:	19cb1590 	.word	0x19cb1590
 8014dc4:	3efa01a0 	.word	0x3efa01a0
 8014dc8:	16c15177 	.word	0x16c15177
 8014dcc:	3f56c16c 	.word	0x3f56c16c
 8014dd0:	5555554c 	.word	0x5555554c
 8014dd4:	3fa55555 	.word	0x3fa55555
 8014dd8:	3fe00000 	.word	0x3fe00000
 8014ddc:	3fd33332 	.word	0x3fd33332
 8014de0:	3ff00000 	.word	0x3ff00000
 8014de4:	3fe90000 	.word	0x3fe90000
 8014de8:	3fd20000 	.word	0x3fd20000
 8014dec:	00000000 	.word	0x00000000

08014df0 <__kernel_rem_pio2>:
 8014df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df4:	ed2d 8b02 	vpush	{d8}
 8014df8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014dfc:	1ed4      	subs	r4, r2, #3
 8014dfe:	9308      	str	r3, [sp, #32]
 8014e00:	9101      	str	r1, [sp, #4]
 8014e02:	4bc5      	ldr	r3, [pc, #788]	; (8015118 <__kernel_rem_pio2+0x328>)
 8014e04:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014e06:	9009      	str	r0, [sp, #36]	; 0x24
 8014e08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014e0c:	9304      	str	r3, [sp, #16]
 8014e0e:	9b08      	ldr	r3, [sp, #32]
 8014e10:	3b01      	subs	r3, #1
 8014e12:	9307      	str	r3, [sp, #28]
 8014e14:	2318      	movs	r3, #24
 8014e16:	fb94 f4f3 	sdiv	r4, r4, r3
 8014e1a:	f06f 0317 	mvn.w	r3, #23
 8014e1e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014e22:	fb04 3303 	mla	r3, r4, r3, r3
 8014e26:	eb03 0a02 	add.w	sl, r3, r2
 8014e2a:	9b04      	ldr	r3, [sp, #16]
 8014e2c:	9a07      	ldr	r2, [sp, #28]
 8014e2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015108 <__kernel_rem_pio2+0x318>
 8014e32:	eb03 0802 	add.w	r8, r3, r2
 8014e36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014e38:	1aa7      	subs	r7, r4, r2
 8014e3a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014e3e:	ae22      	add	r6, sp, #136	; 0x88
 8014e40:	2500      	movs	r5, #0
 8014e42:	4545      	cmp	r5, r8
 8014e44:	dd13      	ble.n	8014e6e <__kernel_rem_pio2+0x7e>
 8014e46:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015108 <__kernel_rem_pio2+0x318>
 8014e4a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014e4e:	2600      	movs	r6, #0
 8014e50:	9b04      	ldr	r3, [sp, #16]
 8014e52:	429e      	cmp	r6, r3
 8014e54:	dc32      	bgt.n	8014ebc <__kernel_rem_pio2+0xcc>
 8014e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e58:	9302      	str	r3, [sp, #8]
 8014e5a:	9b08      	ldr	r3, [sp, #32]
 8014e5c:	199d      	adds	r5, r3, r6
 8014e5e:	ab22      	add	r3, sp, #136	; 0x88
 8014e60:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014e64:	9306      	str	r3, [sp, #24]
 8014e66:	ec59 8b18 	vmov	r8, r9, d8
 8014e6a:	2700      	movs	r7, #0
 8014e6c:	e01f      	b.n	8014eae <__kernel_rem_pio2+0xbe>
 8014e6e:	42ef      	cmn	r7, r5
 8014e70:	d407      	bmi.n	8014e82 <__kernel_rem_pio2+0x92>
 8014e72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014e76:	f7eb fb6d 	bl	8000554 <__aeabi_i2d>
 8014e7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014e7e:	3501      	adds	r5, #1
 8014e80:	e7df      	b.n	8014e42 <__kernel_rem_pio2+0x52>
 8014e82:	ec51 0b18 	vmov	r0, r1, d8
 8014e86:	e7f8      	b.n	8014e7a <__kernel_rem_pio2+0x8a>
 8014e88:	9906      	ldr	r1, [sp, #24]
 8014e8a:	9d02      	ldr	r5, [sp, #8]
 8014e8c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014e90:	9106      	str	r1, [sp, #24]
 8014e92:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014e96:	9502      	str	r5, [sp, #8]
 8014e98:	f7eb fbc6 	bl	8000628 <__aeabi_dmul>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	460b      	mov	r3, r1
 8014ea0:	4640      	mov	r0, r8
 8014ea2:	4649      	mov	r1, r9
 8014ea4:	f7eb fa0a 	bl	80002bc <__adddf3>
 8014ea8:	3701      	adds	r7, #1
 8014eaa:	4680      	mov	r8, r0
 8014eac:	4689      	mov	r9, r1
 8014eae:	9b07      	ldr	r3, [sp, #28]
 8014eb0:	429f      	cmp	r7, r3
 8014eb2:	dde9      	ble.n	8014e88 <__kernel_rem_pio2+0x98>
 8014eb4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014eb8:	3601      	adds	r6, #1
 8014eba:	e7c9      	b.n	8014e50 <__kernel_rem_pio2+0x60>
 8014ebc:	9b04      	ldr	r3, [sp, #16]
 8014ebe:	aa0e      	add	r2, sp, #56	; 0x38
 8014ec0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014ec4:	930c      	str	r3, [sp, #48]	; 0x30
 8014ec6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ec8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014ecc:	9c04      	ldr	r4, [sp, #16]
 8014ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ed0:	ab9a      	add	r3, sp, #616	; 0x268
 8014ed2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014ed6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014eda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014ede:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014ee2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014ee6:	ab9a      	add	r3, sp, #616	; 0x268
 8014ee8:	445b      	add	r3, fp
 8014eea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014eee:	2500      	movs	r5, #0
 8014ef0:	1b63      	subs	r3, r4, r5
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	dc78      	bgt.n	8014fe8 <__kernel_rem_pio2+0x1f8>
 8014ef6:	4650      	mov	r0, sl
 8014ef8:	ec49 8b10 	vmov	d0, r8, r9
 8014efc:	f000 fc00 	bl	8015700 <scalbn>
 8014f00:	ec57 6b10 	vmov	r6, r7, d0
 8014f04:	2200      	movs	r2, #0
 8014f06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014f0a:	ee10 0a10 	vmov	r0, s0
 8014f0e:	4639      	mov	r1, r7
 8014f10:	f7eb fb8a 	bl	8000628 <__aeabi_dmul>
 8014f14:	ec41 0b10 	vmov	d0, r0, r1
 8014f18:	f000 fb6e 	bl	80155f8 <floor>
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	ec51 0b10 	vmov	r0, r1, d0
 8014f22:	4b7e      	ldr	r3, [pc, #504]	; (801511c <__kernel_rem_pio2+0x32c>)
 8014f24:	f7eb fb80 	bl	8000628 <__aeabi_dmul>
 8014f28:	4602      	mov	r2, r0
 8014f2a:	460b      	mov	r3, r1
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	4639      	mov	r1, r7
 8014f30:	f7eb f9c2 	bl	80002b8 <__aeabi_dsub>
 8014f34:	460f      	mov	r7, r1
 8014f36:	4606      	mov	r6, r0
 8014f38:	f7eb fe26 	bl	8000b88 <__aeabi_d2iz>
 8014f3c:	9006      	str	r0, [sp, #24]
 8014f3e:	f7eb fb09 	bl	8000554 <__aeabi_i2d>
 8014f42:	4602      	mov	r2, r0
 8014f44:	460b      	mov	r3, r1
 8014f46:	4630      	mov	r0, r6
 8014f48:	4639      	mov	r1, r7
 8014f4a:	f7eb f9b5 	bl	80002b8 <__aeabi_dsub>
 8014f4e:	f1ba 0f00 	cmp.w	sl, #0
 8014f52:	4606      	mov	r6, r0
 8014f54:	460f      	mov	r7, r1
 8014f56:	dd6c      	ble.n	8015032 <__kernel_rem_pio2+0x242>
 8014f58:	1e62      	subs	r2, r4, #1
 8014f5a:	ab0e      	add	r3, sp, #56	; 0x38
 8014f5c:	f1ca 0118 	rsb	r1, sl, #24
 8014f60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014f64:	9d06      	ldr	r5, [sp, #24]
 8014f66:	fa40 f301 	asr.w	r3, r0, r1
 8014f6a:	441d      	add	r5, r3
 8014f6c:	408b      	lsls	r3, r1
 8014f6e:	1ac0      	subs	r0, r0, r3
 8014f70:	ab0e      	add	r3, sp, #56	; 0x38
 8014f72:	9506      	str	r5, [sp, #24]
 8014f74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014f78:	f1ca 0317 	rsb	r3, sl, #23
 8014f7c:	fa40 f303 	asr.w	r3, r0, r3
 8014f80:	9302      	str	r3, [sp, #8]
 8014f82:	9b02      	ldr	r3, [sp, #8]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	dd62      	ble.n	801504e <__kernel_rem_pio2+0x25e>
 8014f88:	9b06      	ldr	r3, [sp, #24]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	9306      	str	r3, [sp, #24]
 8014f90:	4615      	mov	r5, r2
 8014f92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014f96:	4294      	cmp	r4, r2
 8014f98:	f300 8095 	bgt.w	80150c6 <__kernel_rem_pio2+0x2d6>
 8014f9c:	f1ba 0f00 	cmp.w	sl, #0
 8014fa0:	dd07      	ble.n	8014fb2 <__kernel_rem_pio2+0x1c2>
 8014fa2:	f1ba 0f01 	cmp.w	sl, #1
 8014fa6:	f000 80a2 	beq.w	80150ee <__kernel_rem_pio2+0x2fe>
 8014faa:	f1ba 0f02 	cmp.w	sl, #2
 8014fae:	f000 80c1 	beq.w	8015134 <__kernel_rem_pio2+0x344>
 8014fb2:	9b02      	ldr	r3, [sp, #8]
 8014fb4:	2b02      	cmp	r3, #2
 8014fb6:	d14a      	bne.n	801504e <__kernel_rem_pio2+0x25e>
 8014fb8:	4632      	mov	r2, r6
 8014fba:	463b      	mov	r3, r7
 8014fbc:	2000      	movs	r0, #0
 8014fbe:	4958      	ldr	r1, [pc, #352]	; (8015120 <__kernel_rem_pio2+0x330>)
 8014fc0:	f7eb f97a 	bl	80002b8 <__aeabi_dsub>
 8014fc4:	4606      	mov	r6, r0
 8014fc6:	460f      	mov	r7, r1
 8014fc8:	2d00      	cmp	r5, #0
 8014fca:	d040      	beq.n	801504e <__kernel_rem_pio2+0x25e>
 8014fcc:	4650      	mov	r0, sl
 8014fce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015110 <__kernel_rem_pio2+0x320>
 8014fd2:	f000 fb95 	bl	8015700 <scalbn>
 8014fd6:	4630      	mov	r0, r6
 8014fd8:	4639      	mov	r1, r7
 8014fda:	ec53 2b10 	vmov	r2, r3, d0
 8014fde:	f7eb f96b 	bl	80002b8 <__aeabi_dsub>
 8014fe2:	4606      	mov	r6, r0
 8014fe4:	460f      	mov	r7, r1
 8014fe6:	e032      	b.n	801504e <__kernel_rem_pio2+0x25e>
 8014fe8:	2200      	movs	r2, #0
 8014fea:	4b4e      	ldr	r3, [pc, #312]	; (8015124 <__kernel_rem_pio2+0x334>)
 8014fec:	4640      	mov	r0, r8
 8014fee:	4649      	mov	r1, r9
 8014ff0:	f7eb fb1a 	bl	8000628 <__aeabi_dmul>
 8014ff4:	f7eb fdc8 	bl	8000b88 <__aeabi_d2iz>
 8014ff8:	f7eb faac 	bl	8000554 <__aeabi_i2d>
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	4b4a      	ldr	r3, [pc, #296]	; (8015128 <__kernel_rem_pio2+0x338>)
 8015000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015004:	f7eb fb10 	bl	8000628 <__aeabi_dmul>
 8015008:	4602      	mov	r2, r0
 801500a:	460b      	mov	r3, r1
 801500c:	4640      	mov	r0, r8
 801500e:	4649      	mov	r1, r9
 8015010:	f7eb f952 	bl	80002b8 <__aeabi_dsub>
 8015014:	f7eb fdb8 	bl	8000b88 <__aeabi_d2iz>
 8015018:	ab0e      	add	r3, sp, #56	; 0x38
 801501a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801501e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8015022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015026:	f7eb f949 	bl	80002bc <__adddf3>
 801502a:	3501      	adds	r5, #1
 801502c:	4680      	mov	r8, r0
 801502e:	4689      	mov	r9, r1
 8015030:	e75e      	b.n	8014ef0 <__kernel_rem_pio2+0x100>
 8015032:	d105      	bne.n	8015040 <__kernel_rem_pio2+0x250>
 8015034:	1e63      	subs	r3, r4, #1
 8015036:	aa0e      	add	r2, sp, #56	; 0x38
 8015038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801503c:	15c3      	asrs	r3, r0, #23
 801503e:	e79f      	b.n	8014f80 <__kernel_rem_pio2+0x190>
 8015040:	2200      	movs	r2, #0
 8015042:	4b3a      	ldr	r3, [pc, #232]	; (801512c <__kernel_rem_pio2+0x33c>)
 8015044:	f7eb fd76 	bl	8000b34 <__aeabi_dcmpge>
 8015048:	2800      	cmp	r0, #0
 801504a:	d139      	bne.n	80150c0 <__kernel_rem_pio2+0x2d0>
 801504c:	9002      	str	r0, [sp, #8]
 801504e:	2200      	movs	r2, #0
 8015050:	2300      	movs	r3, #0
 8015052:	4630      	mov	r0, r6
 8015054:	4639      	mov	r1, r7
 8015056:	f7eb fd4f 	bl	8000af8 <__aeabi_dcmpeq>
 801505a:	2800      	cmp	r0, #0
 801505c:	f000 80c7 	beq.w	80151ee <__kernel_rem_pio2+0x3fe>
 8015060:	1e65      	subs	r5, r4, #1
 8015062:	462b      	mov	r3, r5
 8015064:	2200      	movs	r2, #0
 8015066:	9904      	ldr	r1, [sp, #16]
 8015068:	428b      	cmp	r3, r1
 801506a:	da6a      	bge.n	8015142 <__kernel_rem_pio2+0x352>
 801506c:	2a00      	cmp	r2, #0
 801506e:	f000 8088 	beq.w	8015182 <__kernel_rem_pio2+0x392>
 8015072:	ab0e      	add	r3, sp, #56	; 0x38
 8015074:	f1aa 0a18 	sub.w	sl, sl, #24
 8015078:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801507c:	2b00      	cmp	r3, #0
 801507e:	f000 80b4 	beq.w	80151ea <__kernel_rem_pio2+0x3fa>
 8015082:	4650      	mov	r0, sl
 8015084:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015110 <__kernel_rem_pio2+0x320>
 8015088:	f000 fb3a 	bl	8015700 <scalbn>
 801508c:	00ec      	lsls	r4, r5, #3
 801508e:	ab72      	add	r3, sp, #456	; 0x1c8
 8015090:	191e      	adds	r6, r3, r4
 8015092:	ec59 8b10 	vmov	r8, r9, d0
 8015096:	f106 0a08 	add.w	sl, r6, #8
 801509a:	462f      	mov	r7, r5
 801509c:	2f00      	cmp	r7, #0
 801509e:	f280 80df 	bge.w	8015260 <__kernel_rem_pio2+0x470>
 80150a2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015108 <__kernel_rem_pio2+0x318>
 80150a6:	f04f 0a00 	mov.w	sl, #0
 80150aa:	eba5 030a 	sub.w	r3, r5, sl
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	f2c0 810a 	blt.w	80152c8 <__kernel_rem_pio2+0x4d8>
 80150b4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015130 <__kernel_rem_pio2+0x340>
 80150b8:	ec59 8b18 	vmov	r8, r9, d8
 80150bc:	2700      	movs	r7, #0
 80150be:	e0f5      	b.n	80152ac <__kernel_rem_pio2+0x4bc>
 80150c0:	2302      	movs	r3, #2
 80150c2:	9302      	str	r3, [sp, #8]
 80150c4:	e760      	b.n	8014f88 <__kernel_rem_pio2+0x198>
 80150c6:	ab0e      	add	r3, sp, #56	; 0x38
 80150c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150cc:	b94d      	cbnz	r5, 80150e2 <__kernel_rem_pio2+0x2f2>
 80150ce:	b12b      	cbz	r3, 80150dc <__kernel_rem_pio2+0x2ec>
 80150d0:	a80e      	add	r0, sp, #56	; 0x38
 80150d2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80150d6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80150da:	2301      	movs	r3, #1
 80150dc:	3201      	adds	r2, #1
 80150de:	461d      	mov	r5, r3
 80150e0:	e759      	b.n	8014f96 <__kernel_rem_pio2+0x1a6>
 80150e2:	a80e      	add	r0, sp, #56	; 0x38
 80150e4:	1acb      	subs	r3, r1, r3
 80150e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80150ea:	462b      	mov	r3, r5
 80150ec:	e7f6      	b.n	80150dc <__kernel_rem_pio2+0x2ec>
 80150ee:	1e62      	subs	r2, r4, #1
 80150f0:	ab0e      	add	r3, sp, #56	; 0x38
 80150f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80150fa:	a90e      	add	r1, sp, #56	; 0x38
 80150fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015100:	e757      	b.n	8014fb2 <__kernel_rem_pio2+0x1c2>
 8015102:	bf00      	nop
 8015104:	f3af 8000 	nop.w
	...
 8015114:	3ff00000 	.word	0x3ff00000
 8015118:	0801a2d8 	.word	0x0801a2d8
 801511c:	40200000 	.word	0x40200000
 8015120:	3ff00000 	.word	0x3ff00000
 8015124:	3e700000 	.word	0x3e700000
 8015128:	41700000 	.word	0x41700000
 801512c:	3fe00000 	.word	0x3fe00000
 8015130:	0801a298 	.word	0x0801a298
 8015134:	1e62      	subs	r2, r4, #1
 8015136:	ab0e      	add	r3, sp, #56	; 0x38
 8015138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801513c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015140:	e7db      	b.n	80150fa <__kernel_rem_pio2+0x30a>
 8015142:	a90e      	add	r1, sp, #56	; 0x38
 8015144:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015148:	3b01      	subs	r3, #1
 801514a:	430a      	orrs	r2, r1
 801514c:	e78b      	b.n	8015066 <__kernel_rem_pio2+0x276>
 801514e:	3301      	adds	r3, #1
 8015150:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015154:	2900      	cmp	r1, #0
 8015156:	d0fa      	beq.n	801514e <__kernel_rem_pio2+0x35e>
 8015158:	9a08      	ldr	r2, [sp, #32]
 801515a:	4422      	add	r2, r4
 801515c:	00d2      	lsls	r2, r2, #3
 801515e:	a922      	add	r1, sp, #136	; 0x88
 8015160:	18e3      	adds	r3, r4, r3
 8015162:	9206      	str	r2, [sp, #24]
 8015164:	440a      	add	r2, r1
 8015166:	9302      	str	r3, [sp, #8]
 8015168:	f10b 0108 	add.w	r1, fp, #8
 801516c:	f102 0308 	add.w	r3, r2, #8
 8015170:	1c66      	adds	r6, r4, #1
 8015172:	910a      	str	r1, [sp, #40]	; 0x28
 8015174:	2500      	movs	r5, #0
 8015176:	930d      	str	r3, [sp, #52]	; 0x34
 8015178:	9b02      	ldr	r3, [sp, #8]
 801517a:	42b3      	cmp	r3, r6
 801517c:	da04      	bge.n	8015188 <__kernel_rem_pio2+0x398>
 801517e:	461c      	mov	r4, r3
 8015180:	e6a6      	b.n	8014ed0 <__kernel_rem_pio2+0xe0>
 8015182:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015184:	2301      	movs	r3, #1
 8015186:	e7e3      	b.n	8015150 <__kernel_rem_pio2+0x360>
 8015188:	9b06      	ldr	r3, [sp, #24]
 801518a:	18ef      	adds	r7, r5, r3
 801518c:	ab22      	add	r3, sp, #136	; 0x88
 801518e:	441f      	add	r7, r3
 8015190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015192:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015196:	f7eb f9dd 	bl	8000554 <__aeabi_i2d>
 801519a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801519c:	461c      	mov	r4, r3
 801519e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80151a0:	e9c7 0100 	strd	r0, r1, [r7]
 80151a4:	eb03 0b05 	add.w	fp, r3, r5
 80151a8:	2700      	movs	r7, #0
 80151aa:	f04f 0800 	mov.w	r8, #0
 80151ae:	f04f 0900 	mov.w	r9, #0
 80151b2:	9b07      	ldr	r3, [sp, #28]
 80151b4:	429f      	cmp	r7, r3
 80151b6:	dd08      	ble.n	80151ca <__kernel_rem_pio2+0x3da>
 80151b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151ba:	aa72      	add	r2, sp, #456	; 0x1c8
 80151bc:	18eb      	adds	r3, r5, r3
 80151be:	4413      	add	r3, r2
 80151c0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80151c4:	3601      	adds	r6, #1
 80151c6:	3508      	adds	r5, #8
 80151c8:	e7d6      	b.n	8015178 <__kernel_rem_pio2+0x388>
 80151ca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80151ce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80151d2:	f7eb fa29 	bl	8000628 <__aeabi_dmul>
 80151d6:	4602      	mov	r2, r0
 80151d8:	460b      	mov	r3, r1
 80151da:	4640      	mov	r0, r8
 80151dc:	4649      	mov	r1, r9
 80151de:	f7eb f86d 	bl	80002bc <__adddf3>
 80151e2:	3701      	adds	r7, #1
 80151e4:	4680      	mov	r8, r0
 80151e6:	4689      	mov	r9, r1
 80151e8:	e7e3      	b.n	80151b2 <__kernel_rem_pio2+0x3c2>
 80151ea:	3d01      	subs	r5, #1
 80151ec:	e741      	b.n	8015072 <__kernel_rem_pio2+0x282>
 80151ee:	f1ca 0000 	rsb	r0, sl, #0
 80151f2:	ec47 6b10 	vmov	d0, r6, r7
 80151f6:	f000 fa83 	bl	8015700 <scalbn>
 80151fa:	ec57 6b10 	vmov	r6, r7, d0
 80151fe:	2200      	movs	r2, #0
 8015200:	4b99      	ldr	r3, [pc, #612]	; (8015468 <__kernel_rem_pio2+0x678>)
 8015202:	ee10 0a10 	vmov	r0, s0
 8015206:	4639      	mov	r1, r7
 8015208:	f7eb fc94 	bl	8000b34 <__aeabi_dcmpge>
 801520c:	b1f8      	cbz	r0, 801524e <__kernel_rem_pio2+0x45e>
 801520e:	2200      	movs	r2, #0
 8015210:	4b96      	ldr	r3, [pc, #600]	; (801546c <__kernel_rem_pio2+0x67c>)
 8015212:	4630      	mov	r0, r6
 8015214:	4639      	mov	r1, r7
 8015216:	f7eb fa07 	bl	8000628 <__aeabi_dmul>
 801521a:	f7eb fcb5 	bl	8000b88 <__aeabi_d2iz>
 801521e:	4680      	mov	r8, r0
 8015220:	f7eb f998 	bl	8000554 <__aeabi_i2d>
 8015224:	2200      	movs	r2, #0
 8015226:	4b90      	ldr	r3, [pc, #576]	; (8015468 <__kernel_rem_pio2+0x678>)
 8015228:	f7eb f9fe 	bl	8000628 <__aeabi_dmul>
 801522c:	460b      	mov	r3, r1
 801522e:	4602      	mov	r2, r0
 8015230:	4639      	mov	r1, r7
 8015232:	4630      	mov	r0, r6
 8015234:	f7eb f840 	bl	80002b8 <__aeabi_dsub>
 8015238:	f7eb fca6 	bl	8000b88 <__aeabi_d2iz>
 801523c:	1c65      	adds	r5, r4, #1
 801523e:	ab0e      	add	r3, sp, #56	; 0x38
 8015240:	f10a 0a18 	add.w	sl, sl, #24
 8015244:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015248:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801524c:	e719      	b.n	8015082 <__kernel_rem_pio2+0x292>
 801524e:	4630      	mov	r0, r6
 8015250:	4639      	mov	r1, r7
 8015252:	f7eb fc99 	bl	8000b88 <__aeabi_d2iz>
 8015256:	ab0e      	add	r3, sp, #56	; 0x38
 8015258:	4625      	mov	r5, r4
 801525a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801525e:	e710      	b.n	8015082 <__kernel_rem_pio2+0x292>
 8015260:	ab0e      	add	r3, sp, #56	; 0x38
 8015262:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015266:	f7eb f975 	bl	8000554 <__aeabi_i2d>
 801526a:	4642      	mov	r2, r8
 801526c:	464b      	mov	r3, r9
 801526e:	f7eb f9db 	bl	8000628 <__aeabi_dmul>
 8015272:	2200      	movs	r2, #0
 8015274:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015278:	4b7c      	ldr	r3, [pc, #496]	; (801546c <__kernel_rem_pio2+0x67c>)
 801527a:	4640      	mov	r0, r8
 801527c:	4649      	mov	r1, r9
 801527e:	f7eb f9d3 	bl	8000628 <__aeabi_dmul>
 8015282:	3f01      	subs	r7, #1
 8015284:	4680      	mov	r8, r0
 8015286:	4689      	mov	r9, r1
 8015288:	e708      	b.n	801509c <__kernel_rem_pio2+0x2ac>
 801528a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015292:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8015296:	f7eb f9c7 	bl	8000628 <__aeabi_dmul>
 801529a:	4602      	mov	r2, r0
 801529c:	460b      	mov	r3, r1
 801529e:	4640      	mov	r0, r8
 80152a0:	4649      	mov	r1, r9
 80152a2:	f7eb f80b 	bl	80002bc <__adddf3>
 80152a6:	3701      	adds	r7, #1
 80152a8:	4680      	mov	r8, r0
 80152aa:	4689      	mov	r9, r1
 80152ac:	9b04      	ldr	r3, [sp, #16]
 80152ae:	429f      	cmp	r7, r3
 80152b0:	dc01      	bgt.n	80152b6 <__kernel_rem_pio2+0x4c6>
 80152b2:	45ba      	cmp	sl, r7
 80152b4:	dae9      	bge.n	801528a <__kernel_rem_pio2+0x49a>
 80152b6:	ab4a      	add	r3, sp, #296	; 0x128
 80152b8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80152bc:	e9c3 8900 	strd	r8, r9, [r3]
 80152c0:	f10a 0a01 	add.w	sl, sl, #1
 80152c4:	3e08      	subs	r6, #8
 80152c6:	e6f0      	b.n	80150aa <__kernel_rem_pio2+0x2ba>
 80152c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80152ca:	2b03      	cmp	r3, #3
 80152cc:	d85b      	bhi.n	8015386 <__kernel_rem_pio2+0x596>
 80152ce:	e8df f003 	tbb	[pc, r3]
 80152d2:	264a      	.short	0x264a
 80152d4:	0226      	.short	0x0226
 80152d6:	ab9a      	add	r3, sp, #616	; 0x268
 80152d8:	441c      	add	r4, r3
 80152da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80152de:	46a2      	mov	sl, r4
 80152e0:	46ab      	mov	fp, r5
 80152e2:	f1bb 0f00 	cmp.w	fp, #0
 80152e6:	dc6c      	bgt.n	80153c2 <__kernel_rem_pio2+0x5d2>
 80152e8:	46a2      	mov	sl, r4
 80152ea:	46ab      	mov	fp, r5
 80152ec:	f1bb 0f01 	cmp.w	fp, #1
 80152f0:	f300 8086 	bgt.w	8015400 <__kernel_rem_pio2+0x610>
 80152f4:	2000      	movs	r0, #0
 80152f6:	2100      	movs	r1, #0
 80152f8:	2d01      	cmp	r5, #1
 80152fa:	f300 80a0 	bgt.w	801543e <__kernel_rem_pio2+0x64e>
 80152fe:	9b02      	ldr	r3, [sp, #8]
 8015300:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8015304:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015308:	2b00      	cmp	r3, #0
 801530a:	f040 809e 	bne.w	801544a <__kernel_rem_pio2+0x65a>
 801530e:	9b01      	ldr	r3, [sp, #4]
 8015310:	e9c3 7800 	strd	r7, r8, [r3]
 8015314:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015318:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801531c:	e033      	b.n	8015386 <__kernel_rem_pio2+0x596>
 801531e:	3408      	adds	r4, #8
 8015320:	ab4a      	add	r3, sp, #296	; 0x128
 8015322:	441c      	add	r4, r3
 8015324:	462e      	mov	r6, r5
 8015326:	2000      	movs	r0, #0
 8015328:	2100      	movs	r1, #0
 801532a:	2e00      	cmp	r6, #0
 801532c:	da3a      	bge.n	80153a4 <__kernel_rem_pio2+0x5b4>
 801532e:	9b02      	ldr	r3, [sp, #8]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d03d      	beq.n	80153b0 <__kernel_rem_pio2+0x5c0>
 8015334:	4602      	mov	r2, r0
 8015336:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801533a:	9c01      	ldr	r4, [sp, #4]
 801533c:	e9c4 2300 	strd	r2, r3, [r4]
 8015340:	4602      	mov	r2, r0
 8015342:	460b      	mov	r3, r1
 8015344:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015348:	f7ea ffb6 	bl	80002b8 <__aeabi_dsub>
 801534c:	ae4c      	add	r6, sp, #304	; 0x130
 801534e:	2401      	movs	r4, #1
 8015350:	42a5      	cmp	r5, r4
 8015352:	da30      	bge.n	80153b6 <__kernel_rem_pio2+0x5c6>
 8015354:	9b02      	ldr	r3, [sp, #8]
 8015356:	b113      	cbz	r3, 801535e <__kernel_rem_pio2+0x56e>
 8015358:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801535c:	4619      	mov	r1, r3
 801535e:	9b01      	ldr	r3, [sp, #4]
 8015360:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015364:	e00f      	b.n	8015386 <__kernel_rem_pio2+0x596>
 8015366:	ab9a      	add	r3, sp, #616	; 0x268
 8015368:	441c      	add	r4, r3
 801536a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801536e:	2000      	movs	r0, #0
 8015370:	2100      	movs	r1, #0
 8015372:	2d00      	cmp	r5, #0
 8015374:	da10      	bge.n	8015398 <__kernel_rem_pio2+0x5a8>
 8015376:	9b02      	ldr	r3, [sp, #8]
 8015378:	b113      	cbz	r3, 8015380 <__kernel_rem_pio2+0x590>
 801537a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801537e:	4619      	mov	r1, r3
 8015380:	9b01      	ldr	r3, [sp, #4]
 8015382:	e9c3 0100 	strd	r0, r1, [r3]
 8015386:	9b06      	ldr	r3, [sp, #24]
 8015388:	f003 0007 	and.w	r0, r3, #7
 801538c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015390:	ecbd 8b02 	vpop	{d8}
 8015394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015398:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801539c:	f7ea ff8e 	bl	80002bc <__adddf3>
 80153a0:	3d01      	subs	r5, #1
 80153a2:	e7e6      	b.n	8015372 <__kernel_rem_pio2+0x582>
 80153a4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80153a8:	f7ea ff88 	bl	80002bc <__adddf3>
 80153ac:	3e01      	subs	r6, #1
 80153ae:	e7bc      	b.n	801532a <__kernel_rem_pio2+0x53a>
 80153b0:	4602      	mov	r2, r0
 80153b2:	460b      	mov	r3, r1
 80153b4:	e7c1      	b.n	801533a <__kernel_rem_pio2+0x54a>
 80153b6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80153ba:	f7ea ff7f 	bl	80002bc <__adddf3>
 80153be:	3401      	adds	r4, #1
 80153c0:	e7c6      	b.n	8015350 <__kernel_rem_pio2+0x560>
 80153c2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80153c6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80153ca:	4640      	mov	r0, r8
 80153cc:	ec53 2b17 	vmov	r2, r3, d7
 80153d0:	4649      	mov	r1, r9
 80153d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80153d6:	f7ea ff71 	bl	80002bc <__adddf3>
 80153da:	4602      	mov	r2, r0
 80153dc:	460b      	mov	r3, r1
 80153de:	4606      	mov	r6, r0
 80153e0:	460f      	mov	r7, r1
 80153e2:	4640      	mov	r0, r8
 80153e4:	4649      	mov	r1, r9
 80153e6:	f7ea ff67 	bl	80002b8 <__aeabi_dsub>
 80153ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80153ee:	f7ea ff65 	bl	80002bc <__adddf3>
 80153f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80153f6:	e9ca 0100 	strd	r0, r1, [sl]
 80153fa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80153fe:	e770      	b.n	80152e2 <__kernel_rem_pio2+0x4f2>
 8015400:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8015404:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015408:	4630      	mov	r0, r6
 801540a:	ec53 2b17 	vmov	r2, r3, d7
 801540e:	4639      	mov	r1, r7
 8015410:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015414:	f7ea ff52 	bl	80002bc <__adddf3>
 8015418:	4602      	mov	r2, r0
 801541a:	460b      	mov	r3, r1
 801541c:	4680      	mov	r8, r0
 801541e:	4689      	mov	r9, r1
 8015420:	4630      	mov	r0, r6
 8015422:	4639      	mov	r1, r7
 8015424:	f7ea ff48 	bl	80002b8 <__aeabi_dsub>
 8015428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801542c:	f7ea ff46 	bl	80002bc <__adddf3>
 8015430:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015434:	e9ca 0100 	strd	r0, r1, [sl]
 8015438:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801543c:	e756      	b.n	80152ec <__kernel_rem_pio2+0x4fc>
 801543e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015442:	f7ea ff3b 	bl	80002bc <__adddf3>
 8015446:	3d01      	subs	r5, #1
 8015448:	e756      	b.n	80152f8 <__kernel_rem_pio2+0x508>
 801544a:	9b01      	ldr	r3, [sp, #4]
 801544c:	9a01      	ldr	r2, [sp, #4]
 801544e:	601f      	str	r7, [r3, #0]
 8015450:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015454:	605c      	str	r4, [r3, #4]
 8015456:	609d      	str	r5, [r3, #8]
 8015458:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801545c:	60d3      	str	r3, [r2, #12]
 801545e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015462:	6110      	str	r0, [r2, #16]
 8015464:	6153      	str	r3, [r2, #20]
 8015466:	e78e      	b.n	8015386 <__kernel_rem_pio2+0x596>
 8015468:	41700000 	.word	0x41700000
 801546c:	3e700000 	.word	0x3e700000

08015470 <__kernel_sin>:
 8015470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015474:	ec55 4b10 	vmov	r4, r5, d0
 8015478:	b085      	sub	sp, #20
 801547a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801547e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015482:	ed8d 1b00 	vstr	d1, [sp]
 8015486:	9002      	str	r0, [sp, #8]
 8015488:	da06      	bge.n	8015498 <__kernel_sin+0x28>
 801548a:	ee10 0a10 	vmov	r0, s0
 801548e:	4629      	mov	r1, r5
 8015490:	f7eb fb7a 	bl	8000b88 <__aeabi_d2iz>
 8015494:	2800      	cmp	r0, #0
 8015496:	d051      	beq.n	801553c <__kernel_sin+0xcc>
 8015498:	4622      	mov	r2, r4
 801549a:	462b      	mov	r3, r5
 801549c:	4620      	mov	r0, r4
 801549e:	4629      	mov	r1, r5
 80154a0:	f7eb f8c2 	bl	8000628 <__aeabi_dmul>
 80154a4:	4682      	mov	sl, r0
 80154a6:	468b      	mov	fp, r1
 80154a8:	4602      	mov	r2, r0
 80154aa:	460b      	mov	r3, r1
 80154ac:	4620      	mov	r0, r4
 80154ae:	4629      	mov	r1, r5
 80154b0:	f7eb f8ba 	bl	8000628 <__aeabi_dmul>
 80154b4:	a341      	add	r3, pc, #260	; (adr r3, 80155bc <__kernel_sin+0x14c>)
 80154b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ba:	4680      	mov	r8, r0
 80154bc:	4689      	mov	r9, r1
 80154be:	4650      	mov	r0, sl
 80154c0:	4659      	mov	r1, fp
 80154c2:	f7eb f8b1 	bl	8000628 <__aeabi_dmul>
 80154c6:	a33f      	add	r3, pc, #252	; (adr r3, 80155c4 <__kernel_sin+0x154>)
 80154c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154cc:	f7ea fef4 	bl	80002b8 <__aeabi_dsub>
 80154d0:	4652      	mov	r2, sl
 80154d2:	465b      	mov	r3, fp
 80154d4:	f7eb f8a8 	bl	8000628 <__aeabi_dmul>
 80154d8:	a33c      	add	r3, pc, #240	; (adr r3, 80155cc <__kernel_sin+0x15c>)
 80154da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154de:	f7ea feed 	bl	80002bc <__adddf3>
 80154e2:	4652      	mov	r2, sl
 80154e4:	465b      	mov	r3, fp
 80154e6:	f7eb f89f 	bl	8000628 <__aeabi_dmul>
 80154ea:	a33a      	add	r3, pc, #232	; (adr r3, 80155d4 <__kernel_sin+0x164>)
 80154ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f0:	f7ea fee2 	bl	80002b8 <__aeabi_dsub>
 80154f4:	4652      	mov	r2, sl
 80154f6:	465b      	mov	r3, fp
 80154f8:	f7eb f896 	bl	8000628 <__aeabi_dmul>
 80154fc:	a337      	add	r3, pc, #220	; (adr r3, 80155dc <__kernel_sin+0x16c>)
 80154fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015502:	f7ea fedb 	bl	80002bc <__adddf3>
 8015506:	9b02      	ldr	r3, [sp, #8]
 8015508:	4606      	mov	r6, r0
 801550a:	460f      	mov	r7, r1
 801550c:	b9db      	cbnz	r3, 8015546 <__kernel_sin+0xd6>
 801550e:	4602      	mov	r2, r0
 8015510:	460b      	mov	r3, r1
 8015512:	4650      	mov	r0, sl
 8015514:	4659      	mov	r1, fp
 8015516:	f7eb f887 	bl	8000628 <__aeabi_dmul>
 801551a:	a325      	add	r3, pc, #148	; (adr r3, 80155b0 <__kernel_sin+0x140>)
 801551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015520:	f7ea feca 	bl	80002b8 <__aeabi_dsub>
 8015524:	4642      	mov	r2, r8
 8015526:	464b      	mov	r3, r9
 8015528:	f7eb f87e 	bl	8000628 <__aeabi_dmul>
 801552c:	4602      	mov	r2, r0
 801552e:	460b      	mov	r3, r1
 8015530:	4620      	mov	r0, r4
 8015532:	4629      	mov	r1, r5
 8015534:	f7ea fec2 	bl	80002bc <__adddf3>
 8015538:	4604      	mov	r4, r0
 801553a:	460d      	mov	r5, r1
 801553c:	ec45 4b10 	vmov	d0, r4, r5
 8015540:	b005      	add	sp, #20
 8015542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015546:	2200      	movs	r2, #0
 8015548:	4b1b      	ldr	r3, [pc, #108]	; (80155b8 <__kernel_sin+0x148>)
 801554a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801554e:	f7eb f86b 	bl	8000628 <__aeabi_dmul>
 8015552:	4632      	mov	r2, r6
 8015554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015558:	463b      	mov	r3, r7
 801555a:	4640      	mov	r0, r8
 801555c:	4649      	mov	r1, r9
 801555e:	f7eb f863 	bl	8000628 <__aeabi_dmul>
 8015562:	4602      	mov	r2, r0
 8015564:	460b      	mov	r3, r1
 8015566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801556a:	f7ea fea5 	bl	80002b8 <__aeabi_dsub>
 801556e:	4652      	mov	r2, sl
 8015570:	465b      	mov	r3, fp
 8015572:	f7eb f859 	bl	8000628 <__aeabi_dmul>
 8015576:	e9dd 2300 	ldrd	r2, r3, [sp]
 801557a:	f7ea fe9d 	bl	80002b8 <__aeabi_dsub>
 801557e:	a30c      	add	r3, pc, #48	; (adr r3, 80155b0 <__kernel_sin+0x140>)
 8015580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015584:	4606      	mov	r6, r0
 8015586:	460f      	mov	r7, r1
 8015588:	4640      	mov	r0, r8
 801558a:	4649      	mov	r1, r9
 801558c:	f7eb f84c 	bl	8000628 <__aeabi_dmul>
 8015590:	4602      	mov	r2, r0
 8015592:	460b      	mov	r3, r1
 8015594:	4630      	mov	r0, r6
 8015596:	4639      	mov	r1, r7
 8015598:	f7ea fe90 	bl	80002bc <__adddf3>
 801559c:	4602      	mov	r2, r0
 801559e:	460b      	mov	r3, r1
 80155a0:	4620      	mov	r0, r4
 80155a2:	4629      	mov	r1, r5
 80155a4:	f7ea fe88 	bl	80002b8 <__aeabi_dsub>
 80155a8:	e7c6      	b.n	8015538 <__kernel_sin+0xc8>
 80155aa:	bf00      	nop
 80155ac:	f3af 8000 	nop.w
 80155b0:	55555549 	.word	0x55555549
 80155b4:	3fc55555 	.word	0x3fc55555
 80155b8:	3fe00000 	.word	0x3fe00000
 80155bc:	5acfd57c 	.word	0x5acfd57c
 80155c0:	3de5d93a 	.word	0x3de5d93a
 80155c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80155c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80155cc:	57b1fe7d 	.word	0x57b1fe7d
 80155d0:	3ec71de3 	.word	0x3ec71de3
 80155d4:	19c161d5 	.word	0x19c161d5
 80155d8:	3f2a01a0 	.word	0x3f2a01a0
 80155dc:	1110f8a6 	.word	0x1110f8a6
 80155e0:	3f811111 	.word	0x3f811111

080155e4 <fabs>:
 80155e4:	ec51 0b10 	vmov	r0, r1, d0
 80155e8:	ee10 2a10 	vmov	r2, s0
 80155ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80155f0:	ec43 2b10 	vmov	d0, r2, r3
 80155f4:	4770      	bx	lr
	...

080155f8 <floor>:
 80155f8:	ec51 0b10 	vmov	r0, r1, d0
 80155fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015600:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015604:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015608:	2e13      	cmp	r6, #19
 801560a:	460c      	mov	r4, r1
 801560c:	ee10 5a10 	vmov	r5, s0
 8015610:	4680      	mov	r8, r0
 8015612:	dc34      	bgt.n	801567e <floor+0x86>
 8015614:	2e00      	cmp	r6, #0
 8015616:	da16      	bge.n	8015646 <floor+0x4e>
 8015618:	a335      	add	r3, pc, #212	; (adr r3, 80156f0 <floor+0xf8>)
 801561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561e:	f7ea fe4d 	bl	80002bc <__adddf3>
 8015622:	2200      	movs	r2, #0
 8015624:	2300      	movs	r3, #0
 8015626:	f7eb fa8f 	bl	8000b48 <__aeabi_dcmpgt>
 801562a:	b148      	cbz	r0, 8015640 <floor+0x48>
 801562c:	2c00      	cmp	r4, #0
 801562e:	da59      	bge.n	80156e4 <floor+0xec>
 8015630:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015634:	4a30      	ldr	r2, [pc, #192]	; (80156f8 <floor+0x100>)
 8015636:	432b      	orrs	r3, r5
 8015638:	2500      	movs	r5, #0
 801563a:	42ab      	cmp	r3, r5
 801563c:	bf18      	it	ne
 801563e:	4614      	movne	r4, r2
 8015640:	4621      	mov	r1, r4
 8015642:	4628      	mov	r0, r5
 8015644:	e025      	b.n	8015692 <floor+0x9a>
 8015646:	4f2d      	ldr	r7, [pc, #180]	; (80156fc <floor+0x104>)
 8015648:	4137      	asrs	r7, r6
 801564a:	ea01 0307 	and.w	r3, r1, r7
 801564e:	4303      	orrs	r3, r0
 8015650:	d01f      	beq.n	8015692 <floor+0x9a>
 8015652:	a327      	add	r3, pc, #156	; (adr r3, 80156f0 <floor+0xf8>)
 8015654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015658:	f7ea fe30 	bl	80002bc <__adddf3>
 801565c:	2200      	movs	r2, #0
 801565e:	2300      	movs	r3, #0
 8015660:	f7eb fa72 	bl	8000b48 <__aeabi_dcmpgt>
 8015664:	2800      	cmp	r0, #0
 8015666:	d0eb      	beq.n	8015640 <floor+0x48>
 8015668:	2c00      	cmp	r4, #0
 801566a:	bfbe      	ittt	lt
 801566c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015670:	fa43 f606 	asrlt.w	r6, r3, r6
 8015674:	19a4      	addlt	r4, r4, r6
 8015676:	ea24 0407 	bic.w	r4, r4, r7
 801567a:	2500      	movs	r5, #0
 801567c:	e7e0      	b.n	8015640 <floor+0x48>
 801567e:	2e33      	cmp	r6, #51	; 0x33
 8015680:	dd0b      	ble.n	801569a <floor+0xa2>
 8015682:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015686:	d104      	bne.n	8015692 <floor+0x9a>
 8015688:	ee10 2a10 	vmov	r2, s0
 801568c:	460b      	mov	r3, r1
 801568e:	f7ea fe15 	bl	80002bc <__adddf3>
 8015692:	ec41 0b10 	vmov	d0, r0, r1
 8015696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801569a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801569e:	f04f 33ff 	mov.w	r3, #4294967295
 80156a2:	fa23 f707 	lsr.w	r7, r3, r7
 80156a6:	4207      	tst	r7, r0
 80156a8:	d0f3      	beq.n	8015692 <floor+0x9a>
 80156aa:	a311      	add	r3, pc, #68	; (adr r3, 80156f0 <floor+0xf8>)
 80156ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b0:	f7ea fe04 	bl	80002bc <__adddf3>
 80156b4:	2200      	movs	r2, #0
 80156b6:	2300      	movs	r3, #0
 80156b8:	f7eb fa46 	bl	8000b48 <__aeabi_dcmpgt>
 80156bc:	2800      	cmp	r0, #0
 80156be:	d0bf      	beq.n	8015640 <floor+0x48>
 80156c0:	2c00      	cmp	r4, #0
 80156c2:	da02      	bge.n	80156ca <floor+0xd2>
 80156c4:	2e14      	cmp	r6, #20
 80156c6:	d103      	bne.n	80156d0 <floor+0xd8>
 80156c8:	3401      	adds	r4, #1
 80156ca:	ea25 0507 	bic.w	r5, r5, r7
 80156ce:	e7b7      	b.n	8015640 <floor+0x48>
 80156d0:	2301      	movs	r3, #1
 80156d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80156d6:	fa03 f606 	lsl.w	r6, r3, r6
 80156da:	4435      	add	r5, r6
 80156dc:	4545      	cmp	r5, r8
 80156de:	bf38      	it	cc
 80156e0:	18e4      	addcc	r4, r4, r3
 80156e2:	e7f2      	b.n	80156ca <floor+0xd2>
 80156e4:	2500      	movs	r5, #0
 80156e6:	462c      	mov	r4, r5
 80156e8:	e7aa      	b.n	8015640 <floor+0x48>
 80156ea:	bf00      	nop
 80156ec:	f3af 8000 	nop.w
 80156f0:	8800759c 	.word	0x8800759c
 80156f4:	7e37e43c 	.word	0x7e37e43c
 80156f8:	bff00000 	.word	0xbff00000
 80156fc:	000fffff 	.word	0x000fffff

08015700 <scalbn>:
 8015700:	b570      	push	{r4, r5, r6, lr}
 8015702:	ec55 4b10 	vmov	r4, r5, d0
 8015706:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801570a:	4606      	mov	r6, r0
 801570c:	462b      	mov	r3, r5
 801570e:	b9aa      	cbnz	r2, 801573c <scalbn+0x3c>
 8015710:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015714:	4323      	orrs	r3, r4
 8015716:	d03b      	beq.n	8015790 <scalbn+0x90>
 8015718:	4b31      	ldr	r3, [pc, #196]	; (80157e0 <scalbn+0xe0>)
 801571a:	4629      	mov	r1, r5
 801571c:	2200      	movs	r2, #0
 801571e:	ee10 0a10 	vmov	r0, s0
 8015722:	f7ea ff81 	bl	8000628 <__aeabi_dmul>
 8015726:	4b2f      	ldr	r3, [pc, #188]	; (80157e4 <scalbn+0xe4>)
 8015728:	429e      	cmp	r6, r3
 801572a:	4604      	mov	r4, r0
 801572c:	460d      	mov	r5, r1
 801572e:	da12      	bge.n	8015756 <scalbn+0x56>
 8015730:	a327      	add	r3, pc, #156	; (adr r3, 80157d0 <scalbn+0xd0>)
 8015732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015736:	f7ea ff77 	bl	8000628 <__aeabi_dmul>
 801573a:	e009      	b.n	8015750 <scalbn+0x50>
 801573c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015740:	428a      	cmp	r2, r1
 8015742:	d10c      	bne.n	801575e <scalbn+0x5e>
 8015744:	ee10 2a10 	vmov	r2, s0
 8015748:	4620      	mov	r0, r4
 801574a:	4629      	mov	r1, r5
 801574c:	f7ea fdb6 	bl	80002bc <__adddf3>
 8015750:	4604      	mov	r4, r0
 8015752:	460d      	mov	r5, r1
 8015754:	e01c      	b.n	8015790 <scalbn+0x90>
 8015756:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801575a:	460b      	mov	r3, r1
 801575c:	3a36      	subs	r2, #54	; 0x36
 801575e:	4432      	add	r2, r6
 8015760:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015764:	428a      	cmp	r2, r1
 8015766:	dd0b      	ble.n	8015780 <scalbn+0x80>
 8015768:	ec45 4b11 	vmov	d1, r4, r5
 801576c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80157d8 <scalbn+0xd8>
 8015770:	f000 f83c 	bl	80157ec <copysign>
 8015774:	a318      	add	r3, pc, #96	; (adr r3, 80157d8 <scalbn+0xd8>)
 8015776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577a:	ec51 0b10 	vmov	r0, r1, d0
 801577e:	e7da      	b.n	8015736 <scalbn+0x36>
 8015780:	2a00      	cmp	r2, #0
 8015782:	dd08      	ble.n	8015796 <scalbn+0x96>
 8015784:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015788:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801578c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015790:	ec45 4b10 	vmov	d0, r4, r5
 8015794:	bd70      	pop	{r4, r5, r6, pc}
 8015796:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801579a:	da0d      	bge.n	80157b8 <scalbn+0xb8>
 801579c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80157a0:	429e      	cmp	r6, r3
 80157a2:	ec45 4b11 	vmov	d1, r4, r5
 80157a6:	dce1      	bgt.n	801576c <scalbn+0x6c>
 80157a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80157d0 <scalbn+0xd0>
 80157ac:	f000 f81e 	bl	80157ec <copysign>
 80157b0:	a307      	add	r3, pc, #28	; (adr r3, 80157d0 <scalbn+0xd0>)
 80157b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b6:	e7e0      	b.n	801577a <scalbn+0x7a>
 80157b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80157bc:	3236      	adds	r2, #54	; 0x36
 80157be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80157c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80157c6:	4620      	mov	r0, r4
 80157c8:	4629      	mov	r1, r5
 80157ca:	2200      	movs	r2, #0
 80157cc:	4b06      	ldr	r3, [pc, #24]	; (80157e8 <scalbn+0xe8>)
 80157ce:	e7b2      	b.n	8015736 <scalbn+0x36>
 80157d0:	c2f8f359 	.word	0xc2f8f359
 80157d4:	01a56e1f 	.word	0x01a56e1f
 80157d8:	8800759c 	.word	0x8800759c
 80157dc:	7e37e43c 	.word	0x7e37e43c
 80157e0:	43500000 	.word	0x43500000
 80157e4:	ffff3cb0 	.word	0xffff3cb0
 80157e8:	3c900000 	.word	0x3c900000

080157ec <copysign>:
 80157ec:	ec51 0b10 	vmov	r0, r1, d0
 80157f0:	ee11 0a90 	vmov	r0, s3
 80157f4:	ee10 2a10 	vmov	r2, s0
 80157f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80157fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015800:	ea41 0300 	orr.w	r3, r1, r0
 8015804:	ec43 2b10 	vmov	d0, r2, r3
 8015808:	4770      	bx	lr
	...

0801580c <__errno>:
 801580c:	4b01      	ldr	r3, [pc, #4]	; (8015814 <__errno+0x8>)
 801580e:	6818      	ldr	r0, [r3, #0]
 8015810:	4770      	bx	lr
 8015812:	bf00      	nop
 8015814:	2000000c 	.word	0x2000000c

08015818 <__libc_init_array>:
 8015818:	b570      	push	{r4, r5, r6, lr}
 801581a:	4e0d      	ldr	r6, [pc, #52]	; (8015850 <__libc_init_array+0x38>)
 801581c:	4c0d      	ldr	r4, [pc, #52]	; (8015854 <__libc_init_array+0x3c>)
 801581e:	1ba4      	subs	r4, r4, r6
 8015820:	10a4      	asrs	r4, r4, #2
 8015822:	2500      	movs	r5, #0
 8015824:	42a5      	cmp	r5, r4
 8015826:	d109      	bne.n	801583c <__libc_init_array+0x24>
 8015828:	4e0b      	ldr	r6, [pc, #44]	; (8015858 <__libc_init_array+0x40>)
 801582a:	4c0c      	ldr	r4, [pc, #48]	; (801585c <__libc_init_array+0x44>)
 801582c:	f004 f9e6 	bl	8019bfc <_init>
 8015830:	1ba4      	subs	r4, r4, r6
 8015832:	10a4      	asrs	r4, r4, #2
 8015834:	2500      	movs	r5, #0
 8015836:	42a5      	cmp	r5, r4
 8015838:	d105      	bne.n	8015846 <__libc_init_array+0x2e>
 801583a:	bd70      	pop	{r4, r5, r6, pc}
 801583c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015840:	4798      	blx	r3
 8015842:	3501      	adds	r5, #1
 8015844:	e7ee      	b.n	8015824 <__libc_init_array+0xc>
 8015846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801584a:	4798      	blx	r3
 801584c:	3501      	adds	r5, #1
 801584e:	e7f2      	b.n	8015836 <__libc_init_array+0x1e>
 8015850:	0801a61c 	.word	0x0801a61c
 8015854:	0801a61c 	.word	0x0801a61c
 8015858:	0801a61c 	.word	0x0801a61c
 801585c:	0801a624 	.word	0x0801a624

08015860 <memset>:
 8015860:	4402      	add	r2, r0
 8015862:	4603      	mov	r3, r0
 8015864:	4293      	cmp	r3, r2
 8015866:	d100      	bne.n	801586a <memset+0xa>
 8015868:	4770      	bx	lr
 801586a:	f803 1b01 	strb.w	r1, [r3], #1
 801586e:	e7f9      	b.n	8015864 <memset+0x4>

08015870 <__cvt>:
 8015870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015874:	ec55 4b10 	vmov	r4, r5, d0
 8015878:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801587a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801587e:	2d00      	cmp	r5, #0
 8015880:	460e      	mov	r6, r1
 8015882:	4691      	mov	r9, r2
 8015884:	4619      	mov	r1, r3
 8015886:	bfb8      	it	lt
 8015888:	4622      	movlt	r2, r4
 801588a:	462b      	mov	r3, r5
 801588c:	f027 0720 	bic.w	r7, r7, #32
 8015890:	bfbb      	ittet	lt
 8015892:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015896:	461d      	movlt	r5, r3
 8015898:	2300      	movge	r3, #0
 801589a:	232d      	movlt	r3, #45	; 0x2d
 801589c:	bfb8      	it	lt
 801589e:	4614      	movlt	r4, r2
 80158a0:	2f46      	cmp	r7, #70	; 0x46
 80158a2:	700b      	strb	r3, [r1, #0]
 80158a4:	d004      	beq.n	80158b0 <__cvt+0x40>
 80158a6:	2f45      	cmp	r7, #69	; 0x45
 80158a8:	d100      	bne.n	80158ac <__cvt+0x3c>
 80158aa:	3601      	adds	r6, #1
 80158ac:	2102      	movs	r1, #2
 80158ae:	e000      	b.n	80158b2 <__cvt+0x42>
 80158b0:	2103      	movs	r1, #3
 80158b2:	ab03      	add	r3, sp, #12
 80158b4:	9301      	str	r3, [sp, #4]
 80158b6:	ab02      	add	r3, sp, #8
 80158b8:	9300      	str	r3, [sp, #0]
 80158ba:	4632      	mov	r2, r6
 80158bc:	4653      	mov	r3, sl
 80158be:	ec45 4b10 	vmov	d0, r4, r5
 80158c2:	f001 fdfd 	bl	80174c0 <_dtoa_r>
 80158c6:	2f47      	cmp	r7, #71	; 0x47
 80158c8:	4680      	mov	r8, r0
 80158ca:	d102      	bne.n	80158d2 <__cvt+0x62>
 80158cc:	f019 0f01 	tst.w	r9, #1
 80158d0:	d026      	beq.n	8015920 <__cvt+0xb0>
 80158d2:	2f46      	cmp	r7, #70	; 0x46
 80158d4:	eb08 0906 	add.w	r9, r8, r6
 80158d8:	d111      	bne.n	80158fe <__cvt+0x8e>
 80158da:	f898 3000 	ldrb.w	r3, [r8]
 80158de:	2b30      	cmp	r3, #48	; 0x30
 80158e0:	d10a      	bne.n	80158f8 <__cvt+0x88>
 80158e2:	2200      	movs	r2, #0
 80158e4:	2300      	movs	r3, #0
 80158e6:	4620      	mov	r0, r4
 80158e8:	4629      	mov	r1, r5
 80158ea:	f7eb f905 	bl	8000af8 <__aeabi_dcmpeq>
 80158ee:	b918      	cbnz	r0, 80158f8 <__cvt+0x88>
 80158f0:	f1c6 0601 	rsb	r6, r6, #1
 80158f4:	f8ca 6000 	str.w	r6, [sl]
 80158f8:	f8da 3000 	ldr.w	r3, [sl]
 80158fc:	4499      	add	r9, r3
 80158fe:	2200      	movs	r2, #0
 8015900:	2300      	movs	r3, #0
 8015902:	4620      	mov	r0, r4
 8015904:	4629      	mov	r1, r5
 8015906:	f7eb f8f7 	bl	8000af8 <__aeabi_dcmpeq>
 801590a:	b938      	cbnz	r0, 801591c <__cvt+0xac>
 801590c:	2230      	movs	r2, #48	; 0x30
 801590e:	9b03      	ldr	r3, [sp, #12]
 8015910:	454b      	cmp	r3, r9
 8015912:	d205      	bcs.n	8015920 <__cvt+0xb0>
 8015914:	1c59      	adds	r1, r3, #1
 8015916:	9103      	str	r1, [sp, #12]
 8015918:	701a      	strb	r2, [r3, #0]
 801591a:	e7f8      	b.n	801590e <__cvt+0x9e>
 801591c:	f8cd 900c 	str.w	r9, [sp, #12]
 8015920:	9b03      	ldr	r3, [sp, #12]
 8015922:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015924:	eba3 0308 	sub.w	r3, r3, r8
 8015928:	4640      	mov	r0, r8
 801592a:	6013      	str	r3, [r2, #0]
 801592c:	b004      	add	sp, #16
 801592e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015932 <__exponent>:
 8015932:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015934:	2900      	cmp	r1, #0
 8015936:	4604      	mov	r4, r0
 8015938:	bfba      	itte	lt
 801593a:	4249      	neglt	r1, r1
 801593c:	232d      	movlt	r3, #45	; 0x2d
 801593e:	232b      	movge	r3, #43	; 0x2b
 8015940:	2909      	cmp	r1, #9
 8015942:	f804 2b02 	strb.w	r2, [r4], #2
 8015946:	7043      	strb	r3, [r0, #1]
 8015948:	dd20      	ble.n	801598c <__exponent+0x5a>
 801594a:	f10d 0307 	add.w	r3, sp, #7
 801594e:	461f      	mov	r7, r3
 8015950:	260a      	movs	r6, #10
 8015952:	fb91 f5f6 	sdiv	r5, r1, r6
 8015956:	fb06 1115 	mls	r1, r6, r5, r1
 801595a:	3130      	adds	r1, #48	; 0x30
 801595c:	2d09      	cmp	r5, #9
 801595e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015962:	f103 32ff 	add.w	r2, r3, #4294967295
 8015966:	4629      	mov	r1, r5
 8015968:	dc09      	bgt.n	801597e <__exponent+0x4c>
 801596a:	3130      	adds	r1, #48	; 0x30
 801596c:	3b02      	subs	r3, #2
 801596e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015972:	42bb      	cmp	r3, r7
 8015974:	4622      	mov	r2, r4
 8015976:	d304      	bcc.n	8015982 <__exponent+0x50>
 8015978:	1a10      	subs	r0, r2, r0
 801597a:	b003      	add	sp, #12
 801597c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801597e:	4613      	mov	r3, r2
 8015980:	e7e7      	b.n	8015952 <__exponent+0x20>
 8015982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015986:	f804 2b01 	strb.w	r2, [r4], #1
 801598a:	e7f2      	b.n	8015972 <__exponent+0x40>
 801598c:	2330      	movs	r3, #48	; 0x30
 801598e:	4419      	add	r1, r3
 8015990:	7083      	strb	r3, [r0, #2]
 8015992:	1d02      	adds	r2, r0, #4
 8015994:	70c1      	strb	r1, [r0, #3]
 8015996:	e7ef      	b.n	8015978 <__exponent+0x46>

08015998 <_printf_float>:
 8015998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801599c:	b08d      	sub	sp, #52	; 0x34
 801599e:	460c      	mov	r4, r1
 80159a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80159a4:	4616      	mov	r6, r2
 80159a6:	461f      	mov	r7, r3
 80159a8:	4605      	mov	r5, r0
 80159aa:	f002 fe7b 	bl	80186a4 <_localeconv_r>
 80159ae:	6803      	ldr	r3, [r0, #0]
 80159b0:	9304      	str	r3, [sp, #16]
 80159b2:	4618      	mov	r0, r3
 80159b4:	f7ea fc24 	bl	8000200 <strlen>
 80159b8:	2300      	movs	r3, #0
 80159ba:	930a      	str	r3, [sp, #40]	; 0x28
 80159bc:	f8d8 3000 	ldr.w	r3, [r8]
 80159c0:	9005      	str	r0, [sp, #20]
 80159c2:	3307      	adds	r3, #7
 80159c4:	f023 0307 	bic.w	r3, r3, #7
 80159c8:	f103 0208 	add.w	r2, r3, #8
 80159cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80159d0:	f8d4 b000 	ldr.w	fp, [r4]
 80159d4:	f8c8 2000 	str.w	r2, [r8]
 80159d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80159e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80159e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159e8:	9307      	str	r3, [sp, #28]
 80159ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80159ee:	f04f 32ff 	mov.w	r2, #4294967295
 80159f2:	4ba7      	ldr	r3, [pc, #668]	; (8015c90 <_printf_float+0x2f8>)
 80159f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80159f8:	f7eb f8b0 	bl	8000b5c <__aeabi_dcmpun>
 80159fc:	bb70      	cbnz	r0, 8015a5c <_printf_float+0xc4>
 80159fe:	f04f 32ff 	mov.w	r2, #4294967295
 8015a02:	4ba3      	ldr	r3, [pc, #652]	; (8015c90 <_printf_float+0x2f8>)
 8015a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a08:	f7eb f88a 	bl	8000b20 <__aeabi_dcmple>
 8015a0c:	bb30      	cbnz	r0, 8015a5c <_printf_float+0xc4>
 8015a0e:	2200      	movs	r2, #0
 8015a10:	2300      	movs	r3, #0
 8015a12:	4640      	mov	r0, r8
 8015a14:	4649      	mov	r1, r9
 8015a16:	f7eb f879 	bl	8000b0c <__aeabi_dcmplt>
 8015a1a:	b110      	cbz	r0, 8015a22 <_printf_float+0x8a>
 8015a1c:	232d      	movs	r3, #45	; 0x2d
 8015a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a22:	4a9c      	ldr	r2, [pc, #624]	; (8015c94 <_printf_float+0x2fc>)
 8015a24:	4b9c      	ldr	r3, [pc, #624]	; (8015c98 <_printf_float+0x300>)
 8015a26:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a2a:	bf8c      	ite	hi
 8015a2c:	4690      	movhi	r8, r2
 8015a2e:	4698      	movls	r8, r3
 8015a30:	2303      	movs	r3, #3
 8015a32:	f02b 0204 	bic.w	r2, fp, #4
 8015a36:	6123      	str	r3, [r4, #16]
 8015a38:	6022      	str	r2, [r4, #0]
 8015a3a:	f04f 0900 	mov.w	r9, #0
 8015a3e:	9700      	str	r7, [sp, #0]
 8015a40:	4633      	mov	r3, r6
 8015a42:	aa0b      	add	r2, sp, #44	; 0x2c
 8015a44:	4621      	mov	r1, r4
 8015a46:	4628      	mov	r0, r5
 8015a48:	f000 f9e6 	bl	8015e18 <_printf_common>
 8015a4c:	3001      	adds	r0, #1
 8015a4e:	f040 808d 	bne.w	8015b6c <_printf_float+0x1d4>
 8015a52:	f04f 30ff 	mov.w	r0, #4294967295
 8015a56:	b00d      	add	sp, #52	; 0x34
 8015a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a5c:	4642      	mov	r2, r8
 8015a5e:	464b      	mov	r3, r9
 8015a60:	4640      	mov	r0, r8
 8015a62:	4649      	mov	r1, r9
 8015a64:	f7eb f87a 	bl	8000b5c <__aeabi_dcmpun>
 8015a68:	b110      	cbz	r0, 8015a70 <_printf_float+0xd8>
 8015a6a:	4a8c      	ldr	r2, [pc, #560]	; (8015c9c <_printf_float+0x304>)
 8015a6c:	4b8c      	ldr	r3, [pc, #560]	; (8015ca0 <_printf_float+0x308>)
 8015a6e:	e7da      	b.n	8015a26 <_printf_float+0x8e>
 8015a70:	6861      	ldr	r1, [r4, #4]
 8015a72:	1c4b      	adds	r3, r1, #1
 8015a74:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015a78:	a80a      	add	r0, sp, #40	; 0x28
 8015a7a:	d13e      	bne.n	8015afa <_printf_float+0x162>
 8015a7c:	2306      	movs	r3, #6
 8015a7e:	6063      	str	r3, [r4, #4]
 8015a80:	2300      	movs	r3, #0
 8015a82:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015a86:	ab09      	add	r3, sp, #36	; 0x24
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	ec49 8b10 	vmov	d0, r8, r9
 8015a8e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015a92:	6022      	str	r2, [r4, #0]
 8015a94:	f8cd a004 	str.w	sl, [sp, #4]
 8015a98:	6861      	ldr	r1, [r4, #4]
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	f7ff fee8 	bl	8015870 <__cvt>
 8015aa0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015aa4:	2b47      	cmp	r3, #71	; 0x47
 8015aa6:	4680      	mov	r8, r0
 8015aa8:	d109      	bne.n	8015abe <_printf_float+0x126>
 8015aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015aac:	1cd8      	adds	r0, r3, #3
 8015aae:	db02      	blt.n	8015ab6 <_printf_float+0x11e>
 8015ab0:	6862      	ldr	r2, [r4, #4]
 8015ab2:	4293      	cmp	r3, r2
 8015ab4:	dd47      	ble.n	8015b46 <_printf_float+0x1ae>
 8015ab6:	f1aa 0a02 	sub.w	sl, sl, #2
 8015aba:	fa5f fa8a 	uxtb.w	sl, sl
 8015abe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ac4:	d824      	bhi.n	8015b10 <_printf_float+0x178>
 8015ac6:	3901      	subs	r1, #1
 8015ac8:	4652      	mov	r2, sl
 8015aca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015ace:	9109      	str	r1, [sp, #36]	; 0x24
 8015ad0:	f7ff ff2f 	bl	8015932 <__exponent>
 8015ad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ad6:	1813      	adds	r3, r2, r0
 8015ad8:	2a01      	cmp	r2, #1
 8015ada:	4681      	mov	r9, r0
 8015adc:	6123      	str	r3, [r4, #16]
 8015ade:	dc02      	bgt.n	8015ae6 <_printf_float+0x14e>
 8015ae0:	6822      	ldr	r2, [r4, #0]
 8015ae2:	07d1      	lsls	r1, r2, #31
 8015ae4:	d501      	bpl.n	8015aea <_printf_float+0x152>
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	6123      	str	r3, [r4, #16]
 8015aea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d0a5      	beq.n	8015a3e <_printf_float+0xa6>
 8015af2:	232d      	movs	r3, #45	; 0x2d
 8015af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015af8:	e7a1      	b.n	8015a3e <_printf_float+0xa6>
 8015afa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015afe:	f000 8177 	beq.w	8015df0 <_printf_float+0x458>
 8015b02:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015b06:	d1bb      	bne.n	8015a80 <_printf_float+0xe8>
 8015b08:	2900      	cmp	r1, #0
 8015b0a:	d1b9      	bne.n	8015a80 <_printf_float+0xe8>
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	e7b6      	b.n	8015a7e <_printf_float+0xe6>
 8015b10:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015b14:	d119      	bne.n	8015b4a <_printf_float+0x1b2>
 8015b16:	2900      	cmp	r1, #0
 8015b18:	6863      	ldr	r3, [r4, #4]
 8015b1a:	dd0c      	ble.n	8015b36 <_printf_float+0x19e>
 8015b1c:	6121      	str	r1, [r4, #16]
 8015b1e:	b913      	cbnz	r3, 8015b26 <_printf_float+0x18e>
 8015b20:	6822      	ldr	r2, [r4, #0]
 8015b22:	07d2      	lsls	r2, r2, #31
 8015b24:	d502      	bpl.n	8015b2c <_printf_float+0x194>
 8015b26:	3301      	adds	r3, #1
 8015b28:	440b      	add	r3, r1
 8015b2a:	6123      	str	r3, [r4, #16]
 8015b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015b30:	f04f 0900 	mov.w	r9, #0
 8015b34:	e7d9      	b.n	8015aea <_printf_float+0x152>
 8015b36:	b913      	cbnz	r3, 8015b3e <_printf_float+0x1a6>
 8015b38:	6822      	ldr	r2, [r4, #0]
 8015b3a:	07d0      	lsls	r0, r2, #31
 8015b3c:	d501      	bpl.n	8015b42 <_printf_float+0x1aa>
 8015b3e:	3302      	adds	r3, #2
 8015b40:	e7f3      	b.n	8015b2a <_printf_float+0x192>
 8015b42:	2301      	movs	r3, #1
 8015b44:	e7f1      	b.n	8015b2a <_printf_float+0x192>
 8015b46:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015b4a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	db05      	blt.n	8015b5e <_printf_float+0x1c6>
 8015b52:	6822      	ldr	r2, [r4, #0]
 8015b54:	6123      	str	r3, [r4, #16]
 8015b56:	07d1      	lsls	r1, r2, #31
 8015b58:	d5e8      	bpl.n	8015b2c <_printf_float+0x194>
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	e7e5      	b.n	8015b2a <_printf_float+0x192>
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	bfd4      	ite	le
 8015b62:	f1c3 0302 	rsble	r3, r3, #2
 8015b66:	2301      	movgt	r3, #1
 8015b68:	4413      	add	r3, r2
 8015b6a:	e7de      	b.n	8015b2a <_printf_float+0x192>
 8015b6c:	6823      	ldr	r3, [r4, #0]
 8015b6e:	055a      	lsls	r2, r3, #21
 8015b70:	d407      	bmi.n	8015b82 <_printf_float+0x1ea>
 8015b72:	6923      	ldr	r3, [r4, #16]
 8015b74:	4642      	mov	r2, r8
 8015b76:	4631      	mov	r1, r6
 8015b78:	4628      	mov	r0, r5
 8015b7a:	47b8      	blx	r7
 8015b7c:	3001      	adds	r0, #1
 8015b7e:	d12b      	bne.n	8015bd8 <_printf_float+0x240>
 8015b80:	e767      	b.n	8015a52 <_printf_float+0xba>
 8015b82:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b86:	f240 80dc 	bls.w	8015d42 <_printf_float+0x3aa>
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015b92:	f7ea ffb1 	bl	8000af8 <__aeabi_dcmpeq>
 8015b96:	2800      	cmp	r0, #0
 8015b98:	d033      	beq.n	8015c02 <_printf_float+0x26a>
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	4a41      	ldr	r2, [pc, #260]	; (8015ca4 <_printf_float+0x30c>)
 8015b9e:	4631      	mov	r1, r6
 8015ba0:	4628      	mov	r0, r5
 8015ba2:	47b8      	blx	r7
 8015ba4:	3001      	adds	r0, #1
 8015ba6:	f43f af54 	beq.w	8015a52 <_printf_float+0xba>
 8015baa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	db02      	blt.n	8015bb8 <_printf_float+0x220>
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	07d8      	lsls	r0, r3, #31
 8015bb6:	d50f      	bpl.n	8015bd8 <_printf_float+0x240>
 8015bb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015bbc:	4631      	mov	r1, r6
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	47b8      	blx	r7
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	f43f af45 	beq.w	8015a52 <_printf_float+0xba>
 8015bc8:	f04f 0800 	mov.w	r8, #0
 8015bcc:	f104 091a 	add.w	r9, r4, #26
 8015bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bd2:	3b01      	subs	r3, #1
 8015bd4:	4543      	cmp	r3, r8
 8015bd6:	dc09      	bgt.n	8015bec <_printf_float+0x254>
 8015bd8:	6823      	ldr	r3, [r4, #0]
 8015bda:	079b      	lsls	r3, r3, #30
 8015bdc:	f100 8103 	bmi.w	8015de6 <_printf_float+0x44e>
 8015be0:	68e0      	ldr	r0, [r4, #12]
 8015be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015be4:	4298      	cmp	r0, r3
 8015be6:	bfb8      	it	lt
 8015be8:	4618      	movlt	r0, r3
 8015bea:	e734      	b.n	8015a56 <_printf_float+0xbe>
 8015bec:	2301      	movs	r3, #1
 8015bee:	464a      	mov	r2, r9
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	4628      	mov	r0, r5
 8015bf4:	47b8      	blx	r7
 8015bf6:	3001      	adds	r0, #1
 8015bf8:	f43f af2b 	beq.w	8015a52 <_printf_float+0xba>
 8015bfc:	f108 0801 	add.w	r8, r8, #1
 8015c00:	e7e6      	b.n	8015bd0 <_printf_float+0x238>
 8015c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	dc2b      	bgt.n	8015c60 <_printf_float+0x2c8>
 8015c08:	2301      	movs	r3, #1
 8015c0a:	4a26      	ldr	r2, [pc, #152]	; (8015ca4 <_printf_float+0x30c>)
 8015c0c:	4631      	mov	r1, r6
 8015c0e:	4628      	mov	r0, r5
 8015c10:	47b8      	blx	r7
 8015c12:	3001      	adds	r0, #1
 8015c14:	f43f af1d 	beq.w	8015a52 <_printf_float+0xba>
 8015c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c1a:	b923      	cbnz	r3, 8015c26 <_printf_float+0x28e>
 8015c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c1e:	b913      	cbnz	r3, 8015c26 <_printf_float+0x28e>
 8015c20:	6823      	ldr	r3, [r4, #0]
 8015c22:	07d9      	lsls	r1, r3, #31
 8015c24:	d5d8      	bpl.n	8015bd8 <_printf_float+0x240>
 8015c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c2a:	4631      	mov	r1, r6
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	47b8      	blx	r7
 8015c30:	3001      	adds	r0, #1
 8015c32:	f43f af0e 	beq.w	8015a52 <_printf_float+0xba>
 8015c36:	f04f 0900 	mov.w	r9, #0
 8015c3a:	f104 0a1a 	add.w	sl, r4, #26
 8015c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c40:	425b      	negs	r3, r3
 8015c42:	454b      	cmp	r3, r9
 8015c44:	dc01      	bgt.n	8015c4a <_printf_float+0x2b2>
 8015c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c48:	e794      	b.n	8015b74 <_printf_float+0x1dc>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	4652      	mov	r2, sl
 8015c4e:	4631      	mov	r1, r6
 8015c50:	4628      	mov	r0, r5
 8015c52:	47b8      	blx	r7
 8015c54:	3001      	adds	r0, #1
 8015c56:	f43f aefc 	beq.w	8015a52 <_printf_float+0xba>
 8015c5a:	f109 0901 	add.w	r9, r9, #1
 8015c5e:	e7ee      	b.n	8015c3e <_printf_float+0x2a6>
 8015c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015c64:	429a      	cmp	r2, r3
 8015c66:	bfa8      	it	ge
 8015c68:	461a      	movge	r2, r3
 8015c6a:	2a00      	cmp	r2, #0
 8015c6c:	4691      	mov	r9, r2
 8015c6e:	dd07      	ble.n	8015c80 <_printf_float+0x2e8>
 8015c70:	4613      	mov	r3, r2
 8015c72:	4631      	mov	r1, r6
 8015c74:	4642      	mov	r2, r8
 8015c76:	4628      	mov	r0, r5
 8015c78:	47b8      	blx	r7
 8015c7a:	3001      	adds	r0, #1
 8015c7c:	f43f aee9 	beq.w	8015a52 <_printf_float+0xba>
 8015c80:	f104 031a 	add.w	r3, r4, #26
 8015c84:	f04f 0b00 	mov.w	fp, #0
 8015c88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015c8c:	9306      	str	r3, [sp, #24]
 8015c8e:	e015      	b.n	8015cbc <_printf_float+0x324>
 8015c90:	7fefffff 	.word	0x7fefffff
 8015c94:	0801a2ec 	.word	0x0801a2ec
 8015c98:	0801a2e8 	.word	0x0801a2e8
 8015c9c:	0801a2f4 	.word	0x0801a2f4
 8015ca0:	0801a2f0 	.word	0x0801a2f0
 8015ca4:	0801a4ab 	.word	0x0801a4ab
 8015ca8:	2301      	movs	r3, #1
 8015caa:	9a06      	ldr	r2, [sp, #24]
 8015cac:	4631      	mov	r1, r6
 8015cae:	4628      	mov	r0, r5
 8015cb0:	47b8      	blx	r7
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	f43f aecd 	beq.w	8015a52 <_printf_float+0xba>
 8015cb8:	f10b 0b01 	add.w	fp, fp, #1
 8015cbc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015cc0:	ebaa 0309 	sub.w	r3, sl, r9
 8015cc4:	455b      	cmp	r3, fp
 8015cc6:	dcef      	bgt.n	8015ca8 <_printf_float+0x310>
 8015cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	44d0      	add	r8, sl
 8015cd0:	db15      	blt.n	8015cfe <_printf_float+0x366>
 8015cd2:	6823      	ldr	r3, [r4, #0]
 8015cd4:	07da      	lsls	r2, r3, #31
 8015cd6:	d412      	bmi.n	8015cfe <_printf_float+0x366>
 8015cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015cdc:	eba3 020a 	sub.w	r2, r3, sl
 8015ce0:	eba3 0a01 	sub.w	sl, r3, r1
 8015ce4:	4592      	cmp	sl, r2
 8015ce6:	bfa8      	it	ge
 8015ce8:	4692      	movge	sl, r2
 8015cea:	f1ba 0f00 	cmp.w	sl, #0
 8015cee:	dc0e      	bgt.n	8015d0e <_printf_float+0x376>
 8015cf0:	f04f 0800 	mov.w	r8, #0
 8015cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015cf8:	f104 091a 	add.w	r9, r4, #26
 8015cfc:	e019      	b.n	8015d32 <_printf_float+0x39a>
 8015cfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d02:	4631      	mov	r1, r6
 8015d04:	4628      	mov	r0, r5
 8015d06:	47b8      	blx	r7
 8015d08:	3001      	adds	r0, #1
 8015d0a:	d1e5      	bne.n	8015cd8 <_printf_float+0x340>
 8015d0c:	e6a1      	b.n	8015a52 <_printf_float+0xba>
 8015d0e:	4653      	mov	r3, sl
 8015d10:	4642      	mov	r2, r8
 8015d12:	4631      	mov	r1, r6
 8015d14:	4628      	mov	r0, r5
 8015d16:	47b8      	blx	r7
 8015d18:	3001      	adds	r0, #1
 8015d1a:	d1e9      	bne.n	8015cf0 <_printf_float+0x358>
 8015d1c:	e699      	b.n	8015a52 <_printf_float+0xba>
 8015d1e:	2301      	movs	r3, #1
 8015d20:	464a      	mov	r2, r9
 8015d22:	4631      	mov	r1, r6
 8015d24:	4628      	mov	r0, r5
 8015d26:	47b8      	blx	r7
 8015d28:	3001      	adds	r0, #1
 8015d2a:	f43f ae92 	beq.w	8015a52 <_printf_float+0xba>
 8015d2e:	f108 0801 	add.w	r8, r8, #1
 8015d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d36:	1a9b      	subs	r3, r3, r2
 8015d38:	eba3 030a 	sub.w	r3, r3, sl
 8015d3c:	4543      	cmp	r3, r8
 8015d3e:	dcee      	bgt.n	8015d1e <_printf_float+0x386>
 8015d40:	e74a      	b.n	8015bd8 <_printf_float+0x240>
 8015d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d44:	2a01      	cmp	r2, #1
 8015d46:	dc01      	bgt.n	8015d4c <_printf_float+0x3b4>
 8015d48:	07db      	lsls	r3, r3, #31
 8015d4a:	d53a      	bpl.n	8015dc2 <_printf_float+0x42a>
 8015d4c:	2301      	movs	r3, #1
 8015d4e:	4642      	mov	r2, r8
 8015d50:	4631      	mov	r1, r6
 8015d52:	4628      	mov	r0, r5
 8015d54:	47b8      	blx	r7
 8015d56:	3001      	adds	r0, #1
 8015d58:	f43f ae7b 	beq.w	8015a52 <_printf_float+0xba>
 8015d5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d60:	4631      	mov	r1, r6
 8015d62:	4628      	mov	r0, r5
 8015d64:	47b8      	blx	r7
 8015d66:	3001      	adds	r0, #1
 8015d68:	f108 0801 	add.w	r8, r8, #1
 8015d6c:	f43f ae71 	beq.w	8015a52 <_printf_float+0xba>
 8015d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d72:	2200      	movs	r2, #0
 8015d74:	f103 3aff 	add.w	sl, r3, #4294967295
 8015d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	f7ea febb 	bl	8000af8 <__aeabi_dcmpeq>
 8015d82:	b9c8      	cbnz	r0, 8015db8 <_printf_float+0x420>
 8015d84:	4653      	mov	r3, sl
 8015d86:	4642      	mov	r2, r8
 8015d88:	4631      	mov	r1, r6
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	47b8      	blx	r7
 8015d8e:	3001      	adds	r0, #1
 8015d90:	d10e      	bne.n	8015db0 <_printf_float+0x418>
 8015d92:	e65e      	b.n	8015a52 <_printf_float+0xba>
 8015d94:	2301      	movs	r3, #1
 8015d96:	4652      	mov	r2, sl
 8015d98:	4631      	mov	r1, r6
 8015d9a:	4628      	mov	r0, r5
 8015d9c:	47b8      	blx	r7
 8015d9e:	3001      	adds	r0, #1
 8015da0:	f43f ae57 	beq.w	8015a52 <_printf_float+0xba>
 8015da4:	f108 0801 	add.w	r8, r8, #1
 8015da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015daa:	3b01      	subs	r3, #1
 8015dac:	4543      	cmp	r3, r8
 8015dae:	dcf1      	bgt.n	8015d94 <_printf_float+0x3fc>
 8015db0:	464b      	mov	r3, r9
 8015db2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015db6:	e6de      	b.n	8015b76 <_printf_float+0x1de>
 8015db8:	f04f 0800 	mov.w	r8, #0
 8015dbc:	f104 0a1a 	add.w	sl, r4, #26
 8015dc0:	e7f2      	b.n	8015da8 <_printf_float+0x410>
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	e7df      	b.n	8015d86 <_printf_float+0x3ee>
 8015dc6:	2301      	movs	r3, #1
 8015dc8:	464a      	mov	r2, r9
 8015dca:	4631      	mov	r1, r6
 8015dcc:	4628      	mov	r0, r5
 8015dce:	47b8      	blx	r7
 8015dd0:	3001      	adds	r0, #1
 8015dd2:	f43f ae3e 	beq.w	8015a52 <_printf_float+0xba>
 8015dd6:	f108 0801 	add.w	r8, r8, #1
 8015dda:	68e3      	ldr	r3, [r4, #12]
 8015ddc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015dde:	1a9b      	subs	r3, r3, r2
 8015de0:	4543      	cmp	r3, r8
 8015de2:	dcf0      	bgt.n	8015dc6 <_printf_float+0x42e>
 8015de4:	e6fc      	b.n	8015be0 <_printf_float+0x248>
 8015de6:	f04f 0800 	mov.w	r8, #0
 8015dea:	f104 0919 	add.w	r9, r4, #25
 8015dee:	e7f4      	b.n	8015dda <_printf_float+0x442>
 8015df0:	2900      	cmp	r1, #0
 8015df2:	f43f ae8b 	beq.w	8015b0c <_printf_float+0x174>
 8015df6:	2300      	movs	r3, #0
 8015df8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015dfc:	ab09      	add	r3, sp, #36	; 0x24
 8015dfe:	9300      	str	r3, [sp, #0]
 8015e00:	ec49 8b10 	vmov	d0, r8, r9
 8015e04:	6022      	str	r2, [r4, #0]
 8015e06:	f8cd a004 	str.w	sl, [sp, #4]
 8015e0a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015e0e:	4628      	mov	r0, r5
 8015e10:	f7ff fd2e 	bl	8015870 <__cvt>
 8015e14:	4680      	mov	r8, r0
 8015e16:	e648      	b.n	8015aaa <_printf_float+0x112>

08015e18 <_printf_common>:
 8015e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e1c:	4691      	mov	r9, r2
 8015e1e:	461f      	mov	r7, r3
 8015e20:	688a      	ldr	r2, [r1, #8]
 8015e22:	690b      	ldr	r3, [r1, #16]
 8015e24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	bfb8      	it	lt
 8015e2c:	4613      	movlt	r3, r2
 8015e2e:	f8c9 3000 	str.w	r3, [r9]
 8015e32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015e36:	4606      	mov	r6, r0
 8015e38:	460c      	mov	r4, r1
 8015e3a:	b112      	cbz	r2, 8015e42 <_printf_common+0x2a>
 8015e3c:	3301      	adds	r3, #1
 8015e3e:	f8c9 3000 	str.w	r3, [r9]
 8015e42:	6823      	ldr	r3, [r4, #0]
 8015e44:	0699      	lsls	r1, r3, #26
 8015e46:	bf42      	ittt	mi
 8015e48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015e4c:	3302      	addmi	r3, #2
 8015e4e:	f8c9 3000 	strmi.w	r3, [r9]
 8015e52:	6825      	ldr	r5, [r4, #0]
 8015e54:	f015 0506 	ands.w	r5, r5, #6
 8015e58:	d107      	bne.n	8015e6a <_printf_common+0x52>
 8015e5a:	f104 0a19 	add.w	sl, r4, #25
 8015e5e:	68e3      	ldr	r3, [r4, #12]
 8015e60:	f8d9 2000 	ldr.w	r2, [r9]
 8015e64:	1a9b      	subs	r3, r3, r2
 8015e66:	42ab      	cmp	r3, r5
 8015e68:	dc28      	bgt.n	8015ebc <_printf_common+0xa4>
 8015e6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015e6e:	6822      	ldr	r2, [r4, #0]
 8015e70:	3300      	adds	r3, #0
 8015e72:	bf18      	it	ne
 8015e74:	2301      	movne	r3, #1
 8015e76:	0692      	lsls	r2, r2, #26
 8015e78:	d42d      	bmi.n	8015ed6 <_printf_common+0xbe>
 8015e7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015e7e:	4639      	mov	r1, r7
 8015e80:	4630      	mov	r0, r6
 8015e82:	47c0      	blx	r8
 8015e84:	3001      	adds	r0, #1
 8015e86:	d020      	beq.n	8015eca <_printf_common+0xb2>
 8015e88:	6823      	ldr	r3, [r4, #0]
 8015e8a:	68e5      	ldr	r5, [r4, #12]
 8015e8c:	f8d9 2000 	ldr.w	r2, [r9]
 8015e90:	f003 0306 	and.w	r3, r3, #6
 8015e94:	2b04      	cmp	r3, #4
 8015e96:	bf08      	it	eq
 8015e98:	1aad      	subeq	r5, r5, r2
 8015e9a:	68a3      	ldr	r3, [r4, #8]
 8015e9c:	6922      	ldr	r2, [r4, #16]
 8015e9e:	bf0c      	ite	eq
 8015ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015ea4:	2500      	movne	r5, #0
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	bfc4      	itt	gt
 8015eaa:	1a9b      	subgt	r3, r3, r2
 8015eac:	18ed      	addgt	r5, r5, r3
 8015eae:	f04f 0900 	mov.w	r9, #0
 8015eb2:	341a      	adds	r4, #26
 8015eb4:	454d      	cmp	r5, r9
 8015eb6:	d11a      	bne.n	8015eee <_printf_common+0xd6>
 8015eb8:	2000      	movs	r0, #0
 8015eba:	e008      	b.n	8015ece <_printf_common+0xb6>
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	4652      	mov	r2, sl
 8015ec0:	4639      	mov	r1, r7
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	47c0      	blx	r8
 8015ec6:	3001      	adds	r0, #1
 8015ec8:	d103      	bne.n	8015ed2 <_printf_common+0xba>
 8015eca:	f04f 30ff 	mov.w	r0, #4294967295
 8015ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ed2:	3501      	adds	r5, #1
 8015ed4:	e7c3      	b.n	8015e5e <_printf_common+0x46>
 8015ed6:	18e1      	adds	r1, r4, r3
 8015ed8:	1c5a      	adds	r2, r3, #1
 8015eda:	2030      	movs	r0, #48	; 0x30
 8015edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015ee0:	4422      	add	r2, r4
 8015ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015ee6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015eea:	3302      	adds	r3, #2
 8015eec:	e7c5      	b.n	8015e7a <_printf_common+0x62>
 8015eee:	2301      	movs	r3, #1
 8015ef0:	4622      	mov	r2, r4
 8015ef2:	4639      	mov	r1, r7
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	47c0      	blx	r8
 8015ef8:	3001      	adds	r0, #1
 8015efa:	d0e6      	beq.n	8015eca <_printf_common+0xb2>
 8015efc:	f109 0901 	add.w	r9, r9, #1
 8015f00:	e7d8      	b.n	8015eb4 <_printf_common+0x9c>
	...

08015f04 <_printf_i>:
 8015f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015f0c:	460c      	mov	r4, r1
 8015f0e:	7e09      	ldrb	r1, [r1, #24]
 8015f10:	b085      	sub	sp, #20
 8015f12:	296e      	cmp	r1, #110	; 0x6e
 8015f14:	4617      	mov	r7, r2
 8015f16:	4606      	mov	r6, r0
 8015f18:	4698      	mov	r8, r3
 8015f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f1c:	f000 80b3 	beq.w	8016086 <_printf_i+0x182>
 8015f20:	d822      	bhi.n	8015f68 <_printf_i+0x64>
 8015f22:	2963      	cmp	r1, #99	; 0x63
 8015f24:	d036      	beq.n	8015f94 <_printf_i+0x90>
 8015f26:	d80a      	bhi.n	8015f3e <_printf_i+0x3a>
 8015f28:	2900      	cmp	r1, #0
 8015f2a:	f000 80b9 	beq.w	80160a0 <_printf_i+0x19c>
 8015f2e:	2958      	cmp	r1, #88	; 0x58
 8015f30:	f000 8083 	beq.w	801603a <_printf_i+0x136>
 8015f34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015f38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015f3c:	e032      	b.n	8015fa4 <_printf_i+0xa0>
 8015f3e:	2964      	cmp	r1, #100	; 0x64
 8015f40:	d001      	beq.n	8015f46 <_printf_i+0x42>
 8015f42:	2969      	cmp	r1, #105	; 0x69
 8015f44:	d1f6      	bne.n	8015f34 <_printf_i+0x30>
 8015f46:	6820      	ldr	r0, [r4, #0]
 8015f48:	6813      	ldr	r3, [r2, #0]
 8015f4a:	0605      	lsls	r5, r0, #24
 8015f4c:	f103 0104 	add.w	r1, r3, #4
 8015f50:	d52a      	bpl.n	8015fa8 <_printf_i+0xa4>
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	6011      	str	r1, [r2, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	da03      	bge.n	8015f62 <_printf_i+0x5e>
 8015f5a:	222d      	movs	r2, #45	; 0x2d
 8015f5c:	425b      	negs	r3, r3
 8015f5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015f62:	486f      	ldr	r0, [pc, #444]	; (8016120 <_printf_i+0x21c>)
 8015f64:	220a      	movs	r2, #10
 8015f66:	e039      	b.n	8015fdc <_printf_i+0xd8>
 8015f68:	2973      	cmp	r1, #115	; 0x73
 8015f6a:	f000 809d 	beq.w	80160a8 <_printf_i+0x1a4>
 8015f6e:	d808      	bhi.n	8015f82 <_printf_i+0x7e>
 8015f70:	296f      	cmp	r1, #111	; 0x6f
 8015f72:	d020      	beq.n	8015fb6 <_printf_i+0xb2>
 8015f74:	2970      	cmp	r1, #112	; 0x70
 8015f76:	d1dd      	bne.n	8015f34 <_printf_i+0x30>
 8015f78:	6823      	ldr	r3, [r4, #0]
 8015f7a:	f043 0320 	orr.w	r3, r3, #32
 8015f7e:	6023      	str	r3, [r4, #0]
 8015f80:	e003      	b.n	8015f8a <_printf_i+0x86>
 8015f82:	2975      	cmp	r1, #117	; 0x75
 8015f84:	d017      	beq.n	8015fb6 <_printf_i+0xb2>
 8015f86:	2978      	cmp	r1, #120	; 0x78
 8015f88:	d1d4      	bne.n	8015f34 <_printf_i+0x30>
 8015f8a:	2378      	movs	r3, #120	; 0x78
 8015f8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015f90:	4864      	ldr	r0, [pc, #400]	; (8016124 <_printf_i+0x220>)
 8015f92:	e055      	b.n	8016040 <_printf_i+0x13c>
 8015f94:	6813      	ldr	r3, [r2, #0]
 8015f96:	1d19      	adds	r1, r3, #4
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	6011      	str	r1, [r2, #0]
 8015f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fa0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015fa4:	2301      	movs	r3, #1
 8015fa6:	e08c      	b.n	80160c2 <_printf_i+0x1be>
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	6011      	str	r1, [r2, #0]
 8015fac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015fb0:	bf18      	it	ne
 8015fb2:	b21b      	sxthne	r3, r3
 8015fb4:	e7cf      	b.n	8015f56 <_printf_i+0x52>
 8015fb6:	6813      	ldr	r3, [r2, #0]
 8015fb8:	6825      	ldr	r5, [r4, #0]
 8015fba:	1d18      	adds	r0, r3, #4
 8015fbc:	6010      	str	r0, [r2, #0]
 8015fbe:	0628      	lsls	r0, r5, #24
 8015fc0:	d501      	bpl.n	8015fc6 <_printf_i+0xc2>
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	e002      	b.n	8015fcc <_printf_i+0xc8>
 8015fc6:	0668      	lsls	r0, r5, #25
 8015fc8:	d5fb      	bpl.n	8015fc2 <_printf_i+0xbe>
 8015fca:	881b      	ldrh	r3, [r3, #0]
 8015fcc:	4854      	ldr	r0, [pc, #336]	; (8016120 <_printf_i+0x21c>)
 8015fce:	296f      	cmp	r1, #111	; 0x6f
 8015fd0:	bf14      	ite	ne
 8015fd2:	220a      	movne	r2, #10
 8015fd4:	2208      	moveq	r2, #8
 8015fd6:	2100      	movs	r1, #0
 8015fd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015fdc:	6865      	ldr	r5, [r4, #4]
 8015fde:	60a5      	str	r5, [r4, #8]
 8015fe0:	2d00      	cmp	r5, #0
 8015fe2:	f2c0 8095 	blt.w	8016110 <_printf_i+0x20c>
 8015fe6:	6821      	ldr	r1, [r4, #0]
 8015fe8:	f021 0104 	bic.w	r1, r1, #4
 8015fec:	6021      	str	r1, [r4, #0]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d13d      	bne.n	801606e <_printf_i+0x16a>
 8015ff2:	2d00      	cmp	r5, #0
 8015ff4:	f040 808e 	bne.w	8016114 <_printf_i+0x210>
 8015ff8:	4665      	mov	r5, ip
 8015ffa:	2a08      	cmp	r2, #8
 8015ffc:	d10b      	bne.n	8016016 <_printf_i+0x112>
 8015ffe:	6823      	ldr	r3, [r4, #0]
 8016000:	07db      	lsls	r3, r3, #31
 8016002:	d508      	bpl.n	8016016 <_printf_i+0x112>
 8016004:	6923      	ldr	r3, [r4, #16]
 8016006:	6862      	ldr	r2, [r4, #4]
 8016008:	429a      	cmp	r2, r3
 801600a:	bfde      	ittt	le
 801600c:	2330      	movle	r3, #48	; 0x30
 801600e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016012:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016016:	ebac 0305 	sub.w	r3, ip, r5
 801601a:	6123      	str	r3, [r4, #16]
 801601c:	f8cd 8000 	str.w	r8, [sp]
 8016020:	463b      	mov	r3, r7
 8016022:	aa03      	add	r2, sp, #12
 8016024:	4621      	mov	r1, r4
 8016026:	4630      	mov	r0, r6
 8016028:	f7ff fef6 	bl	8015e18 <_printf_common>
 801602c:	3001      	adds	r0, #1
 801602e:	d14d      	bne.n	80160cc <_printf_i+0x1c8>
 8016030:	f04f 30ff 	mov.w	r0, #4294967295
 8016034:	b005      	add	sp, #20
 8016036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801603a:	4839      	ldr	r0, [pc, #228]	; (8016120 <_printf_i+0x21c>)
 801603c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016040:	6813      	ldr	r3, [r2, #0]
 8016042:	6821      	ldr	r1, [r4, #0]
 8016044:	1d1d      	adds	r5, r3, #4
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	6015      	str	r5, [r2, #0]
 801604a:	060a      	lsls	r2, r1, #24
 801604c:	d50b      	bpl.n	8016066 <_printf_i+0x162>
 801604e:	07ca      	lsls	r2, r1, #31
 8016050:	bf44      	itt	mi
 8016052:	f041 0120 	orrmi.w	r1, r1, #32
 8016056:	6021      	strmi	r1, [r4, #0]
 8016058:	b91b      	cbnz	r3, 8016062 <_printf_i+0x15e>
 801605a:	6822      	ldr	r2, [r4, #0]
 801605c:	f022 0220 	bic.w	r2, r2, #32
 8016060:	6022      	str	r2, [r4, #0]
 8016062:	2210      	movs	r2, #16
 8016064:	e7b7      	b.n	8015fd6 <_printf_i+0xd2>
 8016066:	064d      	lsls	r5, r1, #25
 8016068:	bf48      	it	mi
 801606a:	b29b      	uxthmi	r3, r3
 801606c:	e7ef      	b.n	801604e <_printf_i+0x14a>
 801606e:	4665      	mov	r5, ip
 8016070:	fbb3 f1f2 	udiv	r1, r3, r2
 8016074:	fb02 3311 	mls	r3, r2, r1, r3
 8016078:	5cc3      	ldrb	r3, [r0, r3]
 801607a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801607e:	460b      	mov	r3, r1
 8016080:	2900      	cmp	r1, #0
 8016082:	d1f5      	bne.n	8016070 <_printf_i+0x16c>
 8016084:	e7b9      	b.n	8015ffa <_printf_i+0xf6>
 8016086:	6813      	ldr	r3, [r2, #0]
 8016088:	6825      	ldr	r5, [r4, #0]
 801608a:	6961      	ldr	r1, [r4, #20]
 801608c:	1d18      	adds	r0, r3, #4
 801608e:	6010      	str	r0, [r2, #0]
 8016090:	0628      	lsls	r0, r5, #24
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	d501      	bpl.n	801609a <_printf_i+0x196>
 8016096:	6019      	str	r1, [r3, #0]
 8016098:	e002      	b.n	80160a0 <_printf_i+0x19c>
 801609a:	066a      	lsls	r2, r5, #25
 801609c:	d5fb      	bpl.n	8016096 <_printf_i+0x192>
 801609e:	8019      	strh	r1, [r3, #0]
 80160a0:	2300      	movs	r3, #0
 80160a2:	6123      	str	r3, [r4, #16]
 80160a4:	4665      	mov	r5, ip
 80160a6:	e7b9      	b.n	801601c <_printf_i+0x118>
 80160a8:	6813      	ldr	r3, [r2, #0]
 80160aa:	1d19      	adds	r1, r3, #4
 80160ac:	6011      	str	r1, [r2, #0]
 80160ae:	681d      	ldr	r5, [r3, #0]
 80160b0:	6862      	ldr	r2, [r4, #4]
 80160b2:	2100      	movs	r1, #0
 80160b4:	4628      	mov	r0, r5
 80160b6:	f7ea f8ab 	bl	8000210 <memchr>
 80160ba:	b108      	cbz	r0, 80160c0 <_printf_i+0x1bc>
 80160bc:	1b40      	subs	r0, r0, r5
 80160be:	6060      	str	r0, [r4, #4]
 80160c0:	6863      	ldr	r3, [r4, #4]
 80160c2:	6123      	str	r3, [r4, #16]
 80160c4:	2300      	movs	r3, #0
 80160c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160ca:	e7a7      	b.n	801601c <_printf_i+0x118>
 80160cc:	6923      	ldr	r3, [r4, #16]
 80160ce:	462a      	mov	r2, r5
 80160d0:	4639      	mov	r1, r7
 80160d2:	4630      	mov	r0, r6
 80160d4:	47c0      	blx	r8
 80160d6:	3001      	adds	r0, #1
 80160d8:	d0aa      	beq.n	8016030 <_printf_i+0x12c>
 80160da:	6823      	ldr	r3, [r4, #0]
 80160dc:	079b      	lsls	r3, r3, #30
 80160de:	d413      	bmi.n	8016108 <_printf_i+0x204>
 80160e0:	68e0      	ldr	r0, [r4, #12]
 80160e2:	9b03      	ldr	r3, [sp, #12]
 80160e4:	4298      	cmp	r0, r3
 80160e6:	bfb8      	it	lt
 80160e8:	4618      	movlt	r0, r3
 80160ea:	e7a3      	b.n	8016034 <_printf_i+0x130>
 80160ec:	2301      	movs	r3, #1
 80160ee:	464a      	mov	r2, r9
 80160f0:	4639      	mov	r1, r7
 80160f2:	4630      	mov	r0, r6
 80160f4:	47c0      	blx	r8
 80160f6:	3001      	adds	r0, #1
 80160f8:	d09a      	beq.n	8016030 <_printf_i+0x12c>
 80160fa:	3501      	adds	r5, #1
 80160fc:	68e3      	ldr	r3, [r4, #12]
 80160fe:	9a03      	ldr	r2, [sp, #12]
 8016100:	1a9b      	subs	r3, r3, r2
 8016102:	42ab      	cmp	r3, r5
 8016104:	dcf2      	bgt.n	80160ec <_printf_i+0x1e8>
 8016106:	e7eb      	b.n	80160e0 <_printf_i+0x1dc>
 8016108:	2500      	movs	r5, #0
 801610a:	f104 0919 	add.w	r9, r4, #25
 801610e:	e7f5      	b.n	80160fc <_printf_i+0x1f8>
 8016110:	2b00      	cmp	r3, #0
 8016112:	d1ac      	bne.n	801606e <_printf_i+0x16a>
 8016114:	7803      	ldrb	r3, [r0, #0]
 8016116:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801611a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801611e:	e76c      	b.n	8015ffa <_printf_i+0xf6>
 8016120:	0801a2f8 	.word	0x0801a2f8
 8016124:	0801a309 	.word	0x0801a309

08016128 <_scanf_float>:
 8016128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801612c:	469a      	mov	sl, r3
 801612e:	688b      	ldr	r3, [r1, #8]
 8016130:	4616      	mov	r6, r2
 8016132:	1e5a      	subs	r2, r3, #1
 8016134:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016138:	b087      	sub	sp, #28
 801613a:	bf83      	ittte	hi
 801613c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016140:	189b      	addhi	r3, r3, r2
 8016142:	9301      	strhi	r3, [sp, #4]
 8016144:	2300      	movls	r3, #0
 8016146:	bf86      	itte	hi
 8016148:	f240 135d 	movwhi	r3, #349	; 0x15d
 801614c:	608b      	strhi	r3, [r1, #8]
 801614e:	9301      	strls	r3, [sp, #4]
 8016150:	680b      	ldr	r3, [r1, #0]
 8016152:	4688      	mov	r8, r1
 8016154:	f04f 0b00 	mov.w	fp, #0
 8016158:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801615c:	f848 3b1c 	str.w	r3, [r8], #28
 8016160:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016164:	4607      	mov	r7, r0
 8016166:	460c      	mov	r4, r1
 8016168:	4645      	mov	r5, r8
 801616a:	465a      	mov	r2, fp
 801616c:	46d9      	mov	r9, fp
 801616e:	f8cd b008 	str.w	fp, [sp, #8]
 8016172:	68a1      	ldr	r1, [r4, #8]
 8016174:	b181      	cbz	r1, 8016198 <_scanf_float+0x70>
 8016176:	6833      	ldr	r3, [r6, #0]
 8016178:	781b      	ldrb	r3, [r3, #0]
 801617a:	2b49      	cmp	r3, #73	; 0x49
 801617c:	d071      	beq.n	8016262 <_scanf_float+0x13a>
 801617e:	d84d      	bhi.n	801621c <_scanf_float+0xf4>
 8016180:	2b39      	cmp	r3, #57	; 0x39
 8016182:	d840      	bhi.n	8016206 <_scanf_float+0xde>
 8016184:	2b31      	cmp	r3, #49	; 0x31
 8016186:	f080 8088 	bcs.w	801629a <_scanf_float+0x172>
 801618a:	2b2d      	cmp	r3, #45	; 0x2d
 801618c:	f000 8090 	beq.w	80162b0 <_scanf_float+0x188>
 8016190:	d815      	bhi.n	80161be <_scanf_float+0x96>
 8016192:	2b2b      	cmp	r3, #43	; 0x2b
 8016194:	f000 808c 	beq.w	80162b0 <_scanf_float+0x188>
 8016198:	f1b9 0f00 	cmp.w	r9, #0
 801619c:	d003      	beq.n	80161a6 <_scanf_float+0x7e>
 801619e:	6823      	ldr	r3, [r4, #0]
 80161a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80161a4:	6023      	str	r3, [r4, #0]
 80161a6:	3a01      	subs	r2, #1
 80161a8:	2a01      	cmp	r2, #1
 80161aa:	f200 80ea 	bhi.w	8016382 <_scanf_float+0x25a>
 80161ae:	4545      	cmp	r5, r8
 80161b0:	f200 80dc 	bhi.w	801636c <_scanf_float+0x244>
 80161b4:	2601      	movs	r6, #1
 80161b6:	4630      	mov	r0, r6
 80161b8:	b007      	add	sp, #28
 80161ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161be:	2b2e      	cmp	r3, #46	; 0x2e
 80161c0:	f000 809f 	beq.w	8016302 <_scanf_float+0x1da>
 80161c4:	2b30      	cmp	r3, #48	; 0x30
 80161c6:	d1e7      	bne.n	8016198 <_scanf_float+0x70>
 80161c8:	6820      	ldr	r0, [r4, #0]
 80161ca:	f410 7f80 	tst.w	r0, #256	; 0x100
 80161ce:	d064      	beq.n	801629a <_scanf_float+0x172>
 80161d0:	9b01      	ldr	r3, [sp, #4]
 80161d2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80161d6:	6020      	str	r0, [r4, #0]
 80161d8:	f109 0901 	add.w	r9, r9, #1
 80161dc:	b11b      	cbz	r3, 80161e6 <_scanf_float+0xbe>
 80161de:	3b01      	subs	r3, #1
 80161e0:	3101      	adds	r1, #1
 80161e2:	9301      	str	r3, [sp, #4]
 80161e4:	60a1      	str	r1, [r4, #8]
 80161e6:	68a3      	ldr	r3, [r4, #8]
 80161e8:	3b01      	subs	r3, #1
 80161ea:	60a3      	str	r3, [r4, #8]
 80161ec:	6923      	ldr	r3, [r4, #16]
 80161ee:	3301      	adds	r3, #1
 80161f0:	6123      	str	r3, [r4, #16]
 80161f2:	6873      	ldr	r3, [r6, #4]
 80161f4:	3b01      	subs	r3, #1
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	6073      	str	r3, [r6, #4]
 80161fa:	f340 80ac 	ble.w	8016356 <_scanf_float+0x22e>
 80161fe:	6833      	ldr	r3, [r6, #0]
 8016200:	3301      	adds	r3, #1
 8016202:	6033      	str	r3, [r6, #0]
 8016204:	e7b5      	b.n	8016172 <_scanf_float+0x4a>
 8016206:	2b45      	cmp	r3, #69	; 0x45
 8016208:	f000 8085 	beq.w	8016316 <_scanf_float+0x1ee>
 801620c:	2b46      	cmp	r3, #70	; 0x46
 801620e:	d06a      	beq.n	80162e6 <_scanf_float+0x1be>
 8016210:	2b41      	cmp	r3, #65	; 0x41
 8016212:	d1c1      	bne.n	8016198 <_scanf_float+0x70>
 8016214:	2a01      	cmp	r2, #1
 8016216:	d1bf      	bne.n	8016198 <_scanf_float+0x70>
 8016218:	2202      	movs	r2, #2
 801621a:	e046      	b.n	80162aa <_scanf_float+0x182>
 801621c:	2b65      	cmp	r3, #101	; 0x65
 801621e:	d07a      	beq.n	8016316 <_scanf_float+0x1ee>
 8016220:	d818      	bhi.n	8016254 <_scanf_float+0x12c>
 8016222:	2b54      	cmp	r3, #84	; 0x54
 8016224:	d066      	beq.n	80162f4 <_scanf_float+0x1cc>
 8016226:	d811      	bhi.n	801624c <_scanf_float+0x124>
 8016228:	2b4e      	cmp	r3, #78	; 0x4e
 801622a:	d1b5      	bne.n	8016198 <_scanf_float+0x70>
 801622c:	2a00      	cmp	r2, #0
 801622e:	d146      	bne.n	80162be <_scanf_float+0x196>
 8016230:	f1b9 0f00 	cmp.w	r9, #0
 8016234:	d145      	bne.n	80162c2 <_scanf_float+0x19a>
 8016236:	6821      	ldr	r1, [r4, #0]
 8016238:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801623c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016240:	d13f      	bne.n	80162c2 <_scanf_float+0x19a>
 8016242:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016246:	6021      	str	r1, [r4, #0]
 8016248:	2201      	movs	r2, #1
 801624a:	e02e      	b.n	80162aa <_scanf_float+0x182>
 801624c:	2b59      	cmp	r3, #89	; 0x59
 801624e:	d01e      	beq.n	801628e <_scanf_float+0x166>
 8016250:	2b61      	cmp	r3, #97	; 0x61
 8016252:	e7de      	b.n	8016212 <_scanf_float+0xea>
 8016254:	2b6e      	cmp	r3, #110	; 0x6e
 8016256:	d0e9      	beq.n	801622c <_scanf_float+0x104>
 8016258:	d815      	bhi.n	8016286 <_scanf_float+0x15e>
 801625a:	2b66      	cmp	r3, #102	; 0x66
 801625c:	d043      	beq.n	80162e6 <_scanf_float+0x1be>
 801625e:	2b69      	cmp	r3, #105	; 0x69
 8016260:	d19a      	bne.n	8016198 <_scanf_float+0x70>
 8016262:	f1bb 0f00 	cmp.w	fp, #0
 8016266:	d138      	bne.n	80162da <_scanf_float+0x1b2>
 8016268:	f1b9 0f00 	cmp.w	r9, #0
 801626c:	d197      	bne.n	801619e <_scanf_float+0x76>
 801626e:	6821      	ldr	r1, [r4, #0]
 8016270:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016274:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016278:	d195      	bne.n	80161a6 <_scanf_float+0x7e>
 801627a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801627e:	6021      	str	r1, [r4, #0]
 8016280:	f04f 0b01 	mov.w	fp, #1
 8016284:	e011      	b.n	80162aa <_scanf_float+0x182>
 8016286:	2b74      	cmp	r3, #116	; 0x74
 8016288:	d034      	beq.n	80162f4 <_scanf_float+0x1cc>
 801628a:	2b79      	cmp	r3, #121	; 0x79
 801628c:	d184      	bne.n	8016198 <_scanf_float+0x70>
 801628e:	f1bb 0f07 	cmp.w	fp, #7
 8016292:	d181      	bne.n	8016198 <_scanf_float+0x70>
 8016294:	f04f 0b08 	mov.w	fp, #8
 8016298:	e007      	b.n	80162aa <_scanf_float+0x182>
 801629a:	eb12 0f0b 	cmn.w	r2, fp
 801629e:	f47f af7b 	bne.w	8016198 <_scanf_float+0x70>
 80162a2:	6821      	ldr	r1, [r4, #0]
 80162a4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80162a8:	6021      	str	r1, [r4, #0]
 80162aa:	702b      	strb	r3, [r5, #0]
 80162ac:	3501      	adds	r5, #1
 80162ae:	e79a      	b.n	80161e6 <_scanf_float+0xbe>
 80162b0:	6821      	ldr	r1, [r4, #0]
 80162b2:	0608      	lsls	r0, r1, #24
 80162b4:	f57f af70 	bpl.w	8016198 <_scanf_float+0x70>
 80162b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80162bc:	e7f4      	b.n	80162a8 <_scanf_float+0x180>
 80162be:	2a02      	cmp	r2, #2
 80162c0:	d047      	beq.n	8016352 <_scanf_float+0x22a>
 80162c2:	f1bb 0f01 	cmp.w	fp, #1
 80162c6:	d003      	beq.n	80162d0 <_scanf_float+0x1a8>
 80162c8:	f1bb 0f04 	cmp.w	fp, #4
 80162cc:	f47f af64 	bne.w	8016198 <_scanf_float+0x70>
 80162d0:	f10b 0b01 	add.w	fp, fp, #1
 80162d4:	fa5f fb8b 	uxtb.w	fp, fp
 80162d8:	e7e7      	b.n	80162aa <_scanf_float+0x182>
 80162da:	f1bb 0f03 	cmp.w	fp, #3
 80162de:	d0f7      	beq.n	80162d0 <_scanf_float+0x1a8>
 80162e0:	f1bb 0f05 	cmp.w	fp, #5
 80162e4:	e7f2      	b.n	80162cc <_scanf_float+0x1a4>
 80162e6:	f1bb 0f02 	cmp.w	fp, #2
 80162ea:	f47f af55 	bne.w	8016198 <_scanf_float+0x70>
 80162ee:	f04f 0b03 	mov.w	fp, #3
 80162f2:	e7da      	b.n	80162aa <_scanf_float+0x182>
 80162f4:	f1bb 0f06 	cmp.w	fp, #6
 80162f8:	f47f af4e 	bne.w	8016198 <_scanf_float+0x70>
 80162fc:	f04f 0b07 	mov.w	fp, #7
 8016300:	e7d3      	b.n	80162aa <_scanf_float+0x182>
 8016302:	6821      	ldr	r1, [r4, #0]
 8016304:	0588      	lsls	r0, r1, #22
 8016306:	f57f af47 	bpl.w	8016198 <_scanf_float+0x70>
 801630a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801630e:	6021      	str	r1, [r4, #0]
 8016310:	f8cd 9008 	str.w	r9, [sp, #8]
 8016314:	e7c9      	b.n	80162aa <_scanf_float+0x182>
 8016316:	6821      	ldr	r1, [r4, #0]
 8016318:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801631c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016320:	d006      	beq.n	8016330 <_scanf_float+0x208>
 8016322:	0548      	lsls	r0, r1, #21
 8016324:	f57f af38 	bpl.w	8016198 <_scanf_float+0x70>
 8016328:	f1b9 0f00 	cmp.w	r9, #0
 801632c:	f43f af3b 	beq.w	80161a6 <_scanf_float+0x7e>
 8016330:	0588      	lsls	r0, r1, #22
 8016332:	bf58      	it	pl
 8016334:	9802      	ldrpl	r0, [sp, #8]
 8016336:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801633a:	bf58      	it	pl
 801633c:	eba9 0000 	subpl.w	r0, r9, r0
 8016340:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016344:	bf58      	it	pl
 8016346:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801634a:	6021      	str	r1, [r4, #0]
 801634c:	f04f 0900 	mov.w	r9, #0
 8016350:	e7ab      	b.n	80162aa <_scanf_float+0x182>
 8016352:	2203      	movs	r2, #3
 8016354:	e7a9      	b.n	80162aa <_scanf_float+0x182>
 8016356:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801635a:	9205      	str	r2, [sp, #20]
 801635c:	4631      	mov	r1, r6
 801635e:	4638      	mov	r0, r7
 8016360:	4798      	blx	r3
 8016362:	9a05      	ldr	r2, [sp, #20]
 8016364:	2800      	cmp	r0, #0
 8016366:	f43f af04 	beq.w	8016172 <_scanf_float+0x4a>
 801636a:	e715      	b.n	8016198 <_scanf_float+0x70>
 801636c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016370:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016374:	4632      	mov	r2, r6
 8016376:	4638      	mov	r0, r7
 8016378:	4798      	blx	r3
 801637a:	6923      	ldr	r3, [r4, #16]
 801637c:	3b01      	subs	r3, #1
 801637e:	6123      	str	r3, [r4, #16]
 8016380:	e715      	b.n	80161ae <_scanf_float+0x86>
 8016382:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016386:	2b06      	cmp	r3, #6
 8016388:	d80a      	bhi.n	80163a0 <_scanf_float+0x278>
 801638a:	f1bb 0f02 	cmp.w	fp, #2
 801638e:	d968      	bls.n	8016462 <_scanf_float+0x33a>
 8016390:	f1ab 0b03 	sub.w	fp, fp, #3
 8016394:	fa5f fb8b 	uxtb.w	fp, fp
 8016398:	eba5 0b0b 	sub.w	fp, r5, fp
 801639c:	455d      	cmp	r5, fp
 801639e:	d14b      	bne.n	8016438 <_scanf_float+0x310>
 80163a0:	6823      	ldr	r3, [r4, #0]
 80163a2:	05da      	lsls	r2, r3, #23
 80163a4:	d51f      	bpl.n	80163e6 <_scanf_float+0x2be>
 80163a6:	055b      	lsls	r3, r3, #21
 80163a8:	d468      	bmi.n	801647c <_scanf_float+0x354>
 80163aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80163ae:	6923      	ldr	r3, [r4, #16]
 80163b0:	2965      	cmp	r1, #101	; 0x65
 80163b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80163b6:	f105 3bff 	add.w	fp, r5, #4294967295
 80163ba:	6123      	str	r3, [r4, #16]
 80163bc:	d00d      	beq.n	80163da <_scanf_float+0x2b2>
 80163be:	2945      	cmp	r1, #69	; 0x45
 80163c0:	d00b      	beq.n	80163da <_scanf_float+0x2b2>
 80163c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163c6:	4632      	mov	r2, r6
 80163c8:	4638      	mov	r0, r7
 80163ca:	4798      	blx	r3
 80163cc:	6923      	ldr	r3, [r4, #16]
 80163ce:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80163d2:	3b01      	subs	r3, #1
 80163d4:	f1a5 0b02 	sub.w	fp, r5, #2
 80163d8:	6123      	str	r3, [r4, #16]
 80163da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163de:	4632      	mov	r2, r6
 80163e0:	4638      	mov	r0, r7
 80163e2:	4798      	blx	r3
 80163e4:	465d      	mov	r5, fp
 80163e6:	6826      	ldr	r6, [r4, #0]
 80163e8:	f016 0610 	ands.w	r6, r6, #16
 80163ec:	d17a      	bne.n	80164e4 <_scanf_float+0x3bc>
 80163ee:	702e      	strb	r6, [r5, #0]
 80163f0:	6823      	ldr	r3, [r4, #0]
 80163f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80163f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80163fa:	d142      	bne.n	8016482 <_scanf_float+0x35a>
 80163fc:	9b02      	ldr	r3, [sp, #8]
 80163fe:	eba9 0303 	sub.w	r3, r9, r3
 8016402:	425a      	negs	r2, r3
 8016404:	2b00      	cmp	r3, #0
 8016406:	d149      	bne.n	801649c <_scanf_float+0x374>
 8016408:	2200      	movs	r2, #0
 801640a:	4641      	mov	r1, r8
 801640c:	4638      	mov	r0, r7
 801640e:	f000 ff0b 	bl	8017228 <_strtod_r>
 8016412:	6825      	ldr	r5, [r4, #0]
 8016414:	f8da 3000 	ldr.w	r3, [sl]
 8016418:	f015 0f02 	tst.w	r5, #2
 801641c:	f103 0204 	add.w	r2, r3, #4
 8016420:	ec59 8b10 	vmov	r8, r9, d0
 8016424:	f8ca 2000 	str.w	r2, [sl]
 8016428:	d043      	beq.n	80164b2 <_scanf_float+0x38a>
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	e9c3 8900 	strd	r8, r9, [r3]
 8016430:	68e3      	ldr	r3, [r4, #12]
 8016432:	3301      	adds	r3, #1
 8016434:	60e3      	str	r3, [r4, #12]
 8016436:	e6be      	b.n	80161b6 <_scanf_float+0x8e>
 8016438:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801643c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016440:	4632      	mov	r2, r6
 8016442:	4638      	mov	r0, r7
 8016444:	4798      	blx	r3
 8016446:	6923      	ldr	r3, [r4, #16]
 8016448:	3b01      	subs	r3, #1
 801644a:	6123      	str	r3, [r4, #16]
 801644c:	e7a6      	b.n	801639c <_scanf_float+0x274>
 801644e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016452:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016456:	4632      	mov	r2, r6
 8016458:	4638      	mov	r0, r7
 801645a:	4798      	blx	r3
 801645c:	6923      	ldr	r3, [r4, #16]
 801645e:	3b01      	subs	r3, #1
 8016460:	6123      	str	r3, [r4, #16]
 8016462:	4545      	cmp	r5, r8
 8016464:	d8f3      	bhi.n	801644e <_scanf_float+0x326>
 8016466:	e6a5      	b.n	80161b4 <_scanf_float+0x8c>
 8016468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801646c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016470:	4632      	mov	r2, r6
 8016472:	4638      	mov	r0, r7
 8016474:	4798      	blx	r3
 8016476:	6923      	ldr	r3, [r4, #16]
 8016478:	3b01      	subs	r3, #1
 801647a:	6123      	str	r3, [r4, #16]
 801647c:	4545      	cmp	r5, r8
 801647e:	d8f3      	bhi.n	8016468 <_scanf_float+0x340>
 8016480:	e698      	b.n	80161b4 <_scanf_float+0x8c>
 8016482:	9b03      	ldr	r3, [sp, #12]
 8016484:	2b00      	cmp	r3, #0
 8016486:	d0bf      	beq.n	8016408 <_scanf_float+0x2e0>
 8016488:	9904      	ldr	r1, [sp, #16]
 801648a:	230a      	movs	r3, #10
 801648c:	4632      	mov	r2, r6
 801648e:	3101      	adds	r1, #1
 8016490:	4638      	mov	r0, r7
 8016492:	f000 ff55 	bl	8017340 <_strtol_r>
 8016496:	9b03      	ldr	r3, [sp, #12]
 8016498:	9d04      	ldr	r5, [sp, #16]
 801649a:	1ac2      	subs	r2, r0, r3
 801649c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80164a0:	429d      	cmp	r5, r3
 80164a2:	bf28      	it	cs
 80164a4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80164a8:	490f      	ldr	r1, [pc, #60]	; (80164e8 <_scanf_float+0x3c0>)
 80164aa:	4628      	mov	r0, r5
 80164ac:	f000 f858 	bl	8016560 <siprintf>
 80164b0:	e7aa      	b.n	8016408 <_scanf_float+0x2e0>
 80164b2:	f015 0504 	ands.w	r5, r5, #4
 80164b6:	d1b8      	bne.n	801642a <_scanf_float+0x302>
 80164b8:	681f      	ldr	r7, [r3, #0]
 80164ba:	ee10 2a10 	vmov	r2, s0
 80164be:	464b      	mov	r3, r9
 80164c0:	ee10 0a10 	vmov	r0, s0
 80164c4:	4649      	mov	r1, r9
 80164c6:	f7ea fb49 	bl	8000b5c <__aeabi_dcmpun>
 80164ca:	b128      	cbz	r0, 80164d8 <_scanf_float+0x3b0>
 80164cc:	4628      	mov	r0, r5
 80164ce:	f000 f80d 	bl	80164ec <nanf>
 80164d2:	ed87 0a00 	vstr	s0, [r7]
 80164d6:	e7ab      	b.n	8016430 <_scanf_float+0x308>
 80164d8:	4640      	mov	r0, r8
 80164da:	4649      	mov	r1, r9
 80164dc:	f7ea fb9c 	bl	8000c18 <__aeabi_d2f>
 80164e0:	6038      	str	r0, [r7, #0]
 80164e2:	e7a5      	b.n	8016430 <_scanf_float+0x308>
 80164e4:	2600      	movs	r6, #0
 80164e6:	e666      	b.n	80161b6 <_scanf_float+0x8e>
 80164e8:	0801a31a 	.word	0x0801a31a

080164ec <nanf>:
 80164ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80164f4 <nanf+0x8>
 80164f0:	4770      	bx	lr
 80164f2:	bf00      	nop
 80164f4:	7fc00000 	.word	0x7fc00000

080164f8 <sniprintf>:
 80164f8:	b40c      	push	{r2, r3}
 80164fa:	b530      	push	{r4, r5, lr}
 80164fc:	4b17      	ldr	r3, [pc, #92]	; (801655c <sniprintf+0x64>)
 80164fe:	1e0c      	subs	r4, r1, #0
 8016500:	b09d      	sub	sp, #116	; 0x74
 8016502:	681d      	ldr	r5, [r3, #0]
 8016504:	da08      	bge.n	8016518 <sniprintf+0x20>
 8016506:	238b      	movs	r3, #139	; 0x8b
 8016508:	602b      	str	r3, [r5, #0]
 801650a:	f04f 30ff 	mov.w	r0, #4294967295
 801650e:	b01d      	add	sp, #116	; 0x74
 8016510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016514:	b002      	add	sp, #8
 8016516:	4770      	bx	lr
 8016518:	f44f 7302 	mov.w	r3, #520	; 0x208
 801651c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016520:	bf14      	ite	ne
 8016522:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016526:	4623      	moveq	r3, r4
 8016528:	9304      	str	r3, [sp, #16]
 801652a:	9307      	str	r3, [sp, #28]
 801652c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016530:	9002      	str	r0, [sp, #8]
 8016532:	9006      	str	r0, [sp, #24]
 8016534:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016538:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801653a:	ab21      	add	r3, sp, #132	; 0x84
 801653c:	a902      	add	r1, sp, #8
 801653e:	4628      	mov	r0, r5
 8016540:	9301      	str	r3, [sp, #4]
 8016542:	f002 fdf1 	bl	8019128 <_svfiprintf_r>
 8016546:	1c43      	adds	r3, r0, #1
 8016548:	bfbc      	itt	lt
 801654a:	238b      	movlt	r3, #139	; 0x8b
 801654c:	602b      	strlt	r3, [r5, #0]
 801654e:	2c00      	cmp	r4, #0
 8016550:	d0dd      	beq.n	801650e <sniprintf+0x16>
 8016552:	9b02      	ldr	r3, [sp, #8]
 8016554:	2200      	movs	r2, #0
 8016556:	701a      	strb	r2, [r3, #0]
 8016558:	e7d9      	b.n	801650e <sniprintf+0x16>
 801655a:	bf00      	nop
 801655c:	2000000c 	.word	0x2000000c

08016560 <siprintf>:
 8016560:	b40e      	push	{r1, r2, r3}
 8016562:	b500      	push	{lr}
 8016564:	b09c      	sub	sp, #112	; 0x70
 8016566:	ab1d      	add	r3, sp, #116	; 0x74
 8016568:	9002      	str	r0, [sp, #8]
 801656a:	9006      	str	r0, [sp, #24]
 801656c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016570:	4809      	ldr	r0, [pc, #36]	; (8016598 <siprintf+0x38>)
 8016572:	9107      	str	r1, [sp, #28]
 8016574:	9104      	str	r1, [sp, #16]
 8016576:	4909      	ldr	r1, [pc, #36]	; (801659c <siprintf+0x3c>)
 8016578:	f853 2b04 	ldr.w	r2, [r3], #4
 801657c:	9105      	str	r1, [sp, #20]
 801657e:	6800      	ldr	r0, [r0, #0]
 8016580:	9301      	str	r3, [sp, #4]
 8016582:	a902      	add	r1, sp, #8
 8016584:	f002 fdd0 	bl	8019128 <_svfiprintf_r>
 8016588:	9b02      	ldr	r3, [sp, #8]
 801658a:	2200      	movs	r2, #0
 801658c:	701a      	strb	r2, [r3, #0]
 801658e:	b01c      	add	sp, #112	; 0x70
 8016590:	f85d eb04 	ldr.w	lr, [sp], #4
 8016594:	b003      	add	sp, #12
 8016596:	4770      	bx	lr
 8016598:	2000000c 	.word	0x2000000c
 801659c:	ffff0208 	.word	0xffff0208

080165a0 <siscanf>:
 80165a0:	b40e      	push	{r1, r2, r3}
 80165a2:	b530      	push	{r4, r5, lr}
 80165a4:	b09c      	sub	sp, #112	; 0x70
 80165a6:	ac1f      	add	r4, sp, #124	; 0x7c
 80165a8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80165ac:	f854 5b04 	ldr.w	r5, [r4], #4
 80165b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80165b4:	9002      	str	r0, [sp, #8]
 80165b6:	9006      	str	r0, [sp, #24]
 80165b8:	f7e9 fe22 	bl	8000200 <strlen>
 80165bc:	4b0b      	ldr	r3, [pc, #44]	; (80165ec <siscanf+0x4c>)
 80165be:	9003      	str	r0, [sp, #12]
 80165c0:	9007      	str	r0, [sp, #28]
 80165c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80165c4:	480a      	ldr	r0, [pc, #40]	; (80165f0 <siscanf+0x50>)
 80165c6:	9401      	str	r4, [sp, #4]
 80165c8:	2300      	movs	r3, #0
 80165ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80165cc:	9314      	str	r3, [sp, #80]	; 0x50
 80165ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165d6:	462a      	mov	r2, r5
 80165d8:	4623      	mov	r3, r4
 80165da:	a902      	add	r1, sp, #8
 80165dc:	6800      	ldr	r0, [r0, #0]
 80165de:	f002 fef5 	bl	80193cc <__ssvfiscanf_r>
 80165e2:	b01c      	add	sp, #112	; 0x70
 80165e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165e8:	b003      	add	sp, #12
 80165ea:	4770      	bx	lr
 80165ec:	080165f5 	.word	0x080165f5
 80165f0:	2000000c 	.word	0x2000000c

080165f4 <__seofread>:
 80165f4:	2000      	movs	r0, #0
 80165f6:	4770      	bx	lr

080165f8 <strcpy>:
 80165f8:	4603      	mov	r3, r0
 80165fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80165fe:	f803 2b01 	strb.w	r2, [r3], #1
 8016602:	2a00      	cmp	r2, #0
 8016604:	d1f9      	bne.n	80165fa <strcpy+0x2>
 8016606:	4770      	bx	lr

08016608 <sulp>:
 8016608:	b570      	push	{r4, r5, r6, lr}
 801660a:	4604      	mov	r4, r0
 801660c:	460d      	mov	r5, r1
 801660e:	ec45 4b10 	vmov	d0, r4, r5
 8016612:	4616      	mov	r6, r2
 8016614:	f002 fb44 	bl	8018ca0 <__ulp>
 8016618:	ec51 0b10 	vmov	r0, r1, d0
 801661c:	b17e      	cbz	r6, 801663e <sulp+0x36>
 801661e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016622:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016626:	2b00      	cmp	r3, #0
 8016628:	dd09      	ble.n	801663e <sulp+0x36>
 801662a:	051b      	lsls	r3, r3, #20
 801662c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016630:	2400      	movs	r4, #0
 8016632:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016636:	4622      	mov	r2, r4
 8016638:	462b      	mov	r3, r5
 801663a:	f7e9 fff5 	bl	8000628 <__aeabi_dmul>
 801663e:	bd70      	pop	{r4, r5, r6, pc}

08016640 <_strtod_l>:
 8016640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016644:	461f      	mov	r7, r3
 8016646:	b0a1      	sub	sp, #132	; 0x84
 8016648:	2300      	movs	r3, #0
 801664a:	4681      	mov	r9, r0
 801664c:	4638      	mov	r0, r7
 801664e:	460e      	mov	r6, r1
 8016650:	9217      	str	r2, [sp, #92]	; 0x5c
 8016652:	931c      	str	r3, [sp, #112]	; 0x70
 8016654:	f002 f824 	bl	80186a0 <__localeconv_l>
 8016658:	4680      	mov	r8, r0
 801665a:	6800      	ldr	r0, [r0, #0]
 801665c:	f7e9 fdd0 	bl	8000200 <strlen>
 8016660:	f04f 0a00 	mov.w	sl, #0
 8016664:	4604      	mov	r4, r0
 8016666:	f04f 0b00 	mov.w	fp, #0
 801666a:	961b      	str	r6, [sp, #108]	; 0x6c
 801666c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801666e:	781a      	ldrb	r2, [r3, #0]
 8016670:	2a0d      	cmp	r2, #13
 8016672:	d832      	bhi.n	80166da <_strtod_l+0x9a>
 8016674:	2a09      	cmp	r2, #9
 8016676:	d236      	bcs.n	80166e6 <_strtod_l+0xa6>
 8016678:	2a00      	cmp	r2, #0
 801667a:	d03e      	beq.n	80166fa <_strtod_l+0xba>
 801667c:	2300      	movs	r3, #0
 801667e:	930d      	str	r3, [sp, #52]	; 0x34
 8016680:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016682:	782b      	ldrb	r3, [r5, #0]
 8016684:	2b30      	cmp	r3, #48	; 0x30
 8016686:	f040 80ac 	bne.w	80167e2 <_strtod_l+0x1a2>
 801668a:	786b      	ldrb	r3, [r5, #1]
 801668c:	2b58      	cmp	r3, #88	; 0x58
 801668e:	d001      	beq.n	8016694 <_strtod_l+0x54>
 8016690:	2b78      	cmp	r3, #120	; 0x78
 8016692:	d167      	bne.n	8016764 <_strtod_l+0x124>
 8016694:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016696:	9301      	str	r3, [sp, #4]
 8016698:	ab1c      	add	r3, sp, #112	; 0x70
 801669a:	9300      	str	r3, [sp, #0]
 801669c:	9702      	str	r7, [sp, #8]
 801669e:	ab1d      	add	r3, sp, #116	; 0x74
 80166a0:	4a88      	ldr	r2, [pc, #544]	; (80168c4 <_strtod_l+0x284>)
 80166a2:	a91b      	add	r1, sp, #108	; 0x6c
 80166a4:	4648      	mov	r0, r9
 80166a6:	f001 fd12 	bl	80180ce <__gethex>
 80166aa:	f010 0407 	ands.w	r4, r0, #7
 80166ae:	4606      	mov	r6, r0
 80166b0:	d005      	beq.n	80166be <_strtod_l+0x7e>
 80166b2:	2c06      	cmp	r4, #6
 80166b4:	d12b      	bne.n	801670e <_strtod_l+0xce>
 80166b6:	3501      	adds	r5, #1
 80166b8:	2300      	movs	r3, #0
 80166ba:	951b      	str	r5, [sp, #108]	; 0x6c
 80166bc:	930d      	str	r3, [sp, #52]	; 0x34
 80166be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	f040 859a 	bne.w	80171fa <_strtod_l+0xbba>
 80166c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166c8:	b1e3      	cbz	r3, 8016704 <_strtod_l+0xc4>
 80166ca:	4652      	mov	r2, sl
 80166cc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80166d0:	ec43 2b10 	vmov	d0, r2, r3
 80166d4:	b021      	add	sp, #132	; 0x84
 80166d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166da:	2a2b      	cmp	r2, #43	; 0x2b
 80166dc:	d015      	beq.n	801670a <_strtod_l+0xca>
 80166de:	2a2d      	cmp	r2, #45	; 0x2d
 80166e0:	d004      	beq.n	80166ec <_strtod_l+0xac>
 80166e2:	2a20      	cmp	r2, #32
 80166e4:	d1ca      	bne.n	801667c <_strtod_l+0x3c>
 80166e6:	3301      	adds	r3, #1
 80166e8:	931b      	str	r3, [sp, #108]	; 0x6c
 80166ea:	e7bf      	b.n	801666c <_strtod_l+0x2c>
 80166ec:	2201      	movs	r2, #1
 80166ee:	920d      	str	r2, [sp, #52]	; 0x34
 80166f0:	1c5a      	adds	r2, r3, #1
 80166f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80166f4:	785b      	ldrb	r3, [r3, #1]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1c2      	bne.n	8016680 <_strtod_l+0x40>
 80166fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80166fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80166fe:	2b00      	cmp	r3, #0
 8016700:	f040 8579 	bne.w	80171f6 <_strtod_l+0xbb6>
 8016704:	4652      	mov	r2, sl
 8016706:	465b      	mov	r3, fp
 8016708:	e7e2      	b.n	80166d0 <_strtod_l+0x90>
 801670a:	2200      	movs	r2, #0
 801670c:	e7ef      	b.n	80166ee <_strtod_l+0xae>
 801670e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016710:	b13a      	cbz	r2, 8016722 <_strtod_l+0xe2>
 8016712:	2135      	movs	r1, #53	; 0x35
 8016714:	a81e      	add	r0, sp, #120	; 0x78
 8016716:	f002 fbbb 	bl	8018e90 <__copybits>
 801671a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801671c:	4648      	mov	r0, r9
 801671e:	f002 f828 	bl	8018772 <_Bfree>
 8016722:	3c01      	subs	r4, #1
 8016724:	2c04      	cmp	r4, #4
 8016726:	d806      	bhi.n	8016736 <_strtod_l+0xf6>
 8016728:	e8df f004 	tbb	[pc, r4]
 801672c:	1714030a 	.word	0x1714030a
 8016730:	0a          	.byte	0x0a
 8016731:	00          	.byte	0x00
 8016732:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016736:	0730      	lsls	r0, r6, #28
 8016738:	d5c1      	bpl.n	80166be <_strtod_l+0x7e>
 801673a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801673e:	e7be      	b.n	80166be <_strtod_l+0x7e>
 8016740:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016744:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016746:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801674a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801674e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016752:	e7f0      	b.n	8016736 <_strtod_l+0xf6>
 8016754:	f8df b170 	ldr.w	fp, [pc, #368]	; 80168c8 <_strtod_l+0x288>
 8016758:	e7ed      	b.n	8016736 <_strtod_l+0xf6>
 801675a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801675e:	f04f 3aff 	mov.w	sl, #4294967295
 8016762:	e7e8      	b.n	8016736 <_strtod_l+0xf6>
 8016764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016766:	1c5a      	adds	r2, r3, #1
 8016768:	921b      	str	r2, [sp, #108]	; 0x6c
 801676a:	785b      	ldrb	r3, [r3, #1]
 801676c:	2b30      	cmp	r3, #48	; 0x30
 801676e:	d0f9      	beq.n	8016764 <_strtod_l+0x124>
 8016770:	2b00      	cmp	r3, #0
 8016772:	d0a4      	beq.n	80166be <_strtod_l+0x7e>
 8016774:	2301      	movs	r3, #1
 8016776:	2500      	movs	r5, #0
 8016778:	9306      	str	r3, [sp, #24]
 801677a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801677c:	9308      	str	r3, [sp, #32]
 801677e:	9507      	str	r5, [sp, #28]
 8016780:	9505      	str	r5, [sp, #20]
 8016782:	220a      	movs	r2, #10
 8016784:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016786:	7807      	ldrb	r7, [r0, #0]
 8016788:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801678c:	b2d9      	uxtb	r1, r3
 801678e:	2909      	cmp	r1, #9
 8016790:	d929      	bls.n	80167e6 <_strtod_l+0x1a6>
 8016792:	4622      	mov	r2, r4
 8016794:	f8d8 1000 	ldr.w	r1, [r8]
 8016798:	f003 f902 	bl	80199a0 <strncmp>
 801679c:	2800      	cmp	r0, #0
 801679e:	d031      	beq.n	8016804 <_strtod_l+0x1c4>
 80167a0:	2000      	movs	r0, #0
 80167a2:	9c05      	ldr	r4, [sp, #20]
 80167a4:	9004      	str	r0, [sp, #16]
 80167a6:	463b      	mov	r3, r7
 80167a8:	4602      	mov	r2, r0
 80167aa:	2b65      	cmp	r3, #101	; 0x65
 80167ac:	d001      	beq.n	80167b2 <_strtod_l+0x172>
 80167ae:	2b45      	cmp	r3, #69	; 0x45
 80167b0:	d114      	bne.n	80167dc <_strtod_l+0x19c>
 80167b2:	b924      	cbnz	r4, 80167be <_strtod_l+0x17e>
 80167b4:	b910      	cbnz	r0, 80167bc <_strtod_l+0x17c>
 80167b6:	9b06      	ldr	r3, [sp, #24]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d09e      	beq.n	80166fa <_strtod_l+0xba>
 80167bc:	2400      	movs	r4, #0
 80167be:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80167c0:	1c73      	adds	r3, r6, #1
 80167c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80167c4:	7873      	ldrb	r3, [r6, #1]
 80167c6:	2b2b      	cmp	r3, #43	; 0x2b
 80167c8:	d078      	beq.n	80168bc <_strtod_l+0x27c>
 80167ca:	2b2d      	cmp	r3, #45	; 0x2d
 80167cc:	d070      	beq.n	80168b0 <_strtod_l+0x270>
 80167ce:	f04f 0c00 	mov.w	ip, #0
 80167d2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80167d6:	2f09      	cmp	r7, #9
 80167d8:	d97c      	bls.n	80168d4 <_strtod_l+0x294>
 80167da:	961b      	str	r6, [sp, #108]	; 0x6c
 80167dc:	f04f 0e00 	mov.w	lr, #0
 80167e0:	e09a      	b.n	8016918 <_strtod_l+0x2d8>
 80167e2:	2300      	movs	r3, #0
 80167e4:	e7c7      	b.n	8016776 <_strtod_l+0x136>
 80167e6:	9905      	ldr	r1, [sp, #20]
 80167e8:	2908      	cmp	r1, #8
 80167ea:	bfdd      	ittte	le
 80167ec:	9907      	ldrle	r1, [sp, #28]
 80167ee:	fb02 3301 	mlale	r3, r2, r1, r3
 80167f2:	9307      	strle	r3, [sp, #28]
 80167f4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80167f8:	9b05      	ldr	r3, [sp, #20]
 80167fa:	3001      	adds	r0, #1
 80167fc:	3301      	adds	r3, #1
 80167fe:	9305      	str	r3, [sp, #20]
 8016800:	901b      	str	r0, [sp, #108]	; 0x6c
 8016802:	e7bf      	b.n	8016784 <_strtod_l+0x144>
 8016804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016806:	191a      	adds	r2, r3, r4
 8016808:	921b      	str	r2, [sp, #108]	; 0x6c
 801680a:	9a05      	ldr	r2, [sp, #20]
 801680c:	5d1b      	ldrb	r3, [r3, r4]
 801680e:	2a00      	cmp	r2, #0
 8016810:	d037      	beq.n	8016882 <_strtod_l+0x242>
 8016812:	9c05      	ldr	r4, [sp, #20]
 8016814:	4602      	mov	r2, r0
 8016816:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801681a:	2909      	cmp	r1, #9
 801681c:	d913      	bls.n	8016846 <_strtod_l+0x206>
 801681e:	2101      	movs	r1, #1
 8016820:	9104      	str	r1, [sp, #16]
 8016822:	e7c2      	b.n	80167aa <_strtod_l+0x16a>
 8016824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016826:	1c5a      	adds	r2, r3, #1
 8016828:	921b      	str	r2, [sp, #108]	; 0x6c
 801682a:	785b      	ldrb	r3, [r3, #1]
 801682c:	3001      	adds	r0, #1
 801682e:	2b30      	cmp	r3, #48	; 0x30
 8016830:	d0f8      	beq.n	8016824 <_strtod_l+0x1e4>
 8016832:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016836:	2a08      	cmp	r2, #8
 8016838:	f200 84e4 	bhi.w	8017204 <_strtod_l+0xbc4>
 801683c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801683e:	9208      	str	r2, [sp, #32]
 8016840:	4602      	mov	r2, r0
 8016842:	2000      	movs	r0, #0
 8016844:	4604      	mov	r4, r0
 8016846:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801684a:	f100 0101 	add.w	r1, r0, #1
 801684e:	d012      	beq.n	8016876 <_strtod_l+0x236>
 8016850:	440a      	add	r2, r1
 8016852:	eb00 0c04 	add.w	ip, r0, r4
 8016856:	4621      	mov	r1, r4
 8016858:	270a      	movs	r7, #10
 801685a:	458c      	cmp	ip, r1
 801685c:	d113      	bne.n	8016886 <_strtod_l+0x246>
 801685e:	1821      	adds	r1, r4, r0
 8016860:	2908      	cmp	r1, #8
 8016862:	f104 0401 	add.w	r4, r4, #1
 8016866:	4404      	add	r4, r0
 8016868:	dc19      	bgt.n	801689e <_strtod_l+0x25e>
 801686a:	9b07      	ldr	r3, [sp, #28]
 801686c:	210a      	movs	r1, #10
 801686e:	fb01 e303 	mla	r3, r1, r3, lr
 8016872:	9307      	str	r3, [sp, #28]
 8016874:	2100      	movs	r1, #0
 8016876:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016878:	1c58      	adds	r0, r3, #1
 801687a:	901b      	str	r0, [sp, #108]	; 0x6c
 801687c:	785b      	ldrb	r3, [r3, #1]
 801687e:	4608      	mov	r0, r1
 8016880:	e7c9      	b.n	8016816 <_strtod_l+0x1d6>
 8016882:	9805      	ldr	r0, [sp, #20]
 8016884:	e7d3      	b.n	801682e <_strtod_l+0x1ee>
 8016886:	2908      	cmp	r1, #8
 8016888:	f101 0101 	add.w	r1, r1, #1
 801688c:	dc03      	bgt.n	8016896 <_strtod_l+0x256>
 801688e:	9b07      	ldr	r3, [sp, #28]
 8016890:	437b      	muls	r3, r7
 8016892:	9307      	str	r3, [sp, #28]
 8016894:	e7e1      	b.n	801685a <_strtod_l+0x21a>
 8016896:	2910      	cmp	r1, #16
 8016898:	bfd8      	it	le
 801689a:	437d      	mulle	r5, r7
 801689c:	e7dd      	b.n	801685a <_strtod_l+0x21a>
 801689e:	2c10      	cmp	r4, #16
 80168a0:	bfdc      	itt	le
 80168a2:	210a      	movle	r1, #10
 80168a4:	fb01 e505 	mlale	r5, r1, r5, lr
 80168a8:	e7e4      	b.n	8016874 <_strtod_l+0x234>
 80168aa:	2301      	movs	r3, #1
 80168ac:	9304      	str	r3, [sp, #16]
 80168ae:	e781      	b.n	80167b4 <_strtod_l+0x174>
 80168b0:	f04f 0c01 	mov.w	ip, #1
 80168b4:	1cb3      	adds	r3, r6, #2
 80168b6:	931b      	str	r3, [sp, #108]	; 0x6c
 80168b8:	78b3      	ldrb	r3, [r6, #2]
 80168ba:	e78a      	b.n	80167d2 <_strtod_l+0x192>
 80168bc:	f04f 0c00 	mov.w	ip, #0
 80168c0:	e7f8      	b.n	80168b4 <_strtod_l+0x274>
 80168c2:	bf00      	nop
 80168c4:	0801a320 	.word	0x0801a320
 80168c8:	7ff00000 	.word	0x7ff00000
 80168cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ce:	1c5f      	adds	r7, r3, #1
 80168d0:	971b      	str	r7, [sp, #108]	; 0x6c
 80168d2:	785b      	ldrb	r3, [r3, #1]
 80168d4:	2b30      	cmp	r3, #48	; 0x30
 80168d6:	d0f9      	beq.n	80168cc <_strtod_l+0x28c>
 80168d8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80168dc:	2f08      	cmp	r7, #8
 80168de:	f63f af7d 	bhi.w	80167dc <_strtod_l+0x19c>
 80168e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80168e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168e8:	930a      	str	r3, [sp, #40]	; 0x28
 80168ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168ec:	1c5f      	adds	r7, r3, #1
 80168ee:	971b      	str	r7, [sp, #108]	; 0x6c
 80168f0:	785b      	ldrb	r3, [r3, #1]
 80168f2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80168f6:	f1b8 0f09 	cmp.w	r8, #9
 80168fa:	d937      	bls.n	801696c <_strtod_l+0x32c>
 80168fc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80168fe:	1a7f      	subs	r7, r7, r1
 8016900:	2f08      	cmp	r7, #8
 8016902:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016906:	dc37      	bgt.n	8016978 <_strtod_l+0x338>
 8016908:	45be      	cmp	lr, r7
 801690a:	bfa8      	it	ge
 801690c:	46be      	movge	lr, r7
 801690e:	f1bc 0f00 	cmp.w	ip, #0
 8016912:	d001      	beq.n	8016918 <_strtod_l+0x2d8>
 8016914:	f1ce 0e00 	rsb	lr, lr, #0
 8016918:	2c00      	cmp	r4, #0
 801691a:	d151      	bne.n	80169c0 <_strtod_l+0x380>
 801691c:	2800      	cmp	r0, #0
 801691e:	f47f aece 	bne.w	80166be <_strtod_l+0x7e>
 8016922:	9a06      	ldr	r2, [sp, #24]
 8016924:	2a00      	cmp	r2, #0
 8016926:	f47f aeca 	bne.w	80166be <_strtod_l+0x7e>
 801692a:	9a04      	ldr	r2, [sp, #16]
 801692c:	2a00      	cmp	r2, #0
 801692e:	f47f aee4 	bne.w	80166fa <_strtod_l+0xba>
 8016932:	2b4e      	cmp	r3, #78	; 0x4e
 8016934:	d027      	beq.n	8016986 <_strtod_l+0x346>
 8016936:	dc21      	bgt.n	801697c <_strtod_l+0x33c>
 8016938:	2b49      	cmp	r3, #73	; 0x49
 801693a:	f47f aede 	bne.w	80166fa <_strtod_l+0xba>
 801693e:	49a0      	ldr	r1, [pc, #640]	; (8016bc0 <_strtod_l+0x580>)
 8016940:	a81b      	add	r0, sp, #108	; 0x6c
 8016942:	f001 fdf7 	bl	8018534 <__match>
 8016946:	2800      	cmp	r0, #0
 8016948:	f43f aed7 	beq.w	80166fa <_strtod_l+0xba>
 801694c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801694e:	499d      	ldr	r1, [pc, #628]	; (8016bc4 <_strtod_l+0x584>)
 8016950:	3b01      	subs	r3, #1
 8016952:	a81b      	add	r0, sp, #108	; 0x6c
 8016954:	931b      	str	r3, [sp, #108]	; 0x6c
 8016956:	f001 fded 	bl	8018534 <__match>
 801695a:	b910      	cbnz	r0, 8016962 <_strtod_l+0x322>
 801695c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801695e:	3301      	adds	r3, #1
 8016960:	931b      	str	r3, [sp, #108]	; 0x6c
 8016962:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016bd8 <_strtod_l+0x598>
 8016966:	f04f 0a00 	mov.w	sl, #0
 801696a:	e6a8      	b.n	80166be <_strtod_l+0x7e>
 801696c:	210a      	movs	r1, #10
 801696e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016972:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016976:	e7b8      	b.n	80168ea <_strtod_l+0x2aa>
 8016978:	46be      	mov	lr, r7
 801697a:	e7c8      	b.n	801690e <_strtod_l+0x2ce>
 801697c:	2b69      	cmp	r3, #105	; 0x69
 801697e:	d0de      	beq.n	801693e <_strtod_l+0x2fe>
 8016980:	2b6e      	cmp	r3, #110	; 0x6e
 8016982:	f47f aeba 	bne.w	80166fa <_strtod_l+0xba>
 8016986:	4990      	ldr	r1, [pc, #576]	; (8016bc8 <_strtod_l+0x588>)
 8016988:	a81b      	add	r0, sp, #108	; 0x6c
 801698a:	f001 fdd3 	bl	8018534 <__match>
 801698e:	2800      	cmp	r0, #0
 8016990:	f43f aeb3 	beq.w	80166fa <_strtod_l+0xba>
 8016994:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	2b28      	cmp	r3, #40	; 0x28
 801699a:	d10e      	bne.n	80169ba <_strtod_l+0x37a>
 801699c:	aa1e      	add	r2, sp, #120	; 0x78
 801699e:	498b      	ldr	r1, [pc, #556]	; (8016bcc <_strtod_l+0x58c>)
 80169a0:	a81b      	add	r0, sp, #108	; 0x6c
 80169a2:	f001 fddb 	bl	801855c <__hexnan>
 80169a6:	2805      	cmp	r0, #5
 80169a8:	d107      	bne.n	80169ba <_strtod_l+0x37a>
 80169aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80169ac:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80169b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80169b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80169b8:	e681      	b.n	80166be <_strtod_l+0x7e>
 80169ba:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016be0 <_strtod_l+0x5a0>
 80169be:	e7d2      	b.n	8016966 <_strtod_l+0x326>
 80169c0:	ebae 0302 	sub.w	r3, lr, r2
 80169c4:	9306      	str	r3, [sp, #24]
 80169c6:	9b05      	ldr	r3, [sp, #20]
 80169c8:	9807      	ldr	r0, [sp, #28]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	bf08      	it	eq
 80169ce:	4623      	moveq	r3, r4
 80169d0:	2c10      	cmp	r4, #16
 80169d2:	9305      	str	r3, [sp, #20]
 80169d4:	46a0      	mov	r8, r4
 80169d6:	bfa8      	it	ge
 80169d8:	f04f 0810 	movge.w	r8, #16
 80169dc:	f7e9 fdaa 	bl	8000534 <__aeabi_ui2d>
 80169e0:	2c09      	cmp	r4, #9
 80169e2:	4682      	mov	sl, r0
 80169e4:	468b      	mov	fp, r1
 80169e6:	dc13      	bgt.n	8016a10 <_strtod_l+0x3d0>
 80169e8:	9b06      	ldr	r3, [sp, #24]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	f43f ae67 	beq.w	80166be <_strtod_l+0x7e>
 80169f0:	9b06      	ldr	r3, [sp, #24]
 80169f2:	dd7a      	ble.n	8016aea <_strtod_l+0x4aa>
 80169f4:	2b16      	cmp	r3, #22
 80169f6:	dc61      	bgt.n	8016abc <_strtod_l+0x47c>
 80169f8:	4a75      	ldr	r2, [pc, #468]	; (8016bd0 <_strtod_l+0x590>)
 80169fa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80169fe:	e9de 0100 	ldrd	r0, r1, [lr]
 8016a02:	4652      	mov	r2, sl
 8016a04:	465b      	mov	r3, fp
 8016a06:	f7e9 fe0f 	bl	8000628 <__aeabi_dmul>
 8016a0a:	4682      	mov	sl, r0
 8016a0c:	468b      	mov	fp, r1
 8016a0e:	e656      	b.n	80166be <_strtod_l+0x7e>
 8016a10:	4b6f      	ldr	r3, [pc, #444]	; (8016bd0 <_strtod_l+0x590>)
 8016a12:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016a16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016a1a:	f7e9 fe05 	bl	8000628 <__aeabi_dmul>
 8016a1e:	4606      	mov	r6, r0
 8016a20:	4628      	mov	r0, r5
 8016a22:	460f      	mov	r7, r1
 8016a24:	f7e9 fd86 	bl	8000534 <__aeabi_ui2d>
 8016a28:	4602      	mov	r2, r0
 8016a2a:	460b      	mov	r3, r1
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	4639      	mov	r1, r7
 8016a30:	f7e9 fc44 	bl	80002bc <__adddf3>
 8016a34:	2c0f      	cmp	r4, #15
 8016a36:	4682      	mov	sl, r0
 8016a38:	468b      	mov	fp, r1
 8016a3a:	ddd5      	ble.n	80169e8 <_strtod_l+0x3a8>
 8016a3c:	9b06      	ldr	r3, [sp, #24]
 8016a3e:	eba4 0808 	sub.w	r8, r4, r8
 8016a42:	4498      	add	r8, r3
 8016a44:	f1b8 0f00 	cmp.w	r8, #0
 8016a48:	f340 8096 	ble.w	8016b78 <_strtod_l+0x538>
 8016a4c:	f018 030f 	ands.w	r3, r8, #15
 8016a50:	d00a      	beq.n	8016a68 <_strtod_l+0x428>
 8016a52:	495f      	ldr	r1, [pc, #380]	; (8016bd0 <_strtod_l+0x590>)
 8016a54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016a58:	4652      	mov	r2, sl
 8016a5a:	465b      	mov	r3, fp
 8016a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a60:	f7e9 fde2 	bl	8000628 <__aeabi_dmul>
 8016a64:	4682      	mov	sl, r0
 8016a66:	468b      	mov	fp, r1
 8016a68:	f038 080f 	bics.w	r8, r8, #15
 8016a6c:	d073      	beq.n	8016b56 <_strtod_l+0x516>
 8016a6e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016a72:	dd47      	ble.n	8016b04 <_strtod_l+0x4c4>
 8016a74:	2400      	movs	r4, #0
 8016a76:	46a0      	mov	r8, r4
 8016a78:	9407      	str	r4, [sp, #28]
 8016a7a:	9405      	str	r4, [sp, #20]
 8016a7c:	2322      	movs	r3, #34	; 0x22
 8016a7e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016bd8 <_strtod_l+0x598>
 8016a82:	f8c9 3000 	str.w	r3, [r9]
 8016a86:	f04f 0a00 	mov.w	sl, #0
 8016a8a:	9b07      	ldr	r3, [sp, #28]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f43f ae16 	beq.w	80166be <_strtod_l+0x7e>
 8016a92:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a94:	4648      	mov	r0, r9
 8016a96:	f001 fe6c 	bl	8018772 <_Bfree>
 8016a9a:	9905      	ldr	r1, [sp, #20]
 8016a9c:	4648      	mov	r0, r9
 8016a9e:	f001 fe68 	bl	8018772 <_Bfree>
 8016aa2:	4641      	mov	r1, r8
 8016aa4:	4648      	mov	r0, r9
 8016aa6:	f001 fe64 	bl	8018772 <_Bfree>
 8016aaa:	9907      	ldr	r1, [sp, #28]
 8016aac:	4648      	mov	r0, r9
 8016aae:	f001 fe60 	bl	8018772 <_Bfree>
 8016ab2:	4621      	mov	r1, r4
 8016ab4:	4648      	mov	r0, r9
 8016ab6:	f001 fe5c 	bl	8018772 <_Bfree>
 8016aba:	e600      	b.n	80166be <_strtod_l+0x7e>
 8016abc:	9a06      	ldr	r2, [sp, #24]
 8016abe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016ac2:	4293      	cmp	r3, r2
 8016ac4:	dbba      	blt.n	8016a3c <_strtod_l+0x3fc>
 8016ac6:	4d42      	ldr	r5, [pc, #264]	; (8016bd0 <_strtod_l+0x590>)
 8016ac8:	f1c4 040f 	rsb	r4, r4, #15
 8016acc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016ad0:	4652      	mov	r2, sl
 8016ad2:	465b      	mov	r3, fp
 8016ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ad8:	f7e9 fda6 	bl	8000628 <__aeabi_dmul>
 8016adc:	9b06      	ldr	r3, [sp, #24]
 8016ade:	1b1c      	subs	r4, r3, r4
 8016ae0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016ae4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ae8:	e78d      	b.n	8016a06 <_strtod_l+0x3c6>
 8016aea:	f113 0f16 	cmn.w	r3, #22
 8016aee:	dba5      	blt.n	8016a3c <_strtod_l+0x3fc>
 8016af0:	4a37      	ldr	r2, [pc, #220]	; (8016bd0 <_strtod_l+0x590>)
 8016af2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016af6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016afa:	4650      	mov	r0, sl
 8016afc:	4659      	mov	r1, fp
 8016afe:	f7e9 febd 	bl	800087c <__aeabi_ddiv>
 8016b02:	e782      	b.n	8016a0a <_strtod_l+0x3ca>
 8016b04:	2300      	movs	r3, #0
 8016b06:	4e33      	ldr	r6, [pc, #204]	; (8016bd4 <_strtod_l+0x594>)
 8016b08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016b0c:	4650      	mov	r0, sl
 8016b0e:	4659      	mov	r1, fp
 8016b10:	461d      	mov	r5, r3
 8016b12:	f1b8 0f01 	cmp.w	r8, #1
 8016b16:	dc21      	bgt.n	8016b5c <_strtod_l+0x51c>
 8016b18:	b10b      	cbz	r3, 8016b1e <_strtod_l+0x4de>
 8016b1a:	4682      	mov	sl, r0
 8016b1c:	468b      	mov	fp, r1
 8016b1e:	4b2d      	ldr	r3, [pc, #180]	; (8016bd4 <_strtod_l+0x594>)
 8016b20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016b24:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016b28:	4652      	mov	r2, sl
 8016b2a:	465b      	mov	r3, fp
 8016b2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016b30:	f7e9 fd7a 	bl	8000628 <__aeabi_dmul>
 8016b34:	4b28      	ldr	r3, [pc, #160]	; (8016bd8 <_strtod_l+0x598>)
 8016b36:	460a      	mov	r2, r1
 8016b38:	400b      	ands	r3, r1
 8016b3a:	4928      	ldr	r1, [pc, #160]	; (8016bdc <_strtod_l+0x59c>)
 8016b3c:	428b      	cmp	r3, r1
 8016b3e:	4682      	mov	sl, r0
 8016b40:	d898      	bhi.n	8016a74 <_strtod_l+0x434>
 8016b42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016b46:	428b      	cmp	r3, r1
 8016b48:	bf86      	itte	hi
 8016b4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016be4 <_strtod_l+0x5a4>
 8016b4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016b52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016b56:	2300      	movs	r3, #0
 8016b58:	9304      	str	r3, [sp, #16]
 8016b5a:	e077      	b.n	8016c4c <_strtod_l+0x60c>
 8016b5c:	f018 0f01 	tst.w	r8, #1
 8016b60:	d006      	beq.n	8016b70 <_strtod_l+0x530>
 8016b62:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6a:	f7e9 fd5d 	bl	8000628 <__aeabi_dmul>
 8016b6e:	2301      	movs	r3, #1
 8016b70:	3501      	adds	r5, #1
 8016b72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016b76:	e7cc      	b.n	8016b12 <_strtod_l+0x4d2>
 8016b78:	d0ed      	beq.n	8016b56 <_strtod_l+0x516>
 8016b7a:	f1c8 0800 	rsb	r8, r8, #0
 8016b7e:	f018 020f 	ands.w	r2, r8, #15
 8016b82:	d00a      	beq.n	8016b9a <_strtod_l+0x55a>
 8016b84:	4b12      	ldr	r3, [pc, #72]	; (8016bd0 <_strtod_l+0x590>)
 8016b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b8a:	4650      	mov	r0, sl
 8016b8c:	4659      	mov	r1, fp
 8016b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b92:	f7e9 fe73 	bl	800087c <__aeabi_ddiv>
 8016b96:	4682      	mov	sl, r0
 8016b98:	468b      	mov	fp, r1
 8016b9a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016b9e:	d0da      	beq.n	8016b56 <_strtod_l+0x516>
 8016ba0:	f1b8 0f1f 	cmp.w	r8, #31
 8016ba4:	dd20      	ble.n	8016be8 <_strtod_l+0x5a8>
 8016ba6:	2400      	movs	r4, #0
 8016ba8:	46a0      	mov	r8, r4
 8016baa:	9407      	str	r4, [sp, #28]
 8016bac:	9405      	str	r4, [sp, #20]
 8016bae:	2322      	movs	r3, #34	; 0x22
 8016bb0:	f04f 0a00 	mov.w	sl, #0
 8016bb4:	f04f 0b00 	mov.w	fp, #0
 8016bb8:	f8c9 3000 	str.w	r3, [r9]
 8016bbc:	e765      	b.n	8016a8a <_strtod_l+0x44a>
 8016bbe:	bf00      	nop
 8016bc0:	0801a2ed 	.word	0x0801a2ed
 8016bc4:	0801a373 	.word	0x0801a373
 8016bc8:	0801a2f5 	.word	0x0801a2f5
 8016bcc:	0801a334 	.word	0x0801a334
 8016bd0:	0801a3b0 	.word	0x0801a3b0
 8016bd4:	0801a388 	.word	0x0801a388
 8016bd8:	7ff00000 	.word	0x7ff00000
 8016bdc:	7ca00000 	.word	0x7ca00000
 8016be0:	fff80000 	.word	0xfff80000
 8016be4:	7fefffff 	.word	0x7fefffff
 8016be8:	f018 0310 	ands.w	r3, r8, #16
 8016bec:	bf18      	it	ne
 8016bee:	236a      	movne	r3, #106	; 0x6a
 8016bf0:	4da0      	ldr	r5, [pc, #640]	; (8016e74 <_strtod_l+0x834>)
 8016bf2:	9304      	str	r3, [sp, #16]
 8016bf4:	4650      	mov	r0, sl
 8016bf6:	4659      	mov	r1, fp
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	f1b8 0f00 	cmp.w	r8, #0
 8016bfe:	f300 810a 	bgt.w	8016e16 <_strtod_l+0x7d6>
 8016c02:	b10b      	cbz	r3, 8016c08 <_strtod_l+0x5c8>
 8016c04:	4682      	mov	sl, r0
 8016c06:	468b      	mov	fp, r1
 8016c08:	9b04      	ldr	r3, [sp, #16]
 8016c0a:	b1bb      	cbz	r3, 8016c3c <_strtod_l+0x5fc>
 8016c0c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016c10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	4659      	mov	r1, fp
 8016c18:	dd10      	ble.n	8016c3c <_strtod_l+0x5fc>
 8016c1a:	2b1f      	cmp	r3, #31
 8016c1c:	f340 8107 	ble.w	8016e2e <_strtod_l+0x7ee>
 8016c20:	2b34      	cmp	r3, #52	; 0x34
 8016c22:	bfde      	ittt	le
 8016c24:	3b20      	suble	r3, #32
 8016c26:	f04f 32ff 	movle.w	r2, #4294967295
 8016c2a:	fa02 f303 	lslle.w	r3, r2, r3
 8016c2e:	f04f 0a00 	mov.w	sl, #0
 8016c32:	bfcc      	ite	gt
 8016c34:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016c38:	ea03 0b01 	andle.w	fp, r3, r1
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	2300      	movs	r3, #0
 8016c40:	4650      	mov	r0, sl
 8016c42:	4659      	mov	r1, fp
 8016c44:	f7e9 ff58 	bl	8000af8 <__aeabi_dcmpeq>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d1ac      	bne.n	8016ba6 <_strtod_l+0x566>
 8016c4c:	9b07      	ldr	r3, [sp, #28]
 8016c4e:	9300      	str	r3, [sp, #0]
 8016c50:	9a05      	ldr	r2, [sp, #20]
 8016c52:	9908      	ldr	r1, [sp, #32]
 8016c54:	4623      	mov	r3, r4
 8016c56:	4648      	mov	r0, r9
 8016c58:	f001 fddd 	bl	8018816 <__s2b>
 8016c5c:	9007      	str	r0, [sp, #28]
 8016c5e:	2800      	cmp	r0, #0
 8016c60:	f43f af08 	beq.w	8016a74 <_strtod_l+0x434>
 8016c64:	9a06      	ldr	r2, [sp, #24]
 8016c66:	9b06      	ldr	r3, [sp, #24]
 8016c68:	2a00      	cmp	r2, #0
 8016c6a:	f1c3 0300 	rsb	r3, r3, #0
 8016c6e:	bfa8      	it	ge
 8016c70:	2300      	movge	r3, #0
 8016c72:	930e      	str	r3, [sp, #56]	; 0x38
 8016c74:	2400      	movs	r4, #0
 8016c76:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016c7a:	9316      	str	r3, [sp, #88]	; 0x58
 8016c7c:	46a0      	mov	r8, r4
 8016c7e:	9b07      	ldr	r3, [sp, #28]
 8016c80:	4648      	mov	r0, r9
 8016c82:	6859      	ldr	r1, [r3, #4]
 8016c84:	f001 fd41 	bl	801870a <_Balloc>
 8016c88:	9005      	str	r0, [sp, #20]
 8016c8a:	2800      	cmp	r0, #0
 8016c8c:	f43f aef6 	beq.w	8016a7c <_strtod_l+0x43c>
 8016c90:	9b07      	ldr	r3, [sp, #28]
 8016c92:	691a      	ldr	r2, [r3, #16]
 8016c94:	3202      	adds	r2, #2
 8016c96:	f103 010c 	add.w	r1, r3, #12
 8016c9a:	0092      	lsls	r2, r2, #2
 8016c9c:	300c      	adds	r0, #12
 8016c9e:	f001 fd29 	bl	80186f4 <memcpy>
 8016ca2:	aa1e      	add	r2, sp, #120	; 0x78
 8016ca4:	a91d      	add	r1, sp, #116	; 0x74
 8016ca6:	ec4b ab10 	vmov	d0, sl, fp
 8016caa:	4648      	mov	r0, r9
 8016cac:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016cb0:	f002 f86c 	bl	8018d8c <__d2b>
 8016cb4:	901c      	str	r0, [sp, #112]	; 0x70
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	f43f aee0 	beq.w	8016a7c <_strtod_l+0x43c>
 8016cbc:	2101      	movs	r1, #1
 8016cbe:	4648      	mov	r0, r9
 8016cc0:	f001 fe35 	bl	801892e <__i2b>
 8016cc4:	4680      	mov	r8, r0
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	f43f aed8 	beq.w	8016a7c <_strtod_l+0x43c>
 8016ccc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016cce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016cd0:	2e00      	cmp	r6, #0
 8016cd2:	bfab      	itete	ge
 8016cd4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016cd6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016cd8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016cda:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016cdc:	bfac      	ite	ge
 8016cde:	18f7      	addge	r7, r6, r3
 8016ce0:	1b9d      	sublt	r5, r3, r6
 8016ce2:	9b04      	ldr	r3, [sp, #16]
 8016ce4:	1af6      	subs	r6, r6, r3
 8016ce6:	4416      	add	r6, r2
 8016ce8:	4b63      	ldr	r3, [pc, #396]	; (8016e78 <_strtod_l+0x838>)
 8016cea:	3e01      	subs	r6, #1
 8016cec:	429e      	cmp	r6, r3
 8016cee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016cf2:	f280 80af 	bge.w	8016e54 <_strtod_l+0x814>
 8016cf6:	1b9b      	subs	r3, r3, r6
 8016cf8:	2b1f      	cmp	r3, #31
 8016cfa:	eba2 0203 	sub.w	r2, r2, r3
 8016cfe:	f04f 0101 	mov.w	r1, #1
 8016d02:	f300 809b 	bgt.w	8016e3c <_strtod_l+0x7fc>
 8016d06:	fa01 f303 	lsl.w	r3, r1, r3
 8016d0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d0c:	2300      	movs	r3, #0
 8016d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8016d10:	18be      	adds	r6, r7, r2
 8016d12:	9b04      	ldr	r3, [sp, #16]
 8016d14:	42b7      	cmp	r7, r6
 8016d16:	4415      	add	r5, r2
 8016d18:	441d      	add	r5, r3
 8016d1a:	463b      	mov	r3, r7
 8016d1c:	bfa8      	it	ge
 8016d1e:	4633      	movge	r3, r6
 8016d20:	42ab      	cmp	r3, r5
 8016d22:	bfa8      	it	ge
 8016d24:	462b      	movge	r3, r5
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	bfc2      	ittt	gt
 8016d2a:	1af6      	subgt	r6, r6, r3
 8016d2c:	1aed      	subgt	r5, r5, r3
 8016d2e:	1aff      	subgt	r7, r7, r3
 8016d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d32:	b1bb      	cbz	r3, 8016d64 <_strtod_l+0x724>
 8016d34:	4641      	mov	r1, r8
 8016d36:	461a      	mov	r2, r3
 8016d38:	4648      	mov	r0, r9
 8016d3a:	f001 fe97 	bl	8018a6c <__pow5mult>
 8016d3e:	4680      	mov	r8, r0
 8016d40:	2800      	cmp	r0, #0
 8016d42:	f43f ae9b 	beq.w	8016a7c <_strtod_l+0x43c>
 8016d46:	4601      	mov	r1, r0
 8016d48:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016d4a:	4648      	mov	r0, r9
 8016d4c:	f001 fdf8 	bl	8018940 <__multiply>
 8016d50:	900c      	str	r0, [sp, #48]	; 0x30
 8016d52:	2800      	cmp	r0, #0
 8016d54:	f43f ae92 	beq.w	8016a7c <_strtod_l+0x43c>
 8016d58:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016d5a:	4648      	mov	r0, r9
 8016d5c:	f001 fd09 	bl	8018772 <_Bfree>
 8016d60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d62:	931c      	str	r3, [sp, #112]	; 0x70
 8016d64:	2e00      	cmp	r6, #0
 8016d66:	dc7a      	bgt.n	8016e5e <_strtod_l+0x81e>
 8016d68:	9b06      	ldr	r3, [sp, #24]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	dd08      	ble.n	8016d80 <_strtod_l+0x740>
 8016d6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016d70:	9905      	ldr	r1, [sp, #20]
 8016d72:	4648      	mov	r0, r9
 8016d74:	f001 fe7a 	bl	8018a6c <__pow5mult>
 8016d78:	9005      	str	r0, [sp, #20]
 8016d7a:	2800      	cmp	r0, #0
 8016d7c:	f43f ae7e 	beq.w	8016a7c <_strtod_l+0x43c>
 8016d80:	2d00      	cmp	r5, #0
 8016d82:	dd08      	ble.n	8016d96 <_strtod_l+0x756>
 8016d84:	462a      	mov	r2, r5
 8016d86:	9905      	ldr	r1, [sp, #20]
 8016d88:	4648      	mov	r0, r9
 8016d8a:	f001 febd 	bl	8018b08 <__lshift>
 8016d8e:	9005      	str	r0, [sp, #20]
 8016d90:	2800      	cmp	r0, #0
 8016d92:	f43f ae73 	beq.w	8016a7c <_strtod_l+0x43c>
 8016d96:	2f00      	cmp	r7, #0
 8016d98:	dd08      	ble.n	8016dac <_strtod_l+0x76c>
 8016d9a:	4641      	mov	r1, r8
 8016d9c:	463a      	mov	r2, r7
 8016d9e:	4648      	mov	r0, r9
 8016da0:	f001 feb2 	bl	8018b08 <__lshift>
 8016da4:	4680      	mov	r8, r0
 8016da6:	2800      	cmp	r0, #0
 8016da8:	f43f ae68 	beq.w	8016a7c <_strtod_l+0x43c>
 8016dac:	9a05      	ldr	r2, [sp, #20]
 8016dae:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016db0:	4648      	mov	r0, r9
 8016db2:	f001 ff17 	bl	8018be4 <__mdiff>
 8016db6:	4604      	mov	r4, r0
 8016db8:	2800      	cmp	r0, #0
 8016dba:	f43f ae5f 	beq.w	8016a7c <_strtod_l+0x43c>
 8016dbe:	68c3      	ldr	r3, [r0, #12]
 8016dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8016dc2:	2300      	movs	r3, #0
 8016dc4:	60c3      	str	r3, [r0, #12]
 8016dc6:	4641      	mov	r1, r8
 8016dc8:	f001 fef2 	bl	8018bb0 <__mcmp>
 8016dcc:	2800      	cmp	r0, #0
 8016dce:	da55      	bge.n	8016e7c <_strtod_l+0x83c>
 8016dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dd2:	b9e3      	cbnz	r3, 8016e0e <_strtod_l+0x7ce>
 8016dd4:	f1ba 0f00 	cmp.w	sl, #0
 8016dd8:	d119      	bne.n	8016e0e <_strtod_l+0x7ce>
 8016dda:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016dde:	b9b3      	cbnz	r3, 8016e0e <_strtod_l+0x7ce>
 8016de0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016de4:	0d1b      	lsrs	r3, r3, #20
 8016de6:	051b      	lsls	r3, r3, #20
 8016de8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016dec:	d90f      	bls.n	8016e0e <_strtod_l+0x7ce>
 8016dee:	6963      	ldr	r3, [r4, #20]
 8016df0:	b913      	cbnz	r3, 8016df8 <_strtod_l+0x7b8>
 8016df2:	6923      	ldr	r3, [r4, #16]
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	dd0a      	ble.n	8016e0e <_strtod_l+0x7ce>
 8016df8:	4621      	mov	r1, r4
 8016dfa:	2201      	movs	r2, #1
 8016dfc:	4648      	mov	r0, r9
 8016dfe:	f001 fe83 	bl	8018b08 <__lshift>
 8016e02:	4641      	mov	r1, r8
 8016e04:	4604      	mov	r4, r0
 8016e06:	f001 fed3 	bl	8018bb0 <__mcmp>
 8016e0a:	2800      	cmp	r0, #0
 8016e0c:	dc67      	bgt.n	8016ede <_strtod_l+0x89e>
 8016e0e:	9b04      	ldr	r3, [sp, #16]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d171      	bne.n	8016ef8 <_strtod_l+0x8b8>
 8016e14:	e63d      	b.n	8016a92 <_strtod_l+0x452>
 8016e16:	f018 0f01 	tst.w	r8, #1
 8016e1a:	d004      	beq.n	8016e26 <_strtod_l+0x7e6>
 8016e1c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016e20:	f7e9 fc02 	bl	8000628 <__aeabi_dmul>
 8016e24:	2301      	movs	r3, #1
 8016e26:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016e2a:	3508      	adds	r5, #8
 8016e2c:	e6e5      	b.n	8016bfa <_strtod_l+0x5ba>
 8016e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e32:	fa02 f303 	lsl.w	r3, r2, r3
 8016e36:	ea03 0a0a 	and.w	sl, r3, sl
 8016e3a:	e6ff      	b.n	8016c3c <_strtod_l+0x5fc>
 8016e3c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016e40:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016e44:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016e48:	36e2      	adds	r6, #226	; 0xe2
 8016e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8016e4e:	930a      	str	r3, [sp, #40]	; 0x28
 8016e50:	910f      	str	r1, [sp, #60]	; 0x3c
 8016e52:	e75d      	b.n	8016d10 <_strtod_l+0x6d0>
 8016e54:	2300      	movs	r3, #0
 8016e56:	930a      	str	r3, [sp, #40]	; 0x28
 8016e58:	2301      	movs	r3, #1
 8016e5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016e5c:	e758      	b.n	8016d10 <_strtod_l+0x6d0>
 8016e5e:	4632      	mov	r2, r6
 8016e60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e62:	4648      	mov	r0, r9
 8016e64:	f001 fe50 	bl	8018b08 <__lshift>
 8016e68:	901c      	str	r0, [sp, #112]	; 0x70
 8016e6a:	2800      	cmp	r0, #0
 8016e6c:	f47f af7c 	bne.w	8016d68 <_strtod_l+0x728>
 8016e70:	e604      	b.n	8016a7c <_strtod_l+0x43c>
 8016e72:	bf00      	nop
 8016e74:	0801a348 	.word	0x0801a348
 8016e78:	fffffc02 	.word	0xfffffc02
 8016e7c:	465d      	mov	r5, fp
 8016e7e:	f040 8086 	bne.w	8016f8e <_strtod_l+0x94e>
 8016e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016e84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e88:	b32a      	cbz	r2, 8016ed6 <_strtod_l+0x896>
 8016e8a:	4aaf      	ldr	r2, [pc, #700]	; (8017148 <_strtod_l+0xb08>)
 8016e8c:	4293      	cmp	r3, r2
 8016e8e:	d153      	bne.n	8016f38 <_strtod_l+0x8f8>
 8016e90:	9b04      	ldr	r3, [sp, #16]
 8016e92:	4650      	mov	r0, sl
 8016e94:	b1d3      	cbz	r3, 8016ecc <_strtod_l+0x88c>
 8016e96:	4aad      	ldr	r2, [pc, #692]	; (801714c <_strtod_l+0xb0c>)
 8016e98:	402a      	ands	r2, r5
 8016e9a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8016ea2:	d816      	bhi.n	8016ed2 <_strtod_l+0x892>
 8016ea4:	0d12      	lsrs	r2, r2, #20
 8016ea6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8016eae:	4298      	cmp	r0, r3
 8016eb0:	d142      	bne.n	8016f38 <_strtod_l+0x8f8>
 8016eb2:	4ba7      	ldr	r3, [pc, #668]	; (8017150 <_strtod_l+0xb10>)
 8016eb4:	429d      	cmp	r5, r3
 8016eb6:	d102      	bne.n	8016ebe <_strtod_l+0x87e>
 8016eb8:	3001      	adds	r0, #1
 8016eba:	f43f addf 	beq.w	8016a7c <_strtod_l+0x43c>
 8016ebe:	4ba3      	ldr	r3, [pc, #652]	; (801714c <_strtod_l+0xb0c>)
 8016ec0:	402b      	ands	r3, r5
 8016ec2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016ec6:	f04f 0a00 	mov.w	sl, #0
 8016eca:	e7a0      	b.n	8016e0e <_strtod_l+0x7ce>
 8016ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed0:	e7ed      	b.n	8016eae <_strtod_l+0x86e>
 8016ed2:	460b      	mov	r3, r1
 8016ed4:	e7eb      	b.n	8016eae <_strtod_l+0x86e>
 8016ed6:	bb7b      	cbnz	r3, 8016f38 <_strtod_l+0x8f8>
 8016ed8:	f1ba 0f00 	cmp.w	sl, #0
 8016edc:	d12c      	bne.n	8016f38 <_strtod_l+0x8f8>
 8016ede:	9904      	ldr	r1, [sp, #16]
 8016ee0:	4a9a      	ldr	r2, [pc, #616]	; (801714c <_strtod_l+0xb0c>)
 8016ee2:	465b      	mov	r3, fp
 8016ee4:	b1f1      	cbz	r1, 8016f24 <_strtod_l+0x8e4>
 8016ee6:	ea02 010b 	and.w	r1, r2, fp
 8016eea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016eee:	dc19      	bgt.n	8016f24 <_strtod_l+0x8e4>
 8016ef0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016ef4:	f77f ae5b 	ble.w	8016bae <_strtod_l+0x56e>
 8016ef8:	4a96      	ldr	r2, [pc, #600]	; (8017154 <_strtod_l+0xb14>)
 8016efa:	2300      	movs	r3, #0
 8016efc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016f00:	4650      	mov	r0, sl
 8016f02:	4659      	mov	r1, fp
 8016f04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016f08:	f7e9 fb8e 	bl	8000628 <__aeabi_dmul>
 8016f0c:	4682      	mov	sl, r0
 8016f0e:	468b      	mov	fp, r1
 8016f10:	2900      	cmp	r1, #0
 8016f12:	f47f adbe 	bne.w	8016a92 <_strtod_l+0x452>
 8016f16:	2800      	cmp	r0, #0
 8016f18:	f47f adbb 	bne.w	8016a92 <_strtod_l+0x452>
 8016f1c:	2322      	movs	r3, #34	; 0x22
 8016f1e:	f8c9 3000 	str.w	r3, [r9]
 8016f22:	e5b6      	b.n	8016a92 <_strtod_l+0x452>
 8016f24:	4013      	ands	r3, r2
 8016f26:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016f2a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016f2e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016f32:	f04f 3aff 	mov.w	sl, #4294967295
 8016f36:	e76a      	b.n	8016e0e <_strtod_l+0x7ce>
 8016f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f3a:	b193      	cbz	r3, 8016f62 <_strtod_l+0x922>
 8016f3c:	422b      	tst	r3, r5
 8016f3e:	f43f af66 	beq.w	8016e0e <_strtod_l+0x7ce>
 8016f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016f44:	9a04      	ldr	r2, [sp, #16]
 8016f46:	4650      	mov	r0, sl
 8016f48:	4659      	mov	r1, fp
 8016f4a:	b173      	cbz	r3, 8016f6a <_strtod_l+0x92a>
 8016f4c:	f7ff fb5c 	bl	8016608 <sulp>
 8016f50:	4602      	mov	r2, r0
 8016f52:	460b      	mov	r3, r1
 8016f54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f58:	f7e9 f9b0 	bl	80002bc <__adddf3>
 8016f5c:	4682      	mov	sl, r0
 8016f5e:	468b      	mov	fp, r1
 8016f60:	e755      	b.n	8016e0e <_strtod_l+0x7ce>
 8016f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f64:	ea13 0f0a 	tst.w	r3, sl
 8016f68:	e7e9      	b.n	8016f3e <_strtod_l+0x8fe>
 8016f6a:	f7ff fb4d 	bl	8016608 <sulp>
 8016f6e:	4602      	mov	r2, r0
 8016f70:	460b      	mov	r3, r1
 8016f72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f76:	f7e9 f99f 	bl	80002b8 <__aeabi_dsub>
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	4682      	mov	sl, r0
 8016f80:	468b      	mov	fp, r1
 8016f82:	f7e9 fdb9 	bl	8000af8 <__aeabi_dcmpeq>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	f47f ae11 	bne.w	8016bae <_strtod_l+0x56e>
 8016f8c:	e73f      	b.n	8016e0e <_strtod_l+0x7ce>
 8016f8e:	4641      	mov	r1, r8
 8016f90:	4620      	mov	r0, r4
 8016f92:	f001 ff4a 	bl	8018e2a <__ratio>
 8016f96:	ec57 6b10 	vmov	r6, r7, d0
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016fa0:	ee10 0a10 	vmov	r0, s0
 8016fa4:	4639      	mov	r1, r7
 8016fa6:	f7e9 fdbb 	bl	8000b20 <__aeabi_dcmple>
 8016faa:	2800      	cmp	r0, #0
 8016fac:	d077      	beq.n	801709e <_strtod_l+0xa5e>
 8016fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d04a      	beq.n	801704a <_strtod_l+0xa0a>
 8016fb4:	4b68      	ldr	r3, [pc, #416]	; (8017158 <_strtod_l+0xb18>)
 8016fb6:	2200      	movs	r2, #0
 8016fb8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016fbc:	4f66      	ldr	r7, [pc, #408]	; (8017158 <_strtod_l+0xb18>)
 8016fbe:	2600      	movs	r6, #0
 8016fc0:	4b62      	ldr	r3, [pc, #392]	; (801714c <_strtod_l+0xb0c>)
 8016fc2:	402b      	ands	r3, r5
 8016fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fc8:	4b64      	ldr	r3, [pc, #400]	; (801715c <_strtod_l+0xb1c>)
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	f040 80ce 	bne.w	801716c <_strtod_l+0xb2c>
 8016fd0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016fd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016fd8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016fdc:	ec4b ab10 	vmov	d0, sl, fp
 8016fe0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016fe4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016fe8:	f001 fe5a 	bl	8018ca0 <__ulp>
 8016fec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ff0:	ec53 2b10 	vmov	r2, r3, d0
 8016ff4:	f7e9 fb18 	bl	8000628 <__aeabi_dmul>
 8016ff8:	4652      	mov	r2, sl
 8016ffa:	465b      	mov	r3, fp
 8016ffc:	f7e9 f95e 	bl	80002bc <__adddf3>
 8017000:	460b      	mov	r3, r1
 8017002:	4952      	ldr	r1, [pc, #328]	; (801714c <_strtod_l+0xb0c>)
 8017004:	4a56      	ldr	r2, [pc, #344]	; (8017160 <_strtod_l+0xb20>)
 8017006:	4019      	ands	r1, r3
 8017008:	4291      	cmp	r1, r2
 801700a:	4682      	mov	sl, r0
 801700c:	d95b      	bls.n	80170c6 <_strtod_l+0xa86>
 801700e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017010:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017014:	4293      	cmp	r3, r2
 8017016:	d103      	bne.n	8017020 <_strtod_l+0x9e0>
 8017018:	9b08      	ldr	r3, [sp, #32]
 801701a:	3301      	adds	r3, #1
 801701c:	f43f ad2e 	beq.w	8016a7c <_strtod_l+0x43c>
 8017020:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017150 <_strtod_l+0xb10>
 8017024:	f04f 3aff 	mov.w	sl, #4294967295
 8017028:	991c      	ldr	r1, [sp, #112]	; 0x70
 801702a:	4648      	mov	r0, r9
 801702c:	f001 fba1 	bl	8018772 <_Bfree>
 8017030:	9905      	ldr	r1, [sp, #20]
 8017032:	4648      	mov	r0, r9
 8017034:	f001 fb9d 	bl	8018772 <_Bfree>
 8017038:	4641      	mov	r1, r8
 801703a:	4648      	mov	r0, r9
 801703c:	f001 fb99 	bl	8018772 <_Bfree>
 8017040:	4621      	mov	r1, r4
 8017042:	4648      	mov	r0, r9
 8017044:	f001 fb95 	bl	8018772 <_Bfree>
 8017048:	e619      	b.n	8016c7e <_strtod_l+0x63e>
 801704a:	f1ba 0f00 	cmp.w	sl, #0
 801704e:	d11a      	bne.n	8017086 <_strtod_l+0xa46>
 8017050:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017054:	b9eb      	cbnz	r3, 8017092 <_strtod_l+0xa52>
 8017056:	2200      	movs	r2, #0
 8017058:	4b3f      	ldr	r3, [pc, #252]	; (8017158 <_strtod_l+0xb18>)
 801705a:	4630      	mov	r0, r6
 801705c:	4639      	mov	r1, r7
 801705e:	f7e9 fd55 	bl	8000b0c <__aeabi_dcmplt>
 8017062:	b9c8      	cbnz	r0, 8017098 <_strtod_l+0xa58>
 8017064:	4630      	mov	r0, r6
 8017066:	4639      	mov	r1, r7
 8017068:	2200      	movs	r2, #0
 801706a:	4b3e      	ldr	r3, [pc, #248]	; (8017164 <_strtod_l+0xb24>)
 801706c:	f7e9 fadc 	bl	8000628 <__aeabi_dmul>
 8017070:	4606      	mov	r6, r0
 8017072:	460f      	mov	r7, r1
 8017074:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017078:	9618      	str	r6, [sp, #96]	; 0x60
 801707a:	9319      	str	r3, [sp, #100]	; 0x64
 801707c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017080:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017084:	e79c      	b.n	8016fc0 <_strtod_l+0x980>
 8017086:	f1ba 0f01 	cmp.w	sl, #1
 801708a:	d102      	bne.n	8017092 <_strtod_l+0xa52>
 801708c:	2d00      	cmp	r5, #0
 801708e:	f43f ad8e 	beq.w	8016bae <_strtod_l+0x56e>
 8017092:	2200      	movs	r2, #0
 8017094:	4b34      	ldr	r3, [pc, #208]	; (8017168 <_strtod_l+0xb28>)
 8017096:	e78f      	b.n	8016fb8 <_strtod_l+0x978>
 8017098:	2600      	movs	r6, #0
 801709a:	4f32      	ldr	r7, [pc, #200]	; (8017164 <_strtod_l+0xb24>)
 801709c:	e7ea      	b.n	8017074 <_strtod_l+0xa34>
 801709e:	4b31      	ldr	r3, [pc, #196]	; (8017164 <_strtod_l+0xb24>)
 80170a0:	4630      	mov	r0, r6
 80170a2:	4639      	mov	r1, r7
 80170a4:	2200      	movs	r2, #0
 80170a6:	f7e9 fabf 	bl	8000628 <__aeabi_dmul>
 80170aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170ac:	4606      	mov	r6, r0
 80170ae:	460f      	mov	r7, r1
 80170b0:	b933      	cbnz	r3, 80170c0 <_strtod_l+0xa80>
 80170b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170b6:	9010      	str	r0, [sp, #64]	; 0x40
 80170b8:	9311      	str	r3, [sp, #68]	; 0x44
 80170ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170be:	e7df      	b.n	8017080 <_strtod_l+0xa40>
 80170c0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80170c4:	e7f9      	b.n	80170ba <_strtod_l+0xa7a>
 80170c6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80170ca:	9b04      	ldr	r3, [sp, #16]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d1ab      	bne.n	8017028 <_strtod_l+0x9e8>
 80170d0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80170d4:	0d1b      	lsrs	r3, r3, #20
 80170d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170d8:	051b      	lsls	r3, r3, #20
 80170da:	429a      	cmp	r2, r3
 80170dc:	465d      	mov	r5, fp
 80170de:	d1a3      	bne.n	8017028 <_strtod_l+0x9e8>
 80170e0:	4639      	mov	r1, r7
 80170e2:	4630      	mov	r0, r6
 80170e4:	f7e9 fd50 	bl	8000b88 <__aeabi_d2iz>
 80170e8:	f7e9 fa34 	bl	8000554 <__aeabi_i2d>
 80170ec:	460b      	mov	r3, r1
 80170ee:	4602      	mov	r2, r0
 80170f0:	4639      	mov	r1, r7
 80170f2:	4630      	mov	r0, r6
 80170f4:	f7e9 f8e0 	bl	80002b8 <__aeabi_dsub>
 80170f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170fa:	4606      	mov	r6, r0
 80170fc:	460f      	mov	r7, r1
 80170fe:	b933      	cbnz	r3, 801710e <_strtod_l+0xace>
 8017100:	f1ba 0f00 	cmp.w	sl, #0
 8017104:	d103      	bne.n	801710e <_strtod_l+0xace>
 8017106:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801710a:	2d00      	cmp	r5, #0
 801710c:	d06d      	beq.n	80171ea <_strtod_l+0xbaa>
 801710e:	a30a      	add	r3, pc, #40	; (adr r3, 8017138 <_strtod_l+0xaf8>)
 8017110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017114:	4630      	mov	r0, r6
 8017116:	4639      	mov	r1, r7
 8017118:	f7e9 fcf8 	bl	8000b0c <__aeabi_dcmplt>
 801711c:	2800      	cmp	r0, #0
 801711e:	f47f acb8 	bne.w	8016a92 <_strtod_l+0x452>
 8017122:	a307      	add	r3, pc, #28	; (adr r3, 8017140 <_strtod_l+0xb00>)
 8017124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017128:	4630      	mov	r0, r6
 801712a:	4639      	mov	r1, r7
 801712c:	f7e9 fd0c 	bl	8000b48 <__aeabi_dcmpgt>
 8017130:	2800      	cmp	r0, #0
 8017132:	f43f af79 	beq.w	8017028 <_strtod_l+0x9e8>
 8017136:	e4ac      	b.n	8016a92 <_strtod_l+0x452>
 8017138:	94a03595 	.word	0x94a03595
 801713c:	3fdfffff 	.word	0x3fdfffff
 8017140:	35afe535 	.word	0x35afe535
 8017144:	3fe00000 	.word	0x3fe00000
 8017148:	000fffff 	.word	0x000fffff
 801714c:	7ff00000 	.word	0x7ff00000
 8017150:	7fefffff 	.word	0x7fefffff
 8017154:	39500000 	.word	0x39500000
 8017158:	3ff00000 	.word	0x3ff00000
 801715c:	7fe00000 	.word	0x7fe00000
 8017160:	7c9fffff 	.word	0x7c9fffff
 8017164:	3fe00000 	.word	0x3fe00000
 8017168:	bff00000 	.word	0xbff00000
 801716c:	9b04      	ldr	r3, [sp, #16]
 801716e:	b333      	cbz	r3, 80171be <_strtod_l+0xb7e>
 8017170:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017172:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017176:	d822      	bhi.n	80171be <_strtod_l+0xb7e>
 8017178:	a327      	add	r3, pc, #156	; (adr r3, 8017218 <_strtod_l+0xbd8>)
 801717a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801717e:	4630      	mov	r0, r6
 8017180:	4639      	mov	r1, r7
 8017182:	f7e9 fccd 	bl	8000b20 <__aeabi_dcmple>
 8017186:	b1a0      	cbz	r0, 80171b2 <_strtod_l+0xb72>
 8017188:	4639      	mov	r1, r7
 801718a:	4630      	mov	r0, r6
 801718c:	f7e9 fd24 	bl	8000bd8 <__aeabi_d2uiz>
 8017190:	2800      	cmp	r0, #0
 8017192:	bf08      	it	eq
 8017194:	2001      	moveq	r0, #1
 8017196:	f7e9 f9cd 	bl	8000534 <__aeabi_ui2d>
 801719a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801719c:	4606      	mov	r6, r0
 801719e:	460f      	mov	r7, r1
 80171a0:	bb03      	cbnz	r3, 80171e4 <_strtod_l+0xba4>
 80171a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171a6:	9012      	str	r0, [sp, #72]	; 0x48
 80171a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80171aa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80171ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80171b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80171b6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80171ba:	1a9b      	subs	r3, r3, r2
 80171bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80171be:	ed9d 0b08 	vldr	d0, [sp, #32]
 80171c2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80171c6:	f001 fd6b 	bl	8018ca0 <__ulp>
 80171ca:	4650      	mov	r0, sl
 80171cc:	ec53 2b10 	vmov	r2, r3, d0
 80171d0:	4659      	mov	r1, fp
 80171d2:	f7e9 fa29 	bl	8000628 <__aeabi_dmul>
 80171d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80171da:	f7e9 f86f 	bl	80002bc <__adddf3>
 80171de:	4682      	mov	sl, r0
 80171e0:	468b      	mov	fp, r1
 80171e2:	e772      	b.n	80170ca <_strtod_l+0xa8a>
 80171e4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80171e8:	e7df      	b.n	80171aa <_strtod_l+0xb6a>
 80171ea:	a30d      	add	r3, pc, #52	; (adr r3, 8017220 <_strtod_l+0xbe0>)
 80171ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171f0:	f7e9 fc8c 	bl	8000b0c <__aeabi_dcmplt>
 80171f4:	e79c      	b.n	8017130 <_strtod_l+0xaf0>
 80171f6:	2300      	movs	r3, #0
 80171f8:	930d      	str	r3, [sp, #52]	; 0x34
 80171fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80171fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80171fe:	6013      	str	r3, [r2, #0]
 8017200:	f7ff ba61 	b.w	80166c6 <_strtod_l+0x86>
 8017204:	2b65      	cmp	r3, #101	; 0x65
 8017206:	f04f 0200 	mov.w	r2, #0
 801720a:	f43f ab4e 	beq.w	80168aa <_strtod_l+0x26a>
 801720e:	2101      	movs	r1, #1
 8017210:	4614      	mov	r4, r2
 8017212:	9104      	str	r1, [sp, #16]
 8017214:	f7ff bacb 	b.w	80167ae <_strtod_l+0x16e>
 8017218:	ffc00000 	.word	0xffc00000
 801721c:	41dfffff 	.word	0x41dfffff
 8017220:	94a03595 	.word	0x94a03595
 8017224:	3fcfffff 	.word	0x3fcfffff

08017228 <_strtod_r>:
 8017228:	4b05      	ldr	r3, [pc, #20]	; (8017240 <_strtod_r+0x18>)
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	b410      	push	{r4}
 801722e:	6a1b      	ldr	r3, [r3, #32]
 8017230:	4c04      	ldr	r4, [pc, #16]	; (8017244 <_strtod_r+0x1c>)
 8017232:	2b00      	cmp	r3, #0
 8017234:	bf08      	it	eq
 8017236:	4623      	moveq	r3, r4
 8017238:	f85d 4b04 	ldr.w	r4, [sp], #4
 801723c:	f7ff ba00 	b.w	8016640 <_strtod_l>
 8017240:	2000000c 	.word	0x2000000c
 8017244:	20000070 	.word	0x20000070

08017248 <_strtol_l.isra.0>:
 8017248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801724c:	4680      	mov	r8, r0
 801724e:	4689      	mov	r9, r1
 8017250:	4692      	mov	sl, r2
 8017252:	461e      	mov	r6, r3
 8017254:	460f      	mov	r7, r1
 8017256:	463d      	mov	r5, r7
 8017258:	9808      	ldr	r0, [sp, #32]
 801725a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801725e:	f001 fa0d 	bl	801867c <__locale_ctype_ptr_l>
 8017262:	4420      	add	r0, r4
 8017264:	7843      	ldrb	r3, [r0, #1]
 8017266:	f013 0308 	ands.w	r3, r3, #8
 801726a:	d132      	bne.n	80172d2 <_strtol_l.isra.0+0x8a>
 801726c:	2c2d      	cmp	r4, #45	; 0x2d
 801726e:	d132      	bne.n	80172d6 <_strtol_l.isra.0+0x8e>
 8017270:	787c      	ldrb	r4, [r7, #1]
 8017272:	1cbd      	adds	r5, r7, #2
 8017274:	2201      	movs	r2, #1
 8017276:	2e00      	cmp	r6, #0
 8017278:	d05d      	beq.n	8017336 <_strtol_l.isra.0+0xee>
 801727a:	2e10      	cmp	r6, #16
 801727c:	d109      	bne.n	8017292 <_strtol_l.isra.0+0x4a>
 801727e:	2c30      	cmp	r4, #48	; 0x30
 8017280:	d107      	bne.n	8017292 <_strtol_l.isra.0+0x4a>
 8017282:	782b      	ldrb	r3, [r5, #0]
 8017284:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017288:	2b58      	cmp	r3, #88	; 0x58
 801728a:	d14f      	bne.n	801732c <_strtol_l.isra.0+0xe4>
 801728c:	786c      	ldrb	r4, [r5, #1]
 801728e:	2610      	movs	r6, #16
 8017290:	3502      	adds	r5, #2
 8017292:	2a00      	cmp	r2, #0
 8017294:	bf14      	ite	ne
 8017296:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801729a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801729e:	2700      	movs	r7, #0
 80172a0:	fbb1 fcf6 	udiv	ip, r1, r6
 80172a4:	4638      	mov	r0, r7
 80172a6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80172aa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80172ae:	2b09      	cmp	r3, #9
 80172b0:	d817      	bhi.n	80172e2 <_strtol_l.isra.0+0x9a>
 80172b2:	461c      	mov	r4, r3
 80172b4:	42a6      	cmp	r6, r4
 80172b6:	dd23      	ble.n	8017300 <_strtol_l.isra.0+0xb8>
 80172b8:	1c7b      	adds	r3, r7, #1
 80172ba:	d007      	beq.n	80172cc <_strtol_l.isra.0+0x84>
 80172bc:	4584      	cmp	ip, r0
 80172be:	d31c      	bcc.n	80172fa <_strtol_l.isra.0+0xb2>
 80172c0:	d101      	bne.n	80172c6 <_strtol_l.isra.0+0x7e>
 80172c2:	45a6      	cmp	lr, r4
 80172c4:	db19      	blt.n	80172fa <_strtol_l.isra.0+0xb2>
 80172c6:	fb00 4006 	mla	r0, r0, r6, r4
 80172ca:	2701      	movs	r7, #1
 80172cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172d0:	e7eb      	b.n	80172aa <_strtol_l.isra.0+0x62>
 80172d2:	462f      	mov	r7, r5
 80172d4:	e7bf      	b.n	8017256 <_strtol_l.isra.0+0xe>
 80172d6:	2c2b      	cmp	r4, #43	; 0x2b
 80172d8:	bf04      	itt	eq
 80172da:	1cbd      	addeq	r5, r7, #2
 80172dc:	787c      	ldrbeq	r4, [r7, #1]
 80172de:	461a      	mov	r2, r3
 80172e0:	e7c9      	b.n	8017276 <_strtol_l.isra.0+0x2e>
 80172e2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80172e6:	2b19      	cmp	r3, #25
 80172e8:	d801      	bhi.n	80172ee <_strtol_l.isra.0+0xa6>
 80172ea:	3c37      	subs	r4, #55	; 0x37
 80172ec:	e7e2      	b.n	80172b4 <_strtol_l.isra.0+0x6c>
 80172ee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80172f2:	2b19      	cmp	r3, #25
 80172f4:	d804      	bhi.n	8017300 <_strtol_l.isra.0+0xb8>
 80172f6:	3c57      	subs	r4, #87	; 0x57
 80172f8:	e7dc      	b.n	80172b4 <_strtol_l.isra.0+0x6c>
 80172fa:	f04f 37ff 	mov.w	r7, #4294967295
 80172fe:	e7e5      	b.n	80172cc <_strtol_l.isra.0+0x84>
 8017300:	1c7b      	adds	r3, r7, #1
 8017302:	d108      	bne.n	8017316 <_strtol_l.isra.0+0xce>
 8017304:	2322      	movs	r3, #34	; 0x22
 8017306:	f8c8 3000 	str.w	r3, [r8]
 801730a:	4608      	mov	r0, r1
 801730c:	f1ba 0f00 	cmp.w	sl, #0
 8017310:	d107      	bne.n	8017322 <_strtol_l.isra.0+0xda>
 8017312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017316:	b102      	cbz	r2, 801731a <_strtol_l.isra.0+0xd2>
 8017318:	4240      	negs	r0, r0
 801731a:	f1ba 0f00 	cmp.w	sl, #0
 801731e:	d0f8      	beq.n	8017312 <_strtol_l.isra.0+0xca>
 8017320:	b10f      	cbz	r7, 8017326 <_strtol_l.isra.0+0xde>
 8017322:	f105 39ff 	add.w	r9, r5, #4294967295
 8017326:	f8ca 9000 	str.w	r9, [sl]
 801732a:	e7f2      	b.n	8017312 <_strtol_l.isra.0+0xca>
 801732c:	2430      	movs	r4, #48	; 0x30
 801732e:	2e00      	cmp	r6, #0
 8017330:	d1af      	bne.n	8017292 <_strtol_l.isra.0+0x4a>
 8017332:	2608      	movs	r6, #8
 8017334:	e7ad      	b.n	8017292 <_strtol_l.isra.0+0x4a>
 8017336:	2c30      	cmp	r4, #48	; 0x30
 8017338:	d0a3      	beq.n	8017282 <_strtol_l.isra.0+0x3a>
 801733a:	260a      	movs	r6, #10
 801733c:	e7a9      	b.n	8017292 <_strtol_l.isra.0+0x4a>
	...

08017340 <_strtol_r>:
 8017340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017342:	4c06      	ldr	r4, [pc, #24]	; (801735c <_strtol_r+0x1c>)
 8017344:	4d06      	ldr	r5, [pc, #24]	; (8017360 <_strtol_r+0x20>)
 8017346:	6824      	ldr	r4, [r4, #0]
 8017348:	6a24      	ldr	r4, [r4, #32]
 801734a:	2c00      	cmp	r4, #0
 801734c:	bf08      	it	eq
 801734e:	462c      	moveq	r4, r5
 8017350:	9400      	str	r4, [sp, #0]
 8017352:	f7ff ff79 	bl	8017248 <_strtol_l.isra.0>
 8017356:	b003      	add	sp, #12
 8017358:	bd30      	pop	{r4, r5, pc}
 801735a:	bf00      	nop
 801735c:	2000000c 	.word	0x2000000c
 8017360:	20000070 	.word	0x20000070

08017364 <_vsiprintf_r>:
 8017364:	b500      	push	{lr}
 8017366:	b09b      	sub	sp, #108	; 0x6c
 8017368:	9100      	str	r1, [sp, #0]
 801736a:	9104      	str	r1, [sp, #16]
 801736c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017370:	9105      	str	r1, [sp, #20]
 8017372:	9102      	str	r1, [sp, #8]
 8017374:	4905      	ldr	r1, [pc, #20]	; (801738c <_vsiprintf_r+0x28>)
 8017376:	9103      	str	r1, [sp, #12]
 8017378:	4669      	mov	r1, sp
 801737a:	f001 fed5 	bl	8019128 <_svfiprintf_r>
 801737e:	9b00      	ldr	r3, [sp, #0]
 8017380:	2200      	movs	r2, #0
 8017382:	701a      	strb	r2, [r3, #0]
 8017384:	b01b      	add	sp, #108	; 0x6c
 8017386:	f85d fb04 	ldr.w	pc, [sp], #4
 801738a:	bf00      	nop
 801738c:	ffff0208 	.word	0xffff0208

08017390 <vsiprintf>:
 8017390:	4613      	mov	r3, r2
 8017392:	460a      	mov	r2, r1
 8017394:	4601      	mov	r1, r0
 8017396:	4802      	ldr	r0, [pc, #8]	; (80173a0 <vsiprintf+0x10>)
 8017398:	6800      	ldr	r0, [r0, #0]
 801739a:	f7ff bfe3 	b.w	8017364 <_vsiprintf_r>
 801739e:	bf00      	nop
 80173a0:	2000000c 	.word	0x2000000c

080173a4 <quorem>:
 80173a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a8:	6903      	ldr	r3, [r0, #16]
 80173aa:	690c      	ldr	r4, [r1, #16]
 80173ac:	42a3      	cmp	r3, r4
 80173ae:	4680      	mov	r8, r0
 80173b0:	f2c0 8082 	blt.w	80174b8 <quorem+0x114>
 80173b4:	3c01      	subs	r4, #1
 80173b6:	f101 0714 	add.w	r7, r1, #20
 80173ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80173be:	f100 0614 	add.w	r6, r0, #20
 80173c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80173c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80173ca:	eb06 030c 	add.w	r3, r6, ip
 80173ce:	3501      	adds	r5, #1
 80173d0:	eb07 090c 	add.w	r9, r7, ip
 80173d4:	9301      	str	r3, [sp, #4]
 80173d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80173da:	b395      	cbz	r5, 8017442 <quorem+0x9e>
 80173dc:	f04f 0a00 	mov.w	sl, #0
 80173e0:	4638      	mov	r0, r7
 80173e2:	46b6      	mov	lr, r6
 80173e4:	46d3      	mov	fp, sl
 80173e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80173ea:	b293      	uxth	r3, r2
 80173ec:	fb05 a303 	mla	r3, r5, r3, sl
 80173f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80173f4:	b29b      	uxth	r3, r3
 80173f6:	ebab 0303 	sub.w	r3, fp, r3
 80173fa:	0c12      	lsrs	r2, r2, #16
 80173fc:	f8de b000 	ldr.w	fp, [lr]
 8017400:	fb05 a202 	mla	r2, r5, r2, sl
 8017404:	fa13 f38b 	uxtah	r3, r3, fp
 8017408:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801740c:	fa1f fb82 	uxth.w	fp, r2
 8017410:	f8de 2000 	ldr.w	r2, [lr]
 8017414:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801741c:	b29b      	uxth	r3, r3
 801741e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017422:	4581      	cmp	r9, r0
 8017424:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017428:	f84e 3b04 	str.w	r3, [lr], #4
 801742c:	d2db      	bcs.n	80173e6 <quorem+0x42>
 801742e:	f856 300c 	ldr.w	r3, [r6, ip]
 8017432:	b933      	cbnz	r3, 8017442 <quorem+0x9e>
 8017434:	9b01      	ldr	r3, [sp, #4]
 8017436:	3b04      	subs	r3, #4
 8017438:	429e      	cmp	r6, r3
 801743a:	461a      	mov	r2, r3
 801743c:	d330      	bcc.n	80174a0 <quorem+0xfc>
 801743e:	f8c8 4010 	str.w	r4, [r8, #16]
 8017442:	4640      	mov	r0, r8
 8017444:	f001 fbb4 	bl	8018bb0 <__mcmp>
 8017448:	2800      	cmp	r0, #0
 801744a:	db25      	blt.n	8017498 <quorem+0xf4>
 801744c:	3501      	adds	r5, #1
 801744e:	4630      	mov	r0, r6
 8017450:	f04f 0c00 	mov.w	ip, #0
 8017454:	f857 2b04 	ldr.w	r2, [r7], #4
 8017458:	f8d0 e000 	ldr.w	lr, [r0]
 801745c:	b293      	uxth	r3, r2
 801745e:	ebac 0303 	sub.w	r3, ip, r3
 8017462:	0c12      	lsrs	r2, r2, #16
 8017464:	fa13 f38e 	uxtah	r3, r3, lr
 8017468:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801746c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017470:	b29b      	uxth	r3, r3
 8017472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017476:	45b9      	cmp	r9, r7
 8017478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801747c:	f840 3b04 	str.w	r3, [r0], #4
 8017480:	d2e8      	bcs.n	8017454 <quorem+0xb0>
 8017482:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017486:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801748a:	b92a      	cbnz	r2, 8017498 <quorem+0xf4>
 801748c:	3b04      	subs	r3, #4
 801748e:	429e      	cmp	r6, r3
 8017490:	461a      	mov	r2, r3
 8017492:	d30b      	bcc.n	80174ac <quorem+0x108>
 8017494:	f8c8 4010 	str.w	r4, [r8, #16]
 8017498:	4628      	mov	r0, r5
 801749a:	b003      	add	sp, #12
 801749c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174a0:	6812      	ldr	r2, [r2, #0]
 80174a2:	3b04      	subs	r3, #4
 80174a4:	2a00      	cmp	r2, #0
 80174a6:	d1ca      	bne.n	801743e <quorem+0x9a>
 80174a8:	3c01      	subs	r4, #1
 80174aa:	e7c5      	b.n	8017438 <quorem+0x94>
 80174ac:	6812      	ldr	r2, [r2, #0]
 80174ae:	3b04      	subs	r3, #4
 80174b0:	2a00      	cmp	r2, #0
 80174b2:	d1ef      	bne.n	8017494 <quorem+0xf0>
 80174b4:	3c01      	subs	r4, #1
 80174b6:	e7ea      	b.n	801748e <quorem+0xea>
 80174b8:	2000      	movs	r0, #0
 80174ba:	e7ee      	b.n	801749a <quorem+0xf6>
 80174bc:	0000      	movs	r0, r0
	...

080174c0 <_dtoa_r>:
 80174c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174c4:	ec57 6b10 	vmov	r6, r7, d0
 80174c8:	b097      	sub	sp, #92	; 0x5c
 80174ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80174cc:	9106      	str	r1, [sp, #24]
 80174ce:	4604      	mov	r4, r0
 80174d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80174d2:	9312      	str	r3, [sp, #72]	; 0x48
 80174d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80174d8:	e9cd 6700 	strd	r6, r7, [sp]
 80174dc:	b93d      	cbnz	r5, 80174ee <_dtoa_r+0x2e>
 80174de:	2010      	movs	r0, #16
 80174e0:	f001 f8ee 	bl	80186c0 <malloc>
 80174e4:	6260      	str	r0, [r4, #36]	; 0x24
 80174e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80174ea:	6005      	str	r5, [r0, #0]
 80174ec:	60c5      	str	r5, [r0, #12]
 80174ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80174f0:	6819      	ldr	r1, [r3, #0]
 80174f2:	b151      	cbz	r1, 801750a <_dtoa_r+0x4a>
 80174f4:	685a      	ldr	r2, [r3, #4]
 80174f6:	604a      	str	r2, [r1, #4]
 80174f8:	2301      	movs	r3, #1
 80174fa:	4093      	lsls	r3, r2
 80174fc:	608b      	str	r3, [r1, #8]
 80174fe:	4620      	mov	r0, r4
 8017500:	f001 f937 	bl	8018772 <_Bfree>
 8017504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017506:	2200      	movs	r2, #0
 8017508:	601a      	str	r2, [r3, #0]
 801750a:	1e3b      	subs	r3, r7, #0
 801750c:	bfbb      	ittet	lt
 801750e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017512:	9301      	strlt	r3, [sp, #4]
 8017514:	2300      	movge	r3, #0
 8017516:	2201      	movlt	r2, #1
 8017518:	bfac      	ite	ge
 801751a:	f8c8 3000 	strge.w	r3, [r8]
 801751e:	f8c8 2000 	strlt.w	r2, [r8]
 8017522:	4baf      	ldr	r3, [pc, #700]	; (80177e0 <_dtoa_r+0x320>)
 8017524:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017528:	ea33 0308 	bics.w	r3, r3, r8
 801752c:	d114      	bne.n	8017558 <_dtoa_r+0x98>
 801752e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017530:	f242 730f 	movw	r3, #9999	; 0x270f
 8017534:	6013      	str	r3, [r2, #0]
 8017536:	9b00      	ldr	r3, [sp, #0]
 8017538:	b923      	cbnz	r3, 8017544 <_dtoa_r+0x84>
 801753a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801753e:	2800      	cmp	r0, #0
 8017540:	f000 8542 	beq.w	8017fc8 <_dtoa_r+0xb08>
 8017544:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017546:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80177f4 <_dtoa_r+0x334>
 801754a:	2b00      	cmp	r3, #0
 801754c:	f000 8544 	beq.w	8017fd8 <_dtoa_r+0xb18>
 8017550:	f10b 0303 	add.w	r3, fp, #3
 8017554:	f000 bd3e 	b.w	8017fd4 <_dtoa_r+0xb14>
 8017558:	e9dd 6700 	ldrd	r6, r7, [sp]
 801755c:	2200      	movs	r2, #0
 801755e:	2300      	movs	r3, #0
 8017560:	4630      	mov	r0, r6
 8017562:	4639      	mov	r1, r7
 8017564:	f7e9 fac8 	bl	8000af8 <__aeabi_dcmpeq>
 8017568:	4681      	mov	r9, r0
 801756a:	b168      	cbz	r0, 8017588 <_dtoa_r+0xc8>
 801756c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801756e:	2301      	movs	r3, #1
 8017570:	6013      	str	r3, [r2, #0]
 8017572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017574:	2b00      	cmp	r3, #0
 8017576:	f000 8524 	beq.w	8017fc2 <_dtoa_r+0xb02>
 801757a:	4b9a      	ldr	r3, [pc, #616]	; (80177e4 <_dtoa_r+0x324>)
 801757c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801757e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017582:	6013      	str	r3, [r2, #0]
 8017584:	f000 bd28 	b.w	8017fd8 <_dtoa_r+0xb18>
 8017588:	aa14      	add	r2, sp, #80	; 0x50
 801758a:	a915      	add	r1, sp, #84	; 0x54
 801758c:	ec47 6b10 	vmov	d0, r6, r7
 8017590:	4620      	mov	r0, r4
 8017592:	f001 fbfb 	bl	8018d8c <__d2b>
 8017596:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801759a:	9004      	str	r0, [sp, #16]
 801759c:	2d00      	cmp	r5, #0
 801759e:	d07c      	beq.n	801769a <_dtoa_r+0x1da>
 80175a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80175a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80175a8:	46b2      	mov	sl, r6
 80175aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80175ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80175b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80175b6:	2200      	movs	r2, #0
 80175b8:	4b8b      	ldr	r3, [pc, #556]	; (80177e8 <_dtoa_r+0x328>)
 80175ba:	4650      	mov	r0, sl
 80175bc:	4659      	mov	r1, fp
 80175be:	f7e8 fe7b 	bl	80002b8 <__aeabi_dsub>
 80175c2:	a381      	add	r3, pc, #516	; (adr r3, 80177c8 <_dtoa_r+0x308>)
 80175c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c8:	f7e9 f82e 	bl	8000628 <__aeabi_dmul>
 80175cc:	a380      	add	r3, pc, #512	; (adr r3, 80177d0 <_dtoa_r+0x310>)
 80175ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175d2:	f7e8 fe73 	bl	80002bc <__adddf3>
 80175d6:	4606      	mov	r6, r0
 80175d8:	4628      	mov	r0, r5
 80175da:	460f      	mov	r7, r1
 80175dc:	f7e8 ffba 	bl	8000554 <__aeabi_i2d>
 80175e0:	a37d      	add	r3, pc, #500	; (adr r3, 80177d8 <_dtoa_r+0x318>)
 80175e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e6:	f7e9 f81f 	bl	8000628 <__aeabi_dmul>
 80175ea:	4602      	mov	r2, r0
 80175ec:	460b      	mov	r3, r1
 80175ee:	4630      	mov	r0, r6
 80175f0:	4639      	mov	r1, r7
 80175f2:	f7e8 fe63 	bl	80002bc <__adddf3>
 80175f6:	4606      	mov	r6, r0
 80175f8:	460f      	mov	r7, r1
 80175fa:	f7e9 fac5 	bl	8000b88 <__aeabi_d2iz>
 80175fe:	2200      	movs	r2, #0
 8017600:	4682      	mov	sl, r0
 8017602:	2300      	movs	r3, #0
 8017604:	4630      	mov	r0, r6
 8017606:	4639      	mov	r1, r7
 8017608:	f7e9 fa80 	bl	8000b0c <__aeabi_dcmplt>
 801760c:	b148      	cbz	r0, 8017622 <_dtoa_r+0x162>
 801760e:	4650      	mov	r0, sl
 8017610:	f7e8 ffa0 	bl	8000554 <__aeabi_i2d>
 8017614:	4632      	mov	r2, r6
 8017616:	463b      	mov	r3, r7
 8017618:	f7e9 fa6e 	bl	8000af8 <__aeabi_dcmpeq>
 801761c:	b908      	cbnz	r0, 8017622 <_dtoa_r+0x162>
 801761e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017622:	f1ba 0f16 	cmp.w	sl, #22
 8017626:	d859      	bhi.n	80176dc <_dtoa_r+0x21c>
 8017628:	4970      	ldr	r1, [pc, #448]	; (80177ec <_dtoa_r+0x32c>)
 801762a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801762e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017636:	f7e9 fa87 	bl	8000b48 <__aeabi_dcmpgt>
 801763a:	2800      	cmp	r0, #0
 801763c:	d050      	beq.n	80176e0 <_dtoa_r+0x220>
 801763e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017642:	2300      	movs	r3, #0
 8017644:	930f      	str	r3, [sp, #60]	; 0x3c
 8017646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017648:	1b5d      	subs	r5, r3, r5
 801764a:	f1b5 0801 	subs.w	r8, r5, #1
 801764e:	bf49      	itett	mi
 8017650:	f1c5 0301 	rsbmi	r3, r5, #1
 8017654:	2300      	movpl	r3, #0
 8017656:	9305      	strmi	r3, [sp, #20]
 8017658:	f04f 0800 	movmi.w	r8, #0
 801765c:	bf58      	it	pl
 801765e:	9305      	strpl	r3, [sp, #20]
 8017660:	f1ba 0f00 	cmp.w	sl, #0
 8017664:	db3e      	blt.n	80176e4 <_dtoa_r+0x224>
 8017666:	2300      	movs	r3, #0
 8017668:	44d0      	add	r8, sl
 801766a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801766e:	9307      	str	r3, [sp, #28]
 8017670:	9b06      	ldr	r3, [sp, #24]
 8017672:	2b09      	cmp	r3, #9
 8017674:	f200 8090 	bhi.w	8017798 <_dtoa_r+0x2d8>
 8017678:	2b05      	cmp	r3, #5
 801767a:	bfc4      	itt	gt
 801767c:	3b04      	subgt	r3, #4
 801767e:	9306      	strgt	r3, [sp, #24]
 8017680:	9b06      	ldr	r3, [sp, #24]
 8017682:	f1a3 0302 	sub.w	r3, r3, #2
 8017686:	bfcc      	ite	gt
 8017688:	2500      	movgt	r5, #0
 801768a:	2501      	movle	r5, #1
 801768c:	2b03      	cmp	r3, #3
 801768e:	f200 808f 	bhi.w	80177b0 <_dtoa_r+0x2f0>
 8017692:	e8df f003 	tbb	[pc, r3]
 8017696:	7f7d      	.short	0x7f7d
 8017698:	7131      	.short	0x7131
 801769a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801769e:	441d      	add	r5, r3
 80176a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80176a4:	2820      	cmp	r0, #32
 80176a6:	dd13      	ble.n	80176d0 <_dtoa_r+0x210>
 80176a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80176ac:	9b00      	ldr	r3, [sp, #0]
 80176ae:	fa08 f800 	lsl.w	r8, r8, r0
 80176b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80176b6:	fa23 f000 	lsr.w	r0, r3, r0
 80176ba:	ea48 0000 	orr.w	r0, r8, r0
 80176be:	f7e8 ff39 	bl	8000534 <__aeabi_ui2d>
 80176c2:	2301      	movs	r3, #1
 80176c4:	4682      	mov	sl, r0
 80176c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80176ca:	3d01      	subs	r5, #1
 80176cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80176ce:	e772      	b.n	80175b6 <_dtoa_r+0xf6>
 80176d0:	9b00      	ldr	r3, [sp, #0]
 80176d2:	f1c0 0020 	rsb	r0, r0, #32
 80176d6:	fa03 f000 	lsl.w	r0, r3, r0
 80176da:	e7f0      	b.n	80176be <_dtoa_r+0x1fe>
 80176dc:	2301      	movs	r3, #1
 80176de:	e7b1      	b.n	8017644 <_dtoa_r+0x184>
 80176e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80176e2:	e7b0      	b.n	8017646 <_dtoa_r+0x186>
 80176e4:	9b05      	ldr	r3, [sp, #20]
 80176e6:	eba3 030a 	sub.w	r3, r3, sl
 80176ea:	9305      	str	r3, [sp, #20]
 80176ec:	f1ca 0300 	rsb	r3, sl, #0
 80176f0:	9307      	str	r3, [sp, #28]
 80176f2:	2300      	movs	r3, #0
 80176f4:	930e      	str	r3, [sp, #56]	; 0x38
 80176f6:	e7bb      	b.n	8017670 <_dtoa_r+0x1b0>
 80176f8:	2301      	movs	r3, #1
 80176fa:	930a      	str	r3, [sp, #40]	; 0x28
 80176fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176fe:	2b00      	cmp	r3, #0
 8017700:	dd59      	ble.n	80177b6 <_dtoa_r+0x2f6>
 8017702:	9302      	str	r3, [sp, #8]
 8017704:	4699      	mov	r9, r3
 8017706:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017708:	2200      	movs	r2, #0
 801770a:	6072      	str	r2, [r6, #4]
 801770c:	2204      	movs	r2, #4
 801770e:	f102 0014 	add.w	r0, r2, #20
 8017712:	4298      	cmp	r0, r3
 8017714:	6871      	ldr	r1, [r6, #4]
 8017716:	d953      	bls.n	80177c0 <_dtoa_r+0x300>
 8017718:	4620      	mov	r0, r4
 801771a:	f000 fff6 	bl	801870a <_Balloc>
 801771e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017720:	6030      	str	r0, [r6, #0]
 8017722:	f1b9 0f0e 	cmp.w	r9, #14
 8017726:	f8d3 b000 	ldr.w	fp, [r3]
 801772a:	f200 80e6 	bhi.w	80178fa <_dtoa_r+0x43a>
 801772e:	2d00      	cmp	r5, #0
 8017730:	f000 80e3 	beq.w	80178fa <_dtoa_r+0x43a>
 8017734:	ed9d 7b00 	vldr	d7, [sp]
 8017738:	f1ba 0f00 	cmp.w	sl, #0
 801773c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017740:	dd74      	ble.n	801782c <_dtoa_r+0x36c>
 8017742:	4a2a      	ldr	r2, [pc, #168]	; (80177ec <_dtoa_r+0x32c>)
 8017744:	f00a 030f 	and.w	r3, sl, #15
 8017748:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801774c:	ed93 7b00 	vldr	d7, [r3]
 8017750:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017754:	06f0      	lsls	r0, r6, #27
 8017756:	ed8d 7b08 	vstr	d7, [sp, #32]
 801775a:	d565      	bpl.n	8017828 <_dtoa_r+0x368>
 801775c:	4b24      	ldr	r3, [pc, #144]	; (80177f0 <_dtoa_r+0x330>)
 801775e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017762:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017766:	f7e9 f889 	bl	800087c <__aeabi_ddiv>
 801776a:	e9cd 0100 	strd	r0, r1, [sp]
 801776e:	f006 060f 	and.w	r6, r6, #15
 8017772:	2503      	movs	r5, #3
 8017774:	4f1e      	ldr	r7, [pc, #120]	; (80177f0 <_dtoa_r+0x330>)
 8017776:	e04c      	b.n	8017812 <_dtoa_r+0x352>
 8017778:	2301      	movs	r3, #1
 801777a:	930a      	str	r3, [sp, #40]	; 0x28
 801777c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801777e:	4453      	add	r3, sl
 8017780:	f103 0901 	add.w	r9, r3, #1
 8017784:	9302      	str	r3, [sp, #8]
 8017786:	464b      	mov	r3, r9
 8017788:	2b01      	cmp	r3, #1
 801778a:	bfb8      	it	lt
 801778c:	2301      	movlt	r3, #1
 801778e:	e7ba      	b.n	8017706 <_dtoa_r+0x246>
 8017790:	2300      	movs	r3, #0
 8017792:	e7b2      	b.n	80176fa <_dtoa_r+0x23a>
 8017794:	2300      	movs	r3, #0
 8017796:	e7f0      	b.n	801777a <_dtoa_r+0x2ba>
 8017798:	2501      	movs	r5, #1
 801779a:	2300      	movs	r3, #0
 801779c:	9306      	str	r3, [sp, #24]
 801779e:	950a      	str	r5, [sp, #40]	; 0x28
 80177a0:	f04f 33ff 	mov.w	r3, #4294967295
 80177a4:	9302      	str	r3, [sp, #8]
 80177a6:	4699      	mov	r9, r3
 80177a8:	2200      	movs	r2, #0
 80177aa:	2312      	movs	r3, #18
 80177ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80177ae:	e7aa      	b.n	8017706 <_dtoa_r+0x246>
 80177b0:	2301      	movs	r3, #1
 80177b2:	930a      	str	r3, [sp, #40]	; 0x28
 80177b4:	e7f4      	b.n	80177a0 <_dtoa_r+0x2e0>
 80177b6:	2301      	movs	r3, #1
 80177b8:	9302      	str	r3, [sp, #8]
 80177ba:	4699      	mov	r9, r3
 80177bc:	461a      	mov	r2, r3
 80177be:	e7f5      	b.n	80177ac <_dtoa_r+0x2ec>
 80177c0:	3101      	adds	r1, #1
 80177c2:	6071      	str	r1, [r6, #4]
 80177c4:	0052      	lsls	r2, r2, #1
 80177c6:	e7a2      	b.n	801770e <_dtoa_r+0x24e>
 80177c8:	636f4361 	.word	0x636f4361
 80177cc:	3fd287a7 	.word	0x3fd287a7
 80177d0:	8b60c8b3 	.word	0x8b60c8b3
 80177d4:	3fc68a28 	.word	0x3fc68a28
 80177d8:	509f79fb 	.word	0x509f79fb
 80177dc:	3fd34413 	.word	0x3fd34413
 80177e0:	7ff00000 	.word	0x7ff00000
 80177e4:	0801a4ac 	.word	0x0801a4ac
 80177e8:	3ff80000 	.word	0x3ff80000
 80177ec:	0801a3b0 	.word	0x0801a3b0
 80177f0:	0801a388 	.word	0x0801a388
 80177f4:	0801a379 	.word	0x0801a379
 80177f8:	07f1      	lsls	r1, r6, #31
 80177fa:	d508      	bpl.n	801780e <_dtoa_r+0x34e>
 80177fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017804:	f7e8 ff10 	bl	8000628 <__aeabi_dmul>
 8017808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801780c:	3501      	adds	r5, #1
 801780e:	1076      	asrs	r6, r6, #1
 8017810:	3708      	adds	r7, #8
 8017812:	2e00      	cmp	r6, #0
 8017814:	d1f0      	bne.n	80177f8 <_dtoa_r+0x338>
 8017816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801781a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801781e:	f7e9 f82d 	bl	800087c <__aeabi_ddiv>
 8017822:	e9cd 0100 	strd	r0, r1, [sp]
 8017826:	e01a      	b.n	801785e <_dtoa_r+0x39e>
 8017828:	2502      	movs	r5, #2
 801782a:	e7a3      	b.n	8017774 <_dtoa_r+0x2b4>
 801782c:	f000 80a0 	beq.w	8017970 <_dtoa_r+0x4b0>
 8017830:	f1ca 0600 	rsb	r6, sl, #0
 8017834:	4b9f      	ldr	r3, [pc, #636]	; (8017ab4 <_dtoa_r+0x5f4>)
 8017836:	4fa0      	ldr	r7, [pc, #640]	; (8017ab8 <_dtoa_r+0x5f8>)
 8017838:	f006 020f 	and.w	r2, r6, #15
 801783c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017848:	f7e8 feee 	bl	8000628 <__aeabi_dmul>
 801784c:	e9cd 0100 	strd	r0, r1, [sp]
 8017850:	1136      	asrs	r6, r6, #4
 8017852:	2300      	movs	r3, #0
 8017854:	2502      	movs	r5, #2
 8017856:	2e00      	cmp	r6, #0
 8017858:	d17f      	bne.n	801795a <_dtoa_r+0x49a>
 801785a:	2b00      	cmp	r3, #0
 801785c:	d1e1      	bne.n	8017822 <_dtoa_r+0x362>
 801785e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017860:	2b00      	cmp	r3, #0
 8017862:	f000 8087 	beq.w	8017974 <_dtoa_r+0x4b4>
 8017866:	e9dd 6700 	ldrd	r6, r7, [sp]
 801786a:	2200      	movs	r2, #0
 801786c:	4b93      	ldr	r3, [pc, #588]	; (8017abc <_dtoa_r+0x5fc>)
 801786e:	4630      	mov	r0, r6
 8017870:	4639      	mov	r1, r7
 8017872:	f7e9 f94b 	bl	8000b0c <__aeabi_dcmplt>
 8017876:	2800      	cmp	r0, #0
 8017878:	d07c      	beq.n	8017974 <_dtoa_r+0x4b4>
 801787a:	f1b9 0f00 	cmp.w	r9, #0
 801787e:	d079      	beq.n	8017974 <_dtoa_r+0x4b4>
 8017880:	9b02      	ldr	r3, [sp, #8]
 8017882:	2b00      	cmp	r3, #0
 8017884:	dd35      	ble.n	80178f2 <_dtoa_r+0x432>
 8017886:	f10a 33ff 	add.w	r3, sl, #4294967295
 801788a:	9308      	str	r3, [sp, #32]
 801788c:	4639      	mov	r1, r7
 801788e:	2200      	movs	r2, #0
 8017890:	4b8b      	ldr	r3, [pc, #556]	; (8017ac0 <_dtoa_r+0x600>)
 8017892:	4630      	mov	r0, r6
 8017894:	f7e8 fec8 	bl	8000628 <__aeabi_dmul>
 8017898:	e9cd 0100 	strd	r0, r1, [sp]
 801789c:	9f02      	ldr	r7, [sp, #8]
 801789e:	3501      	adds	r5, #1
 80178a0:	4628      	mov	r0, r5
 80178a2:	f7e8 fe57 	bl	8000554 <__aeabi_i2d>
 80178a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80178aa:	f7e8 febd 	bl	8000628 <__aeabi_dmul>
 80178ae:	2200      	movs	r2, #0
 80178b0:	4b84      	ldr	r3, [pc, #528]	; (8017ac4 <_dtoa_r+0x604>)
 80178b2:	f7e8 fd03 	bl	80002bc <__adddf3>
 80178b6:	4605      	mov	r5, r0
 80178b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80178bc:	2f00      	cmp	r7, #0
 80178be:	d15d      	bne.n	801797c <_dtoa_r+0x4bc>
 80178c0:	2200      	movs	r2, #0
 80178c2:	4b81      	ldr	r3, [pc, #516]	; (8017ac8 <_dtoa_r+0x608>)
 80178c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178c8:	f7e8 fcf6 	bl	80002b8 <__aeabi_dsub>
 80178cc:	462a      	mov	r2, r5
 80178ce:	4633      	mov	r3, r6
 80178d0:	e9cd 0100 	strd	r0, r1, [sp]
 80178d4:	f7e9 f938 	bl	8000b48 <__aeabi_dcmpgt>
 80178d8:	2800      	cmp	r0, #0
 80178da:	f040 8288 	bne.w	8017dee <_dtoa_r+0x92e>
 80178de:	462a      	mov	r2, r5
 80178e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80178e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178e8:	f7e9 f910 	bl	8000b0c <__aeabi_dcmplt>
 80178ec:	2800      	cmp	r0, #0
 80178ee:	f040 827c 	bne.w	8017dea <_dtoa_r+0x92a>
 80178f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80178f6:	e9cd 2300 	strd	r2, r3, [sp]
 80178fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	f2c0 8150 	blt.w	8017ba2 <_dtoa_r+0x6e2>
 8017902:	f1ba 0f0e 	cmp.w	sl, #14
 8017906:	f300 814c 	bgt.w	8017ba2 <_dtoa_r+0x6e2>
 801790a:	4b6a      	ldr	r3, [pc, #424]	; (8017ab4 <_dtoa_r+0x5f4>)
 801790c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017910:	ed93 7b00 	vldr	d7, [r3]
 8017914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017916:	2b00      	cmp	r3, #0
 8017918:	ed8d 7b02 	vstr	d7, [sp, #8]
 801791c:	f280 80d8 	bge.w	8017ad0 <_dtoa_r+0x610>
 8017920:	f1b9 0f00 	cmp.w	r9, #0
 8017924:	f300 80d4 	bgt.w	8017ad0 <_dtoa_r+0x610>
 8017928:	f040 825e 	bne.w	8017de8 <_dtoa_r+0x928>
 801792c:	2200      	movs	r2, #0
 801792e:	4b66      	ldr	r3, [pc, #408]	; (8017ac8 <_dtoa_r+0x608>)
 8017930:	ec51 0b17 	vmov	r0, r1, d7
 8017934:	f7e8 fe78 	bl	8000628 <__aeabi_dmul>
 8017938:	e9dd 2300 	ldrd	r2, r3, [sp]
 801793c:	f7e9 f8fa 	bl	8000b34 <__aeabi_dcmpge>
 8017940:	464f      	mov	r7, r9
 8017942:	464e      	mov	r6, r9
 8017944:	2800      	cmp	r0, #0
 8017946:	f040 8234 	bne.w	8017db2 <_dtoa_r+0x8f2>
 801794a:	2331      	movs	r3, #49	; 0x31
 801794c:	f10b 0501 	add.w	r5, fp, #1
 8017950:	f88b 3000 	strb.w	r3, [fp]
 8017954:	f10a 0a01 	add.w	sl, sl, #1
 8017958:	e22f      	b.n	8017dba <_dtoa_r+0x8fa>
 801795a:	07f2      	lsls	r2, r6, #31
 801795c:	d505      	bpl.n	801796a <_dtoa_r+0x4aa>
 801795e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017962:	f7e8 fe61 	bl	8000628 <__aeabi_dmul>
 8017966:	3501      	adds	r5, #1
 8017968:	2301      	movs	r3, #1
 801796a:	1076      	asrs	r6, r6, #1
 801796c:	3708      	adds	r7, #8
 801796e:	e772      	b.n	8017856 <_dtoa_r+0x396>
 8017970:	2502      	movs	r5, #2
 8017972:	e774      	b.n	801785e <_dtoa_r+0x39e>
 8017974:	f8cd a020 	str.w	sl, [sp, #32]
 8017978:	464f      	mov	r7, r9
 801797a:	e791      	b.n	80178a0 <_dtoa_r+0x3e0>
 801797c:	4b4d      	ldr	r3, [pc, #308]	; (8017ab4 <_dtoa_r+0x5f4>)
 801797e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017982:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017988:	2b00      	cmp	r3, #0
 801798a:	d047      	beq.n	8017a1c <_dtoa_r+0x55c>
 801798c:	4602      	mov	r2, r0
 801798e:	460b      	mov	r3, r1
 8017990:	2000      	movs	r0, #0
 8017992:	494e      	ldr	r1, [pc, #312]	; (8017acc <_dtoa_r+0x60c>)
 8017994:	f7e8 ff72 	bl	800087c <__aeabi_ddiv>
 8017998:	462a      	mov	r2, r5
 801799a:	4633      	mov	r3, r6
 801799c:	f7e8 fc8c 	bl	80002b8 <__aeabi_dsub>
 80179a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80179a4:	465d      	mov	r5, fp
 80179a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179aa:	f7e9 f8ed 	bl	8000b88 <__aeabi_d2iz>
 80179ae:	4606      	mov	r6, r0
 80179b0:	f7e8 fdd0 	bl	8000554 <__aeabi_i2d>
 80179b4:	4602      	mov	r2, r0
 80179b6:	460b      	mov	r3, r1
 80179b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179bc:	f7e8 fc7c 	bl	80002b8 <__aeabi_dsub>
 80179c0:	3630      	adds	r6, #48	; 0x30
 80179c2:	f805 6b01 	strb.w	r6, [r5], #1
 80179c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179ca:	e9cd 0100 	strd	r0, r1, [sp]
 80179ce:	f7e9 f89d 	bl	8000b0c <__aeabi_dcmplt>
 80179d2:	2800      	cmp	r0, #0
 80179d4:	d163      	bne.n	8017a9e <_dtoa_r+0x5de>
 80179d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179da:	2000      	movs	r0, #0
 80179dc:	4937      	ldr	r1, [pc, #220]	; (8017abc <_dtoa_r+0x5fc>)
 80179de:	f7e8 fc6b 	bl	80002b8 <__aeabi_dsub>
 80179e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179e6:	f7e9 f891 	bl	8000b0c <__aeabi_dcmplt>
 80179ea:	2800      	cmp	r0, #0
 80179ec:	f040 80b7 	bne.w	8017b5e <_dtoa_r+0x69e>
 80179f0:	eba5 030b 	sub.w	r3, r5, fp
 80179f4:	429f      	cmp	r7, r3
 80179f6:	f77f af7c 	ble.w	80178f2 <_dtoa_r+0x432>
 80179fa:	2200      	movs	r2, #0
 80179fc:	4b30      	ldr	r3, [pc, #192]	; (8017ac0 <_dtoa_r+0x600>)
 80179fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a02:	f7e8 fe11 	bl	8000628 <__aeabi_dmul>
 8017a06:	2200      	movs	r2, #0
 8017a08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a0c:	4b2c      	ldr	r3, [pc, #176]	; (8017ac0 <_dtoa_r+0x600>)
 8017a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a12:	f7e8 fe09 	bl	8000628 <__aeabi_dmul>
 8017a16:	e9cd 0100 	strd	r0, r1, [sp]
 8017a1a:	e7c4      	b.n	80179a6 <_dtoa_r+0x4e6>
 8017a1c:	462a      	mov	r2, r5
 8017a1e:	4633      	mov	r3, r6
 8017a20:	f7e8 fe02 	bl	8000628 <__aeabi_dmul>
 8017a24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a28:	eb0b 0507 	add.w	r5, fp, r7
 8017a2c:	465e      	mov	r6, fp
 8017a2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a32:	f7e9 f8a9 	bl	8000b88 <__aeabi_d2iz>
 8017a36:	4607      	mov	r7, r0
 8017a38:	f7e8 fd8c 	bl	8000554 <__aeabi_i2d>
 8017a3c:	3730      	adds	r7, #48	; 0x30
 8017a3e:	4602      	mov	r2, r0
 8017a40:	460b      	mov	r3, r1
 8017a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a46:	f7e8 fc37 	bl	80002b8 <__aeabi_dsub>
 8017a4a:	f806 7b01 	strb.w	r7, [r6], #1
 8017a4e:	42ae      	cmp	r6, r5
 8017a50:	e9cd 0100 	strd	r0, r1, [sp]
 8017a54:	f04f 0200 	mov.w	r2, #0
 8017a58:	d126      	bne.n	8017aa8 <_dtoa_r+0x5e8>
 8017a5a:	4b1c      	ldr	r3, [pc, #112]	; (8017acc <_dtoa_r+0x60c>)
 8017a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a60:	f7e8 fc2c 	bl	80002bc <__adddf3>
 8017a64:	4602      	mov	r2, r0
 8017a66:	460b      	mov	r3, r1
 8017a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a6c:	f7e9 f86c 	bl	8000b48 <__aeabi_dcmpgt>
 8017a70:	2800      	cmp	r0, #0
 8017a72:	d174      	bne.n	8017b5e <_dtoa_r+0x69e>
 8017a74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a78:	2000      	movs	r0, #0
 8017a7a:	4914      	ldr	r1, [pc, #80]	; (8017acc <_dtoa_r+0x60c>)
 8017a7c:	f7e8 fc1c 	bl	80002b8 <__aeabi_dsub>
 8017a80:	4602      	mov	r2, r0
 8017a82:	460b      	mov	r3, r1
 8017a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a88:	f7e9 f840 	bl	8000b0c <__aeabi_dcmplt>
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	f43f af30 	beq.w	80178f2 <_dtoa_r+0x432>
 8017a92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017a96:	2b30      	cmp	r3, #48	; 0x30
 8017a98:	f105 32ff 	add.w	r2, r5, #4294967295
 8017a9c:	d002      	beq.n	8017aa4 <_dtoa_r+0x5e4>
 8017a9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017aa2:	e04a      	b.n	8017b3a <_dtoa_r+0x67a>
 8017aa4:	4615      	mov	r5, r2
 8017aa6:	e7f4      	b.n	8017a92 <_dtoa_r+0x5d2>
 8017aa8:	4b05      	ldr	r3, [pc, #20]	; (8017ac0 <_dtoa_r+0x600>)
 8017aaa:	f7e8 fdbd 	bl	8000628 <__aeabi_dmul>
 8017aae:	e9cd 0100 	strd	r0, r1, [sp]
 8017ab2:	e7bc      	b.n	8017a2e <_dtoa_r+0x56e>
 8017ab4:	0801a3b0 	.word	0x0801a3b0
 8017ab8:	0801a388 	.word	0x0801a388
 8017abc:	3ff00000 	.word	0x3ff00000
 8017ac0:	40240000 	.word	0x40240000
 8017ac4:	401c0000 	.word	0x401c0000
 8017ac8:	40140000 	.word	0x40140000
 8017acc:	3fe00000 	.word	0x3fe00000
 8017ad0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017ad4:	465d      	mov	r5, fp
 8017ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017ada:	4630      	mov	r0, r6
 8017adc:	4639      	mov	r1, r7
 8017ade:	f7e8 fecd 	bl	800087c <__aeabi_ddiv>
 8017ae2:	f7e9 f851 	bl	8000b88 <__aeabi_d2iz>
 8017ae6:	4680      	mov	r8, r0
 8017ae8:	f7e8 fd34 	bl	8000554 <__aeabi_i2d>
 8017aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017af0:	f7e8 fd9a 	bl	8000628 <__aeabi_dmul>
 8017af4:	4602      	mov	r2, r0
 8017af6:	460b      	mov	r3, r1
 8017af8:	4630      	mov	r0, r6
 8017afa:	4639      	mov	r1, r7
 8017afc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017b00:	f7e8 fbda 	bl	80002b8 <__aeabi_dsub>
 8017b04:	f805 6b01 	strb.w	r6, [r5], #1
 8017b08:	eba5 060b 	sub.w	r6, r5, fp
 8017b0c:	45b1      	cmp	r9, r6
 8017b0e:	4602      	mov	r2, r0
 8017b10:	460b      	mov	r3, r1
 8017b12:	d139      	bne.n	8017b88 <_dtoa_r+0x6c8>
 8017b14:	f7e8 fbd2 	bl	80002bc <__adddf3>
 8017b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b1c:	4606      	mov	r6, r0
 8017b1e:	460f      	mov	r7, r1
 8017b20:	f7e9 f812 	bl	8000b48 <__aeabi_dcmpgt>
 8017b24:	b9c8      	cbnz	r0, 8017b5a <_dtoa_r+0x69a>
 8017b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b2a:	4630      	mov	r0, r6
 8017b2c:	4639      	mov	r1, r7
 8017b2e:	f7e8 ffe3 	bl	8000af8 <__aeabi_dcmpeq>
 8017b32:	b110      	cbz	r0, 8017b3a <_dtoa_r+0x67a>
 8017b34:	f018 0f01 	tst.w	r8, #1
 8017b38:	d10f      	bne.n	8017b5a <_dtoa_r+0x69a>
 8017b3a:	9904      	ldr	r1, [sp, #16]
 8017b3c:	4620      	mov	r0, r4
 8017b3e:	f000 fe18 	bl	8018772 <_Bfree>
 8017b42:	2300      	movs	r3, #0
 8017b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017b46:	702b      	strb	r3, [r5, #0]
 8017b48:	f10a 0301 	add.w	r3, sl, #1
 8017b4c:	6013      	str	r3, [r2, #0]
 8017b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	f000 8241 	beq.w	8017fd8 <_dtoa_r+0xb18>
 8017b56:	601d      	str	r5, [r3, #0]
 8017b58:	e23e      	b.n	8017fd8 <_dtoa_r+0xb18>
 8017b5a:	f8cd a020 	str.w	sl, [sp, #32]
 8017b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017b62:	2a39      	cmp	r2, #57	; 0x39
 8017b64:	f105 33ff 	add.w	r3, r5, #4294967295
 8017b68:	d108      	bne.n	8017b7c <_dtoa_r+0x6bc>
 8017b6a:	459b      	cmp	fp, r3
 8017b6c:	d10a      	bne.n	8017b84 <_dtoa_r+0x6c4>
 8017b6e:	9b08      	ldr	r3, [sp, #32]
 8017b70:	3301      	adds	r3, #1
 8017b72:	9308      	str	r3, [sp, #32]
 8017b74:	2330      	movs	r3, #48	; 0x30
 8017b76:	f88b 3000 	strb.w	r3, [fp]
 8017b7a:	465b      	mov	r3, fp
 8017b7c:	781a      	ldrb	r2, [r3, #0]
 8017b7e:	3201      	adds	r2, #1
 8017b80:	701a      	strb	r2, [r3, #0]
 8017b82:	e78c      	b.n	8017a9e <_dtoa_r+0x5de>
 8017b84:	461d      	mov	r5, r3
 8017b86:	e7ea      	b.n	8017b5e <_dtoa_r+0x69e>
 8017b88:	2200      	movs	r2, #0
 8017b8a:	4b9b      	ldr	r3, [pc, #620]	; (8017df8 <_dtoa_r+0x938>)
 8017b8c:	f7e8 fd4c 	bl	8000628 <__aeabi_dmul>
 8017b90:	2200      	movs	r2, #0
 8017b92:	2300      	movs	r3, #0
 8017b94:	4606      	mov	r6, r0
 8017b96:	460f      	mov	r7, r1
 8017b98:	f7e8 ffae 	bl	8000af8 <__aeabi_dcmpeq>
 8017b9c:	2800      	cmp	r0, #0
 8017b9e:	d09a      	beq.n	8017ad6 <_dtoa_r+0x616>
 8017ba0:	e7cb      	b.n	8017b3a <_dtoa_r+0x67a>
 8017ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ba4:	2a00      	cmp	r2, #0
 8017ba6:	f000 808b 	beq.w	8017cc0 <_dtoa_r+0x800>
 8017baa:	9a06      	ldr	r2, [sp, #24]
 8017bac:	2a01      	cmp	r2, #1
 8017bae:	dc6e      	bgt.n	8017c8e <_dtoa_r+0x7ce>
 8017bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017bb2:	2a00      	cmp	r2, #0
 8017bb4:	d067      	beq.n	8017c86 <_dtoa_r+0x7c6>
 8017bb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017bba:	9f07      	ldr	r7, [sp, #28]
 8017bbc:	9d05      	ldr	r5, [sp, #20]
 8017bbe:	9a05      	ldr	r2, [sp, #20]
 8017bc0:	2101      	movs	r1, #1
 8017bc2:	441a      	add	r2, r3
 8017bc4:	4620      	mov	r0, r4
 8017bc6:	9205      	str	r2, [sp, #20]
 8017bc8:	4498      	add	r8, r3
 8017bca:	f000 feb0 	bl	801892e <__i2b>
 8017bce:	4606      	mov	r6, r0
 8017bd0:	2d00      	cmp	r5, #0
 8017bd2:	dd0c      	ble.n	8017bee <_dtoa_r+0x72e>
 8017bd4:	f1b8 0f00 	cmp.w	r8, #0
 8017bd8:	dd09      	ble.n	8017bee <_dtoa_r+0x72e>
 8017bda:	4545      	cmp	r5, r8
 8017bdc:	9a05      	ldr	r2, [sp, #20]
 8017bde:	462b      	mov	r3, r5
 8017be0:	bfa8      	it	ge
 8017be2:	4643      	movge	r3, r8
 8017be4:	1ad2      	subs	r2, r2, r3
 8017be6:	9205      	str	r2, [sp, #20]
 8017be8:	1aed      	subs	r5, r5, r3
 8017bea:	eba8 0803 	sub.w	r8, r8, r3
 8017bee:	9b07      	ldr	r3, [sp, #28]
 8017bf0:	b1eb      	cbz	r3, 8017c2e <_dtoa_r+0x76e>
 8017bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d067      	beq.n	8017cc8 <_dtoa_r+0x808>
 8017bf8:	b18f      	cbz	r7, 8017c1e <_dtoa_r+0x75e>
 8017bfa:	4631      	mov	r1, r6
 8017bfc:	463a      	mov	r2, r7
 8017bfe:	4620      	mov	r0, r4
 8017c00:	f000 ff34 	bl	8018a6c <__pow5mult>
 8017c04:	9a04      	ldr	r2, [sp, #16]
 8017c06:	4601      	mov	r1, r0
 8017c08:	4606      	mov	r6, r0
 8017c0a:	4620      	mov	r0, r4
 8017c0c:	f000 fe98 	bl	8018940 <__multiply>
 8017c10:	9904      	ldr	r1, [sp, #16]
 8017c12:	9008      	str	r0, [sp, #32]
 8017c14:	4620      	mov	r0, r4
 8017c16:	f000 fdac 	bl	8018772 <_Bfree>
 8017c1a:	9b08      	ldr	r3, [sp, #32]
 8017c1c:	9304      	str	r3, [sp, #16]
 8017c1e:	9b07      	ldr	r3, [sp, #28]
 8017c20:	1bda      	subs	r2, r3, r7
 8017c22:	d004      	beq.n	8017c2e <_dtoa_r+0x76e>
 8017c24:	9904      	ldr	r1, [sp, #16]
 8017c26:	4620      	mov	r0, r4
 8017c28:	f000 ff20 	bl	8018a6c <__pow5mult>
 8017c2c:	9004      	str	r0, [sp, #16]
 8017c2e:	2101      	movs	r1, #1
 8017c30:	4620      	mov	r0, r4
 8017c32:	f000 fe7c 	bl	801892e <__i2b>
 8017c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c38:	4607      	mov	r7, r0
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	f000 81d0 	beq.w	8017fe0 <_dtoa_r+0xb20>
 8017c40:	461a      	mov	r2, r3
 8017c42:	4601      	mov	r1, r0
 8017c44:	4620      	mov	r0, r4
 8017c46:	f000 ff11 	bl	8018a6c <__pow5mult>
 8017c4a:	9b06      	ldr	r3, [sp, #24]
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	4607      	mov	r7, r0
 8017c50:	dc40      	bgt.n	8017cd4 <_dtoa_r+0x814>
 8017c52:	9b00      	ldr	r3, [sp, #0]
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d139      	bne.n	8017ccc <_dtoa_r+0x80c>
 8017c58:	9b01      	ldr	r3, [sp, #4]
 8017c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d136      	bne.n	8017cd0 <_dtoa_r+0x810>
 8017c62:	9b01      	ldr	r3, [sp, #4]
 8017c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c68:	0d1b      	lsrs	r3, r3, #20
 8017c6a:	051b      	lsls	r3, r3, #20
 8017c6c:	b12b      	cbz	r3, 8017c7a <_dtoa_r+0x7ba>
 8017c6e:	9b05      	ldr	r3, [sp, #20]
 8017c70:	3301      	adds	r3, #1
 8017c72:	9305      	str	r3, [sp, #20]
 8017c74:	f108 0801 	add.w	r8, r8, #1
 8017c78:	2301      	movs	r3, #1
 8017c7a:	9307      	str	r3, [sp, #28]
 8017c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d12a      	bne.n	8017cd8 <_dtoa_r+0x818>
 8017c82:	2001      	movs	r0, #1
 8017c84:	e030      	b.n	8017ce8 <_dtoa_r+0x828>
 8017c86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017c88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017c8c:	e795      	b.n	8017bba <_dtoa_r+0x6fa>
 8017c8e:	9b07      	ldr	r3, [sp, #28]
 8017c90:	f109 37ff 	add.w	r7, r9, #4294967295
 8017c94:	42bb      	cmp	r3, r7
 8017c96:	bfbf      	itttt	lt
 8017c98:	9b07      	ldrlt	r3, [sp, #28]
 8017c9a:	9707      	strlt	r7, [sp, #28]
 8017c9c:	1afa      	sublt	r2, r7, r3
 8017c9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017ca0:	bfbb      	ittet	lt
 8017ca2:	189b      	addlt	r3, r3, r2
 8017ca4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017ca6:	1bdf      	subge	r7, r3, r7
 8017ca8:	2700      	movlt	r7, #0
 8017caa:	f1b9 0f00 	cmp.w	r9, #0
 8017cae:	bfb5      	itete	lt
 8017cb0:	9b05      	ldrlt	r3, [sp, #20]
 8017cb2:	9d05      	ldrge	r5, [sp, #20]
 8017cb4:	eba3 0509 	sublt.w	r5, r3, r9
 8017cb8:	464b      	movge	r3, r9
 8017cba:	bfb8      	it	lt
 8017cbc:	2300      	movlt	r3, #0
 8017cbe:	e77e      	b.n	8017bbe <_dtoa_r+0x6fe>
 8017cc0:	9f07      	ldr	r7, [sp, #28]
 8017cc2:	9d05      	ldr	r5, [sp, #20]
 8017cc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017cc6:	e783      	b.n	8017bd0 <_dtoa_r+0x710>
 8017cc8:	9a07      	ldr	r2, [sp, #28]
 8017cca:	e7ab      	b.n	8017c24 <_dtoa_r+0x764>
 8017ccc:	2300      	movs	r3, #0
 8017cce:	e7d4      	b.n	8017c7a <_dtoa_r+0x7ba>
 8017cd0:	9b00      	ldr	r3, [sp, #0]
 8017cd2:	e7d2      	b.n	8017c7a <_dtoa_r+0x7ba>
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	9307      	str	r3, [sp, #28]
 8017cd8:	693b      	ldr	r3, [r7, #16]
 8017cda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017cde:	6918      	ldr	r0, [r3, #16]
 8017ce0:	f000 fdd7 	bl	8018892 <__hi0bits>
 8017ce4:	f1c0 0020 	rsb	r0, r0, #32
 8017ce8:	4440      	add	r0, r8
 8017cea:	f010 001f 	ands.w	r0, r0, #31
 8017cee:	d047      	beq.n	8017d80 <_dtoa_r+0x8c0>
 8017cf0:	f1c0 0320 	rsb	r3, r0, #32
 8017cf4:	2b04      	cmp	r3, #4
 8017cf6:	dd3b      	ble.n	8017d70 <_dtoa_r+0x8b0>
 8017cf8:	9b05      	ldr	r3, [sp, #20]
 8017cfa:	f1c0 001c 	rsb	r0, r0, #28
 8017cfe:	4403      	add	r3, r0
 8017d00:	9305      	str	r3, [sp, #20]
 8017d02:	4405      	add	r5, r0
 8017d04:	4480      	add	r8, r0
 8017d06:	9b05      	ldr	r3, [sp, #20]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	dd05      	ble.n	8017d18 <_dtoa_r+0x858>
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	9904      	ldr	r1, [sp, #16]
 8017d10:	4620      	mov	r0, r4
 8017d12:	f000 fef9 	bl	8018b08 <__lshift>
 8017d16:	9004      	str	r0, [sp, #16]
 8017d18:	f1b8 0f00 	cmp.w	r8, #0
 8017d1c:	dd05      	ble.n	8017d2a <_dtoa_r+0x86a>
 8017d1e:	4639      	mov	r1, r7
 8017d20:	4642      	mov	r2, r8
 8017d22:	4620      	mov	r0, r4
 8017d24:	f000 fef0 	bl	8018b08 <__lshift>
 8017d28:	4607      	mov	r7, r0
 8017d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d2c:	b353      	cbz	r3, 8017d84 <_dtoa_r+0x8c4>
 8017d2e:	4639      	mov	r1, r7
 8017d30:	9804      	ldr	r0, [sp, #16]
 8017d32:	f000 ff3d 	bl	8018bb0 <__mcmp>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	da24      	bge.n	8017d84 <_dtoa_r+0x8c4>
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	220a      	movs	r2, #10
 8017d3e:	9904      	ldr	r1, [sp, #16]
 8017d40:	4620      	mov	r0, r4
 8017d42:	f000 fd2d 	bl	80187a0 <__multadd>
 8017d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d48:	9004      	str	r0, [sp, #16]
 8017d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	f000 814d 	beq.w	8017fee <_dtoa_r+0xb2e>
 8017d54:	2300      	movs	r3, #0
 8017d56:	4631      	mov	r1, r6
 8017d58:	220a      	movs	r2, #10
 8017d5a:	4620      	mov	r0, r4
 8017d5c:	f000 fd20 	bl	80187a0 <__multadd>
 8017d60:	9b02      	ldr	r3, [sp, #8]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	4606      	mov	r6, r0
 8017d66:	dc4f      	bgt.n	8017e08 <_dtoa_r+0x948>
 8017d68:	9b06      	ldr	r3, [sp, #24]
 8017d6a:	2b02      	cmp	r3, #2
 8017d6c:	dd4c      	ble.n	8017e08 <_dtoa_r+0x948>
 8017d6e:	e011      	b.n	8017d94 <_dtoa_r+0x8d4>
 8017d70:	d0c9      	beq.n	8017d06 <_dtoa_r+0x846>
 8017d72:	9a05      	ldr	r2, [sp, #20]
 8017d74:	331c      	adds	r3, #28
 8017d76:	441a      	add	r2, r3
 8017d78:	9205      	str	r2, [sp, #20]
 8017d7a:	441d      	add	r5, r3
 8017d7c:	4498      	add	r8, r3
 8017d7e:	e7c2      	b.n	8017d06 <_dtoa_r+0x846>
 8017d80:	4603      	mov	r3, r0
 8017d82:	e7f6      	b.n	8017d72 <_dtoa_r+0x8b2>
 8017d84:	f1b9 0f00 	cmp.w	r9, #0
 8017d88:	dc38      	bgt.n	8017dfc <_dtoa_r+0x93c>
 8017d8a:	9b06      	ldr	r3, [sp, #24]
 8017d8c:	2b02      	cmp	r3, #2
 8017d8e:	dd35      	ble.n	8017dfc <_dtoa_r+0x93c>
 8017d90:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d94:	9b02      	ldr	r3, [sp, #8]
 8017d96:	b963      	cbnz	r3, 8017db2 <_dtoa_r+0x8f2>
 8017d98:	4639      	mov	r1, r7
 8017d9a:	2205      	movs	r2, #5
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	f000 fcff 	bl	80187a0 <__multadd>
 8017da2:	4601      	mov	r1, r0
 8017da4:	4607      	mov	r7, r0
 8017da6:	9804      	ldr	r0, [sp, #16]
 8017da8:	f000 ff02 	bl	8018bb0 <__mcmp>
 8017dac:	2800      	cmp	r0, #0
 8017dae:	f73f adcc 	bgt.w	801794a <_dtoa_r+0x48a>
 8017db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017db4:	465d      	mov	r5, fp
 8017db6:	ea6f 0a03 	mvn.w	sl, r3
 8017dba:	f04f 0900 	mov.w	r9, #0
 8017dbe:	4639      	mov	r1, r7
 8017dc0:	4620      	mov	r0, r4
 8017dc2:	f000 fcd6 	bl	8018772 <_Bfree>
 8017dc6:	2e00      	cmp	r6, #0
 8017dc8:	f43f aeb7 	beq.w	8017b3a <_dtoa_r+0x67a>
 8017dcc:	f1b9 0f00 	cmp.w	r9, #0
 8017dd0:	d005      	beq.n	8017dde <_dtoa_r+0x91e>
 8017dd2:	45b1      	cmp	r9, r6
 8017dd4:	d003      	beq.n	8017dde <_dtoa_r+0x91e>
 8017dd6:	4649      	mov	r1, r9
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 fcca 	bl	8018772 <_Bfree>
 8017dde:	4631      	mov	r1, r6
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 fcc6 	bl	8018772 <_Bfree>
 8017de6:	e6a8      	b.n	8017b3a <_dtoa_r+0x67a>
 8017de8:	2700      	movs	r7, #0
 8017dea:	463e      	mov	r6, r7
 8017dec:	e7e1      	b.n	8017db2 <_dtoa_r+0x8f2>
 8017dee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017df2:	463e      	mov	r6, r7
 8017df4:	e5a9      	b.n	801794a <_dtoa_r+0x48a>
 8017df6:	bf00      	nop
 8017df8:	40240000 	.word	0x40240000
 8017dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	f000 80fa 	beq.w	8017ffc <_dtoa_r+0xb3c>
 8017e08:	2d00      	cmp	r5, #0
 8017e0a:	dd05      	ble.n	8017e18 <_dtoa_r+0x958>
 8017e0c:	4631      	mov	r1, r6
 8017e0e:	462a      	mov	r2, r5
 8017e10:	4620      	mov	r0, r4
 8017e12:	f000 fe79 	bl	8018b08 <__lshift>
 8017e16:	4606      	mov	r6, r0
 8017e18:	9b07      	ldr	r3, [sp, #28]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d04c      	beq.n	8017eb8 <_dtoa_r+0x9f8>
 8017e1e:	6871      	ldr	r1, [r6, #4]
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fc72 	bl	801870a <_Balloc>
 8017e26:	6932      	ldr	r2, [r6, #16]
 8017e28:	3202      	adds	r2, #2
 8017e2a:	4605      	mov	r5, r0
 8017e2c:	0092      	lsls	r2, r2, #2
 8017e2e:	f106 010c 	add.w	r1, r6, #12
 8017e32:	300c      	adds	r0, #12
 8017e34:	f000 fc5e 	bl	80186f4 <memcpy>
 8017e38:	2201      	movs	r2, #1
 8017e3a:	4629      	mov	r1, r5
 8017e3c:	4620      	mov	r0, r4
 8017e3e:	f000 fe63 	bl	8018b08 <__lshift>
 8017e42:	9b00      	ldr	r3, [sp, #0]
 8017e44:	f8cd b014 	str.w	fp, [sp, #20]
 8017e48:	f003 0301 	and.w	r3, r3, #1
 8017e4c:	46b1      	mov	r9, r6
 8017e4e:	9307      	str	r3, [sp, #28]
 8017e50:	4606      	mov	r6, r0
 8017e52:	4639      	mov	r1, r7
 8017e54:	9804      	ldr	r0, [sp, #16]
 8017e56:	f7ff faa5 	bl	80173a4 <quorem>
 8017e5a:	4649      	mov	r1, r9
 8017e5c:	4605      	mov	r5, r0
 8017e5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017e62:	9804      	ldr	r0, [sp, #16]
 8017e64:	f000 fea4 	bl	8018bb0 <__mcmp>
 8017e68:	4632      	mov	r2, r6
 8017e6a:	9000      	str	r0, [sp, #0]
 8017e6c:	4639      	mov	r1, r7
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f000 feb8 	bl	8018be4 <__mdiff>
 8017e74:	68c3      	ldr	r3, [r0, #12]
 8017e76:	4602      	mov	r2, r0
 8017e78:	bb03      	cbnz	r3, 8017ebc <_dtoa_r+0x9fc>
 8017e7a:	4601      	mov	r1, r0
 8017e7c:	9008      	str	r0, [sp, #32]
 8017e7e:	9804      	ldr	r0, [sp, #16]
 8017e80:	f000 fe96 	bl	8018bb0 <__mcmp>
 8017e84:	9a08      	ldr	r2, [sp, #32]
 8017e86:	4603      	mov	r3, r0
 8017e88:	4611      	mov	r1, r2
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	9308      	str	r3, [sp, #32]
 8017e8e:	f000 fc70 	bl	8018772 <_Bfree>
 8017e92:	9b08      	ldr	r3, [sp, #32]
 8017e94:	b9a3      	cbnz	r3, 8017ec0 <_dtoa_r+0xa00>
 8017e96:	9a06      	ldr	r2, [sp, #24]
 8017e98:	b992      	cbnz	r2, 8017ec0 <_dtoa_r+0xa00>
 8017e9a:	9a07      	ldr	r2, [sp, #28]
 8017e9c:	b982      	cbnz	r2, 8017ec0 <_dtoa_r+0xa00>
 8017e9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ea2:	d029      	beq.n	8017ef8 <_dtoa_r+0xa38>
 8017ea4:	9b00      	ldr	r3, [sp, #0]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	dd01      	ble.n	8017eae <_dtoa_r+0x9ee>
 8017eaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017eae:	9b05      	ldr	r3, [sp, #20]
 8017eb0:	1c5d      	adds	r5, r3, #1
 8017eb2:	f883 8000 	strb.w	r8, [r3]
 8017eb6:	e782      	b.n	8017dbe <_dtoa_r+0x8fe>
 8017eb8:	4630      	mov	r0, r6
 8017eba:	e7c2      	b.n	8017e42 <_dtoa_r+0x982>
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	e7e3      	b.n	8017e88 <_dtoa_r+0x9c8>
 8017ec0:	9a00      	ldr	r2, [sp, #0]
 8017ec2:	2a00      	cmp	r2, #0
 8017ec4:	db04      	blt.n	8017ed0 <_dtoa_r+0xa10>
 8017ec6:	d125      	bne.n	8017f14 <_dtoa_r+0xa54>
 8017ec8:	9a06      	ldr	r2, [sp, #24]
 8017eca:	bb1a      	cbnz	r2, 8017f14 <_dtoa_r+0xa54>
 8017ecc:	9a07      	ldr	r2, [sp, #28]
 8017ece:	bb0a      	cbnz	r2, 8017f14 <_dtoa_r+0xa54>
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	ddec      	ble.n	8017eae <_dtoa_r+0x9ee>
 8017ed4:	2201      	movs	r2, #1
 8017ed6:	9904      	ldr	r1, [sp, #16]
 8017ed8:	4620      	mov	r0, r4
 8017eda:	f000 fe15 	bl	8018b08 <__lshift>
 8017ede:	4639      	mov	r1, r7
 8017ee0:	9004      	str	r0, [sp, #16]
 8017ee2:	f000 fe65 	bl	8018bb0 <__mcmp>
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	dc03      	bgt.n	8017ef2 <_dtoa_r+0xa32>
 8017eea:	d1e0      	bne.n	8017eae <_dtoa_r+0x9ee>
 8017eec:	f018 0f01 	tst.w	r8, #1
 8017ef0:	d0dd      	beq.n	8017eae <_dtoa_r+0x9ee>
 8017ef2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017ef6:	d1d8      	bne.n	8017eaa <_dtoa_r+0x9ea>
 8017ef8:	9b05      	ldr	r3, [sp, #20]
 8017efa:	9a05      	ldr	r2, [sp, #20]
 8017efc:	1c5d      	adds	r5, r3, #1
 8017efe:	2339      	movs	r3, #57	; 0x39
 8017f00:	7013      	strb	r3, [r2, #0]
 8017f02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f06:	2b39      	cmp	r3, #57	; 0x39
 8017f08:	f105 32ff 	add.w	r2, r5, #4294967295
 8017f0c:	d04f      	beq.n	8017fae <_dtoa_r+0xaee>
 8017f0e:	3301      	adds	r3, #1
 8017f10:	7013      	strb	r3, [r2, #0]
 8017f12:	e754      	b.n	8017dbe <_dtoa_r+0x8fe>
 8017f14:	9a05      	ldr	r2, [sp, #20]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	f102 0501 	add.w	r5, r2, #1
 8017f1c:	dd06      	ble.n	8017f2c <_dtoa_r+0xa6c>
 8017f1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f22:	d0e9      	beq.n	8017ef8 <_dtoa_r+0xa38>
 8017f24:	f108 0801 	add.w	r8, r8, #1
 8017f28:	9b05      	ldr	r3, [sp, #20]
 8017f2a:	e7c2      	b.n	8017eb2 <_dtoa_r+0x9f2>
 8017f2c:	9a02      	ldr	r2, [sp, #8]
 8017f2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017f32:	eba5 030b 	sub.w	r3, r5, fp
 8017f36:	4293      	cmp	r3, r2
 8017f38:	d021      	beq.n	8017f7e <_dtoa_r+0xabe>
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	220a      	movs	r2, #10
 8017f3e:	9904      	ldr	r1, [sp, #16]
 8017f40:	4620      	mov	r0, r4
 8017f42:	f000 fc2d 	bl	80187a0 <__multadd>
 8017f46:	45b1      	cmp	r9, r6
 8017f48:	9004      	str	r0, [sp, #16]
 8017f4a:	f04f 0300 	mov.w	r3, #0
 8017f4e:	f04f 020a 	mov.w	r2, #10
 8017f52:	4649      	mov	r1, r9
 8017f54:	4620      	mov	r0, r4
 8017f56:	d105      	bne.n	8017f64 <_dtoa_r+0xaa4>
 8017f58:	f000 fc22 	bl	80187a0 <__multadd>
 8017f5c:	4681      	mov	r9, r0
 8017f5e:	4606      	mov	r6, r0
 8017f60:	9505      	str	r5, [sp, #20]
 8017f62:	e776      	b.n	8017e52 <_dtoa_r+0x992>
 8017f64:	f000 fc1c 	bl	80187a0 <__multadd>
 8017f68:	4631      	mov	r1, r6
 8017f6a:	4681      	mov	r9, r0
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	220a      	movs	r2, #10
 8017f70:	4620      	mov	r0, r4
 8017f72:	f000 fc15 	bl	80187a0 <__multadd>
 8017f76:	4606      	mov	r6, r0
 8017f78:	e7f2      	b.n	8017f60 <_dtoa_r+0xaa0>
 8017f7a:	f04f 0900 	mov.w	r9, #0
 8017f7e:	2201      	movs	r2, #1
 8017f80:	9904      	ldr	r1, [sp, #16]
 8017f82:	4620      	mov	r0, r4
 8017f84:	f000 fdc0 	bl	8018b08 <__lshift>
 8017f88:	4639      	mov	r1, r7
 8017f8a:	9004      	str	r0, [sp, #16]
 8017f8c:	f000 fe10 	bl	8018bb0 <__mcmp>
 8017f90:	2800      	cmp	r0, #0
 8017f92:	dcb6      	bgt.n	8017f02 <_dtoa_r+0xa42>
 8017f94:	d102      	bne.n	8017f9c <_dtoa_r+0xadc>
 8017f96:	f018 0f01 	tst.w	r8, #1
 8017f9a:	d1b2      	bne.n	8017f02 <_dtoa_r+0xa42>
 8017f9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fa0:	2b30      	cmp	r3, #48	; 0x30
 8017fa2:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fa6:	f47f af0a 	bne.w	8017dbe <_dtoa_r+0x8fe>
 8017faa:	4615      	mov	r5, r2
 8017fac:	e7f6      	b.n	8017f9c <_dtoa_r+0xadc>
 8017fae:	4593      	cmp	fp, r2
 8017fb0:	d105      	bne.n	8017fbe <_dtoa_r+0xafe>
 8017fb2:	2331      	movs	r3, #49	; 0x31
 8017fb4:	f10a 0a01 	add.w	sl, sl, #1
 8017fb8:	f88b 3000 	strb.w	r3, [fp]
 8017fbc:	e6ff      	b.n	8017dbe <_dtoa_r+0x8fe>
 8017fbe:	4615      	mov	r5, r2
 8017fc0:	e79f      	b.n	8017f02 <_dtoa_r+0xa42>
 8017fc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8018028 <_dtoa_r+0xb68>
 8017fc6:	e007      	b.n	8017fd8 <_dtoa_r+0xb18>
 8017fc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017fca:	f8df b060 	ldr.w	fp, [pc, #96]	; 801802c <_dtoa_r+0xb6c>
 8017fce:	b11b      	cbz	r3, 8017fd8 <_dtoa_r+0xb18>
 8017fd0:	f10b 0308 	add.w	r3, fp, #8
 8017fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017fd6:	6013      	str	r3, [r2, #0]
 8017fd8:	4658      	mov	r0, fp
 8017fda:	b017      	add	sp, #92	; 0x5c
 8017fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe0:	9b06      	ldr	r3, [sp, #24]
 8017fe2:	2b01      	cmp	r3, #1
 8017fe4:	f77f ae35 	ble.w	8017c52 <_dtoa_r+0x792>
 8017fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fea:	9307      	str	r3, [sp, #28]
 8017fec:	e649      	b.n	8017c82 <_dtoa_r+0x7c2>
 8017fee:	9b02      	ldr	r3, [sp, #8]
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	dc03      	bgt.n	8017ffc <_dtoa_r+0xb3c>
 8017ff4:	9b06      	ldr	r3, [sp, #24]
 8017ff6:	2b02      	cmp	r3, #2
 8017ff8:	f73f aecc 	bgt.w	8017d94 <_dtoa_r+0x8d4>
 8017ffc:	465d      	mov	r5, fp
 8017ffe:	4639      	mov	r1, r7
 8018000:	9804      	ldr	r0, [sp, #16]
 8018002:	f7ff f9cf 	bl	80173a4 <quorem>
 8018006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801800a:	f805 8b01 	strb.w	r8, [r5], #1
 801800e:	9a02      	ldr	r2, [sp, #8]
 8018010:	eba5 030b 	sub.w	r3, r5, fp
 8018014:	429a      	cmp	r2, r3
 8018016:	ddb0      	ble.n	8017f7a <_dtoa_r+0xaba>
 8018018:	2300      	movs	r3, #0
 801801a:	220a      	movs	r2, #10
 801801c:	9904      	ldr	r1, [sp, #16]
 801801e:	4620      	mov	r0, r4
 8018020:	f000 fbbe 	bl	80187a0 <__multadd>
 8018024:	9004      	str	r0, [sp, #16]
 8018026:	e7ea      	b.n	8017ffe <_dtoa_r+0xb3e>
 8018028:	0801a4ab 	.word	0x0801a4ab
 801802c:	0801a370 	.word	0x0801a370

08018030 <rshift>:
 8018030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018032:	6906      	ldr	r6, [r0, #16]
 8018034:	114b      	asrs	r3, r1, #5
 8018036:	429e      	cmp	r6, r3
 8018038:	f100 0414 	add.w	r4, r0, #20
 801803c:	dd30      	ble.n	80180a0 <rshift+0x70>
 801803e:	f011 011f 	ands.w	r1, r1, #31
 8018042:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018046:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801804a:	d108      	bne.n	801805e <rshift+0x2e>
 801804c:	4621      	mov	r1, r4
 801804e:	42b2      	cmp	r2, r6
 8018050:	460b      	mov	r3, r1
 8018052:	d211      	bcs.n	8018078 <rshift+0x48>
 8018054:	f852 3b04 	ldr.w	r3, [r2], #4
 8018058:	f841 3b04 	str.w	r3, [r1], #4
 801805c:	e7f7      	b.n	801804e <rshift+0x1e>
 801805e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018062:	f1c1 0c20 	rsb	ip, r1, #32
 8018066:	40cd      	lsrs	r5, r1
 8018068:	3204      	adds	r2, #4
 801806a:	4623      	mov	r3, r4
 801806c:	42b2      	cmp	r2, r6
 801806e:	4617      	mov	r7, r2
 8018070:	d30c      	bcc.n	801808c <rshift+0x5c>
 8018072:	601d      	str	r5, [r3, #0]
 8018074:	b105      	cbz	r5, 8018078 <rshift+0x48>
 8018076:	3304      	adds	r3, #4
 8018078:	1b1a      	subs	r2, r3, r4
 801807a:	42a3      	cmp	r3, r4
 801807c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018080:	bf08      	it	eq
 8018082:	2300      	moveq	r3, #0
 8018084:	6102      	str	r2, [r0, #16]
 8018086:	bf08      	it	eq
 8018088:	6143      	streq	r3, [r0, #20]
 801808a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801808c:	683f      	ldr	r7, [r7, #0]
 801808e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018092:	433d      	orrs	r5, r7
 8018094:	f843 5b04 	str.w	r5, [r3], #4
 8018098:	f852 5b04 	ldr.w	r5, [r2], #4
 801809c:	40cd      	lsrs	r5, r1
 801809e:	e7e5      	b.n	801806c <rshift+0x3c>
 80180a0:	4623      	mov	r3, r4
 80180a2:	e7e9      	b.n	8018078 <rshift+0x48>

080180a4 <__hexdig_fun>:
 80180a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80180a8:	2b09      	cmp	r3, #9
 80180aa:	d802      	bhi.n	80180b2 <__hexdig_fun+0xe>
 80180ac:	3820      	subs	r0, #32
 80180ae:	b2c0      	uxtb	r0, r0
 80180b0:	4770      	bx	lr
 80180b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80180b6:	2b05      	cmp	r3, #5
 80180b8:	d801      	bhi.n	80180be <__hexdig_fun+0x1a>
 80180ba:	3847      	subs	r0, #71	; 0x47
 80180bc:	e7f7      	b.n	80180ae <__hexdig_fun+0xa>
 80180be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80180c2:	2b05      	cmp	r3, #5
 80180c4:	d801      	bhi.n	80180ca <__hexdig_fun+0x26>
 80180c6:	3827      	subs	r0, #39	; 0x27
 80180c8:	e7f1      	b.n	80180ae <__hexdig_fun+0xa>
 80180ca:	2000      	movs	r0, #0
 80180cc:	4770      	bx	lr

080180ce <__gethex>:
 80180ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180d2:	b08b      	sub	sp, #44	; 0x2c
 80180d4:	468a      	mov	sl, r1
 80180d6:	9002      	str	r0, [sp, #8]
 80180d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80180da:	9306      	str	r3, [sp, #24]
 80180dc:	4690      	mov	r8, r2
 80180de:	f000 fadf 	bl	80186a0 <__localeconv_l>
 80180e2:	6803      	ldr	r3, [r0, #0]
 80180e4:	9303      	str	r3, [sp, #12]
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7e8 f88a 	bl	8000200 <strlen>
 80180ec:	9b03      	ldr	r3, [sp, #12]
 80180ee:	9001      	str	r0, [sp, #4]
 80180f0:	4403      	add	r3, r0
 80180f2:	f04f 0b00 	mov.w	fp, #0
 80180f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80180fa:	9307      	str	r3, [sp, #28]
 80180fc:	f8da 3000 	ldr.w	r3, [sl]
 8018100:	3302      	adds	r3, #2
 8018102:	461f      	mov	r7, r3
 8018104:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018108:	2830      	cmp	r0, #48	; 0x30
 801810a:	d06c      	beq.n	80181e6 <__gethex+0x118>
 801810c:	f7ff ffca 	bl	80180a4 <__hexdig_fun>
 8018110:	4604      	mov	r4, r0
 8018112:	2800      	cmp	r0, #0
 8018114:	d16a      	bne.n	80181ec <__gethex+0x11e>
 8018116:	9a01      	ldr	r2, [sp, #4]
 8018118:	9903      	ldr	r1, [sp, #12]
 801811a:	4638      	mov	r0, r7
 801811c:	f001 fc40 	bl	80199a0 <strncmp>
 8018120:	2800      	cmp	r0, #0
 8018122:	d166      	bne.n	80181f2 <__gethex+0x124>
 8018124:	9b01      	ldr	r3, [sp, #4]
 8018126:	5cf8      	ldrb	r0, [r7, r3]
 8018128:	18fe      	adds	r6, r7, r3
 801812a:	f7ff ffbb 	bl	80180a4 <__hexdig_fun>
 801812e:	2800      	cmp	r0, #0
 8018130:	d062      	beq.n	80181f8 <__gethex+0x12a>
 8018132:	4633      	mov	r3, r6
 8018134:	7818      	ldrb	r0, [r3, #0]
 8018136:	2830      	cmp	r0, #48	; 0x30
 8018138:	461f      	mov	r7, r3
 801813a:	f103 0301 	add.w	r3, r3, #1
 801813e:	d0f9      	beq.n	8018134 <__gethex+0x66>
 8018140:	f7ff ffb0 	bl	80180a4 <__hexdig_fun>
 8018144:	fab0 f580 	clz	r5, r0
 8018148:	096d      	lsrs	r5, r5, #5
 801814a:	4634      	mov	r4, r6
 801814c:	f04f 0b01 	mov.w	fp, #1
 8018150:	463a      	mov	r2, r7
 8018152:	4616      	mov	r6, r2
 8018154:	3201      	adds	r2, #1
 8018156:	7830      	ldrb	r0, [r6, #0]
 8018158:	f7ff ffa4 	bl	80180a4 <__hexdig_fun>
 801815c:	2800      	cmp	r0, #0
 801815e:	d1f8      	bne.n	8018152 <__gethex+0x84>
 8018160:	9a01      	ldr	r2, [sp, #4]
 8018162:	9903      	ldr	r1, [sp, #12]
 8018164:	4630      	mov	r0, r6
 8018166:	f001 fc1b 	bl	80199a0 <strncmp>
 801816a:	b950      	cbnz	r0, 8018182 <__gethex+0xb4>
 801816c:	b954      	cbnz	r4, 8018184 <__gethex+0xb6>
 801816e:	9b01      	ldr	r3, [sp, #4]
 8018170:	18f4      	adds	r4, r6, r3
 8018172:	4622      	mov	r2, r4
 8018174:	4616      	mov	r6, r2
 8018176:	3201      	adds	r2, #1
 8018178:	7830      	ldrb	r0, [r6, #0]
 801817a:	f7ff ff93 	bl	80180a4 <__hexdig_fun>
 801817e:	2800      	cmp	r0, #0
 8018180:	d1f8      	bne.n	8018174 <__gethex+0xa6>
 8018182:	b10c      	cbz	r4, 8018188 <__gethex+0xba>
 8018184:	1ba4      	subs	r4, r4, r6
 8018186:	00a4      	lsls	r4, r4, #2
 8018188:	7833      	ldrb	r3, [r6, #0]
 801818a:	2b50      	cmp	r3, #80	; 0x50
 801818c:	d001      	beq.n	8018192 <__gethex+0xc4>
 801818e:	2b70      	cmp	r3, #112	; 0x70
 8018190:	d140      	bne.n	8018214 <__gethex+0x146>
 8018192:	7873      	ldrb	r3, [r6, #1]
 8018194:	2b2b      	cmp	r3, #43	; 0x2b
 8018196:	d031      	beq.n	80181fc <__gethex+0x12e>
 8018198:	2b2d      	cmp	r3, #45	; 0x2d
 801819a:	d033      	beq.n	8018204 <__gethex+0x136>
 801819c:	1c71      	adds	r1, r6, #1
 801819e:	f04f 0900 	mov.w	r9, #0
 80181a2:	7808      	ldrb	r0, [r1, #0]
 80181a4:	f7ff ff7e 	bl	80180a4 <__hexdig_fun>
 80181a8:	1e43      	subs	r3, r0, #1
 80181aa:	b2db      	uxtb	r3, r3
 80181ac:	2b18      	cmp	r3, #24
 80181ae:	d831      	bhi.n	8018214 <__gethex+0x146>
 80181b0:	f1a0 0210 	sub.w	r2, r0, #16
 80181b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80181b8:	f7ff ff74 	bl	80180a4 <__hexdig_fun>
 80181bc:	1e43      	subs	r3, r0, #1
 80181be:	b2db      	uxtb	r3, r3
 80181c0:	2b18      	cmp	r3, #24
 80181c2:	d922      	bls.n	801820a <__gethex+0x13c>
 80181c4:	f1b9 0f00 	cmp.w	r9, #0
 80181c8:	d000      	beq.n	80181cc <__gethex+0xfe>
 80181ca:	4252      	negs	r2, r2
 80181cc:	4414      	add	r4, r2
 80181ce:	f8ca 1000 	str.w	r1, [sl]
 80181d2:	b30d      	cbz	r5, 8018218 <__gethex+0x14a>
 80181d4:	f1bb 0f00 	cmp.w	fp, #0
 80181d8:	bf0c      	ite	eq
 80181da:	2706      	moveq	r7, #6
 80181dc:	2700      	movne	r7, #0
 80181de:	4638      	mov	r0, r7
 80181e0:	b00b      	add	sp, #44	; 0x2c
 80181e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181e6:	f10b 0b01 	add.w	fp, fp, #1
 80181ea:	e78a      	b.n	8018102 <__gethex+0x34>
 80181ec:	2500      	movs	r5, #0
 80181ee:	462c      	mov	r4, r5
 80181f0:	e7ae      	b.n	8018150 <__gethex+0x82>
 80181f2:	463e      	mov	r6, r7
 80181f4:	2501      	movs	r5, #1
 80181f6:	e7c7      	b.n	8018188 <__gethex+0xba>
 80181f8:	4604      	mov	r4, r0
 80181fa:	e7fb      	b.n	80181f4 <__gethex+0x126>
 80181fc:	f04f 0900 	mov.w	r9, #0
 8018200:	1cb1      	adds	r1, r6, #2
 8018202:	e7ce      	b.n	80181a2 <__gethex+0xd4>
 8018204:	f04f 0901 	mov.w	r9, #1
 8018208:	e7fa      	b.n	8018200 <__gethex+0x132>
 801820a:	230a      	movs	r3, #10
 801820c:	fb03 0202 	mla	r2, r3, r2, r0
 8018210:	3a10      	subs	r2, #16
 8018212:	e7cf      	b.n	80181b4 <__gethex+0xe6>
 8018214:	4631      	mov	r1, r6
 8018216:	e7da      	b.n	80181ce <__gethex+0x100>
 8018218:	1bf3      	subs	r3, r6, r7
 801821a:	3b01      	subs	r3, #1
 801821c:	4629      	mov	r1, r5
 801821e:	2b07      	cmp	r3, #7
 8018220:	dc49      	bgt.n	80182b6 <__gethex+0x1e8>
 8018222:	9802      	ldr	r0, [sp, #8]
 8018224:	f000 fa71 	bl	801870a <_Balloc>
 8018228:	9b01      	ldr	r3, [sp, #4]
 801822a:	f100 0914 	add.w	r9, r0, #20
 801822e:	f04f 0b00 	mov.w	fp, #0
 8018232:	f1c3 0301 	rsb	r3, r3, #1
 8018236:	4605      	mov	r5, r0
 8018238:	f8cd 9010 	str.w	r9, [sp, #16]
 801823c:	46da      	mov	sl, fp
 801823e:	9308      	str	r3, [sp, #32]
 8018240:	42b7      	cmp	r7, r6
 8018242:	d33b      	bcc.n	80182bc <__gethex+0x1ee>
 8018244:	9804      	ldr	r0, [sp, #16]
 8018246:	f840 ab04 	str.w	sl, [r0], #4
 801824a:	eba0 0009 	sub.w	r0, r0, r9
 801824e:	1080      	asrs	r0, r0, #2
 8018250:	6128      	str	r0, [r5, #16]
 8018252:	0147      	lsls	r7, r0, #5
 8018254:	4650      	mov	r0, sl
 8018256:	f000 fb1c 	bl	8018892 <__hi0bits>
 801825a:	f8d8 6000 	ldr.w	r6, [r8]
 801825e:	1a3f      	subs	r7, r7, r0
 8018260:	42b7      	cmp	r7, r6
 8018262:	dd64      	ble.n	801832e <__gethex+0x260>
 8018264:	1bbf      	subs	r7, r7, r6
 8018266:	4639      	mov	r1, r7
 8018268:	4628      	mov	r0, r5
 801826a:	f000 fe2b 	bl	8018ec4 <__any_on>
 801826e:	4682      	mov	sl, r0
 8018270:	b178      	cbz	r0, 8018292 <__gethex+0x1c4>
 8018272:	1e7b      	subs	r3, r7, #1
 8018274:	1159      	asrs	r1, r3, #5
 8018276:	f003 021f 	and.w	r2, r3, #31
 801827a:	f04f 0a01 	mov.w	sl, #1
 801827e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018282:	fa0a f202 	lsl.w	r2, sl, r2
 8018286:	420a      	tst	r2, r1
 8018288:	d003      	beq.n	8018292 <__gethex+0x1c4>
 801828a:	4553      	cmp	r3, sl
 801828c:	dc46      	bgt.n	801831c <__gethex+0x24e>
 801828e:	f04f 0a02 	mov.w	sl, #2
 8018292:	4639      	mov	r1, r7
 8018294:	4628      	mov	r0, r5
 8018296:	f7ff fecb 	bl	8018030 <rshift>
 801829a:	443c      	add	r4, r7
 801829c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80182a0:	42a3      	cmp	r3, r4
 80182a2:	da52      	bge.n	801834a <__gethex+0x27c>
 80182a4:	4629      	mov	r1, r5
 80182a6:	9802      	ldr	r0, [sp, #8]
 80182a8:	f000 fa63 	bl	8018772 <_Bfree>
 80182ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182ae:	2300      	movs	r3, #0
 80182b0:	6013      	str	r3, [r2, #0]
 80182b2:	27a3      	movs	r7, #163	; 0xa3
 80182b4:	e793      	b.n	80181de <__gethex+0x110>
 80182b6:	3101      	adds	r1, #1
 80182b8:	105b      	asrs	r3, r3, #1
 80182ba:	e7b0      	b.n	801821e <__gethex+0x150>
 80182bc:	1e73      	subs	r3, r6, #1
 80182be:	9305      	str	r3, [sp, #20]
 80182c0:	9a07      	ldr	r2, [sp, #28]
 80182c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80182c6:	4293      	cmp	r3, r2
 80182c8:	d018      	beq.n	80182fc <__gethex+0x22e>
 80182ca:	f1bb 0f20 	cmp.w	fp, #32
 80182ce:	d107      	bne.n	80182e0 <__gethex+0x212>
 80182d0:	9b04      	ldr	r3, [sp, #16]
 80182d2:	f8c3 a000 	str.w	sl, [r3]
 80182d6:	3304      	adds	r3, #4
 80182d8:	f04f 0a00 	mov.w	sl, #0
 80182dc:	9304      	str	r3, [sp, #16]
 80182de:	46d3      	mov	fp, sl
 80182e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80182e4:	f7ff fede 	bl	80180a4 <__hexdig_fun>
 80182e8:	f000 000f 	and.w	r0, r0, #15
 80182ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80182f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80182f4:	f10b 0b04 	add.w	fp, fp, #4
 80182f8:	9b05      	ldr	r3, [sp, #20]
 80182fa:	e00d      	b.n	8018318 <__gethex+0x24a>
 80182fc:	9b05      	ldr	r3, [sp, #20]
 80182fe:	9a08      	ldr	r2, [sp, #32]
 8018300:	4413      	add	r3, r2
 8018302:	42bb      	cmp	r3, r7
 8018304:	d3e1      	bcc.n	80182ca <__gethex+0x1fc>
 8018306:	4618      	mov	r0, r3
 8018308:	9a01      	ldr	r2, [sp, #4]
 801830a:	9903      	ldr	r1, [sp, #12]
 801830c:	9309      	str	r3, [sp, #36]	; 0x24
 801830e:	f001 fb47 	bl	80199a0 <strncmp>
 8018312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018314:	2800      	cmp	r0, #0
 8018316:	d1d8      	bne.n	80182ca <__gethex+0x1fc>
 8018318:	461e      	mov	r6, r3
 801831a:	e791      	b.n	8018240 <__gethex+0x172>
 801831c:	1eb9      	subs	r1, r7, #2
 801831e:	4628      	mov	r0, r5
 8018320:	f000 fdd0 	bl	8018ec4 <__any_on>
 8018324:	2800      	cmp	r0, #0
 8018326:	d0b2      	beq.n	801828e <__gethex+0x1c0>
 8018328:	f04f 0a03 	mov.w	sl, #3
 801832c:	e7b1      	b.n	8018292 <__gethex+0x1c4>
 801832e:	da09      	bge.n	8018344 <__gethex+0x276>
 8018330:	1bf7      	subs	r7, r6, r7
 8018332:	4629      	mov	r1, r5
 8018334:	463a      	mov	r2, r7
 8018336:	9802      	ldr	r0, [sp, #8]
 8018338:	f000 fbe6 	bl	8018b08 <__lshift>
 801833c:	1be4      	subs	r4, r4, r7
 801833e:	4605      	mov	r5, r0
 8018340:	f100 0914 	add.w	r9, r0, #20
 8018344:	f04f 0a00 	mov.w	sl, #0
 8018348:	e7a8      	b.n	801829c <__gethex+0x1ce>
 801834a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801834e:	42a0      	cmp	r0, r4
 8018350:	dd6a      	ble.n	8018428 <__gethex+0x35a>
 8018352:	1b04      	subs	r4, r0, r4
 8018354:	42a6      	cmp	r6, r4
 8018356:	dc2e      	bgt.n	80183b6 <__gethex+0x2e8>
 8018358:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801835c:	2b02      	cmp	r3, #2
 801835e:	d022      	beq.n	80183a6 <__gethex+0x2d8>
 8018360:	2b03      	cmp	r3, #3
 8018362:	d024      	beq.n	80183ae <__gethex+0x2e0>
 8018364:	2b01      	cmp	r3, #1
 8018366:	d115      	bne.n	8018394 <__gethex+0x2c6>
 8018368:	42a6      	cmp	r6, r4
 801836a:	d113      	bne.n	8018394 <__gethex+0x2c6>
 801836c:	2e01      	cmp	r6, #1
 801836e:	dc0b      	bgt.n	8018388 <__gethex+0x2ba>
 8018370:	9a06      	ldr	r2, [sp, #24]
 8018372:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018376:	6013      	str	r3, [r2, #0]
 8018378:	2301      	movs	r3, #1
 801837a:	612b      	str	r3, [r5, #16]
 801837c:	f8c9 3000 	str.w	r3, [r9]
 8018380:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018382:	2762      	movs	r7, #98	; 0x62
 8018384:	601d      	str	r5, [r3, #0]
 8018386:	e72a      	b.n	80181de <__gethex+0x110>
 8018388:	1e71      	subs	r1, r6, #1
 801838a:	4628      	mov	r0, r5
 801838c:	f000 fd9a 	bl	8018ec4 <__any_on>
 8018390:	2800      	cmp	r0, #0
 8018392:	d1ed      	bne.n	8018370 <__gethex+0x2a2>
 8018394:	4629      	mov	r1, r5
 8018396:	9802      	ldr	r0, [sp, #8]
 8018398:	f000 f9eb 	bl	8018772 <_Bfree>
 801839c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801839e:	2300      	movs	r3, #0
 80183a0:	6013      	str	r3, [r2, #0]
 80183a2:	2750      	movs	r7, #80	; 0x50
 80183a4:	e71b      	b.n	80181de <__gethex+0x110>
 80183a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d0e1      	beq.n	8018370 <__gethex+0x2a2>
 80183ac:	e7f2      	b.n	8018394 <__gethex+0x2c6>
 80183ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d1dd      	bne.n	8018370 <__gethex+0x2a2>
 80183b4:	e7ee      	b.n	8018394 <__gethex+0x2c6>
 80183b6:	1e67      	subs	r7, r4, #1
 80183b8:	f1ba 0f00 	cmp.w	sl, #0
 80183bc:	d131      	bne.n	8018422 <__gethex+0x354>
 80183be:	b127      	cbz	r7, 80183ca <__gethex+0x2fc>
 80183c0:	4639      	mov	r1, r7
 80183c2:	4628      	mov	r0, r5
 80183c4:	f000 fd7e 	bl	8018ec4 <__any_on>
 80183c8:	4682      	mov	sl, r0
 80183ca:	117a      	asrs	r2, r7, #5
 80183cc:	2301      	movs	r3, #1
 80183ce:	f007 071f 	and.w	r7, r7, #31
 80183d2:	fa03 f707 	lsl.w	r7, r3, r7
 80183d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80183da:	4621      	mov	r1, r4
 80183dc:	421f      	tst	r7, r3
 80183de:	4628      	mov	r0, r5
 80183e0:	bf18      	it	ne
 80183e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80183e6:	1b36      	subs	r6, r6, r4
 80183e8:	f7ff fe22 	bl	8018030 <rshift>
 80183ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80183f0:	2702      	movs	r7, #2
 80183f2:	f1ba 0f00 	cmp.w	sl, #0
 80183f6:	d048      	beq.n	801848a <__gethex+0x3bc>
 80183f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80183fc:	2b02      	cmp	r3, #2
 80183fe:	d015      	beq.n	801842c <__gethex+0x35e>
 8018400:	2b03      	cmp	r3, #3
 8018402:	d017      	beq.n	8018434 <__gethex+0x366>
 8018404:	2b01      	cmp	r3, #1
 8018406:	d109      	bne.n	801841c <__gethex+0x34e>
 8018408:	f01a 0f02 	tst.w	sl, #2
 801840c:	d006      	beq.n	801841c <__gethex+0x34e>
 801840e:	f8d9 3000 	ldr.w	r3, [r9]
 8018412:	ea4a 0a03 	orr.w	sl, sl, r3
 8018416:	f01a 0f01 	tst.w	sl, #1
 801841a:	d10e      	bne.n	801843a <__gethex+0x36c>
 801841c:	f047 0710 	orr.w	r7, r7, #16
 8018420:	e033      	b.n	801848a <__gethex+0x3bc>
 8018422:	f04f 0a01 	mov.w	sl, #1
 8018426:	e7d0      	b.n	80183ca <__gethex+0x2fc>
 8018428:	2701      	movs	r7, #1
 801842a:	e7e2      	b.n	80183f2 <__gethex+0x324>
 801842c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801842e:	f1c3 0301 	rsb	r3, r3, #1
 8018432:	9315      	str	r3, [sp, #84]	; 0x54
 8018434:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018436:	2b00      	cmp	r3, #0
 8018438:	d0f0      	beq.n	801841c <__gethex+0x34e>
 801843a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801843e:	f105 0314 	add.w	r3, r5, #20
 8018442:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018446:	eb03 010a 	add.w	r1, r3, sl
 801844a:	f04f 0c00 	mov.w	ip, #0
 801844e:	4618      	mov	r0, r3
 8018450:	f853 2b04 	ldr.w	r2, [r3], #4
 8018454:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018458:	d01c      	beq.n	8018494 <__gethex+0x3c6>
 801845a:	3201      	adds	r2, #1
 801845c:	6002      	str	r2, [r0, #0]
 801845e:	2f02      	cmp	r7, #2
 8018460:	f105 0314 	add.w	r3, r5, #20
 8018464:	d138      	bne.n	80184d8 <__gethex+0x40a>
 8018466:	f8d8 2000 	ldr.w	r2, [r8]
 801846a:	3a01      	subs	r2, #1
 801846c:	42b2      	cmp	r2, r6
 801846e:	d10a      	bne.n	8018486 <__gethex+0x3b8>
 8018470:	1171      	asrs	r1, r6, #5
 8018472:	2201      	movs	r2, #1
 8018474:	f006 061f 	and.w	r6, r6, #31
 8018478:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801847c:	fa02 f606 	lsl.w	r6, r2, r6
 8018480:	421e      	tst	r6, r3
 8018482:	bf18      	it	ne
 8018484:	4617      	movne	r7, r2
 8018486:	f047 0720 	orr.w	r7, r7, #32
 801848a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801848c:	601d      	str	r5, [r3, #0]
 801848e:	9b06      	ldr	r3, [sp, #24]
 8018490:	601c      	str	r4, [r3, #0]
 8018492:	e6a4      	b.n	80181de <__gethex+0x110>
 8018494:	4299      	cmp	r1, r3
 8018496:	f843 cc04 	str.w	ip, [r3, #-4]
 801849a:	d8d8      	bhi.n	801844e <__gethex+0x380>
 801849c:	68ab      	ldr	r3, [r5, #8]
 801849e:	4599      	cmp	r9, r3
 80184a0:	db12      	blt.n	80184c8 <__gethex+0x3fa>
 80184a2:	6869      	ldr	r1, [r5, #4]
 80184a4:	9802      	ldr	r0, [sp, #8]
 80184a6:	3101      	adds	r1, #1
 80184a8:	f000 f92f 	bl	801870a <_Balloc>
 80184ac:	692a      	ldr	r2, [r5, #16]
 80184ae:	3202      	adds	r2, #2
 80184b0:	f105 010c 	add.w	r1, r5, #12
 80184b4:	4683      	mov	fp, r0
 80184b6:	0092      	lsls	r2, r2, #2
 80184b8:	300c      	adds	r0, #12
 80184ba:	f000 f91b 	bl	80186f4 <memcpy>
 80184be:	4629      	mov	r1, r5
 80184c0:	9802      	ldr	r0, [sp, #8]
 80184c2:	f000 f956 	bl	8018772 <_Bfree>
 80184c6:	465d      	mov	r5, fp
 80184c8:	692b      	ldr	r3, [r5, #16]
 80184ca:	1c5a      	adds	r2, r3, #1
 80184cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80184d0:	612a      	str	r2, [r5, #16]
 80184d2:	2201      	movs	r2, #1
 80184d4:	615a      	str	r2, [r3, #20]
 80184d6:	e7c2      	b.n	801845e <__gethex+0x390>
 80184d8:	692a      	ldr	r2, [r5, #16]
 80184da:	454a      	cmp	r2, r9
 80184dc:	dd0b      	ble.n	80184f6 <__gethex+0x428>
 80184de:	2101      	movs	r1, #1
 80184e0:	4628      	mov	r0, r5
 80184e2:	f7ff fda5 	bl	8018030 <rshift>
 80184e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184ea:	3401      	adds	r4, #1
 80184ec:	42a3      	cmp	r3, r4
 80184ee:	f6ff aed9 	blt.w	80182a4 <__gethex+0x1d6>
 80184f2:	2701      	movs	r7, #1
 80184f4:	e7c7      	b.n	8018486 <__gethex+0x3b8>
 80184f6:	f016 061f 	ands.w	r6, r6, #31
 80184fa:	d0fa      	beq.n	80184f2 <__gethex+0x424>
 80184fc:	449a      	add	sl, r3
 80184fe:	f1c6 0620 	rsb	r6, r6, #32
 8018502:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8018506:	f000 f9c4 	bl	8018892 <__hi0bits>
 801850a:	42b0      	cmp	r0, r6
 801850c:	dbe7      	blt.n	80184de <__gethex+0x410>
 801850e:	e7f0      	b.n	80184f2 <__gethex+0x424>

08018510 <L_shift>:
 8018510:	f1c2 0208 	rsb	r2, r2, #8
 8018514:	0092      	lsls	r2, r2, #2
 8018516:	b570      	push	{r4, r5, r6, lr}
 8018518:	f1c2 0620 	rsb	r6, r2, #32
 801851c:	6843      	ldr	r3, [r0, #4]
 801851e:	6804      	ldr	r4, [r0, #0]
 8018520:	fa03 f506 	lsl.w	r5, r3, r6
 8018524:	432c      	orrs	r4, r5
 8018526:	40d3      	lsrs	r3, r2
 8018528:	6004      	str	r4, [r0, #0]
 801852a:	f840 3f04 	str.w	r3, [r0, #4]!
 801852e:	4288      	cmp	r0, r1
 8018530:	d3f4      	bcc.n	801851c <L_shift+0xc>
 8018532:	bd70      	pop	{r4, r5, r6, pc}

08018534 <__match>:
 8018534:	b530      	push	{r4, r5, lr}
 8018536:	6803      	ldr	r3, [r0, #0]
 8018538:	3301      	adds	r3, #1
 801853a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801853e:	b914      	cbnz	r4, 8018546 <__match+0x12>
 8018540:	6003      	str	r3, [r0, #0]
 8018542:	2001      	movs	r0, #1
 8018544:	bd30      	pop	{r4, r5, pc}
 8018546:	f813 2b01 	ldrb.w	r2, [r3], #1
 801854a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801854e:	2d19      	cmp	r5, #25
 8018550:	bf98      	it	ls
 8018552:	3220      	addls	r2, #32
 8018554:	42a2      	cmp	r2, r4
 8018556:	d0f0      	beq.n	801853a <__match+0x6>
 8018558:	2000      	movs	r0, #0
 801855a:	e7f3      	b.n	8018544 <__match+0x10>

0801855c <__hexnan>:
 801855c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018560:	680b      	ldr	r3, [r1, #0]
 8018562:	6801      	ldr	r1, [r0, #0]
 8018564:	115f      	asrs	r7, r3, #5
 8018566:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801856a:	f013 031f 	ands.w	r3, r3, #31
 801856e:	b087      	sub	sp, #28
 8018570:	bf18      	it	ne
 8018572:	3704      	addne	r7, #4
 8018574:	2500      	movs	r5, #0
 8018576:	1f3e      	subs	r6, r7, #4
 8018578:	4682      	mov	sl, r0
 801857a:	4690      	mov	r8, r2
 801857c:	9301      	str	r3, [sp, #4]
 801857e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018582:	46b1      	mov	r9, r6
 8018584:	4634      	mov	r4, r6
 8018586:	9502      	str	r5, [sp, #8]
 8018588:	46ab      	mov	fp, r5
 801858a:	784a      	ldrb	r2, [r1, #1]
 801858c:	1c4b      	adds	r3, r1, #1
 801858e:	9303      	str	r3, [sp, #12]
 8018590:	b342      	cbz	r2, 80185e4 <__hexnan+0x88>
 8018592:	4610      	mov	r0, r2
 8018594:	9105      	str	r1, [sp, #20]
 8018596:	9204      	str	r2, [sp, #16]
 8018598:	f7ff fd84 	bl	80180a4 <__hexdig_fun>
 801859c:	2800      	cmp	r0, #0
 801859e:	d143      	bne.n	8018628 <__hexnan+0xcc>
 80185a0:	9a04      	ldr	r2, [sp, #16]
 80185a2:	9905      	ldr	r1, [sp, #20]
 80185a4:	2a20      	cmp	r2, #32
 80185a6:	d818      	bhi.n	80185da <__hexnan+0x7e>
 80185a8:	9b02      	ldr	r3, [sp, #8]
 80185aa:	459b      	cmp	fp, r3
 80185ac:	dd13      	ble.n	80185d6 <__hexnan+0x7a>
 80185ae:	454c      	cmp	r4, r9
 80185b0:	d206      	bcs.n	80185c0 <__hexnan+0x64>
 80185b2:	2d07      	cmp	r5, #7
 80185b4:	dc04      	bgt.n	80185c0 <__hexnan+0x64>
 80185b6:	462a      	mov	r2, r5
 80185b8:	4649      	mov	r1, r9
 80185ba:	4620      	mov	r0, r4
 80185bc:	f7ff ffa8 	bl	8018510 <L_shift>
 80185c0:	4544      	cmp	r4, r8
 80185c2:	d944      	bls.n	801864e <__hexnan+0xf2>
 80185c4:	2300      	movs	r3, #0
 80185c6:	f1a4 0904 	sub.w	r9, r4, #4
 80185ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80185ce:	f8cd b008 	str.w	fp, [sp, #8]
 80185d2:	464c      	mov	r4, r9
 80185d4:	461d      	mov	r5, r3
 80185d6:	9903      	ldr	r1, [sp, #12]
 80185d8:	e7d7      	b.n	801858a <__hexnan+0x2e>
 80185da:	2a29      	cmp	r2, #41	; 0x29
 80185dc:	d14a      	bne.n	8018674 <__hexnan+0x118>
 80185de:	3102      	adds	r1, #2
 80185e0:	f8ca 1000 	str.w	r1, [sl]
 80185e4:	f1bb 0f00 	cmp.w	fp, #0
 80185e8:	d044      	beq.n	8018674 <__hexnan+0x118>
 80185ea:	454c      	cmp	r4, r9
 80185ec:	d206      	bcs.n	80185fc <__hexnan+0xa0>
 80185ee:	2d07      	cmp	r5, #7
 80185f0:	dc04      	bgt.n	80185fc <__hexnan+0xa0>
 80185f2:	462a      	mov	r2, r5
 80185f4:	4649      	mov	r1, r9
 80185f6:	4620      	mov	r0, r4
 80185f8:	f7ff ff8a 	bl	8018510 <L_shift>
 80185fc:	4544      	cmp	r4, r8
 80185fe:	d928      	bls.n	8018652 <__hexnan+0xf6>
 8018600:	4643      	mov	r3, r8
 8018602:	f854 2b04 	ldr.w	r2, [r4], #4
 8018606:	f843 2b04 	str.w	r2, [r3], #4
 801860a:	42a6      	cmp	r6, r4
 801860c:	d2f9      	bcs.n	8018602 <__hexnan+0xa6>
 801860e:	2200      	movs	r2, #0
 8018610:	f843 2b04 	str.w	r2, [r3], #4
 8018614:	429e      	cmp	r6, r3
 8018616:	d2fb      	bcs.n	8018610 <__hexnan+0xb4>
 8018618:	6833      	ldr	r3, [r6, #0]
 801861a:	b91b      	cbnz	r3, 8018624 <__hexnan+0xc8>
 801861c:	4546      	cmp	r6, r8
 801861e:	d127      	bne.n	8018670 <__hexnan+0x114>
 8018620:	2301      	movs	r3, #1
 8018622:	6033      	str	r3, [r6, #0]
 8018624:	2005      	movs	r0, #5
 8018626:	e026      	b.n	8018676 <__hexnan+0x11a>
 8018628:	3501      	adds	r5, #1
 801862a:	2d08      	cmp	r5, #8
 801862c:	f10b 0b01 	add.w	fp, fp, #1
 8018630:	dd06      	ble.n	8018640 <__hexnan+0xe4>
 8018632:	4544      	cmp	r4, r8
 8018634:	d9cf      	bls.n	80185d6 <__hexnan+0x7a>
 8018636:	2300      	movs	r3, #0
 8018638:	f844 3c04 	str.w	r3, [r4, #-4]
 801863c:	2501      	movs	r5, #1
 801863e:	3c04      	subs	r4, #4
 8018640:	6822      	ldr	r2, [r4, #0]
 8018642:	f000 000f 	and.w	r0, r0, #15
 8018646:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801864a:	6020      	str	r0, [r4, #0]
 801864c:	e7c3      	b.n	80185d6 <__hexnan+0x7a>
 801864e:	2508      	movs	r5, #8
 8018650:	e7c1      	b.n	80185d6 <__hexnan+0x7a>
 8018652:	9b01      	ldr	r3, [sp, #4]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d0df      	beq.n	8018618 <__hexnan+0xbc>
 8018658:	f04f 32ff 	mov.w	r2, #4294967295
 801865c:	f1c3 0320 	rsb	r3, r3, #32
 8018660:	fa22 f303 	lsr.w	r3, r2, r3
 8018664:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018668:	401a      	ands	r2, r3
 801866a:	f847 2c04 	str.w	r2, [r7, #-4]
 801866e:	e7d3      	b.n	8018618 <__hexnan+0xbc>
 8018670:	3e04      	subs	r6, #4
 8018672:	e7d1      	b.n	8018618 <__hexnan+0xbc>
 8018674:	2004      	movs	r0, #4
 8018676:	b007      	add	sp, #28
 8018678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801867c <__locale_ctype_ptr_l>:
 801867c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018680:	4770      	bx	lr
	...

08018684 <__locale_ctype_ptr>:
 8018684:	4b04      	ldr	r3, [pc, #16]	; (8018698 <__locale_ctype_ptr+0x14>)
 8018686:	4a05      	ldr	r2, [pc, #20]	; (801869c <__locale_ctype_ptr+0x18>)
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	6a1b      	ldr	r3, [r3, #32]
 801868c:	2b00      	cmp	r3, #0
 801868e:	bf08      	it	eq
 8018690:	4613      	moveq	r3, r2
 8018692:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018696:	4770      	bx	lr
 8018698:	2000000c 	.word	0x2000000c
 801869c:	20000070 	.word	0x20000070

080186a0 <__localeconv_l>:
 80186a0:	30f0      	adds	r0, #240	; 0xf0
 80186a2:	4770      	bx	lr

080186a4 <_localeconv_r>:
 80186a4:	4b04      	ldr	r3, [pc, #16]	; (80186b8 <_localeconv_r+0x14>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	6a18      	ldr	r0, [r3, #32]
 80186aa:	4b04      	ldr	r3, [pc, #16]	; (80186bc <_localeconv_r+0x18>)
 80186ac:	2800      	cmp	r0, #0
 80186ae:	bf08      	it	eq
 80186b0:	4618      	moveq	r0, r3
 80186b2:	30f0      	adds	r0, #240	; 0xf0
 80186b4:	4770      	bx	lr
 80186b6:	bf00      	nop
 80186b8:	2000000c 	.word	0x2000000c
 80186bc:	20000070 	.word	0x20000070

080186c0 <malloc>:
 80186c0:	4b02      	ldr	r3, [pc, #8]	; (80186cc <malloc+0xc>)
 80186c2:	4601      	mov	r1, r0
 80186c4:	6818      	ldr	r0, [r3, #0]
 80186c6:	f000 bc7b 	b.w	8018fc0 <_malloc_r>
 80186ca:	bf00      	nop
 80186cc:	2000000c 	.word	0x2000000c

080186d0 <__ascii_mbtowc>:
 80186d0:	b082      	sub	sp, #8
 80186d2:	b901      	cbnz	r1, 80186d6 <__ascii_mbtowc+0x6>
 80186d4:	a901      	add	r1, sp, #4
 80186d6:	b142      	cbz	r2, 80186ea <__ascii_mbtowc+0x1a>
 80186d8:	b14b      	cbz	r3, 80186ee <__ascii_mbtowc+0x1e>
 80186da:	7813      	ldrb	r3, [r2, #0]
 80186dc:	600b      	str	r3, [r1, #0]
 80186de:	7812      	ldrb	r2, [r2, #0]
 80186e0:	1c10      	adds	r0, r2, #0
 80186e2:	bf18      	it	ne
 80186e4:	2001      	movne	r0, #1
 80186e6:	b002      	add	sp, #8
 80186e8:	4770      	bx	lr
 80186ea:	4610      	mov	r0, r2
 80186ec:	e7fb      	b.n	80186e6 <__ascii_mbtowc+0x16>
 80186ee:	f06f 0001 	mvn.w	r0, #1
 80186f2:	e7f8      	b.n	80186e6 <__ascii_mbtowc+0x16>

080186f4 <memcpy>:
 80186f4:	b510      	push	{r4, lr}
 80186f6:	1e43      	subs	r3, r0, #1
 80186f8:	440a      	add	r2, r1
 80186fa:	4291      	cmp	r1, r2
 80186fc:	d100      	bne.n	8018700 <memcpy+0xc>
 80186fe:	bd10      	pop	{r4, pc}
 8018700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018708:	e7f7      	b.n	80186fa <memcpy+0x6>

0801870a <_Balloc>:
 801870a:	b570      	push	{r4, r5, r6, lr}
 801870c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801870e:	4604      	mov	r4, r0
 8018710:	460e      	mov	r6, r1
 8018712:	b93d      	cbnz	r5, 8018724 <_Balloc+0x1a>
 8018714:	2010      	movs	r0, #16
 8018716:	f7ff ffd3 	bl	80186c0 <malloc>
 801871a:	6260      	str	r0, [r4, #36]	; 0x24
 801871c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018720:	6005      	str	r5, [r0, #0]
 8018722:	60c5      	str	r5, [r0, #12]
 8018724:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018726:	68eb      	ldr	r3, [r5, #12]
 8018728:	b183      	cbz	r3, 801874c <_Balloc+0x42>
 801872a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801872c:	68db      	ldr	r3, [r3, #12]
 801872e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018732:	b9b8      	cbnz	r0, 8018764 <_Balloc+0x5a>
 8018734:	2101      	movs	r1, #1
 8018736:	fa01 f506 	lsl.w	r5, r1, r6
 801873a:	1d6a      	adds	r2, r5, #5
 801873c:	0092      	lsls	r2, r2, #2
 801873e:	4620      	mov	r0, r4
 8018740:	f000 fbe1 	bl	8018f06 <_calloc_r>
 8018744:	b160      	cbz	r0, 8018760 <_Balloc+0x56>
 8018746:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801874a:	e00e      	b.n	801876a <_Balloc+0x60>
 801874c:	2221      	movs	r2, #33	; 0x21
 801874e:	2104      	movs	r1, #4
 8018750:	4620      	mov	r0, r4
 8018752:	f000 fbd8 	bl	8018f06 <_calloc_r>
 8018756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018758:	60e8      	str	r0, [r5, #12]
 801875a:	68db      	ldr	r3, [r3, #12]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d1e4      	bne.n	801872a <_Balloc+0x20>
 8018760:	2000      	movs	r0, #0
 8018762:	bd70      	pop	{r4, r5, r6, pc}
 8018764:	6802      	ldr	r2, [r0, #0]
 8018766:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801876a:	2300      	movs	r3, #0
 801876c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018770:	e7f7      	b.n	8018762 <_Balloc+0x58>

08018772 <_Bfree>:
 8018772:	b570      	push	{r4, r5, r6, lr}
 8018774:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018776:	4606      	mov	r6, r0
 8018778:	460d      	mov	r5, r1
 801877a:	b93c      	cbnz	r4, 801878c <_Bfree+0x1a>
 801877c:	2010      	movs	r0, #16
 801877e:	f7ff ff9f 	bl	80186c0 <malloc>
 8018782:	6270      	str	r0, [r6, #36]	; 0x24
 8018784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018788:	6004      	str	r4, [r0, #0]
 801878a:	60c4      	str	r4, [r0, #12]
 801878c:	b13d      	cbz	r5, 801879e <_Bfree+0x2c>
 801878e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018790:	686a      	ldr	r2, [r5, #4]
 8018792:	68db      	ldr	r3, [r3, #12]
 8018794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018798:	6029      	str	r1, [r5, #0]
 801879a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801879e:	bd70      	pop	{r4, r5, r6, pc}

080187a0 <__multadd>:
 80187a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187a4:	690d      	ldr	r5, [r1, #16]
 80187a6:	461f      	mov	r7, r3
 80187a8:	4606      	mov	r6, r0
 80187aa:	460c      	mov	r4, r1
 80187ac:	f101 0c14 	add.w	ip, r1, #20
 80187b0:	2300      	movs	r3, #0
 80187b2:	f8dc 0000 	ldr.w	r0, [ip]
 80187b6:	b281      	uxth	r1, r0
 80187b8:	fb02 7101 	mla	r1, r2, r1, r7
 80187bc:	0c0f      	lsrs	r7, r1, #16
 80187be:	0c00      	lsrs	r0, r0, #16
 80187c0:	fb02 7000 	mla	r0, r2, r0, r7
 80187c4:	b289      	uxth	r1, r1
 80187c6:	3301      	adds	r3, #1
 80187c8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80187cc:	429d      	cmp	r5, r3
 80187ce:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80187d2:	f84c 1b04 	str.w	r1, [ip], #4
 80187d6:	dcec      	bgt.n	80187b2 <__multadd+0x12>
 80187d8:	b1d7      	cbz	r7, 8018810 <__multadd+0x70>
 80187da:	68a3      	ldr	r3, [r4, #8]
 80187dc:	42ab      	cmp	r3, r5
 80187de:	dc12      	bgt.n	8018806 <__multadd+0x66>
 80187e0:	6861      	ldr	r1, [r4, #4]
 80187e2:	4630      	mov	r0, r6
 80187e4:	3101      	adds	r1, #1
 80187e6:	f7ff ff90 	bl	801870a <_Balloc>
 80187ea:	6922      	ldr	r2, [r4, #16]
 80187ec:	3202      	adds	r2, #2
 80187ee:	f104 010c 	add.w	r1, r4, #12
 80187f2:	4680      	mov	r8, r0
 80187f4:	0092      	lsls	r2, r2, #2
 80187f6:	300c      	adds	r0, #12
 80187f8:	f7ff ff7c 	bl	80186f4 <memcpy>
 80187fc:	4621      	mov	r1, r4
 80187fe:	4630      	mov	r0, r6
 8018800:	f7ff ffb7 	bl	8018772 <_Bfree>
 8018804:	4644      	mov	r4, r8
 8018806:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801880a:	3501      	adds	r5, #1
 801880c:	615f      	str	r7, [r3, #20]
 801880e:	6125      	str	r5, [r4, #16]
 8018810:	4620      	mov	r0, r4
 8018812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018816 <__s2b>:
 8018816:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801881a:	460c      	mov	r4, r1
 801881c:	4615      	mov	r5, r2
 801881e:	461f      	mov	r7, r3
 8018820:	2209      	movs	r2, #9
 8018822:	3308      	adds	r3, #8
 8018824:	4606      	mov	r6, r0
 8018826:	fb93 f3f2 	sdiv	r3, r3, r2
 801882a:	2100      	movs	r1, #0
 801882c:	2201      	movs	r2, #1
 801882e:	429a      	cmp	r2, r3
 8018830:	db20      	blt.n	8018874 <__s2b+0x5e>
 8018832:	4630      	mov	r0, r6
 8018834:	f7ff ff69 	bl	801870a <_Balloc>
 8018838:	9b08      	ldr	r3, [sp, #32]
 801883a:	6143      	str	r3, [r0, #20]
 801883c:	2d09      	cmp	r5, #9
 801883e:	f04f 0301 	mov.w	r3, #1
 8018842:	6103      	str	r3, [r0, #16]
 8018844:	dd19      	ble.n	801887a <__s2b+0x64>
 8018846:	f104 0809 	add.w	r8, r4, #9
 801884a:	46c1      	mov	r9, r8
 801884c:	442c      	add	r4, r5
 801884e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018852:	4601      	mov	r1, r0
 8018854:	3b30      	subs	r3, #48	; 0x30
 8018856:	220a      	movs	r2, #10
 8018858:	4630      	mov	r0, r6
 801885a:	f7ff ffa1 	bl	80187a0 <__multadd>
 801885e:	45a1      	cmp	r9, r4
 8018860:	d1f5      	bne.n	801884e <__s2b+0x38>
 8018862:	eb08 0405 	add.w	r4, r8, r5
 8018866:	3c08      	subs	r4, #8
 8018868:	1b2d      	subs	r5, r5, r4
 801886a:	1963      	adds	r3, r4, r5
 801886c:	42bb      	cmp	r3, r7
 801886e:	db07      	blt.n	8018880 <__s2b+0x6a>
 8018870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018874:	0052      	lsls	r2, r2, #1
 8018876:	3101      	adds	r1, #1
 8018878:	e7d9      	b.n	801882e <__s2b+0x18>
 801887a:	340a      	adds	r4, #10
 801887c:	2509      	movs	r5, #9
 801887e:	e7f3      	b.n	8018868 <__s2b+0x52>
 8018880:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018884:	4601      	mov	r1, r0
 8018886:	3b30      	subs	r3, #48	; 0x30
 8018888:	220a      	movs	r2, #10
 801888a:	4630      	mov	r0, r6
 801888c:	f7ff ff88 	bl	80187a0 <__multadd>
 8018890:	e7eb      	b.n	801886a <__s2b+0x54>

08018892 <__hi0bits>:
 8018892:	0c02      	lsrs	r2, r0, #16
 8018894:	0412      	lsls	r2, r2, #16
 8018896:	4603      	mov	r3, r0
 8018898:	b9b2      	cbnz	r2, 80188c8 <__hi0bits+0x36>
 801889a:	0403      	lsls	r3, r0, #16
 801889c:	2010      	movs	r0, #16
 801889e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80188a2:	bf04      	itt	eq
 80188a4:	021b      	lsleq	r3, r3, #8
 80188a6:	3008      	addeq	r0, #8
 80188a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80188ac:	bf04      	itt	eq
 80188ae:	011b      	lsleq	r3, r3, #4
 80188b0:	3004      	addeq	r0, #4
 80188b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80188b6:	bf04      	itt	eq
 80188b8:	009b      	lsleq	r3, r3, #2
 80188ba:	3002      	addeq	r0, #2
 80188bc:	2b00      	cmp	r3, #0
 80188be:	db06      	blt.n	80188ce <__hi0bits+0x3c>
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	d503      	bpl.n	80188cc <__hi0bits+0x3a>
 80188c4:	3001      	adds	r0, #1
 80188c6:	4770      	bx	lr
 80188c8:	2000      	movs	r0, #0
 80188ca:	e7e8      	b.n	801889e <__hi0bits+0xc>
 80188cc:	2020      	movs	r0, #32
 80188ce:	4770      	bx	lr

080188d0 <__lo0bits>:
 80188d0:	6803      	ldr	r3, [r0, #0]
 80188d2:	f013 0207 	ands.w	r2, r3, #7
 80188d6:	4601      	mov	r1, r0
 80188d8:	d00b      	beq.n	80188f2 <__lo0bits+0x22>
 80188da:	07da      	lsls	r2, r3, #31
 80188dc:	d423      	bmi.n	8018926 <__lo0bits+0x56>
 80188de:	0798      	lsls	r0, r3, #30
 80188e0:	bf49      	itett	mi
 80188e2:	085b      	lsrmi	r3, r3, #1
 80188e4:	089b      	lsrpl	r3, r3, #2
 80188e6:	2001      	movmi	r0, #1
 80188e8:	600b      	strmi	r3, [r1, #0]
 80188ea:	bf5c      	itt	pl
 80188ec:	600b      	strpl	r3, [r1, #0]
 80188ee:	2002      	movpl	r0, #2
 80188f0:	4770      	bx	lr
 80188f2:	b298      	uxth	r0, r3
 80188f4:	b9a8      	cbnz	r0, 8018922 <__lo0bits+0x52>
 80188f6:	0c1b      	lsrs	r3, r3, #16
 80188f8:	2010      	movs	r0, #16
 80188fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80188fe:	bf04      	itt	eq
 8018900:	0a1b      	lsreq	r3, r3, #8
 8018902:	3008      	addeq	r0, #8
 8018904:	071a      	lsls	r2, r3, #28
 8018906:	bf04      	itt	eq
 8018908:	091b      	lsreq	r3, r3, #4
 801890a:	3004      	addeq	r0, #4
 801890c:	079a      	lsls	r2, r3, #30
 801890e:	bf04      	itt	eq
 8018910:	089b      	lsreq	r3, r3, #2
 8018912:	3002      	addeq	r0, #2
 8018914:	07da      	lsls	r2, r3, #31
 8018916:	d402      	bmi.n	801891e <__lo0bits+0x4e>
 8018918:	085b      	lsrs	r3, r3, #1
 801891a:	d006      	beq.n	801892a <__lo0bits+0x5a>
 801891c:	3001      	adds	r0, #1
 801891e:	600b      	str	r3, [r1, #0]
 8018920:	4770      	bx	lr
 8018922:	4610      	mov	r0, r2
 8018924:	e7e9      	b.n	80188fa <__lo0bits+0x2a>
 8018926:	2000      	movs	r0, #0
 8018928:	4770      	bx	lr
 801892a:	2020      	movs	r0, #32
 801892c:	4770      	bx	lr

0801892e <__i2b>:
 801892e:	b510      	push	{r4, lr}
 8018930:	460c      	mov	r4, r1
 8018932:	2101      	movs	r1, #1
 8018934:	f7ff fee9 	bl	801870a <_Balloc>
 8018938:	2201      	movs	r2, #1
 801893a:	6144      	str	r4, [r0, #20]
 801893c:	6102      	str	r2, [r0, #16]
 801893e:	bd10      	pop	{r4, pc}

08018940 <__multiply>:
 8018940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018944:	4614      	mov	r4, r2
 8018946:	690a      	ldr	r2, [r1, #16]
 8018948:	6923      	ldr	r3, [r4, #16]
 801894a:	429a      	cmp	r2, r3
 801894c:	bfb8      	it	lt
 801894e:	460b      	movlt	r3, r1
 8018950:	4688      	mov	r8, r1
 8018952:	bfbc      	itt	lt
 8018954:	46a0      	movlt	r8, r4
 8018956:	461c      	movlt	r4, r3
 8018958:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801895c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018960:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018964:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018968:	eb07 0609 	add.w	r6, r7, r9
 801896c:	42b3      	cmp	r3, r6
 801896e:	bfb8      	it	lt
 8018970:	3101      	addlt	r1, #1
 8018972:	f7ff feca 	bl	801870a <_Balloc>
 8018976:	f100 0514 	add.w	r5, r0, #20
 801897a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801897e:	462b      	mov	r3, r5
 8018980:	2200      	movs	r2, #0
 8018982:	4573      	cmp	r3, lr
 8018984:	d316      	bcc.n	80189b4 <__multiply+0x74>
 8018986:	f104 0214 	add.w	r2, r4, #20
 801898a:	f108 0114 	add.w	r1, r8, #20
 801898e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018992:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018996:	9300      	str	r3, [sp, #0]
 8018998:	9b00      	ldr	r3, [sp, #0]
 801899a:	9201      	str	r2, [sp, #4]
 801899c:	4293      	cmp	r3, r2
 801899e:	d80c      	bhi.n	80189ba <__multiply+0x7a>
 80189a0:	2e00      	cmp	r6, #0
 80189a2:	dd03      	ble.n	80189ac <__multiply+0x6c>
 80189a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d05d      	beq.n	8018a68 <__multiply+0x128>
 80189ac:	6106      	str	r6, [r0, #16]
 80189ae:	b003      	add	sp, #12
 80189b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b4:	f843 2b04 	str.w	r2, [r3], #4
 80189b8:	e7e3      	b.n	8018982 <__multiply+0x42>
 80189ba:	f8b2 b000 	ldrh.w	fp, [r2]
 80189be:	f1bb 0f00 	cmp.w	fp, #0
 80189c2:	d023      	beq.n	8018a0c <__multiply+0xcc>
 80189c4:	4689      	mov	r9, r1
 80189c6:	46ac      	mov	ip, r5
 80189c8:	f04f 0800 	mov.w	r8, #0
 80189cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80189d0:	f8dc a000 	ldr.w	sl, [ip]
 80189d4:	b2a3      	uxth	r3, r4
 80189d6:	fa1f fa8a 	uxth.w	sl, sl
 80189da:	fb0b a303 	mla	r3, fp, r3, sl
 80189de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80189e2:	f8dc 4000 	ldr.w	r4, [ip]
 80189e6:	4443      	add	r3, r8
 80189e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80189ec:	fb0b 840a 	mla	r4, fp, sl, r8
 80189f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80189f4:	46e2      	mov	sl, ip
 80189f6:	b29b      	uxth	r3, r3
 80189f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80189fc:	454f      	cmp	r7, r9
 80189fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a02:	f84a 3b04 	str.w	r3, [sl], #4
 8018a06:	d82b      	bhi.n	8018a60 <__multiply+0x120>
 8018a08:	f8cc 8004 	str.w	r8, [ip, #4]
 8018a0c:	9b01      	ldr	r3, [sp, #4]
 8018a0e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018a12:	3204      	adds	r2, #4
 8018a14:	f1ba 0f00 	cmp.w	sl, #0
 8018a18:	d020      	beq.n	8018a5c <__multiply+0x11c>
 8018a1a:	682b      	ldr	r3, [r5, #0]
 8018a1c:	4689      	mov	r9, r1
 8018a1e:	46a8      	mov	r8, r5
 8018a20:	f04f 0b00 	mov.w	fp, #0
 8018a24:	f8b9 c000 	ldrh.w	ip, [r9]
 8018a28:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018a2c:	fb0a 440c 	mla	r4, sl, ip, r4
 8018a30:	445c      	add	r4, fp
 8018a32:	46c4      	mov	ip, r8
 8018a34:	b29b      	uxth	r3, r3
 8018a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a3a:	f84c 3b04 	str.w	r3, [ip], #4
 8018a3e:	f859 3b04 	ldr.w	r3, [r9], #4
 8018a42:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018a46:	0c1b      	lsrs	r3, r3, #16
 8018a48:	fb0a b303 	mla	r3, sl, r3, fp
 8018a4c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018a50:	454f      	cmp	r7, r9
 8018a52:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018a56:	d805      	bhi.n	8018a64 <__multiply+0x124>
 8018a58:	f8c8 3004 	str.w	r3, [r8, #4]
 8018a5c:	3504      	adds	r5, #4
 8018a5e:	e79b      	b.n	8018998 <__multiply+0x58>
 8018a60:	46d4      	mov	ip, sl
 8018a62:	e7b3      	b.n	80189cc <__multiply+0x8c>
 8018a64:	46e0      	mov	r8, ip
 8018a66:	e7dd      	b.n	8018a24 <__multiply+0xe4>
 8018a68:	3e01      	subs	r6, #1
 8018a6a:	e799      	b.n	80189a0 <__multiply+0x60>

08018a6c <__pow5mult>:
 8018a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a70:	4615      	mov	r5, r2
 8018a72:	f012 0203 	ands.w	r2, r2, #3
 8018a76:	4606      	mov	r6, r0
 8018a78:	460f      	mov	r7, r1
 8018a7a:	d007      	beq.n	8018a8c <__pow5mult+0x20>
 8018a7c:	3a01      	subs	r2, #1
 8018a7e:	4c21      	ldr	r4, [pc, #132]	; (8018b04 <__pow5mult+0x98>)
 8018a80:	2300      	movs	r3, #0
 8018a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018a86:	f7ff fe8b 	bl	80187a0 <__multadd>
 8018a8a:	4607      	mov	r7, r0
 8018a8c:	10ad      	asrs	r5, r5, #2
 8018a8e:	d035      	beq.n	8018afc <__pow5mult+0x90>
 8018a90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018a92:	b93c      	cbnz	r4, 8018aa4 <__pow5mult+0x38>
 8018a94:	2010      	movs	r0, #16
 8018a96:	f7ff fe13 	bl	80186c0 <malloc>
 8018a9a:	6270      	str	r0, [r6, #36]	; 0x24
 8018a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018aa0:	6004      	str	r4, [r0, #0]
 8018aa2:	60c4      	str	r4, [r0, #12]
 8018aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018aac:	b94c      	cbnz	r4, 8018ac2 <__pow5mult+0x56>
 8018aae:	f240 2171 	movw	r1, #625	; 0x271
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	f7ff ff3b 	bl	801892e <__i2b>
 8018ab8:	2300      	movs	r3, #0
 8018aba:	f8c8 0008 	str.w	r0, [r8, #8]
 8018abe:	4604      	mov	r4, r0
 8018ac0:	6003      	str	r3, [r0, #0]
 8018ac2:	f04f 0800 	mov.w	r8, #0
 8018ac6:	07eb      	lsls	r3, r5, #31
 8018ac8:	d50a      	bpl.n	8018ae0 <__pow5mult+0x74>
 8018aca:	4639      	mov	r1, r7
 8018acc:	4622      	mov	r2, r4
 8018ace:	4630      	mov	r0, r6
 8018ad0:	f7ff ff36 	bl	8018940 <__multiply>
 8018ad4:	4639      	mov	r1, r7
 8018ad6:	4681      	mov	r9, r0
 8018ad8:	4630      	mov	r0, r6
 8018ada:	f7ff fe4a 	bl	8018772 <_Bfree>
 8018ade:	464f      	mov	r7, r9
 8018ae0:	106d      	asrs	r5, r5, #1
 8018ae2:	d00b      	beq.n	8018afc <__pow5mult+0x90>
 8018ae4:	6820      	ldr	r0, [r4, #0]
 8018ae6:	b938      	cbnz	r0, 8018af8 <__pow5mult+0x8c>
 8018ae8:	4622      	mov	r2, r4
 8018aea:	4621      	mov	r1, r4
 8018aec:	4630      	mov	r0, r6
 8018aee:	f7ff ff27 	bl	8018940 <__multiply>
 8018af2:	6020      	str	r0, [r4, #0]
 8018af4:	f8c0 8000 	str.w	r8, [r0]
 8018af8:	4604      	mov	r4, r0
 8018afa:	e7e4      	b.n	8018ac6 <__pow5mult+0x5a>
 8018afc:	4638      	mov	r0, r7
 8018afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b02:	bf00      	nop
 8018b04:	0801a478 	.word	0x0801a478

08018b08 <__lshift>:
 8018b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b0c:	460c      	mov	r4, r1
 8018b0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018b12:	6923      	ldr	r3, [r4, #16]
 8018b14:	6849      	ldr	r1, [r1, #4]
 8018b16:	eb0a 0903 	add.w	r9, sl, r3
 8018b1a:	68a3      	ldr	r3, [r4, #8]
 8018b1c:	4607      	mov	r7, r0
 8018b1e:	4616      	mov	r6, r2
 8018b20:	f109 0501 	add.w	r5, r9, #1
 8018b24:	42ab      	cmp	r3, r5
 8018b26:	db32      	blt.n	8018b8e <__lshift+0x86>
 8018b28:	4638      	mov	r0, r7
 8018b2a:	f7ff fdee 	bl	801870a <_Balloc>
 8018b2e:	2300      	movs	r3, #0
 8018b30:	4680      	mov	r8, r0
 8018b32:	f100 0114 	add.w	r1, r0, #20
 8018b36:	461a      	mov	r2, r3
 8018b38:	4553      	cmp	r3, sl
 8018b3a:	db2b      	blt.n	8018b94 <__lshift+0x8c>
 8018b3c:	6920      	ldr	r0, [r4, #16]
 8018b3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018b42:	f104 0314 	add.w	r3, r4, #20
 8018b46:	f016 021f 	ands.w	r2, r6, #31
 8018b4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018b4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018b52:	d025      	beq.n	8018ba0 <__lshift+0x98>
 8018b54:	f1c2 0e20 	rsb	lr, r2, #32
 8018b58:	2000      	movs	r0, #0
 8018b5a:	681e      	ldr	r6, [r3, #0]
 8018b5c:	468a      	mov	sl, r1
 8018b5e:	4096      	lsls	r6, r2
 8018b60:	4330      	orrs	r0, r6
 8018b62:	f84a 0b04 	str.w	r0, [sl], #4
 8018b66:	f853 0b04 	ldr.w	r0, [r3], #4
 8018b6a:	459c      	cmp	ip, r3
 8018b6c:	fa20 f00e 	lsr.w	r0, r0, lr
 8018b70:	d814      	bhi.n	8018b9c <__lshift+0x94>
 8018b72:	6048      	str	r0, [r1, #4]
 8018b74:	b108      	cbz	r0, 8018b7a <__lshift+0x72>
 8018b76:	f109 0502 	add.w	r5, r9, #2
 8018b7a:	3d01      	subs	r5, #1
 8018b7c:	4638      	mov	r0, r7
 8018b7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8018b82:	4621      	mov	r1, r4
 8018b84:	f7ff fdf5 	bl	8018772 <_Bfree>
 8018b88:	4640      	mov	r0, r8
 8018b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b8e:	3101      	adds	r1, #1
 8018b90:	005b      	lsls	r3, r3, #1
 8018b92:	e7c7      	b.n	8018b24 <__lshift+0x1c>
 8018b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018b98:	3301      	adds	r3, #1
 8018b9a:	e7cd      	b.n	8018b38 <__lshift+0x30>
 8018b9c:	4651      	mov	r1, sl
 8018b9e:	e7dc      	b.n	8018b5a <__lshift+0x52>
 8018ba0:	3904      	subs	r1, #4
 8018ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ba6:	f841 2f04 	str.w	r2, [r1, #4]!
 8018baa:	459c      	cmp	ip, r3
 8018bac:	d8f9      	bhi.n	8018ba2 <__lshift+0x9a>
 8018bae:	e7e4      	b.n	8018b7a <__lshift+0x72>

08018bb0 <__mcmp>:
 8018bb0:	6903      	ldr	r3, [r0, #16]
 8018bb2:	690a      	ldr	r2, [r1, #16]
 8018bb4:	1a9b      	subs	r3, r3, r2
 8018bb6:	b530      	push	{r4, r5, lr}
 8018bb8:	d10c      	bne.n	8018bd4 <__mcmp+0x24>
 8018bba:	0092      	lsls	r2, r2, #2
 8018bbc:	3014      	adds	r0, #20
 8018bbe:	3114      	adds	r1, #20
 8018bc0:	1884      	adds	r4, r0, r2
 8018bc2:	4411      	add	r1, r2
 8018bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018bcc:	4295      	cmp	r5, r2
 8018bce:	d003      	beq.n	8018bd8 <__mcmp+0x28>
 8018bd0:	d305      	bcc.n	8018bde <__mcmp+0x2e>
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	bd30      	pop	{r4, r5, pc}
 8018bd8:	42a0      	cmp	r0, r4
 8018bda:	d3f3      	bcc.n	8018bc4 <__mcmp+0x14>
 8018bdc:	e7fa      	b.n	8018bd4 <__mcmp+0x24>
 8018bde:	f04f 33ff 	mov.w	r3, #4294967295
 8018be2:	e7f7      	b.n	8018bd4 <__mcmp+0x24>

08018be4 <__mdiff>:
 8018be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018be8:	460d      	mov	r5, r1
 8018bea:	4607      	mov	r7, r0
 8018bec:	4611      	mov	r1, r2
 8018bee:	4628      	mov	r0, r5
 8018bf0:	4614      	mov	r4, r2
 8018bf2:	f7ff ffdd 	bl	8018bb0 <__mcmp>
 8018bf6:	1e06      	subs	r6, r0, #0
 8018bf8:	d108      	bne.n	8018c0c <__mdiff+0x28>
 8018bfa:	4631      	mov	r1, r6
 8018bfc:	4638      	mov	r0, r7
 8018bfe:	f7ff fd84 	bl	801870a <_Balloc>
 8018c02:	2301      	movs	r3, #1
 8018c04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c0c:	bfa4      	itt	ge
 8018c0e:	4623      	movge	r3, r4
 8018c10:	462c      	movge	r4, r5
 8018c12:	4638      	mov	r0, r7
 8018c14:	6861      	ldr	r1, [r4, #4]
 8018c16:	bfa6      	itte	ge
 8018c18:	461d      	movge	r5, r3
 8018c1a:	2600      	movge	r6, #0
 8018c1c:	2601      	movlt	r6, #1
 8018c1e:	f7ff fd74 	bl	801870a <_Balloc>
 8018c22:	692b      	ldr	r3, [r5, #16]
 8018c24:	60c6      	str	r6, [r0, #12]
 8018c26:	6926      	ldr	r6, [r4, #16]
 8018c28:	f105 0914 	add.w	r9, r5, #20
 8018c2c:	f104 0214 	add.w	r2, r4, #20
 8018c30:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018c34:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018c38:	f100 0514 	add.w	r5, r0, #20
 8018c3c:	f04f 0e00 	mov.w	lr, #0
 8018c40:	f852 ab04 	ldr.w	sl, [r2], #4
 8018c44:	f859 4b04 	ldr.w	r4, [r9], #4
 8018c48:	fa1e f18a 	uxtah	r1, lr, sl
 8018c4c:	b2a3      	uxth	r3, r4
 8018c4e:	1ac9      	subs	r1, r1, r3
 8018c50:	0c23      	lsrs	r3, r4, #16
 8018c52:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018c56:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018c5a:	b289      	uxth	r1, r1
 8018c5c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018c60:	45c8      	cmp	r8, r9
 8018c62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018c66:	4694      	mov	ip, r2
 8018c68:	f845 3b04 	str.w	r3, [r5], #4
 8018c6c:	d8e8      	bhi.n	8018c40 <__mdiff+0x5c>
 8018c6e:	45bc      	cmp	ip, r7
 8018c70:	d304      	bcc.n	8018c7c <__mdiff+0x98>
 8018c72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018c76:	b183      	cbz	r3, 8018c9a <__mdiff+0xb6>
 8018c78:	6106      	str	r6, [r0, #16]
 8018c7a:	e7c5      	b.n	8018c08 <__mdiff+0x24>
 8018c7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018c80:	fa1e f381 	uxtah	r3, lr, r1
 8018c84:	141a      	asrs	r2, r3, #16
 8018c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018c90:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018c94:	f845 3b04 	str.w	r3, [r5], #4
 8018c98:	e7e9      	b.n	8018c6e <__mdiff+0x8a>
 8018c9a:	3e01      	subs	r6, #1
 8018c9c:	e7e9      	b.n	8018c72 <__mdiff+0x8e>
	...

08018ca0 <__ulp>:
 8018ca0:	4b12      	ldr	r3, [pc, #72]	; (8018cec <__ulp+0x4c>)
 8018ca2:	ee10 2a90 	vmov	r2, s1
 8018ca6:	401a      	ands	r2, r3
 8018ca8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	dd04      	ble.n	8018cba <__ulp+0x1a>
 8018cb0:	2000      	movs	r0, #0
 8018cb2:	4619      	mov	r1, r3
 8018cb4:	ec41 0b10 	vmov	d0, r0, r1
 8018cb8:	4770      	bx	lr
 8018cba:	425b      	negs	r3, r3
 8018cbc:	151b      	asrs	r3, r3, #20
 8018cbe:	2b13      	cmp	r3, #19
 8018cc0:	f04f 0000 	mov.w	r0, #0
 8018cc4:	f04f 0100 	mov.w	r1, #0
 8018cc8:	dc04      	bgt.n	8018cd4 <__ulp+0x34>
 8018cca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018cce:	fa42 f103 	asr.w	r1, r2, r3
 8018cd2:	e7ef      	b.n	8018cb4 <__ulp+0x14>
 8018cd4:	3b14      	subs	r3, #20
 8018cd6:	2b1e      	cmp	r3, #30
 8018cd8:	f04f 0201 	mov.w	r2, #1
 8018cdc:	bfda      	itte	le
 8018cde:	f1c3 031f 	rsble	r3, r3, #31
 8018ce2:	fa02 f303 	lslle.w	r3, r2, r3
 8018ce6:	4613      	movgt	r3, r2
 8018ce8:	4618      	mov	r0, r3
 8018cea:	e7e3      	b.n	8018cb4 <__ulp+0x14>
 8018cec:	7ff00000 	.word	0x7ff00000

08018cf0 <__b2d>:
 8018cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cf2:	6905      	ldr	r5, [r0, #16]
 8018cf4:	f100 0714 	add.w	r7, r0, #20
 8018cf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018cfc:	1f2e      	subs	r6, r5, #4
 8018cfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d02:	4620      	mov	r0, r4
 8018d04:	f7ff fdc5 	bl	8018892 <__hi0bits>
 8018d08:	f1c0 0320 	rsb	r3, r0, #32
 8018d0c:	280a      	cmp	r0, #10
 8018d0e:	600b      	str	r3, [r1, #0]
 8018d10:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018d88 <__b2d+0x98>
 8018d14:	dc14      	bgt.n	8018d40 <__b2d+0x50>
 8018d16:	f1c0 0e0b 	rsb	lr, r0, #11
 8018d1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8018d1e:	42b7      	cmp	r7, r6
 8018d20:	ea41 030c 	orr.w	r3, r1, ip
 8018d24:	bf34      	ite	cc
 8018d26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d2a:	2100      	movcs	r1, #0
 8018d2c:	3015      	adds	r0, #21
 8018d2e:	fa04 f000 	lsl.w	r0, r4, r0
 8018d32:	fa21 f10e 	lsr.w	r1, r1, lr
 8018d36:	ea40 0201 	orr.w	r2, r0, r1
 8018d3a:	ec43 2b10 	vmov	d0, r2, r3
 8018d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d40:	42b7      	cmp	r7, r6
 8018d42:	bf3a      	itte	cc
 8018d44:	f1a5 0608 	subcc.w	r6, r5, #8
 8018d48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018d4c:	2100      	movcs	r1, #0
 8018d4e:	380b      	subs	r0, #11
 8018d50:	d015      	beq.n	8018d7e <__b2d+0x8e>
 8018d52:	4084      	lsls	r4, r0
 8018d54:	f1c0 0520 	rsb	r5, r0, #32
 8018d58:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018d5c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018d60:	42be      	cmp	r6, r7
 8018d62:	fa21 fc05 	lsr.w	ip, r1, r5
 8018d66:	ea44 030c 	orr.w	r3, r4, ip
 8018d6a:	bf8c      	ite	hi
 8018d6c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018d70:	2400      	movls	r4, #0
 8018d72:	fa01 f000 	lsl.w	r0, r1, r0
 8018d76:	40ec      	lsrs	r4, r5
 8018d78:	ea40 0204 	orr.w	r2, r0, r4
 8018d7c:	e7dd      	b.n	8018d3a <__b2d+0x4a>
 8018d7e:	ea44 030c 	orr.w	r3, r4, ip
 8018d82:	460a      	mov	r2, r1
 8018d84:	e7d9      	b.n	8018d3a <__b2d+0x4a>
 8018d86:	bf00      	nop
 8018d88:	3ff00000 	.word	0x3ff00000

08018d8c <__d2b>:
 8018d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018d90:	460e      	mov	r6, r1
 8018d92:	2101      	movs	r1, #1
 8018d94:	ec59 8b10 	vmov	r8, r9, d0
 8018d98:	4615      	mov	r5, r2
 8018d9a:	f7ff fcb6 	bl	801870a <_Balloc>
 8018d9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018da2:	4607      	mov	r7, r0
 8018da4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018da8:	bb34      	cbnz	r4, 8018df8 <__d2b+0x6c>
 8018daa:	9301      	str	r3, [sp, #4]
 8018dac:	f1b8 0300 	subs.w	r3, r8, #0
 8018db0:	d027      	beq.n	8018e02 <__d2b+0x76>
 8018db2:	a802      	add	r0, sp, #8
 8018db4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018db8:	f7ff fd8a 	bl	80188d0 <__lo0bits>
 8018dbc:	9900      	ldr	r1, [sp, #0]
 8018dbe:	b1f0      	cbz	r0, 8018dfe <__d2b+0x72>
 8018dc0:	9a01      	ldr	r2, [sp, #4]
 8018dc2:	f1c0 0320 	rsb	r3, r0, #32
 8018dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8018dca:	430b      	orrs	r3, r1
 8018dcc:	40c2      	lsrs	r2, r0
 8018dce:	617b      	str	r3, [r7, #20]
 8018dd0:	9201      	str	r2, [sp, #4]
 8018dd2:	9b01      	ldr	r3, [sp, #4]
 8018dd4:	61bb      	str	r3, [r7, #24]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	bf14      	ite	ne
 8018dda:	2102      	movne	r1, #2
 8018ddc:	2101      	moveq	r1, #1
 8018dde:	6139      	str	r1, [r7, #16]
 8018de0:	b1c4      	cbz	r4, 8018e14 <__d2b+0x88>
 8018de2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018de6:	4404      	add	r4, r0
 8018de8:	6034      	str	r4, [r6, #0]
 8018dea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018dee:	6028      	str	r0, [r5, #0]
 8018df0:	4638      	mov	r0, r7
 8018df2:	b003      	add	sp, #12
 8018df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018dfc:	e7d5      	b.n	8018daa <__d2b+0x1e>
 8018dfe:	6179      	str	r1, [r7, #20]
 8018e00:	e7e7      	b.n	8018dd2 <__d2b+0x46>
 8018e02:	a801      	add	r0, sp, #4
 8018e04:	f7ff fd64 	bl	80188d0 <__lo0bits>
 8018e08:	9b01      	ldr	r3, [sp, #4]
 8018e0a:	617b      	str	r3, [r7, #20]
 8018e0c:	2101      	movs	r1, #1
 8018e0e:	6139      	str	r1, [r7, #16]
 8018e10:	3020      	adds	r0, #32
 8018e12:	e7e5      	b.n	8018de0 <__d2b+0x54>
 8018e14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018e18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018e1c:	6030      	str	r0, [r6, #0]
 8018e1e:	6918      	ldr	r0, [r3, #16]
 8018e20:	f7ff fd37 	bl	8018892 <__hi0bits>
 8018e24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018e28:	e7e1      	b.n	8018dee <__d2b+0x62>

08018e2a <__ratio>:
 8018e2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e2e:	4688      	mov	r8, r1
 8018e30:	4669      	mov	r1, sp
 8018e32:	4681      	mov	r9, r0
 8018e34:	f7ff ff5c 	bl	8018cf0 <__b2d>
 8018e38:	a901      	add	r1, sp, #4
 8018e3a:	4640      	mov	r0, r8
 8018e3c:	ec57 6b10 	vmov	r6, r7, d0
 8018e40:	f7ff ff56 	bl	8018cf0 <__b2d>
 8018e44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018e48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018e4c:	eba3 0c02 	sub.w	ip, r3, r2
 8018e50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018e54:	1a9b      	subs	r3, r3, r2
 8018e56:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018e5a:	ec5b ab10 	vmov	sl, fp, d0
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	bfce      	itee	gt
 8018e62:	463a      	movgt	r2, r7
 8018e64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018e68:	465a      	movle	r2, fp
 8018e6a:	4659      	mov	r1, fp
 8018e6c:	463d      	mov	r5, r7
 8018e6e:	bfd4      	ite	le
 8018e70:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018e74:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018e78:	4630      	mov	r0, r6
 8018e7a:	ee10 2a10 	vmov	r2, s0
 8018e7e:	460b      	mov	r3, r1
 8018e80:	4629      	mov	r1, r5
 8018e82:	f7e7 fcfb 	bl	800087c <__aeabi_ddiv>
 8018e86:	ec41 0b10 	vmov	d0, r0, r1
 8018e8a:	b003      	add	sp, #12
 8018e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e90 <__copybits>:
 8018e90:	3901      	subs	r1, #1
 8018e92:	b510      	push	{r4, lr}
 8018e94:	1149      	asrs	r1, r1, #5
 8018e96:	6914      	ldr	r4, [r2, #16]
 8018e98:	3101      	adds	r1, #1
 8018e9a:	f102 0314 	add.w	r3, r2, #20
 8018e9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018ea2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018ea6:	42a3      	cmp	r3, r4
 8018ea8:	4602      	mov	r2, r0
 8018eaa:	d303      	bcc.n	8018eb4 <__copybits+0x24>
 8018eac:	2300      	movs	r3, #0
 8018eae:	428a      	cmp	r2, r1
 8018eb0:	d305      	bcc.n	8018ebe <__copybits+0x2e>
 8018eb2:	bd10      	pop	{r4, pc}
 8018eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8018eb8:	f840 2b04 	str.w	r2, [r0], #4
 8018ebc:	e7f3      	b.n	8018ea6 <__copybits+0x16>
 8018ebe:	f842 3b04 	str.w	r3, [r2], #4
 8018ec2:	e7f4      	b.n	8018eae <__copybits+0x1e>

08018ec4 <__any_on>:
 8018ec4:	f100 0214 	add.w	r2, r0, #20
 8018ec8:	6900      	ldr	r0, [r0, #16]
 8018eca:	114b      	asrs	r3, r1, #5
 8018ecc:	4298      	cmp	r0, r3
 8018ece:	b510      	push	{r4, lr}
 8018ed0:	db11      	blt.n	8018ef6 <__any_on+0x32>
 8018ed2:	dd0a      	ble.n	8018eea <__any_on+0x26>
 8018ed4:	f011 011f 	ands.w	r1, r1, #31
 8018ed8:	d007      	beq.n	8018eea <__any_on+0x26>
 8018eda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018ede:	fa24 f001 	lsr.w	r0, r4, r1
 8018ee2:	fa00 f101 	lsl.w	r1, r0, r1
 8018ee6:	428c      	cmp	r4, r1
 8018ee8:	d10b      	bne.n	8018f02 <__any_on+0x3e>
 8018eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018eee:	4293      	cmp	r3, r2
 8018ef0:	d803      	bhi.n	8018efa <__any_on+0x36>
 8018ef2:	2000      	movs	r0, #0
 8018ef4:	bd10      	pop	{r4, pc}
 8018ef6:	4603      	mov	r3, r0
 8018ef8:	e7f7      	b.n	8018eea <__any_on+0x26>
 8018efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018efe:	2900      	cmp	r1, #0
 8018f00:	d0f5      	beq.n	8018eee <__any_on+0x2a>
 8018f02:	2001      	movs	r0, #1
 8018f04:	e7f6      	b.n	8018ef4 <__any_on+0x30>

08018f06 <_calloc_r>:
 8018f06:	b538      	push	{r3, r4, r5, lr}
 8018f08:	fb02 f401 	mul.w	r4, r2, r1
 8018f0c:	4621      	mov	r1, r4
 8018f0e:	f000 f857 	bl	8018fc0 <_malloc_r>
 8018f12:	4605      	mov	r5, r0
 8018f14:	b118      	cbz	r0, 8018f1e <_calloc_r+0x18>
 8018f16:	4622      	mov	r2, r4
 8018f18:	2100      	movs	r1, #0
 8018f1a:	f7fc fca1 	bl	8015860 <memset>
 8018f1e:	4628      	mov	r0, r5
 8018f20:	bd38      	pop	{r3, r4, r5, pc}
	...

08018f24 <_free_r>:
 8018f24:	b538      	push	{r3, r4, r5, lr}
 8018f26:	4605      	mov	r5, r0
 8018f28:	2900      	cmp	r1, #0
 8018f2a:	d045      	beq.n	8018fb8 <_free_r+0x94>
 8018f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f30:	1f0c      	subs	r4, r1, #4
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	bfb8      	it	lt
 8018f36:	18e4      	addlt	r4, r4, r3
 8018f38:	f000 fe30 	bl	8019b9c <__malloc_lock>
 8018f3c:	4a1f      	ldr	r2, [pc, #124]	; (8018fbc <_free_r+0x98>)
 8018f3e:	6813      	ldr	r3, [r2, #0]
 8018f40:	4610      	mov	r0, r2
 8018f42:	b933      	cbnz	r3, 8018f52 <_free_r+0x2e>
 8018f44:	6063      	str	r3, [r4, #4]
 8018f46:	6014      	str	r4, [r2, #0]
 8018f48:	4628      	mov	r0, r5
 8018f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f4e:	f000 be26 	b.w	8019b9e <__malloc_unlock>
 8018f52:	42a3      	cmp	r3, r4
 8018f54:	d90c      	bls.n	8018f70 <_free_r+0x4c>
 8018f56:	6821      	ldr	r1, [r4, #0]
 8018f58:	1862      	adds	r2, r4, r1
 8018f5a:	4293      	cmp	r3, r2
 8018f5c:	bf04      	itt	eq
 8018f5e:	681a      	ldreq	r2, [r3, #0]
 8018f60:	685b      	ldreq	r3, [r3, #4]
 8018f62:	6063      	str	r3, [r4, #4]
 8018f64:	bf04      	itt	eq
 8018f66:	1852      	addeq	r2, r2, r1
 8018f68:	6022      	streq	r2, [r4, #0]
 8018f6a:	6004      	str	r4, [r0, #0]
 8018f6c:	e7ec      	b.n	8018f48 <_free_r+0x24>
 8018f6e:	4613      	mov	r3, r2
 8018f70:	685a      	ldr	r2, [r3, #4]
 8018f72:	b10a      	cbz	r2, 8018f78 <_free_r+0x54>
 8018f74:	42a2      	cmp	r2, r4
 8018f76:	d9fa      	bls.n	8018f6e <_free_r+0x4a>
 8018f78:	6819      	ldr	r1, [r3, #0]
 8018f7a:	1858      	adds	r0, r3, r1
 8018f7c:	42a0      	cmp	r0, r4
 8018f7e:	d10b      	bne.n	8018f98 <_free_r+0x74>
 8018f80:	6820      	ldr	r0, [r4, #0]
 8018f82:	4401      	add	r1, r0
 8018f84:	1858      	adds	r0, r3, r1
 8018f86:	4282      	cmp	r2, r0
 8018f88:	6019      	str	r1, [r3, #0]
 8018f8a:	d1dd      	bne.n	8018f48 <_free_r+0x24>
 8018f8c:	6810      	ldr	r0, [r2, #0]
 8018f8e:	6852      	ldr	r2, [r2, #4]
 8018f90:	605a      	str	r2, [r3, #4]
 8018f92:	4401      	add	r1, r0
 8018f94:	6019      	str	r1, [r3, #0]
 8018f96:	e7d7      	b.n	8018f48 <_free_r+0x24>
 8018f98:	d902      	bls.n	8018fa0 <_free_r+0x7c>
 8018f9a:	230c      	movs	r3, #12
 8018f9c:	602b      	str	r3, [r5, #0]
 8018f9e:	e7d3      	b.n	8018f48 <_free_r+0x24>
 8018fa0:	6820      	ldr	r0, [r4, #0]
 8018fa2:	1821      	adds	r1, r4, r0
 8018fa4:	428a      	cmp	r2, r1
 8018fa6:	bf04      	itt	eq
 8018fa8:	6811      	ldreq	r1, [r2, #0]
 8018faa:	6852      	ldreq	r2, [r2, #4]
 8018fac:	6062      	str	r2, [r4, #4]
 8018fae:	bf04      	itt	eq
 8018fb0:	1809      	addeq	r1, r1, r0
 8018fb2:	6021      	streq	r1, [r4, #0]
 8018fb4:	605c      	str	r4, [r3, #4]
 8018fb6:	e7c7      	b.n	8018f48 <_free_r+0x24>
 8018fb8:	bd38      	pop	{r3, r4, r5, pc}
 8018fba:	bf00      	nop
 8018fbc:	20042300 	.word	0x20042300

08018fc0 <_malloc_r>:
 8018fc0:	b570      	push	{r4, r5, r6, lr}
 8018fc2:	1ccd      	adds	r5, r1, #3
 8018fc4:	f025 0503 	bic.w	r5, r5, #3
 8018fc8:	3508      	adds	r5, #8
 8018fca:	2d0c      	cmp	r5, #12
 8018fcc:	bf38      	it	cc
 8018fce:	250c      	movcc	r5, #12
 8018fd0:	2d00      	cmp	r5, #0
 8018fd2:	4606      	mov	r6, r0
 8018fd4:	db01      	blt.n	8018fda <_malloc_r+0x1a>
 8018fd6:	42a9      	cmp	r1, r5
 8018fd8:	d903      	bls.n	8018fe2 <_malloc_r+0x22>
 8018fda:	230c      	movs	r3, #12
 8018fdc:	6033      	str	r3, [r6, #0]
 8018fde:	2000      	movs	r0, #0
 8018fe0:	bd70      	pop	{r4, r5, r6, pc}
 8018fe2:	f000 fddb 	bl	8019b9c <__malloc_lock>
 8018fe6:	4a21      	ldr	r2, [pc, #132]	; (801906c <_malloc_r+0xac>)
 8018fe8:	6814      	ldr	r4, [r2, #0]
 8018fea:	4621      	mov	r1, r4
 8018fec:	b991      	cbnz	r1, 8019014 <_malloc_r+0x54>
 8018fee:	4c20      	ldr	r4, [pc, #128]	; (8019070 <_malloc_r+0xb0>)
 8018ff0:	6823      	ldr	r3, [r4, #0]
 8018ff2:	b91b      	cbnz	r3, 8018ffc <_malloc_r+0x3c>
 8018ff4:	4630      	mov	r0, r6
 8018ff6:	f000 fc91 	bl	801991c <_sbrk_r>
 8018ffa:	6020      	str	r0, [r4, #0]
 8018ffc:	4629      	mov	r1, r5
 8018ffe:	4630      	mov	r0, r6
 8019000:	f000 fc8c 	bl	801991c <_sbrk_r>
 8019004:	1c43      	adds	r3, r0, #1
 8019006:	d124      	bne.n	8019052 <_malloc_r+0x92>
 8019008:	230c      	movs	r3, #12
 801900a:	6033      	str	r3, [r6, #0]
 801900c:	4630      	mov	r0, r6
 801900e:	f000 fdc6 	bl	8019b9e <__malloc_unlock>
 8019012:	e7e4      	b.n	8018fde <_malloc_r+0x1e>
 8019014:	680b      	ldr	r3, [r1, #0]
 8019016:	1b5b      	subs	r3, r3, r5
 8019018:	d418      	bmi.n	801904c <_malloc_r+0x8c>
 801901a:	2b0b      	cmp	r3, #11
 801901c:	d90f      	bls.n	801903e <_malloc_r+0x7e>
 801901e:	600b      	str	r3, [r1, #0]
 8019020:	50cd      	str	r5, [r1, r3]
 8019022:	18cc      	adds	r4, r1, r3
 8019024:	4630      	mov	r0, r6
 8019026:	f000 fdba 	bl	8019b9e <__malloc_unlock>
 801902a:	f104 000b 	add.w	r0, r4, #11
 801902e:	1d23      	adds	r3, r4, #4
 8019030:	f020 0007 	bic.w	r0, r0, #7
 8019034:	1ac3      	subs	r3, r0, r3
 8019036:	d0d3      	beq.n	8018fe0 <_malloc_r+0x20>
 8019038:	425a      	negs	r2, r3
 801903a:	50e2      	str	r2, [r4, r3]
 801903c:	e7d0      	b.n	8018fe0 <_malloc_r+0x20>
 801903e:	428c      	cmp	r4, r1
 8019040:	684b      	ldr	r3, [r1, #4]
 8019042:	bf16      	itet	ne
 8019044:	6063      	strne	r3, [r4, #4]
 8019046:	6013      	streq	r3, [r2, #0]
 8019048:	460c      	movne	r4, r1
 801904a:	e7eb      	b.n	8019024 <_malloc_r+0x64>
 801904c:	460c      	mov	r4, r1
 801904e:	6849      	ldr	r1, [r1, #4]
 8019050:	e7cc      	b.n	8018fec <_malloc_r+0x2c>
 8019052:	1cc4      	adds	r4, r0, #3
 8019054:	f024 0403 	bic.w	r4, r4, #3
 8019058:	42a0      	cmp	r0, r4
 801905a:	d005      	beq.n	8019068 <_malloc_r+0xa8>
 801905c:	1a21      	subs	r1, r4, r0
 801905e:	4630      	mov	r0, r6
 8019060:	f000 fc5c 	bl	801991c <_sbrk_r>
 8019064:	3001      	adds	r0, #1
 8019066:	d0cf      	beq.n	8019008 <_malloc_r+0x48>
 8019068:	6025      	str	r5, [r4, #0]
 801906a:	e7db      	b.n	8019024 <_malloc_r+0x64>
 801906c:	20042300 	.word	0x20042300
 8019070:	20042304 	.word	0x20042304

08019074 <__ssputs_r>:
 8019074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019078:	688e      	ldr	r6, [r1, #8]
 801907a:	429e      	cmp	r6, r3
 801907c:	4682      	mov	sl, r0
 801907e:	460c      	mov	r4, r1
 8019080:	4690      	mov	r8, r2
 8019082:	4699      	mov	r9, r3
 8019084:	d837      	bhi.n	80190f6 <__ssputs_r+0x82>
 8019086:	898a      	ldrh	r2, [r1, #12]
 8019088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801908c:	d031      	beq.n	80190f2 <__ssputs_r+0x7e>
 801908e:	6825      	ldr	r5, [r4, #0]
 8019090:	6909      	ldr	r1, [r1, #16]
 8019092:	1a6f      	subs	r7, r5, r1
 8019094:	6965      	ldr	r5, [r4, #20]
 8019096:	2302      	movs	r3, #2
 8019098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801909c:	fb95 f5f3 	sdiv	r5, r5, r3
 80190a0:	f109 0301 	add.w	r3, r9, #1
 80190a4:	443b      	add	r3, r7
 80190a6:	429d      	cmp	r5, r3
 80190a8:	bf38      	it	cc
 80190aa:	461d      	movcc	r5, r3
 80190ac:	0553      	lsls	r3, r2, #21
 80190ae:	d530      	bpl.n	8019112 <__ssputs_r+0x9e>
 80190b0:	4629      	mov	r1, r5
 80190b2:	f7ff ff85 	bl	8018fc0 <_malloc_r>
 80190b6:	4606      	mov	r6, r0
 80190b8:	b950      	cbnz	r0, 80190d0 <__ssputs_r+0x5c>
 80190ba:	230c      	movs	r3, #12
 80190bc:	f8ca 3000 	str.w	r3, [sl]
 80190c0:	89a3      	ldrh	r3, [r4, #12]
 80190c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80190c6:	81a3      	strh	r3, [r4, #12]
 80190c8:	f04f 30ff 	mov.w	r0, #4294967295
 80190cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190d0:	463a      	mov	r2, r7
 80190d2:	6921      	ldr	r1, [r4, #16]
 80190d4:	f7ff fb0e 	bl	80186f4 <memcpy>
 80190d8:	89a3      	ldrh	r3, [r4, #12]
 80190da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80190de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80190e2:	81a3      	strh	r3, [r4, #12]
 80190e4:	6126      	str	r6, [r4, #16]
 80190e6:	6165      	str	r5, [r4, #20]
 80190e8:	443e      	add	r6, r7
 80190ea:	1bed      	subs	r5, r5, r7
 80190ec:	6026      	str	r6, [r4, #0]
 80190ee:	60a5      	str	r5, [r4, #8]
 80190f0:	464e      	mov	r6, r9
 80190f2:	454e      	cmp	r6, r9
 80190f4:	d900      	bls.n	80190f8 <__ssputs_r+0x84>
 80190f6:	464e      	mov	r6, r9
 80190f8:	4632      	mov	r2, r6
 80190fa:	4641      	mov	r1, r8
 80190fc:	6820      	ldr	r0, [r4, #0]
 80190fe:	f000 fd34 	bl	8019b6a <memmove>
 8019102:	68a3      	ldr	r3, [r4, #8]
 8019104:	1b9b      	subs	r3, r3, r6
 8019106:	60a3      	str	r3, [r4, #8]
 8019108:	6823      	ldr	r3, [r4, #0]
 801910a:	441e      	add	r6, r3
 801910c:	6026      	str	r6, [r4, #0]
 801910e:	2000      	movs	r0, #0
 8019110:	e7dc      	b.n	80190cc <__ssputs_r+0x58>
 8019112:	462a      	mov	r2, r5
 8019114:	f000 fd44 	bl	8019ba0 <_realloc_r>
 8019118:	4606      	mov	r6, r0
 801911a:	2800      	cmp	r0, #0
 801911c:	d1e2      	bne.n	80190e4 <__ssputs_r+0x70>
 801911e:	6921      	ldr	r1, [r4, #16]
 8019120:	4650      	mov	r0, sl
 8019122:	f7ff feff 	bl	8018f24 <_free_r>
 8019126:	e7c8      	b.n	80190ba <__ssputs_r+0x46>

08019128 <_svfiprintf_r>:
 8019128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801912c:	461d      	mov	r5, r3
 801912e:	898b      	ldrh	r3, [r1, #12]
 8019130:	061f      	lsls	r7, r3, #24
 8019132:	b09d      	sub	sp, #116	; 0x74
 8019134:	4680      	mov	r8, r0
 8019136:	460c      	mov	r4, r1
 8019138:	4616      	mov	r6, r2
 801913a:	d50f      	bpl.n	801915c <_svfiprintf_r+0x34>
 801913c:	690b      	ldr	r3, [r1, #16]
 801913e:	b96b      	cbnz	r3, 801915c <_svfiprintf_r+0x34>
 8019140:	2140      	movs	r1, #64	; 0x40
 8019142:	f7ff ff3d 	bl	8018fc0 <_malloc_r>
 8019146:	6020      	str	r0, [r4, #0]
 8019148:	6120      	str	r0, [r4, #16]
 801914a:	b928      	cbnz	r0, 8019158 <_svfiprintf_r+0x30>
 801914c:	230c      	movs	r3, #12
 801914e:	f8c8 3000 	str.w	r3, [r8]
 8019152:	f04f 30ff 	mov.w	r0, #4294967295
 8019156:	e0c8      	b.n	80192ea <_svfiprintf_r+0x1c2>
 8019158:	2340      	movs	r3, #64	; 0x40
 801915a:	6163      	str	r3, [r4, #20]
 801915c:	2300      	movs	r3, #0
 801915e:	9309      	str	r3, [sp, #36]	; 0x24
 8019160:	2320      	movs	r3, #32
 8019162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019166:	2330      	movs	r3, #48	; 0x30
 8019168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801916c:	9503      	str	r5, [sp, #12]
 801916e:	f04f 0b01 	mov.w	fp, #1
 8019172:	4637      	mov	r7, r6
 8019174:	463d      	mov	r5, r7
 8019176:	f815 3b01 	ldrb.w	r3, [r5], #1
 801917a:	b10b      	cbz	r3, 8019180 <_svfiprintf_r+0x58>
 801917c:	2b25      	cmp	r3, #37	; 0x25
 801917e:	d13e      	bne.n	80191fe <_svfiprintf_r+0xd6>
 8019180:	ebb7 0a06 	subs.w	sl, r7, r6
 8019184:	d00b      	beq.n	801919e <_svfiprintf_r+0x76>
 8019186:	4653      	mov	r3, sl
 8019188:	4632      	mov	r2, r6
 801918a:	4621      	mov	r1, r4
 801918c:	4640      	mov	r0, r8
 801918e:	f7ff ff71 	bl	8019074 <__ssputs_r>
 8019192:	3001      	adds	r0, #1
 8019194:	f000 80a4 	beq.w	80192e0 <_svfiprintf_r+0x1b8>
 8019198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801919a:	4453      	add	r3, sl
 801919c:	9309      	str	r3, [sp, #36]	; 0x24
 801919e:	783b      	ldrb	r3, [r7, #0]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	f000 809d 	beq.w	80192e0 <_svfiprintf_r+0x1b8>
 80191a6:	2300      	movs	r3, #0
 80191a8:	f04f 32ff 	mov.w	r2, #4294967295
 80191ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	9307      	str	r3, [sp, #28]
 80191b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191b8:	931a      	str	r3, [sp, #104]	; 0x68
 80191ba:	462f      	mov	r7, r5
 80191bc:	2205      	movs	r2, #5
 80191be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80191c2:	4850      	ldr	r0, [pc, #320]	; (8019304 <_svfiprintf_r+0x1dc>)
 80191c4:	f7e7 f824 	bl	8000210 <memchr>
 80191c8:	9b04      	ldr	r3, [sp, #16]
 80191ca:	b9d0      	cbnz	r0, 8019202 <_svfiprintf_r+0xda>
 80191cc:	06d9      	lsls	r1, r3, #27
 80191ce:	bf44      	itt	mi
 80191d0:	2220      	movmi	r2, #32
 80191d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191d6:	071a      	lsls	r2, r3, #28
 80191d8:	bf44      	itt	mi
 80191da:	222b      	movmi	r2, #43	; 0x2b
 80191dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191e0:	782a      	ldrb	r2, [r5, #0]
 80191e2:	2a2a      	cmp	r2, #42	; 0x2a
 80191e4:	d015      	beq.n	8019212 <_svfiprintf_r+0xea>
 80191e6:	9a07      	ldr	r2, [sp, #28]
 80191e8:	462f      	mov	r7, r5
 80191ea:	2000      	movs	r0, #0
 80191ec:	250a      	movs	r5, #10
 80191ee:	4639      	mov	r1, r7
 80191f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191f4:	3b30      	subs	r3, #48	; 0x30
 80191f6:	2b09      	cmp	r3, #9
 80191f8:	d94d      	bls.n	8019296 <_svfiprintf_r+0x16e>
 80191fa:	b1b8      	cbz	r0, 801922c <_svfiprintf_r+0x104>
 80191fc:	e00f      	b.n	801921e <_svfiprintf_r+0xf6>
 80191fe:	462f      	mov	r7, r5
 8019200:	e7b8      	b.n	8019174 <_svfiprintf_r+0x4c>
 8019202:	4a40      	ldr	r2, [pc, #256]	; (8019304 <_svfiprintf_r+0x1dc>)
 8019204:	1a80      	subs	r0, r0, r2
 8019206:	fa0b f000 	lsl.w	r0, fp, r0
 801920a:	4318      	orrs	r0, r3
 801920c:	9004      	str	r0, [sp, #16]
 801920e:	463d      	mov	r5, r7
 8019210:	e7d3      	b.n	80191ba <_svfiprintf_r+0x92>
 8019212:	9a03      	ldr	r2, [sp, #12]
 8019214:	1d11      	adds	r1, r2, #4
 8019216:	6812      	ldr	r2, [r2, #0]
 8019218:	9103      	str	r1, [sp, #12]
 801921a:	2a00      	cmp	r2, #0
 801921c:	db01      	blt.n	8019222 <_svfiprintf_r+0xfa>
 801921e:	9207      	str	r2, [sp, #28]
 8019220:	e004      	b.n	801922c <_svfiprintf_r+0x104>
 8019222:	4252      	negs	r2, r2
 8019224:	f043 0302 	orr.w	r3, r3, #2
 8019228:	9207      	str	r2, [sp, #28]
 801922a:	9304      	str	r3, [sp, #16]
 801922c:	783b      	ldrb	r3, [r7, #0]
 801922e:	2b2e      	cmp	r3, #46	; 0x2e
 8019230:	d10c      	bne.n	801924c <_svfiprintf_r+0x124>
 8019232:	787b      	ldrb	r3, [r7, #1]
 8019234:	2b2a      	cmp	r3, #42	; 0x2a
 8019236:	d133      	bne.n	80192a0 <_svfiprintf_r+0x178>
 8019238:	9b03      	ldr	r3, [sp, #12]
 801923a:	1d1a      	adds	r2, r3, #4
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	9203      	str	r2, [sp, #12]
 8019240:	2b00      	cmp	r3, #0
 8019242:	bfb8      	it	lt
 8019244:	f04f 33ff 	movlt.w	r3, #4294967295
 8019248:	3702      	adds	r7, #2
 801924a:	9305      	str	r3, [sp, #20]
 801924c:	4d2e      	ldr	r5, [pc, #184]	; (8019308 <_svfiprintf_r+0x1e0>)
 801924e:	7839      	ldrb	r1, [r7, #0]
 8019250:	2203      	movs	r2, #3
 8019252:	4628      	mov	r0, r5
 8019254:	f7e6 ffdc 	bl	8000210 <memchr>
 8019258:	b138      	cbz	r0, 801926a <_svfiprintf_r+0x142>
 801925a:	2340      	movs	r3, #64	; 0x40
 801925c:	1b40      	subs	r0, r0, r5
 801925e:	fa03 f000 	lsl.w	r0, r3, r0
 8019262:	9b04      	ldr	r3, [sp, #16]
 8019264:	4303      	orrs	r3, r0
 8019266:	3701      	adds	r7, #1
 8019268:	9304      	str	r3, [sp, #16]
 801926a:	7839      	ldrb	r1, [r7, #0]
 801926c:	4827      	ldr	r0, [pc, #156]	; (801930c <_svfiprintf_r+0x1e4>)
 801926e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019272:	2206      	movs	r2, #6
 8019274:	1c7e      	adds	r6, r7, #1
 8019276:	f7e6 ffcb 	bl	8000210 <memchr>
 801927a:	2800      	cmp	r0, #0
 801927c:	d038      	beq.n	80192f0 <_svfiprintf_r+0x1c8>
 801927e:	4b24      	ldr	r3, [pc, #144]	; (8019310 <_svfiprintf_r+0x1e8>)
 8019280:	bb13      	cbnz	r3, 80192c8 <_svfiprintf_r+0x1a0>
 8019282:	9b03      	ldr	r3, [sp, #12]
 8019284:	3307      	adds	r3, #7
 8019286:	f023 0307 	bic.w	r3, r3, #7
 801928a:	3308      	adds	r3, #8
 801928c:	9303      	str	r3, [sp, #12]
 801928e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019290:	444b      	add	r3, r9
 8019292:	9309      	str	r3, [sp, #36]	; 0x24
 8019294:	e76d      	b.n	8019172 <_svfiprintf_r+0x4a>
 8019296:	fb05 3202 	mla	r2, r5, r2, r3
 801929a:	2001      	movs	r0, #1
 801929c:	460f      	mov	r7, r1
 801929e:	e7a6      	b.n	80191ee <_svfiprintf_r+0xc6>
 80192a0:	2300      	movs	r3, #0
 80192a2:	3701      	adds	r7, #1
 80192a4:	9305      	str	r3, [sp, #20]
 80192a6:	4619      	mov	r1, r3
 80192a8:	250a      	movs	r5, #10
 80192aa:	4638      	mov	r0, r7
 80192ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192b0:	3a30      	subs	r2, #48	; 0x30
 80192b2:	2a09      	cmp	r2, #9
 80192b4:	d903      	bls.n	80192be <_svfiprintf_r+0x196>
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d0c8      	beq.n	801924c <_svfiprintf_r+0x124>
 80192ba:	9105      	str	r1, [sp, #20]
 80192bc:	e7c6      	b.n	801924c <_svfiprintf_r+0x124>
 80192be:	fb05 2101 	mla	r1, r5, r1, r2
 80192c2:	2301      	movs	r3, #1
 80192c4:	4607      	mov	r7, r0
 80192c6:	e7f0      	b.n	80192aa <_svfiprintf_r+0x182>
 80192c8:	ab03      	add	r3, sp, #12
 80192ca:	9300      	str	r3, [sp, #0]
 80192cc:	4622      	mov	r2, r4
 80192ce:	4b11      	ldr	r3, [pc, #68]	; (8019314 <_svfiprintf_r+0x1ec>)
 80192d0:	a904      	add	r1, sp, #16
 80192d2:	4640      	mov	r0, r8
 80192d4:	f7fc fb60 	bl	8015998 <_printf_float>
 80192d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80192dc:	4681      	mov	r9, r0
 80192de:	d1d6      	bne.n	801928e <_svfiprintf_r+0x166>
 80192e0:	89a3      	ldrh	r3, [r4, #12]
 80192e2:	065b      	lsls	r3, r3, #25
 80192e4:	f53f af35 	bmi.w	8019152 <_svfiprintf_r+0x2a>
 80192e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192ea:	b01d      	add	sp, #116	; 0x74
 80192ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192f0:	ab03      	add	r3, sp, #12
 80192f2:	9300      	str	r3, [sp, #0]
 80192f4:	4622      	mov	r2, r4
 80192f6:	4b07      	ldr	r3, [pc, #28]	; (8019314 <_svfiprintf_r+0x1ec>)
 80192f8:	a904      	add	r1, sp, #16
 80192fa:	4640      	mov	r0, r8
 80192fc:	f7fc fe02 	bl	8015f04 <_printf_i>
 8019300:	e7ea      	b.n	80192d8 <_svfiprintf_r+0x1b0>
 8019302:	bf00      	nop
 8019304:	0801a484 	.word	0x0801a484
 8019308:	0801a48a 	.word	0x0801a48a
 801930c:	0801a48e 	.word	0x0801a48e
 8019310:	08015999 	.word	0x08015999
 8019314:	08019075 	.word	0x08019075

08019318 <_sungetc_r>:
 8019318:	b538      	push	{r3, r4, r5, lr}
 801931a:	1c4b      	adds	r3, r1, #1
 801931c:	4614      	mov	r4, r2
 801931e:	d103      	bne.n	8019328 <_sungetc_r+0x10>
 8019320:	f04f 35ff 	mov.w	r5, #4294967295
 8019324:	4628      	mov	r0, r5
 8019326:	bd38      	pop	{r3, r4, r5, pc}
 8019328:	8993      	ldrh	r3, [r2, #12]
 801932a:	f023 0320 	bic.w	r3, r3, #32
 801932e:	8193      	strh	r3, [r2, #12]
 8019330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019332:	6852      	ldr	r2, [r2, #4]
 8019334:	b2cd      	uxtb	r5, r1
 8019336:	b18b      	cbz	r3, 801935c <_sungetc_r+0x44>
 8019338:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801933a:	4293      	cmp	r3, r2
 801933c:	dd08      	ble.n	8019350 <_sungetc_r+0x38>
 801933e:	6823      	ldr	r3, [r4, #0]
 8019340:	1e5a      	subs	r2, r3, #1
 8019342:	6022      	str	r2, [r4, #0]
 8019344:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019348:	6863      	ldr	r3, [r4, #4]
 801934a:	3301      	adds	r3, #1
 801934c:	6063      	str	r3, [r4, #4]
 801934e:	e7e9      	b.n	8019324 <_sungetc_r+0xc>
 8019350:	4621      	mov	r1, r4
 8019352:	f000 fbc3 	bl	8019adc <__submore>
 8019356:	2800      	cmp	r0, #0
 8019358:	d0f1      	beq.n	801933e <_sungetc_r+0x26>
 801935a:	e7e1      	b.n	8019320 <_sungetc_r+0x8>
 801935c:	6921      	ldr	r1, [r4, #16]
 801935e:	6823      	ldr	r3, [r4, #0]
 8019360:	b151      	cbz	r1, 8019378 <_sungetc_r+0x60>
 8019362:	4299      	cmp	r1, r3
 8019364:	d208      	bcs.n	8019378 <_sungetc_r+0x60>
 8019366:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801936a:	42a9      	cmp	r1, r5
 801936c:	d104      	bne.n	8019378 <_sungetc_r+0x60>
 801936e:	3b01      	subs	r3, #1
 8019370:	3201      	adds	r2, #1
 8019372:	6023      	str	r3, [r4, #0]
 8019374:	6062      	str	r2, [r4, #4]
 8019376:	e7d5      	b.n	8019324 <_sungetc_r+0xc>
 8019378:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801937c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019380:	6363      	str	r3, [r4, #52]	; 0x34
 8019382:	2303      	movs	r3, #3
 8019384:	63a3      	str	r3, [r4, #56]	; 0x38
 8019386:	4623      	mov	r3, r4
 8019388:	f803 5f46 	strb.w	r5, [r3, #70]!
 801938c:	6023      	str	r3, [r4, #0]
 801938e:	2301      	movs	r3, #1
 8019390:	e7dc      	b.n	801934c <_sungetc_r+0x34>

08019392 <__ssrefill_r>:
 8019392:	b510      	push	{r4, lr}
 8019394:	460c      	mov	r4, r1
 8019396:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019398:	b169      	cbz	r1, 80193b6 <__ssrefill_r+0x24>
 801939a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801939e:	4299      	cmp	r1, r3
 80193a0:	d001      	beq.n	80193a6 <__ssrefill_r+0x14>
 80193a2:	f7ff fdbf 	bl	8018f24 <_free_r>
 80193a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193a8:	6063      	str	r3, [r4, #4]
 80193aa:	2000      	movs	r0, #0
 80193ac:	6360      	str	r0, [r4, #52]	; 0x34
 80193ae:	b113      	cbz	r3, 80193b6 <__ssrefill_r+0x24>
 80193b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80193b2:	6023      	str	r3, [r4, #0]
 80193b4:	bd10      	pop	{r4, pc}
 80193b6:	6923      	ldr	r3, [r4, #16]
 80193b8:	6023      	str	r3, [r4, #0]
 80193ba:	2300      	movs	r3, #0
 80193bc:	6063      	str	r3, [r4, #4]
 80193be:	89a3      	ldrh	r3, [r4, #12]
 80193c0:	f043 0320 	orr.w	r3, r3, #32
 80193c4:	81a3      	strh	r3, [r4, #12]
 80193c6:	f04f 30ff 	mov.w	r0, #4294967295
 80193ca:	e7f3      	b.n	80193b4 <__ssrefill_r+0x22>

080193cc <__ssvfiscanf_r>:
 80193cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80193d4:	460c      	mov	r4, r1
 80193d6:	2100      	movs	r1, #0
 80193d8:	9144      	str	r1, [sp, #272]	; 0x110
 80193da:	9145      	str	r1, [sp, #276]	; 0x114
 80193dc:	499f      	ldr	r1, [pc, #636]	; (801965c <__ssvfiscanf_r+0x290>)
 80193de:	91a0      	str	r1, [sp, #640]	; 0x280
 80193e0:	f10d 0804 	add.w	r8, sp, #4
 80193e4:	499e      	ldr	r1, [pc, #632]	; (8019660 <__ssvfiscanf_r+0x294>)
 80193e6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019664 <__ssvfiscanf_r+0x298>
 80193ea:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80193ee:	4606      	mov	r6, r0
 80193f0:	4692      	mov	sl, r2
 80193f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80193f4:	9300      	str	r3, [sp, #0]
 80193f6:	270a      	movs	r7, #10
 80193f8:	f89a 3000 	ldrb.w	r3, [sl]
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	f000 812a 	beq.w	8019656 <__ssvfiscanf_r+0x28a>
 8019402:	4655      	mov	r5, sl
 8019404:	f7ff f93e 	bl	8018684 <__locale_ctype_ptr>
 8019408:	f815 bb01 	ldrb.w	fp, [r5], #1
 801940c:	4458      	add	r0, fp
 801940e:	7843      	ldrb	r3, [r0, #1]
 8019410:	f013 0308 	ands.w	r3, r3, #8
 8019414:	d01c      	beq.n	8019450 <__ssvfiscanf_r+0x84>
 8019416:	6863      	ldr	r3, [r4, #4]
 8019418:	2b00      	cmp	r3, #0
 801941a:	dd12      	ble.n	8019442 <__ssvfiscanf_r+0x76>
 801941c:	f7ff f932 	bl	8018684 <__locale_ctype_ptr>
 8019420:	6823      	ldr	r3, [r4, #0]
 8019422:	781a      	ldrb	r2, [r3, #0]
 8019424:	4410      	add	r0, r2
 8019426:	7842      	ldrb	r2, [r0, #1]
 8019428:	0712      	lsls	r2, r2, #28
 801942a:	d401      	bmi.n	8019430 <__ssvfiscanf_r+0x64>
 801942c:	46aa      	mov	sl, r5
 801942e:	e7e3      	b.n	80193f8 <__ssvfiscanf_r+0x2c>
 8019430:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019432:	3201      	adds	r2, #1
 8019434:	9245      	str	r2, [sp, #276]	; 0x114
 8019436:	6862      	ldr	r2, [r4, #4]
 8019438:	3301      	adds	r3, #1
 801943a:	3a01      	subs	r2, #1
 801943c:	6062      	str	r2, [r4, #4]
 801943e:	6023      	str	r3, [r4, #0]
 8019440:	e7e9      	b.n	8019416 <__ssvfiscanf_r+0x4a>
 8019442:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019444:	4621      	mov	r1, r4
 8019446:	4630      	mov	r0, r6
 8019448:	4798      	blx	r3
 801944a:	2800      	cmp	r0, #0
 801944c:	d0e6      	beq.n	801941c <__ssvfiscanf_r+0x50>
 801944e:	e7ed      	b.n	801942c <__ssvfiscanf_r+0x60>
 8019450:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019454:	f040 8082 	bne.w	801955c <__ssvfiscanf_r+0x190>
 8019458:	9343      	str	r3, [sp, #268]	; 0x10c
 801945a:	9341      	str	r3, [sp, #260]	; 0x104
 801945c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019460:	2b2a      	cmp	r3, #42	; 0x2a
 8019462:	d103      	bne.n	801946c <__ssvfiscanf_r+0xa0>
 8019464:	2310      	movs	r3, #16
 8019466:	9341      	str	r3, [sp, #260]	; 0x104
 8019468:	f10a 0502 	add.w	r5, sl, #2
 801946c:	46aa      	mov	sl, r5
 801946e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019472:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019476:	2a09      	cmp	r2, #9
 8019478:	d922      	bls.n	80194c0 <__ssvfiscanf_r+0xf4>
 801947a:	2203      	movs	r2, #3
 801947c:	4879      	ldr	r0, [pc, #484]	; (8019664 <__ssvfiscanf_r+0x298>)
 801947e:	f7e6 fec7 	bl	8000210 <memchr>
 8019482:	b138      	cbz	r0, 8019494 <__ssvfiscanf_r+0xc8>
 8019484:	eba0 0309 	sub.w	r3, r0, r9
 8019488:	2001      	movs	r0, #1
 801948a:	4098      	lsls	r0, r3
 801948c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801948e:	4318      	orrs	r0, r3
 8019490:	9041      	str	r0, [sp, #260]	; 0x104
 8019492:	46aa      	mov	sl, r5
 8019494:	f89a 3000 	ldrb.w	r3, [sl]
 8019498:	2b67      	cmp	r3, #103	; 0x67
 801949a:	f10a 0501 	add.w	r5, sl, #1
 801949e:	d82b      	bhi.n	80194f8 <__ssvfiscanf_r+0x12c>
 80194a0:	2b65      	cmp	r3, #101	; 0x65
 80194a2:	f080 809f 	bcs.w	80195e4 <__ssvfiscanf_r+0x218>
 80194a6:	2b47      	cmp	r3, #71	; 0x47
 80194a8:	d810      	bhi.n	80194cc <__ssvfiscanf_r+0x100>
 80194aa:	2b45      	cmp	r3, #69	; 0x45
 80194ac:	f080 809a 	bcs.w	80195e4 <__ssvfiscanf_r+0x218>
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d06c      	beq.n	801958e <__ssvfiscanf_r+0x1c2>
 80194b4:	2b25      	cmp	r3, #37	; 0x25
 80194b6:	d051      	beq.n	801955c <__ssvfiscanf_r+0x190>
 80194b8:	2303      	movs	r3, #3
 80194ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80194bc:	9742      	str	r7, [sp, #264]	; 0x108
 80194be:	e027      	b.n	8019510 <__ssvfiscanf_r+0x144>
 80194c0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80194c2:	fb07 1303 	mla	r3, r7, r3, r1
 80194c6:	3b30      	subs	r3, #48	; 0x30
 80194c8:	9343      	str	r3, [sp, #268]	; 0x10c
 80194ca:	e7cf      	b.n	801946c <__ssvfiscanf_r+0xa0>
 80194cc:	2b5b      	cmp	r3, #91	; 0x5b
 80194ce:	d06a      	beq.n	80195a6 <__ssvfiscanf_r+0x1da>
 80194d0:	d80c      	bhi.n	80194ec <__ssvfiscanf_r+0x120>
 80194d2:	2b58      	cmp	r3, #88	; 0x58
 80194d4:	d1f0      	bne.n	80194b8 <__ssvfiscanf_r+0xec>
 80194d6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80194d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80194dc:	9241      	str	r2, [sp, #260]	; 0x104
 80194de:	2210      	movs	r2, #16
 80194e0:	9242      	str	r2, [sp, #264]	; 0x108
 80194e2:	2b6e      	cmp	r3, #110	; 0x6e
 80194e4:	bf8c      	ite	hi
 80194e6:	2304      	movhi	r3, #4
 80194e8:	2303      	movls	r3, #3
 80194ea:	e010      	b.n	801950e <__ssvfiscanf_r+0x142>
 80194ec:	2b63      	cmp	r3, #99	; 0x63
 80194ee:	d065      	beq.n	80195bc <__ssvfiscanf_r+0x1f0>
 80194f0:	2b64      	cmp	r3, #100	; 0x64
 80194f2:	d1e1      	bne.n	80194b8 <__ssvfiscanf_r+0xec>
 80194f4:	9742      	str	r7, [sp, #264]	; 0x108
 80194f6:	e7f4      	b.n	80194e2 <__ssvfiscanf_r+0x116>
 80194f8:	2b70      	cmp	r3, #112	; 0x70
 80194fa:	d04b      	beq.n	8019594 <__ssvfiscanf_r+0x1c8>
 80194fc:	d826      	bhi.n	801954c <__ssvfiscanf_r+0x180>
 80194fe:	2b6e      	cmp	r3, #110	; 0x6e
 8019500:	d062      	beq.n	80195c8 <__ssvfiscanf_r+0x1fc>
 8019502:	d84c      	bhi.n	801959e <__ssvfiscanf_r+0x1d2>
 8019504:	2b69      	cmp	r3, #105	; 0x69
 8019506:	d1d7      	bne.n	80194b8 <__ssvfiscanf_r+0xec>
 8019508:	2300      	movs	r3, #0
 801950a:	9342      	str	r3, [sp, #264]	; 0x108
 801950c:	2303      	movs	r3, #3
 801950e:	9347      	str	r3, [sp, #284]	; 0x11c
 8019510:	6863      	ldr	r3, [r4, #4]
 8019512:	2b00      	cmp	r3, #0
 8019514:	dd68      	ble.n	80195e8 <__ssvfiscanf_r+0x21c>
 8019516:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019518:	0659      	lsls	r1, r3, #25
 801951a:	d407      	bmi.n	801952c <__ssvfiscanf_r+0x160>
 801951c:	f7ff f8b2 	bl	8018684 <__locale_ctype_ptr>
 8019520:	6823      	ldr	r3, [r4, #0]
 8019522:	781a      	ldrb	r2, [r3, #0]
 8019524:	4410      	add	r0, r2
 8019526:	7842      	ldrb	r2, [r0, #1]
 8019528:	0712      	lsls	r2, r2, #28
 801952a:	d464      	bmi.n	80195f6 <__ssvfiscanf_r+0x22a>
 801952c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801952e:	2b02      	cmp	r3, #2
 8019530:	dc73      	bgt.n	801961a <__ssvfiscanf_r+0x24e>
 8019532:	466b      	mov	r3, sp
 8019534:	4622      	mov	r2, r4
 8019536:	a941      	add	r1, sp, #260	; 0x104
 8019538:	4630      	mov	r0, r6
 801953a:	f000 f897 	bl	801966c <_scanf_chars>
 801953e:	2801      	cmp	r0, #1
 8019540:	f000 8089 	beq.w	8019656 <__ssvfiscanf_r+0x28a>
 8019544:	2802      	cmp	r0, #2
 8019546:	f47f af71 	bne.w	801942c <__ssvfiscanf_r+0x60>
 801954a:	e01d      	b.n	8019588 <__ssvfiscanf_r+0x1bc>
 801954c:	2b75      	cmp	r3, #117	; 0x75
 801954e:	d0d1      	beq.n	80194f4 <__ssvfiscanf_r+0x128>
 8019550:	2b78      	cmp	r3, #120	; 0x78
 8019552:	d0c0      	beq.n	80194d6 <__ssvfiscanf_r+0x10a>
 8019554:	2b73      	cmp	r3, #115	; 0x73
 8019556:	d1af      	bne.n	80194b8 <__ssvfiscanf_r+0xec>
 8019558:	2302      	movs	r3, #2
 801955a:	e7d8      	b.n	801950e <__ssvfiscanf_r+0x142>
 801955c:	6863      	ldr	r3, [r4, #4]
 801955e:	2b00      	cmp	r3, #0
 8019560:	dd0c      	ble.n	801957c <__ssvfiscanf_r+0x1b0>
 8019562:	6823      	ldr	r3, [r4, #0]
 8019564:	781a      	ldrb	r2, [r3, #0]
 8019566:	455a      	cmp	r2, fp
 8019568:	d175      	bne.n	8019656 <__ssvfiscanf_r+0x28a>
 801956a:	3301      	adds	r3, #1
 801956c:	6862      	ldr	r2, [r4, #4]
 801956e:	6023      	str	r3, [r4, #0]
 8019570:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019572:	3a01      	subs	r2, #1
 8019574:	3301      	adds	r3, #1
 8019576:	6062      	str	r2, [r4, #4]
 8019578:	9345      	str	r3, [sp, #276]	; 0x114
 801957a:	e757      	b.n	801942c <__ssvfiscanf_r+0x60>
 801957c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801957e:	4621      	mov	r1, r4
 8019580:	4630      	mov	r0, r6
 8019582:	4798      	blx	r3
 8019584:	2800      	cmp	r0, #0
 8019586:	d0ec      	beq.n	8019562 <__ssvfiscanf_r+0x196>
 8019588:	9844      	ldr	r0, [sp, #272]	; 0x110
 801958a:	2800      	cmp	r0, #0
 801958c:	d159      	bne.n	8019642 <__ssvfiscanf_r+0x276>
 801958e:	f04f 30ff 	mov.w	r0, #4294967295
 8019592:	e05c      	b.n	801964e <__ssvfiscanf_r+0x282>
 8019594:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019596:	f042 0220 	orr.w	r2, r2, #32
 801959a:	9241      	str	r2, [sp, #260]	; 0x104
 801959c:	e79b      	b.n	80194d6 <__ssvfiscanf_r+0x10a>
 801959e:	2308      	movs	r3, #8
 80195a0:	9342      	str	r3, [sp, #264]	; 0x108
 80195a2:	2304      	movs	r3, #4
 80195a4:	e7b3      	b.n	801950e <__ssvfiscanf_r+0x142>
 80195a6:	4629      	mov	r1, r5
 80195a8:	4640      	mov	r0, r8
 80195aa:	f000 f9c7 	bl	801993c <__sccl>
 80195ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195b4:	9341      	str	r3, [sp, #260]	; 0x104
 80195b6:	4605      	mov	r5, r0
 80195b8:	2301      	movs	r3, #1
 80195ba:	e7a8      	b.n	801950e <__ssvfiscanf_r+0x142>
 80195bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80195c2:	9341      	str	r3, [sp, #260]	; 0x104
 80195c4:	2300      	movs	r3, #0
 80195c6:	e7a2      	b.n	801950e <__ssvfiscanf_r+0x142>
 80195c8:	9841      	ldr	r0, [sp, #260]	; 0x104
 80195ca:	06c3      	lsls	r3, r0, #27
 80195cc:	f53f af2e 	bmi.w	801942c <__ssvfiscanf_r+0x60>
 80195d0:	9b00      	ldr	r3, [sp, #0]
 80195d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195d4:	1d19      	adds	r1, r3, #4
 80195d6:	9100      	str	r1, [sp, #0]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	07c0      	lsls	r0, r0, #31
 80195dc:	bf4c      	ite	mi
 80195de:	801a      	strhmi	r2, [r3, #0]
 80195e0:	601a      	strpl	r2, [r3, #0]
 80195e2:	e723      	b.n	801942c <__ssvfiscanf_r+0x60>
 80195e4:	2305      	movs	r3, #5
 80195e6:	e792      	b.n	801950e <__ssvfiscanf_r+0x142>
 80195e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80195ea:	4621      	mov	r1, r4
 80195ec:	4630      	mov	r0, r6
 80195ee:	4798      	blx	r3
 80195f0:	2800      	cmp	r0, #0
 80195f2:	d090      	beq.n	8019516 <__ssvfiscanf_r+0x14a>
 80195f4:	e7c8      	b.n	8019588 <__ssvfiscanf_r+0x1bc>
 80195f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80195f8:	3201      	adds	r2, #1
 80195fa:	9245      	str	r2, [sp, #276]	; 0x114
 80195fc:	6862      	ldr	r2, [r4, #4]
 80195fe:	3a01      	subs	r2, #1
 8019600:	2a00      	cmp	r2, #0
 8019602:	6062      	str	r2, [r4, #4]
 8019604:	dd02      	ble.n	801960c <__ssvfiscanf_r+0x240>
 8019606:	3301      	adds	r3, #1
 8019608:	6023      	str	r3, [r4, #0]
 801960a:	e787      	b.n	801951c <__ssvfiscanf_r+0x150>
 801960c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801960e:	4621      	mov	r1, r4
 8019610:	4630      	mov	r0, r6
 8019612:	4798      	blx	r3
 8019614:	2800      	cmp	r0, #0
 8019616:	d081      	beq.n	801951c <__ssvfiscanf_r+0x150>
 8019618:	e7b6      	b.n	8019588 <__ssvfiscanf_r+0x1bc>
 801961a:	2b04      	cmp	r3, #4
 801961c:	dc06      	bgt.n	801962c <__ssvfiscanf_r+0x260>
 801961e:	466b      	mov	r3, sp
 8019620:	4622      	mov	r2, r4
 8019622:	a941      	add	r1, sp, #260	; 0x104
 8019624:	4630      	mov	r0, r6
 8019626:	f000 f885 	bl	8019734 <_scanf_i>
 801962a:	e788      	b.n	801953e <__ssvfiscanf_r+0x172>
 801962c:	4b0e      	ldr	r3, [pc, #56]	; (8019668 <__ssvfiscanf_r+0x29c>)
 801962e:	2b00      	cmp	r3, #0
 8019630:	f43f aefc 	beq.w	801942c <__ssvfiscanf_r+0x60>
 8019634:	466b      	mov	r3, sp
 8019636:	4622      	mov	r2, r4
 8019638:	a941      	add	r1, sp, #260	; 0x104
 801963a:	4630      	mov	r0, r6
 801963c:	f7fc fd74 	bl	8016128 <_scanf_float>
 8019640:	e77d      	b.n	801953e <__ssvfiscanf_r+0x172>
 8019642:	89a3      	ldrh	r3, [r4, #12]
 8019644:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019648:	bf18      	it	ne
 801964a:	f04f 30ff 	movne.w	r0, #4294967295
 801964e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019656:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019658:	e7f9      	b.n	801964e <__ssvfiscanf_r+0x282>
 801965a:	bf00      	nop
 801965c:	08019319 	.word	0x08019319
 8019660:	08019393 	.word	0x08019393
 8019664:	0801a48a 	.word	0x0801a48a
 8019668:	08016129 	.word	0x08016129

0801966c <_scanf_chars>:
 801966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019670:	4615      	mov	r5, r2
 8019672:	688a      	ldr	r2, [r1, #8]
 8019674:	4680      	mov	r8, r0
 8019676:	460c      	mov	r4, r1
 8019678:	b932      	cbnz	r2, 8019688 <_scanf_chars+0x1c>
 801967a:	698a      	ldr	r2, [r1, #24]
 801967c:	2a00      	cmp	r2, #0
 801967e:	bf14      	ite	ne
 8019680:	f04f 32ff 	movne.w	r2, #4294967295
 8019684:	2201      	moveq	r2, #1
 8019686:	608a      	str	r2, [r1, #8]
 8019688:	6822      	ldr	r2, [r4, #0]
 801968a:	06d1      	lsls	r1, r2, #27
 801968c:	bf5f      	itttt	pl
 801968e:	681a      	ldrpl	r2, [r3, #0]
 8019690:	1d11      	addpl	r1, r2, #4
 8019692:	6019      	strpl	r1, [r3, #0]
 8019694:	6817      	ldrpl	r7, [r2, #0]
 8019696:	2600      	movs	r6, #0
 8019698:	69a3      	ldr	r3, [r4, #24]
 801969a:	b1db      	cbz	r3, 80196d4 <_scanf_chars+0x68>
 801969c:	2b01      	cmp	r3, #1
 801969e:	d107      	bne.n	80196b0 <_scanf_chars+0x44>
 80196a0:	682b      	ldr	r3, [r5, #0]
 80196a2:	6962      	ldr	r2, [r4, #20]
 80196a4:	781b      	ldrb	r3, [r3, #0]
 80196a6:	5cd3      	ldrb	r3, [r2, r3]
 80196a8:	b9a3      	cbnz	r3, 80196d4 <_scanf_chars+0x68>
 80196aa:	2e00      	cmp	r6, #0
 80196ac:	d132      	bne.n	8019714 <_scanf_chars+0xa8>
 80196ae:	e006      	b.n	80196be <_scanf_chars+0x52>
 80196b0:	2b02      	cmp	r3, #2
 80196b2:	d007      	beq.n	80196c4 <_scanf_chars+0x58>
 80196b4:	2e00      	cmp	r6, #0
 80196b6:	d12d      	bne.n	8019714 <_scanf_chars+0xa8>
 80196b8:	69a3      	ldr	r3, [r4, #24]
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	d12a      	bne.n	8019714 <_scanf_chars+0xa8>
 80196be:	2001      	movs	r0, #1
 80196c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196c4:	f7fe ffde 	bl	8018684 <__locale_ctype_ptr>
 80196c8:	682b      	ldr	r3, [r5, #0]
 80196ca:	781b      	ldrb	r3, [r3, #0]
 80196cc:	4418      	add	r0, r3
 80196ce:	7843      	ldrb	r3, [r0, #1]
 80196d0:	071b      	lsls	r3, r3, #28
 80196d2:	d4ef      	bmi.n	80196b4 <_scanf_chars+0x48>
 80196d4:	6823      	ldr	r3, [r4, #0]
 80196d6:	06da      	lsls	r2, r3, #27
 80196d8:	bf5e      	ittt	pl
 80196da:	682b      	ldrpl	r3, [r5, #0]
 80196dc:	781b      	ldrbpl	r3, [r3, #0]
 80196de:	703b      	strbpl	r3, [r7, #0]
 80196e0:	682a      	ldr	r2, [r5, #0]
 80196e2:	686b      	ldr	r3, [r5, #4]
 80196e4:	f102 0201 	add.w	r2, r2, #1
 80196e8:	602a      	str	r2, [r5, #0]
 80196ea:	68a2      	ldr	r2, [r4, #8]
 80196ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80196f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80196f4:	606b      	str	r3, [r5, #4]
 80196f6:	f106 0601 	add.w	r6, r6, #1
 80196fa:	bf58      	it	pl
 80196fc:	3701      	addpl	r7, #1
 80196fe:	60a2      	str	r2, [r4, #8]
 8019700:	b142      	cbz	r2, 8019714 <_scanf_chars+0xa8>
 8019702:	2b00      	cmp	r3, #0
 8019704:	dcc8      	bgt.n	8019698 <_scanf_chars+0x2c>
 8019706:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801970a:	4629      	mov	r1, r5
 801970c:	4640      	mov	r0, r8
 801970e:	4798      	blx	r3
 8019710:	2800      	cmp	r0, #0
 8019712:	d0c1      	beq.n	8019698 <_scanf_chars+0x2c>
 8019714:	6823      	ldr	r3, [r4, #0]
 8019716:	f013 0310 	ands.w	r3, r3, #16
 801971a:	d105      	bne.n	8019728 <_scanf_chars+0xbc>
 801971c:	68e2      	ldr	r2, [r4, #12]
 801971e:	3201      	adds	r2, #1
 8019720:	60e2      	str	r2, [r4, #12]
 8019722:	69a2      	ldr	r2, [r4, #24]
 8019724:	b102      	cbz	r2, 8019728 <_scanf_chars+0xbc>
 8019726:	703b      	strb	r3, [r7, #0]
 8019728:	6923      	ldr	r3, [r4, #16]
 801972a:	441e      	add	r6, r3
 801972c:	6126      	str	r6, [r4, #16]
 801972e:	2000      	movs	r0, #0
 8019730:	e7c6      	b.n	80196c0 <_scanf_chars+0x54>
	...

08019734 <_scanf_i>:
 8019734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019738:	469a      	mov	sl, r3
 801973a:	4b74      	ldr	r3, [pc, #464]	; (801990c <_scanf_i+0x1d8>)
 801973c:	460c      	mov	r4, r1
 801973e:	4683      	mov	fp, r0
 8019740:	4616      	mov	r6, r2
 8019742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019746:	b087      	sub	sp, #28
 8019748:	ab03      	add	r3, sp, #12
 801974a:	68a7      	ldr	r7, [r4, #8]
 801974c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019750:	4b6f      	ldr	r3, [pc, #444]	; (8019910 <_scanf_i+0x1dc>)
 8019752:	69a1      	ldr	r1, [r4, #24]
 8019754:	4a6f      	ldr	r2, [pc, #444]	; (8019914 <_scanf_i+0x1e0>)
 8019756:	2903      	cmp	r1, #3
 8019758:	bf08      	it	eq
 801975a:	461a      	moveq	r2, r3
 801975c:	1e7b      	subs	r3, r7, #1
 801975e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019762:	bf84      	itt	hi
 8019764:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019768:	60a3      	strhi	r3, [r4, #8]
 801976a:	6823      	ldr	r3, [r4, #0]
 801976c:	9200      	str	r2, [sp, #0]
 801976e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019772:	bf88      	it	hi
 8019774:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019778:	f104 091c 	add.w	r9, r4, #28
 801977c:	6023      	str	r3, [r4, #0]
 801977e:	bf8c      	ite	hi
 8019780:	197f      	addhi	r7, r7, r5
 8019782:	2700      	movls	r7, #0
 8019784:	464b      	mov	r3, r9
 8019786:	f04f 0800 	mov.w	r8, #0
 801978a:	9301      	str	r3, [sp, #4]
 801978c:	6831      	ldr	r1, [r6, #0]
 801978e:	ab03      	add	r3, sp, #12
 8019790:	2202      	movs	r2, #2
 8019792:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019796:	7809      	ldrb	r1, [r1, #0]
 8019798:	f7e6 fd3a 	bl	8000210 <memchr>
 801979c:	9b01      	ldr	r3, [sp, #4]
 801979e:	b330      	cbz	r0, 80197ee <_scanf_i+0xba>
 80197a0:	f1b8 0f01 	cmp.w	r8, #1
 80197a4:	d15a      	bne.n	801985c <_scanf_i+0x128>
 80197a6:	6862      	ldr	r2, [r4, #4]
 80197a8:	b92a      	cbnz	r2, 80197b6 <_scanf_i+0x82>
 80197aa:	6822      	ldr	r2, [r4, #0]
 80197ac:	2108      	movs	r1, #8
 80197ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80197b2:	6061      	str	r1, [r4, #4]
 80197b4:	6022      	str	r2, [r4, #0]
 80197b6:	6822      	ldr	r2, [r4, #0]
 80197b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80197bc:	6022      	str	r2, [r4, #0]
 80197be:	68a2      	ldr	r2, [r4, #8]
 80197c0:	1e51      	subs	r1, r2, #1
 80197c2:	60a1      	str	r1, [r4, #8]
 80197c4:	b19a      	cbz	r2, 80197ee <_scanf_i+0xba>
 80197c6:	6832      	ldr	r2, [r6, #0]
 80197c8:	1c51      	adds	r1, r2, #1
 80197ca:	6031      	str	r1, [r6, #0]
 80197cc:	7812      	ldrb	r2, [r2, #0]
 80197ce:	701a      	strb	r2, [r3, #0]
 80197d0:	1c5d      	adds	r5, r3, #1
 80197d2:	6873      	ldr	r3, [r6, #4]
 80197d4:	3b01      	subs	r3, #1
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	6073      	str	r3, [r6, #4]
 80197da:	dc07      	bgt.n	80197ec <_scanf_i+0xb8>
 80197dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197e0:	4631      	mov	r1, r6
 80197e2:	4658      	mov	r0, fp
 80197e4:	4798      	blx	r3
 80197e6:	2800      	cmp	r0, #0
 80197e8:	f040 8086 	bne.w	80198f8 <_scanf_i+0x1c4>
 80197ec:	462b      	mov	r3, r5
 80197ee:	f108 0801 	add.w	r8, r8, #1
 80197f2:	f1b8 0f03 	cmp.w	r8, #3
 80197f6:	d1c8      	bne.n	801978a <_scanf_i+0x56>
 80197f8:	6862      	ldr	r2, [r4, #4]
 80197fa:	b90a      	cbnz	r2, 8019800 <_scanf_i+0xcc>
 80197fc:	220a      	movs	r2, #10
 80197fe:	6062      	str	r2, [r4, #4]
 8019800:	6862      	ldr	r2, [r4, #4]
 8019802:	4945      	ldr	r1, [pc, #276]	; (8019918 <_scanf_i+0x1e4>)
 8019804:	6960      	ldr	r0, [r4, #20]
 8019806:	9301      	str	r3, [sp, #4]
 8019808:	1a89      	subs	r1, r1, r2
 801980a:	f000 f897 	bl	801993c <__sccl>
 801980e:	9b01      	ldr	r3, [sp, #4]
 8019810:	f04f 0800 	mov.w	r8, #0
 8019814:	461d      	mov	r5, r3
 8019816:	68a3      	ldr	r3, [r4, #8]
 8019818:	6822      	ldr	r2, [r4, #0]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d03a      	beq.n	8019894 <_scanf_i+0x160>
 801981e:	6831      	ldr	r1, [r6, #0]
 8019820:	6960      	ldr	r0, [r4, #20]
 8019822:	f891 c000 	ldrb.w	ip, [r1]
 8019826:	f810 000c 	ldrb.w	r0, [r0, ip]
 801982a:	2800      	cmp	r0, #0
 801982c:	d032      	beq.n	8019894 <_scanf_i+0x160>
 801982e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019832:	d121      	bne.n	8019878 <_scanf_i+0x144>
 8019834:	0510      	lsls	r0, r2, #20
 8019836:	d51f      	bpl.n	8019878 <_scanf_i+0x144>
 8019838:	f108 0801 	add.w	r8, r8, #1
 801983c:	b117      	cbz	r7, 8019844 <_scanf_i+0x110>
 801983e:	3301      	adds	r3, #1
 8019840:	3f01      	subs	r7, #1
 8019842:	60a3      	str	r3, [r4, #8]
 8019844:	6873      	ldr	r3, [r6, #4]
 8019846:	3b01      	subs	r3, #1
 8019848:	2b00      	cmp	r3, #0
 801984a:	6073      	str	r3, [r6, #4]
 801984c:	dd1b      	ble.n	8019886 <_scanf_i+0x152>
 801984e:	6833      	ldr	r3, [r6, #0]
 8019850:	3301      	adds	r3, #1
 8019852:	6033      	str	r3, [r6, #0]
 8019854:	68a3      	ldr	r3, [r4, #8]
 8019856:	3b01      	subs	r3, #1
 8019858:	60a3      	str	r3, [r4, #8]
 801985a:	e7dc      	b.n	8019816 <_scanf_i+0xe2>
 801985c:	f1b8 0f02 	cmp.w	r8, #2
 8019860:	d1ad      	bne.n	80197be <_scanf_i+0x8a>
 8019862:	6822      	ldr	r2, [r4, #0]
 8019864:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019868:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801986c:	d1bf      	bne.n	80197ee <_scanf_i+0xba>
 801986e:	2110      	movs	r1, #16
 8019870:	6061      	str	r1, [r4, #4]
 8019872:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019876:	e7a1      	b.n	80197bc <_scanf_i+0x88>
 8019878:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801987c:	6022      	str	r2, [r4, #0]
 801987e:	780b      	ldrb	r3, [r1, #0]
 8019880:	702b      	strb	r3, [r5, #0]
 8019882:	3501      	adds	r5, #1
 8019884:	e7de      	b.n	8019844 <_scanf_i+0x110>
 8019886:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801988a:	4631      	mov	r1, r6
 801988c:	4658      	mov	r0, fp
 801988e:	4798      	blx	r3
 8019890:	2800      	cmp	r0, #0
 8019892:	d0df      	beq.n	8019854 <_scanf_i+0x120>
 8019894:	6823      	ldr	r3, [r4, #0]
 8019896:	05d9      	lsls	r1, r3, #23
 8019898:	d50c      	bpl.n	80198b4 <_scanf_i+0x180>
 801989a:	454d      	cmp	r5, r9
 801989c:	d908      	bls.n	80198b0 <_scanf_i+0x17c>
 801989e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80198a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80198a6:	4632      	mov	r2, r6
 80198a8:	4658      	mov	r0, fp
 80198aa:	4798      	blx	r3
 80198ac:	1e6f      	subs	r7, r5, #1
 80198ae:	463d      	mov	r5, r7
 80198b0:	454d      	cmp	r5, r9
 80198b2:	d029      	beq.n	8019908 <_scanf_i+0x1d4>
 80198b4:	6822      	ldr	r2, [r4, #0]
 80198b6:	f012 0210 	ands.w	r2, r2, #16
 80198ba:	d113      	bne.n	80198e4 <_scanf_i+0x1b0>
 80198bc:	702a      	strb	r2, [r5, #0]
 80198be:	6863      	ldr	r3, [r4, #4]
 80198c0:	9e00      	ldr	r6, [sp, #0]
 80198c2:	4649      	mov	r1, r9
 80198c4:	4658      	mov	r0, fp
 80198c6:	47b0      	blx	r6
 80198c8:	f8da 3000 	ldr.w	r3, [sl]
 80198cc:	6821      	ldr	r1, [r4, #0]
 80198ce:	1d1a      	adds	r2, r3, #4
 80198d0:	f8ca 2000 	str.w	r2, [sl]
 80198d4:	f011 0f20 	tst.w	r1, #32
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	d010      	beq.n	80198fe <_scanf_i+0x1ca>
 80198dc:	6018      	str	r0, [r3, #0]
 80198de:	68e3      	ldr	r3, [r4, #12]
 80198e0:	3301      	adds	r3, #1
 80198e2:	60e3      	str	r3, [r4, #12]
 80198e4:	eba5 0509 	sub.w	r5, r5, r9
 80198e8:	44a8      	add	r8, r5
 80198ea:	6925      	ldr	r5, [r4, #16]
 80198ec:	4445      	add	r5, r8
 80198ee:	6125      	str	r5, [r4, #16]
 80198f0:	2000      	movs	r0, #0
 80198f2:	b007      	add	sp, #28
 80198f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198f8:	f04f 0800 	mov.w	r8, #0
 80198fc:	e7ca      	b.n	8019894 <_scanf_i+0x160>
 80198fe:	07ca      	lsls	r2, r1, #31
 8019900:	bf4c      	ite	mi
 8019902:	8018      	strhmi	r0, [r3, #0]
 8019904:	6018      	strpl	r0, [r3, #0]
 8019906:	e7ea      	b.n	80198de <_scanf_i+0x1aa>
 8019908:	2001      	movs	r0, #1
 801990a:	e7f2      	b.n	80198f2 <_scanf_i+0x1be>
 801990c:	0801a04c 	.word	0x0801a04c
 8019910:	08017341 	.word	0x08017341
 8019914:	08019ab9 	.word	0x08019ab9
 8019918:	0801a4a5 	.word	0x0801a4a5

0801991c <_sbrk_r>:
 801991c:	b538      	push	{r3, r4, r5, lr}
 801991e:	4c06      	ldr	r4, [pc, #24]	; (8019938 <_sbrk_r+0x1c>)
 8019920:	2300      	movs	r3, #0
 8019922:	4605      	mov	r5, r0
 8019924:	4608      	mov	r0, r1
 8019926:	6023      	str	r3, [r4, #0]
 8019928:	f7ed ffee 	bl	8007908 <_sbrk>
 801992c:	1c43      	adds	r3, r0, #1
 801992e:	d102      	bne.n	8019936 <_sbrk_r+0x1a>
 8019930:	6823      	ldr	r3, [r4, #0]
 8019932:	b103      	cbz	r3, 8019936 <_sbrk_r+0x1a>
 8019934:	602b      	str	r3, [r5, #0]
 8019936:	bd38      	pop	{r3, r4, r5, pc}
 8019938:	20046c9c 	.word	0x20046c9c

0801993c <__sccl>:
 801993c:	b570      	push	{r4, r5, r6, lr}
 801993e:	780b      	ldrb	r3, [r1, #0]
 8019940:	2b5e      	cmp	r3, #94	; 0x5e
 8019942:	bf13      	iteet	ne
 8019944:	1c4a      	addne	r2, r1, #1
 8019946:	1c8a      	addeq	r2, r1, #2
 8019948:	784b      	ldrbeq	r3, [r1, #1]
 801994a:	2100      	movne	r1, #0
 801994c:	bf08      	it	eq
 801994e:	2101      	moveq	r1, #1
 8019950:	1e44      	subs	r4, r0, #1
 8019952:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019956:	f804 1f01 	strb.w	r1, [r4, #1]!
 801995a:	42ac      	cmp	r4, r5
 801995c:	d1fb      	bne.n	8019956 <__sccl+0x1a>
 801995e:	b913      	cbnz	r3, 8019966 <__sccl+0x2a>
 8019960:	3a01      	subs	r2, #1
 8019962:	4610      	mov	r0, r2
 8019964:	bd70      	pop	{r4, r5, r6, pc}
 8019966:	f081 0401 	eor.w	r4, r1, #1
 801996a:	54c4      	strb	r4, [r0, r3]
 801996c:	1c51      	adds	r1, r2, #1
 801996e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019972:	2d2d      	cmp	r5, #45	; 0x2d
 8019974:	f101 36ff 	add.w	r6, r1, #4294967295
 8019978:	460a      	mov	r2, r1
 801997a:	d006      	beq.n	801998a <__sccl+0x4e>
 801997c:	2d5d      	cmp	r5, #93	; 0x5d
 801997e:	d0f0      	beq.n	8019962 <__sccl+0x26>
 8019980:	b90d      	cbnz	r5, 8019986 <__sccl+0x4a>
 8019982:	4632      	mov	r2, r6
 8019984:	e7ed      	b.n	8019962 <__sccl+0x26>
 8019986:	462b      	mov	r3, r5
 8019988:	e7ef      	b.n	801996a <__sccl+0x2e>
 801998a:	780e      	ldrb	r6, [r1, #0]
 801998c:	2e5d      	cmp	r6, #93	; 0x5d
 801998e:	d0fa      	beq.n	8019986 <__sccl+0x4a>
 8019990:	42b3      	cmp	r3, r6
 8019992:	dcf8      	bgt.n	8019986 <__sccl+0x4a>
 8019994:	3301      	adds	r3, #1
 8019996:	429e      	cmp	r6, r3
 8019998:	54c4      	strb	r4, [r0, r3]
 801999a:	dcfb      	bgt.n	8019994 <__sccl+0x58>
 801999c:	3102      	adds	r1, #2
 801999e:	e7e6      	b.n	801996e <__sccl+0x32>

080199a0 <strncmp>:
 80199a0:	b510      	push	{r4, lr}
 80199a2:	b16a      	cbz	r2, 80199c0 <strncmp+0x20>
 80199a4:	3901      	subs	r1, #1
 80199a6:	1884      	adds	r4, r0, r2
 80199a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80199ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80199b0:	4293      	cmp	r3, r2
 80199b2:	d103      	bne.n	80199bc <strncmp+0x1c>
 80199b4:	42a0      	cmp	r0, r4
 80199b6:	d001      	beq.n	80199bc <strncmp+0x1c>
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d1f5      	bne.n	80199a8 <strncmp+0x8>
 80199bc:	1a98      	subs	r0, r3, r2
 80199be:	bd10      	pop	{r4, pc}
 80199c0:	4610      	mov	r0, r2
 80199c2:	e7fc      	b.n	80199be <strncmp+0x1e>

080199c4 <_strtoul_l.isra.0>:
 80199c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199c8:	4680      	mov	r8, r0
 80199ca:	4689      	mov	r9, r1
 80199cc:	4692      	mov	sl, r2
 80199ce:	461e      	mov	r6, r3
 80199d0:	460f      	mov	r7, r1
 80199d2:	463d      	mov	r5, r7
 80199d4:	9808      	ldr	r0, [sp, #32]
 80199d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80199da:	f7fe fe4f 	bl	801867c <__locale_ctype_ptr_l>
 80199de:	4420      	add	r0, r4
 80199e0:	7843      	ldrb	r3, [r0, #1]
 80199e2:	f013 0308 	ands.w	r3, r3, #8
 80199e6:	d130      	bne.n	8019a4a <_strtoul_l.isra.0+0x86>
 80199e8:	2c2d      	cmp	r4, #45	; 0x2d
 80199ea:	d130      	bne.n	8019a4e <_strtoul_l.isra.0+0x8a>
 80199ec:	787c      	ldrb	r4, [r7, #1]
 80199ee:	1cbd      	adds	r5, r7, #2
 80199f0:	2101      	movs	r1, #1
 80199f2:	2e00      	cmp	r6, #0
 80199f4:	d05c      	beq.n	8019ab0 <_strtoul_l.isra.0+0xec>
 80199f6:	2e10      	cmp	r6, #16
 80199f8:	d109      	bne.n	8019a0e <_strtoul_l.isra.0+0x4a>
 80199fa:	2c30      	cmp	r4, #48	; 0x30
 80199fc:	d107      	bne.n	8019a0e <_strtoul_l.isra.0+0x4a>
 80199fe:	782b      	ldrb	r3, [r5, #0]
 8019a00:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019a04:	2b58      	cmp	r3, #88	; 0x58
 8019a06:	d14e      	bne.n	8019aa6 <_strtoul_l.isra.0+0xe2>
 8019a08:	786c      	ldrb	r4, [r5, #1]
 8019a0a:	2610      	movs	r6, #16
 8019a0c:	3502      	adds	r5, #2
 8019a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8019a12:	2300      	movs	r3, #0
 8019a14:	fbb2 f2f6 	udiv	r2, r2, r6
 8019a18:	fb06 fc02 	mul.w	ip, r6, r2
 8019a1c:	ea6f 0c0c 	mvn.w	ip, ip
 8019a20:	4618      	mov	r0, r3
 8019a22:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019a26:	2f09      	cmp	r7, #9
 8019a28:	d817      	bhi.n	8019a5a <_strtoul_l.isra.0+0x96>
 8019a2a:	463c      	mov	r4, r7
 8019a2c:	42a6      	cmp	r6, r4
 8019a2e:	dd23      	ble.n	8019a78 <_strtoul_l.isra.0+0xb4>
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	db1e      	blt.n	8019a72 <_strtoul_l.isra.0+0xae>
 8019a34:	4282      	cmp	r2, r0
 8019a36:	d31c      	bcc.n	8019a72 <_strtoul_l.isra.0+0xae>
 8019a38:	d101      	bne.n	8019a3e <_strtoul_l.isra.0+0x7a>
 8019a3a:	45a4      	cmp	ip, r4
 8019a3c:	db19      	blt.n	8019a72 <_strtoul_l.isra.0+0xae>
 8019a3e:	fb00 4006 	mla	r0, r0, r6, r4
 8019a42:	2301      	movs	r3, #1
 8019a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a48:	e7eb      	b.n	8019a22 <_strtoul_l.isra.0+0x5e>
 8019a4a:	462f      	mov	r7, r5
 8019a4c:	e7c1      	b.n	80199d2 <_strtoul_l.isra.0+0xe>
 8019a4e:	2c2b      	cmp	r4, #43	; 0x2b
 8019a50:	bf04      	itt	eq
 8019a52:	1cbd      	addeq	r5, r7, #2
 8019a54:	787c      	ldrbeq	r4, [r7, #1]
 8019a56:	4619      	mov	r1, r3
 8019a58:	e7cb      	b.n	80199f2 <_strtoul_l.isra.0+0x2e>
 8019a5a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019a5e:	2f19      	cmp	r7, #25
 8019a60:	d801      	bhi.n	8019a66 <_strtoul_l.isra.0+0xa2>
 8019a62:	3c37      	subs	r4, #55	; 0x37
 8019a64:	e7e2      	b.n	8019a2c <_strtoul_l.isra.0+0x68>
 8019a66:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019a6a:	2f19      	cmp	r7, #25
 8019a6c:	d804      	bhi.n	8019a78 <_strtoul_l.isra.0+0xb4>
 8019a6e:	3c57      	subs	r4, #87	; 0x57
 8019a70:	e7dc      	b.n	8019a2c <_strtoul_l.isra.0+0x68>
 8019a72:	f04f 33ff 	mov.w	r3, #4294967295
 8019a76:	e7e5      	b.n	8019a44 <_strtoul_l.isra.0+0x80>
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	da09      	bge.n	8019a90 <_strtoul_l.isra.0+0xcc>
 8019a7c:	2322      	movs	r3, #34	; 0x22
 8019a7e:	f8c8 3000 	str.w	r3, [r8]
 8019a82:	f04f 30ff 	mov.w	r0, #4294967295
 8019a86:	f1ba 0f00 	cmp.w	sl, #0
 8019a8a:	d107      	bne.n	8019a9c <_strtoul_l.isra.0+0xd8>
 8019a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a90:	b101      	cbz	r1, 8019a94 <_strtoul_l.isra.0+0xd0>
 8019a92:	4240      	negs	r0, r0
 8019a94:	f1ba 0f00 	cmp.w	sl, #0
 8019a98:	d0f8      	beq.n	8019a8c <_strtoul_l.isra.0+0xc8>
 8019a9a:	b10b      	cbz	r3, 8019aa0 <_strtoul_l.isra.0+0xdc>
 8019a9c:	f105 39ff 	add.w	r9, r5, #4294967295
 8019aa0:	f8ca 9000 	str.w	r9, [sl]
 8019aa4:	e7f2      	b.n	8019a8c <_strtoul_l.isra.0+0xc8>
 8019aa6:	2430      	movs	r4, #48	; 0x30
 8019aa8:	2e00      	cmp	r6, #0
 8019aaa:	d1b0      	bne.n	8019a0e <_strtoul_l.isra.0+0x4a>
 8019aac:	2608      	movs	r6, #8
 8019aae:	e7ae      	b.n	8019a0e <_strtoul_l.isra.0+0x4a>
 8019ab0:	2c30      	cmp	r4, #48	; 0x30
 8019ab2:	d0a4      	beq.n	80199fe <_strtoul_l.isra.0+0x3a>
 8019ab4:	260a      	movs	r6, #10
 8019ab6:	e7aa      	b.n	8019a0e <_strtoul_l.isra.0+0x4a>

08019ab8 <_strtoul_r>:
 8019ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019aba:	4c06      	ldr	r4, [pc, #24]	; (8019ad4 <_strtoul_r+0x1c>)
 8019abc:	4d06      	ldr	r5, [pc, #24]	; (8019ad8 <_strtoul_r+0x20>)
 8019abe:	6824      	ldr	r4, [r4, #0]
 8019ac0:	6a24      	ldr	r4, [r4, #32]
 8019ac2:	2c00      	cmp	r4, #0
 8019ac4:	bf08      	it	eq
 8019ac6:	462c      	moveq	r4, r5
 8019ac8:	9400      	str	r4, [sp, #0]
 8019aca:	f7ff ff7b 	bl	80199c4 <_strtoul_l.isra.0>
 8019ace:	b003      	add	sp, #12
 8019ad0:	bd30      	pop	{r4, r5, pc}
 8019ad2:	bf00      	nop
 8019ad4:	2000000c 	.word	0x2000000c
 8019ad8:	20000070 	.word	0x20000070

08019adc <__submore>:
 8019adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae0:	460c      	mov	r4, r1
 8019ae2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ae8:	4299      	cmp	r1, r3
 8019aea:	d11d      	bne.n	8019b28 <__submore+0x4c>
 8019aec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019af0:	f7ff fa66 	bl	8018fc0 <_malloc_r>
 8019af4:	b918      	cbnz	r0, 8019afe <__submore+0x22>
 8019af6:	f04f 30ff 	mov.w	r0, #4294967295
 8019afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019afe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b02:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b04:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019b08:	6360      	str	r0, [r4, #52]	; 0x34
 8019b0a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019b0e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019b12:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019b16:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019b1a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019b1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019b22:	6020      	str	r0, [r4, #0]
 8019b24:	2000      	movs	r0, #0
 8019b26:	e7e8      	b.n	8019afa <__submore+0x1e>
 8019b28:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019b2a:	0077      	lsls	r7, r6, #1
 8019b2c:	463a      	mov	r2, r7
 8019b2e:	f000 f837 	bl	8019ba0 <_realloc_r>
 8019b32:	4605      	mov	r5, r0
 8019b34:	2800      	cmp	r0, #0
 8019b36:	d0de      	beq.n	8019af6 <__submore+0x1a>
 8019b38:	eb00 0806 	add.w	r8, r0, r6
 8019b3c:	4601      	mov	r1, r0
 8019b3e:	4632      	mov	r2, r6
 8019b40:	4640      	mov	r0, r8
 8019b42:	f7fe fdd7 	bl	80186f4 <memcpy>
 8019b46:	f8c4 8000 	str.w	r8, [r4]
 8019b4a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019b4e:	e7e9      	b.n	8019b24 <__submore+0x48>

08019b50 <__ascii_wctomb>:
 8019b50:	b149      	cbz	r1, 8019b66 <__ascii_wctomb+0x16>
 8019b52:	2aff      	cmp	r2, #255	; 0xff
 8019b54:	bf85      	ittet	hi
 8019b56:	238a      	movhi	r3, #138	; 0x8a
 8019b58:	6003      	strhi	r3, [r0, #0]
 8019b5a:	700a      	strbls	r2, [r1, #0]
 8019b5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019b60:	bf98      	it	ls
 8019b62:	2001      	movls	r0, #1
 8019b64:	4770      	bx	lr
 8019b66:	4608      	mov	r0, r1
 8019b68:	4770      	bx	lr

08019b6a <memmove>:
 8019b6a:	4288      	cmp	r0, r1
 8019b6c:	b510      	push	{r4, lr}
 8019b6e:	eb01 0302 	add.w	r3, r1, r2
 8019b72:	d807      	bhi.n	8019b84 <memmove+0x1a>
 8019b74:	1e42      	subs	r2, r0, #1
 8019b76:	4299      	cmp	r1, r3
 8019b78:	d00a      	beq.n	8019b90 <memmove+0x26>
 8019b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019b82:	e7f8      	b.n	8019b76 <memmove+0xc>
 8019b84:	4283      	cmp	r3, r0
 8019b86:	d9f5      	bls.n	8019b74 <memmove+0xa>
 8019b88:	1881      	adds	r1, r0, r2
 8019b8a:	1ad2      	subs	r2, r2, r3
 8019b8c:	42d3      	cmn	r3, r2
 8019b8e:	d100      	bne.n	8019b92 <memmove+0x28>
 8019b90:	bd10      	pop	{r4, pc}
 8019b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019b9a:	e7f7      	b.n	8019b8c <memmove+0x22>

08019b9c <__malloc_lock>:
 8019b9c:	4770      	bx	lr

08019b9e <__malloc_unlock>:
 8019b9e:	4770      	bx	lr

08019ba0 <_realloc_r>:
 8019ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ba2:	4607      	mov	r7, r0
 8019ba4:	4614      	mov	r4, r2
 8019ba6:	460e      	mov	r6, r1
 8019ba8:	b921      	cbnz	r1, 8019bb4 <_realloc_r+0x14>
 8019baa:	4611      	mov	r1, r2
 8019bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019bb0:	f7ff ba06 	b.w	8018fc0 <_malloc_r>
 8019bb4:	b922      	cbnz	r2, 8019bc0 <_realloc_r+0x20>
 8019bb6:	f7ff f9b5 	bl	8018f24 <_free_r>
 8019bba:	4625      	mov	r5, r4
 8019bbc:	4628      	mov	r0, r5
 8019bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bc0:	f000 f814 	bl	8019bec <_malloc_usable_size_r>
 8019bc4:	42a0      	cmp	r0, r4
 8019bc6:	d20f      	bcs.n	8019be8 <_realloc_r+0x48>
 8019bc8:	4621      	mov	r1, r4
 8019bca:	4638      	mov	r0, r7
 8019bcc:	f7ff f9f8 	bl	8018fc0 <_malloc_r>
 8019bd0:	4605      	mov	r5, r0
 8019bd2:	2800      	cmp	r0, #0
 8019bd4:	d0f2      	beq.n	8019bbc <_realloc_r+0x1c>
 8019bd6:	4631      	mov	r1, r6
 8019bd8:	4622      	mov	r2, r4
 8019bda:	f7fe fd8b 	bl	80186f4 <memcpy>
 8019bde:	4631      	mov	r1, r6
 8019be0:	4638      	mov	r0, r7
 8019be2:	f7ff f99f 	bl	8018f24 <_free_r>
 8019be6:	e7e9      	b.n	8019bbc <_realloc_r+0x1c>
 8019be8:	4635      	mov	r5, r6
 8019bea:	e7e7      	b.n	8019bbc <_realloc_r+0x1c>

08019bec <_malloc_usable_size_r>:
 8019bec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bf0:	1f18      	subs	r0, r3, #4
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	bfbc      	itt	lt
 8019bf6:	580b      	ldrlt	r3, [r1, r0]
 8019bf8:	18c0      	addlt	r0, r0, r3
 8019bfa:	4770      	bx	lr

08019bfc <_init>:
 8019bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bfe:	bf00      	nop
 8019c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c02:	bc08      	pop	{r3}
 8019c04:	469e      	mov	lr, r3
 8019c06:	4770      	bx	lr

08019c08 <_fini>:
 8019c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c0a:	bf00      	nop
 8019c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c0e:	bc08      	pop	{r3}
 8019c10:	469e      	mov	lr, r3
 8019c12:	4770      	bx	lr
