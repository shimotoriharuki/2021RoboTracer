
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001777c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  08017940  08017940  00027940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080184dc  080184dc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080184dc  080184dc  000284dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080184e4  080184e4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080184e4  080184e4  000284e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080184ec  080184ec  000284ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080184f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023cc4  200001e0  080186cc  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20023ea4  080186cc  00033ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035367  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007621  00000000  00000000  00065573  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002100  00000000  00000000  0006cb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e30  00000000  00000000  0006ec98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036bdc  00000000  00000000  00070ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024c3a  00000000  00000000  000a76a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001100ac  00000000  00000000  000cc2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc38a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0f0  00000000  00000000  001dc408  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017924 	.word	0x08017924

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017924 	.word	0x08017924

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fd58 	bl	8007a8c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200219a8 	.word	0x200219a8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 fd40 	bl	8007a8c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200219a8 	.word	0x200219a8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 fbc9 	bl	80077b8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 f930 	bl	800628c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 f92a 	bl	800628c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 f924 	bl	800628c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 f91e 	bl	800628c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 f918 	bl	800628c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 f912 	bl	800628c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 f90c 	bl	800628c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 f906 	bl	800628c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 f900 	bl	800628c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 f8fa 	bl	800628c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 f8ee 	bl	800628c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 f8e8 	bl	800628c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fb49 	bl	80147c0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a faf8 	bl	800b7bc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a faf4 	bl	800b7bc <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20021bfc 	.word	0x20021bfc
 80011f0:	200218e0 	.word	0x200218e0
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f9f1 	bl	8001840 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa05 	bl	800186c <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fbd1 	bl	8010c1e <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200207ec 	.word	0x200207ec

0800148c <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write+0x98>)
 80014c6:	f012 f9eb 	bl	80138a0 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write+0x9c>)
 80014d8:	f00f fc15 	bl	8010d06 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write+0x9c>)
 80014e2:	f00f fc10 	bl	8010d06 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write+0x9c>)
 80014f4:	f00f f981 	bl	80107fa <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 f9d2 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017940 	.word	0x08017940
 8001524:	2002075c 	.word	0x2002075c
 8001528:	200207ec 	.word	0x200207ec
 800152c:	200207dc 	.word	0x200207dc

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f97a 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fb8c 	bl	8010c72 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fdf7 	bl	801114e <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f fb86 	bl	8010c72 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f981 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f012 f986 	bl	80138a0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fbb3 	bl	8010d06 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f f924 	bl	80107fa <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f975 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fb25 	bl	8010c1e <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2002065c 	.word	0x2002065c
 80015e4:	2001f518 	.word	0x2001f518
 80015e8:	08017950 	.word	0x08017950
 80015ec:	08017940 	.word	0x08017940
 80015f0:	2002075c 	.word	0x2002075c
 80015f4:	200207ec 	.word	0x200207ec
 80015f8:	200207dc 	.word	0x200207dc

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f914 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fb26 	bl	8010c72 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fd91 	bl	801114e <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fb20 	bl	8010c72 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f91b 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f012 f924 	bl	80138a0 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f fb51 	bl	8010d06 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f f8c2 	bl	80107fa <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f913 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fac3 	bl	8010c1e <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2002065c 	.word	0x2002065c
 80016a8:	2001f518 	.word	0x2001f518
 80016ac:	08017950 	.word	0x08017950
 80016b0:	08017954 	.word	0x08017954
 80016b4:	2002075c 	.word	0x2002075c
 80016b8:	200207ec 	.word	0x200207ec
 80016bc:	200207dc 	.word	0x200207dc

080016c0 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f8b2 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 80016dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80016e4:	481e      	ldr	r0, [pc, #120]	; (8001760 <sd_write_array_int+0xa0>)
 80016e6:	f00f fac4 	bl	8010c72 <f_chdir>
		f_unlink(filepath);	//一回消す
 80016ea:	481e      	ldr	r0, [pc, #120]	; (8001764 <sd_write_array_int+0xa4>)
 80016ec:	f00f fd2f 	bl	801114e <f_unlink>
		f_chdir("..");
 80016f0:	481d      	ldr	r0, [pc, #116]	; (8001768 <sd_write_array_int+0xa8>)
 80016f2:	f00f fabe 	bl	8010c72 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80016f6:	f000 f8b9 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80016fa:	2300      	movs	r3, #0
 80016fc:	82fb      	strh	r3, [r7, #22]
 80016fe:	e021      	b.n	8001744 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <sd_write_array_int+0xac>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <sd_write_array_int+0xb0>)
 8001712:	f012 f8c5 	bl	80138a0 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <sd_write_array_int+0xb4>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	4619      	mov	r1, r3
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <sd_write_array_int+0xb4>)
 800171e:	f00f faf2 	bl	8010d06 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <sd_write_array_int+0xb0>)
 8001724:	f7fe fd6c 	bl	8000200 <strlen>
 8001728:	4602      	mov	r2, r0
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <sd_write_array_int+0xb8>)
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <sd_write_array_int+0xb0>)
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <sd_write_array_int+0xb4>)
 8001730:	f00f f863 	bl	80107fa <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001734:	f000 f8b4 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	82fb      	strh	r3, [r7, #22]
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbd7      	blt.n	8001700 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <sd_write_array_int+0xb4>)
 8001752:	f00f fa64 	bl	8010c1e <f_close>

	return ret;
 8001756:	7d7b      	ldrb	r3, [r7, #21]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2002065c 	.word	0x2002065c
 8001764:	2001f518 	.word	0x2001f518
 8001768:	08017950 	.word	0x08017950
 800176c:	08017964 	.word	0x08017964
 8001770:	2002075c 	.word	0x2002075c
 8001774:	200207ec 	.word	0x200207ec
 8001778:	200207dc 	.word	0x200207dc

0800177c <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f852 	bl	8001840 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800179c:	f000 f866 	bl	800186c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017a0:	e019      	b.n	80017d6 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 80017a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4913      	ldr	r1, [pc, #76]	; (80017fc <sd_read_array_int+0x80>)
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <sd_read_array_int+0x84>)
 80017b2:	f012 f8c9 	bl	8013948 <siscanf>
		i++;
 80017b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	db03      	blt.n	80017d6 <sd_read_array_int+0x5a>
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <sd_read_array_int+0x88>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_read_array_int+0x84>)
 80017dc:	f00f fe92 	bl	8011504 <f_gets>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1dd      	bne.n	80017a2 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017e6:	f000 f85b 	bl	80018a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <sd_read_array_int+0x88>)
 80017ec:	f00f fa17 	bl	8010c1e <f_close>

	return ret;
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08017968 	.word	0x08017968
 8001800:	2002075c 	.word	0x2002075c
 8001804:	200207ec 	.word	0x200207ec

08001808 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001812:	2201      	movs	r2, #1
 8001814:	4908      	ldr	r1, [pc, #32]	; (8001838 <sd_mount+0x30>)
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <sd_mount+0x34>)
 8001818:	f00e fc7e 	bl	8010118 <f_mount>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <sd_mount+0x20>
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <sd_mount+0x24>
	else ret = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	0801796c 	.word	0x0801796c
 800183c:	2001f618 	.word	0x2001f618

08001840 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <create_path+0x24>)
 800184e:	f012 f8ea 	bl	8013a26 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <create_path+0x28>)
 8001856:	f012 f8e6 	bl	8013a26 <strcpy>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2002065c 	.word	0x2002065c
 8001868:	2001f518 	.word	0x2001f518

0800186c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <fopen_folder_and_file+0x24>)
 8001872:	f00f fd2d 	bl	80112d0 <f_mkdir>

	f_chdir(dirpath);
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <fopen_folder_and_file+0x24>)
 8001878:	f00f f9fb 	bl	8010c72 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800187c:	2213      	movs	r2, #19
 800187e:	4905      	ldr	r1, [pc, #20]	; (8001894 <fopen_folder_and_file+0x28>)
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <fopen_folder_and_file+0x2c>)
 8001882:	f00e fc8f 	bl	80101a4 <f_open>

	f_chdir("..");
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <fopen_folder_and_file+0x30>)
 8001888:	f00f f9f3 	bl	8010c72 <f_chdir>


}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2002065c 	.word	0x2002065c
 8001894:	2001f518 	.word	0x2001f518
 8001898:	200207ec 	.word	0x200207ec
 800189c:	08017950 	.word	0x08017950

080018a0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e007      	b.n	80018bc <bufclear+0x1c>
		buffer[i] = '\0';
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <bufclear+0x30>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b7f      	cmp	r3, #127	; 0x7f
 80018c0:	ddf4      	ble.n	80018ac <bufclear+0xc>
	}
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2002075c 	.word	0x2002075c

080018d4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <read_byte+0x54>)
 80018f0:	f005 ff62 	bl	80077b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018f4:	f107 010f 	add.w	r1, r7, #15
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	2201      	movs	r2, #1
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <read_byte+0x58>)
 80018fe:	f009 f923 	bl	800ab48 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001902:	f107 010e 	add.w	r1, r7, #14
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	2201      	movs	r2, #1
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <read_byte+0x58>)
 800190c:	f009 fa50 	bl	800adb0 <HAL_SPI_Receive>
	CS_SET;
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <read_byte+0x54>)
 8001918:	f005 ff4e 	bl	80077b8 <HAL_GPIO_WritePin>

	return val;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020400 	.word	0x40020400
 800192c:	20021888 	.word	0x20021888

08001930 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <write_byte+0x54>)
 8001952:	f005 ff31 	bl	80077b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001956:	f107 010f 	add.w	r1, r7, #15
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2201      	movs	r2, #1
 800195e:	480a      	ldr	r0, [pc, #40]	; (8001988 <write_byte+0x58>)
 8001960:	f009 f8f2 	bl	800ab48 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001964:	1db9      	adds	r1, r7, #6
 8001966:	2364      	movs	r3, #100	; 0x64
 8001968:	2201      	movs	r2, #1
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <write_byte+0x58>)
 800196c:	f009 f8ec 	bl	800ab48 <HAL_SPI_Transmit>
	CS_SET;
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <write_byte+0x54>)
 8001978:	f005 ff1e 	bl	80077b8 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400
 8001988:	20021888 	.word	0x20021888

0800198c <IMU_init>:

uint16_t IMU_init() {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff ff9c 	bl	80018d4 <read_byte>
 800199c:	4603      	mov	r3, r0
 800199e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	2be0      	cmp	r3, #224	; 0xe0
 80019a4:	d119      	bne.n	80019da <IMU_init+0x4e>
		ret = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019aa:	2101      	movs	r1, #1
 80019ac:	2006      	movs	r0, #6
 80019ae:	f7ff ffbf 	bl	8001930 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019b2:	2110      	movs	r1, #16
 80019b4:	2003      	movs	r0, #3
 80019b6:	f7ff ffbb 	bl	8001930 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019ba:	2120      	movs	r1, #32
 80019bc:	207f      	movs	r0, #127	; 0x7f
 80019be:	f7ff ffb7 	bl	8001930 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019c2:	2106      	movs	r1, #6
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ffb3 	bl	8001930 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019ca:	2106      	movs	r1, #6
 80019cc:	2014      	movs	r0, #20
 80019ce:	f7ff ffaf 	bl	8001930 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019d2:	2100      	movs	r1, #0
 80019d4:	207f      	movs	r0, #127	; 0x7f
 80019d6:	f7ff ffab 	bl	8001930 <write_byte>
	}
	return ret;
 80019da:	88fb      	ldrh	r3, [r7, #6]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <read_gyro_data>:

void read_gyro_data() {
 80019e4:	b598      	push	{r3, r4, r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019e8:	2033      	movs	r0, #51	; 0x33
 80019ea:	f7ff ff73 	bl	80018d4 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2034      	movs	r0, #52	; 0x34
 80019f6:	f7ff ff6d 	bl	80018d4 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <read_gyro_data+0x64>)
 8001a04:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a06:	2035      	movs	r0, #53	; 0x35
 8001a08:	f7ff ff64 	bl	80018d4 <read_byte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	2036      	movs	r0, #54	; 0x36
 8001a14:	f7ff ff5e 	bl	80018d4 <read_byte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <read_gyro_data+0x68>)
 8001a22:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a24:	2037      	movs	r0, #55	; 0x37
 8001a26:	f7ff ff55 	bl	80018d4 <read_byte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21c      	sxth	r4, r3
 8001a30:	2038      	movs	r0, #56	; 0x38
 8001a32:	f7ff ff4f 	bl	80018d4 <read_byte>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <read_gyro_data+0x6c>)
 8001a40:	801a      	strh	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	bd98      	pop	{r3, r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20021824 	.word	0x20021824
 8001a4c:	20021822 	.word	0x20021822
 8001a50:	2002181c 	.word	0x2002181c

08001a54 <read_accel_data>:

void read_accel_data() {
 8001a54:	b598      	push	{r3, r4, r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001a58:	202d      	movs	r0, #45	; 0x2d
 8001a5a:	f7ff ff3b 	bl	80018d4 <read_byte>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21c      	sxth	r4, r3
 8001a64:	202e      	movs	r0, #46	; 0x2e
 8001a66:	f7ff ff35 	bl	80018d4 <read_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <read_accel_data+0x64>)
 8001a74:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001a76:	202f      	movs	r0, #47	; 0x2f
 8001a78:	f7ff ff2c 	bl	80018d4 <read_byte>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21c      	sxth	r4, r3
 8001a82:	2030      	movs	r0, #48	; 0x30
 8001a84:	f7ff ff26 	bl	80018d4 <read_byte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4323      	orrs	r3, r4
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <read_accel_data+0x68>)
 8001a92:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001a94:	2031      	movs	r0, #49	; 0x31
 8001a96:	f7ff ff1d 	bl	80018d4 <read_byte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21c      	sxth	r4, r3
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f7ff ff17 	bl	80018d4 <read_byte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <read_accel_data+0x6c>)
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	bd98      	pop	{r3, r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20021820 	.word	0x20021820
 8001abc:	20021826 	.word	0x20021826
 8001ac0:	2002181e 	.word	0x2002181e

08001ac4 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001ac4:	b490      	push	{r4, r7}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	805a      	strh	r2, [r3, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	809a      	strh	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	80da      	strh	r2, [r3, #6]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	811a      	strh	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	815a      	strh	r2, [r3, #10]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	f04f 0400 	mov.w	r4, #0
 8001afa:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc90      	pop	{r4, r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b14:	f7ff ff3a 	bl	800198c <IMU_init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <_ZN3IMU4initEv+0x24>)
 8001b22:	f011 fe27 	bl	8013774 <iprintf>

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08017970 	.word	0x08017970

08001b34 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b3c:	f7ff ff52 	bl	80019e4 <read_gyro_data>
	read_accel_data();
 8001b40:	f7ff ff88 	bl	8001a54 <read_accel_data>

	xa_ = xa;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_ZN3IMU12updateValuesEv+0x54>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <_ZN3IMU12updateValuesEv+0x58>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <_ZN3IMU12updateValuesEv+0x5c>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <_ZN3IMU12updateValuesEv+0x60>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_ZN3IMU12updateValuesEv+0x64>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_ZN3IMU12updateValuesEv+0x68>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	815a      	strh	r2, [r3, #10]

}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20021820 	.word	0x20021820
 8001b8c:	20021826 	.word	0x20021826
 8001b90:	2002181e 	.word	0x2002181e
 8001b94:	20021824 	.word	0x20021824
 8001b98:	20021822 	.word	0x20021822
 8001b9c:	2002181c 	.word	0x2002181c

08001ba0 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcd0 	bl	8000554 <__aeabi_i2d>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bba:	f7fe fb7d 	bl	80002b8 <__aeabi_dsub>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bc6:	a315      	add	r3, pc, #84	; (adr r3, 8001c1c <_ZN3IMU8getOmegaEv+0x7c>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd0:	f7fe fe54 	bl	800087c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bde:	a311      	add	r3, pc, #68	; (adr r3, 8001c24 <_ZN3IMU8getOmegaEv+0x84>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fd1e 	bl	8000628 <__aeabi_dmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_ZN3IMU8getOmegaEv+0x78>)
 8001bfa:	f7fe fe3f 	bl	800087c <__aeabi_ddiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c06:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	40668000 	.word	0x40668000
 8001c1c:	66666666 	.word	0x66666666
 8001c20:	40306666 	.word	0x40306666
 8001c24:	54411744 	.word	0x54411744
 8001c28:	400921fb 	.word	0x400921fb

08001c2c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c30:	b08a      	sub	sp, #40	; 0x28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c36:	466b      	mov	r3, sp
 8001c38:	4698      	mov	r8, r3
	HAL_Delay(1000);
 8001c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3e:	f004 fb25 	bl	800628c <HAL_Delay>
	int16_t num = 2000;
 8001c42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c46:	83bb      	strh	r3, [r7, #28]
	double zg_vals[num];
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	1e5d      	subs	r5, r3, #1
 8001c4e:	61bd      	str	r5, [r7, #24]
 8001c50:	462b      	mov	r3, r5
 8001c52:	3301      	adds	r3, #1
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	f04f 0400 	mov.w	r4, #0
 8001c62:	0194      	lsls	r4, r2, #6
 8001c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	f04f 0400 	mov.w	r4, #0
 8001c7c:	0194      	lsls	r4, r2, #6
 8001c7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	462b      	mov	r3, r5
 8001c86:	3301      	adds	r3, #1
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	ebad 0d03 	sub.w	sp, sp, r3
 8001c96:	466b      	mov	r3, sp
 8001c98:	3307      	adds	r3, #7
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	83fb      	strh	r3, [r7, #30]
 8001ca4:	8bfa      	ldrh	r2, [r7, #30]
 8001ca6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	da14      	bge.n	8001cd8 <_ZN3IMU11calibrationEv+0xac>
		zg_vals[i] = double(zg_);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cb4:	8bfe      	ldrh	r6, [r7, #30]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc4c 	bl	8000554 <__aeabi_i2d>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	00f2      	lsls	r2, r6, #3
 8001cc4:	440a      	add	r2, r1
 8001cc6:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f004 fade 	bl	800628c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	83fb      	strh	r3, [r7, #30]
 8001cd6:	e7e5      	b.n	8001ca4 <_ZN3IMU11calibrationEv+0x78>
	for(const auto &v : zg_vals){
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	462b      	mov	r3, r5
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d017      	beq.n	8001d20 <_ZN3IMU11calibrationEv+0xf4>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf4:	6a38      	ldr	r0, [r7, #32]
 8001cf6:	f7fe fc3f 	bl	8000578 <__aeabi_f2d>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	f7fe fada 	bl	80002bc <__adddf3>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe ff82 	bl	8000c18 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	623b      	str	r3, [r7, #32]
	for(const auto &v : zg_vals){
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e7e3      	b.n	8001ce8 <_ZN3IMU11calibrationEv+0xbc>
	offset_ = sum / num;
 8001d20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d34:	ee16 0a90 	vmov	r0, s13
 8001d38:	f7fe fc1e 	bl	8000578 <__aeabi_f2d>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001d46:	46c5      	mov	sp, r8
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d54 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	b299      	uxth	r1, r3
 8001d68:	1dfa      	adds	r2, r7, #7
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <INA260_read+0x50>)
 8001d72:	f005 fe8b 	bl	8007a8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	f107 020c 	add.w	r2, r7, #12
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <INA260_read+0x50>)
 8001d86:	f005 ff7f 	bl	8007c88 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d8a:	7b3b      	ldrb	r3, [r7, #12]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20021a3c 	.word	0x20021a3c

08001da8 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	717b      	strb	r3, [r7, #5]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	733b      	strb	r3, [r7, #12]
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	737b      	strb	r3, [r7, #13]
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001dd2:	793b      	ldrb	r3, [r7, #4]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	2364      	movs	r3, #100	; 0x64
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2303      	movs	r3, #3
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <INA260_write+0x48>)
 8001de2:	f005 fe53 	bl	8007a8c <HAL_I2C_Master_Transmit>
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20021a3c 	.word	0x20021a3c

08001df4 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	71bb      	strb	r3, [r7, #6]
 8001e02:	4613      	mov	r3, r2
 8001e04:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e06:	797b      	ldrb	r3, [r7, #5]
 8001e08:	79ba      	ldrb	r2, [r7, #6]
 8001e0a:	79f9      	ldrb	r1, [r7, #7]
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff ffcb 	bl	8001da8 <INA260_write>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	461a      	mov	r2, r3
 8001e28:	21df      	movs	r1, #223	; 0xdf
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff ffe2 	bl	8001df4 <setConfig>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
{

}
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e60:	482a      	ldr	r0, [pc, #168]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001e62:	f005 fc91 	bl	8007788 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <_ZN8JoyStick8getValueEv+0x2e>
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4823      	ldr	r0, [pc, #140]	; (8001f10 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e82:	f005 fc81 	bl	8007788 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <_ZN8JoyStick8getValueEv+0x4e>
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ea4:	f005 fc70 	bl	8007788 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <_ZN8JoyStick8getValueEv+0x70>
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ec4:	f005 fc60 	bl	8007788 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <_ZN8JoyStick8getValueEv+0x90>
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ee4:	f005 fc50 	bl	8007788 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <_ZN8JoyStick8getValueEv+0xb0>
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f00:	89fb      	ldrh	r3, [r7, #14]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40020400 	.word	0x40020400

08001f18 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b52      	cmp	r3, #82	; 0x52
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4856      	ldr	r0, [pc, #344]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f005 fc41 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4853      	ldr	r0, [pc, #332]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f005 fc3b 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4850      	ldr	r0, [pc, #320]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f005 fc35 	bl	80077b8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f4e:	e098      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b47      	cmp	r3, #71	; 0x47
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	484b      	ldr	r0, [pc, #300]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f005 fc2b 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4848      	ldr	r0, [pc, #288]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f005 fc25 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4845      	ldr	r0, [pc, #276]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f005 fc1f 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8001f7a:	e082      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b42      	cmp	r3, #66	; 0x42
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4840      	ldr	r0, [pc, #256]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f005 fc15 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	483d      	ldr	r0, [pc, #244]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f005 fc0f 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	483a      	ldr	r0, [pc, #232]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f005 fc09 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8001fa6:	e06c      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b43      	cmp	r3, #67	; 0x43
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4835      	ldr	r0, [pc, #212]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f005 fbff 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4832      	ldr	r0, [pc, #200]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f005 fbf9 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	482f      	ldr	r0, [pc, #188]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f005 fbf3 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8001fd2:	e056      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b4d      	cmp	r3, #77	; 0x4d
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	482a      	ldr	r0, [pc, #168]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f005 fbe9 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4827      	ldr	r0, [pc, #156]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f005 fbe3 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4824      	ldr	r0, [pc, #144]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f005 fbdd 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8001ffe:	e040      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b59      	cmp	r3, #89	; 0x59
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	481f      	ldr	r0, [pc, #124]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800200e:	f005 fbd3 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	481c      	ldr	r0, [pc, #112]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800201a:	f005 fbcd 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	4819      	ldr	r0, [pc, #100]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002026:	f005 fbc7 	bl	80077b8 <HAL_GPIO_WritePin>
}
 800202a:	e02a      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b57      	cmp	r3, #87	; 0x57
 8002030:	d112      	bne.n	8002058 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4814      	ldr	r0, [pc, #80]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800203a:	f005 fbbd 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002046:	f005 fbb7 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	480e      	ldr	r0, [pc, #56]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002052:	f005 fbb1 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8002056:	e014      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b7e      	cmp	r3, #126	; 0x7e
 800205c:	d111      	bne.n	8002082 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002066:	f005 fba7 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002072:	f005 fba1 	bl	80077b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800207e:	f005 fb9b 	bl	80077b8 <HAL_GPIO_WritePin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020000 	.word	0x40020000

08002090 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
 800209c:	4613      	mov	r3, r2
 800209e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80020a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020b0:	f005 fb82 	bl	80077b8 <HAL_GPIO_WritePin>
 80020b4:	e009      	b.n	80020ca <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80020b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020c6:	f005 fb77 	bl	80077b8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020da:	f005 fb6d 	bl	80077b8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020de:	e009      	b.n	80020f4 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020f0:	f005 fb62 	bl	80077b8 <HAL_GPIO_WritePin>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020000 	.word	0x40020000

08002100 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002100:	b580      	push	{r7, lr}
 8002102:	b092      	sub	sp, #72	; 0x48
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe92 	bl	8001e38 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	331c      	adds	r3, #28
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	429a      	cmp	r2, r3
 8002128:	d008      	beq.n	800213c <_ZN10LineSensorC1Ev+0x3c>
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002136:	3302      	adds	r3, #2
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
 800213a:	e7f2      	b.n	8002122 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	429a      	cmp	r2, r3
 8002154:	d009      	beq.n	800216a <_ZN10LineSensorC1Ev+0x6a>
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	623b      	str	r3, [r7, #32]
		s = 0;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002164:	3304      	adds	r3, #4
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
 8002168:	e7f1      	b.n	800214e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	429a      	cmp	r2, r3
 8002182:	d009      	beq.n	8002198 <_ZN10LineSensorC1Ev+0x98>
 8002184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002186:	617b      	str	r3, [r7, #20]
		m = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	3304      	adds	r3, #4
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002196:	e7f1      	b.n	800217c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	3338      	adds	r3, #56	; 0x38
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d009      	beq.n	80021c6 <_ZN10LineSensorC1Ev+0xc6>
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	60bb      	str	r3, [r7, #8]
		s = 1;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	3304      	adds	r3, #4
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c4:	e7f1      	b.n	80021aa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	3748      	adds	r7, #72	; 0x48
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	220e      	movs	r2, #14
 80021dc:	4619      	mov	r1, r3
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021e0:	f004 f8ba 	bl	8006358 <HAL_ADC_Start_DMA>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20021960 	.word	0x20021960

080021f0 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	dc2f      	bgt.n	8002262 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3392      	adds	r3, #146	; 0x92
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	33a0      	adds	r3, #160	; 0xa0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	1a5b      	subs	r3, r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	440b      	add	r3, r1
 800224e:	3306      	adds	r3, #6
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e7cc      	b.n	80021fc <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800226c:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d902      	bls.n	800227c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]


}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000200 	.word	0x20000200

0800228c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800229a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800229e:	2b0d      	cmp	r3, #13
 80022a0:	f200 8087 	bhi.w	80023b2 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d81c      	bhi.n	80022ec <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80022b2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022b6:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022ba:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4423      	add	r3, r4
 80022ca:	3306      	adds	r3, #6
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4403      	add	r3, r0
 80022d0:	3304      	adds	r3, #4
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	008b      	lsls	r3, r1, #2
 80022d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022da:	440b      	add	r3, r1
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022e4:	3301      	adds	r3, #1
 80022e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ea:	e7de      	b.n	80022aa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d84d      	bhi.n	8002396 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002308:	2b09      	cmp	r3, #9
 800230a:	d83e      	bhi.n	800238a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800230c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002316:	4413      	add	r3, r2
 8002318:	3b30      	subs	r3, #48	; 0x30
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d521      	bpl.n	800237e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800233a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002344:	4413      	add	r3, r2
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 800234c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002350:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800235a:	440a      	add	r2, r1
 800235c:	3a30      	subs	r2, #48	; 0x30
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002366:	440b      	add	r3, r1
 8002368:	3b30      	subs	r3, #48	; 0x30
 800236a:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 800236c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002376:	4413      	add	r3, r2
 8002378:	3b30      	subs	r3, #48	; 0x30
 800237a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800237e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002382:	3301      	adds	r3, #1
 8002384:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002388:	e7bc      	b.n	8002304 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800238a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800238e:	3301      	adds	r3, #1
 8002390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002394:	e7ad      	b.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	33b0      	adds	r3, #176	; 0xb0
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023aa:	3301      	adds	r3, #1
 80023ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023b0:	e773      	b.n	800229a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 80023b2:	bf00      	nop
 80023b4:	3738      	adds	r7, #56	; 0x38
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc90      	pop	{r4, r7}
 80023ba:	4770      	bx	lr

080023bc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b0a9      	sub	sp, #164	; 0xa4
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f003 ff61 	bl	800628c <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80023d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023d4:	2b0d      	cmp	r3, #13
 80023d6:	d823      	bhi.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 80023d8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	32b0      	adds	r2, #176	; 0xb0
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	440a      	add	r2, r1
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023f0:	440b      	add	r3, r1
 80023f2:	3b60      	subs	r3, #96	; 0x60
 80023f4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80023f6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	32b0      	adds	r2, #176	; 0xb0
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	440a      	add	r2, r1
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800240e:	440b      	add	r3, r1
 8002410:	3b98      	subs	r3, #152	; 0x98
 8002412:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002414:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002418:	3301      	adds	r3, #1
 800241a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800241e:	e7d7      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd12 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 800242c:	4603      	mov	r3, r0
 800242e:	2b02      	cmp	r3, #2
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d079      	beq.n	8002530 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800243c:	2300      	movs	r3, #0
 800243e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002442:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002446:	2b0d      	cmp	r3, #13
 8002448:	d850      	bhi.n	80024ec <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 800244a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002454:	4413      	add	r3, r2
 8002456:	3b60      	subs	r3, #96	; 0x60
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	33b0      	adds	r3, #176	; 0xb0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d50f      	bpl.n	8002496 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 8002476:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	32b0      	adds	r2, #176	; 0xb0
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	440a      	add	r2, r1
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800248e:	440b      	add	r3, r1
 8002490:	3b60      	subs	r3, #96	; 0x60
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e024      	b.n	80024e0 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 8002496:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024a0:	4413      	add	r3, r2
 80024a2:	3b98      	subs	r3, #152	; 0x98
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	33b0      	adds	r3, #176	; 0xb0
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	dd0e      	ble.n	80024e0 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 80024c2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	32b0      	adds	r2, #176	; 0xb0
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	440a      	add	r2, r1
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024da:	440b      	add	r3, r1
 80024dc:	3b98      	subs	r3, #152	; 0x98
 80024de:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e4:	3301      	adds	r3, #1
 80024e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ea:	e7aa      	b.n	8002442 <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ff4a 	bl	800338c <_ZN12RotarySwitch8getValueEv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800250e:	2201      	movs	r2, #1
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fdbb 	bl	8002090 <_ZN3LED2LREaa>
 800251a:	e781      	b.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002522:	2200      	movs	r2, #0
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fdb1 	bl	8002090 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800252e:	e777      	b.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8002530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800254a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800254e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002552:	429a      	cmp	r2, r3
 8002554:	d016      	beq.n	8002584 <_ZN10LineSensor11calibrationEv+0x1c8>
 8002556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800255e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe f807 	bl	8000578 <__aeabi_f2d>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	461a      	mov	r2, r3
 8002570:	4623      	mov	r3, r4
 8002572:	4842      	ldr	r0, [pc, #264]	; (800267c <_ZN10LineSensor11calibrationEv+0x2c0>)
 8002574:	f011 f8fe 	bl	8013774 <iprintf>
	for(const auto &m : max_values){
 8002578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800257c:	3304      	adds	r3, #4
 800257e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002582:	e7e2      	b.n	800254a <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8002584:	200a      	movs	r0, #10
 8002586:	f011 f90d 	bl	80137a4 <putchar>
	for(const auto &m : min_values){
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d014      	beq.n	80025d6 <_ZN10LineSensor11calibrationEv+0x21a>
 80025ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffde 	bl	8000578 <__aeabi_f2d>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	482d      	ldr	r0, [pc, #180]	; (800267c <_ZN10LineSensor11calibrationEv+0x2c0>)
 80025c6:	f011 f8d5 	bl	8013774 <iprintf>
	for(const auto &m : min_values){
 80025ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ce:	3304      	adds	r3, #4
 80025d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025d4:	e7e5      	b.n	80025a2 <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80025d6:	200a      	movs	r0, #10
 80025d8:	f011 f8e4 	bl	80137a4 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025dc:	2300      	movs	r3, #0
 80025de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80025e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025e6:	2b0d      	cmp	r3, #13
 80025e8:	d826      	bhi.n	8002638 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80025f4:	4413      	add	r3, r2
 80025f6:	3b60      	subs	r3, #96	; 0x60
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002606:	4413      	add	r3, r2
 8002608:	3b98      	subs	r3, #152	; 0x98
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002680 <_ZN10LineSensor11calibrationEv+0x2c4>
 800261a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	3392      	adds	r3, #146	; 0x92
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	3301      	adds	r3, #1
 8002632:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002636:	e7d4      	b.n	80025e2 <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002638:	2300      	movs	r3, #0
 800263a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800263e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d815      	bhi.n	8002672 <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8002646:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800264a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002654:	440a      	add	r2, r1
 8002656:	3a98      	subs	r2, #152	; 0x98
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	33a0      	adds	r3, #160	; 0xa0
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3304      	adds	r3, #4
 8002664:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002666:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800266a:	3301      	adds	r3, #1
 800266c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002670:	e7e5      	b.n	800263e <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 8002672:	bf00      	nop
 8002674:	37a4      	adds	r7, #164	; 0xa4
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	08017980 	.word	0x08017980
 8002680:	447a0000 	.word	0x447a0000

08002684 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3338      	adds	r3, #56	; 0x38
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d012      	beq.n	80026d0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80026f0 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	db02      	blt.n	80026c8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026c2:	7ffb      	ldrb	r3, [r7, #31]
 80026c4:	3301      	adds	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3304      	adds	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e7e8      	b.n	80026a2 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	2b0d      	cmp	r3, #13
 80026d4:	d902      	bls.n	80026dc <_ZN10LineSensor13emergencyStopEv+0x58>
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	e001      	b.n	80026e0 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80026dc:	2300      	movs	r3, #0
 80026de:	75fb      	strb	r3, [r7, #23]

	return flag;
 80026e0:	7dfb      	ldrb	r3, [r7, #23]

}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	44160000 	.word	0x44160000

080026f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800279c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80027bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80027c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80027d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80027e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80027ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80027f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f4:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	ee07 3a90 	vmov	s15, r3

}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	0000      	movs	r0, r0
	...

08002810 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff95 	bl	8002748 <_ZN9LineTrace9calcErrorEv>
 800281e:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	edd3 7a04 	vldr	s15, [r3, #16]
 8002828:	ed97 7a07 	vldr	s14, [r7, #28]
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	ed93 7a05 	vldr	s14, [r3, #20]
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <_ZN9LineTrace3pidEv+0x130>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	edd7 6a07 	vldr	s13, [r7, #28]
 8002844:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284c:	ee17 0a90 	vmov	r0, s15
 8002850:	f7fd fe92 	bl	8000578 <__aeabi_f2d>
 8002854:	a338      	add	r3, pc, #224	; (adr r3, 8002938 <_ZN9LineTrace3pidEv+0x128>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fe f80f 	bl	800087c <__aeabi_ddiv>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4618      	mov	r0, r3
 8002864:	4621      	mov	r1, r4
 8002866:	f7fe f9d7 	bl	8000c18 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe80 	bl	8000578 <__aeabi_f2d>
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002882:	edd7 7a07 	vldr	s15, [r7, #28]
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	ee17 0a90 	vmov	r0, s15
 800288e:	f7fd fe73 	bl	8000578 <__aeabi_f2d>
 8002892:	a329      	add	r3, pc, #164	; (adr r3, 8002938 <_ZN9LineTrace3pidEv+0x128>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd fec6 	bl	8000628 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fd0a 	bl	80002bc <__adddf3>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	4618      	mov	r0, r3
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fe f9b2 	bl	8000c18 <__aeabi_d2f>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028b8:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80028c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80028e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80028e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fe:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681c      	ldr	r4, [r3, #0]
 8002906:	6938      	ldr	r0, [r7, #16]
 8002908:	f7fd fe36 	bl	8000578 <__aeabi_f2d>
 800290c:	4605      	mov	r5, r0
 800290e:	460e      	mov	r6, r1
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fd fe31 	bl	8000578 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	ec43 2b11 	vmov	d1, r2, r3
 800291e:	ec46 5b10 	vmov	d0, r5, r6
 8002922:	4620      	mov	r0, r4
 8002924:	f000 fa10 	bl	8002d48 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002928:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_ZN9LineTrace3pidEv+0x130>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	6013      	str	r3, [r2, #0]

}
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002936:	bf00      	nop
 8002938:	d2f1a9fc 	.word	0xd2f1a9fc
 800293c:	3f50624d 	.word	0x3f50624d
 8002940:	20000204 	.word	0x20000204
 8002944:	20000208 	.word	0x20000208

08002948 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	ed87 0a02 	vstr	s0, [r7, #8]
 8002954:	edc7 0a01 	vstr	s1, [r7, #4]
 8002958:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <_ZN9LineTrace4flipEv+0x16>
		pid();
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff21 	bl	8002810 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe56 	bl	8002684 <_ZN10LineSensor13emergencyStopEv>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002a20 <_ZN9LineTrace4flipEv+0x68>
 80029e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002a20 <_ZN9LineTrace4flipEv+0x68>
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9ac 	bl	8002d48 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	330c      	adds	r3, #12
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb48 	bl	8002090 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002a00:	e007      	b.n	8002a12 <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	330c      	adds	r3, #12
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb3f 	bl	8002090 <_ZN3LED2LREaa>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	f3af 8000 	nop.w
	...

08002a28 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	771a      	strb	r2, [r3, #28]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	0000      	movs	r0, r0
 8002a44:	0000      	movs	r0, r0
	...

08002a48 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002a70 <_ZN9LineTrace4stopEv+0x28>
 8002a5e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002a70 <_ZN9LineTrace4stopEv+0x28>
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f970 	bl	8002d48 <_ZN5Motor8setRatioEdd>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
	...

08002a78 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a86:	3330      	adds	r3, #48	; 0x30
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	2200      	movs	r2, #0
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a9e:	3334      	adds	r3, #52	; 0x34
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002ac0:	f7fe fea2 	bl	8001808 <sd_mount>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002ad4:	4816      	ldr	r0, [pc, #88]	; (8002b30 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002ad6:	f010 fed5 	bl	8013884 <puts>
	  ret = true;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
 8002ade:	e004      	b.n	8002aea <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002ae0:	4814      	ldr	r0, [pc, #80]	; (8002b34 <_ZN6Logger10sdCardInitEv+0x80>)
 8002ae2:	f010 fecf 	bl	8013884 <puts>
	  ret = false;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002aee:	f107 0210 	add.w	r2, r7, #16
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	2201      	movs	r2, #1
 8002afa:	490f      	ldr	r1, [pc, #60]	; (8002b38 <_ZN6Logger10sdCardInitEv+0x84>)
 8002afc:	480f      	ldr	r0, [pc, #60]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002afe:	f7fe fddf 	bl	80016c0 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2201      	movs	r2, #1
 8002b08:	490b      	ldr	r1, [pc, #44]	; (8002b38 <_ZN6Logger10sdCardInitEv+0x84>)
 8002b0a:	480c      	ldr	r0, [pc, #48]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002b0c:	f7fe fe36 	bl	800177c <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 8002b10:	f107 020c 	add.w	r2, r7, #12
 8002b14:	2301      	movs	r3, #1
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4908      	ldr	r1, [pc, #32]	; (8002b40 <_ZN6Logger10sdCardInitEv+0x8c>)
 8002b1e:	4807      	ldr	r0, [pc, #28]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002b20:	f7fe fdce 	bl	80016c0 <sd_write_array_int>

	return ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	080179c0 	.word	0x080179c0
 8002b34:	080179d0 	.word	0x080179d0
 8002b38:	080179e0 	.word	0x080179e0
 8002b3c:	080179ec 	.word	0x080179ec
 8002b40:	080179f4 	.word	0x080179f4

08002b44 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b56:	3330      	adds	r3, #48	; 0x30
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d024      	beq.n	8002ba8 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b86:	3332      	adds	r3, #50	; 0x32
 8002b88:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d905      	bls.n	8002ba8 <_ZN6Logger8storeLogEf+0x64>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	801a      	strh	r2, [r3, #0]
	}
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68b8      	ldr	r0, [r7, #8]
 8002bd0:	f7fe fcae 	bl	8001530 <sd_write_array_float>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	f7fe fcfd 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002c08:	33b0      	adds	r3, #176	; 0xb0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f7fe fcf1 	bl	80015fc <sd_write_array_double>
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c30:	3330      	adds	r3, #48	; 0x30
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c50:	3330      	adds	r3, #48	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	805a      	strh	r2, [r3, #2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <_ZN5Motor4initEv+0x20>)
 8002c90:	f008 fcc4 	bl	800b61c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002c94:	210c      	movs	r1, #12
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <_ZN5Motor4initEv+0x20>)
 8002c98:	f008 fcc0 	bl	800b61c <HAL_TIM_PWM_Start>

}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20021920 	.word	0x20021920

08002ca8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0d      	bge.n	8002cd6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc0:	481f      	ldr	r0, [pc, #124]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cc2:	f004 fd79 	bl	80077b8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	425b      	negs	r3, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	81fb      	strh	r3, [r7, #14]
 8002cd4:	e00a      	b.n	8002cec <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cde:	f004 fd6b 	bl	80077b8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da0d      	bge.n	8002d12 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cfc:	4810      	ldr	r0, [pc, #64]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cfe:	f004 fd5b 	bl	80077b8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	425b      	negs	r3, r3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	81bb      	strh	r3, [r7, #12]
 8002d10:	e00a      	b.n	8002d28 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d18:	4809      	ldr	r0, [pc, #36]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002d1a:	f004 fd4d 	bl	80077b8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002d28:	89fa      	ldrh	r2, [r7, #14]
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002d30:	89ba      	ldrh	r2, [r7, #12]
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	20021920 	.word	0x20021920

08002d48 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6178      	str	r0, [r7, #20]
 8002d50:	ed87 0b02 	vstr	d0, [r7, #8]
 8002d54:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d62:	f7fd fef1 	bl	8000b48 <__aeabi_dcmpgt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <_ZN5Motor8setRatioEdd+0x30>
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	4c2b      	ldr	r4, [pc, #172]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d72:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002d76:	e00e      	b.n	8002d96 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d82:	f7fd fec3 	bl	8000b0c <__aeabi_dcmplt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <_ZN5Motor8setRatioEdd+0x4e>
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	4c24      	ldr	r4, [pc, #144]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d92:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002da0:	f7fd fed2 	bl	8000b48 <__aeabi_dcmpgt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <_ZN5Motor8setRatioEdd+0x6e>
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	4c1c      	ldr	r4, [pc, #112]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002db0:	e9c7 3400 	strd	r3, r4, [r7]
 8002db4:	e00e      	b.n	8002dd4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc0:	f7fd fea4 	bl	8000b0c <__aeabi_dcmplt>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <_ZN5Motor8setRatioEdd+0x8c>
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	4c15      	ldr	r4, [pc, #84]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002dd0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8002dda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dde:	f7fd fc23 	bl	8000628 <__aeabi_dmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	4618      	mov	r0, r3
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7fd fecd 	bl	8000b88 <__aeabi_d2iz>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8002dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e00:	f7fd fc12 	bl	8000628 <__aeabi_dmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f7fd febc 	bl	8000b88 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	805a      	strh	r2, [r3, #2]

}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}
 8002e20:	3ff00000 	.word	0x3ff00000
 8002e24:	bff00000 	.word	0xbff00000
 8002e28:	409c2000 	.word	0x409c2000

08002e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc90      	pop	{r4, r7}
 8002e80:	4770      	bx	lr
 8002e82:	0000      	movs	r0, r0
 8002e84:	0000      	movs	r0, r0
	...

08002e88 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fe82 	bl	8001ba0 <_ZN3IMU8getOmegaEv>
 8002e9c:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fa66 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002eaa:	ec54 3b10 	vmov	r3, r4, d0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	f7fd feb1 	bl	8000c18 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002eba:	a358      	add	r3, pc, #352	; (adr r3, 800301c <_ZN8Odometry12calcPotitionEv+0x194>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec4:	f7fd fbb0 	bl	8000628 <__aeabi_dmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7fd fb4d 	bl	8000578 <__aeabi_f2d>
 8002ede:	4682      	mov	sl, r0
 8002ee0:	468b      	mov	fp, r1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef6:	f7fd fcc1 	bl	800087c <__aeabi_ddiv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f7fd f9db 	bl	80002bc <__adddf3>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b17 	vmov	d7, r2, r3
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f00e fc57 	bl	80117c8 <cos>
 8002f1a:	ec53 2b10 	vmov	r2, r3, d0
 8002f1e:	4650      	mov	r0, sl
 8002f20:	4659      	mov	r1, fp
 8002f22:	f7fd fb81 	bl	8000628 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9c5 	bl	80002bc <__adddf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7fd fb18 	bl	8000578 <__aeabi_f2d>
 8002f48:	4682      	mov	sl, r0
 8002f4a:	468b      	mov	fp, r1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f60:	f7fd fc8c 	bl	800087c <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd f9a6 	bl	80002bc <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ec43 2b17 	vmov	d7, r2, r3
 8002f78:	eeb0 0a47 	vmov.f32	s0, s14
 8002f7c:	eef0 0a67 	vmov.f32	s1, s15
 8002f80:	f00e fc66 	bl	8011850 <sin>
 8002f84:	ec53 2b10 	vmov	r2, r3, d0
 8002f88:	4650      	mov	r0, sl
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	f7fd fb4c 	bl	8000628 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd f990 	bl	80002bc <__adddf3>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f7fd f981 	bl	80002bc <__adddf3>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4621      	mov	r1, r4
 8002fce:	f7fd fe23 	bl	8000c18 <__aeabi_d2f>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002fd6:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	f7fd fe19 	bl	8000c18 <__aeabi_d2f>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002fea:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	f7fd fe0f 	bl	8000c18 <__aeabi_d2f>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002ffe:	601a      	str	r2, [r3, #0]


}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	f3af 8000 	nop.w
 8003010:	2000020c 	.word	0x2000020c
 8003014:	20000210 	.word	0x20000210
 8003018:	20000214 	.word	0x20000214
 800301c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003020:	3f50624d 	.word	0x3f50624d

08003024 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	calcPotition();
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff2b 	bl	8002e88 <_ZN8Odometry12calcPotitionEv>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 800303a:	b490      	push	{r4, r7}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	return x_;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003048:	ec44 3b17 	vmov	d7, r3, r4
}
 800304c:	eeb0 0a47 	vmov.f32	s0, s14
 8003050:	eef0 0a67 	vmov.f32	s1, s15
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bc90      	pop	{r4, r7}
 800305a:	4770      	bx	lr

0800305c <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 800305c:	b490      	push	{r4, r7}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	return y_;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800306a:	ec44 3b17 	vmov	d7, r3, r4
}
 800306e:	eeb0 0a47 	vmov.f32	s0, s14
 8003072:	eef0 0a67 	vmov.f32	s1, s15
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bc90      	pop	{r4, r7}
 800307c:	4770      	bx	lr

0800307e <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 800307e:	b490      	push	{r4, r7}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	return theta_;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800308c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003090:	eeb0 0a47 	vmov.f32	s0, s14
 8003094:	eef0 0a67 	vmov.f32	s1, s15
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bc90      	pop	{r4, r7}
 800309e:	4770      	bx	lr

080030a0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80030a0:	b490      	push	{r4, r7}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	x_ = 0;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc90      	pop	{r4, r7}
 80030da:	4770      	bx	lr

080030dc <_ZN13PathFollowingC1Ev>:
 */

#include "PathFollowing.hpp"
#include "path_following.h"

PathFollowing::PathFollowing()
 80030dc:	b490      	push	{r4, r7}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
{
	rtParam.kx = 0;
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <_ZN13PathFollowingC1Ev+0xb0>)
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80030f2:	4a26      	ldr	r2, [pc, #152]	; (800318c <_ZN13PathFollowingC1Ev+0xb0>)
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <_ZN13PathFollowingC1Ev+0xb0>)
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f04f 0400 	mov.w	r4, #0
 800310a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800310e:	4a20      	ldr	r2, [pc, #128]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f04f 0400 	mov.w	r4, #0
 8003118:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800312a:	4a19      	ldr	r2, [pc, #100]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	f04f 0400 	mov.w	r4, #0
 8003134:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f04f 0400 	mov.w	r4, #0
 8003150:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003170:	4a08      	ldr	r2, [pc, #32]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	f04f 0400 	mov.w	r4, #0
 800317a:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bc90      	pop	{r4, r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20021e10 	.word	0x20021e10
 8003190:	20021da0 	.word	0x20021da0
 8003194:	20021e00 	.word	0x20021e00

08003198 <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80031a0:	f001 fd3c 	bl	8004c1c <path_following_initialize>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80031ac:	b490      	push	{r4, r7}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	61f8      	str	r0, [r7, #28]
 80031b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80031b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80031bc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80031c0:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031c6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031da:	e9c2 3404 	strd	r3, r4, [r2, #16]

}
 80031de:	bf00      	nop
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc90      	pop	{r4, r7}
 80031e6:	4770      	bx	lr
 80031e8:	20021e10 	.word	0x20021e10

080031ec <_ZN13PathFollowing13setTargetPathEddd>:

void PathFollowing::setTargetPath(double x, double y, double th)
{
 80031ec:	b490      	push	{r4, r7}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	61f8      	str	r0, [r7, #28]
 80031f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80031f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80031fc:	ed87 2b00 	vstr	d2, [r7]
	rtU.target_x = x;
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 8003202:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003206:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = y;
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 800320c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003210:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = th;
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 8003216:	e9d7 3400 	ldrd	r3, r4, [r7]
 800321a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bc90      	pop	{r4, r7}
 8003226:	4770      	bx	lr
 8003228:	20021da0 	.word	0x20021da0

0800322c <_ZN13PathFollowing14setCurrentPathEddd>:

void PathFollowing::setCurrentPath(double x, double y, double th)
{
 800322c:	b490      	push	{r4, r7}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	61f8      	str	r0, [r7, #28]
 8003234:	ed87 0b04 	vstr	d0, [r7, #16]
 8003238:	ed87 1b02 	vstr	d1, [r7, #8]
 800323c:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 8003240:	4a09      	ldr	r2, [pc, #36]	; (8003268 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003242:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003246:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 800324c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003250:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003256:	e9d7 3400 	ldrd	r3, r4, [r7]
 800325a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800325e:	bf00      	nop
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bc90      	pop	{r4, r7}
 8003266:	4770      	bx	lr
 8003268:	20021da0 	.word	0x20021da0

0800326c <_ZN13PathFollowing18getTargetVelocitysERdS0_>:

void PathFollowing::getTargetVelocitys(double &v, double &omega)
{
 800326c:	b490      	push	{r4, r7}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	v = rtY.V_tar;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 800327a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	e9c2 3400 	strd	r3, r4, [r2]
	omega = rtY.tar;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 8003286:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bc90      	pop	{r4, r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20021e00 	.word	0x20021e00

080032a0 <_ZN13PathFollowing4flipEv>:
void PathFollowing::flip()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	path_following_step();
 80032a8:	f001 fbc0 	bl	8004a2c <path_following_step>
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80032bc:	2088      	movs	r0, #136	; 0x88
 80032be:	f7fe fdac 	bl	8001e1a <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80032c2:	2080      	movs	r0, #128	; 0x80
 80032c4:	f7fe fda9 	bl	8001e1a <INA260_init>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80032d8:	2188      	movs	r1, #136	; 0x88
 80032da:	2002      	movs	r0, #2
 80032dc:	f7fe fd3a 	bl	8001d54 <INA260_read>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f936 	bl	8000554 <__aeabi_i2d>
 80032e8:	a30c      	add	r3, pc, #48	; (adr r3, 800331c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fd f99b 	bl	8000628 <__aeabi_dmul>
 80032f2:	4603      	mov	r3, r0
 80032f4:	460c      	mov	r4, r1
 80032f6:	4618      	mov	r0, r3
 80032f8:	4621      	mov	r1, r4
 80032fa:	f7fd fc8d 	bl	8000c18 <__aeabi_d2f>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a03      	ldr	r2, [pc, #12]	; (8003318 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	f3af 8000 	nop.w
 8003318:	20000218 	.word	0x20000218
 800331c:	47ae147b 	.word	0x47ae147b
 8003320:	3f547ae1 	.word	0x3f547ae1
 8003324:	00000000 	.word	0x00000000

08003328 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f91d 	bl	8000578 <__aeabi_f2d>
 800333e:	a311      	add	r3, pc, #68	; (adr r3, 8003384 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd fbe2 	bl	8000b0c <__aeabi_dcmplt>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <_ZN11PowerSensor12butteryCheckEv+0x34>
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	e002      	b.n	8003362 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800335e:	2200      	movs	r2, #0
 8003360:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003370:	2201      	movs	r2, #1
 8003372:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000021c 	.word	0x2000021c
 8003384:	9999999a 	.word	0x9999999a
 8003388:	401d9999 	.word	0x401d9999

0800338c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003398:	2102      	movs	r1, #2
 800339a:	4822      	ldr	r0, [pc, #136]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 800339c:	f004 f9f4 	bl	8007788 <HAL_GPIO_ReadPin>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80033b0:	89fb      	ldrh	r3, [r7, #14]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80033b8:	2108      	movs	r1, #8
 80033ba:	481a      	ldr	r0, [pc, #104]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033bc:	f004 f9e4 	bl	8007788 <HAL_GPIO_ReadPin>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80033d8:	2110      	movs	r1, #16
 80033da:	4812      	ldr	r0, [pc, #72]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033dc:	f004 f9d4 	bl	8007788 <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	f043 0304 	orr.w	r3, r3, #4
 80033f6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	480a      	ldr	r0, [pc, #40]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033fc:	f004 f9c4 	bl	8007788 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	f043 0308 	orr.w	r3, r3, #8
 8003416:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003418:	89fb      	ldrh	r3, [r7, #14]

}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020c00 	.word	0x40020c00

08003428 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
{

}
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d111      	bne.n	8003476 <_ZN10SideSensor12updateStatusEt+0x36>
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e010      	b.n	8003498 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d10d      	bne.n	8003498 <_ZN10SideSensor12updateStatusEt+0x58>
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349e:	d111      	bne.n	80034c4 <_ZN10SideSensor12updateStatusEt+0x84>
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f083 0301 	eor.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80034c2:	e011      	b.n	80034e8 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d10d      	bne.n	80034e8 <_ZN10SideSensor12updateStatusEt+0xa8>
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f083 0302 	eor.w	r3, r3, #2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	2000021e 	.word	0x2000021e
 80034f8:	2000021f 	.word	0x2000021f

080034fc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	61da      	str	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bc90      	pop	{r4, r7}
 8003584:	4770      	bx	lr
	...

08003588 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	f107 0208 	add.w	r2, r7, #8
 8003598:	f107 0110 	add.w	r1, r7, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7fd fed3 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 80035a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4623      	mov	r3, r4
 80035ae:	f7fc fe85 	bl	80002bc <__adddf3>
 80035b2:	4603      	mov	r3, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	4618      	mov	r0, r3
 80035b8:	4621      	mov	r1, r4
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035c2:	f7fd f95b 	bl	800087c <__aeabi_ddiv>
 80035c6:	4603      	mov	r3, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80035ce:	a310      	add	r3, pc, #64	; (adr r3, 8003610 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035d8:	f7fd f826 	bl	8000628 <__aeabi_dmul>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	4618      	mov	r0, r3
 80035e2:	4621      	mov	r1, r4
 80035e4:	f7fd fb18 	bl	8000c18 <__aeabi_d2f>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc ffc0 	bl	8000578 <__aeabi_f2d>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	ec44 3b17 	vmov	d7, r3, r4
}
 8003600:	eeb0 0a47 	vmov.f32	s0, s14
 8003604:	eef0 0a67 	vmov.f32	s1, s15
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	bf00      	nop
 8003610:	1ab1d998 	.word	0x1ab1d998
 8003614:	3f7830b5 	.word	0x3f7830b5

08003618 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361a:	b08d      	sub	sp, #52	; 0x34
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	edd3 7a02 	vldr	s15, [r3, #8]
 800362c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003630:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc ff9d 	bl	8000578 <__aeabi_f2d>
 800363e:	4604      	mov	r4, r0
 8003640:	460d      	mov	r5, r1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe faaa 	bl	8001ba0 <_ZN3IMU8getOmegaEv>
 800364c:	ec53 2b10 	vmov	r2, r3, d0
 8003650:	4620      	mov	r0, r4
 8003652:	4629      	mov	r1, r5
 8003654:	f7fc fe30 	bl	80002b8 <__aeabi_dsub>
 8003658:	4603      	mov	r3, r0
 800365a:	460c      	mov	r4, r1
 800365c:	4618      	mov	r0, r3
 800365e:	4621      	mov	r1, r4
 8003660:	f7fd fada 	bl	8000c18 <__aeabi_d2f>
 8003664:	4603      	mov	r3, r0
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	edd3 7a06 	vldr	s15, [r3, #24]
 800366e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003680:	4b73      	ldr	r3, [pc, #460]	; (8003850 <_ZN12VelocityCtrl3pidEv+0x238>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800368a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800368e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003692:	ee17 0a90 	vmov	r0, s15
 8003696:	f7fc ff6f 	bl	8000578 <__aeabi_f2d>
 800369a:	a36b      	add	r3, pc, #428	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc ffc2 	bl	8000628 <__aeabi_dmul>
 80036a4:	4603      	mov	r3, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	4618      	mov	r0, r3
 80036aa:	4621      	mov	r1, r4
 80036ac:	f7fd fab4 	bl	8000c18 <__aeabi_d2f>
 80036b0:	4603      	mov	r3, r0
 80036b2:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80036b4:	4b67      	ldr	r3, [pc, #412]	; (8003854 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff5d 	bl	8000578 <__aeabi_f2d>
 80036be:	4604      	mov	r4, r0
 80036c0:	460d      	mov	r5, r1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80036c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	ee17 0a90 	vmov	r0, s15
 80036d4:	f7fc ff50 	bl	8000578 <__aeabi_f2d>
 80036d8:	a35b      	add	r3, pc, #364	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f7fc ffa3 	bl	8000628 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f7fc fde7 	bl	80002bc <__adddf3>
 80036ee:	4603      	mov	r3, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	4618      	mov	r0, r3
 80036f4:	4621      	mov	r1, r4
 80036f6:	f7fd fa8f 	bl	8000c18 <__aeabi_d2f>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b55      	ldr	r3, [pc, #340]	; (8003854 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80036fe:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003706:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003718:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <_ZN12VelocityCtrl3pidEv+0x240>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003722:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	ee17 0a90 	vmov	r0, s15
 800372e:	f7fc ff23 	bl	8000578 <__aeabi_f2d>
 8003732:	a345      	add	r3, pc, #276	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc ff76 	bl	8000628 <__aeabi_dmul>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	4618      	mov	r0, r3
 8003742:	4621      	mov	r1, r4
 8003744:	f7fd fa68 	bl	8000c18 <__aeabi_d2f>
 8003748:	4603      	mov	r3, r0
 800374a:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 800374c:	4b43      	ldr	r3, [pc, #268]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc ff11 	bl	8000578 <__aeabi_f2d>
 8003756:	4604      	mov	r4, r0
 8003758:	460d      	mov	r5, r1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003760:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc ff04 	bl	8000578 <__aeabi_f2d>
 8003770:	a335      	add	r3, pc, #212	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc ff57 	bl	8000628 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fd9b 	bl	80002bc <__adddf3>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	4618      	mov	r0, r3
 800378c:	4621      	mov	r1, r4
 800378e:	f7fd fa43 	bl	8000c18 <__aeabi_d2f>
 8003792:	4602      	mov	r2, r0
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 8003796:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003798:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800379c:	edd7 7a08 	vldr	s15, [r7, #32]
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ae:	edc7 7a05 	vstr	s15, [r7, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80037b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80037ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80037be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037cc:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80037d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80037d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80037d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e6:	eef1 7a67 	vneg.f32	s15, s15
 80037ea:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80037f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80037f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fe:	ee17 0a90 	vmov	r0, s15
 8003802:	f7fc feb9 	bl	8000578 <__aeabi_f2d>
 8003806:	4605      	mov	r5, r0
 8003808:	460e      	mov	r6, r1
 800380a:	ed97 7a05 	vldr	s14, [r7, #20]
 800380e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003816:	ee17 0a90 	vmov	r0, s15
 800381a:	f7fc fead 	bl	8000578 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ec43 2b11 	vmov	d1, r2, r3
 8003826:	ec46 5b10 	vmov	d0, r5, r6
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fa8c 	bl	8002d48 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <_ZN12VelocityCtrl3pidEv+0x238>)
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003836:	4a08      	ldr	r2, [pc, #32]	; (8003858 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	3734      	adds	r7, #52	; 0x34
 8003840:	46bd      	mov	sp, r7
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003844:	f3af 8000 	nop.w
 8003848:	d2f1a9fc 	.word	0xd2f1a9fc
 800384c:	3f50624d 	.word	0x3f50624d
 8003850:	20000220 	.word	0x20000220
 8003854:	20000228 	.word	0x20000228
 8003858:	20000224 	.word	0x20000224
 800385c:	2000022c 	.word	0x2000022c

08003860 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	ed87 0a02 	vstr	s0, [r7, #8]
 800386c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	605a      	str	r2, [r3, #4]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	ed87 0a02 	vstr	s0, [r7, #8]
 8003894:	edc7 0a01 	vstr	s1, [r7, #4]
 8003898:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80038c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80038ca:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fe47 	bl	8003588 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fe87 	bl	8003618 <_ZN12VelocityCtrl3pidEv>
	}


}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003960 <_ZN12VelocityCtrl4stopEv+0x30>
 8003948:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003960 <_ZN12VelocityCtrl4stopEv+0x30>
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff f9fb 	bl	8002d48 <_ZN5Motor8setRatioEdd>

}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	f3af 8000 	nop.w
	...

08003968 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003970:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003974:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003980:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003984:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003988:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003990:	e000      	b.n	8003994 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003992:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003994:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f9      	beq.n	8003992 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800399e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e009      	b.n	80039dc <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	60ba      	str	r2, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ffc9 	bl	8003968 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbf1      	blt.n	80039c8 <_write+0x12>
  }
  return len;
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f002 f896 	bl	8005b2c <cppExit>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10e      	bne.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003a1a:	f001 fffd 	bl	8005a18 <cppFlip1ms>

		tim6_timer++;
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a26:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d902      	bls.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003a42:	f002 f859 	bl	8005af8 <cppFlip100ns>

		tim7_timer++;
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a4e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d902      	bls.n	8003a60 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003a6a:	f002 f84f 	bl	8005b0c <cppFlip10ms>

		tim13_timer++;
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a76:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d902      	bls.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
	}

}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40001000 	.word	0x40001000
 8003a94:	20021a90 	.word	0x20021a90
 8003a98:	0001869f 	.word	0x0001869f
 8003a9c:	40001400 	.word	0x40001400
 8003aa0:	20021ad4 	.word	0x20021ad4
 8003aa4:	40001c00 	.word	0x40001c00
 8003aa8:	20021ad8 	.word	0x20021ad8

08003aac <init>:

void init()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ab6:	4808      	ldr	r0, [pc, #32]	; (8003ad8 <init+0x2c>)
 8003ab8:	f003 fe7e 	bl	80077b8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003abc:	4807      	ldr	r0, [pc, #28]	; (8003adc <init+0x30>)
 8003abe:	f007 fd5e 	bl	800b57e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <init+0x34>)
 8003ac4:	f007 fd5b 	bl	800b57e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003ac8:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <init+0x38>)
 8003aca:	f007 fd58 	bl	800b57e <HAL_TIM_Base_Start_IT>

	cppInit();
 8003ace:	f001 ff0f 	bl	80058f0 <cppInit>

	//path_following_initialize();

}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	20021bbc 	.word	0x20021bbc
 8003ae0:	20021d60 	.word	0x20021d60
 8003ae4:	20021adc 	.word	0x20021adc

08003ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aec:	f002 fb5c 	bl	80061a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003af0:	f000 f82a 	bl	8003b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003af4:	f000 fdbc 	bl	8004670 <MX_GPIO_Init>
  MX_DMA_Init();
 8003af8:	f000 fd8a 	bl	8004610 <MX_DMA_Init>
  MX_I2C2_Init();
 8003afc:	f000 f9e8 	bl	8003ed0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003b00:	f000 fa14 	bl	8003f2c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003b04:	f000 fa32 	bl	8003f6c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003b08:	f000 fa66 	bl	8003fd8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003b0c:	f000 fb70 	bl	80041f0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003b10:	f000 fc3c 	bl	800438c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003b14:	f000 fd52 	bl	80045bc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003b18:	f009 fd04 	bl	800d524 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003b1c:	f000 fbcc 	bl	80042b8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003b20:	f000 f9a8 	bl	8003e74 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003b24:	f000 fb00 	bl	8004128 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003b28:	f000 fc88 	bl	800443c <MX_TIM10_Init>
  MX_TIM11_Init();
 8003b2c:	f000 fcd4 	bl	80044d8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003b30:	f000 f898 	bl	8003c64 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003b34:	f000 fbf6 	bl	8004324 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003b38:	f000 fd1c 	bl	8004574 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003b3c:	f7ff ffb6 	bl	8003aac <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003b40:	f002 f806 	bl	8005b50 <cppLoop>
 8003b44:	e7fc      	b.n	8003b40 <main+0x58>
	...

08003b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b0a4      	sub	sp, #144	; 0x90
 8003b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b52:	2234      	movs	r2, #52	; 0x34
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f00e ffc6 	bl	8012ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	223c      	movs	r2, #60	; 0x3c
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f00e ffb7 	bl	8012ae8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <SystemClock_Config+0x114>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4a36      	ldr	r2, [pc, #216]	; (8003c5c <SystemClock_Config+0x114>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <SystemClock_Config+0x114>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <SystemClock_Config+0x118>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <SystemClock_Config+0x118>)
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <SystemClock_Config+0x118>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bc4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003bca:	23b4      	movs	r3, #180	; 0xb4
 8003bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003be6:	4618      	mov	r0, r3
 8003be8:	f005 fa20 	bl	800902c <HAL_RCC_OscConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003bf2:	f000 fe93 	bl	800491c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003bf6:	f004 fd9b 	bl	8008730 <HAL_PWREx_EnableOverDrive>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003c00:	f000 fe8c 	bl	800491c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c04:	230f      	movs	r3, #15
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c20:	2105      	movs	r1, #5
 8003c22:	4618      	mov	r0, r3
 8003c24:	f004 fdd4 	bl	80087d0 <HAL_RCC_ClockConfig>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003c2e:	f000 fe75 	bl	800491c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003c32:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 ffb3 	bl	8008bb0 <HAL_RCCEx_PeriphCLKConfig>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003c50:	f000 fe64 	bl	800491c <Error_Handler>
  }
}
 8003c54:	bf00      	nop
 8003c56:	3790      	adds	r7, #144	; 0x90
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40007000 	.word	0x40007000

08003c64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003c76:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c78:	4a7c      	ldr	r2, [pc, #496]	; (8003e6c <MX_ADC2_Init+0x208>)
 8003c7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c7c:	4b7a      	ldr	r3, [pc, #488]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c84:	4b78      	ldr	r3, [pc, #480]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003c8a:	4b77      	ldr	r3, [pc, #476]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003c90:	4b75      	ldr	r3, [pc, #468]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003c96:	4b74      	ldr	r3, [pc, #464]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c9e:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ca4:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003ca6:	4a72      	ldr	r2, [pc, #456]	; (8003e70 <MX_ADC2_Init+0x20c>)
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003caa:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003cb0:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cb2:	220e      	movs	r2, #14
 8003cb4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003cc4:	4868      	ldr	r0, [pc, #416]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cc6:	f002 fb03 	bl	80062d0 <HAL_ADC_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003cd0:	f000 fe24 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003cdc:	2306      	movs	r3, #6
 8003cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4860      	ldr	r0, [pc, #384]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003ce6:	f002 fc47 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003cf0:	f000 fe14 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003cf4:	230b      	movs	r3, #11
 8003cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4859      	ldr	r0, [pc, #356]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d02:	f002 fc39 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003d0c:	f000 fe06 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003d14:	2303      	movs	r3, #3
 8003d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4852      	ldr	r0, [pc, #328]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d1e:	f002 fc2b 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003d28:	f000 fdf8 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d2c:	230d      	movs	r3, #13
 8003d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003d30:	2304      	movs	r3, #4
 8003d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d34:	463b      	mov	r3, r7
 8003d36:	4619      	mov	r1, r3
 8003d38:	484b      	ldr	r0, [pc, #300]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d3a:	f002 fc1d 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003d44:	f000 fdea 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d50:	463b      	mov	r3, r7
 8003d52:	4619      	mov	r1, r3
 8003d54:	4844      	ldr	r0, [pc, #272]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d56:	f002 fc0f 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003d60:	f000 fddc 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003d68:	2306      	movs	r3, #6
 8003d6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	4619      	mov	r1, r3
 8003d70:	483d      	ldr	r0, [pc, #244]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d72:	f002 fc01 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003d7c:	f000 fdce 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003d80:	2302      	movs	r3, #2
 8003d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003d84:	2307      	movs	r3, #7
 8003d86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4836      	ldr	r0, [pc, #216]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d8e:	f002 fbf3 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003d98:	f000 fdc0 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003da0:	2308      	movs	r3, #8
 8003da2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003da4:	463b      	mov	r3, r7
 8003da6:	4619      	mov	r1, r3
 8003da8:	482f      	ldr	r0, [pc, #188]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003daa:	f002 fbe5 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003db4:	f000 fdb2 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003db8:	2304      	movs	r3, #4
 8003dba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003dbc:	2309      	movs	r3, #9
 8003dbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4828      	ldr	r0, [pc, #160]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003dc6:	f002 fbd7 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003dd0:	f000 fda4 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003dd8:	230a      	movs	r3, #10
 8003dda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ddc:	463b      	mov	r3, r7
 8003dde:	4619      	mov	r1, r3
 8003de0:	4821      	ldr	r0, [pc, #132]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003de2:	f002 fbc9 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003dec:	f000 fd96 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003df0:	2306      	movs	r3, #6
 8003df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003df4:	230b      	movs	r3, #11
 8003df6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003df8:	463b      	mov	r3, r7
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	481a      	ldr	r0, [pc, #104]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003dfe:	f002 fbbb 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003e08:	f000 fd88 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e0c:	2307      	movs	r3, #7
 8003e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003e10:	230c      	movs	r3, #12
 8003e12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e14:	463b      	mov	r3, r7
 8003e16:	4619      	mov	r1, r3
 8003e18:	4813      	ldr	r0, [pc, #76]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003e1a:	f002 fbad 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003e24:	f000 fd7a 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e28:	2308      	movs	r3, #8
 8003e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003e2c:	230d      	movs	r3, #13
 8003e2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e30:	463b      	mov	r3, r7
 8003e32:	4619      	mov	r1, r3
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003e36:	f002 fb9f 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003e40:	f000 fd6c 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003e44:	2309      	movs	r3, #9
 8003e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003e48:	230e      	movs	r3, #14
 8003e4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003e52:	f002 fb91 	bl	8006578 <HAL_ADC_ConfigChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003e5c:	f000 fd5e 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20021960 	.word	0x20021960
 8003e6c:	40012100 	.word	0x40012100
 8003e70:	0f000001 	.word	0x0f000001

08003e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <MX_I2C1_Init+0x54>)
 8003e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <MX_I2C1_Init+0x58>)
 8003e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eb0:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003eb2:	f003 fcb3 	bl	800781c <HAL_I2C_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ebc:	f000 fd2e 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200219a8 	.word	0x200219a8
 8003ec8:	40005400 	.word	0x40005400
 8003ecc:	000186a0 	.word	0x000186a0

08003ed0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <MX_I2C2_Init+0x54>)
 8003ed8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003edc:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <MX_I2C2_Init+0x58>)
 8003ede:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ef2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f0c:	4804      	ldr	r0, [pc, #16]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003f0e:	f003 fc85 	bl	800781c <HAL_I2C_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f18:	f000 fd00 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20021a3c 	.word	0x20021a3c
 8003f24:	40005800 	.word	0x40005800
 8003f28:	000186a0 	.word	0x000186a0

08003f2c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f32:	4a0d      	ldr	r2, [pc, #52]	; (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	20021c3c 	.word	0x20021c3c
 8003f68:	40012c00 	.word	0x40012c00

08003f6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <MX_SPI2_Init+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fa0:	2228      	movs	r2, #40	; 0x28
 8003fa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fb8:	220a      	movs	r2, #10
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fbc:	4804      	ldr	r0, [pc, #16]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fbe:	f006 fd5f 	bl	800aa80 <HAL_SPI_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003fc8:	f000 fca8 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20021888 	.word	0x20021888
 8003fd4:	40003800 	.word	0x40003800

08003fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b09a      	sub	sp, #104	; 0x68
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00e fd7e 	bl	8012ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800400a:	463b      	mov	r3, r7
 800400c:	2220      	movs	r2, #32
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f00e fd69 	bl	8012ae8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004016:	4b42      	ldr	r3, [pc, #264]	; (8004120 <MX_TIM1_Init+0x148>)
 8004018:	4a42      	ldr	r2, [pc, #264]	; (8004124 <MX_TIM1_Init+0x14c>)
 800401a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800401c:	4b40      	ldr	r3, [pc, #256]	; (8004120 <MX_TIM1_Init+0x148>)
 800401e:	2200      	movs	r2, #0
 8004020:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004022:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <MX_TIM1_Init+0x148>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <MX_TIM1_Init+0x148>)
 800402a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <MX_TIM1_Init+0x148>)
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <MX_TIM1_Init+0x148>)
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <MX_TIM1_Init+0x148>)
 800403e:	2200      	movs	r2, #0
 8004040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004042:	4837      	ldr	r0, [pc, #220]	; (8004120 <MX_TIM1_Init+0x148>)
 8004044:	f007 fabf 	bl	800b5c6 <HAL_TIM_PWM_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800404e:	f000 fc65 	bl	800491c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004052:	2303      	movs	r3, #3
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004056:	2300      	movs	r3, #0
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800405a:	2301      	movs	r3, #1
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800405e:	2300      	movs	r3, #0
 8004060:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004066:	2300      	movs	r3, #0
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800406a:	2301      	movs	r3, #1
 800406c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800406e:	2300      	movs	r3, #0
 8004070:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004076:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800407a:	4619      	mov	r1, r3
 800407c:	4828      	ldr	r0, [pc, #160]	; (8004120 <MX_TIM1_Init+0x148>)
 800407e:	f007 fb0b 	bl	800b698 <HAL_TIM_Encoder_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004088:	f000 fc48 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004098:	4619      	mov	r1, r3
 800409a:	4821      	ldr	r0, [pc, #132]	; (8004120 <MX_TIM1_Init+0x148>)
 800409c:	f008 f832 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80040a6:	f000 fc39 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040aa:	2360      	movs	r3, #96	; 0x60
 80040ac:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2208      	movs	r2, #8
 80040cc:	4619      	mov	r1, r3
 80040ce:	4814      	ldr	r0, [pc, #80]	; (8004120 <MX_TIM1_Init+0x148>)
 80040d0:	f007 fcb4 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80040da:	f000 fc1f 	bl	800491c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040fc:	463b      	mov	r3, r7
 80040fe:	4619      	mov	r1, r3
 8004100:	4807      	ldr	r0, [pc, #28]	; (8004120 <MX_TIM1_Init+0x148>)
 8004102:	f008 f87b 	bl	800c1fc <HAL_TIMEx_ConfigBreakDeadTime>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800410c:	f000 fc06 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <MX_TIM1_Init+0x148>)
 8004112:	f001 f96f 	bl	80053f4 <HAL_TIM_MspPostInit>

}
 8004116:	bf00      	nop
 8004118:	3768      	adds	r7, #104	; 0x68
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20021bfc 	.word	0x20021bfc
 8004124:	40010000 	.word	0x40010000

08004128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800412e:	f107 0320 	add.w	r3, r7, #32
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	60da      	str	r2, [r3, #12]
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	615a      	str	r2, [r3, #20]
 8004148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800414a:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <MX_TIM3_Init+0xc0>)
 800414c:	4a27      	ldr	r2, [pc, #156]	; (80041ec <MX_TIM3_Init+0xc4>)
 800414e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004156:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <MX_TIM3_Init+0xc0>)
 800415e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <MX_TIM3_Init+0xc0>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004170:	481d      	ldr	r0, [pc, #116]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004172:	f007 fa28 	bl	800b5c6 <HAL_TIM_PWM_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800417c:	f000 fbce 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004188:	f107 0320 	add.w	r3, r7, #32
 800418c:	4619      	mov	r1, r3
 800418e:	4816      	ldr	r0, [pc, #88]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004190:	f007 ffb8 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800419a:	f000 fbbf 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800419e:	2360      	movs	r3, #96	; 0x60
 80041a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	2200      	movs	r2, #0
 80041b2:	4619      	mov	r1, r3
 80041b4:	480c      	ldr	r0, [pc, #48]	; (80041e8 <MX_TIM3_Init+0xc0>)
 80041b6:	f007 fc41 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80041c0:	f000 fbac 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041c4:	1d3b      	adds	r3, r7, #4
 80041c6:	2204      	movs	r2, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4807      	ldr	r0, [pc, #28]	; (80041e8 <MX_TIM3_Init+0xc0>)
 80041cc:	f007 fc36 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80041d6:	f000 fba1 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80041da:	4803      	ldr	r0, [pc, #12]	; (80041e8 <MX_TIM3_Init+0xc0>)
 80041dc:	f001 f90a 	bl	80053f4 <HAL_TIM_MspPostInit>

}
 80041e0:	bf00      	nop
 80041e2:	3728      	adds	r7, #40	; 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20021a94 	.word	0x20021a94
 80041ec:	40000400 	.word	0x40000400

080041f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f6:	f107 0320 	add.w	r3, r7, #32
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	615a      	str	r2, [r3, #20]
 8004210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <MX_TIM4_Init+0xc4>)
 8004216:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004224:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004226:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800422a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004238:	481d      	ldr	r0, [pc, #116]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800423a:	f007 f9c4 	bl	800b5c6 <HAL_TIM_PWM_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004244:	f000 fb6a 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004250:	f107 0320 	add.w	r3, r7, #32
 8004254:	4619      	mov	r1, r3
 8004256:	4816      	ldr	r0, [pc, #88]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004258:	f007 ff54 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004262:	f000 fb5b 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004266:	2360      	movs	r3, #96	; 0x60
 8004268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	2208      	movs	r2, #8
 800427a:	4619      	mov	r1, r3
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800427e:	f007 fbdd 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004288:	f000 fb48 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	220c      	movs	r2, #12
 8004290:	4619      	mov	r1, r3
 8004292:	4807      	ldr	r0, [pc, #28]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004294:	f007 fbd2 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800429e:	f000 fb3d 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042a2:	4803      	ldr	r0, [pc, #12]	; (80042b0 <MX_TIM4_Init+0xc0>)
 80042a4:	f001 f8a6 	bl	80053f4 <HAL_TIM_MspPostInit>

}
 80042a8:	bf00      	nop
 80042aa:	3728      	adds	r7, #40	; 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20021920 	.word	0x20021920
 80042b4:	40000800 	.word	0x40000800

080042b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042be:	463b      	mov	r3, r7
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <MX_TIM6_Init+0x64>)
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <MX_TIM6_Init+0x68>)
 80042ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <MX_TIM6_Init+0x64>)
 80042ce:	2259      	movs	r2, #89	; 0x59
 80042d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <MX_TIM6_Init+0x64>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80042d8:	4b10      	ldr	r3, [pc, #64]	; (800431c <MX_TIM6_Init+0x64>)
 80042da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <MX_TIM6_Init+0x64>)
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80042e6:	480d      	ldr	r0, [pc, #52]	; (800431c <MX_TIM6_Init+0x64>)
 80042e8:	f007 f91e 	bl	800b528 <HAL_TIM_Base_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80042f2:	f000 fb13 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80042fe:	463b      	mov	r3, r7
 8004300:	4619      	mov	r1, r3
 8004302:	4806      	ldr	r0, [pc, #24]	; (800431c <MX_TIM6_Init+0x64>)
 8004304:	f007 fefe 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800430e:	f000 fb05 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20021bbc 	.word	0x20021bbc
 8004320:	40001000 	.word	0x40001000

08004324 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800432a:	463b      	mov	r3, r7
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <MX_TIM7_Init+0x60>)
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <MX_TIM7_Init+0x64>)
 8004336:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <MX_TIM7_Init+0x60>)
 800433a:	22b3      	movs	r2, #179	; 0xb3
 800433c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_TIM7_Init+0x60>)
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <MX_TIM7_Init+0x60>)
 8004346:	2231      	movs	r2, #49	; 0x31
 8004348:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_TIM7_Init+0x60>)
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004350:	480c      	ldr	r0, [pc, #48]	; (8004384 <MX_TIM7_Init+0x60>)
 8004352:	f007 f8e9 	bl	800b528 <HAL_TIM_Base_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800435c:	f000 fade 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004368:	463b      	mov	r3, r7
 800436a:	4619      	mov	r1, r3
 800436c:	4805      	ldr	r0, [pc, #20]	; (8004384 <MX_TIM7_Init+0x60>)
 800436e:	f007 fec9 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004378:	f000 fad0 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20021d60 	.word	0x20021d60
 8004388:	40001400 	.word	0x40001400

0800438c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f00e fba4 	bl	8012ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043aa:	4a23      	ldr	r2, [pc, #140]	; (8004438 <MX_TIM8_Init+0xac>)
 80043ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80043ae:	4b21      	ldr	r3, [pc, #132]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043b4:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043b6:	2210      	movs	r2, #16
 80043b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043d4:	2303      	movs	r3, #3
 80043d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043e8:	2300      	movs	r3, #0
 80043ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043ec:	2301      	movs	r3, #1
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	4619      	mov	r1, r3
 80043fe:	480d      	ldr	r0, [pc, #52]	; (8004434 <MX_TIM8_Init+0xa8>)
 8004400:	f007 f94a 	bl	800b698 <HAL_TIM_Encoder_Init>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800440a:	f000 fa87 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4806      	ldr	r0, [pc, #24]	; (8004434 <MX_TIM8_Init+0xa8>)
 800441c:	f007 fe72 	bl	800c104 <HAL_TIMEx_MasterConfigSynchronization>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004426:	f000 fa79 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800442a:	bf00      	nop
 800442c:	3730      	adds	r7, #48	; 0x30
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200218e0 	.word	0x200218e0
 8004438:	40010400 	.word	0x40010400

0800443c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
 8004450:	615a      	str	r2, [r3, #20]
 8004452:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004456:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <MX_TIM10_Init+0x98>)
 8004458:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <MX_TIM10_Init+0x94>)
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800446c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800447a:	4815      	ldr	r0, [pc, #84]	; (80044d0 <MX_TIM10_Init+0x94>)
 800447c:	f007 f854 	bl	800b528 <HAL_TIM_Base_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004486:	f000 fa49 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800448a:	4811      	ldr	r0, [pc, #68]	; (80044d0 <MX_TIM10_Init+0x94>)
 800448c:	f007 f89b 	bl	800b5c6 <HAL_TIM_PWM_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004496:	f000 fa41 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800449a:	2360      	movs	r3, #96	; 0x60
 800449c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	2200      	movs	r2, #0
 80044ae:	4619      	mov	r1, r3
 80044b0:	4807      	ldr	r0, [pc, #28]	; (80044d0 <MX_TIM10_Init+0x94>)
 80044b2:	f007 fac3 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80044bc:	f000 fa2e 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80044c0:	4803      	ldr	r0, [pc, #12]	; (80044d0 <MX_TIM10_Init+0x94>)
 80044c2:	f000 ff97 	bl	80053f4 <HAL_TIM_MspPostInit>

}
 80044c6:	bf00      	nop
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	200219fc 	.word	0x200219fc
 80044d4:	40014400 	.word	0x40014400

080044d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	615a      	str	r2, [r3, #20]
 80044ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <MX_TIM11_Init+0x94>)
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <MX_TIM11_Init+0x98>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <MX_TIM11_Init+0x94>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <MX_TIM11_Init+0x94>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <MX_TIM11_Init+0x94>)
 8004504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004508:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <MX_TIM11_Init+0x94>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <MX_TIM11_Init+0x94>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004516:	4815      	ldr	r0, [pc, #84]	; (800456c <MX_TIM11_Init+0x94>)
 8004518:	f007 f806 	bl	800b528 <HAL_TIM_Base_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004522:	f000 f9fb 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004526:	4811      	ldr	r0, [pc, #68]	; (800456c <MX_TIM11_Init+0x94>)
 8004528:	f007 f84d 	bl	800b5c6 <HAL_TIM_PWM_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004532:	f000 f9f3 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004536:	2360      	movs	r3, #96	; 0x60
 8004538:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	2200      	movs	r2, #0
 800454a:	4619      	mov	r1, r3
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <MX_TIM11_Init+0x94>)
 800454e:	f007 fa75 	bl	800ba3c <HAL_TIM_PWM_ConfigChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004558:	f000 f9e0 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800455c:	4803      	ldr	r0, [pc, #12]	; (800456c <MX_TIM11_Init+0x94>)
 800455e:	f000 ff49 	bl	80053f4 <HAL_TIM_MspPostInit>

}
 8004562:	bf00      	nop
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20021b1c 	.word	0x20021b1c
 8004570:	40014800 	.word	0x40014800

08004574 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <MX_TIM13_Init+0x40>)
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <MX_TIM13_Init+0x44>)
 800457c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <MX_TIM13_Init+0x40>)
 8004580:	2259      	movs	r2, #89	; 0x59
 8004582:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <MX_TIM13_Init+0x40>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <MX_TIM13_Init+0x40>)
 800458c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004590:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <MX_TIM13_Init+0x40>)
 8004594:	2200      	movs	r2, #0
 8004596:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <MX_TIM13_Init+0x40>)
 800459a:	2280      	movs	r2, #128	; 0x80
 800459c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800459e:	4805      	ldr	r0, [pc, #20]	; (80045b4 <MX_TIM13_Init+0x40>)
 80045a0:	f006 ffc2 	bl	800b528 <HAL_TIM_Base_Init>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80045aa:	f000 f9b7 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20021adc 	.word	0x20021adc
 80045b8:	40001c00 	.word	0x40001c00

080045bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <MX_USART2_UART_Init+0x50>)
 80045c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045e2:	220c      	movs	r2, #12
 80045e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045f2:	4805      	ldr	r0, [pc, #20]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045f4:	f007 fe68 	bl	800c2c8 <HAL_UART_Init>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045fe:	f000 f98d 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20021cc0 	.word	0x20021cc0
 800460c:	40004400 	.word	0x40004400

08004610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <MX_DMA_Init+0x5c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <MX_DMA_Init+0x5c>)
 8004620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <MX_DMA_Init+0x5c>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	203a      	movs	r0, #58	; 0x3a
 8004638:	f002 fb29 	bl	8006c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800463c:	203a      	movs	r0, #58	; 0x3a
 800463e:	f002 fb42 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2100      	movs	r1, #0
 8004646:	203b      	movs	r0, #59	; 0x3b
 8004648:	f002 fb21 	bl	8006c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800464c:	203b      	movs	r0, #59	; 0x3b
 800464e:	f002 fb3a 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	2045      	movs	r0, #69	; 0x45
 8004658:	f002 fb19 	bl	8006c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800465c:	2045      	movs	r0, #69	; 0x45
 800465e:	f002 fb32 	bl	8006cc6 <HAL_NVIC_EnableIRQ>

}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004676:	f107 031c 	add.w	r3, r7, #28
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	4b9c      	ldr	r3, [pc, #624]	; (80048fc <MX_GPIO_Init+0x28c>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	4a9b      	ldr	r2, [pc, #620]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004690:	f043 0310 	orr.w	r3, r3, #16
 8004694:	6313      	str	r3, [r2, #48]	; 0x30
 8004696:	4b99      	ldr	r3, [pc, #612]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	4b95      	ldr	r3, [pc, #596]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a94      	ldr	r2, [pc, #592]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b92      	ldr	r3, [pc, #584]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	4b8e      	ldr	r3, [pc, #568]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4a8d      	ldr	r2, [pc, #564]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30
 80046ce:	4b8b      	ldr	r3, [pc, #556]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	4b87      	ldr	r3, [pc, #540]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a86      	ldr	r2, [pc, #536]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b84      	ldr	r3, [pc, #528]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	4b80      	ldr	r3, [pc, #512]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a7f      	ldr	r2, [pc, #508]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b7d      	ldr	r3, [pc, #500]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	4b79      	ldr	r3, [pc, #484]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a78      	ldr	r2, [pc, #480]	; (80048fc <MX_GPIO_Init+0x28c>)
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b76      	ldr	r3, [pc, #472]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800472e:	2200      	movs	r2, #0
 8004730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004734:	4872      	ldr	r0, [pc, #456]	; (8004900 <MX_GPIO_Init+0x290>)
 8004736:	f003 f83f 	bl	80077b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004740:	4870      	ldr	r0, [pc, #448]	; (8004904 <MX_GPIO_Init+0x294>)
 8004742:	f003 f839 	bl	80077b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004746:	2200      	movs	r2, #0
 8004748:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800474c:	486e      	ldr	r0, [pc, #440]	; (8004908 <MX_GPIO_Init+0x298>)
 800474e:	f003 f833 	bl	80077b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004752:	2200      	movs	r2, #0
 8004754:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004758:	486c      	ldr	r0, [pc, #432]	; (800490c <MX_GPIO_Init+0x29c>)
 800475a:	f003 f82d 	bl	80077b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800475e:	2304      	movs	r3, #4
 8004760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004762:	4b6b      	ldr	r3, [pc, #428]	; (8004910 <MX_GPIO_Init+0x2a0>)
 8004764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	4619      	mov	r1, r3
 8004770:	4863      	ldr	r0, [pc, #396]	; (8004900 <MX_GPIO_Init+0x290>)
 8004772:	f002 fe5f 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004776:	230f      	movs	r3, #15
 8004778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800477a:	2303      	movs	r3, #3
 800477c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004782:	f107 031c 	add.w	r3, r7, #28
 8004786:	4619      	mov	r1, r3
 8004788:	4862      	ldr	r0, [pc, #392]	; (8004914 <MX_GPIO_Init+0x2a4>)
 800478a:	f002 fe53 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800478e:	23e1      	movs	r3, #225	; 0xe1
 8004790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004792:	2303      	movs	r3, #3
 8004794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479a:	f107 031c 	add.w	r3, r7, #28
 800479e:	4619      	mov	r1, r3
 80047a0:	485a      	ldr	r0, [pc, #360]	; (800490c <MX_GPIO_Init+0x29c>)
 80047a2:	f002 fe47 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047a6:	2303      	movs	r3, #3
 80047a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047aa:	2303      	movs	r3, #3
 80047ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b2:	f107 031c 	add.w	r3, r7, #28
 80047b6:	4619      	mov	r1, r3
 80047b8:	4852      	ldr	r0, [pc, #328]	; (8004904 <MX_GPIO_Init+0x294>)
 80047ba:	f002 fe3b 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047be:	2304      	movs	r3, #4
 80047c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047c6:	2301      	movs	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ca:	f107 031c 	add.w	r3, r7, #28
 80047ce:	4619      	mov	r1, r3
 80047d0:	484c      	ldr	r0, [pc, #304]	; (8004904 <MX_GPIO_Init+0x294>)
 80047d2:	f002 fe2f 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80047d6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80047da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047e0:	2301      	movs	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	4619      	mov	r1, r3
 80047ea:	4845      	ldr	r0, [pc, #276]	; (8004900 <MX_GPIO_Init+0x290>)
 80047ec:	f002 fe22 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80047f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f6:	2301      	movs	r3, #1
 80047f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fe:	2300      	movs	r3, #0
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004802:	f107 031c 	add.w	r3, r7, #28
 8004806:	4619      	mov	r1, r3
 8004808:	483d      	ldr	r0, [pc, #244]	; (8004900 <MX_GPIO_Init+0x290>)
 800480a:	f002 fe13 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800480e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004814:	2301      	movs	r3, #1
 8004816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481c:	2300      	movs	r3, #0
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	4619      	mov	r1, r3
 8004826:	4837      	ldr	r0, [pc, #220]	; (8004904 <MX_GPIO_Init+0x294>)
 8004828:	f002 fe04 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800482c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <MX_GPIO_Init+0x2a8>)
 8004834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	4619      	mov	r1, r3
 8004840:	4831      	ldr	r0, [pc, #196]	; (8004908 <MX_GPIO_Init+0x298>)
 8004842:	f002 fdf7 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800484a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484c:	2301      	movs	r3, #1
 800484e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004854:	2300      	movs	r3, #0
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	4619      	mov	r1, r3
 800485e:	482a      	ldr	r0, [pc, #168]	; (8004908 <MX_GPIO_Init+0x298>)
 8004860:	f002 fde8 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486a:	2301      	movs	r3, #1
 800486c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800486e:	2301      	movs	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	4619      	mov	r1, r3
 800487c:	4822      	ldr	r0, [pc, #136]	; (8004908 <MX_GPIO_Init+0x298>)
 800487e:	f002 fdd9 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004882:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004886:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004888:	2301      	movs	r3, #1
 800488a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004894:	f107 031c 	add.w	r3, r7, #28
 8004898:	4619      	mov	r1, r3
 800489a:	481c      	ldr	r0, [pc, #112]	; (800490c <MX_GPIO_Init+0x29c>)
 800489c:	f002 fdca 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048a6:	2300      	movs	r3, #0
 80048a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ae:	f107 031c 	add.w	r3, r7, #28
 80048b2:	4619      	mov	r1, r3
 80048b4:	4815      	ldr	r0, [pc, #84]	; (800490c <MX_GPIO_Init+0x29c>)
 80048b6:	f002 fdbd 	bl	8007434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80048ba:	239b      	movs	r3, #155	; 0x9b
 80048bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048be:	2300      	movs	r3, #0
 80048c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048c2:	2301      	movs	r3, #1
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c6:	f107 031c 	add.w	r3, r7, #28
 80048ca:	4619      	mov	r1, r3
 80048cc:	480e      	ldr	r0, [pc, #56]	; (8004908 <MX_GPIO_Init+0x298>)
 80048ce:	f002 fdb1 	bl	8007434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	2008      	movs	r0, #8
 80048d8:	f002 f9d9 	bl	8006c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048dc:	2008      	movs	r0, #8
 80048de:	f002 f9f2 	bl	8006cc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	2017      	movs	r0, #23
 80048e8:	f002 f9d1 	bl	8006c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048ec:	2017      	movs	r0, #23
 80048ee:	f002 f9ea 	bl	8006cc6 <HAL_NVIC_EnableIRQ>

}
 80048f2:	bf00      	nop
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	40021000 	.word	0x40021000
 8004904:	40020400 	.word	0x40020400
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40020000 	.word	0x40020000
 8004910:	10310000 	.word	0x10310000
 8004914:	40020800 	.word	0x40020800
 8004918:	10110000 	.word	0x10110000

0800491c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004920:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004922:	e7fe      	b.n	8004922 <Error_Handler+0x6>

08004924 <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <CalcError1+0x100>)
 800492e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004932:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <CalcError1+0x100>)
 8004934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004938:	f7fb fcbe 	bl	80002b8 <__aeabi_dsub>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004944:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <CalcError1+0x100>)
 8004946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <CalcError1+0x100>)
 800494c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004950:	f7fb fcb2 	bl	80002b8 <__aeabi_dsub>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 800495c:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <CalcError1+0x100>)
 800495e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004962:	eeb0 0a47 	vmov.f32	s0, s14
 8004966:	eef0 0a67 	vmov.f32	s1, s15
 800496a:	f00c ff71 	bl	8011850 <sin>
 800496e:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <CalcError1+0x100>)
 8004974:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004978:	eeb0 0a47 	vmov.f32	s0, s14
 800497c:	eef0 0a67 	vmov.f32	s1, s15
 8004980:	f00c ff22 	bl	80117c8 <cos>
 8004984:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 8004988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004990:	f7fb fe4a 	bl	8000628 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4690      	mov	r8, r2
 800499a:	4699      	mov	r9, r3
 800499c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049a4:	f7fb fe40 	bl	8000628 <__aeabi_dmul>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4640      	mov	r0, r8
 80049ae:	4649      	mov	r1, r9
 80049b0:	f7fb fc84 	bl	80002bc <__adddf3>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	491b      	ldr	r1, [pc, #108]	; (8004a28 <CalcError1+0x104>)
 80049ba:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 80049be:	68bc      	ldr	r4, [r7, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80049c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fb fe2b 	bl	8000628 <__aeabi_dmul>
 80049d2:	4603      	mov	r3, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	4625      	mov	r5, r4
 80049d8:	461c      	mov	r4, r3
 80049da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049e2:	f7fb fe21 	bl	8000628 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4620      	mov	r0, r4
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fc65 	bl	80002bc <__adddf3>
 80049f2:	4603      	mov	r3, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	4a0c      	ldr	r2, [pc, #48]	; (8004a28 <CalcError1+0x104>)
 80049f8:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <CalcError1+0x100>)
 80049fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <CalcError1+0x100>)
 8004a04:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fb fc54 	bl	80002b8 <__aeabi_dsub>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <CalcError1+0x104>)
 8004a16:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004a1a:	bf00      	nop
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a24:	20021da0 	.word	0x20021da0
 8004a28:	20021dd0 	.word	0x20021dd0

08004a2c <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004a2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a30:	b08a      	sub	sp, #40	; 0x28
 8004a32:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004a34:	4b74      	ldr	r3, [pc, #464]	; (8004c08 <path_following_step+0x1dc>)
 8004a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	4b73      	ldr	r3, [pc, #460]	; (8004c0c <path_following_step+0x1e0>)
 8004a40:	f7fb fdf2 	bl	8000628 <__aeabi_dmul>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004a4c:	4b70      	ldr	r3, [pc, #448]	; (8004c10 <path_following_step+0x1e4>)
 8004a4e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004a52:	461a      	mov	r2, r3
 8004a54:	4623      	mov	r3, r4
 8004a56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004a5a:	f7fb fc2d 	bl	80002b8 <__aeabi_dsub>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a6e:	f7fb fddb 	bl	8000628 <__aeabi_dmul>
 8004a72:	4603      	mov	r3, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004a7a:	4b63      	ldr	r3, [pc, #396]	; (8004c08 <path_following_step+0x1dc>)
 8004a7c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <path_following_step+0x1e0>)
 8004a86:	f7fb fdcf 	bl	8000628 <__aeabi_dmul>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004a92:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <path_following_step+0x1e4>)
 8004a94:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004aa0:	f7fb fc0a 	bl	80002b8 <__aeabi_dsub>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004aac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ab0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ab4:	f7fb fdb8 	bl	8000628 <__aeabi_dmul>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	460c      	mov	r4, r1
 8004abc:	4618      	mov	r0, r3
 8004abe:	4621      	mov	r1, r4
 8004ac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ac4:	f7fb fbfa 	bl	80002bc <__adddf3>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	ec44 3b17 	vmov	d7, r3, r4
 8004ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ad4:	eef0 0a67 	vmov.f32	s1, s15
 8004ad8:	f00c ff02 	bl	80118e0 <sqrt>
 8004adc:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004ae0:	f7ff ff20 	bl	8004924 <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004ae4:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <path_following_step+0x1dc>)
 8004ae6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	4b47      	ldr	r3, [pc, #284]	; (8004c0c <path_following_step+0x1e0>)
 8004af0:	f7fb fd9a 	bl	8000628 <__aeabi_dmul>
 8004af4:	4603      	mov	r3, r0
 8004af6:	460c      	mov	r4, r1
 8004af8:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004afc:	4b44      	ldr	r3, [pc, #272]	; (8004c10 <path_following_step+0x1e4>)
 8004afe:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b02:	461a      	mov	r2, r3
 8004b04:	4623      	mov	r3, r4
 8004b06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b0a:	f7fb fbd5 	bl	80002b8 <__aeabi_dsub>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	460c      	mov	r4, r1
 8004b12:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004b16:	4a3e      	ldr	r2, [pc, #248]	; (8004c10 <path_following_step+0x1e4>)
 8004b18:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b1c:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004b20:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <path_following_step+0x1e4>)
 8004b22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b26:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004b2a:	4a39      	ldr	r2, [pc, #228]	; (8004c10 <path_following_step+0x1e4>)
 8004b2c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004b30:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004b34:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <path_following_step+0x1e8>)
 8004b36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b3a:	4b35      	ldr	r3, [pc, #212]	; (8004c10 <path_following_step+0x1e4>)
 8004b3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	f7fb fd70 	bl	8000628 <__aeabi_dmul>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	4625      	mov	r5, r4
 8004b4e:	461c      	mov	r4, r3
 8004b50:	4b2f      	ldr	r3, [pc, #188]	; (8004c10 <path_following_step+0x1e4>)
 8004b52:	ed93 7b04 	vldr	d7, [r3, #16]
 8004b56:	eeb0 0a47 	vmov.f32	s0, s14
 8004b5a:	eef0 0a67 	vmov.f32	s1, s15
 8004b5e:	f00c fe33 	bl	80117c8 <cos>
 8004b62:	ec51 0b10 	vmov	r0, r1, d0
 8004b66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b6a:	f7fb fd5d 	bl	8000628 <__aeabi_dmul>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4620      	mov	r0, r4
 8004b74:	4629      	mov	r1, r5
 8004b76:	f7fb fba1 	bl	80002bc <__adddf3>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	4a26      	ldr	r2, [pc, #152]	; (8004c18 <path_following_step+0x1ec>)
 8004b80:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004b84:	4b23      	ldr	r3, [pc, #140]	; (8004c14 <path_following_step+0x1e8>)
 8004b86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <path_following_step+0x1e4>)
 8004b8c:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004b90:	461a      	mov	r2, r3
 8004b92:	4623      	mov	r3, r4
 8004b94:	f7fb fd48 	bl	8000628 <__aeabi_dmul>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	460c      	mov	r4, r1
 8004b9c:	4698      	mov	r8, r3
 8004b9e:	46a1      	mov	r9, r4
 8004ba0:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <path_following_step+0x1e8>)
 8004ba2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004ba6:	4b1a      	ldr	r3, [pc, #104]	; (8004c10 <path_following_step+0x1e4>)
 8004ba8:	ed93 7b04 	vldr	d7, [r3, #16]
 8004bac:	eeb0 0a47 	vmov.f32	s0, s14
 8004bb0:	eef0 0a67 	vmov.f32	s1, s15
 8004bb4:	f00c fe4c 	bl	8011850 <sin>
 8004bb8:	ec53 2b10 	vmov	r2, r3, d0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fd32 	bl	8000628 <__aeabi_dmul>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4623      	mov	r3, r4
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb fb74 	bl	80002bc <__adddf3>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	4621      	mov	r1, r4
 8004bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be0:	f7fb fd22 	bl	8000628 <__aeabi_dmul>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	4618      	mov	r0, r3
 8004bea:	4621      	mov	r1, r4
 8004bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf0:	f7fb fb64 	bl	80002bc <__adddf3>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	460c      	mov	r4, r1
 8004bf8:	4a07      	ldr	r2, [pc, #28]	; (8004c18 <path_following_step+0x1ec>)
 8004bfa:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c08:	20021da0 	.word	0x20021da0
 8004c0c:	408f4000 	.word	0x408f4000
 8004c10:	20021dd0 	.word	0x20021dd0
 8004c14:	20021e10 	.word	0x20021e10
 8004c18:	20021e00 	.word	0x20021e00

08004c1c <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	4b10      	ldr	r3, [pc, #64]	; (8004c78 <HAL_MspInit+0x4c>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	4a0f      	ldr	r2, [pc, #60]	; (8004c78 <HAL_MspInit+0x4c>)
 8004c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c40:	6453      	str	r3, [r2, #68]	; 0x44
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <HAL_MspInit+0x4c>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c4e:	2300      	movs	r3, #0
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <HAL_MspInit+0x4c>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	4a08      	ldr	r2, [pc, #32]	; (8004c78 <HAL_MspInit+0x4c>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c5e:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <HAL_MspInit+0x4c>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800

08004c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	; 0x30
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c84:	f107 031c 	add.w	r3, r7, #28
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a4a      	ldr	r2, [pc, #296]	; (8004dc4 <HAL_ADC_MspInit+0x148>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	f040 808e 	bne.w	8004dbc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61bb      	str	r3, [r7, #24]
 8004ca4:	4b48      	ldr	r3, [pc, #288]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	4a47      	ldr	r2, [pc, #284]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cae:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb0:	4b45      	ldr	r3, [pc, #276]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4a40      	ldr	r2, [pc, #256]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cc6:	f043 0304 	orr.w	r3, r3, #4
 8004cca:	6313      	str	r3, [r2, #48]	; 0x30
 8004ccc:	4b3e      	ldr	r3, [pc, #248]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	4b3a      	ldr	r3, [pc, #232]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	4a39      	ldr	r2, [pc, #228]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce8:	4b37      	ldr	r3, [pc, #220]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	4b33      	ldr	r3, [pc, #204]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	4a32      	ldr	r2, [pc, #200]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004cfe:	f043 0302 	orr.w	r3, r3, #2
 8004d02:	6313      	str	r3, [r2, #48]	; 0x30
 8004d04:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <HAL_ADC_MspInit+0x14c>)
 8004d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004d10:	230f      	movs	r3, #15
 8004d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d14:	2303      	movs	r3, #3
 8004d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d1c:	f107 031c 	add.w	r3, r7, #28
 8004d20:	4619      	mov	r1, r3
 8004d22:	482a      	ldr	r0, [pc, #168]	; (8004dcc <HAL_ADC_MspInit+0x150>)
 8004d24:	f002 fb86 	bl	8007434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004d28:	23ff      	movs	r3, #255	; 0xff
 8004d2a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	f107 031c 	add.w	r3, r7, #28
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4825      	ldr	r0, [pc, #148]	; (8004dd0 <HAL_ADC_MspInit+0x154>)
 8004d3c:	f002 fb7a 	bl	8007434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d40:	2303      	movs	r3, #3
 8004d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d44:	2303      	movs	r3, #3
 8004d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d4c:	f107 031c 	add.w	r3, r7, #28
 8004d50:	4619      	mov	r1, r3
 8004d52:	4820      	ldr	r0, [pc, #128]	; (8004dd4 <HAL_ADC_MspInit+0x158>)
 8004d54:	f002 fb6e 	bl	8007434 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004d58:	4b1f      	ldr	r3, [pc, #124]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d5a:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <HAL_ADC_MspInit+0x160>)
 8004d5c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d64:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d66:	4b1c      	ldr	r3, [pc, #112]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004d72:	4b19      	ldr	r3, [pc, #100]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d78:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d7a:	4b17      	ldr	r3, [pc, #92]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d80:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d82:	4b15      	ldr	r3, [pc, #84]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d88:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004d8a:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d90:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004d98:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d9a:	4b0f      	ldr	r3, [pc, #60]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004da0:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004da2:	f001 ffab 	bl	8006cfc <HAL_DMA_Init>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004dac:	f7ff fdb6 	bl	800491c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a09      	ldr	r2, [pc, #36]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004db4:	639a      	str	r2, [r3, #56]	; 0x38
 8004db6:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <HAL_ADC_MspInit+0x15c>)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004dbc:	bf00      	nop
 8004dbe:	3730      	adds	r7, #48	; 0x30
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40012100 	.word	0x40012100
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40020800 	.word	0x40020800
 8004dd0:	40020000 	.word	0x40020000
 8004dd4:	40020400 	.word	0x40020400
 8004dd8:	20021d00 	.word	0x20021d00
 8004ddc:	40026440 	.word	0x40026440

08004de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08c      	sub	sp, #48	; 0x30
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004de8:	f107 031c 	add.w	r3, r7, #28
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a32      	ldr	r2, [pc, #200]	; (8004ec8 <HAL_I2C_MspInit+0xe8>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d12c      	bne.n	8004e5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
 8004e06:	4b31      	ldr	r3, [pc, #196]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a30      	ldr	r2, [pc, #192]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	6313      	str	r3, [r2, #48]	; 0x30
 8004e12:	4b2e      	ldr	r3, [pc, #184]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e1e:	23c0      	movs	r3, #192	; 0xc0
 8004e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e22:	2312      	movs	r3, #18
 8004e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e26:	2301      	movs	r3, #1
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e2e:	2304      	movs	r3, #4
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e32:	f107 031c 	add.w	r3, r7, #28
 8004e36:	4619      	mov	r1, r3
 8004e38:	4825      	ldr	r0, [pc, #148]	; (8004ed0 <HAL_I2C_MspInit+0xf0>)
 8004e3a:	f002 fafb 	bl	8007434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e3e:	2300      	movs	r3, #0
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	4a21      	ldr	r2, [pc, #132]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e4e:	4b1f      	ldr	r3, [pc, #124]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004e5a:	e031      	b.n	8004ec0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_I2C_MspInit+0xf4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d12c      	bne.n	8004ec0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e70:	f043 0302 	orr.w	r3, r3, #2
 8004e74:	6313      	str	r3, [r2, #48]	; 0x30
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	613b      	str	r3, [r7, #16]
 8004e80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e88:	2312      	movs	r3, #18
 8004e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e90:	2303      	movs	r3, #3
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004e94:	2304      	movs	r3, #4
 8004e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e98:	f107 031c 	add.w	r3, r7, #28
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	480c      	ldr	r0, [pc, #48]	; (8004ed0 <HAL_I2C_MspInit+0xf0>)
 8004ea0:	f002 fac8 	bl	8007434 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	4a07      	ldr	r2, [pc, #28]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_I2C_MspInit+0xec>)
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	bf00      	nop
 8004ec2:	3730      	adds	r7, #48	; 0x30
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40005400 	.word	0x40005400
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	40020400 	.word	0x40020400
 8004ed4:	40005800 	.word	0x40005800

08004ed8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ee0:	f107 0314 	add.w	r3, r7, #20
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	609a      	str	r2, [r3, #8]
 8004eec:	60da      	str	r2, [r3, #12]
 8004eee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a69      	ldr	r2, [pc, #420]	; (800509c <HAL_SD_MspInit+0x1c4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	f040 80cb 	bne.w	8005092 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	4b67      	ldr	r3, [pc, #412]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f04:	4a66      	ldr	r2, [pc, #408]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f0c:	4b64      	ldr	r3, [pc, #400]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f18:	2300      	movs	r3, #0
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	4b60      	ldr	r3, [pc, #384]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f20:	4a5f      	ldr	r2, [pc, #380]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f22:	f043 0304 	orr.w	r3, r3, #4
 8004f26:	6313      	str	r3, [r2, #48]	; 0x30
 8004f28:	4b5d      	ldr	r3, [pc, #372]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f34:	2300      	movs	r3, #0
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	4b59      	ldr	r3, [pc, #356]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	4a58      	ldr	r2, [pc, #352]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f3e:	f043 0308 	orr.w	r3, r3, #8
 8004f42:	6313      	str	r3, [r2, #48]	; 0x30
 8004f44:	4b56      	ldr	r3, [pc, #344]	; (80050a0 <HAL_SD_MspInit+0x1c8>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004f50:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004f54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f56:	2302      	movs	r3, #2
 8004f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f62:	230c      	movs	r3, #12
 8004f64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f66:	f107 0314 	add.w	r3, r7, #20
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	484d      	ldr	r0, [pc, #308]	; (80050a4 <HAL_SD_MspInit+0x1cc>)
 8004f6e:	f002 fa61 	bl	8007434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f72:	2304      	movs	r3, #4
 8004f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f82:	230c      	movs	r3, #12
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4846      	ldr	r0, [pc, #280]	; (80050a8 <HAL_SD_MspInit+0x1d0>)
 8004f8e:	f002 fa51 	bl	8007434 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004f92:	4b46      	ldr	r3, [pc, #280]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004f94:	4a46      	ldr	r2, [pc, #280]	; (80050b0 <HAL_SD_MspInit+0x1d8>)
 8004f96:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004f98:	4b44      	ldr	r3, [pc, #272]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004f9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f9e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fa0:	4b42      	ldr	r3, [pc, #264]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fa6:	4b41      	ldr	r3, [pc, #260]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fa8:	2200      	movs	r2, #0
 8004faa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fac:	4b3f      	ldr	r3, [pc, #252]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fb4:	4b3d      	ldr	r3, [pc, #244]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fba:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fbc:	4b3b      	ldr	r3, [pc, #236]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fc2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004fc4:	4b39      	ldr	r3, [pc, #228]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004fca:	4b38      	ldr	r3, [pc, #224]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fd0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004fd2:	4b36      	ldr	r3, [pc, #216]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004fd8:	4b34      	ldr	r3, [pc, #208]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fda:	2203      	movs	r2, #3
 8004fdc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004fde:	4b33      	ldr	r3, [pc, #204]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fe0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004fe6:	4b31      	ldr	r3, [pc, #196]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004fe8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004fee:	482f      	ldr	r0, [pc, #188]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8004ff0:	f001 fe84 	bl	8006cfc <HAL_DMA_Init>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004ffa:	f7ff fc8f 	bl	800491c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2a      	ldr	r2, [pc, #168]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_SD_MspInit+0x1d4>)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800500a:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800500c:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <HAL_SD_MspInit+0x1e0>)
 800500e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005010:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005012:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005016:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005018:	4b26      	ldr	r3, [pc, #152]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800501e:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005020:	2200      	movs	r2, #0
 8005022:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800502a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800502c:	4b21      	ldr	r3, [pc, #132]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800502e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005032:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005034:	4b1f      	ldr	r3, [pc, #124]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800503a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800503e:	2220      	movs	r2, #32
 8005040:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005042:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005044:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005048:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800504a:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800504c:	2204      	movs	r2, #4
 800504e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005050:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005052:	2203      	movs	r2, #3
 8005054:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005056:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005058:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005060:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005064:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005066:	4813      	ldr	r0, [pc, #76]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 8005068:	f001 fe48 	bl	8006cfc <HAL_DMA_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005072:	f7ff fc53 	bl	800491c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a0e      	ldr	r2, [pc, #56]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <HAL_SD_MspInit+0x1dc>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	2031      	movs	r0, #49	; 0x31
 8005088:	f001 fe01 	bl	8006c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800508c:	2031      	movs	r0, #49	; 0x31
 800508e:	f001 fe1a 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005092:	bf00      	nop
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40012c00 	.word	0x40012c00
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40020800 	.word	0x40020800
 80050a8:	40020c00 	.word	0x40020c00
 80050ac:	20021828 	.word	0x20021828
 80050b0:	40026458 	.word	0x40026458
 80050b4:	20021b5c 	.word	0x20021b5c
 80050b8:	400264a0 	.word	0x400264a0

080050bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b08a      	sub	sp, #40	; 0x28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c4:	f107 0314 	add.w	r3, r7, #20
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	605a      	str	r2, [r3, #4]
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	60da      	str	r2, [r3, #12]
 80050d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_SPI_MspInit+0x84>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d12c      	bne.n	8005138 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	4b18      	ldr	r3, [pc, #96]	; (8005144 <HAL_SPI_MspInit+0x88>)
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	4a17      	ldr	r2, [pc, #92]	; (8005144 <HAL_SPI_MspInit+0x88>)
 80050e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050ec:	6413      	str	r3, [r2, #64]	; 0x40
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <HAL_SPI_MspInit+0x88>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_SPI_MspInit+0x88>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <HAL_SPI_MspInit+0x88>)
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	6313      	str	r3, [r2, #48]	; 0x30
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <HAL_SPI_MspInit+0x88>)
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005116:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800511a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511c:	2302      	movs	r3, #2
 800511e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005124:	2303      	movs	r3, #3
 8005126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005128:	2305      	movs	r3, #5
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800512c:	f107 0314 	add.w	r3, r7, #20
 8005130:	4619      	mov	r1, r3
 8005132:	4805      	ldr	r0, [pc, #20]	; (8005148 <HAL_SPI_MspInit+0x8c>)
 8005134:	f002 f97e 	bl	8007434 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005138:	bf00      	nop
 800513a:	3728      	adds	r7, #40	; 0x28
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40003800 	.word	0x40003800
 8005144:	40023800 	.word	0x40023800
 8005148:	40020400 	.word	0x40020400

0800514c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b08c      	sub	sp, #48	; 0x30
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 031c 	add.w	r3, r7, #28
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2d      	ldr	r2, [pc, #180]	; (8005220 <HAL_TIM_PWM_MspInit+0xd4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d12d      	bne.n	80051ca <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	4b2c      	ldr	r3, [pc, #176]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	4a2b      	ldr	r2, [pc, #172]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005178:	f043 0301 	orr.w	r3, r3, #1
 800517c:	6453      	str	r3, [r2, #68]	; 0x44
 800517e:	4b29      	ldr	r3, [pc, #164]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	61bb      	str	r3, [r7, #24]
 8005188:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	4b25      	ldr	r3, [pc, #148]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	4a24      	ldr	r2, [pc, #144]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005194:	f043 0310 	orr.w	r3, r3, #16
 8005198:	6313      	str	r3, [r2, #48]	; 0x30
 800519a:	4b22      	ldr	r3, [pc, #136]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f003 0310 	and.w	r3, r3, #16
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80051a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80051aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ac:	2302      	movs	r3, #2
 80051ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051bc:	f107 031c 	add.w	r3, r7, #28
 80051c0:	4619      	mov	r1, r3
 80051c2:	4819      	ldr	r0, [pc, #100]	; (8005228 <HAL_TIM_PWM_MspInit+0xdc>)
 80051c4:	f002 f936 	bl	8007434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80051c8:	e026      	b.n	8005218 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	; (800522c <HAL_TIM_PWM_MspInit+0xe0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d10e      	bne.n	80051f2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
 80051d8:	4b12      	ldr	r3, [pc, #72]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051dc:	4a11      	ldr	r2, [pc, #68]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	6413      	str	r3, [r2, #64]	; 0x40
 80051e4:	4b0f      	ldr	r3, [pc, #60]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	613b      	str	r3, [r7, #16]
 80051ee:	693b      	ldr	r3, [r7, #16]
}
 80051f0:	e012      	b.n	8005218 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a0e      	ldr	r2, [pc, #56]	; (8005230 <HAL_TIM_PWM_MspInit+0xe4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d10d      	bne.n	8005218 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051fc:	2300      	movs	r3, #0
 80051fe:	60fb      	str	r3, [r7, #12]
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	4a07      	ldr	r2, [pc, #28]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 8005206:	f043 0304 	orr.w	r3, r3, #4
 800520a:	6413      	str	r3, [r2, #64]	; 0x40
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_TIM_PWM_MspInit+0xd8>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f003 0304 	and.w	r3, r3, #4
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	68fb      	ldr	r3, [r7, #12]
}
 8005218:	bf00      	nop
 800521a:	3730      	adds	r7, #48	; 0x30
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40010000 	.word	0x40010000
 8005224:	40023800 	.word	0x40023800
 8005228:	40021000 	.word	0x40021000
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800

08005234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a3e      	ldr	r2, [pc, #248]	; (800533c <HAL_TIM_Base_MspInit+0x108>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d116      	bne.n	8005274 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005246:	2300      	movs	r3, #0
 8005248:	61fb      	str	r3, [r7, #28]
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005250:	f043 0310 	orr.w	r3, r3, #16
 8005254:	6413      	str	r3, [r2, #64]	; 0x40
 8005256:	4b3a      	ldr	r3, [pc, #232]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	61fb      	str	r3, [r7, #28]
 8005260:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005262:	2200      	movs	r2, #0
 8005264:	2101      	movs	r1, #1
 8005266:	2036      	movs	r0, #54	; 0x36
 8005268:	f001 fd11 	bl	8006c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800526c:	2036      	movs	r0, #54	; 0x36
 800526e:	f001 fd2a 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005272:	e05e      	b.n	8005332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a32      	ldr	r2, [pc, #200]	; (8005344 <HAL_TIM_Base_MspInit+0x110>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d116      	bne.n	80052ac <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005288:	f043 0320 	orr.w	r3, r3, #32
 800528c:	6413      	str	r3, [r2, #64]	; 0x40
 800528e:	4b2c      	ldr	r3, [pc, #176]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	61bb      	str	r3, [r7, #24]
 8005298:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800529a:	2200      	movs	r2, #0
 800529c:	2100      	movs	r1, #0
 800529e:	2037      	movs	r0, #55	; 0x37
 80052a0:	f001 fcf5 	bl	8006c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052a4:	2037      	movs	r0, #55	; 0x37
 80052a6:	f001 fd0e 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
}
 80052aa:	e042      	b.n	8005332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a25      	ldr	r2, [pc, #148]	; (8005348 <HAL_TIM_Base_MspInit+0x114>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10e      	bne.n	80052d4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	4b21      	ldr	r3, [pc, #132]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	4a20      	ldr	r2, [pc, #128]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 80052c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c4:	6453      	str	r3, [r2, #68]	; 0x44
 80052c6:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	697b      	ldr	r3, [r7, #20]
}
 80052d2:	e02e      	b.n	8005332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a1c      	ldr	r2, [pc, #112]	; (800534c <HAL_TIM_Base_MspInit+0x118>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d10e      	bne.n	80052fc <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 80052e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 80052e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ec:	6453      	str	r3, [r2, #68]	; 0x44
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 80052f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f6:	613b      	str	r3, [r7, #16]
 80052f8:	693b      	ldr	r3, [r7, #16]
}
 80052fa:	e01a      	b.n	8005332 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <HAL_TIM_Base_MspInit+0x11c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d115      	bne.n	8005332 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	4a0c      	ldr	r2, [pc, #48]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005314:	6413      	str	r3, [r2, #64]	; 0x40
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_TIM_Base_MspInit+0x10c>)
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005322:	2200      	movs	r2, #0
 8005324:	2100      	movs	r1, #0
 8005326:	202c      	movs	r0, #44	; 0x2c
 8005328:	f001 fcb1 	bl	8006c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800532c:	202c      	movs	r0, #44	; 0x2c
 800532e:	f001 fcca 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
}
 8005332:	bf00      	nop
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40001000 	.word	0x40001000
 8005340:	40023800 	.word	0x40023800
 8005344:	40001400 	.word	0x40001400
 8005348:	40014400 	.word	0x40014400
 800534c:	40014800 	.word	0x40014800
 8005350:	40001c00 	.word	0x40001c00

08005354 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800535c:	f107 0314 	add.w	r3, r7, #20
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	60da      	str	r2, [r3, #12]
 800536a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <HAL_TIM_Encoder_MspInit+0x94>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d133      	bne.n	80053de <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005376:	2300      	movs	r3, #0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <HAL_TIM_Encoder_MspInit+0x98>)
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	4a1b      	ldr	r2, [pc, #108]	; (80053ec <HAL_TIM_Encoder_MspInit+0x98>)
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6453      	str	r3, [r2, #68]	; 0x44
 8005386:	4b19      	ldr	r3, [pc, #100]	; (80053ec <HAL_TIM_Encoder_MspInit+0x98>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	613b      	str	r3, [r7, #16]
 8005390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	4b15      	ldr	r3, [pc, #84]	; (80053ec <HAL_TIM_Encoder_MspInit+0x98>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <HAL_TIM_Encoder_MspInit+0x98>)
 800539c:	f043 0304 	orr.w	r3, r3, #4
 80053a0:	6313      	str	r3, [r2, #48]	; 0x30
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_TIM_Encoder_MspInit+0x98>)
 80053a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ae:	23c0      	movs	r3, #192	; 0xc0
 80053b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b2:	2302      	movs	r3, #2
 80053b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053be:	2303      	movs	r3, #3
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c2:	f107 0314 	add.w	r3, r7, #20
 80053c6:	4619      	mov	r1, r3
 80053c8:	4809      	ldr	r0, [pc, #36]	; (80053f0 <HAL_TIM_Encoder_MspInit+0x9c>)
 80053ca:	f002 f833 	bl	8007434 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	202c      	movs	r0, #44	; 0x2c
 80053d4:	f001 fc5b 	bl	8006c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80053d8:	202c      	movs	r0, #44	; 0x2c
 80053da:	f001 fc74 	bl	8006cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40010400 	.word	0x40010400
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40020800 	.word	0x40020800

080053f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08c      	sub	sp, #48	; 0x30
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053fc:	f107 031c 	add.w	r3, r7, #28
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a5c      	ldr	r2, [pc, #368]	; (8005584 <HAL_TIM_MspPostInit+0x190>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d11f      	bne.n	8005456 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005416:	2300      	movs	r3, #0
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	4b5b      	ldr	r3, [pc, #364]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	4a5a      	ldr	r2, [pc, #360]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005420:	f043 0310 	orr.w	r3, r3, #16
 8005424:	6313      	str	r3, [r2, #48]	; 0x30
 8005426:	4b58      	ldr	r3, [pc, #352]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005438:	2302      	movs	r3, #2
 800543a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543c:	2300      	movs	r3, #0
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005440:	2300      	movs	r3, #0
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005444:	2301      	movs	r3, #1
 8005446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005448:	f107 031c 	add.w	r3, r7, #28
 800544c:	4619      	mov	r1, r3
 800544e:	484f      	ldr	r0, [pc, #316]	; (800558c <HAL_TIM_MspPostInit+0x198>)
 8005450:	f001 fff0 	bl	8007434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005454:	e091      	b.n	800557a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a4d      	ldr	r2, [pc, #308]	; (8005590 <HAL_TIM_MspPostInit+0x19c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d11e      	bne.n	800549e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	4b48      	ldr	r3, [pc, #288]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	4a47      	ldr	r2, [pc, #284]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 800546a:	f043 0302 	orr.w	r3, r3, #2
 800546e:	6313      	str	r3, [r2, #48]	; 0x30
 8005470:	4b45      	ldr	r3, [pc, #276]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800547c:	2330      	movs	r3, #48	; 0x30
 800547e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005480:	2302      	movs	r3, #2
 8005482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005488:	2300      	movs	r3, #0
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800548c:	2302      	movs	r3, #2
 800548e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005490:	f107 031c 	add.w	r3, r7, #28
 8005494:	4619      	mov	r1, r3
 8005496:	483f      	ldr	r0, [pc, #252]	; (8005594 <HAL_TIM_MspPostInit+0x1a0>)
 8005498:	f001 ffcc 	bl	8007434 <HAL_GPIO_Init>
}
 800549c:	e06d      	b.n	800557a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a3d      	ldr	r2, [pc, #244]	; (8005598 <HAL_TIM_MspPostInit+0x1a4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d11f      	bne.n	80054e8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 80054b2:	f043 0308 	orr.w	r3, r3, #8
 80054b6:	6313      	str	r3, [r2, #48]	; 0x30
 80054b8:	4b33      	ldr	r3, [pc, #204]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80054c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80054c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054d6:	2302      	movs	r3, #2
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054da:	f107 031c 	add.w	r3, r7, #28
 80054de:	4619      	mov	r1, r3
 80054e0:	482e      	ldr	r0, [pc, #184]	; (800559c <HAL_TIM_MspPostInit+0x1a8>)
 80054e2:	f001 ffa7 	bl	8007434 <HAL_GPIO_Init>
}
 80054e6:	e048      	b.n	800557a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2c      	ldr	r2, [pc, #176]	; (80055a0 <HAL_TIM_MspPostInit+0x1ac>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d11f      	bne.n	8005532 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4a23      	ldr	r2, [pc, #140]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 80054fc:	f043 0302 	orr.w	r3, r3, #2
 8005500:	6313      	str	r3, [r2, #48]	; 0x30
 8005502:	4b21      	ldr	r3, [pc, #132]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800550e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005514:	2302      	movs	r3, #2
 8005516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551c:	2300      	movs	r3, #0
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005520:	2303      	movs	r3, #3
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005524:	f107 031c 	add.w	r3, r7, #28
 8005528:	4619      	mov	r1, r3
 800552a:	481a      	ldr	r0, [pc, #104]	; (8005594 <HAL_TIM_MspPostInit+0x1a0>)
 800552c:	f001 ff82 	bl	8007434 <HAL_GPIO_Init>
}
 8005530:	e023      	b.n	800557a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1b      	ldr	r2, [pc, #108]	; (80055a4 <HAL_TIM_MspPostInit+0x1b0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d11e      	bne.n	800557a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800553c:	2300      	movs	r3, #0
 800553e:	60bb      	str	r3, [r7, #8]
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	4a10      	ldr	r2, [pc, #64]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 8005546:	f043 0302 	orr.w	r3, r3, #2
 800554a:	6313      	str	r3, [r2, #48]	; 0x30
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <HAL_TIM_MspPostInit+0x194>)
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	60bb      	str	r3, [r7, #8]
 8005556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800555c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555e:	2302      	movs	r3, #2
 8005560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005566:	2300      	movs	r3, #0
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800556a:	2303      	movs	r3, #3
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800556e:	f107 031c 	add.w	r3, r7, #28
 8005572:	4619      	mov	r1, r3
 8005574:	4807      	ldr	r0, [pc, #28]	; (8005594 <HAL_TIM_MspPostInit+0x1a0>)
 8005576:	f001 ff5d 	bl	8007434 <HAL_GPIO_Init>
}
 800557a:	bf00      	nop
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40023800 	.word	0x40023800
 800558c:	40021000 	.word	0x40021000
 8005590:	40000400 	.word	0x40000400
 8005594:	40020400 	.word	0x40020400
 8005598:	40000800 	.word	0x40000800
 800559c:	40020c00 	.word	0x40020c00
 80055a0:	40014400 	.word	0x40014400
 80055a4:	40014800 	.word	0x40014800

080055a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b0:	f107 0314 	add.w	r3, r7, #20
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	605a      	str	r2, [r3, #4]
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	60da      	str	r2, [r3, #12]
 80055be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <HAL_UART_MspInit+0x84>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d12b      	bne.n	8005622 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ca:	2300      	movs	r3, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	4b18      	ldr	r3, [pc, #96]	; (8005630 <HAL_UART_MspInit+0x88>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	4a17      	ldr	r2, [pc, #92]	; (8005630 <HAL_UART_MspInit+0x88>)
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40
 80055da:	4b15      	ldr	r3, [pc, #84]	; (8005630 <HAL_UART_MspInit+0x88>)
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HAL_UART_MspInit+0x88>)
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	4a10      	ldr	r2, [pc, #64]	; (8005630 <HAL_UART_MspInit+0x88>)
 80055f0:	f043 0308 	orr.w	r3, r3, #8
 80055f4:	6313      	str	r3, [r2, #48]	; 0x30
 80055f6:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <HAL_UART_MspInit+0x88>)
 80055f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005602:	2360      	movs	r3, #96	; 0x60
 8005604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005606:	2302      	movs	r3, #2
 8005608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560a:	2300      	movs	r3, #0
 800560c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800560e:	2303      	movs	r3, #3
 8005610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005612:	2307      	movs	r3, #7
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005616:	f107 0314 	add.w	r3, r7, #20
 800561a:	4619      	mov	r1, r3
 800561c:	4805      	ldr	r0, [pc, #20]	; (8005634 <HAL_UART_MspInit+0x8c>)
 800561e:	f001 ff09 	bl	8007434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005622:	bf00      	nop
 8005624:	3728      	adds	r7, #40	; 0x28
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	40004400 	.word	0x40004400
 8005630:	40023800 	.word	0x40023800
 8005634:	40020c00 	.word	0x40020c00

08005638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800563c:	e7fe      	b.n	800563c <NMI_Handler+0x4>

0800563e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800563e:	b480      	push	{r7}
 8005640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005642:	e7fe      	b.n	8005642 <HardFault_Handler+0x4>

08005644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005648:	e7fe      	b.n	8005648 <MemManage_Handler+0x4>

0800564a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800564a:	b480      	push	{r7}
 800564c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800564e:	e7fe      	b.n	800564e <BusFault_Handler+0x4>

08005650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005654:	e7fe      	b.n	8005654 <UsageFault_Handler+0x4>

08005656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005656:	b480      	push	{r7}
 8005658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800565a:	bf00      	nop
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005672:	b480      	push	{r7}
 8005674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005676:	bf00      	nop
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005684:	f000 fde2 	bl	800624c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005688:	bf00      	nop
 800568a:	bd80      	pop	{r7, pc}

0800568c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005690:	2004      	movs	r0, #4
 8005692:	f002 f8ab 	bl	80077ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}

0800569a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800569e:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056a2:	f002 f8a3 	bl	80077ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056a6:	bf00      	nop
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80056b0:	4803      	ldr	r0, [pc, #12]	; (80056c0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80056b2:	f006 f8ba 	bl	800b82a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80056b6:	4803      	ldr	r0, [pc, #12]	; (80056c4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80056b8:	f006 f8b7 	bl	800b82a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200218e0 	.word	0x200218e0
 80056c4:	20021adc 	.word	0x20021adc

080056c8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80056cc:	4802      	ldr	r0, [pc, #8]	; (80056d8 <SDIO_IRQHandler+0x10>)
 80056ce:	f004 f953 	bl	8009978 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20021c3c 	.word	0x20021c3c

080056dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80056e0:	4802      	ldr	r0, [pc, #8]	; (80056ec <TIM6_DAC_IRQHandler+0x10>)
 80056e2:	f006 f8a2 	bl	800b82a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20021bbc 	.word	0x20021bbc

080056f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80056f4:	4802      	ldr	r0, [pc, #8]	; (8005700 <TIM7_IRQHandler+0x10>)
 80056f6:	f006 f898 	bl	800b82a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20021d60 	.word	0x20021d60

08005704 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005708:	4802      	ldr	r0, [pc, #8]	; (8005714 <DMA2_Stream2_IRQHandler+0x10>)
 800570a:	f001 fc1f 	bl	8006f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20021d00 	.word	0x20021d00

08005718 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800571c:	4802      	ldr	r0, [pc, #8]	; (8005728 <DMA2_Stream3_IRQHandler+0x10>)
 800571e:	f001 fc15 	bl	8006f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20021828 	.word	0x20021828

0800572c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005730:	4802      	ldr	r0, [pc, #8]	; (800573c <DMA2_Stream6_IRQHandler+0x10>)
 8005732:	f001 fc0b 	bl	8006f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20021b5c 	.word	0x20021b5c

08005740 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e00a      	b.n	8005768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005752:	f3af 8000 	nop.w
 8005756:	4601      	mov	r1, r0
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	60ba      	str	r2, [r7, #8]
 800575e:	b2ca      	uxtb	r2, r1
 8005760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	3301      	adds	r3, #1
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	429a      	cmp	r2, r3
 800576e:	dbf0      	blt.n	8005752 <_read+0x12>
	}

return len;
 8005770:	687b      	ldr	r3, [r7, #4]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <_close>:
	}
	return len;
}

int _close(int file)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
	return -1;
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005786:	4618      	mov	r0, r3
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005792:	b480      	push	{r7}
 8005794:	b083      	sub	sp, #12
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057a2:	605a      	str	r2, [r3, #4]
	return 0;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <_isatty>:

int _isatty(int file)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
	return 1;
 80057ba:	2301      	movs	r3, #1
}
 80057bc:	4618      	mov	r0, r3
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
	return 0;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80057ec:	4a14      	ldr	r2, [pc, #80]	; (8005840 <_sbrk+0x5c>)
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <_sbrk+0x60>)
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80057f8:	4b13      	ldr	r3, [pc, #76]	; (8005848 <_sbrk+0x64>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005800:	4b11      	ldr	r3, [pc, #68]	; (8005848 <_sbrk+0x64>)
 8005802:	4a12      	ldr	r2, [pc, #72]	; (800584c <_sbrk+0x68>)
 8005804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005806:	4b10      	ldr	r3, [pc, #64]	; (8005848 <_sbrk+0x64>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4413      	add	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	429a      	cmp	r2, r3
 8005812:	d207      	bcs.n	8005824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005814:	f00d f93e 	bl	8012a94 <__errno>
 8005818:	4602      	mov	r2, r0
 800581a:	230c      	movs	r3, #12
 800581c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800581e:	f04f 33ff 	mov.w	r3, #4294967295
 8005822:	e009      	b.n	8005838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <_sbrk+0x64>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800582a:	4b07      	ldr	r3, [pc, #28]	; (8005848 <_sbrk+0x64>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	4a05      	ldr	r2, [pc, #20]	; (8005848 <_sbrk+0x64>)
 8005834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005836:	68fb      	ldr	r3, [r7, #12]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20050000 	.word	0x20050000
 8005844:	00000400 	.word	0x00000400
 8005848:	20000230 	.word	0x20000230
 800584c:	20023ea8 	.word	0x20023ea8

08005850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005854:	4b08      	ldr	r3, [pc, #32]	; (8005878 <SystemInit+0x28>)
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585a:	4a07      	ldr	r2, [pc, #28]	; (8005878 <SystemInit+0x28>)
 800585c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <SystemInit+0x28>)
 8005866:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800586a:	609a      	str	r2, [r3, #8]
#endif
}
 800586c:	bf00      	nop
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <batteryLowMode>:

double mon_f, mon_d;
double mon_v, mon_w;

void batteryLowMode()
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
	lcd_clear();
 8005880:	f7fb fc0e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005884:	2100      	movs	r1, #0
 8005886:	2000      	movs	r0, #0
 8005888:	f7fb fc1a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 800588c:	4814      	ldr	r0, [pc, #80]	; (80058e0 <batteryLowMode+0x64>)
 800588e:	f7fb fc41 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005892:	2101      	movs	r1, #1
 8005894:	2000      	movs	r0, #0
 8005896:	f7fb fc13 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 800589a:	4812      	ldr	r0, [pc, #72]	; (80058e4 <batteryLowMode+0x68>)
 800589c:	f7fb fc3a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80058a0:	2152      	movs	r1, #82	; 0x52
 80058a2:	4811      	ldr	r0, [pc, #68]	; (80058e8 <batteryLowMode+0x6c>)
 80058a4:	f7fc fb38 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80058a8:	2064      	movs	r0, #100	; 0x64
 80058aa:	f000 fcef 	bl	800628c <HAL_Delay>
		led.fullColor('Y');
 80058ae:	2159      	movs	r1, #89	; 0x59
 80058b0:	480d      	ldr	r0, [pc, #52]	; (80058e8 <batteryLowMode+0x6c>)
 80058b2:	f7fc fb31 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80058b6:	2064      	movs	r0, #100	; 0x64
 80058b8:	f000 fce8 	bl	800628c <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80058bc:	480b      	ldr	r0, [pc, #44]	; (80058ec <batteryLowMode+0x70>)
 80058be:	f7fc fac7 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	bf0c      	ite	eq
 80058c8:	2301      	moveq	r3, #1
 80058ca:	2300      	movne	r3, #0
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0e6      	beq.n	80058a0 <batteryLowMode+0x24>
			HAL_Delay(500);
 80058d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058d6:	f000 fcd9 	bl	800628c <HAL_Delay>
			break;
 80058da:	bf00      	nop
		}
	}
}
 80058dc:	bf00      	nop
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	08017a00 	.word	0x08017a00
 80058e4:	08017a08 	.word	0x08017a08
 80058e8:	2000053c 	.word	0x2000053c
 80058ec:	20000530 	.word	0x20000530

080058f0 <cppInit>:

void cppInit(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
	lcd_init();
 80058f4:	f7fb fb90 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80058f8:	4839      	ldr	r0, [pc, #228]	; (80059e0 <cppInit+0xf0>)
 80058fa:	f7fd fcdb 	bl	80032b4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 80058fe:	2064      	movs	r0, #100	; 0x64
 8005900:	f000 fcc4 	bl	800628c <HAL_Delay>
	power_sensor.updateValues();
 8005904:	4836      	ldr	r0, [pc, #216]	; (80059e0 <cppInit+0xf0>)
 8005906:	f7fd fce3 	bl	80032d0 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 800590a:	4835      	ldr	r0, [pc, #212]	; (80059e0 <cppInit+0xf0>)
 800590c:	f7fd fd0c 	bl	8003328 <_ZN11PowerSensor12butteryCheckEv>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <cppInit+0x2a>
 8005916:	f7ff ffb1 	bl	800587c <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800591a:	4832      	ldr	r0, [pc, #200]	; (80059e4 <cppInit+0xf4>)
 800591c:	f7fd f8ca 	bl	8002ab4 <_ZN6Logger10sdCardInitEv>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <cppInit+0x46>
		led.fullColor('G');
 8005926:	2147      	movs	r1, #71	; 0x47
 8005928:	482f      	ldr	r0, [pc, #188]	; (80059e8 <cppInit+0xf8>)
 800592a:	f7fc faf5 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800592e:	2064      	movs	r0, #100	; 0x64
 8005930:	f000 fcac 	bl	800628c <HAL_Delay>
 8005934:	e006      	b.n	8005944 <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005936:	2152      	movs	r1, #82	; 0x52
 8005938:	482b      	ldr	r0, [pc, #172]	; (80059e8 <cppInit+0xf8>)
 800593a:	f7fc faed 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800593e:	2064      	movs	r0, #100	; 0x64
 8005940:	f000 fca4 	bl	800628c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005944:	4829      	ldr	r0, [pc, #164]	; (80059ec <cppInit+0xfc>)
 8005946:	f7fc fc43 	bl	80021d0 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800594a:	4829      	ldr	r0, [pc, #164]	; (80059f0 <cppInit+0x100>)
 800594c:	f7fd f99a 	bl	8002c84 <_ZN5Motor4initEv>
	encoder.init();
 8005950:	4828      	ldr	r0, [pc, #160]	; (80059f4 <cppInit+0x104>)
 8005952:	f7fb fc33 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 8005956:	4828      	ldr	r0, [pc, #160]	; (80059f8 <cppInit+0x108>)
 8005958:	f7fc f8d8 	bl	8001b0c <_ZN3IMU4initEv>

	line_sensor.calibration();
 800595c:	4823      	ldr	r0, [pc, #140]	; (80059ec <cppInit+0xfc>)
 800595e:	f7fc fd2d 	bl	80023bc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005966:	f000 fc91 	bl	800628c <HAL_Delay>

	led.fullColor('M');
 800596a:	214d      	movs	r1, #77	; 0x4d
 800596c:	481e      	ldr	r0, [pc, #120]	; (80059e8 <cppInit+0xf8>)
 800596e:	f7fc fad3 	bl	8001f18 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005972:	4821      	ldr	r0, [pc, #132]	; (80059f8 <cppInit+0x108>)
 8005974:	f7fc f95a 	bl	8001c2c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005978:	ed9f 1a20 	vldr	s2, [pc, #128]	; 80059fc <cppInit+0x10c>
 800597c:	eddf 0a20 	vldr	s1, [pc, #128]	; 8005a00 <cppInit+0x110>
 8005980:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005a04 <cppInit+0x114>
 8005984:	4820      	ldr	r0, [pc, #128]	; (8005a08 <cppInit+0x118>)
 8005986:	f7fc ffdf 	bl	8002948 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 800598a:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80059fc <cppInit+0x10c>
 800598e:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80059fc <cppInit+0x10c>
 8005992:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80059fc <cppInit+0x10c>
 8005996:	481d      	ldr	r0, [pc, #116]	; (8005a0c <cppInit+0x11c>)
 8005998:	f7fd ff76 	bl	8003888 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 800599c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80059fc <cppInit+0x10c>
 80059a0:	eddf 0a16 	vldr	s1, [pc, #88]	; 80059fc <cppInit+0x10c>
 80059a4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80059fc <cppInit+0x10c>
 80059a8:	4818      	ldr	r0, [pc, #96]	; (8005a0c <cppInit+0x11c>)
 80059aa:	f7fd ff86 	bl	80038ba <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 80059ae:	4811      	ldr	r0, [pc, #68]	; (80059f4 <cppInit+0x104>)
 80059b0:	f7fb fcf2 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80059b4:	4816      	ldr	r0, [pc, #88]	; (8005a10 <cppInit+0x120>)
 80059b6:	f7fd fb73 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80059ba:	4816      	ldr	r0, [pc, #88]	; (8005a14 <cppInit+0x124>)
 80059bc:	f7fd fbec 	bl	8003198 <_ZN13PathFollowing4initEv>
	path_following.setGain(10, 10, 10);
 80059c0:	ed9f 2b05 	vldr	d2, [pc, #20]	; 80059d8 <cppInit+0xe8>
 80059c4:	ed9f 1b04 	vldr	d1, [pc, #16]	; 80059d8 <cppInit+0xe8>
 80059c8:	ed9f 0b03 	vldr	d0, [pc, #12]	; 80059d8 <cppInit+0xe8>
 80059cc:	4811      	ldr	r0, [pc, #68]	; (8005a14 <cppInit+0x124>)
 80059ce:	f7fd fbed 	bl	80031ac <_ZN13PathFollowing7setGainEddd>

}
 80059d2:	bf00      	nop
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	00000000 	.word	0x00000000
 80059dc:	40240000 	.word	0x40240000
 80059e0:	20000540 	.word	0x20000540
 80059e4:	20000570 	.word	0x20000570
 80059e8:	2000053c 	.word	0x2000053c
 80059ec:	20000234 	.word	0x20000234
 80059f0:	20000538 	.word	0x20000538
 80059f4:	2001f1a8 	.word	0x2001f1a8
 80059f8:	20000550 	.word	0x20000550
 80059fc:	00000000 	.word	0x00000000
 8005a00:	360637bd 	.word	0x360637bd
 8005a04:	3a03126f 	.word	0x3a03126f
 8005a08:	2001f218 	.word	0x2001f218
 8005a0c:	2001f1d8 	.word	0x2001f1d8
 8005a10:	2001f278 	.word	0x2001f278
 8005a14:	2001f2a8 	.word	0x2001f2a8

08005a18 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	ed2d 8b04 	vpush	{d8-d9}
 8005a1e:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005a20:	482b      	ldr	r0, [pc, #172]	; (8005ad0 <cppFlip1ms+0xb8>)
 8005a22:	f7fc fc33 	bl	800228c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005a26:	482b      	ldr	r0, [pc, #172]	; (8005ad4 <cppFlip1ms+0xbc>)
 8005a28:	f7fc f884 	bl	8001b34 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005a2c:	482a      	ldr	r0, [pc, #168]	; (8005ad8 <cppFlip1ms+0xc0>)
 8005a2e:	f7fb fbe7 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005a32:	482a      	ldr	r0, [pc, #168]	; (8005adc <cppFlip1ms+0xc4>)
 8005a34:	f7fc ffc0 	bl	80029b8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005a38:	4829      	ldr	r0, [pc, #164]	; (8005ae0 <cppFlip1ms+0xc8>)
 8005a3a:	f7fd ff57 	bl	80038ec <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005a3e:	4829      	ldr	r0, [pc, #164]	; (8005ae4 <cppFlip1ms+0xcc>)
 8005a40:	f7fd faf0 	bl	8003024 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005a44:	4828      	ldr	r0, [pc, #160]	; (8005ae8 <cppFlip1ms+0xd0>)
 8005a46:	f7fd f92f 	bl	8002ca8 <_ZN5Motor9motorCtrlEv>
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	path_following.setTargetPath(0, 0, 0);
 8005a4a:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8005ac8 <cppFlip1ms+0xb0>
 8005a4e:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8005ac8 <cppFlip1ms+0xb0>
 8005a52:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8005ac8 <cppFlip1ms+0xb0>
 8005a56:	4825      	ldr	r0, [pc, #148]	; (8005aec <cppFlip1ms+0xd4>)
 8005a58:	f7fd fbc8 	bl	80031ec <_ZN13PathFollowing13setTargetPathEddd>
	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005a5c:	4821      	ldr	r0, [pc, #132]	; (8005ae4 <cppFlip1ms+0xcc>)
 8005a5e:	f7fd faec 	bl	800303a <_ZN8Odometry4getXEv>
 8005a62:	eeb0 8a40 	vmov.f32	s16, s0
 8005a66:	eef0 8a60 	vmov.f32	s17, s1
 8005a6a:	481e      	ldr	r0, [pc, #120]	; (8005ae4 <cppFlip1ms+0xcc>)
 8005a6c:	f7fd faf6 	bl	800305c <_ZN8Odometry4getYEv>
 8005a70:	eeb0 9a40 	vmov.f32	s18, s0
 8005a74:	eef0 9a60 	vmov.f32	s19, s1
 8005a78:	481a      	ldr	r0, [pc, #104]	; (8005ae4 <cppFlip1ms+0xcc>)
 8005a7a:	f7fd fb00 	bl	800307e <_ZN8Odometry8getThetaEv>
 8005a7e:	eeb0 7a40 	vmov.f32	s14, s0
 8005a82:	eef0 7a60 	vmov.f32	s15, s1
 8005a86:	eeb0 2a47 	vmov.f32	s4, s14
 8005a8a:	eef0 2a67 	vmov.f32	s5, s15
 8005a8e:	eeb0 1a49 	vmov.f32	s2, s18
 8005a92:	eef0 1a69 	vmov.f32	s3, s19
 8005a96:	eeb0 0a48 	vmov.f32	s0, s16
 8005a9a:	eef0 0a68 	vmov.f32	s1, s17
 8005a9e:	4813      	ldr	r0, [pc, #76]	; (8005aec <cppFlip1ms+0xd4>)
 8005aa0:	f7fd fbc4 	bl	800322c <_ZN13PathFollowing14setCurrentPathEddd>
	path_following.flip();
 8005aa4:	4811      	ldr	r0, [pc, #68]	; (8005aec <cppFlip1ms+0xd4>)
 8005aa6:	f7fd fbfb 	bl	80032a0 <_ZN13PathFollowing4flipEv>

	path_following.getTargetVelocitys(mon_v, mon_w);
 8005aaa:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <cppFlip1ms+0xd8>)
 8005aac:	4911      	ldr	r1, [pc, #68]	; (8005af4 <cppFlip1ms+0xdc>)
 8005aae:	480f      	ldr	r0, [pc, #60]	; (8005aec <cppFlip1ms+0xd4>)
 8005ab0:	f7fd fbdc 	bl	800326c <_ZN13PathFollowing18getTargetVelocitysERdS0_>
	encoder.clearCnt();
 8005ab4:	4808      	ldr	r0, [pc, #32]	; (8005ad8 <cppFlip1ms+0xc0>)
 8005ab6:	f7fb fc7f 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	ecbd 8b04 	vpop	{d8-d9}
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	f3af 8000 	nop.w
	...
 8005ad0:	20000234 	.word	0x20000234
 8005ad4:	20000550 	.word	0x20000550
 8005ad8:	2001f1a8 	.word	0x2001f1a8
 8005adc:	2001f218 	.word	0x2001f218
 8005ae0:	2001f1d8 	.word	0x2001f1d8
 8005ae4:	2001f278 	.word	0x2001f278
 8005ae8:	20000538 	.word	0x20000538
 8005aec:	2001f2a8 	.word	0x2001f2a8
 8005af0:	2001f2c8 	.word	0x2001f2c8
 8005af4:	2001f2c0 	.word	0x2001f2c0

08005af8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005afc:	4802      	ldr	r0, [pc, #8]	; (8005b08 <cppFlip100ns+0x10>)
 8005afe:	f7fc fb77 	bl	80021f0 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	20000234 	.word	0x20000234

08005b0c <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005b10:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <cppFlip10ms+0x18>)
 8005b12:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005b16:	eeb0 0a67 	vmov.f32	s0, s15
 8005b1a:	4803      	ldr	r0, [pc, #12]	; (8005b28 <cppFlip10ms+0x1c>)
 8005b1c:	f7fd f812 	bl	8002b44 <_ZN6Logger8storeLogEf>
	//logger.storeDistanceAndTheta(encoder.getDistance(), velocity_ctrl.getCurrentOmega()*DELTA_T);
}
 8005b20:	bf00      	nop
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	20000234 	.word	0x20000234
 8005b28:	20000570 	.word	0x20000570

08005b2c <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4803      	ldr	r0, [pc, #12]	; (8005b48 <cppExit+0x1c>)
 8005b3c:	f7fd fc80 	bl	8003440 <_ZN10SideSensor12updateStatusEt>
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	2000052c 	.word	0x2000052c
 8005b4c:	00000000 	.word	0x00000000

08005b50 <cppLoop>:

void cppLoop(void)
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b089      	sub	sp, #36	; 0x24
 8005b54:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005b56:	48be      	ldr	r0, [pc, #760]	; (8005e50 <cppLoop+0x300>)
 8005b58:	f7fd fc18 	bl	800338c <_ZN12RotarySwitch8getValueEv>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b0f      	cmp	r3, #15
 8005b60:	f200 8269 	bhi.w	8006036 <cppLoop+0x4e6>
 8005b64:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <cppLoop+0x1c>)
 8005b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6a:	bf00      	nop
 8005b6c:	08005bad 	.word	0x08005bad
 8005b70:	08005bcf 	.word	0x08005bcf
 8005b74:	08005c57 	.word	0x08005c57
 8005b78:	08005d03 	.word	0x08005d03
 8005b7c:	08005dbb 	.word	0x08005dbb
 8005b80:	08005eb5 	.word	0x08005eb5
 8005b84:	08005f7f 	.word	0x08005f7f
 8005b88:	08006037 	.word	0x08006037
 8005b8c:	08006037 	.word	0x08006037
 8005b90:	08006037 	.word	0x08006037
 8005b94:	08006037 	.word	0x08006037
 8005b98:	08006037 	.word	0x08006037
 8005b9c:	08006037 	.word	0x08006037
 8005ba0:	08006037 	.word	0x08006037
 8005ba4:	08006037 	.word	0x08006037
 8005ba8:	08006037 	.word	0x08006037

	case 0:
		lcd_clear();
 8005bac:	f7fb fa78 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	f7fb fa84 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005bb8:	48a6      	ldr	r0, [pc, #664]	; (8005e54 <cppLoop+0x304>)
 8005bba:	f7fb faab 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fb fa7d 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005bc6:	48a4      	ldr	r0, [pc, #656]	; (8005e58 <cppLoop+0x308>)
 8005bc8:	f7fb faa4 	bl	8001114 <lcd_printf>
		break;
 8005bcc:	e240      	b.n	8006050 <cppLoop+0x500>

	case 1:
		lcd_clear();
 8005bce:	f7fb fa67 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fb fa73 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005bda:	48a0      	ldr	r0, [pc, #640]	; (8005e5c <cppLoop+0x30c>)
 8005bdc:	f7fb fa9a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005be0:	2101      	movs	r1, #1
 8005be2:	2000      	movs	r0, #0
 8005be4:	f7fb fa6c 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005be8:	489d      	ldr	r0, [pc, #628]	; (8005e60 <cppLoop+0x310>)
 8005bea:	f7fb fa93 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005bee:	489d      	ldr	r0, [pc, #628]	; (8005e64 <cppLoop+0x314>)
 8005bf0:	f7fc f92e 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 821a 	beq.w	800603a <cppLoop+0x4ea>
			HAL_Delay(500);
 8005c06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c0a:	f000 fb3f 	bl	800628c <HAL_Delay>

			logger.start();
 8005c0e:	4896      	ldr	r0, [pc, #600]	; (8005e68 <cppLoop+0x318>)
 8005c10:	f7fd f807 	bl	8002c22 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005c14:	4895      	ldr	r0, [pc, #596]	; (8005e6c <cppLoop+0x31c>)
 8005c16:	f7fd fe7c 	bl	8003912 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005c1a:	eddf 0a95 	vldr	s1, [pc, #596]	; 8005e70 <cppLoop+0x320>
 8005c1e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005e70 <cppLoop+0x320>
 8005c22:	4892      	ldr	r0, [pc, #584]	; (8005e6c <cppLoop+0x31c>)
 8005c24:	f7fd fe1c 	bl	8003860 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005c28:	f04f 32ff 	mov.w	r2, #4294967295
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	4891      	ldr	r0, [pc, #580]	; (8005e74 <cppLoop+0x324>)
 8005c30:	f7fc fa2e 	bl	8002090 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005c34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005c38:	f000 fb28 	bl	800628c <HAL_Delay>

			velocity_ctrl.stop();
 8005c3c:	488b      	ldr	r0, [pc, #556]	; (8005e6c <cppLoop+0x31c>)
 8005c3e:	f7fd fe77 	bl	8003930 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295
 8005c46:	2100      	movs	r1, #0
 8005c48:	488a      	ldr	r0, [pc, #552]	; (8005e74 <cppLoop+0x324>)
 8005c4a:	f7fc fa21 	bl	8002090 <_ZN3LED2LREaa>

			logger.stop();
 8005c4e:	4886      	ldr	r0, [pc, #536]	; (8005e68 <cppLoop+0x318>)
 8005c50:	f7fc fff7 	bl	8002c42 <_ZN6Logger4stopEv>
		}

		break;
 8005c54:	e1f1      	b.n	800603a <cppLoop+0x4ea>

	case 2:
		lcd_clear();
 8005c56:	f7fb fa23 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	f7fb fa2f 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005c62:	4885      	ldr	r0, [pc, #532]	; (8005e78 <cppLoop+0x328>)
 8005c64:	f7fb fa56 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005c68:	2101      	movs	r1, #1
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f7fb fa28 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005c70:	4882      	ldr	r0, [pc, #520]	; (8005e7c <cppLoop+0x32c>)
 8005c72:	f7fb fa4f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005c76:	487b      	ldr	r0, [pc, #492]	; (8005e64 <cppLoop+0x314>)
 8005c78:	f7fc f8ea 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	bf0c      	ite	eq
 8005c82:	2301      	moveq	r3, #1
 8005c84:	2300      	movne	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 81d8 	beq.w	800603e <cppLoop+0x4ee>
			led.LR(-1, 1);
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f04f 31ff 	mov.w	r1, #4294967295
 8005c94:	4877      	ldr	r0, [pc, #476]	; (8005e74 <cppLoop+0x324>)
 8005c96:	f7fc f9fb 	bl	8002090 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c9e:	f000 faf5 	bl	800628c <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005ca2:	4b77      	ldr	r3, [pc, #476]	; (8005e80 <cppLoop+0x330>)
 8005ca4:	617b      	str	r3, [r7, #20]
			double d = 0.123456789123456789123456789;
 8005ca6:	a468      	add	r4, pc, #416	; (adr r4, 8005e48 <cppLoop+0x2f8>)
 8005ca8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005cac:	e9c7 3402 	strd	r3, r4, [r7, #8]
			mon_f = f;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fa fc60 	bl	8000578 <__aeabi_f2d>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	4a71      	ldr	r2, [pc, #452]	; (8005e84 <cppLoop+0x334>)
 8005cbe:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005cc2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005cc6:	4a70      	ldr	r2, [pc, #448]	; (8005e88 <cppLoop+0x338>)
 8005cc8:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005ccc:	f107 0214 	add.w	r2, r7, #20
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	496c      	ldr	r1, [pc, #432]	; (8005e8c <cppLoop+0x33c>)
 8005cda:	486d      	ldr	r0, [pc, #436]	; (8005e90 <cppLoop+0x340>)
 8005cdc:	f7fb fc28 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005ce0:	f107 0208 	add.w	r2, r7, #8
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4613      	mov	r3, r2
 8005cea:	2201      	movs	r2, #1
 8005cec:	4969      	ldr	r1, [pc, #420]	; (8005e94 <cppLoop+0x344>)
 8005cee:	4868      	ldr	r0, [pc, #416]	; (8005e90 <cppLoop+0x340>)
 8005cf0:	f7fb fc84 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8005cfa:	485e      	ldr	r0, [pc, #376]	; (8005e74 <cppLoop+0x324>)
 8005cfc:	f7fc f9c8 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 8005d00:	e19d      	b.n	800603e <cppLoop+0x4ee>

	case 3:
		led.fullColor('C');
 8005d02:	2143      	movs	r1, #67	; 0x43
 8005d04:	485b      	ldr	r0, [pc, #364]	; (8005e74 <cppLoop+0x324>)
 8005d06:	f7fc f907 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005d0a:	f7fb f9c9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d0e:	2100      	movs	r1, #0
 8005d10:	2000      	movs	r0, #0
 8005d12:	f7fb f9d5 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005d16:	4860      	ldr	r0, [pc, #384]	; (8005e98 <cppLoop+0x348>)
 8005d18:	f7fb f9fc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f7fb f9ce 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005d24:	485d      	ldr	r0, [pc, #372]	; (8005e9c <cppLoop+0x34c>)
 8005d26:	f7fb f9f5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d2a:	484e      	ldr	r0, [pc, #312]	; (8005e64 <cppLoop+0x314>)
 8005d2c:	f7fc f890 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 8180 	beq.w	8006042 <cppLoop+0x4f2>
			led.LR(-1, 1);
 8005d42:	2201      	movs	r2, #1
 8005d44:	f04f 31ff 	mov.w	r1, #4294967295
 8005d48:	484a      	ldr	r0, [pc, #296]	; (8005e74 <cppLoop+0x324>)
 8005d4a:	f7fc f9a1 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005d4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d52:	f000 fa9b 	bl	800628c <HAL_Delay>

			logger.start();
 8005d56:	4844      	ldr	r0, [pc, #272]	; (8005e68 <cppLoop+0x318>)
 8005d58:	f7fc ff63 	bl	8002c22 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005d5c:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005ea0 <cppLoop+0x350>
 8005d60:	4850      	ldr	r0, [pc, #320]	; (8005ea4 <cppLoop+0x354>)
 8005d62:	f7fc fe0a 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005d66:	484f      	ldr	r0, [pc, #316]	; (8005ea4 <cppLoop+0x354>)
 8005d68:	f7fc fe5e 	bl	8002a28 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005d6c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005d70:	f000 fa8c 	bl	800628c <HAL_Delay>

			logger.stop();
 8005d74:	483c      	ldr	r0, [pc, #240]	; (8005e68 <cppLoop+0x318>)
 8005d76:	f7fc ff64 	bl	8002c42 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005d7a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005ea0 <cppLoop+0x350>
 8005d7e:	4849      	ldr	r0, [pc, #292]	; (8005ea4 <cppLoop+0x354>)
 8005d80:	f7fc fdfb 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005d84:	4847      	ldr	r0, [pc, #284]	; (8005ea4 <cppLoop+0x354>)
 8005d86:	f7fc fe5f 	bl	8002a48 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4838      	ldr	r0, [pc, #224]	; (8005e74 <cppLoop+0x324>)
 8005d92:	f7fc f97d 	bl	8002090 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005d96:	4a44      	ldr	r2, [pc, #272]	; (8005ea8 <cppLoop+0x358>)
 8005d98:	4944      	ldr	r1, [pc, #272]	; (8005eac <cppLoop+0x35c>)
 8005d9a:	4833      	ldr	r0, [pc, #204]	; (8005e68 <cppLoop+0x318>)
 8005d9c:	f7fc ff0a 	bl	8002bb4 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	2100      	movs	r1, #0
 8005da6:	4833      	ldr	r0, [pc, #204]	; (8005e74 <cppLoop+0x324>)
 8005da8:	f7fc f972 	bl	8002090 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005dac:	2200      	movs	r2, #0
 8005dae:	f04f 31ff 	mov.w	r1, #4294967295
 8005db2:	4830      	ldr	r0, [pc, #192]	; (8005e74 <cppLoop+0x324>)
 8005db4:	f7fc f96c 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 8005db8:	e143      	b.n	8006042 <cppLoop+0x4f2>

	case 4:
		led.fullColor('M');
 8005dba:	214d      	movs	r1, #77	; 0x4d
 8005dbc:	482d      	ldr	r0, [pc, #180]	; (8005e74 <cppLoop+0x324>)
 8005dbe:	f7fc f8ab 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005dc2:	f7fb f96d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f7fb f979 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005dce:	4838      	ldr	r0, [pc, #224]	; (8005eb0 <cppLoop+0x360>)
 8005dd0:	f7fb f9a0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f7fb f972 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005ddc:	482f      	ldr	r0, [pc, #188]	; (8005e9c <cppLoop+0x34c>)
 8005dde:	f7fb f999 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005de2:	4820      	ldr	r0, [pc, #128]	; (8005e64 <cppLoop+0x314>)
 8005de4:	f7fc f834 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	bf0c      	ite	eq
 8005dee:	2301      	moveq	r3, #1
 8005df0:	2300      	movne	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 8126 	beq.w	8006046 <cppLoop+0x4f6>
			led.LR(-1, 1);
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8005e00:	481c      	ldr	r0, [pc, #112]	; (8005e74 <cppLoop+0x324>)
 8005e02:	f7fc f945 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005e06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e0a:	f000 fa3f 	bl	800628c <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005e0e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8005ea0 <cppLoop+0x350>
 8005e12:	4824      	ldr	r0, [pc, #144]	; (8005ea4 <cppLoop+0x354>)
 8005e14:	f7fc fdc0 	bl	8002998 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005e18:	4814      	ldr	r0, [pc, #80]	; (8005e6c <cppLoop+0x31c>)
 8005e1a:	f7fd fd7a 	bl	8003912 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005e1e:	4821      	ldr	r0, [pc, #132]	; (8005ea4 <cppLoop+0x354>)
 8005e20:	f7fc fe02 	bl	8002a28 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005e24:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e28:	f000 fa30 	bl	800628c <HAL_Delay>

			line_trace.stop();
 8005e2c:	481d      	ldr	r0, [pc, #116]	; (8005ea4 <cppLoop+0x354>)
 8005e2e:	f7fc fe0b 	bl	8002a48 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005e32:	480e      	ldr	r0, [pc, #56]	; (8005e6c <cppLoop+0x31c>)
 8005e34:	f7fd fd7c 	bl	8003930 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e3e:	480d      	ldr	r0, [pc, #52]	; (8005e74 <cppLoop+0x324>)
 8005e40:	f7fc f926 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 8005e44:	e0ff      	b.n	8006046 <cppLoop+0x4f6>
 8005e46:	bf00      	nop
 8005e48:	37c1215e 	.word	0x37c1215e
 8005e4c:	3fbf9add 	.word	0x3fbf9add
 8005e50:	20000534 	.word	0x20000534
 8005e54:	08017a0c 	.word	0x08017a0c
 8005e58:	08017a10 	.word	0x08017a10
 8005e5c:	08017a18 	.word	0x08017a18
 8005e60:	08017a24 	.word	0x08017a24
 8005e64:	20000530 	.word	0x20000530
 8005e68:	20000570 	.word	0x20000570
 8005e6c:	2001f1d8 	.word	0x2001f1d8
 8005e70:	00000000 	.word	0x00000000
 8005e74:	2000053c 	.word	0x2000053c
 8005e78:	08017a2c 	.word	0x08017a2c
 8005e7c:	08017a30 	.word	0x08017a30
 8005e80:	3dfcd6ea 	.word	0x3dfcd6ea
 8005e84:	2001f2b0 	.word	0x2001f2b0
 8005e88:	2001f2b8 	.word	0x2001f2b8
 8005e8c:	08017a38 	.word	0x08017a38
 8005e90:	08017a44 	.word	0x08017a44
 8005e94:	08017a50 	.word	0x08017a50
 8005e98:	08017a5c 	.word	0x08017a5c
 8005e9c:	08017a64 	.word	0x08017a64
 8005ea0:	3dcccccd 	.word	0x3dcccccd
 8005ea4:	2001f218 	.word	0x2001f218
 8005ea8:	08017a6c 	.word	0x08017a6c
 8005eac:	08017a78 	.word	0x08017a78
 8005eb0:	08017a88 	.word	0x08017a88

	case 5:
		led.fullColor('Y');
 8005eb4:	2159      	movs	r1, #89	; 0x59
 8005eb6:	486a      	ldr	r0, [pc, #424]	; (8006060 <cppLoop+0x510>)
 8005eb8:	f7fc f82e 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005ebc:	f7fb f8f0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	2000      	movs	r0, #0
 8005ec4:	f7fb f8fc 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8005ec8:	4866      	ldr	r0, [pc, #408]	; (8006064 <cppLoop+0x514>)
 8005eca:	f7fb f923 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005ece:	2101      	movs	r1, #1
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f7fb f8f5 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8005ed6:	4864      	ldr	r0, [pc, #400]	; (8006068 <cppLoop+0x518>)
 8005ed8:	f7fb f91c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005edc:	4863      	ldr	r0, [pc, #396]	; (800606c <cppLoop+0x51c>)
 8005ede:	f7fb ffb7 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	bf0c      	ite	eq
 8005ee8:	2301      	moveq	r3, #1
 8005eea:	2300      	movne	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80ab 	beq.w	800604a <cppLoop+0x4fa>
			led.LR(-1, 1);
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8005efa:	4859      	ldr	r0, [pc, #356]	; (8006060 <cppLoop+0x510>)
 8005efc:	f7fc f8c8 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f04:	f000 f9c2 	bl	800628c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8005f08:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006070 <cppLoop+0x520>
 8005f0c:	4859      	ldr	r0, [pc, #356]	; (8006074 <cppLoop+0x524>)
 8005f0e:	f7fc fd34 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005f12:	4858      	ldr	r0, [pc, #352]	; (8006074 <cppLoop+0x524>)
 8005f14:	f7fc fd88 	bl	8002a28 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8005f18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f1c:	f000 f9b6 	bl	800628c <HAL_Delay>

			led.fullColor('R');
 8005f20:	2152      	movs	r1, #82	; 0x52
 8005f22:	484f      	ldr	r0, [pc, #316]	; (8006060 <cppLoop+0x510>)
 8005f24:	f7fb fff8 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005f28:	4853      	ldr	r0, [pc, #332]	; (8006078 <cppLoop+0x528>)
 8005f2a:	f7fb fa6f 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005f2e:	4852      	ldr	r0, [pc, #328]	; (8006078 <cppLoop+0x528>)
 8005f30:	f7fb fa32 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8005f34:	f242 7010 	movw	r0, #10000	; 0x2710
 8005f38:	f000 f9a8 	bl	800628c <HAL_Delay>

			line_trace.stop();
 8005f3c:	484d      	ldr	r0, [pc, #308]	; (8006074 <cppLoop+0x524>)
 8005f3e:	f7fc fd83 	bl	8002a48 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8005f42:	494e      	ldr	r1, [pc, #312]	; (800607c <cppLoop+0x52c>)
 8005f44:	484e      	ldr	r0, [pc, #312]	; (8006080 <cppLoop+0x530>)
 8005f46:	f7fb fa7f 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 8005f4a:	484b      	ldr	r0, [pc, #300]	; (8006078 <cppLoop+0x528>)
 8005f4c:	f7fb fa13 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8005f50:	ec54 3b10 	vmov	r3, r4, d0
 8005f54:	4618      	mov	r0, r3
 8005f56:	4621      	mov	r1, r4
 8005f58:	f7fa fe5e 	bl	8000c18 <__aeabi_d2f>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	607b      	str	r3, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	2201      	movs	r2, #1
 8005f64:	4619      	mov	r1, r3
 8005f66:	2001      	movs	r0, #1
 8005f68:	f7fb fa90 	bl	800148c <sd_write>
			user_fclose();
 8005f6c:	f7fb fa7e 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 8005f70:	2200      	movs	r2, #0
 8005f72:	f04f 31ff 	mov.w	r1, #4294967295
 8005f76:	483a      	ldr	r0, [pc, #232]	; (8006060 <cppLoop+0x510>)
 8005f78:	f7fc f88a 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 8005f7c:	e065      	b.n	800604a <cppLoop+0x4fa>

	case 6:
		led.fullColor('C');
 8005f7e:	2143      	movs	r1, #67	; 0x43
 8005f80:	4837      	ldr	r0, [pc, #220]	; (8006060 <cppLoop+0x510>)
 8005f82:	f7fb ffc9 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f86:	f7fb f88b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	f7fb f897 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8005f92:	483c      	ldr	r0, [pc, #240]	; (8006084 <cppLoop+0x534>)
 8005f94:	f7fb f8be 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f98:	2101      	movs	r1, #1
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	f7fb f890 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8005fa0:	4839      	ldr	r0, [pc, #228]	; (8006088 <cppLoop+0x538>)
 8005fa2:	f7fb f8b7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005fa6:	4831      	ldr	r0, [pc, #196]	; (800606c <cppLoop+0x51c>)
 8005fa8:	f7fb ff52 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d048      	beq.n	800604e <cppLoop+0x4fe>
			HAL_Delay(500);
 8005fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fc0:	f000 f964 	bl	800628c <HAL_Delay>
			led.LR(-1, 1);
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fca:	4825      	ldr	r0, [pc, #148]	; (8006060 <cppLoop+0x510>)
 8005fcc:	f7fc f860 	bl	8002090 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 8005fd0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800608c <cppLoop+0x53c>
 8005fd4:	4827      	ldr	r0, [pc, #156]	; (8006074 <cppLoop+0x524>)
 8005fd6:	f7fc fcd0 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005fda:	4826      	ldr	r0, [pc, #152]	; (8006074 <cppLoop+0x524>)
 8005fdc:	f7fc fd24 	bl	8002a28 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8005fe0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fe4:	f000 f952 	bl	800628c <HAL_Delay>

			led.fullColor('R');
 8005fe8:	2152      	movs	r1, #82	; 0x52
 8005fea:	481d      	ldr	r0, [pc, #116]	; (8006060 <cppLoop+0x510>)
 8005fec:	f7fb ff94 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005ff0:	4821      	ldr	r0, [pc, #132]	; (8006078 <cppLoop+0x528>)
 8005ff2:	f7fb fa0b 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005ff6:	4820      	ldr	r0, [pc, #128]	; (8006078 <cppLoop+0x528>)
 8005ff8:	f7fb f9ce 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8005ffc:	4824      	ldr	r0, [pc, #144]	; (8006090 <cppLoop+0x540>)
 8005ffe:	f7fd f84f 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006002:	4824      	ldr	r0, [pc, #144]	; (8006094 <cppLoop+0x544>)
 8006004:	f7fc fe0d 	bl	8002c22 <_ZN6Logger5startEv>

			HAL_Delay(10000);
 8006008:	f242 7010 	movw	r0, #10000	; 0x2710
 800600c:	f000 f93e 	bl	800628c <HAL_Delay>

			line_trace.stop();
 8006010:	4818      	ldr	r0, [pc, #96]	; (8006074 <cppLoop+0x524>)
 8006012:	f7fc fd19 	bl	8002a48 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006016:	481f      	ldr	r0, [pc, #124]	; (8006094 <cppLoop+0x544>)
 8006018:	f7fc fe13 	bl	8002c42 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 800601c:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <cppLoop+0x548>)
 800601e:	4a1f      	ldr	r2, [pc, #124]	; (800609c <cppLoop+0x54c>)
 8006020:	4918      	ldr	r1, [pc, #96]	; (8006084 <cppLoop+0x534>)
 8006022:	481c      	ldr	r0, [pc, #112]	; (8006094 <cppLoop+0x544>)
 8006024:	f7fc fdda 	bl	8002bdc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006028:	2200      	movs	r2, #0
 800602a:	f04f 31ff 	mov.w	r1, #4294967295
 800602e:	480c      	ldr	r0, [pc, #48]	; (8006060 <cppLoop+0x510>)
 8006030:	f7fc f82e 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 8006034:	e00b      	b.n	800604e <cppLoop+0x4fe>
	case 15:

		break;

	default:
		break;
 8006036:	bf00      	nop
 8006038:	e00a      	b.n	8006050 <cppLoop+0x500>
		break;
 800603a:	bf00      	nop
 800603c:	e008      	b.n	8006050 <cppLoop+0x500>
		break;
 800603e:	bf00      	nop
 8006040:	e006      	b.n	8006050 <cppLoop+0x500>
		break;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <cppLoop+0x500>
		break;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <cppLoop+0x500>
		break;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <cppLoop+0x500>
		break;
 800604e:	bf00      	nop

	}

	HAL_Delay(10);
 8006050:	200a      	movs	r0, #10
 8006052:	f000 f91b 	bl	800628c <HAL_Delay>

}
 8006056:	bf00      	nop
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd90      	pop	{r4, r7, pc}
 800605e:	bf00      	nop
 8006060:	2000053c 	.word	0x2000053c
 8006064:	08017a94 	.word	0x08017a94
 8006068:	08017a9c 	.word	0x08017a9c
 800606c:	20000530 	.word	0x20000530
 8006070:	00000000 	.word	0x00000000
 8006074:	2001f218 	.word	0x2001f218
 8006078:	2001f1a8 	.word	0x2001f1a8
 800607c:	08017aa8 	.word	0x08017aa8
 8006080:	08017ab0 	.word	0x08017ab0
 8006084:	08017abc 	.word	0x08017abc
 8006088:	08017ac8 	.word	0x08017ac8
 800608c:	3dcccccd 	.word	0x3dcccccd
 8006090:	2001f278 	.word	0x2001f278
 8006094:	20000570 	.word	0x20000570
 8006098:	08017ad0 	.word	0x08017ad0
 800609c:	08017ae0 	.word	0x08017ae0

080060a0 <_Z41__static_initialization_and_destruction_0ii>:
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d12e      	bne.n	800610e <_Z41__static_initialization_and_destruction_0ii+0x6e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d129      	bne.n	800610e <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 80060ba:	4817      	ldr	r0, [pc, #92]	; (8006118 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80060bc:	f7fc f820 	bl	8002100 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80060c0:	4816      	ldr	r0, [pc, #88]	; (800611c <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80060c2:	f7fd f9b1 	bl	8003428 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80060c6:	4816      	ldr	r0, [pc, #88]	; (8006120 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80060c8:	f7fb feb6 	bl	8001e38 <_ZN8JoyStickC1Ev>
Motor motor;
 80060cc:	4815      	ldr	r0, [pc, #84]	; (8006124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80060ce:	f7fc fdc8 	bl	8002c62 <_ZN5MotorC1Ev>
IMU imu;
 80060d2:	4815      	ldr	r0, [pc, #84]	; (8006128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80060d4:	f7fb fcf6 	bl	8001ac4 <_ZN3IMUC1Ev>
Logger logger;
 80060d8:	4814      	ldr	r0, [pc, #80]	; (800612c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80060da:	f7fc fccd 	bl	8002a78 <_ZN6LoggerC1Ev>
Encoder encoder;
 80060de:	4814      	ldr	r0, [pc, #80]	; (8006130 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80060e0:	f7fb f838 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80060e4:	4b10      	ldr	r3, [pc, #64]	; (8006128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80060e8:	490e      	ldr	r1, [pc, #56]	; (8006124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80060ea:	4812      	ldr	r0, [pc, #72]	; (8006134 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80060ec:	f7fd fa06 	bl	80034fc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80060f0:	4b10      	ldr	r3, [pc, #64]	; (8006134 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80060f4:	490b      	ldr	r1, [pc, #44]	; (8006124 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80060f6:	4810      	ldr	r0, [pc, #64]	; (8006138 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80060f8:	f7fc fafc 	bl	80026f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80060fe:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006100:	490b      	ldr	r1, [pc, #44]	; (8006130 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006102:	480e      	ldr	r0, [pc, #56]	; (800613c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8006104:	f7fc fe92 	bl	8002e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 8006108:	480d      	ldr	r0, [pc, #52]	; (8006140 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800610a:	f7fc ffe7 	bl	80030dc <_ZN13PathFollowingC1Ev>
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	20000234 	.word	0x20000234
 800611c:	2000052c 	.word	0x2000052c
 8006120:	20000530 	.word	0x20000530
 8006124:	20000538 	.word	0x20000538
 8006128:	20000550 	.word	0x20000550
 800612c:	20000570 	.word	0x20000570
 8006130:	2001f1a8 	.word	0x2001f1a8
 8006134:	2001f1d8 	.word	0x2001f1d8
 8006138:	2001f218 	.word	0x2001f218
 800613c:	2001f278 	.word	0x2001f278
 8006140:	2001f2a8 	.word	0x2001f2a8

08006144 <_GLOBAL__sub_I_line_sensor>:
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
 8006148:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800614c:	2001      	movs	r0, #1
 800614e:	f7ff ffa7 	bl	80060a0 <_Z41__static_initialization_and_destruction_0ii>
 8006152:	bd80      	pop	{r7, pc}

08006154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800618c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006158:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800615a:	e003      	b.n	8006164 <LoopCopyDataInit>

0800615c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800615c:	4b0c      	ldr	r3, [pc, #48]	; (8006190 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800615e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006160:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006162:	3104      	adds	r1, #4

08006164 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006164:	480b      	ldr	r0, [pc, #44]	; (8006194 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006166:	4b0c      	ldr	r3, [pc, #48]	; (8006198 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006168:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800616a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800616c:	d3f6      	bcc.n	800615c <CopyDataInit>
  ldr  r2, =_sbss
 800616e:	4a0b      	ldr	r2, [pc, #44]	; (800619c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006170:	e002      	b.n	8006178 <LoopFillZerobss>

08006172 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006172:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006174:	f842 3b04 	str.w	r3, [r2], #4

08006178 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800617a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800617c:	d3f9      	bcc.n	8006172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800617e:	f7ff fb67 	bl	8005850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006182:	f00c fc8d 	bl	8012aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006186:	f7fd fcaf 	bl	8003ae8 <main>
  bx  lr    
 800618a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800618c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006190:	080184f0 	.word	0x080184f0
  ldr  r0, =_sdata
 8006194:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006198:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800619c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80061a0:	20023ea4 	.word	0x20023ea4

080061a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061a4:	e7fe      	b.n	80061a4 <ADC_IRQHandler>
	...

080061a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_Init+0x40>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <HAL_Init+0x40>)
 80061b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_Init+0x40>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0a      	ldr	r2, [pc, #40]	; (80061e8 <HAL_Init+0x40>)
 80061be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <HAL_Init+0x40>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <HAL_Init+0x40>)
 80061ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061d0:	2003      	movs	r0, #3
 80061d2:	f000 fd51 	bl	8006c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061d6:	2000      	movs	r0, #0
 80061d8:	f000 f808 	bl	80061ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061dc:	f7fe fd26 	bl	8004c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40023c00 	.word	0x40023c00

080061ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061f4:	4b12      	ldr	r3, [pc, #72]	; (8006240 <HAL_InitTick+0x54>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <HAL_InitTick+0x58>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006202:	fbb3 f3f1 	udiv	r3, r3, r1
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fd69 	bl	8006ce2 <HAL_SYSTICK_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e00e      	b.n	8006238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b0f      	cmp	r3, #15
 800621e:	d80a      	bhi.n	8006236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006220:	2200      	movs	r2, #0
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	f000 fd31 	bl	8006c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800622c:	4a06      	ldr	r2, [pc, #24]	; (8006248 <HAL_InitTick+0x5c>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000000 	.word	0x20000000
 8006244:	20000008 	.word	0x20000008
 8006248:	20000004 	.word	0x20000004

0800624c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_IncTick+0x20>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <HAL_IncTick+0x24>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4413      	add	r3, r2
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_IncTick+0x24>)
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000008 	.word	0x20000008
 8006270:	20021e28 	.word	0x20021e28

08006274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  return uwTick;
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <HAL_GetTick+0x14>)
 800627a:	681b      	ldr	r3, [r3, #0]
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20021e28 	.word	0x20021e28

0800628c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7ff ffee 	bl	8006274 <HAL_GetTick>
 8006298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d005      	beq.n	80062b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <HAL_Delay+0x40>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062b2:	bf00      	nop
 80062b4:	f7ff ffde 	bl	8006274 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d8f7      	bhi.n	80062b4 <HAL_Delay+0x28>
  {
  }
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000008 	.word	0x20000008

080062d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062d8:	2300      	movs	r3, #0
 80062da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e033      	b.n	800634e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fe fcc4 	bl	8004c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d118      	bne.n	8006340 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006312:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006316:	f023 0302 	bic.w	r3, r3, #2
 800631a:	f043 0202 	orr.w	r2, r3, #2
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 fa5a 	bl	80067dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	f023 0303 	bic.w	r3, r3, #3
 8006336:	f043 0201 	orr.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40
 800633e:	e001      	b.n	8006344 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_ADC_Start_DMA+0x1e>
 8006372:	2302      	movs	r3, #2
 8006374:	e0cc      	b.n	8006510 <HAL_ADC_Start_DMA+0x1b8>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b01      	cmp	r3, #1
 800638a:	d018      	beq.n	80063be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800639c:	4b5e      	ldr	r3, [pc, #376]	; (8006518 <HAL_ADC_Start_DMA+0x1c0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a5e      	ldr	r2, [pc, #376]	; (800651c <HAL_ADC_Start_DMA+0x1c4>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	0c9a      	lsrs	r2, r3, #18
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80063b0:	e002      	b.n	80063b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3b01      	subs	r3, #1
 80063b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1f9      	bne.n	80063b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	f040 80a0 	bne.w	800650e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80063d6:	f023 0301 	bic.w	r3, r3, #1
 80063da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80063f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d106      	bne.n	800641c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	f023 0206 	bic.w	r2, r3, #6
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
 800641a:	e002      	b.n	8006422 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800642a:	4b3d      	ldr	r3, [pc, #244]	; (8006520 <HAL_ADC_Start_DMA+0x1c8>)
 800642c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	4a3c      	ldr	r2, [pc, #240]	; (8006524 <HAL_ADC_Start_DMA+0x1cc>)
 8006434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	4a3b      	ldr	r2, [pc, #236]	; (8006528 <HAL_ADC_Start_DMA+0x1d0>)
 800643c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006442:	4a3a      	ldr	r2, [pc, #232]	; (800652c <HAL_ADC_Start_DMA+0x1d4>)
 8006444:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800644e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800645e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689a      	ldr	r2, [r3, #8]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	334c      	adds	r3, #76	; 0x4c
 800647a:	4619      	mov	r1, r3
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f000 fcea 	bl	8006e58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	2b00      	cmp	r3, #0
 800648e:	d12a      	bne.n	80064e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a26      	ldr	r2, [pc, #152]	; (8006530 <HAL_ADC_Start_DMA+0x1d8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d015      	beq.n	80064c6 <HAL_ADC_Start_DMA+0x16e>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a25      	ldr	r2, [pc, #148]	; (8006534 <HAL_ADC_Start_DMA+0x1dc>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d105      	bne.n	80064b0 <HAL_ADC_Start_DMA+0x158>
 80064a4:	4b1e      	ldr	r3, [pc, #120]	; (8006520 <HAL_ADC_Start_DMA+0x1c8>)
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a20      	ldr	r2, [pc, #128]	; (8006538 <HAL_ADC_Start_DMA+0x1e0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d129      	bne.n	800650e <HAL_ADC_Start_DMA+0x1b6>
 80064ba:	4b19      	ldr	r3, [pc, #100]	; (8006520 <HAL_ADC_Start_DMA+0x1c8>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b0f      	cmp	r3, #15
 80064c4:	d823      	bhi.n	800650e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11c      	bne.n	800650e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80064e2:	609a      	str	r2, [r3, #8]
 80064e4:	e013      	b.n	800650e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a11      	ldr	r2, [pc, #68]	; (8006530 <HAL_ADC_Start_DMA+0x1d8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10e      	bne.n	800650e <HAL_ADC_Start_DMA+0x1b6>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d107      	bne.n	800650e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800650c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3718      	adds	r7, #24
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	20000000 	.word	0x20000000
 800651c:	431bde83 	.word	0x431bde83
 8006520:	40012300 	.word	0x40012300
 8006524:	080069d5 	.word	0x080069d5
 8006528:	08006a8f 	.word	0x08006a8f
 800652c:	08006aab 	.word	0x08006aab
 8006530:	40012000 	.word	0x40012000
 8006534:	40012100 	.word	0x40012100
 8006538:	40012200 	.word	0x40012200

0800653c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
 800658e:	d101      	bne.n	8006594 <HAL_ADC_ConfigChannel+0x1c>
 8006590:	2302      	movs	r3, #2
 8006592:	e113      	b.n	80067bc <HAL_ADC_ConfigChannel+0x244>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b09      	cmp	r3, #9
 80065a2:	d925      	bls.n	80065f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68d9      	ldr	r1, [r3, #12]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	4613      	mov	r3, r2
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4413      	add	r3, r2
 80065b8:	3b1e      	subs	r3, #30
 80065ba:	2207      	movs	r2, #7
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	43da      	mvns	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	400a      	ands	r2, r1
 80065c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68d9      	ldr	r1, [r3, #12]
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4618      	mov	r0, r3
 80065dc:	4603      	mov	r3, r0
 80065de:	005b      	lsls	r3, r3, #1
 80065e0:	4403      	add	r3, r0
 80065e2:	3b1e      	subs	r3, #30
 80065e4:	409a      	lsls	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	60da      	str	r2, [r3, #12]
 80065ee:	e022      	b.n	8006636 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6919      	ldr	r1, [r3, #16]
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	4613      	mov	r3, r2
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	4413      	add	r3, r2
 8006604:	2207      	movs	r2, #7
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	43da      	mvns	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	400a      	ands	r2, r1
 8006612:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6919      	ldr	r1, [r3, #16]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	4618      	mov	r0, r3
 8006626:	4603      	mov	r3, r0
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4403      	add	r3, r0
 800662c:	409a      	lsls	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b06      	cmp	r3, #6
 800663c:	d824      	bhi.n	8006688 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	3b05      	subs	r3, #5
 8006650:	221f      	movs	r2, #31
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43da      	mvns	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	400a      	ands	r2, r1
 800665e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	4618      	mov	r0, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	3b05      	subs	r3, #5
 800667a:	fa00 f203 	lsl.w	r2, r0, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	635a      	str	r2, [r3, #52]	; 0x34
 8006686:	e04c      	b.n	8006722 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b0c      	cmp	r3, #12
 800668e:	d824      	bhi.n	80066da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	3b23      	subs	r3, #35	; 0x23
 80066a2:	221f      	movs	r2, #31
 80066a4:	fa02 f303 	lsl.w	r3, r2, r3
 80066a8:	43da      	mvns	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	400a      	ands	r2, r1
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	b29b      	uxth	r3, r3
 80066be:	4618      	mov	r0, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685a      	ldr	r2, [r3, #4]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	3b23      	subs	r3, #35	; 0x23
 80066cc:	fa00 f203 	lsl.w	r2, r0, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
 80066d8:	e023      	b.n	8006722 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	3b41      	subs	r3, #65	; 0x41
 80066ec:	221f      	movs	r2, #31
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43da      	mvns	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	400a      	ands	r2, r1
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	4618      	mov	r0, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	3b41      	subs	r3, #65	; 0x41
 8006716:	fa00 f203 	lsl.w	r2, r0, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006722:	4b29      	ldr	r3, [pc, #164]	; (80067c8 <HAL_ADC_ConfigChannel+0x250>)
 8006724:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a28      	ldr	r2, [pc, #160]	; (80067cc <HAL_ADC_ConfigChannel+0x254>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d10f      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x1d8>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b12      	cmp	r3, #18
 8006736:	d10b      	bne.n	8006750 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a1d      	ldr	r2, [pc, #116]	; (80067cc <HAL_ADC_ConfigChannel+0x254>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d12b      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x23a>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_ADC_ConfigChannel+0x258>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <HAL_ADC_ConfigChannel+0x1f4>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b11      	cmp	r3, #17
 800676a:	d122      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <HAL_ADC_ConfigChannel+0x258>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d111      	bne.n	80067b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800678e:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_ADC_ConfigChannel+0x25c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <HAL_ADC_ConfigChannel+0x260>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	0c9a      	lsrs	r2, r3, #18
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80067a4:	e002      	b.n	80067ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f9      	bne.n	80067a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	40012300 	.word	0x40012300
 80067cc:	40012000 	.word	0x40012000
 80067d0:	10000012 	.word	0x10000012
 80067d4:	20000000 	.word	0x20000000
 80067d8:	431bde83 	.word	0x431bde83

080067dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067e4:	4b79      	ldr	r3, [pc, #484]	; (80069cc <ADC_Init+0x1f0>)
 80067e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6859      	ldr	r1, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	021a      	lsls	r2, r3, #8
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6859      	ldr	r1, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6899      	ldr	r1, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686e:	4a58      	ldr	r2, [pc, #352]	; (80069d0 <ADC_Init+0x1f4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d022      	beq.n	80068ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006882:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6899      	ldr	r1, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6899      	ldr	r1, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	430a      	orrs	r2, r1
 80068b6:	609a      	str	r2, [r3, #8]
 80068b8:	e00f      	b.n	80068da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80068d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0202 	bic.w	r2, r2, #2
 80068e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6899      	ldr	r1, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7e1b      	ldrb	r3, [r3, #24]
 80068f4:	005a      	lsls	r2, r3, #1
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d01b      	beq.n	8006940 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006916:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006926:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6859      	ldr	r1, [r3, #4]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	3b01      	subs	r3, #1
 8006934:	035a      	lsls	r2, r3, #13
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
 800693e:	e007      	b.n	8006950 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800695e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	69db      	ldr	r3, [r3, #28]
 800696a:	3b01      	subs	r3, #1
 800696c:	051a      	lsls	r2, r3, #20
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6899      	ldr	r1, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006992:	025a      	lsls	r2, r3, #9
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6899      	ldr	r1, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	029a      	lsls	r2, r3, #10
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40012300 	.word	0x40012300
 80069d0:	0f000001 	.word	0x0f000001

080069d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d13c      	bne.n	8006a68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d12b      	bne.n	8006a60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d127      	bne.n	8006a60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d119      	bne.n	8006a60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0220 	bic.w	r2, r2, #32
 8006a3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d105      	bne.n	8006a60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f043 0201 	orr.w	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff fd6b 	bl	800653c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a66:	e00e      	b.n	8006a86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff fd75 	bl	8006564 <HAL_ADC_ErrorCallback>
}
 8006a7a:	e004      	b.n	8006a86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f7ff fd57 	bl	8006550 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006aa2:	bf00      	nop
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac2:	f043 0204 	orr.w	r2, r3, #4
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff fd4a 	bl	8006564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <__NVIC_SetPriorityGrouping>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <__NVIC_SetPriorityGrouping+0x44>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006af4:	4013      	ands	r3, r2
 8006af6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b0a:	4a04      	ldr	r2, [pc, #16]	; (8006b1c <__NVIC_SetPriorityGrouping+0x44>)
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	60d3      	str	r3, [r2, #12]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	e000ed00 	.word	0xe000ed00

08006b20 <__NVIC_GetPriorityGrouping>:
{
 8006b20:	b480      	push	{r7}
 8006b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <__NVIC_GetPriorityGrouping+0x18>)
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	f003 0307 	and.w	r3, r3, #7
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	e000ed00 	.word	0xe000ed00

08006b3c <__NVIC_EnableIRQ>:
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	4603      	mov	r3, r0
 8006b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	db0b      	blt.n	8006b66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	f003 021f 	and.w	r2, r3, #31
 8006b54:	4907      	ldr	r1, [pc, #28]	; (8006b74 <__NVIC_EnableIRQ+0x38>)
 8006b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b5a:	095b      	lsrs	r3, r3, #5
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	e000e100 	.word	0xe000e100

08006b78 <__NVIC_SetPriority>:
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	6039      	str	r1, [r7, #0]
 8006b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	db0a      	blt.n	8006ba2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	490c      	ldr	r1, [pc, #48]	; (8006bc4 <__NVIC_SetPriority+0x4c>)
 8006b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b96:	0112      	lsls	r2, r2, #4
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ba0:	e00a      	b.n	8006bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	4908      	ldr	r1, [pc, #32]	; (8006bc8 <__NVIC_SetPriority+0x50>)
 8006ba8:	79fb      	ldrb	r3, [r7, #7]
 8006baa:	f003 030f 	and.w	r3, r3, #15
 8006bae:	3b04      	subs	r3, #4
 8006bb0:	0112      	lsls	r2, r2, #4
 8006bb2:	b2d2      	uxtb	r2, r2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	761a      	strb	r2, [r3, #24]
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	e000e100 	.word	0xe000e100
 8006bc8:	e000ed00 	.word	0xe000ed00

08006bcc <NVIC_EncodePriority>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b089      	sub	sp, #36	; 0x24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f1c3 0307 	rsb	r3, r3, #7
 8006be6:	2b04      	cmp	r3, #4
 8006be8:	bf28      	it	cs
 8006bea:	2304      	movcs	r3, #4
 8006bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	2b06      	cmp	r3, #6
 8006bf4:	d902      	bls.n	8006bfc <NVIC_EncodePriority+0x30>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	3b03      	subs	r3, #3
 8006bfa:	e000      	b.n	8006bfe <NVIC_EncodePriority+0x32>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c00:	f04f 32ff 	mov.w	r2, #4294967295
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	43da      	mvns	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	401a      	ands	r2, r3
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c14:	f04f 31ff 	mov.w	r1, #4294967295
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	43d9      	mvns	r1, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c24:	4313      	orrs	r3, r2
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3724      	adds	r7, #36	; 0x24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <SysTick_Config>:
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c44:	d301      	bcc.n	8006c4a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006c46:	2301      	movs	r3, #1
 8006c48:	e00f      	b.n	8006c6a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c4a:	4a0a      	ldr	r2, [pc, #40]	; (8006c74 <SysTick_Config+0x40>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c52:	210f      	movs	r1, #15
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	f7ff ff8e 	bl	8006b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <SysTick_Config+0x40>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c62:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <SysTick_Config+0x40>)
 8006c64:	2207      	movs	r2, #7
 8006c66:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3708      	adds	r7, #8
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	e000e010 	.word	0xe000e010

08006c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ff29 	bl	8006ad8 <__NVIC_SetPriorityGrouping>
}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b086      	sub	sp, #24
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	4603      	mov	r3, r0
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ca0:	f7ff ff3e 	bl	8006b20 <__NVIC_GetPriorityGrouping>
 8006ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	6978      	ldr	r0, [r7, #20]
 8006cac:	f7ff ff8e 	bl	8006bcc <NVIC_EncodePriority>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff ff5d 	bl	8006b78 <__NVIC_SetPriority>
}
 8006cbe:	bf00      	nop
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b082      	sub	sp, #8
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	4603      	mov	r3, r0
 8006cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f7ff ff31 	bl	8006b3c <__NVIC_EnableIRQ>
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f7ff ffa2 	bl	8006c34 <SysTick_Config>
 8006cf0:	4603      	mov	r3, r0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
	...

08006cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006d08:	f7ff fab4 	bl	8006274 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d101      	bne.n	8006d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e099      	b.n	8006e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2202      	movs	r2, #2
 8006d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d38:	e00f      	b.n	8006d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d3a:	f7ff fa9b 	bl	8006274 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	d908      	bls.n	8006d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2203      	movs	r2, #3
 8006d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e078      	b.n	8006e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e8      	bne.n	8006d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4b38      	ldr	r3, [pc, #224]	; (8006e54 <HAL_DMA_Init+0x158>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d107      	bne.n	8006dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d117      	bne.n	8006e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00e      	beq.n	8006e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa9d 	bl	8007340 <DMA_CheckFifoParam>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2240      	movs	r2, #64	; 0x40
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e016      	b.n	8006e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa54 	bl	80072d4 <DMA_CalcBaseAndBitshift>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e34:	223f      	movs	r2, #63	; 0x3f
 8006e36:	409a      	lsls	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	f010803f 	.word	0xf010803f

08006e58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_DMA_Start_IT+0x26>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e040      	b.n	8006f00 <HAL_DMA_Start_IT+0xa8>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d12f      	bne.n	8006ef2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2202      	movs	r2, #2
 8006e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 f9e6 	bl	8007278 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb0:	223f      	movs	r2, #63	; 0x3f
 8006eb2:	409a      	lsls	r2, r3
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0216 	orr.w	r2, r2, #22
 8006ec6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f042 0208 	orr.w	r2, r2, #8
 8006ede:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	e005      	b.n	8006efe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006efa:	2302      	movs	r3, #2
 8006efc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3718      	adds	r7, #24
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	d004      	beq.n	8006f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e00c      	b.n	8006f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2205      	movs	r2, #5
 8006f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0201 	bic.w	r2, r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006f58:	4b92      	ldr	r3, [pc, #584]	; (80071a4 <HAL_DMA_IRQHandler+0x258>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a92      	ldr	r2, [pc, #584]	; (80071a8 <HAL_DMA_IRQHandler+0x25c>)
 8006f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f62:	0a9b      	lsrs	r3, r3, #10
 8006f64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f76:	2208      	movs	r2, #8
 8006f78:	409a      	lsls	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d01a      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0304 	and.w	r3, r3, #4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d013      	beq.n	8006fb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0204 	bic.w	r2, r2, #4
 8006f9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	409a      	lsls	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb0:	f043 0201 	orr.w	r2, r3, #1
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	409a      	lsls	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d012      	beq.n	8006fee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00b      	beq.n	8006fee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fda:	2201      	movs	r2, #1
 8006fdc:	409a      	lsls	r2, r3
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	f043 0202 	orr.w	r2, r3, #2
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	409a      	lsls	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d012      	beq.n	8007024 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0302 	and.w	r3, r3, #2
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	2204      	movs	r2, #4
 8007012:	409a      	lsls	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701c:	f043 0204 	orr.w	r2, r3, #4
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007028:	2210      	movs	r2, #16
 800702a:	409a      	lsls	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d043      	beq.n	80070bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0308 	and.w	r3, r3, #8
 800703e:	2b00      	cmp	r3, #0
 8007040:	d03c      	beq.n	80070bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007046:	2210      	movs	r2, #16
 8007048:	409a      	lsls	r2, r3
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d018      	beq.n	800708e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d108      	bne.n	800707c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d024      	beq.n	80070bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	e01f      	b.n	80070bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007080:	2b00      	cmp	r3, #0
 8007082:	d01b      	beq.n	80070bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	4798      	blx	r3
 800708c:	e016      	b.n	80070bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007098:	2b00      	cmp	r3, #0
 800709a:	d107      	bne.n	80070ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0208 	bic.w	r2, r2, #8
 80070aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c0:	2220      	movs	r2, #32
 80070c2:	409a      	lsls	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 808e 	beq.w	80071ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f000 8086 	beq.w	80071ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e2:	2220      	movs	r2, #32
 80070e4:	409a      	lsls	r2, r3
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	d136      	bne.n	8007164 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0216 	bic.w	r2, r2, #22
 8007104:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007114:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	2b00      	cmp	r3, #0
 800711c:	d103      	bne.n	8007126 <HAL_DMA_IRQHandler+0x1da>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0208 	bic.w	r2, r2, #8
 8007134:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713a:	223f      	movs	r2, #63	; 0x3f
 800713c:	409a      	lsls	r2, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007156:	2b00      	cmp	r3, #0
 8007158:	d07d      	beq.n	8007256 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
        }
        return;
 8007162:	e078      	b.n	8007256 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01c      	beq.n	80071ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d108      	bne.n	8007192 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007184:	2b00      	cmp	r3, #0
 8007186:	d030      	beq.n	80071ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	4798      	blx	r3
 8007190:	e02b      	b.n	80071ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d027      	beq.n	80071ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	4798      	blx	r3
 80071a2:	e022      	b.n	80071ea <HAL_DMA_IRQHandler+0x29e>
 80071a4:	20000000 	.word	0x20000000
 80071a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10f      	bne.n	80071da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0210 	bic.w	r2, r2, #16
 80071c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d032      	beq.n	8007258 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d022      	beq.n	8007244 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2205      	movs	r2, #5
 8007202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	3301      	adds	r3, #1
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	429a      	cmp	r2, r3
 8007220:	d307      	bcc.n	8007232 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f2      	bne.n	8007216 <HAL_DMA_IRQHandler+0x2ca>
 8007230:	e000      	b.n	8007234 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007232:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007248:	2b00      	cmp	r3, #0
 800724a:	d005      	beq.n	8007258 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
 8007254:	e000      	b.n	8007258 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007256:	bf00      	nop
    }
  }
}
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop

08007260 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007294:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	683a      	ldr	r2, [r7, #0]
 800729c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	2b40      	cmp	r3, #64	; 0x40
 80072a4:	d108      	bne.n	80072b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80072b6:	e007      	b.n	80072c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	60da      	str	r2, [r3, #12]
}
 80072c8:	bf00      	nop
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	3b10      	subs	r3, #16
 80072e4:	4a14      	ldr	r2, [pc, #80]	; (8007338 <DMA_CalcBaseAndBitshift+0x64>)
 80072e6:	fba2 2303 	umull	r2, r3, r2, r3
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80072ee:	4a13      	ldr	r2, [pc, #76]	; (800733c <DMA_CalcBaseAndBitshift+0x68>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d909      	bls.n	8007316 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800730a:	f023 0303 	bic.w	r3, r3, #3
 800730e:	1d1a      	adds	r2, r3, #4
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	659a      	str	r2, [r3, #88]	; 0x58
 8007314:	e007      	b.n	8007326 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	aaaaaaab 	.word	0xaaaaaaab
 800733c:	08017b60 	.word	0x08017b60

08007340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d11f      	bne.n	800739a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b03      	cmp	r3, #3
 800735e:	d855      	bhi.n	800740c <DMA_CheckFifoParam+0xcc>
 8007360:	a201      	add	r2, pc, #4	; (adr r2, 8007368 <DMA_CheckFifoParam+0x28>)
 8007362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007366:	bf00      	nop
 8007368:	08007379 	.word	0x08007379
 800736c:	0800738b 	.word	0x0800738b
 8007370:	08007379 	.word	0x08007379
 8007374:	0800740d 	.word	0x0800740d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d045      	beq.n	8007410 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007388:	e042      	b.n	8007410 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007392:	d13f      	bne.n	8007414 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007398:	e03c      	b.n	8007414 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a2:	d121      	bne.n	80073e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b03      	cmp	r3, #3
 80073a8:	d836      	bhi.n	8007418 <DMA_CheckFifoParam+0xd8>
 80073aa:	a201      	add	r2, pc, #4	; (adr r2, 80073b0 <DMA_CheckFifoParam+0x70>)
 80073ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b0:	080073c1 	.word	0x080073c1
 80073b4:	080073c7 	.word	0x080073c7
 80073b8:	080073c1 	.word	0x080073c1
 80073bc:	080073d9 	.word	0x080073d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	73fb      	strb	r3, [r7, #15]
      break;
 80073c4:	e02f      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d024      	beq.n	800741c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d6:	e021      	b.n	800741c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073e0:	d11e      	bne.n	8007420 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80073e6:	e01b      	b.n	8007420 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d902      	bls.n	80073f4 <DMA_CheckFifoParam+0xb4>
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d003      	beq.n	80073fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80073f2:	e018      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e015      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00e      	beq.n	8007424 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	73fb      	strb	r3, [r7, #15]
      break;
 800740a:	e00b      	b.n	8007424 <DMA_CheckFifoParam+0xe4>
      break;
 800740c:	bf00      	nop
 800740e:	e00a      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      break;
 8007410:	bf00      	nop
 8007412:	e008      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      break;
 8007414:	bf00      	nop
 8007416:	e006      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      break;
 8007418:	bf00      	nop
 800741a:	e004      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      break;
 800741c:	bf00      	nop
 800741e:	e002      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      break;   
 8007420:	bf00      	nop
 8007422:	e000      	b.n	8007426 <DMA_CheckFifoParam+0xe6>
      break;
 8007424:	bf00      	nop
    }
  } 
  
  return status; 
 8007426:	7bfb      	ldrb	r3, [r7, #15]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007434:	b480      	push	{r7}
 8007436:	b089      	sub	sp, #36	; 0x24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007446:	2300      	movs	r3, #0
 8007448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	e177      	b.n	8007740 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007450:	2201      	movs	r2, #1
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4013      	ands	r3, r2
 8007462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	429a      	cmp	r2, r3
 800746a:	f040 8166 	bne.w	800773a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d00b      	beq.n	800748e <HAL_GPIO_Init+0x5a>
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d007      	beq.n	800748e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007482:	2b11      	cmp	r3, #17
 8007484:	d003      	beq.n	800748e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b12      	cmp	r3, #18
 800748c:	d130      	bne.n	80074f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	2203      	movs	r2, #3
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68da      	ldr	r2, [r3, #12]
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80074c4:	2201      	movs	r2, #1
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	091b      	lsrs	r3, r3, #4
 80074da:	f003 0201 	and.w	r2, r3, #1
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	2203      	movs	r2, #3
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	43db      	mvns	r3, r3
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	4013      	ands	r3, r2
 8007506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	4313      	orrs	r3, r2
 8007518:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69ba      	ldr	r2, [r7, #24]
 800751e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	2b02      	cmp	r3, #2
 8007526:	d003      	beq.n	8007530 <HAL_GPIO_Init+0xfc>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b12      	cmp	r3, #18
 800752e:	d123      	bne.n	8007578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	08da      	lsrs	r2, r3, #3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3208      	adds	r2, #8
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	f003 0307 	and.w	r3, r3, #7
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	220f      	movs	r2, #15
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	43db      	mvns	r3, r3
 800754e:	69ba      	ldr	r2, [r7, #24]
 8007550:	4013      	ands	r3, r2
 8007552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	4313      	orrs	r3, r2
 8007568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	08da      	lsrs	r2, r3, #3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3208      	adds	r2, #8
 8007572:	69b9      	ldr	r1, [r7, #24]
 8007574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	2203      	movs	r2, #3
 8007584:	fa02 f303 	lsl.w	r3, r2, r3
 8007588:	43db      	mvns	r3, r3
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	4013      	ands	r3, r2
 800758e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 0203 	and.w	r2, r3, #3
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	fa02 f303 	lsl.w	r3, r2, r3
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80c0 	beq.w	800773a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
 80075be:	4b65      	ldr	r3, [pc, #404]	; (8007754 <HAL_GPIO_Init+0x320>)
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	4a64      	ldr	r2, [pc, #400]	; (8007754 <HAL_GPIO_Init+0x320>)
 80075c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075c8:	6453      	str	r3, [r2, #68]	; 0x44
 80075ca:	4b62      	ldr	r3, [pc, #392]	; (8007754 <HAL_GPIO_Init+0x320>)
 80075cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075d6:	4a60      	ldr	r2, [pc, #384]	; (8007758 <HAL_GPIO_Init+0x324>)
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	089b      	lsrs	r3, r3, #2
 80075dc:	3302      	adds	r3, #2
 80075de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	220f      	movs	r2, #15
 80075ee:	fa02 f303 	lsl.w	r3, r2, r3
 80075f2:	43db      	mvns	r3, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	4013      	ands	r3, r2
 80075f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a57      	ldr	r2, [pc, #348]	; (800775c <HAL_GPIO_Init+0x328>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d037      	beq.n	8007672 <HAL_GPIO_Init+0x23e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a56      	ldr	r2, [pc, #344]	; (8007760 <HAL_GPIO_Init+0x32c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d031      	beq.n	800766e <HAL_GPIO_Init+0x23a>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a55      	ldr	r2, [pc, #340]	; (8007764 <HAL_GPIO_Init+0x330>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d02b      	beq.n	800766a <HAL_GPIO_Init+0x236>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a54      	ldr	r2, [pc, #336]	; (8007768 <HAL_GPIO_Init+0x334>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d025      	beq.n	8007666 <HAL_GPIO_Init+0x232>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a53      	ldr	r2, [pc, #332]	; (800776c <HAL_GPIO_Init+0x338>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d01f      	beq.n	8007662 <HAL_GPIO_Init+0x22e>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a52      	ldr	r2, [pc, #328]	; (8007770 <HAL_GPIO_Init+0x33c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d019      	beq.n	800765e <HAL_GPIO_Init+0x22a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a51      	ldr	r2, [pc, #324]	; (8007774 <HAL_GPIO_Init+0x340>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_GPIO_Init+0x226>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a50      	ldr	r2, [pc, #320]	; (8007778 <HAL_GPIO_Init+0x344>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00d      	beq.n	8007656 <HAL_GPIO_Init+0x222>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a4f      	ldr	r2, [pc, #316]	; (800777c <HAL_GPIO_Init+0x348>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <HAL_GPIO_Init+0x21e>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a4e      	ldr	r2, [pc, #312]	; (8007780 <HAL_GPIO_Init+0x34c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d101      	bne.n	800764e <HAL_GPIO_Init+0x21a>
 800764a:	2309      	movs	r3, #9
 800764c:	e012      	b.n	8007674 <HAL_GPIO_Init+0x240>
 800764e:	230a      	movs	r3, #10
 8007650:	e010      	b.n	8007674 <HAL_GPIO_Init+0x240>
 8007652:	2308      	movs	r3, #8
 8007654:	e00e      	b.n	8007674 <HAL_GPIO_Init+0x240>
 8007656:	2307      	movs	r3, #7
 8007658:	e00c      	b.n	8007674 <HAL_GPIO_Init+0x240>
 800765a:	2306      	movs	r3, #6
 800765c:	e00a      	b.n	8007674 <HAL_GPIO_Init+0x240>
 800765e:	2305      	movs	r3, #5
 8007660:	e008      	b.n	8007674 <HAL_GPIO_Init+0x240>
 8007662:	2304      	movs	r3, #4
 8007664:	e006      	b.n	8007674 <HAL_GPIO_Init+0x240>
 8007666:	2303      	movs	r3, #3
 8007668:	e004      	b.n	8007674 <HAL_GPIO_Init+0x240>
 800766a:	2302      	movs	r3, #2
 800766c:	e002      	b.n	8007674 <HAL_GPIO_Init+0x240>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <HAL_GPIO_Init+0x240>
 8007672:	2300      	movs	r3, #0
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	f002 0203 	and.w	r2, r2, #3
 800767a:	0092      	lsls	r2, r2, #2
 800767c:	4093      	lsls	r3, r2
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	4313      	orrs	r3, r2
 8007682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007684:	4934      	ldr	r1, [pc, #208]	; (8007758 <HAL_GPIO_Init+0x324>)
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	089b      	lsrs	r3, r3, #2
 800768a:	3302      	adds	r3, #2
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007692:	4b3c      	ldr	r3, [pc, #240]	; (8007784 <HAL_GPIO_Init+0x350>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	43db      	mvns	r3, r3
 800769c:	69ba      	ldr	r2, [r7, #24]
 800769e:	4013      	ands	r3, r2
 80076a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80076b6:	4a33      	ldr	r2, [pc, #204]	; (8007784 <HAL_GPIO_Init+0x350>)
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80076bc:	4b31      	ldr	r3, [pc, #196]	; (8007784 <HAL_GPIO_Init+0x350>)
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	43db      	mvns	r3, r3
 80076c6:	69ba      	ldr	r2, [r7, #24]
 80076c8:	4013      	ands	r3, r2
 80076ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80076e0:	4a28      	ldr	r2, [pc, #160]	; (8007784 <HAL_GPIO_Init+0x350>)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80076e6:	4b27      	ldr	r3, [pc, #156]	; (8007784 <HAL_GPIO_Init+0x350>)
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	43db      	mvns	r3, r3
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	4013      	ands	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d003      	beq.n	800770a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800770a:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <HAL_GPIO_Init+0x350>)
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007710:	4b1c      	ldr	r3, [pc, #112]	; (8007784 <HAL_GPIO_Init+0x350>)
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	43db      	mvns	r3, r3
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4013      	ands	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d003      	beq.n	8007734 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800772c:	69ba      	ldr	r2, [r7, #24]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007734:	4a13      	ldr	r2, [pc, #76]	; (8007784 <HAL_GPIO_Init+0x350>)
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	3301      	adds	r3, #1
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	2b0f      	cmp	r3, #15
 8007744:	f67f ae84 	bls.w	8007450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007748:	bf00      	nop
 800774a:	3724      	adds	r7, #36	; 0x24
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	40023800 	.word	0x40023800
 8007758:	40013800 	.word	0x40013800
 800775c:	40020000 	.word	0x40020000
 8007760:	40020400 	.word	0x40020400
 8007764:	40020800 	.word	0x40020800
 8007768:	40020c00 	.word	0x40020c00
 800776c:	40021000 	.word	0x40021000
 8007770:	40021400 	.word	0x40021400
 8007774:	40021800 	.word	0x40021800
 8007778:	40021c00 	.word	0x40021c00
 800777c:	40022000 	.word	0x40022000
 8007780:	40022400 	.word	0x40022400
 8007784:	40013c00 	.word	0x40013c00

08007788 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691a      	ldr	r2, [r3, #16]
 8007798:	887b      	ldrh	r3, [r7, #2]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73fb      	strb	r3, [r7, #15]
 80077a4:	e001      	b.n	80077aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3714      	adds	r7, #20
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	460b      	mov	r3, r1
 80077c2:	807b      	strh	r3, [r7, #2]
 80077c4:	4613      	mov	r3, r2
 80077c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80077c8:	787b      	ldrb	r3, [r7, #1]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d003      	beq.n	80077d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077ce:	887a      	ldrh	r2, [r7, #2]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80077d4:	e003      	b.n	80077de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80077d6:	887b      	ldrh	r3, [r7, #2]
 80077d8:	041a      	lsls	r2, r3, #16
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	619a      	str	r2, [r3, #24]
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
	...

080077ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80077f8:	695a      	ldr	r2, [r3, #20]
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	4013      	ands	r3, r2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d006      	beq.n	8007810 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007802:	4a05      	ldr	r2, [pc, #20]	; (8007818 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007808:	88fb      	ldrh	r3, [r7, #6]
 800780a:	4618      	mov	r0, r3
 800780c:	f7fc f8ef 	bl	80039ee <HAL_GPIO_EXTI_Callback>
  }
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	40013c00 	.word	0x40013c00

0800781c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e11f      	b.n	8007a6e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fd facc 	bl	8004de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2224      	movs	r2, #36	; 0x24
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0201 	bic.w	r2, r2, #1
 800785e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800786e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800787e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007880:	f001 f96e 	bl	8008b60 <HAL_RCC_GetPCLK1Freq>
 8007884:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	4a7b      	ldr	r2, [pc, #492]	; (8007a78 <HAL_I2C_Init+0x25c>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d807      	bhi.n	80078a0 <HAL_I2C_Init+0x84>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4a7a      	ldr	r2, [pc, #488]	; (8007a7c <HAL_I2C_Init+0x260>)
 8007894:	4293      	cmp	r3, r2
 8007896:	bf94      	ite	ls
 8007898:	2301      	movls	r3, #1
 800789a:	2300      	movhi	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	e006      	b.n	80078ae <HAL_I2C_Init+0x92>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4a77      	ldr	r2, [pc, #476]	; (8007a80 <HAL_I2C_Init+0x264>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	bf94      	ite	ls
 80078a8:	2301      	movls	r3, #1
 80078aa:	2300      	movhi	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e0db      	b.n	8007a6e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	4a72      	ldr	r2, [pc, #456]	; (8007a84 <HAL_I2C_Init+0x268>)
 80078ba:	fba2 2303 	umull	r2, r3, r2, r3
 80078be:	0c9b      	lsrs	r3, r3, #18
 80078c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	4a64      	ldr	r2, [pc, #400]	; (8007a78 <HAL_I2C_Init+0x25c>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d802      	bhi.n	80078f0 <HAL_I2C_Init+0xd4>
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	3301      	adds	r3, #1
 80078ee:	e009      	b.n	8007904 <HAL_I2C_Init+0xe8>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	4a63      	ldr	r2, [pc, #396]	; (8007a88 <HAL_I2C_Init+0x26c>)
 80078fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007900:	099b      	lsrs	r3, r3, #6
 8007902:	3301      	adds	r3, #1
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	6812      	ldr	r2, [r2, #0]
 8007908:	430b      	orrs	r3, r1
 800790a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007916:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	4956      	ldr	r1, [pc, #344]	; (8007a78 <HAL_I2C_Init+0x25c>)
 8007920:	428b      	cmp	r3, r1
 8007922:	d80d      	bhi.n	8007940 <HAL_I2C_Init+0x124>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	1e59      	subs	r1, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007932:	3301      	adds	r3, #1
 8007934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007938:	2b04      	cmp	r3, #4
 800793a:	bf38      	it	cc
 800793c:	2304      	movcc	r3, #4
 800793e:	e04f      	b.n	80079e0 <HAL_I2C_Init+0x1c4>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d111      	bne.n	800796c <HAL_I2C_Init+0x150>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	1e58      	subs	r0, r3, #1
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	460b      	mov	r3, r1
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	440b      	add	r3, r1
 8007956:	fbb0 f3f3 	udiv	r3, r0, r3
 800795a:	3301      	adds	r3, #1
 800795c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007960:	2b00      	cmp	r3, #0
 8007962:	bf0c      	ite	eq
 8007964:	2301      	moveq	r3, #1
 8007966:	2300      	movne	r3, #0
 8007968:	b2db      	uxtb	r3, r3
 800796a:	e012      	b.n	8007992 <HAL_I2C_Init+0x176>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	1e58      	subs	r0, r3, #1
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6859      	ldr	r1, [r3, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	0099      	lsls	r1, r3, #2
 800797c:	440b      	add	r3, r1
 800797e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007982:	3301      	adds	r3, #1
 8007984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007988:	2b00      	cmp	r3, #0
 800798a:	bf0c      	ite	eq
 800798c:	2301      	moveq	r3, #1
 800798e:	2300      	movne	r3, #0
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_I2C_Init+0x17e>
 8007996:	2301      	movs	r3, #1
 8007998:	e022      	b.n	80079e0 <HAL_I2C_Init+0x1c4>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10e      	bne.n	80079c0 <HAL_I2C_Init+0x1a4>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1e58      	subs	r0, r3, #1
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6859      	ldr	r1, [r3, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	440b      	add	r3, r1
 80079b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80079b4:	3301      	adds	r3, #1
 80079b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079be:	e00f      	b.n	80079e0 <HAL_I2C_Init+0x1c4>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	1e58      	subs	r0, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6859      	ldr	r1, [r3, #4]
 80079c8:	460b      	mov	r3, r1
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	0099      	lsls	r1, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80079d6:	3301      	adds	r3, #1
 80079d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079e0:	6879      	ldr	r1, [r7, #4]
 80079e2:	6809      	ldr	r1, [r1, #0]
 80079e4:	4313      	orrs	r3, r2
 80079e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a1b      	ldr	r3, [r3, #32]
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	6911      	ldr	r1, [r2, #16]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	68d2      	ldr	r2, [r2, #12]
 8007a1a:	4311      	orrs	r1, r2
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	430b      	orrs	r3, r1
 8007a22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	695a      	ldr	r2, [r3, #20]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	000186a0 	.word	0x000186a0
 8007a7c:	001e847f 	.word	0x001e847f
 8007a80:	003d08ff 	.word	0x003d08ff
 8007a84:	431bde83 	.word	0x431bde83
 8007a88:	10624dd3 	.word	0x10624dd3

08007a8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af02      	add	r7, sp, #8
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	607a      	str	r2, [r7, #4]
 8007a96:	461a      	mov	r2, r3
 8007a98:	460b      	mov	r3, r1
 8007a9a:	817b      	strh	r3, [r7, #10]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aa0:	f7fe fbe8 	bl	8006274 <HAL_GetTick>
 8007aa4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	f040 80e0 	bne.w	8007c74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	2319      	movs	r3, #25
 8007aba:	2201      	movs	r2, #1
 8007abc:	4970      	ldr	r1, [pc, #448]	; (8007c80 <HAL_I2C_Master_Transmit+0x1f4>)
 8007abe:	68f8      	ldr	r0, [r7, #12]
 8007ac0:	f000 fc58 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
 8007acc:	e0d3      	b.n	8007c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_I2C_Master_Transmit+0x50>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e0cc      	b.n	8007c76 <HAL_I2C_Master_Transmit+0x1ea>
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d007      	beq.n	8007b02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0201 	orr.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2221      	movs	r2, #33	; 0x21
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2210      	movs	r2, #16
 8007b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2200      	movs	r2, #0
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	893a      	ldrh	r2, [r7, #8]
 8007b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4a50      	ldr	r2, [pc, #320]	; (8007c84 <HAL_I2C_Master_Transmit+0x1f8>)
 8007b42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007b44:	8979      	ldrh	r1, [r7, #10]
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 fac2 	bl	80080d4 <I2C_MasterRequestWrite>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d001      	beq.n	8007b5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e08d      	b.n	8007c76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	613b      	str	r3, [r7, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007b70:	e066      	b.n	8007c40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	6a39      	ldr	r1, [r7, #32]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 fcd2 	bl	8008520 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d107      	bne.n	8007b9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e06b      	b.n	8007c76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	b29a      	uxth	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d11b      	bne.n	8007c14 <HAL_I2C_Master_Transmit+0x188>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d017      	beq.n	8007c14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	781a      	ldrb	r2, [r3, #0]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	1c5a      	adds	r2, r3, #1
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	6a39      	ldr	r1, [r7, #32]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fcc2 	bl	80085a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00d      	beq.n	8007c40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d107      	bne.n	8007c3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e01a      	b.n	8007c76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d194      	bne.n	8007b72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	e000      	b.n	8007c76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007c74:	2302      	movs	r3, #2
  }
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	00100002 	.word	0x00100002
 8007c84:	ffff0000 	.word	0xffff0000

08007c88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08c      	sub	sp, #48	; 0x30
 8007c8c:	af02      	add	r7, sp, #8
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	607a      	str	r2, [r7, #4]
 8007c92:	461a      	mov	r2, r3
 8007c94:	460b      	mov	r3, r1
 8007c96:	817b      	strh	r3, [r7, #10]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c9c:	f7fe faea 	bl	8006274 <HAL_GetTick>
 8007ca0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	f040 820b 	bne.w	80080c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	2319      	movs	r3, #25
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	497c      	ldr	r1, [pc, #496]	; (8007eac <HAL_I2C_Master_Receive+0x224>)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 fb5a 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e1fe      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d101      	bne.n	8007cd8 <HAL_I2C_Master_Receive+0x50>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e1f7      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d007      	beq.n	8007cfe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f042 0201 	orr.w	r2, r2, #1
 8007cfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2222      	movs	r2, #34	; 0x22
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2210      	movs	r2, #16
 8007d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	893a      	ldrh	r2, [r7, #8]
 8007d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d34:	b29a      	uxth	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4a5c      	ldr	r2, [pc, #368]	; (8007eb0 <HAL_I2C_Master_Receive+0x228>)
 8007d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d40:	8979      	ldrh	r1, [r7, #10]
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d46:	68f8      	ldr	r0, [r7, #12]
 8007d48:	f000 fa46 	bl	80081d8 <I2C_MasterRequestRead>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e1b8      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d113      	bne.n	8007d86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d5e:	2300      	movs	r3, #0
 8007d60:	623b      	str	r3, [r7, #32]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	623b      	str	r3, [r7, #32]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	623b      	str	r3, [r7, #32]
 8007d72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e18c      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d11b      	bne.n	8007dc6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61fb      	str	r3, [r7, #28]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	61fb      	str	r3, [r7, #28]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	61fb      	str	r3, [r7, #28]
 8007db2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e16c      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d11b      	bne.n	8007e06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ddc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dee:	2300      	movs	r3, #0
 8007df0:	61bb      	str	r3, [r7, #24]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	61bb      	str	r3, [r7, #24]
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	e14c      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e16:	2300      	movs	r3, #0
 8007e18:	617b      	str	r3, [r7, #20]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e2c:	e138      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	f200 80f1 	bhi.w	800801a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d123      	bne.n	8007e88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 fbed 	bl	8008624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e139      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691a      	ldr	r2, [r3, #16]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e70:	3b01      	subs	r3, #1
 8007e72:	b29a      	uxth	r2, r3
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e86:	e10b      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d14e      	bne.n	8007f2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2200      	movs	r2, #0
 8007e98:	4906      	ldr	r1, [pc, #24]	; (8007eb4 <HAL_I2C_Master_Receive+0x22c>)
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 fa6a 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d008      	beq.n	8007eb8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e10e      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
 8007eaa:	bf00      	nop
 8007eac:	00100002 	.word	0x00100002
 8007eb0:	ffff0000 	.word	0xffff0000
 8007eb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f04:	b2d2      	uxtb	r2, r2
 8007f06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	1c5a      	adds	r2, r3, #1
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f16:	3b01      	subs	r3, #1
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	3b01      	subs	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f2c:	e0b8      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f34:	2200      	movs	r2, #0
 8007f36:	4966      	ldr	r1, [pc, #408]	; (80080d0 <HAL_I2C_Master_Receive+0x448>)
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 fa1b 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e0bf      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691a      	ldr	r2, [r3, #16]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	b2d2      	uxtb	r2, r2
 8007f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f74:	3b01      	subs	r3, #1
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8c:	9300      	str	r3, [sp, #0]
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	2200      	movs	r2, #0
 8007f92:	494f      	ldr	r1, [pc, #316]	; (80080d0 <HAL_I2C_Master_Receive+0x448>)
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f9ed 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e091      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691a      	ldr	r2, [r3, #16]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691a      	ldr	r2, [r3, #16]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	1c5a      	adds	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008002:	3b01      	subs	r3, #1
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	b29a      	uxth	r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008018:	e042      	b.n	80080a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800801a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fb00 	bl	8008624 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e04c      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	1c5a      	adds	r2, r3, #1
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008056:	b29b      	uxth	r3, r3
 8008058:	3b01      	subs	r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b04      	cmp	r3, #4
 800806c:	d118      	bne.n	80080a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	691a      	ldr	r2, [r3, #16]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008096:	b29b      	uxth	r3, r3
 8008098:	3b01      	subs	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f47f aec2 	bne.w	8007e2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	e000      	b.n	80080c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80080c6:	2302      	movs	r3, #2
  }
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3728      	adds	r7, #40	; 0x28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	00010004 	.word	0x00010004

080080d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af02      	add	r7, sp, #8
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	460b      	mov	r3, r1
 80080e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	d006      	beq.n	80080fe <I2C_MasterRequestWrite+0x2a>
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d003      	beq.n	80080fe <I2C_MasterRequestWrite+0x2a>
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080fc:	d108      	bne.n	8008110 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681a      	ldr	r2, [r3, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	e00b      	b.n	8008128 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	2b12      	cmp	r3, #18
 8008116:	d107      	bne.n	8008128 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008126:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f000 f91d 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00d      	beq.n	800815c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800814e:	d103      	bne.n	8008158 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008156:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e035      	b.n	80081c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008164:	d108      	bne.n	8008178 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008166:	897b      	ldrh	r3, [r7, #10]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008174:	611a      	str	r2, [r3, #16]
 8008176:	e01b      	b.n	80081b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008178:	897b      	ldrh	r3, [r7, #10]
 800817a:	11db      	asrs	r3, r3, #7
 800817c:	b2db      	uxtb	r3, r3
 800817e:	f003 0306 	and.w	r3, r3, #6
 8008182:	b2db      	uxtb	r3, r3
 8008184:	f063 030f 	orn	r3, r3, #15
 8008188:	b2da      	uxtb	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	490e      	ldr	r1, [pc, #56]	; (80081d0 <I2C_MasterRequestWrite+0xfc>)
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 f943 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e010      	b.n	80081c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80081a6:	897b      	ldrh	r3, [r7, #10]
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	4907      	ldr	r1, [pc, #28]	; (80081d4 <I2C_MasterRequestWrite+0x100>)
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f933 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e000      	b.n	80081c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	00010008 	.word	0x00010008
 80081d4:	00010002 	.word	0x00010002

080081d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af02      	add	r7, sp, #8
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	603b      	str	r3, [r7, #0]
 80081e4:	460b      	mov	r3, r1
 80081e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b08      	cmp	r3, #8
 8008202:	d006      	beq.n	8008212 <I2C_MasterRequestRead+0x3a>
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b01      	cmp	r3, #1
 8008208:	d003      	beq.n	8008212 <I2C_MasterRequestRead+0x3a>
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008210:	d108      	bne.n	8008224 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e00b      	b.n	800823c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	2b11      	cmp	r3, #17
 800822a:	d107      	bne.n	800823c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800823a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 f893 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00d      	beq.n	8008270 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d103      	bne.n	800826c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800826a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800826c:	2303      	movs	r3, #3
 800826e:	e079      	b.n	8008364 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008278:	d108      	bne.n	800828c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800827a:	897b      	ldrh	r3, [r7, #10]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f043 0301 	orr.w	r3, r3, #1
 8008282:	b2da      	uxtb	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	611a      	str	r2, [r3, #16]
 800828a:	e05f      	b.n	800834c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800828c:	897b      	ldrh	r3, [r7, #10]
 800828e:	11db      	asrs	r3, r3, #7
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0306 	and.w	r3, r3, #6
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f063 030f 	orn	r3, r3, #15
 800829c:	b2da      	uxtb	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4930      	ldr	r1, [pc, #192]	; (800836c <I2C_MasterRequestRead+0x194>)
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f000 f8b9 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d001      	beq.n	80082ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e054      	b.n	8008364 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082ba:	897b      	ldrh	r3, [r7, #10]
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	4929      	ldr	r1, [pc, #164]	; (8008370 <I2C_MasterRequestRead+0x198>)
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f000 f8a9 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e044      	b.n	8008364 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082da:	2300      	movs	r3, #0
 80082dc:	613b      	str	r3, [r7, #16]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	699b      	ldr	r3, [r3, #24]
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f831 	bl	8008374 <I2C_WaitOnFlagUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00d      	beq.n	8008334 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008326:	d103      	bne.n	8008330 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e017      	b.n	8008364 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008334:	897b      	ldrh	r3, [r7, #10]
 8008336:	11db      	asrs	r3, r3, #7
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0306 	and.w	r3, r3, #6
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f063 030e 	orn	r3, r3, #14
 8008344:	b2da      	uxtb	r2, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4907      	ldr	r1, [pc, #28]	; (8008370 <I2C_MasterRequestRead+0x198>)
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 f865 	bl	8008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	00010008 	.word	0x00010008
 8008370:	00010002 	.word	0x00010002

08008374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	4613      	mov	r3, r2
 8008382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008384:	e025      	b.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838c:	d021      	beq.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838e:	f7fd ff71 	bl	8006274 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d302      	bcc.n	80083a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d116      	bne.n	80083d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f043 0220 	orr.w	r2, r3, #32
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e023      	b.n	800841a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	0c1b      	lsrs	r3, r3, #16
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d10d      	bne.n	80083f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	43da      	mvns	r2, r3
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4013      	ands	r3, r2
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	bf0c      	ite	eq
 80083ee:	2301      	moveq	r3, #1
 80083f0:	2300      	movne	r3, #0
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	461a      	mov	r2, r3
 80083f6:	e00c      	b.n	8008412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	43da      	mvns	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4013      	ands	r3, r2
 8008404:	b29b      	uxth	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	bf0c      	ite	eq
 800840a:	2301      	moveq	r3, #1
 800840c:	2300      	movne	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	461a      	mov	r2, r3
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	429a      	cmp	r2, r3
 8008416:	d0b6      	beq.n	8008386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b084      	sub	sp, #16
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008430:	e051      	b.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800843c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008440:	d123      	bne.n	800848a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800845a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008476:	f043 0204 	orr.w	r2, r3, #4
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e046      	b.n	8008518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008490:	d021      	beq.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008492:	f7fd feef 	bl	8006274 <HAL_GetTick>
 8008496:	4602      	mov	r2, r0
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d302      	bcc.n	80084a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d116      	bne.n	80084d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2200      	movs	r2, #0
 80084ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f043 0220 	orr.w	r2, r3, #32
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e020      	b.n	8008518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	0c1b      	lsrs	r3, r3, #16
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d10c      	bne.n	80084fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	43da      	mvns	r2, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	bf14      	ite	ne
 80084f2:	2301      	movne	r3, #1
 80084f4:	2300      	moveq	r3, #0
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	e00b      	b.n	8008512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	43da      	mvns	r2, r3
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	4013      	ands	r3, r2
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	bf14      	ite	ne
 800850c:	2301      	movne	r3, #1
 800850e:	2300      	moveq	r3, #0
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d18d      	bne.n	8008432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800852c:	e02d      	b.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f8ce 	bl	80086d0 <I2C_IsAcknowledgeFailed>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e02d      	b.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d021      	beq.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008546:	f7fd fe95 	bl	8006274 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d302      	bcc.n	800855c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d116      	bne.n	800858a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f043 0220 	orr.w	r2, r3, #32
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008586:	2301      	movs	r3, #1
 8008588:	e007      	b.n	800859a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	2b80      	cmp	r3, #128	; 0x80
 8008596:	d1ca      	bne.n	800852e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	60f8      	str	r0, [r7, #12]
 80085aa:	60b9      	str	r1, [r7, #8]
 80085ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085ae:	e02d      	b.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f000 f88d 	bl	80086d0 <I2C_IsAcknowledgeFailed>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e02d      	b.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c6:	d021      	beq.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085c8:	f7fd fe54 	bl	8006274 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d302      	bcc.n	80085de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d116      	bne.n	800860c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2200      	movs	r2, #0
 80085e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2220      	movs	r2, #32
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	f043 0220 	orr.w	r2, r3, #32
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2200      	movs	r2, #0
 8008604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e007      	b.n	800861c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	695b      	ldr	r3, [r3, #20]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b04      	cmp	r3, #4
 8008618:	d1ca      	bne.n	80085b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008630:	e042      	b.n	80086b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	f003 0310 	and.w	r3, r3, #16
 800863c:	2b10      	cmp	r3, #16
 800863e:	d119      	bne.n	8008674 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f06f 0210 	mvn.w	r2, #16
 8008648:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e029      	b.n	80086c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008674:	f7fd fdfe 	bl	8006274 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	429a      	cmp	r2, r3
 8008682:	d302      	bcc.n	800868a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d116      	bne.n	80086b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a4:	f043 0220 	orr.w	r2, r3, #32
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e007      	b.n	80086c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c2:	2b40      	cmp	r3, #64	; 0x40
 80086c4:	d1b5      	bne.n	8008632 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e6:	d11b      	bne.n	8008720 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	f043 0204 	orr.w	r2, r3, #4
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	e000      	b.n	8008722 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
	...

08008730 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b082      	sub	sp, #8
 8008734:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800873a:	2300      	movs	r3, #0
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	4b20      	ldr	r3, [pc, #128]	; (80087c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008748:	6413      	str	r3, [r2, #64]	; 0x40
 800874a:	4b1d      	ldr	r3, [pc, #116]	; (80087c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008756:	4b1b      	ldr	r3, [pc, #108]	; (80087c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8008758:	2201      	movs	r2, #1
 800875a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800875c:	f7fd fd8a 	bl	8006274 <HAL_GetTick>
 8008760:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008762:	e009      	b.n	8008778 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008764:	f7fd fd86 	bl	8006274 <HAL_GetTick>
 8008768:	4602      	mov	r2, r0
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	1ad3      	subs	r3, r2, r3
 800876e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008772:	d901      	bls.n	8008778 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e01f      	b.n	80087b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008778:	4b13      	ldr	r3, [pc, #76]	; (80087c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008784:	d1ee      	bne.n	8008764 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008786:	4b11      	ldr	r3, [pc, #68]	; (80087cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008788:	2201      	movs	r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800878c:	f7fd fd72 	bl	8006274 <HAL_GetTick>
 8008790:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008792:	e009      	b.n	80087a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008794:	f7fd fd6e 	bl	8006274 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087a2:	d901      	bls.n	80087a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e007      	b.n	80087b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80087a8:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087b4:	d1ee      	bne.n	8008794 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	40023800 	.word	0x40023800
 80087c4:	420e0040 	.word	0x420e0040
 80087c8:	40007000 	.word	0x40007000
 80087cc:	420e0044 	.word	0x420e0044

080087d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d101      	bne.n	80087e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e0cc      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087e4:	4b68      	ldr	r3, [pc, #416]	; (8008988 <HAL_RCC_ClockConfig+0x1b8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 030f 	and.w	r3, r3, #15
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d90c      	bls.n	800880c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087f2:	4b65      	ldr	r3, [pc, #404]	; (8008988 <HAL_RCC_ClockConfig+0x1b8>)
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	b2d2      	uxtb	r2, r2
 80087f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087fa:	4b63      	ldr	r3, [pc, #396]	; (8008988 <HAL_RCC_ClockConfig+0x1b8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 030f 	and.w	r3, r3, #15
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d001      	beq.n	800880c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e0b8      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d020      	beq.n	800885a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0304 	and.w	r3, r3, #4
 8008820:	2b00      	cmp	r3, #0
 8008822:	d005      	beq.n	8008830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008824:	4b59      	ldr	r3, [pc, #356]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	4a58      	ldr	r2, [pc, #352]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 800882a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800882e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0308 	and.w	r3, r3, #8
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800883c:	4b53      	ldr	r3, [pc, #332]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	4a52      	ldr	r2, [pc, #328]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008848:	4b50      	ldr	r3, [pc, #320]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	494d      	ldr	r1, [pc, #308]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008856:	4313      	orrs	r3, r2
 8008858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d044      	beq.n	80088f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d107      	bne.n	800887e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886e:	4b47      	ldr	r3, [pc, #284]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d119      	bne.n	80088ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e07f      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b02      	cmp	r3, #2
 8008884:	d003      	beq.n	800888e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800888a:	2b03      	cmp	r3, #3
 800888c:	d107      	bne.n	800889e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800888e:	4b3f      	ldr	r3, [pc, #252]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008896:	2b00      	cmp	r3, #0
 8008898:	d109      	bne.n	80088ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e06f      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800889e:	4b3b      	ldr	r3, [pc, #236]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0302 	and.w	r3, r3, #2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e067      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088ae:	4b37      	ldr	r3, [pc, #220]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f023 0203 	bic.w	r2, r3, #3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4934      	ldr	r1, [pc, #208]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80088c0:	f7fd fcd8 	bl	8006274 <HAL_GetTick>
 80088c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088c6:	e00a      	b.n	80088de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088c8:	f7fd fcd4 	bl	8006274 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d901      	bls.n	80088de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80088da:	2303      	movs	r3, #3
 80088dc:	e04f      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088de:	4b2b      	ldr	r3, [pc, #172]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 020c 	and.w	r2, r3, #12
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d1eb      	bne.n	80088c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80088f0:	4b25      	ldr	r3, [pc, #148]	; (8008988 <HAL_RCC_ClockConfig+0x1b8>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 030f 	and.w	r3, r3, #15
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d20c      	bcs.n	8008918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088fe:	4b22      	ldr	r3, [pc, #136]	; (8008988 <HAL_RCC_ClockConfig+0x1b8>)
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	b2d2      	uxtb	r2, r2
 8008904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008906:	4b20      	ldr	r3, [pc, #128]	; (8008988 <HAL_RCC_ClockConfig+0x1b8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 030f 	and.w	r3, r3, #15
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	429a      	cmp	r2, r3
 8008912:	d001      	beq.n	8008918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e032      	b.n	800897e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008924:	4b19      	ldr	r3, [pc, #100]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	4916      	ldr	r1, [pc, #88]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008932:	4313      	orrs	r3, r2
 8008934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0308 	and.w	r3, r3, #8
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008942:	4b12      	ldr	r3, [pc, #72]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	490e      	ldr	r1, [pc, #56]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 8008952:	4313      	orrs	r3, r2
 8008954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008956:	f000 f821 	bl	800899c <HAL_RCC_GetSysClockFreq>
 800895a:	4601      	mov	r1, r0
 800895c:	4b0b      	ldr	r3, [pc, #44]	; (800898c <HAL_RCC_ClockConfig+0x1bc>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	091b      	lsrs	r3, r3, #4
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	4a0a      	ldr	r2, [pc, #40]	; (8008990 <HAL_RCC_ClockConfig+0x1c0>)
 8008968:	5cd3      	ldrb	r3, [r2, r3]
 800896a:	fa21 f303 	lsr.w	r3, r1, r3
 800896e:	4a09      	ldr	r2, [pc, #36]	; (8008994 <HAL_RCC_ClockConfig+0x1c4>)
 8008970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <HAL_RCC_ClockConfig+0x1c8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f7fd fc38 	bl	80061ec <HAL_InitTick>

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	40023c00 	.word	0x40023c00
 800898c:	40023800 	.word	0x40023800
 8008990:	08017b48 	.word	0x08017b48
 8008994:	20000000 	.word	0x20000000
 8008998:	20000004 	.word	0x20000004

0800899c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	2300      	movs	r3, #0
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	2300      	movs	r3, #0
 80089ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089b2:	4b63      	ldr	r3, [pc, #396]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f003 030c 	and.w	r3, r3, #12
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d007      	beq.n	80089ce <HAL_RCC_GetSysClockFreq+0x32>
 80089be:	2b08      	cmp	r3, #8
 80089c0:	d008      	beq.n	80089d4 <HAL_RCC_GetSysClockFreq+0x38>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f040 80b4 	bne.w	8008b30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089c8:	4b5e      	ldr	r3, [pc, #376]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80089ca:	60bb      	str	r3, [r7, #8]
       break;
 80089cc:	e0b3      	b.n	8008b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089ce:	4b5d      	ldr	r3, [pc, #372]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80089d0:	60bb      	str	r3, [r7, #8]
      break;
 80089d2:	e0b0      	b.n	8008b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089d4:	4b5a      	ldr	r3, [pc, #360]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089de:	4b58      	ldr	r3, [pc, #352]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d04a      	beq.n	8008a80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ea:	4b55      	ldr	r3, [pc, #340]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	099b      	lsrs	r3, r3, #6
 80089f0:	f04f 0400 	mov.w	r4, #0
 80089f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80089f8:	f04f 0200 	mov.w	r2, #0
 80089fc:	ea03 0501 	and.w	r5, r3, r1
 8008a00:	ea04 0602 	and.w	r6, r4, r2
 8008a04:	4629      	mov	r1, r5
 8008a06:	4632      	mov	r2, r6
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	f04f 0400 	mov.w	r4, #0
 8008a10:	0154      	lsls	r4, r2, #5
 8008a12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008a16:	014b      	lsls	r3, r1, #5
 8008a18:	4619      	mov	r1, r3
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	1b49      	subs	r1, r1, r5
 8008a1e:	eb62 0206 	sbc.w	r2, r2, r6
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	f04f 0400 	mov.w	r4, #0
 8008a2a:	0194      	lsls	r4, r2, #6
 8008a2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008a30:	018b      	lsls	r3, r1, #6
 8008a32:	1a5b      	subs	r3, r3, r1
 8008a34:	eb64 0402 	sbc.w	r4, r4, r2
 8008a38:	f04f 0100 	mov.w	r1, #0
 8008a3c:	f04f 0200 	mov.w	r2, #0
 8008a40:	00e2      	lsls	r2, r4, #3
 8008a42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008a46:	00d9      	lsls	r1, r3, #3
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4614      	mov	r4, r2
 8008a4c:	195b      	adds	r3, r3, r5
 8008a4e:	eb44 0406 	adc.w	r4, r4, r6
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	f04f 0200 	mov.w	r2, #0
 8008a5a:	02a2      	lsls	r2, r4, #10
 8008a5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008a60:	0299      	lsls	r1, r3, #10
 8008a62:	460b      	mov	r3, r1
 8008a64:	4614      	mov	r4, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	4621      	mov	r1, r4
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f04f 0400 	mov.w	r4, #0
 8008a70:	461a      	mov	r2, r3
 8008a72:	4623      	mov	r3, r4
 8008a74:	f7f8 f920 	bl	8000cb8 <__aeabi_uldivmod>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	e049      	b.n	8008b14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a80:	4b2f      	ldr	r3, [pc, #188]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	099b      	lsrs	r3, r3, #6
 8008a86:	f04f 0400 	mov.w	r4, #0
 8008a8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	ea03 0501 	and.w	r5, r3, r1
 8008a96:	ea04 0602 	and.w	r6, r4, r2
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	4632      	mov	r2, r6
 8008a9e:	f04f 0300 	mov.w	r3, #0
 8008aa2:	f04f 0400 	mov.w	r4, #0
 8008aa6:	0154      	lsls	r4, r2, #5
 8008aa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008aac:	014b      	lsls	r3, r1, #5
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4622      	mov	r2, r4
 8008ab2:	1b49      	subs	r1, r1, r5
 8008ab4:	eb62 0206 	sbc.w	r2, r2, r6
 8008ab8:	f04f 0300 	mov.w	r3, #0
 8008abc:	f04f 0400 	mov.w	r4, #0
 8008ac0:	0194      	lsls	r4, r2, #6
 8008ac2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ac6:	018b      	lsls	r3, r1, #6
 8008ac8:	1a5b      	subs	r3, r3, r1
 8008aca:	eb64 0402 	sbc.w	r4, r4, r2
 8008ace:	f04f 0100 	mov.w	r1, #0
 8008ad2:	f04f 0200 	mov.w	r2, #0
 8008ad6:	00e2      	lsls	r2, r4, #3
 8008ad8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008adc:	00d9      	lsls	r1, r3, #3
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	195b      	adds	r3, r3, r5
 8008ae4:	eb44 0406 	adc.w	r4, r4, r6
 8008ae8:	f04f 0100 	mov.w	r1, #0
 8008aec:	f04f 0200 	mov.w	r2, #0
 8008af0:	02a2      	lsls	r2, r4, #10
 8008af2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008af6:	0299      	lsls	r1, r3, #10
 8008af8:	460b      	mov	r3, r1
 8008afa:	4614      	mov	r4, r2
 8008afc:	4618      	mov	r0, r3
 8008afe:	4621      	mov	r1, r4
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f04f 0400 	mov.w	r4, #0
 8008b06:	461a      	mov	r2, r3
 8008b08:	4623      	mov	r3, r4
 8008b0a:	f7f8 f8d5 	bl	8000cb8 <__aeabi_uldivmod>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	460c      	mov	r4, r1
 8008b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b14:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	0c1b      	lsrs	r3, r3, #16
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	3301      	adds	r3, #1
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b2c:	60bb      	str	r3, [r7, #8]
      break;
 8008b2e:	e002      	b.n	8008b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b30:	4b04      	ldr	r3, [pc, #16]	; (8008b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008b32:	60bb      	str	r3, [r7, #8]
      break;
 8008b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b36:	68bb      	ldr	r3, [r7, #8]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b40:	40023800 	.word	0x40023800
 8008b44:	00f42400 	.word	0x00f42400

08008b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b4c:	4b03      	ldr	r3, [pc, #12]	; (8008b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000000 	.word	0x20000000

08008b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008b64:	f7ff fff0 	bl	8008b48 <HAL_RCC_GetHCLKFreq>
 8008b68:	4601      	mov	r1, r0
 8008b6a:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	0a9b      	lsrs	r3, r3, #10
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	4a03      	ldr	r2, [pc, #12]	; (8008b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b76:	5cd3      	ldrb	r3, [r2, r3]
 8008b78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	40023800 	.word	0x40023800
 8008b84:	08017b58 	.word	0x08017b58

08008b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b8c:	f7ff ffdc 	bl	8008b48 <HAL_RCC_GetHCLKFreq>
 8008b90:	4601      	mov	r1, r0
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	0b5b      	lsrs	r3, r3, #13
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	4a03      	ldr	r2, [pc, #12]	; (8008bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b9e:	5cd3      	ldrb	r3, [r2, r3]
 8008ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	40023800 	.word	0x40023800
 8008bac:	08017b58 	.word	0x08017b58

08008bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b088      	sub	sp, #32
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00a      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008bd8:	4b66      	ldr	r3, [pc, #408]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bde:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be6:	4963      	ldr	r1, [pc, #396]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008bfa:	4b5e      	ldr	r3, [pc, #376]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c00:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	495a      	ldr	r1, [pc, #360]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10b      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d105      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d075      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008c34:	4b50      	ldr	r3, [pc, #320]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c3a:	f7fd fb1b 	bl	8006274 <HAL_GetTick>
 8008c3e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c40:	e008      	b.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c42:	f7fd fb17 	bl	8006274 <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e1dc      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008c54:	4b47      	ldr	r3, [pc, #284]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1f0      	bne.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	019a      	lsls	r2, r3, #6
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	071b      	lsls	r3, r3, #28
 8008c78:	493e      	ldr	r1, [pc, #248]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01f      	beq.n	8008ccc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008c8c:	4b39      	ldr	r3, [pc, #228]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c92:	0f1b      	lsrs	r3, r3, #28
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	019a      	lsls	r2, r3, #6
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	061b      	lsls	r3, r3, #24
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	071b      	lsls	r3, r3, #28
 8008cac:	4931      	ldr	r1, [pc, #196]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008cb4:	4b2f      	ldr	r3, [pc, #188]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cba:	f023 021f 	bic.w	r2, r3, #31
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	492b      	ldr	r1, [pc, #172]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00d      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	019a      	lsls	r2, r3, #6
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	061b      	lsls	r3, r3, #24
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	071b      	lsls	r3, r3, #28
 8008cec:	4921      	ldr	r1, [pc, #132]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008cf4:	4b20      	ldr	r3, [pc, #128]	; (8008d78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cfa:	f7fd fabb 	bl	8006274 <HAL_GetTick>
 8008cfe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d00:	e008      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d02:	f7fd fab7 	bl	8006274 <HAL_GetTick>
 8008d06:	4602      	mov	r2, r0
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	1ad3      	subs	r3, r2, r3
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d901      	bls.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e17c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d14:	4b17      	ldr	r3, [pc, #92]	; (8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0f0      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0304 	and.w	r3, r3, #4
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d112      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10c      	bne.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80ce 	beq.w	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d4e:	f040 80c8 	bne.w	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008d52:	4b0a      	ldr	r3, [pc, #40]	; (8008d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d58:	f7fd fa8c 	bl	8006274 <HAL_GetTick>
 8008d5c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d5e:	e00f      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008d60:	f7fd fa88 	bl	8006274 <HAL_GetTick>
 8008d64:	4602      	mov	r2, r0
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d908      	bls.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d6e:	2303      	movs	r3, #3
 8008d70:	e14d      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008d72:	bf00      	nop
 8008d74:	40023800 	.word	0x40023800
 8008d78:	42470068 	.word	0x42470068
 8008d7c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008d80:	4ba5      	ldr	r3, [pc, #660]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d8c:	d0e8      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0304 	and.w	r3, r3, #4
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d02e      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008d9a:	4b9f      	ldr	r3, [pc, #636]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008da0:	0c1b      	lsrs	r3, r3, #16
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	3301      	adds	r3, #1
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008dac:	4b9a      	ldr	r3, [pc, #616]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db2:	0f1b      	lsrs	r3, r3, #28
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	019a      	lsls	r2, r3, #6
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	041b      	lsls	r3, r3, #16
 8008dc8:	431a      	orrs	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	061b      	lsls	r3, r3, #24
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	071b      	lsls	r3, r3, #28
 8008dd6:	4990      	ldr	r1, [pc, #576]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008dde:	4b8e      	ldr	r3, [pc, #568]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008de4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	3b01      	subs	r3, #1
 8008dee:	021b      	lsls	r3, r3, #8
 8008df0:	4989      	ldr	r1, [pc, #548]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d02c      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008e04:	4b84      	ldr	r3, [pc, #528]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e0a:	0c1b      	lsrs	r3, r3, #16
 8008e0c:	f003 0303 	and.w	r3, r3, #3
 8008e10:	3301      	adds	r3, #1
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e16:	4b80      	ldr	r3, [pc, #512]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e1c:	0e1b      	lsrs	r3, r3, #24
 8008e1e:	f003 030f 	and.w	r3, r3, #15
 8008e22:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	019a      	lsls	r2, r3, #6
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	085b      	lsrs	r3, r3, #1
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	041b      	lsls	r3, r3, #16
 8008e32:	431a      	orrs	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	061b      	lsls	r3, r3, #24
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	071b      	lsls	r3, r3, #28
 8008e40:	4975      	ldr	r1, [pc, #468]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008e48:	4b73      	ldr	r3, [pc, #460]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	4970      	ldr	r1, [pc, #448]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d024      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008e6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e72:	d11f      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008e74:	4b68      	ldr	r3, [pc, #416]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e7a:	0e1b      	lsrs	r3, r3, #24
 8008e7c:	f003 030f 	and.w	r3, r3, #15
 8008e80:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e82:	4b65      	ldr	r3, [pc, #404]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e88:	0f1b      	lsrs	r3, r3, #28
 8008e8a:	f003 0307 	and.w	r3, r3, #7
 8008e8e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	019a      	lsls	r2, r3, #6
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	085b      	lsrs	r3, r3, #1
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	431a      	orrs	r2, r3
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	061b      	lsls	r3, r3, #24
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	071b      	lsls	r3, r3, #28
 8008eac:	495a      	ldr	r1, [pc, #360]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008eb4:	4b59      	ldr	r3, [pc, #356]	; (800901c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008eba:	f7fd f9db 	bl	8006274 <HAL_GetTick>
 8008ebe:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008ec2:	f7fd f9d7 	bl	8006274 <HAL_GetTick>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d901      	bls.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	e09c      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ed4:	4b50      	ldr	r3, [pc, #320]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ee0:	d1ef      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 8083 	beq.w	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60bb      	str	r3, [r7, #8]
 8008ef4:	4b48      	ldr	r3, [pc, #288]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	4a47      	ldr	r2, [pc, #284]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008efe:	6413      	str	r3, [r2, #64]	; 0x40
 8008f00:	4b45      	ldr	r3, [pc, #276]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f08:	60bb      	str	r3, [r7, #8]
 8008f0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008f0c:	4b44      	ldr	r3, [pc, #272]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a43      	ldr	r2, [pc, #268]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f16:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f18:	f7fd f9ac 	bl	8006274 <HAL_GetTick>
 8008f1c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f20:	f7fd f9a8 	bl	8006274 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e06d      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008f32:	4b3b      	ldr	r3, [pc, #236]	; (8009020 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f3e:	4b36      	ldr	r3, [pc, #216]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f46:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d02f      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d028      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f5c:	4b2e      	ldr	r3, [pc, #184]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f64:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f66:	4b2f      	ldr	r3, [pc, #188]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008f68:	2201      	movs	r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f6c:	4b2d      	ldr	r3, [pc, #180]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008f72:	4a29      	ldr	r2, [pc, #164]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f78:	4b27      	ldr	r3, [pc, #156]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7c:	f003 0301 	and.w	r3, r3, #1
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d114      	bne.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008f84:	f7fd f976 	bl	8006274 <HAL_GetTick>
 8008f88:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f8a:	e00a      	b.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f8c:	f7fd f972 	bl	8006274 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	69fb      	ldr	r3, [r7, #28]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e035      	b.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fa2:	4b1d      	ldr	r3, [pc, #116]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa6:	f003 0302 	and.w	r3, r3, #2
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d0ee      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008fba:	d10d      	bne.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008fbc:	4b16      	ldr	r3, [pc, #88]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fd0:	4911      	ldr	r1, [pc, #68]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	608b      	str	r3, [r1, #8]
 8008fd6:	e005      	b.n	8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8008fd8:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	4a0e      	ldr	r2, [pc, #56]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008fe2:	6093      	str	r3, [r2, #8]
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ff0:	4909      	ldr	r1, [pc, #36]	; (8009018 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0310 	and.w	r3, r3, #16
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d004      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8009008:	4b07      	ldr	r3, [pc, #28]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800900a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3720      	adds	r7, #32
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	40023800 	.word	0x40023800
 800901c:	42470070 	.word	0x42470070
 8009020:	40007000 	.word	0x40007000
 8009024:	42470e40 	.word	0x42470e40
 8009028:	424711e0 	.word	0x424711e0

0800902c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d075      	beq.n	8009130 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009044:	4ba2      	ldr	r3, [pc, #648]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f003 030c 	and.w	r3, r3, #12
 800904c:	2b04      	cmp	r3, #4
 800904e:	d00c      	beq.n	800906a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009050:	4b9f      	ldr	r3, [pc, #636]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009058:	2b08      	cmp	r3, #8
 800905a:	d112      	bne.n	8009082 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800905c:	4b9c      	ldr	r3, [pc, #624]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009068:	d10b      	bne.n	8009082 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800906a:	4b99      	ldr	r3, [pc, #612]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009072:	2b00      	cmp	r3, #0
 8009074:	d05b      	beq.n	800912e <HAL_RCC_OscConfig+0x102>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d157      	bne.n	800912e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e20b      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800908a:	d106      	bne.n	800909a <HAL_RCC_OscConfig+0x6e>
 800908c:	4b90      	ldr	r3, [pc, #576]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a8f      	ldr	r2, [pc, #572]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	e01d      	b.n	80090d6 <HAL_RCC_OscConfig+0xaa>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090a2:	d10c      	bne.n	80090be <HAL_RCC_OscConfig+0x92>
 80090a4:	4b8a      	ldr	r3, [pc, #552]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a89      	ldr	r2, [pc, #548]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	4b87      	ldr	r3, [pc, #540]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a86      	ldr	r2, [pc, #536]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ba:	6013      	str	r3, [r2, #0]
 80090bc:	e00b      	b.n	80090d6 <HAL_RCC_OscConfig+0xaa>
 80090be:	4b84      	ldr	r3, [pc, #528]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a83      	ldr	r2, [pc, #524]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	4b81      	ldr	r3, [pc, #516]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a80      	ldr	r2, [pc, #512]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090d4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d013      	beq.n	8009106 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090de:	f7fd f8c9 	bl	8006274 <HAL_GetTick>
 80090e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090e4:	e008      	b.n	80090f8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090e6:	f7fd f8c5 	bl	8006274 <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b64      	cmp	r3, #100	; 0x64
 80090f2:	d901      	bls.n	80090f8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e1d0      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090f8:	4b75      	ldr	r3, [pc, #468]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f0      	beq.n	80090e6 <HAL_RCC_OscConfig+0xba>
 8009104:	e014      	b.n	8009130 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009106:	f7fd f8b5 	bl	8006274 <HAL_GetTick>
 800910a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800910c:	e008      	b.n	8009120 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800910e:	f7fd f8b1 	bl	8006274 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b64      	cmp	r3, #100	; 0x64
 800911a:	d901      	bls.n	8009120 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e1bc      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009120:	4b6b      	ldr	r3, [pc, #428]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1f0      	bne.n	800910e <HAL_RCC_OscConfig+0xe2>
 800912c:	e000      	b.n	8009130 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800912e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d063      	beq.n	8009204 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800913c:	4b64      	ldr	r3, [pc, #400]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 030c 	and.w	r3, r3, #12
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009148:	4b61      	ldr	r3, [pc, #388]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009150:	2b08      	cmp	r3, #8
 8009152:	d11c      	bne.n	800918e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009154:	4b5e      	ldr	r3, [pc, #376]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d116      	bne.n	800918e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009160:	4b5b      	ldr	r3, [pc, #364]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_RCC_OscConfig+0x14c>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d001      	beq.n	8009178 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e190      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009178:	4b55      	ldr	r3, [pc, #340]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	4952      	ldr	r1, [pc, #328]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009188:	4313      	orrs	r3, r2
 800918a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800918c:	e03a      	b.n	8009204 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d020      	beq.n	80091d8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009196:	4b4f      	ldr	r3, [pc, #316]	; (80092d4 <HAL_RCC_OscConfig+0x2a8>)
 8009198:	2201      	movs	r2, #1
 800919a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800919c:	f7fd f86a 	bl	8006274 <HAL_GetTick>
 80091a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091a2:	e008      	b.n	80091b6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091a4:	f7fd f866 	bl	8006274 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d901      	bls.n	80091b6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e171      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091b6:	4b46      	ldr	r3, [pc, #280]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0302 	and.w	r3, r3, #2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d0f0      	beq.n	80091a4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091c2:	4b43      	ldr	r3, [pc, #268]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	493f      	ldr	r1, [pc, #252]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	600b      	str	r3, [r1, #0]
 80091d6:	e015      	b.n	8009204 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091d8:	4b3e      	ldr	r3, [pc, #248]	; (80092d4 <HAL_RCC_OscConfig+0x2a8>)
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091de:	f7fd f849 	bl	8006274 <HAL_GetTick>
 80091e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091e4:	e008      	b.n	80091f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091e6:	f7fd f845 	bl	8006274 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e150      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091f8:	4b35      	ldr	r3, [pc, #212]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0302 	and.w	r3, r3, #2
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f0      	bne.n	80091e6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0308 	and.w	r3, r3, #8
 800920c:	2b00      	cmp	r3, #0
 800920e:	d030      	beq.n	8009272 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009218:	4b2f      	ldr	r3, [pc, #188]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 800921a:	2201      	movs	r2, #1
 800921c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800921e:	f7fd f829 	bl	8006274 <HAL_GetTick>
 8009222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009224:	e008      	b.n	8009238 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009226:	f7fd f825 	bl	8006274 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d901      	bls.n	8009238 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e130      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009238:	4b25      	ldr	r3, [pc, #148]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800923a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b00      	cmp	r3, #0
 8009242:	d0f0      	beq.n	8009226 <HAL_RCC_OscConfig+0x1fa>
 8009244:	e015      	b.n	8009272 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009246:	4b24      	ldr	r3, [pc, #144]	; (80092d8 <HAL_RCC_OscConfig+0x2ac>)
 8009248:	2200      	movs	r2, #0
 800924a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800924c:	f7fd f812 	bl	8006274 <HAL_GetTick>
 8009250:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009254:	f7fd f80e 	bl	8006274 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e119      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009266:	4b1a      	ldr	r3, [pc, #104]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f0      	bne.n	8009254 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0304 	and.w	r3, r3, #4
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 809f 	beq.w	80093be <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009280:	2300      	movs	r3, #0
 8009282:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009284:	4b12      	ldr	r3, [pc, #72]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10f      	bne.n	80092b0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	4b0e      	ldr	r3, [pc, #56]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 8009296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009298:	4a0d      	ldr	r2, [pc, #52]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 800929a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800929e:	6413      	str	r3, [r2, #64]	; 0x40
 80092a0:	4b0b      	ldr	r3, [pc, #44]	; (80092d0 <HAL_RCC_OscConfig+0x2a4>)
 80092a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80092ac:	2301      	movs	r3, #1
 80092ae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092b0:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <HAL_RCC_OscConfig+0x2b0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d120      	bne.n	80092fe <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092bc:	4b07      	ldr	r3, [pc, #28]	; (80092dc <HAL_RCC_OscConfig+0x2b0>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a06      	ldr	r2, [pc, #24]	; (80092dc <HAL_RCC_OscConfig+0x2b0>)
 80092c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092c8:	f7fc ffd4 	bl	8006274 <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092ce:	e010      	b.n	80092f2 <HAL_RCC_OscConfig+0x2c6>
 80092d0:	40023800 	.word	0x40023800
 80092d4:	42470000 	.word	0x42470000
 80092d8:	42470e80 	.word	0x42470e80
 80092dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092e0:	f7fc ffc8 	bl	8006274 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d901      	bls.n	80092f2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80092ee:	2303      	movs	r3, #3
 80092f0:	e0d3      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092f2:	4b6c      	ldr	r3, [pc, #432]	; (80094a4 <HAL_RCC_OscConfig+0x478>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f0      	beq.n	80092e0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	2b01      	cmp	r3, #1
 8009304:	d106      	bne.n	8009314 <HAL_RCC_OscConfig+0x2e8>
 8009306:	4b68      	ldr	r3, [pc, #416]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	4a67      	ldr	r2, [pc, #412]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	6713      	str	r3, [r2, #112]	; 0x70
 8009312:	e01c      	b.n	800934e <HAL_RCC_OscConfig+0x322>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b05      	cmp	r3, #5
 800931a:	d10c      	bne.n	8009336 <HAL_RCC_OscConfig+0x30a>
 800931c:	4b62      	ldr	r3, [pc, #392]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 800931e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009320:	4a61      	ldr	r2, [pc, #388]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009322:	f043 0304 	orr.w	r3, r3, #4
 8009326:	6713      	str	r3, [r2, #112]	; 0x70
 8009328:	4b5f      	ldr	r3, [pc, #380]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 800932a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932c:	4a5e      	ldr	r2, [pc, #376]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 800932e:	f043 0301 	orr.w	r3, r3, #1
 8009332:	6713      	str	r3, [r2, #112]	; 0x70
 8009334:	e00b      	b.n	800934e <HAL_RCC_OscConfig+0x322>
 8009336:	4b5c      	ldr	r3, [pc, #368]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933a:	4a5b      	ldr	r2, [pc, #364]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 800933c:	f023 0301 	bic.w	r3, r3, #1
 8009340:	6713      	str	r3, [r2, #112]	; 0x70
 8009342:	4b59      	ldr	r3, [pc, #356]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009346:	4a58      	ldr	r2, [pc, #352]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009348:	f023 0304 	bic.w	r3, r3, #4
 800934c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d015      	beq.n	8009382 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009356:	f7fc ff8d 	bl	8006274 <HAL_GetTick>
 800935a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800935c:	e00a      	b.n	8009374 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800935e:	f7fc ff89 	bl	8006274 <HAL_GetTick>
 8009362:	4602      	mov	r2, r0
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	f241 3288 	movw	r2, #5000	; 0x1388
 800936c:	4293      	cmp	r3, r2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e092      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009374:	4b4c      	ldr	r3, [pc, #304]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	f003 0302 	and.w	r3, r3, #2
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0ee      	beq.n	800935e <HAL_RCC_OscConfig+0x332>
 8009380:	e014      	b.n	80093ac <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009382:	f7fc ff77 	bl	8006274 <HAL_GetTick>
 8009386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009388:	e00a      	b.n	80093a0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800938a:	f7fc ff73 	bl	8006274 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	f241 3288 	movw	r2, #5000	; 0x1388
 8009398:	4293      	cmp	r3, r2
 800939a:	d901      	bls.n	80093a0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	e07c      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80093a0:	4b41      	ldr	r3, [pc, #260]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 80093a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d1ee      	bne.n	800938a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80093ac:	7dfb      	ldrb	r3, [r7, #23]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d105      	bne.n	80093be <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093b2:	4b3d      	ldr	r3, [pc, #244]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 80093b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b6:	4a3c      	ldr	r2, [pc, #240]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 80093b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d068      	beq.n	8009498 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093c6:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	f003 030c 	and.w	r3, r3, #12
 80093ce:	2b08      	cmp	r3, #8
 80093d0:	d060      	beq.n	8009494 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d145      	bne.n	8009466 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093da:	4b34      	ldr	r3, [pc, #208]	; (80094ac <HAL_RCC_OscConfig+0x480>)
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093e0:	f7fc ff48 	bl	8006274 <HAL_GetTick>
 80093e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e6:	e008      	b.n	80093fa <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093e8:	f7fc ff44 	bl	8006274 <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e04f      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093fa:	4b2b      	ldr	r3, [pc, #172]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1f0      	bne.n	80093e8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	69da      	ldr	r2, [r3, #28]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	019b      	lsls	r3, r3, #6
 8009416:	431a      	orrs	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941c:	085b      	lsrs	r3, r3, #1
 800941e:	3b01      	subs	r3, #1
 8009420:	041b      	lsls	r3, r3, #16
 8009422:	431a      	orrs	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	061b      	lsls	r3, r3, #24
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009430:	071b      	lsls	r3, r3, #28
 8009432:	491d      	ldr	r1, [pc, #116]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009434:	4313      	orrs	r3, r2
 8009436:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009438:	4b1c      	ldr	r3, [pc, #112]	; (80094ac <HAL_RCC_OscConfig+0x480>)
 800943a:	2201      	movs	r2, #1
 800943c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943e:	f7fc ff19 	bl	8006274 <HAL_GetTick>
 8009442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009444:	e008      	b.n	8009458 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009446:	f7fc ff15 	bl	8006274 <HAL_GetTick>
 800944a:	4602      	mov	r2, r0
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	1ad3      	subs	r3, r2, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	d901      	bls.n	8009458 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e020      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009458:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0f0      	beq.n	8009446 <HAL_RCC_OscConfig+0x41a>
 8009464:	e018      	b.n	8009498 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009466:	4b11      	ldr	r3, [pc, #68]	; (80094ac <HAL_RCC_OscConfig+0x480>)
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800946c:	f7fc ff02 	bl	8006274 <HAL_GetTick>
 8009470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009472:	e008      	b.n	8009486 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009474:	f7fc fefe 	bl	8006274 <HAL_GetTick>
 8009478:	4602      	mov	r2, r0
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	2b02      	cmp	r3, #2
 8009480:	d901      	bls.n	8009486 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009482:	2303      	movs	r3, #3
 8009484:	e009      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009486:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <HAL_RCC_OscConfig+0x47c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f0      	bne.n	8009474 <HAL_RCC_OscConfig+0x448>
 8009492:	e001      	b.n	8009498 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3718      	adds	r7, #24
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	40007000 	.word	0x40007000
 80094a8:	40023800 	.word	0x40023800
 80094ac:	42470060 	.word	0x42470060

080094b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d101      	bne.n	80094c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e022      	b.n	8009508 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d105      	bne.n	80094da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7fb fcff 	bl	8004ed8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2203      	movs	r2, #3
 80094de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f814 	bl	8009510 <HAL_SD_InitCard>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e00a      	b.n	8009508 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009510:	b5b0      	push	{r4, r5, r7, lr}
 8009512:	b08e      	sub	sp, #56	; 0x38
 8009514:	af04      	add	r7, sp, #16
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009518:	2300      	movs	r3, #0
 800951a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800951c:	2300      	movs	r3, #0
 800951e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009520:	2300      	movs	r3, #0
 8009522:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009524:	2300      	movs	r3, #0
 8009526:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009528:	2300      	movs	r3, #0
 800952a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800952c:	2376      	movs	r3, #118	; 0x76
 800952e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681d      	ldr	r5, [r3, #0]
 8009534:	466c      	mov	r4, sp
 8009536:	f107 0314 	add.w	r3, r7, #20
 800953a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800953e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009542:	f107 0308 	add.w	r3, r7, #8
 8009546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009548:	4628      	mov	r0, r5
 800954a:	f003 fa87 	bl	800ca5c <SDIO_Init>
 800954e:	4603      	mov	r3, r0
 8009550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009558:	2b00      	cmp	r3, #0
 800955a:	d001      	beq.n	8009560 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e031      	b.n	80095c4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009560:	4b1a      	ldr	r3, [pc, #104]	; (80095cc <HAL_SD_InitCard+0xbc>)
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f003 fabf 	bl	800caee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009570:	4b16      	ldr	r3, [pc, #88]	; (80095cc <HAL_SD_InitCard+0xbc>)
 8009572:	2201      	movs	r2, #1
 8009574:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 ffc6 	bl	800a508 <SD_PowerON>
 800957c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00b      	beq.n	800959c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	431a      	orrs	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e013      	b.n	80095c4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fee5 	bl	800a36c <SD_InitCard>
 80095a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00b      	beq.n	80095c2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2201      	movs	r2, #1
 80095ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	431a      	orrs	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e000      	b.n	80095c4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3728      	adds	r7, #40	; 0x28
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bdb0      	pop	{r4, r5, r7, pc}
 80095cc:	422580a0 	.word	0x422580a0

080095d0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08c      	sub	sp, #48	; 0x30
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d107      	bne.n	80095f8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e0c7      	b.n	8009788 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b01      	cmp	r3, #1
 8009602:	f040 80c0 	bne.w	8009786 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800960c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	441a      	add	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009616:	429a      	cmp	r2, r3
 8009618:	d907      	bls.n	800962a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e0ae      	b.n	8009788 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2203      	movs	r2, #3
 800962e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2200      	movs	r2, #0
 8009638:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009648:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964e:	4a50      	ldr	r2, [pc, #320]	; (8009790 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	4a4f      	ldr	r2, [pc, #316]	; (8009794 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009658:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965e:	2200      	movs	r2, #0
 8009660:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3380      	adds	r3, #128	; 0x80
 800966c:	4619      	mov	r1, r3
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	025b      	lsls	r3, r3, #9
 8009674:	089b      	lsrs	r3, r3, #2
 8009676:	f7fd fbef 	bl	8006e58 <HAL_DMA_Start_IT>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d017      	beq.n	80096b0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800968e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a40      	ldr	r2, [pc, #256]	; (8009798 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e06b      	b.n	8009788 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80096b0:	4b3a      	ldr	r3, [pc, #232]	; (800979c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80096b2:	2201      	movs	r2, #1
 80096b4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d002      	beq.n	80096c4 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	025b      	lsls	r3, r3, #9
 80096c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80096cc:	4618      	mov	r0, r3
 80096ce:	f003 faa1 	bl	800cc14 <SDMMC_CmdBlockLength>
 80096d2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00f      	beq.n	80096fa <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a2e      	ldr	r2, [pc, #184]	; (8009798 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80096e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e8:	431a      	orrs	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2201      	movs	r2, #1
 80096f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e046      	b.n	8009788 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096fa:	f04f 33ff 	mov.w	r3, #4294967295
 80096fe:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	025b      	lsls	r3, r3, #9
 8009704:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009706:	2390      	movs	r3, #144	; 0x90
 8009708:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800970a:	2302      	movs	r3, #2
 800970c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800970e:	2300      	movs	r3, #0
 8009710:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009712:	2301      	movs	r3, #1
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f107 0210 	add.w	r2, r7, #16
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f003 fa4b 	bl	800cbbc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d90a      	bls.n	8009742 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2282      	movs	r2, #130	; 0x82
 8009730:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009738:	4618      	mov	r0, r3
 800973a:	f003 faaf 	bl	800cc9c <SDMMC_CmdReadMultiBlock>
 800973e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009740:	e009      	b.n	8009756 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2281      	movs	r2, #129	; 0x81
 8009746:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800974e:	4618      	mov	r0, r3
 8009750:	f003 fa82 	bl	800cc58 <SDMMC_CmdReadSingleBlock>
 8009754:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d012      	beq.n	8009782 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a0d      	ldr	r2, [pc, #52]	; (8009798 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009762:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	431a      	orrs	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2201      	movs	r2, #1
 8009774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e002      	b.n	8009788 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e000      	b.n	8009788 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009786:	2302      	movs	r3, #2
  }
}
 8009788:	4618      	mov	r0, r3
 800978a:	3730      	adds	r7, #48	; 0x30
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	0800a17b 	.word	0x0800a17b
 8009794:	0800a1ed 	.word	0x0800a1ed
 8009798:	004005ff 	.word	0x004005ff
 800979c:	4225858c 	.word	0x4225858c

080097a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08c      	sub	sp, #48	; 0x30
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d107      	bne.n	80097c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e0ca      	b.n	800995e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097ce:	b2db      	uxtb	r3, r3
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	f040 80c3 	bne.w	800995c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	441a      	add	r2, r3
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d907      	bls.n	80097fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e0b1      	b.n	800995e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2203      	movs	r2, #3
 80097fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2200      	movs	r2, #0
 8009808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f042 021a 	orr.w	r2, r2, #26
 8009818:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	4a52      	ldr	r2, [pc, #328]	; (8009968 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009820:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009826:	4a51      	ldr	r2, [pc, #324]	; (800996c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009828:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800982e:	2200      	movs	r2, #0
 8009830:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009836:	2b01      	cmp	r3, #1
 8009838:	d002      	beq.n	8009840 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	025b      	lsls	r3, r3, #9
 800983e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009848:	4618      	mov	r0, r3
 800984a:	f003 f9e3 	bl	800cc14 <SDMMC_CmdBlockLength>
 800984e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00f      	beq.n	8009876 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a45      	ldr	r2, [pc, #276]	; (8009970 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800985c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009864:	431a      	orrs	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e073      	b.n	800995e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d90a      	bls.n	8009892 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	22a0      	movs	r2, #160	; 0xa0
 8009880:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009888:	4618      	mov	r0, r3
 800988a:	f003 fa4b 	bl	800cd24 <SDMMC_CmdWriteMultiBlock>
 800988e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009890:	e009      	b.n	80098a6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2290      	movs	r2, #144	; 0x90
 8009896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800989e:	4618      	mov	r0, r3
 80098a0:	f003 fa1e 	bl	800cce0 <SDMMC_CmdWriteSingleBlock>
 80098a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80098a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d012      	beq.n	80098d2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a2f      	ldr	r2, [pc, #188]	; (8009970 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	431a      	orrs	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e045      	b.n	800995e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80098d2:	4b28      	ldr	r3, [pc, #160]	; (8009974 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 80098d4:	2201      	movs	r2, #1
 80098d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3380      	adds	r3, #128	; 0x80
 80098e4:	461a      	mov	r2, r3
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	025b      	lsls	r3, r3, #9
 80098ea:	089b      	lsrs	r3, r3, #2
 80098ec:	f7fd fab4 	bl	8006e58 <HAL_DMA_Start_IT>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d01a      	beq.n	800992c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 021a 	bic.w	r2, r2, #26
 8009904:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a19      	ldr	r2, [pc, #100]	; (8009970 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e018      	b.n	800995e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800992c:	f04f 33ff 	mov.w	r3, #4294967295
 8009930:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	025b      	lsls	r3, r3, #9
 8009936:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009938:	2390      	movs	r3, #144	; 0x90
 800993a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800993c:	2300      	movs	r3, #0
 800993e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009940:	2300      	movs	r3, #0
 8009942:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009944:	2301      	movs	r3, #1
 8009946:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f107 0210 	add.w	r2, r7, #16
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f003 f932 	bl	800cbbc <SDIO_ConfigData>

      return HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	e000      	b.n	800995e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800995c:	2302      	movs	r3, #2
  }
}
 800995e:	4618      	mov	r0, r3
 8009960:	3730      	adds	r7, #48	; 0x30
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	0800a151 	.word	0x0800a151
 800996c:	0800a1ed 	.word	0x0800a1ed
 8009970:	004005ff 	.word	0x004005ff
 8009974:	4225858c 	.word	0x4225858c

08009978 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009984:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d008      	beq.n	80099a6 <HAL_SD_IRQHandler+0x2e>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f003 0308 	and.w	r3, r3, #8
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 ffc8 	bl	800a934 <SD_Read_IT>
 80099a4:	e155      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	f000 808f 	beq.w	8009ad4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099be:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80099ce:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80099d2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f022 0201 	bic.w	r2, r2, #1
 80099e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d039      	beq.n	8009a62 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d104      	bne.n	8009a02 <HAL_SD_IRQHandler+0x8a>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f003 0320 	and.w	r3, r3, #32
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d011      	beq.n	8009a26 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4618      	mov	r0, r3
 8009a08:	f003 f9ae 	bl	800cd68 <SDMMC_CmdStopTransfer>
 8009a0c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d008      	beq.n	8009a26 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f91f 	bl	8009c64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <HAL_SD_IRQHandler+0xda>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f003 0302 	and.w	r3, r3, #2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f003 fe0c 	bl	800d670 <HAL_SD_RxCpltCallback>
 8009a58:	e0fb      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f003 fdfe 	bl	800d65c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009a60:	e0f7      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f000 80f2 	beq.w	8009c52 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f003 0320 	and.w	r3, r3, #32
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d011      	beq.n	8009a9c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f003 f973 	bl	800cd68 <SDMMC_CmdStopTransfer>
 8009a82:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d008      	beq.n	8009a9c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	431a      	orrs	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 f8e4 	bl	8009c64 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f040 80d5 	bne.w	8009c52 <HAL_SD_IRQHandler+0x2da>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f003 0302 	and.w	r3, r3, #2
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f040 80cf 	bne.w	8009c52 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0208 	bic.w	r2, r2, #8
 8009ac2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f003 fdc5 	bl	800d65c <HAL_SD_TxCpltCallback>
}
 8009ad2:	e0be      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d008      	beq.n	8009af4 <HAL_SD_IRQHandler+0x17c>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	f003 0308 	and.w	r3, r3, #8
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 ff72 	bl	800a9d6 <SD_Write_IT>
 8009af2:	e0ae      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009afa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 80a7 	beq.w	8009c52 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b16:	f043 0202 	orr.w	r2, r3, #2
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b24:	f003 0308 	and.w	r3, r3, #8
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	f043 0208 	orr.w	r2, r3, #8
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b3e:	f003 0320 	and.w	r3, r3, #32
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b4a:	f043 0220 	orr.w	r2, r3, #32
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b58:	f003 0310 	and.w	r3, r3, #16
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	f043 0210 	orr.w	r2, r3, #16
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009b84:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f003 f8ec 	bl	800cd68 <SDMMC_CmdStopTransfer>
 8009b90:	4602      	mov	r2, r0
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b96:	431a      	orrs	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00a      	beq.n	8009bbc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f855 	bl	8009c64 <HAL_SD_ErrorCallback>
}
 8009bba:	e04a      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d045      	beq.n	8009c52 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f003 0310 	and.w	r3, r3, #16
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d104      	bne.n	8009bda <HAL_SD_IRQHandler+0x262>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d011      	beq.n	8009bfe <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bde:	4a1f      	ldr	r2, [pc, #124]	; (8009c5c <HAL_SD_IRQHandler+0x2e4>)
 8009be0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fd f98e 	bl	8006f08 <HAL_DMA_Abort_IT>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d02f      	beq.n	8009c52 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fb4a 	bl	800a290 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009bfc:	e029      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d104      	bne.n	8009c12 <HAL_SD_IRQHandler+0x29a>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f003 0302 	and.w	r3, r3, #2
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d011      	beq.n	8009c36 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c16:	4a12      	ldr	r2, [pc, #72]	; (8009c60 <HAL_SD_IRQHandler+0x2e8>)
 8009c18:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fd f972 	bl	8006f08 <HAL_DMA_Abort_IT>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d013      	beq.n	8009c52 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 fb65 	bl	800a2fe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009c34:	e00d      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f003 fcfc 	bl	800d648 <HAL_SD_AbortCallback>
}
 8009c50:	e7ff      	b.n	8009c52 <HAL_SD_IRQHandler+0x2da>
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	0800a291 	.word	0x0800a291
 8009c60:	0800a2ff 	.word	0x0800a2ff

08009c64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c86:	0f9b      	lsrs	r3, r3, #30
 8009c88:	b2da      	uxtb	r2, r3
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c92:	0e9b      	lsrs	r3, r3, #26
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	f003 030f 	and.w	r3, r3, #15
 8009c9a:	b2da      	uxtb	r2, r3
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ca4:	0e1b      	lsrs	r3, r3, #24
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	f003 0303 	and.w	r3, r3, #3
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cb6:	0c1b      	lsrs	r3, r3, #16
 8009cb8:	b2da      	uxtb	r2, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cc2:	0a1b      	lsrs	r3, r3, #8
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cd8:	0d1b      	lsrs	r3, r3, #20
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ce4:	0c1b      	lsrs	r3, r3, #16
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	f003 030f 	and.w	r3, r3, #15
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009cf6:	0bdb      	lsrs	r3, r3, #15
 8009cf8:	b2db      	uxtb	r3, r3
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	b2da      	uxtb	r2, r3
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d08:	0b9b      	lsrs	r3, r3, #14
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 0301 	and.w	r3, r3, #1
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d1a:	0b5b      	lsrs	r3, r3, #13
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	b2da      	uxtb	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d2c:	0b1b      	lsrs	r3, r3, #12
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d163      	bne.n	8009e10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d4c:	009a      	lsls	r2, r3, #2
 8009d4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009d52:	4013      	ands	r3, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009d58:	0f92      	lsrs	r2, r2, #30
 8009d5a:	431a      	orrs	r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d64:	0edb      	lsrs	r3, r3, #27
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d76:	0e1b      	lsrs	r3, r3, #24
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d88:	0d5b      	lsrs	r3, r3, #21
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	f003 0307 	and.w	r3, r3, #7
 8009d90:	b2da      	uxtb	r2, r3
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d9a:	0c9b      	lsrs	r3, r3, #18
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dac:	0bdb      	lsrs	r3, r3, #15
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f003 0307 	and.w	r3, r3, #7
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	1c5a      	adds	r2, r3, #1
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	7e1b      	ldrb	r3, [r3, #24]
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	f003 0307 	and.w	r3, r3, #7
 8009dce:	3302      	adds	r3, #2
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd6:	687a      	ldr	r2, [r7, #4]
 8009dd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009dda:	fb02 f203 	mul.w	r2, r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	7a1b      	ldrb	r3, [r3, #8]
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f003 030f 	and.w	r3, r3, #15
 8009dec:	2201      	movs	r2, #1
 8009dee:	409a      	lsls	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009dfc:	0a52      	lsrs	r2, r2, #9
 8009dfe:	fb02 f203 	mul.w	r2, r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e0c:	661a      	str	r2, [r3, #96]	; 0x60
 8009e0e:	e031      	b.n	8009e74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d11d      	bne.n	8009e54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e1c:	041b      	lsls	r3, r3, #16
 8009e1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e26:	0c1b      	lsrs	r3, r3, #16
 8009e28:	431a      	orrs	r2, r3
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	3301      	adds	r3, #1
 8009e34:	029a      	lsls	r2, r3, #10
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e48:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	661a      	str	r2, [r3, #96]	; 0x60
 8009e52:	e00f      	b.n	8009e74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a58      	ldr	r2, [pc, #352]	; (8009fbc <HAL_SD_GetCardCSD+0x344>)
 8009e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e09d      	b.n	8009fb0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e78:	0b9b      	lsrs	r3, r3, #14
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 0301 	and.w	r3, r3, #1
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e8a:	09db      	lsrs	r3, r3, #7
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eac:	0fdb      	lsrs	r3, r3, #31
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eb8:	0f5b      	lsrs	r3, r3, #29
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 0303 	and.w	r3, r3, #3
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eca:	0e9b      	lsrs	r3, r3, #26
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009edc:	0d9b      	lsrs	r3, r3, #22
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 030f 	and.w	r3, r3, #15
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eee:	0d5b      	lsrs	r3, r3, #21
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0a:	0c1b      	lsrs	r3, r3, #16
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f003 0301 	and.w	r3, r3, #1
 8009f12:	b2da      	uxtb	r2, r3
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1e:	0bdb      	lsrs	r3, r3, #15
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f32:	0b9b      	lsrs	r3, r3, #14
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	f003 0301 	and.w	r3, r3, #1
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	0b5b      	lsrs	r3, r3, #13
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	b2da      	uxtb	r2, r3
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5a:	0b1b      	lsrs	r3, r3, #12
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	f003 0301 	and.w	r3, r3, #1
 8009f62:	b2da      	uxtb	r2, r3
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	0a9b      	lsrs	r3, r3, #10
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	f003 0303 	and.w	r3, r3, #3
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f82:	0a1b      	lsrs	r3, r3, #8
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	f003 0303 	and.w	r3, r3, #3
 8009f8a:	b2da      	uxtb	r2, r3
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f96:	085b      	lsrs	r3, r3, #1
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	2201      	movs	r2, #1
 8009faa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr
 8009fbc:	004005ff 	.word	0x004005ff

08009fc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a018:	b5b0      	push	{r4, r5, r7, lr}
 800a01a:	b08e      	sub	sp, #56	; 0x38
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2203      	movs	r2, #3
 800a026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a02e:	2b03      	cmp	r3, #3
 800a030:	d02e      	beq.n	800a090 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a038:	d106      	bne.n	800a048 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	639a      	str	r2, [r3, #56]	; 0x38
 800a046:	e029      	b.n	800a09c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a04e:	d10a      	bne.n	800a066 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 fb0f 	bl	800a674 <SD_WideBus_Enable>
 800a056:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	431a      	orrs	r2, r3
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	639a      	str	r2, [r3, #56]	; 0x38
 800a064:	e01a      	b.n	800a09c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d10a      	bne.n	800a082 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 fb4c 	bl	800a70a <SD_WideBus_Disable>
 800a072:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38
 800a080:	e00c      	b.n	800a09c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
 800a08e:	e005      	b.n	800a09c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a094:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d009      	beq.n	800a0b8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a18      	ldr	r2, [pc, #96]	; (800a10c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a0aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e024      	b.n	800a102 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	68db      	ldr	r3, [r3, #12]
 800a0c8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	695b      	ldr	r3, [r3, #20]
 800a0d2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681d      	ldr	r5, [r3, #0]
 800a0de:	466c      	mov	r4, sp
 800a0e0:	f107 0318 	add.w	r3, r7, #24
 800a0e4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a0ec:	f107 030c 	add.w	r3, r7, #12
 800a0f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f002 fcb2 	bl	800ca5c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3728      	adds	r7, #40	; 0x28
 800a106:	46bd      	mov	sp, r7
 800a108:	bdb0      	pop	{r4, r5, r7, pc}
 800a10a:	bf00      	nop
 800a10c:	004005ff 	.word	0x004005ff

0800a110 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b086      	sub	sp, #24
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a11c:	f107 030c 	add.w	r3, r7, #12
 800a120:	4619      	mov	r1, r3
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa7e 	bl	800a624 <SD_SendStatus>
 800a128:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d005      	beq.n	800a13c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	431a      	orrs	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	0a5b      	lsrs	r3, r3, #9
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a146:	693b      	ldr	r3, [r7, #16]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a16c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a16e:	bf00      	nop
 800a170:	3714      	adds	r7, #20
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a186:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	2b82      	cmp	r3, #130	; 0x82
 800a18e:	d111      	bne.n	800a1b4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4618      	mov	r0, r3
 800a196:	f002 fde7 	bl	800cd68 <SDMMC_CmdStopTransfer>
 800a19a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f7ff fd58 	bl	8009c64 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f022 0208 	bic.w	r2, r2, #8
 800a1c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f240 523a 	movw	r2, #1338	; 0x53a
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f003 fa47 	bl	800d670 <HAL_SD_RxCpltCallback>
#endif
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
	...

0800a1ec <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7fd f830 	bl	8007260 <HAL_DMA_GetError>
 800a200:	4603      	mov	r3, r0
 800a202:	2b02      	cmp	r3, #2
 800a204:	d03e      	beq.n	800a284 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a214:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d002      	beq.n	800a222 <SD_DMAError+0x36>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d12d      	bne.n	800a27e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a19      	ldr	r2, [pc, #100]	; (800a28c <SD_DMAError+0xa0>)
 800a228:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a238:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a246:	6978      	ldr	r0, [r7, #20]
 800a248:	f7ff ff62 	bl	800a110 <HAL_SD_GetCardState>
 800a24c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	2b06      	cmp	r3, #6
 800a252:	d002      	beq.n	800a25a <SD_DMAError+0x6e>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b05      	cmp	r3, #5
 800a258:	d10a      	bne.n	800a270 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f002 fd82 	bl	800cd68 <SDMMC_CmdStopTransfer>
 800a264:	4602      	mov	r2, r0
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a26a:	431a      	orrs	r2, r3
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2200      	movs	r2, #0
 800a27c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a27e:	6978      	ldr	r0, [r7, #20]
 800a280:	f7ff fcf0 	bl	8009c64 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a284:	bf00      	nop
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	004005ff 	.word	0x004005ff

0800a290 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a29c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f240 523a 	movw	r2, #1338	; 0x53a
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff ff31 	bl	800a110 <HAL_SD_GetCardState>
 800a2ae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2b06      	cmp	r3, #6
 800a2c2:	d002      	beq.n	800a2ca <SD_DMATxAbort+0x3a>
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	d10a      	bne.n	800a2e0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f002 fd4a 	bl	800cd68 <SDMMC_CmdStopTransfer>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d103      	bne.n	800a2f0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f003 f9ad 	bl	800d648 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a2ee:	e002      	b.n	800a2f6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f7ff fcb7 	bl	8009c64 <HAL_SD_ErrorCallback>
}
 800a2f6:	bf00      	nop
 800a2f8:	3710      	adds	r7, #16
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f240 523a 	movw	r2, #1338	; 0x53a
 800a314:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f7ff fefa 	bl	800a110 <HAL_SD_GetCardState>
 800a31c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2201      	movs	r2, #1
 800a322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2b06      	cmp	r3, #6
 800a330:	d002      	beq.n	800a338 <SD_DMARxAbort+0x3a>
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b05      	cmp	r3, #5
 800a336:	d10a      	bne.n	800a34e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4618      	mov	r0, r3
 800a33e:	f002 fd13 	bl	800cd68 <SDMMC_CmdStopTransfer>
 800a342:	4602      	mov	r2, r0
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	431a      	orrs	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a352:	2b00      	cmp	r3, #0
 800a354:	d103      	bne.n	800a35e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f003 f976 	bl	800d648 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a35c:	e002      	b.n	800a364 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff fc80 	bl	8009c64 <HAL_SD_ErrorCallback>
}
 800a364:	bf00      	nop
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a36c:	b5b0      	push	{r4, r5, r7, lr}
 800a36e:	b094      	sub	sp, #80	; 0x50
 800a370:	af04      	add	r7, sp, #16
 800a372:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a374:	2301      	movs	r3, #1
 800a376:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f002 fbc5 	bl	800cb0c <SDIO_GetPowerState>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d102      	bne.n	800a38e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a388:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a38c:	e0b7      	b.n	800a4fe <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a392:	2b03      	cmp	r3, #3
 800a394:	d02f      	beq.n	800a3f6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f002 fdee 	bl	800cf7c <SDMMC_CmdSendCID>
 800a3a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d001      	beq.n	800a3ac <SD_InitCard+0x40>
    {
      return errorstate;
 800a3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3aa:	e0a8      	b.n	800a4fe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 fbef 	bl	800cb96 <SDIO_GetResponse>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	2104      	movs	r1, #4
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f002 fbe6 	bl	800cb96 <SDIO_GetResponse>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2108      	movs	r1, #8
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f002 fbdd 	bl	800cb96 <SDIO_GetResponse>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	210c      	movs	r1, #12
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f002 fbd4 	bl	800cb96 <SDIO_GetResponse>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d00d      	beq.n	800a41a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f107 020e 	add.w	r2, r7, #14
 800a406:	4611      	mov	r1, r2
 800a408:	4618      	mov	r0, r3
 800a40a:	f002 fdf4 	bl	800cff6 <SDMMC_CmdSetRelAdd>
 800a40e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <SD_InitCard+0xae>
    {
      return errorstate;
 800a416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a418:	e071      	b.n	800a4fe <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d036      	beq.n	800a490 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a422:	89fb      	ldrh	r3, [r7, #14]
 800a424:	461a      	mov	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a432:	041b      	lsls	r3, r3, #16
 800a434:	4619      	mov	r1, r3
 800a436:	4610      	mov	r0, r2
 800a438:	f002 fdbe 	bl	800cfb8 <SDMMC_CmdSendCSD>
 800a43c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	2b00      	cmp	r3, #0
 800a442:	d001      	beq.n	800a448 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a446:	e05a      	b.n	800a4fe <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2100      	movs	r1, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f002 fba1 	bl	800cb96 <SDIO_GetResponse>
 800a454:	4602      	mov	r2, r0
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2104      	movs	r1, #4
 800a460:	4618      	mov	r0, r3
 800a462:	f002 fb98 	bl	800cb96 <SDIO_GetResponse>
 800a466:	4602      	mov	r2, r0
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2108      	movs	r1, #8
 800a472:	4618      	mov	r0, r3
 800a474:	f002 fb8f 	bl	800cb96 <SDIO_GetResponse>
 800a478:	4602      	mov	r2, r0
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	210c      	movs	r1, #12
 800a484:	4618      	mov	r0, r3
 800a486:	f002 fb86 	bl	800cb96 <SDIO_GetResponse>
 800a48a:	4602      	mov	r2, r0
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2104      	movs	r1, #4
 800a496:	4618      	mov	r0, r3
 800a498:	f002 fb7d 	bl	800cb96 <SDIO_GetResponse>
 800a49c:	4603      	mov	r3, r0
 800a49e:	0d1a      	lsrs	r2, r3, #20
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a4a4:	f107 0310 	add.w	r3, r7, #16
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff fbe4 	bl	8009c78 <HAL_SD_GetCardCSD>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a4b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4ba:	e020      	b.n	800a4fe <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6819      	ldr	r1, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c4:	041b      	lsls	r3, r3, #16
 800a4c6:	f04f 0400 	mov.w	r4, #0
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	4623      	mov	r3, r4
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	f002 fc6c 	bl	800cdac <SDMMC_CmdSelDesel>
 800a4d4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <SD_InitCard+0x174>
  {
    return errorstate;
 800a4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4de:	e00e      	b.n	800a4fe <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681d      	ldr	r5, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	466c      	mov	r4, sp
 800a4e8:	f103 0210 	add.w	r2, r3, #16
 800a4ec:	ca07      	ldmia	r2, {r0, r1, r2}
 800a4ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	f002 fab0 	bl	800ca5c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3740      	adds	r7, #64	; 0x40
 800a502:	46bd      	mov	sp, r7
 800a504:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a508 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a510:	2300      	movs	r3, #0
 800a512:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	2300      	movs	r3, #0
 800a51a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4618      	mov	r0, r3
 800a522:	f002 fc66 	bl	800cdf2 <SDMMC_CmdGoIdleState>
 800a526:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	e072      	b.n	800a618 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4618      	mov	r0, r3
 800a538:	f002 fc79 	bl	800ce2e <SDMMC_CmdOperCond>
 800a53c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00d      	beq.n	800a560 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4618      	mov	r0, r3
 800a550:	f002 fc4f 	bl	800cdf2 <SDMMC_CmdGoIdleState>
 800a554:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d004      	beq.n	800a566 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	e05b      	b.n	800a618 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d137      	bne.n	800a5de <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2100      	movs	r1, #0
 800a574:	4618      	mov	r0, r3
 800a576:	f002 fc79 	bl	800ce6c <SDMMC_CmdAppCommand>
 800a57a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d02d      	beq.n	800a5de <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a582:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a586:	e047      	b.n	800a618 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2100      	movs	r1, #0
 800a58e:	4618      	mov	r0, r3
 800a590:	f002 fc6c 	bl	800ce6c <SDMMC_CmdAppCommand>
 800a594:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <SD_PowerON+0x98>
    {
      return errorstate;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	e03b      	b.n	800a618 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	491e      	ldr	r1, [pc, #120]	; (800a620 <SD_PowerON+0x118>)
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f002 fc82 	bl	800ceb0 <SDMMC_CmdAppOperCommand>
 800a5ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a5b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a5b8:	e02e      	b.n	800a618 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2100      	movs	r1, #0
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f002 fae8 	bl	800cb96 <SDIO_GetResponse>
 800a5c6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	0fdb      	lsrs	r3, r3, #31
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d101      	bne.n	800a5d4 <SD_PowerON+0xcc>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e000      	b.n	800a5d6 <SD_PowerON+0xce>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	613b      	str	r3, [r7, #16]

    count++;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d802      	bhi.n	800a5ee <SD_PowerON+0xe6>
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0cc      	beq.n	800a588 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d902      	bls.n	800a5fe <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a5f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a5fc:	e00c      	b.n	800a618 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	645a      	str	r2, [r3, #68]	; 0x44
 800a60e:	e002      	b.n	800a616 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3718      	adds	r7, #24
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	c1100000 	.word	0xc1100000

0800a624 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d102      	bne.n	800a63a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a634:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a638:	e018      	b.n	800a66c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a642:	041b      	lsls	r3, r3, #16
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f002 fcf6 	bl	800d038 <SDMMC_CmdSendStatus>
 800a64c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	e009      	b.n	800a66c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2100      	movs	r1, #0
 800a65e:	4618      	mov	r0, r3
 800a660:	f002 fa99 	bl	800cb96 <SDIO_GetResponse>
 800a664:	4602      	mov	r2, r0
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3710      	adds	r7, #16
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a67c:	2300      	movs	r3, #0
 800a67e:	60fb      	str	r3, [r7, #12]
 800a680:	2300      	movs	r3, #0
 800a682:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f002 fa83 	bl	800cb96 <SDIO_GetResponse>
 800a690:	4603      	mov	r3, r0
 800a692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a69a:	d102      	bne.n	800a6a2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a69c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a6a0:	e02f      	b.n	800a702 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a6a2:	f107 030c 	add.w	r3, r7, #12
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f879 	bl	800a7a0 <SD_FindSCR>
 800a6ae:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	e023      	b.n	800a702 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d01c      	beq.n	800a6fe <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6cc:	041b      	lsls	r3, r3, #16
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	f002 fbcb 	bl	800ce6c <SDMMC_CmdAppCommand>
 800a6d6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	e00f      	b.n	800a702 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2102      	movs	r1, #2
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f002 fc04 	bl	800cef6 <SDMMC_CmdBusWidth>
 800a6ee:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	e003      	b.n	800a702 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	e001      	b.n	800a702 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a6fe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b086      	sub	sp, #24
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a712:	2300      	movs	r3, #0
 800a714:	60fb      	str	r3, [r7, #12]
 800a716:	2300      	movs	r3, #0
 800a718:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2100      	movs	r1, #0
 800a720:	4618      	mov	r0, r3
 800a722:	f002 fa38 	bl	800cb96 <SDIO_GetResponse>
 800a726:	4603      	mov	r3, r0
 800a728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a72c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a730:	d102      	bne.n	800a738 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a732:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a736:	e02f      	b.n	800a798 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a738:	f107 030c 	add.w	r3, r7, #12
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f82e 	bl	800a7a0 <SD_FindSCR>
 800a744:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d001      	beq.n	800a750 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	e023      	b.n	800a798 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d01c      	beq.n	800a794 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a762:	041b      	lsls	r3, r3, #16
 800a764:	4619      	mov	r1, r3
 800a766:	4610      	mov	r0, r2
 800a768:	f002 fb80 	bl	800ce6c <SDMMC_CmdAppCommand>
 800a76c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	e00f      	b.n	800a798 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f002 fbb9 	bl	800cef6 <SDMMC_CmdBusWidth>
 800a784:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	e003      	b.n	800a798 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a790:	2300      	movs	r3, #0
 800a792:	e001      	b.n	800a798 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a794:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3718      	adds	r7, #24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a7a0:	b590      	push	{r4, r7, lr}
 800a7a2:	b08f      	sub	sp, #60	; 0x3c
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a7aa:	f7fb fd63 	bl	8006274 <HAL_GetTick>
 800a7ae:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60bb      	str	r3, [r7, #8]
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2108      	movs	r1, #8
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f002 fa24 	bl	800cc14 <SDMMC_CmdBlockLength>
 800a7cc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	e0a9      	b.n	800a92c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7e0:	041b      	lsls	r3, r3, #16
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	4610      	mov	r0, r2
 800a7e6:	f002 fb41 	bl	800ce6c <SDMMC_CmdAppCommand>
 800a7ea:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d001      	beq.n	800a7f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f4:	e09a      	b.n	800a92c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7fa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a800:	2330      	movs	r3, #48	; 0x30
 800a802:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a804:	2302      	movs	r3, #2
 800a806:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a808:	2300      	movs	r3, #0
 800a80a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a80c:	2301      	movs	r3, #1
 800a80e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f107 0210 	add.w	r2, r7, #16
 800a818:	4611      	mov	r1, r2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 f9ce 	bl	800cbbc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f002 fb88 	bl	800cf3a <SDMMC_CmdSendSCR>
 800a82a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d022      	beq.n	800a878 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a834:	e07a      	b.n	800a92c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d00e      	beq.n	800a862 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6819      	ldr	r1, [r3, #0]
 800a848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	f107 0208 	add.w	r2, r7, #8
 800a850:	18d4      	adds	r4, r2, r3
 800a852:	4608      	mov	r0, r1
 800a854:	f002 f92d 	bl	800cab2 <SDIO_ReadFIFO>
 800a858:	4603      	mov	r3, r0
 800a85a:	6023      	str	r3, [r4, #0]
      index++;
 800a85c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a85e:	3301      	adds	r3, #1
 800a860:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a862:	f7fb fd07 	bl	8006274 <HAL_GetTick>
 800a866:	4602      	mov	r2, r0
 800a868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a870:	d102      	bne.n	800a878 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a872:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a876:	e059      	b.n	800a92c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a87e:	f240 432a 	movw	r3, #1066	; 0x42a
 800a882:	4013      	ands	r3, r2
 800a884:	2b00      	cmp	r3, #0
 800a886:	d0d6      	beq.n	800a836 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88e:	f003 0308 	and.w	r3, r3, #8
 800a892:	2b00      	cmp	r3, #0
 800a894:	d005      	beq.n	800a8a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2208      	movs	r2, #8
 800a89c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a89e:	2308      	movs	r3, #8
 800a8a0:	e044      	b.n	800a92c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2202      	movs	r2, #2
 800a8b6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8b8:	2302      	movs	r3, #2
 800a8ba:	e037      	b.n	800a92c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8c2:	f003 0320 	and.w	r3, r3, #32
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d005      	beq.n	800a8d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a8d2:	2320      	movs	r3, #32
 800a8d4:	e02a      	b.n	800a92c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f240 523a 	movw	r2, #1338	; 0x53a
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	061a      	lsls	r2, r3, #24
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	021b      	lsls	r3, r3, #8
 800a8e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8ec:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	0a1b      	lsrs	r3, r3, #8
 800a8f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a8f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	0e1b      	lsrs	r3, r3, #24
 800a8fc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a8fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a900:	601a      	str	r2, [r3, #0]
    scr++;
 800a902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a904:	3304      	adds	r3, #4
 800a906:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	061a      	lsls	r2, r3, #24
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a914:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	0a1b      	lsrs	r3, r3, #8
 800a91a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a91e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	0e1b      	lsrs	r3, r3, #24
 800a924:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a92a:	2300      	movs	r3, #0
}
 800a92c:	4618      	mov	r0, r3
 800a92e:	373c      	adds	r7, #60	; 0x3c
 800a930:	46bd      	mov	sp, r7
 800a932:	bd90      	pop	{r4, r7, pc}

0800a934 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a940:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a946:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d03f      	beq.n	800a9ce <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a94e:	2300      	movs	r3, #0
 800a950:	617b      	str	r3, [r7, #20]
 800a952:	e033      	b.n	800a9bc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4618      	mov	r0, r3
 800a95a:	f002 f8aa 	bl	800cab2 <SDIO_ReadFIFO>
 800a95e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	b2da      	uxtb	r2, r3
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	3301      	adds	r3, #1
 800a96c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	3b01      	subs	r3, #1
 800a972:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	3b01      	subs	r3, #1
 800a988:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	0c1b      	lsrs	r3, r3, #16
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	3301      	adds	r3, #1
 800a998:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	3b01      	subs	r3, #1
 800a99e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	0e1b      	lsrs	r3, r3, #24
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	617b      	str	r3, [r7, #20]
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b07      	cmp	r3, #7
 800a9c0:	d9c8      	bls.n	800a954 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	693a      	ldr	r2, [r7, #16]
 800a9cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a9ce:	bf00      	nop
 800a9d0:	3718      	adds	r7, #24
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b086      	sub	sp, #24
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d043      	beq.n	800aa78 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	e037      	b.n	800aa66 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	021a      	lsls	r2, r3, #8
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	3301      	adds	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	041a      	lsls	r2, r3, #16
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	3301      	adds	r3, #1
 800aa30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	061a      	lsls	r2, r3, #24
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f107 0208 	add.w	r2, r7, #8
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f002 f836 	bl	800cacc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	3301      	adds	r3, #1
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b07      	cmp	r3, #7
 800aa6a:	d9c4      	bls.n	800a9f6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800aa78:	bf00      	nop
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e056      	b.n	800ab40 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d106      	bne.n	800aab2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7fa fb05 	bl	80050bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2202      	movs	r2, #2
 800aab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aac8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	685a      	ldr	r2, [r3, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	431a      	orrs	r2, r3
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	431a      	orrs	r2, r3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	695b      	ldr	r3, [r3, #20]
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	699b      	ldr	r3, [r3, #24]
 800aaea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a1b      	ldr	r3, [r3, #32]
 800aafa:	ea42 0103 	orr.w	r1, r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	430a      	orrs	r2, r1
 800ab08:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	699b      	ldr	r3, [r3, #24]
 800ab0e:	0c1b      	lsrs	r3, r3, #16
 800ab10:	f003 0104 	and.w	r1, r3, #4
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	69da      	ldr	r2, [r3, #28]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	603b      	str	r3, [r7, #0]
 800ab54:	4613      	mov	r3, r2
 800ab56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d101      	bne.n	800ab6a <HAL_SPI_Transmit+0x22>
 800ab66:	2302      	movs	r3, #2
 800ab68:	e11e      	b.n	800ada8 <HAL_SPI_Transmit+0x260>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab72:	f7fb fb7f 	bl	8006274 <HAL_GetTick>
 800ab76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ab78:	88fb      	ldrh	r3, [r7, #6]
 800ab7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d002      	beq.n	800ab8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab8c:	e103      	b.n	800ad96 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <HAL_SPI_Transmit+0x52>
 800ab94:	88fb      	ldrh	r3, [r7, #6]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d102      	bne.n	800aba0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ab9e:	e0fa      	b.n	800ad96 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2203      	movs	r2, #3
 800aba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68ba      	ldr	r2, [r7, #8]
 800abb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	88fa      	ldrh	r2, [r7, #6]
 800abb8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	88fa      	ldrh	r2, [r7, #6]
 800abbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	2200      	movs	r2, #0
 800abc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2200      	movs	r2, #0
 800abd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2200      	movs	r2, #0
 800abdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abe6:	d107      	bne.n	800abf8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	681a      	ldr	r2, [r3, #0]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abf6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac02:	2b40      	cmp	r3, #64	; 0x40
 800ac04:	d007      	beq.n	800ac16 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac1e:	d14b      	bne.n	800acb8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d002      	beq.n	800ac2e <HAL_SPI_Transmit+0xe6>
 800ac28:	8afb      	ldrh	r3, [r7, #22]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d13e      	bne.n	800acac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	881a      	ldrh	r2, [r3, #0]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3e:	1c9a      	adds	r2, r3, #2
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ac52:	e02b      	b.n	800acac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d112      	bne.n	800ac88 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac66:	881a      	ldrh	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	1c9a      	adds	r2, r3, #2
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	86da      	strh	r2, [r3, #54]	; 0x36
 800ac86:	e011      	b.n	800acac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac88:	f7fb faf4 	bl	8006274 <HAL_GetTick>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	683a      	ldr	r2, [r7, #0]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d803      	bhi.n	800aca0 <HAL_SPI_Transmit+0x158>
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac9e:	d102      	bne.n	800aca6 <HAL_SPI_Transmit+0x15e>
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d102      	bne.n	800acac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800aca6:	2303      	movs	r3, #3
 800aca8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800acaa:	e074      	b.n	800ad96 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1ce      	bne.n	800ac54 <HAL_SPI_Transmit+0x10c>
 800acb6:	e04c      	b.n	800ad52 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <HAL_SPI_Transmit+0x17e>
 800acc0:	8afb      	ldrh	r3, [r7, #22]
 800acc2:	2b01      	cmp	r3, #1
 800acc4:	d140      	bne.n	800ad48 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	330c      	adds	r3, #12
 800acd0:	7812      	ldrb	r2, [r2, #0]
 800acd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd8:	1c5a      	adds	r2, r3, #1
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800acec:	e02c      	b.n	800ad48 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f003 0302 	and.w	r3, r3, #2
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	d113      	bne.n	800ad24 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	330c      	adds	r3, #12
 800ad06:	7812      	ldrb	r2, [r2, #0]
 800ad08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad0e:	1c5a      	adds	r2, r3, #1
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	86da      	strh	r2, [r3, #54]	; 0x36
 800ad22:	e011      	b.n	800ad48 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad24:	f7fb faa6 	bl	8006274 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	683a      	ldr	r2, [r7, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d803      	bhi.n	800ad3c <HAL_SPI_Transmit+0x1f4>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d102      	bne.n	800ad42 <HAL_SPI_Transmit+0x1fa>
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d102      	bne.n	800ad48 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ad42:	2303      	movs	r3, #3
 800ad44:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ad46:	e026      	b.n	800ad96 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1cd      	bne.n	800acee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	f000 fba4 	bl	800b4a4 <SPI_EndRxTxTransaction>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2220      	movs	r2, #32
 800ad66:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad70:	2300      	movs	r3, #0
 800ad72:	613b      	str	r3, [r7, #16]
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	613b      	str	r3, [r7, #16]
 800ad84:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	77fb      	strb	r3, [r7, #31]
 800ad92:	e000      	b.n	800ad96 <HAL_SPI_Transmit+0x24e>
  }

error:
 800ad94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ada6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3720      	adds	r7, #32
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b088      	sub	sp, #32
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	4613      	mov	r3, r2
 800adbe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800adcc:	d112      	bne.n	800adf4 <HAL_SPI_Receive+0x44>
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d10e      	bne.n	800adf4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2204      	movs	r2, #4
 800adda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800adde:	88fa      	ldrh	r2, [r7, #6]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	4613      	mov	r3, r2
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 f8e9 	bl	800afc2 <HAL_SPI_TransmitReceive>
 800adf0:	4603      	mov	r3, r0
 800adf2:	e0e2      	b.n	800afba <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d101      	bne.n	800ae02 <HAL_SPI_Receive+0x52>
 800adfe:	2302      	movs	r3, #2
 800ae00:	e0db      	b.n	800afba <HAL_SPI_Receive+0x20a>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae0a:	f7fb fa33 	bl	8006274 <HAL_GetTick>
 800ae0e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d002      	beq.n	800ae22 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ae20:	e0c2      	b.n	800afa8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <HAL_SPI_Receive+0x7e>
 800ae28:	88fb      	ldrh	r3, [r7, #6]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d102      	bne.n	800ae34 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ae32:	e0b9      	b.n	800afa8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2204      	movs	r2, #4
 800ae38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	88fa      	ldrh	r2, [r7, #6]
 800ae4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	88fa      	ldrh	r2, [r7, #6]
 800ae52:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae7a:	d107      	bne.n	800ae8c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ae8a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae96:	2b40      	cmp	r3, #64	; 0x40
 800ae98:	d007      	beq.n	800aeaa <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aea8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d162      	bne.n	800af78 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aeb2:	e02e      	b.n	800af12 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d115      	bne.n	800aeee <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f103 020c 	add.w	r2, r3, #12
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aece:	7812      	ldrb	r2, [r2, #0]
 800aed0:	b2d2      	uxtb	r2, r2
 800aed2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aeec:	e011      	b.n	800af12 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aeee:	f7fb f9c1 	bl	8006274 <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d803      	bhi.n	800af06 <HAL_SPI_Receive+0x156>
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af04:	d102      	bne.n	800af0c <HAL_SPI_Receive+0x15c>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800af0c:	2303      	movs	r3, #3
 800af0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800af10:	e04a      	b.n	800afa8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af16:	b29b      	uxth	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1cb      	bne.n	800aeb4 <HAL_SPI_Receive+0x104>
 800af1c:	e031      	b.n	800af82 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f003 0301 	and.w	r3, r3, #1
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d113      	bne.n	800af54 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	68da      	ldr	r2, [r3, #12]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af36:	b292      	uxth	r2, r2
 800af38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3e:	1c9a      	adds	r2, r3, #2
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af48:	b29b      	uxth	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af52:	e011      	b.n	800af78 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af54:	f7fb f98e 	bl	8006274 <HAL_GetTick>
 800af58:	4602      	mov	r2, r0
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	1ad3      	subs	r3, r2, r3
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	429a      	cmp	r2, r3
 800af62:	d803      	bhi.n	800af6c <HAL_SPI_Receive+0x1bc>
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6a:	d102      	bne.n	800af72 <HAL_SPI_Receive+0x1c2>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800af72:	2303      	movs	r3, #3
 800af74:	75fb      	strb	r3, [r7, #23]
          goto error;
 800af76:	e017      	b.n	800afa8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1cd      	bne.n	800af1e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 fa27 	bl	800b3da <SPI_EndRxTransaction>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2220      	movs	r2, #32
 800af96:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d002      	beq.n	800afa6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	75fb      	strb	r3, [r7, #23]
 800afa4:	e000      	b.n	800afa8 <HAL_SPI_Receive+0x1f8>
  }

error :
 800afa6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800afb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b08c      	sub	sp, #48	; 0x30
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
 800afce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800afd0:	2301      	movs	r3, #1
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afe0:	2b01      	cmp	r3, #1
 800afe2:	d101      	bne.n	800afe8 <HAL_SPI_TransmitReceive+0x26>
 800afe4:	2302      	movs	r3, #2
 800afe6:	e18a      	b.n	800b2fe <HAL_SPI_TransmitReceive+0x33c>
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2201      	movs	r2, #1
 800afec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aff0:	f7fb f940 	bl	8006274 <HAL_GetTick>
 800aff4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800affc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b006:	887b      	ldrh	r3, [r7, #2]
 800b008:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b00a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b00e:	2b01      	cmp	r3, #1
 800b010:	d00f      	beq.n	800b032 <HAL_SPI_TransmitReceive+0x70>
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b018:	d107      	bne.n	800b02a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d103      	bne.n	800b02a <HAL_SPI_TransmitReceive+0x68>
 800b022:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b026:	2b04      	cmp	r3, #4
 800b028:	d003      	beq.n	800b032 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b02a:	2302      	movs	r3, #2
 800b02c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b030:	e15b      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d005      	beq.n	800b044 <HAL_SPI_TransmitReceive+0x82>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d002      	beq.n	800b044 <HAL_SPI_TransmitReceive+0x82>
 800b03e:	887b      	ldrh	r3, [r7, #2]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d103      	bne.n	800b04c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b044:	2301      	movs	r3, #1
 800b046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b04a:	e14e      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b052:	b2db      	uxtb	r3, r3
 800b054:	2b04      	cmp	r3, #4
 800b056:	d003      	beq.n	800b060 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2205      	movs	r2, #5
 800b05c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	887a      	ldrh	r2, [r7, #2]
 800b070:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	887a      	ldrh	r2, [r7, #2]
 800b076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	68ba      	ldr	r2, [r7, #8]
 800b07c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	887a      	ldrh	r2, [r7, #2]
 800b082:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	887a      	ldrh	r2, [r7, #2]
 800b088:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2200      	movs	r2, #0
 800b08e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a0:	2b40      	cmp	r3, #64	; 0x40
 800b0a2:	d007      	beq.n	800b0b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b0b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0bc:	d178      	bne.n	800b1b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d002      	beq.n	800b0cc <HAL_SPI_TransmitReceive+0x10a>
 800b0c6:	8b7b      	ldrh	r3, [r7, #26]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d166      	bne.n	800b19a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	881a      	ldrh	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	1c9a      	adds	r2, r3, #2
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b0f0:	e053      	b.n	800b19a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f003 0302 	and.w	r3, r3, #2
 800b0fc:	2b02      	cmp	r3, #2
 800b0fe:	d11b      	bne.n	800b138 <HAL_SPI_TransmitReceive+0x176>
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b104:	b29b      	uxth	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <HAL_SPI_TransmitReceive+0x176>
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d113      	bne.n	800b138 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	881a      	ldrh	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b120:	1c9a      	adds	r2, r3, #2
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	3b01      	subs	r3, #1
 800b12e:	b29a      	uxth	r2, r3
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b134:	2300      	movs	r3, #0
 800b136:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f003 0301 	and.w	r3, r3, #1
 800b142:	2b01      	cmp	r3, #1
 800b144:	d119      	bne.n	800b17a <HAL_SPI_TransmitReceive+0x1b8>
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d014      	beq.n	800b17a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	68da      	ldr	r2, [r3, #12]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15a:	b292      	uxth	r2, r2
 800b15c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b162:	1c9a      	adds	r2, r3, #2
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	3b01      	subs	r3, #1
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b176:	2301      	movs	r3, #1
 800b178:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b17a:	f7fb f87b 	bl	8006274 <HAL_GetTick>
 800b17e:	4602      	mov	r2, r0
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	1ad3      	subs	r3, r2, r3
 800b184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b186:	429a      	cmp	r2, r3
 800b188:	d807      	bhi.n	800b19a <HAL_SPI_TransmitReceive+0x1d8>
 800b18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b190:	d003      	beq.n	800b19a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b198:	e0a7      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1a6      	bne.n	800b0f2 <HAL_SPI_TransmitReceive+0x130>
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1a1      	bne.n	800b0f2 <HAL_SPI_TransmitReceive+0x130>
 800b1ae:	e07c      	b.n	800b2aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <HAL_SPI_TransmitReceive+0x1fc>
 800b1b8:	8b7b      	ldrh	r3, [r7, #26]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d16b      	bne.n	800b296 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	330c      	adds	r3, #12
 800b1c8:	7812      	ldrb	r2, [r2, #0]
 800b1ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d0:	1c5a      	adds	r2, r3, #1
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1e4:	e057      	b.n	800b296 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f003 0302 	and.w	r3, r3, #2
 800b1f0:	2b02      	cmp	r3, #2
 800b1f2:	d11c      	bne.n	800b22e <HAL_SPI_TransmitReceive+0x26c>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d017      	beq.n	800b22e <HAL_SPI_TransmitReceive+0x26c>
 800b1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b200:	2b01      	cmp	r3, #1
 800b202:	d114      	bne.n	800b22e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	330c      	adds	r3, #12
 800b20e:	7812      	ldrb	r2, [r2, #0]
 800b210:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b216:	1c5a      	adds	r2, r3, #1
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b220:	b29b      	uxth	r3, r3
 800b222:	3b01      	subs	r3, #1
 800b224:	b29a      	uxth	r2, r3
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f003 0301 	and.w	r3, r3, #1
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d119      	bne.n	800b270 <HAL_SPI_TransmitReceive+0x2ae>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b240:	b29b      	uxth	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d014      	beq.n	800b270 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68da      	ldr	r2, [r3, #12]
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b250:	b2d2      	uxtb	r2, r2
 800b252:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b262:	b29b      	uxth	r3, r3
 800b264:	3b01      	subs	r3, #1
 800b266:	b29a      	uxth	r2, r3
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b26c:	2301      	movs	r3, #1
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b270:	f7fb f800 	bl	8006274 <HAL_GetTick>
 800b274:	4602      	mov	r2, r0
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b27c:	429a      	cmp	r2, r3
 800b27e:	d803      	bhi.n	800b288 <HAL_SPI_TransmitReceive+0x2c6>
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b286:	d102      	bne.n	800b28e <HAL_SPI_TransmitReceive+0x2cc>
 800b288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d103      	bne.n	800b296 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b28e:	2303      	movs	r3, #3
 800b290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b294:	e029      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1a2      	bne.n	800b1e6 <HAL_SPI_TransmitReceive+0x224>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d19d      	bne.n	800b1e6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 f8f8 	bl	800b4a4 <SPI_EndRxTxTransaction>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d006      	beq.n	800b2c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2220      	movs	r2, #32
 800b2c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b2c6:	e010      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10b      	bne.n	800b2e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	617b      	str	r3, [r7, #20]
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	617b      	str	r3, [r7, #20]
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	e000      	b.n	800b2ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b2e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b2fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3730      	adds	r7, #48	; 0x30
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b084      	sub	sp, #16
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	4613      	mov	r3, r2
 800b314:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b316:	e04c      	b.n	800b3b2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31e:	d048      	beq.n	800b3b2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b320:	f7fa ffa8 	bl	8006274 <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d902      	bls.n	800b336 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d13d      	bne.n	800b3b2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685a      	ldr	r2, [r3, #4]
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b344:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b34e:	d111      	bne.n	800b374 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b358:	d004      	beq.n	800b364 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b362:	d107      	bne.n	800b374 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b37c:	d10f      	bne.n	800b39e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b39c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b3ae:	2303      	movs	r3, #3
 800b3b0:	e00f      	b.n	800b3d2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	bf0c      	ite	eq
 800b3c2:	2301      	moveq	r3, #1
 800b3c4:	2300      	movne	r3, #0
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d1a3      	bne.n	800b318 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	b086      	sub	sp, #24
 800b3de:	af02      	add	r7, sp, #8
 800b3e0:	60f8      	str	r0, [r7, #12]
 800b3e2:	60b9      	str	r1, [r7, #8]
 800b3e4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3ee:	d111      	bne.n	800b414 <SPI_EndRxTransaction+0x3a>
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b3f8:	d004      	beq.n	800b404 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b402:	d107      	bne.n	800b414 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b412:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b41c:	d12a      	bne.n	800b474 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b426:	d012      	beq.n	800b44e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2200      	movs	r2, #0
 800b430:	2180      	movs	r1, #128	; 0x80
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f7ff ff67 	bl	800b306 <SPI_WaitFlagStateUntilTimeout>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d02d      	beq.n	800b49a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b442:	f043 0220 	orr.w	r2, r3, #32
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e026      	b.n	800b49c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2200      	movs	r2, #0
 800b456:	2101      	movs	r1, #1
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f7ff ff54 	bl	800b306 <SPI_WaitFlagStateUntilTimeout>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d01a      	beq.n	800b49a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b468:	f043 0220 	orr.w	r2, r3, #32
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b470:	2303      	movs	r3, #3
 800b472:	e013      	b.n	800b49c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	2200      	movs	r2, #0
 800b47c:	2101      	movs	r1, #1
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff ff41 	bl	800b306 <SPI_WaitFlagStateUntilTimeout>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d007      	beq.n	800b49a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48e:	f043 0220 	orr.w	r2, r3, #32
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	e000      	b.n	800b49c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b088      	sub	sp, #32
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	60f8      	str	r0, [r7, #12]
 800b4ac:	60b9      	str	r1, [r7, #8]
 800b4ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b4b0:	4b1b      	ldr	r3, [pc, #108]	; (800b520 <SPI_EndRxTxTransaction+0x7c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a1b      	ldr	r2, [pc, #108]	; (800b524 <SPI_EndRxTxTransaction+0x80>)
 800b4b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ba:	0d5b      	lsrs	r3, r3, #21
 800b4bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b4c0:	fb02 f303 	mul.w	r3, r2, r3
 800b4c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4ce:	d112      	bne.n	800b4f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2180      	movs	r1, #128	; 0x80
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f7ff ff13 	bl	800b306 <SPI_WaitFlagStateUntilTimeout>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d016      	beq.n	800b514 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ea:	f043 0220 	orr.w	r2, r3, #32
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e00f      	b.n	800b516 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d00a      	beq.n	800b512 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	3b01      	subs	r3, #1
 800b500:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50c:	2b80      	cmp	r3, #128	; 0x80
 800b50e:	d0f2      	beq.n	800b4f6 <SPI_EndRxTxTransaction+0x52>
 800b510:	e000      	b.n	800b514 <SPI_EndRxTxTransaction+0x70>
        break;
 800b512:	bf00      	nop
  }

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3718      	adds	r7, #24
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000000 	.word	0x20000000
 800b524:	165e9f81 	.word	0x165e9f81

0800b528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e01d      	b.n	800b576 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d106      	bne.n	800b554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f7f9 fe70 	bl	8005234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2202      	movs	r2, #2
 800b558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3304      	adds	r3, #4
 800b564:	4619      	mov	r1, r3
 800b566:	4610      	mov	r0, r2
 800b568:	f000 fb56 	bl	800bc18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b574:	2300      	movs	r3, #0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b57e:	b480      	push	{r7}
 800b580:	b085      	sub	sp, #20
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	68da      	ldr	r2, [r3, #12]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f042 0201 	orr.w	r2, r2, #1
 800b594:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	f003 0307 	and.w	r3, r3, #7
 800b5a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2b06      	cmp	r3, #6
 800b5a6:	d007      	beq.n	800b5b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	681a      	ldr	r2, [r3, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f042 0201 	orr.w	r2, r2, #1
 800b5b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e01d      	b.n	800b614 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d106      	bne.n	800b5f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7f9 fdad 	bl	800514c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681a      	ldr	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	3304      	adds	r3, #4
 800b602:	4619      	mov	r1, r3
 800b604:	4610      	mov	r0, r2
 800b606:	f000 fb07 	bl	800bc18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2201      	movs	r2, #1
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fd42 	bl	800c0b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a15      	ldr	r2, [pc, #84]	; (800b690 <HAL_TIM_PWM_Start+0x74>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d004      	beq.n	800b648 <HAL_TIM_PWM_Start+0x2c>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a14      	ldr	r2, [pc, #80]	; (800b694 <HAL_TIM_PWM_Start+0x78>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d101      	bne.n	800b64c <HAL_TIM_PWM_Start+0x30>
 800b648:	2301      	movs	r3, #1
 800b64a:	e000      	b.n	800b64e <HAL_TIM_PWM_Start+0x32>
 800b64c:	2300      	movs	r3, #0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d007      	beq.n	800b662 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f003 0307 	and.w	r3, r3, #7
 800b66c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2b06      	cmp	r3, #6
 800b672:	d007      	beq.n	800b684 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0201 	orr.w	r2, r2, #1
 800b682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3710      	adds	r7, #16
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	40010000 	.word	0x40010000
 800b694:	40010400 	.word	0x40010400

0800b698 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e083      	b.n	800b7b4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7f9 fe47 	bl	8005354 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	6812      	ldr	r2, [r2, #0]
 800b6d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6dc:	f023 0307 	bic.w	r3, r3, #7
 800b6e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f000 fa93 	bl	800bc18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	4313      	orrs	r3, r2
 800b712:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	699b      	ldr	r3, [r3, #24]
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	4313      	orrs	r3, r2
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	4313      	orrs	r3, r2
 800b730:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b738:	f023 030c 	bic.w	r3, r3, #12
 800b73c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	68da      	ldr	r2, [r3, #12]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	021b      	lsls	r3, r3, #8
 800b754:	4313      	orrs	r3, r2
 800b756:	693a      	ldr	r2, [r7, #16]
 800b758:	4313      	orrs	r3, r2
 800b75a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	011a      	lsls	r2, r3, #4
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	031b      	lsls	r3, r3, #12
 800b768:	4313      	orrs	r3, r2
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b776:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b77e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	011b      	lsls	r3, r3, #4
 800b78a:	4313      	orrs	r3, r2
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	4313      	orrs	r3, r2
 800b790:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3718      	adds	r7, #24
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d002      	beq.n	800b7d2 <HAL_TIM_Encoder_Start+0x16>
 800b7cc:	2b04      	cmp	r3, #4
 800b7ce:	d008      	beq.n	800b7e2 <HAL_TIM_Encoder_Start+0x26>
 800b7d0:	e00f      	b.n	800b7f2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2100      	movs	r1, #0
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 fc6c 	bl	800c0b8 <TIM_CCxChannelCmd>
      break;
 800b7e0:	e016      	b.n	800b810 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	2104      	movs	r1, #4
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 fc64 	bl	800c0b8 <TIM_CCxChannelCmd>
      break;
 800b7f0:	e00e      	b.n	800b810 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 fc5c 	bl	800c0b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2201      	movs	r2, #1
 800b806:	2104      	movs	r1, #4
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fc55 	bl	800c0b8 <TIM_CCxChannelCmd>
      break;
 800b80e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f042 0201 	orr.w	r2, r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	f003 0302 	and.w	r3, r3, #2
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d122      	bne.n	800b886 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d11b      	bne.n	800b886 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f06f 0202 	mvn.w	r2, #2
 800b856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9b5 	bl	800bbdc <HAL_TIM_IC_CaptureCallback>
 800b872:	e005      	b.n	800b880 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f9a7 	bl	800bbc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f9b8 	bl	800bbf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b04      	cmp	r3, #4
 800b892:	d122      	bne.n	800b8da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	68db      	ldr	r3, [r3, #12]
 800b89a:	f003 0304 	and.w	r3, r3, #4
 800b89e:	2b04      	cmp	r3, #4
 800b8a0:	d11b      	bne.n	800b8da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f06f 0204 	mvn.w	r2, #4
 800b8aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2202      	movs	r2, #2
 800b8b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f98b 	bl	800bbdc <HAL_TIM_IC_CaptureCallback>
 800b8c6:	e005      	b.n	800b8d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f97d 	bl	800bbc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f98e 	bl	800bbf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d122      	bne.n	800b92e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f003 0308 	and.w	r3, r3, #8
 800b8f2:	2b08      	cmp	r3, #8
 800b8f4:	d11b      	bne.n	800b92e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f06f 0208 	mvn.w	r2, #8
 800b8fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2204      	movs	r2, #4
 800b904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	f003 0303 	and.w	r3, r3, #3
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f961 	bl	800bbdc <HAL_TIM_IC_CaptureCallback>
 800b91a:	e005      	b.n	800b928 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f953 	bl	800bbc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f964 	bl	800bbf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	f003 0310 	and.w	r3, r3, #16
 800b938:	2b10      	cmp	r3, #16
 800b93a:	d122      	bne.n	800b982 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	f003 0310 	and.w	r3, r3, #16
 800b946:	2b10      	cmp	r3, #16
 800b948:	d11b      	bne.n	800b982 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f06f 0210 	mvn.w	r2, #16
 800b952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2208      	movs	r2, #8
 800b958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f937 	bl	800bbdc <HAL_TIM_IC_CaptureCallback>
 800b96e:	e005      	b.n	800b97c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f929 	bl	800bbc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f93a 	bl	800bbf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d10e      	bne.n	800b9ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	f003 0301 	and.w	r3, r3, #1
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d107      	bne.n	800b9ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f06f 0201 	mvn.w	r2, #1
 800b9a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f7f8 f82d 	bl	8003a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b8:	2b80      	cmp	r3, #128	; 0x80
 800b9ba:	d10e      	bne.n	800b9da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c6:	2b80      	cmp	r3, #128	; 0x80
 800b9c8:	d107      	bne.n	800b9da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fc6d 	bl	800c2b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e4:	2b40      	cmp	r3, #64	; 0x40
 800b9e6:	d10e      	bne.n	800ba06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f2:	2b40      	cmp	r3, #64	; 0x40
 800b9f4:	d107      	bne.n	800ba06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f8ff 	bl	800bc04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	691b      	ldr	r3, [r3, #16]
 800ba0c:	f003 0320 	and.w	r3, r3, #32
 800ba10:	2b20      	cmp	r3, #32
 800ba12:	d10e      	bne.n	800ba32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	f003 0320 	and.w	r3, r3, #32
 800ba1e:	2b20      	cmp	r3, #32
 800ba20:	d107      	bne.n	800ba32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f06f 0220 	mvn.w	r2, #32
 800ba2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fc37 	bl	800c2a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}
	...

0800ba3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d101      	bne.n	800ba56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ba52:	2302      	movs	r3, #2
 800ba54:	e0b4      	b.n	800bbc0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2202      	movs	r2, #2
 800ba62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b0c      	cmp	r3, #12
 800ba6a:	f200 809f 	bhi.w	800bbac <HAL_TIM_PWM_ConfigChannel+0x170>
 800ba6e:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800baa9 	.word	0x0800baa9
 800ba78:	0800bbad 	.word	0x0800bbad
 800ba7c:	0800bbad 	.word	0x0800bbad
 800ba80:	0800bbad 	.word	0x0800bbad
 800ba84:	0800bae9 	.word	0x0800bae9
 800ba88:	0800bbad 	.word	0x0800bbad
 800ba8c:	0800bbad 	.word	0x0800bbad
 800ba90:	0800bbad 	.word	0x0800bbad
 800ba94:	0800bb2b 	.word	0x0800bb2b
 800ba98:	0800bbad 	.word	0x0800bbad
 800ba9c:	0800bbad 	.word	0x0800bbad
 800baa0:	0800bbad 	.word	0x0800bbad
 800baa4:	0800bb6b 	.word	0x0800bb6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 f952 	bl	800bd58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f042 0208 	orr.w	r2, r2, #8
 800bac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f022 0204 	bic.w	r2, r2, #4
 800bad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6999      	ldr	r1, [r3, #24]
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	691a      	ldr	r2, [r3, #16]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	430a      	orrs	r2, r1
 800bae4:	619a      	str	r2, [r3, #24]
      break;
 800bae6:	e062      	b.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f9a2 	bl	800be38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	699a      	ldr	r2, [r3, #24]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699a      	ldr	r2, [r3, #24]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6999      	ldr	r1, [r3, #24]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	021a      	lsls	r2, r3, #8
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	430a      	orrs	r2, r1
 800bb26:	619a      	str	r2, [r3, #24]
      break;
 800bb28:	e041      	b.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68b9      	ldr	r1, [r7, #8]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f9f7 	bl	800bf24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69da      	ldr	r2, [r3, #28]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f042 0208 	orr.w	r2, r2, #8
 800bb44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f022 0204 	bic.w	r2, r2, #4
 800bb54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69d9      	ldr	r1, [r3, #28]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	691a      	ldr	r2, [r3, #16]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	430a      	orrs	r2, r1
 800bb66:	61da      	str	r2, [r3, #28]
      break;
 800bb68:	e021      	b.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68b9      	ldr	r1, [r7, #8]
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 fa4b 	bl	800c00c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	69da      	ldr	r2, [r3, #28]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	69d9      	ldr	r1, [r3, #28]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	021a      	lsls	r2, r3, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	61da      	str	r2, [r3, #28]
      break;
 800bbaa:	e000      	b.n	800bbae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bbac:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3710      	adds	r7, #16
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr

0800bbdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a40      	ldr	r2, [pc, #256]	; (800bd2c <TIM_Base_SetConfig+0x114>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d013      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc36:	d00f      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a3d      	ldr	r2, [pc, #244]	; (800bd30 <TIM_Base_SetConfig+0x118>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d00b      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a3c      	ldr	r2, [pc, #240]	; (800bd34 <TIM_Base_SetConfig+0x11c>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d007      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a3b      	ldr	r2, [pc, #236]	; (800bd38 <TIM_Base_SetConfig+0x120>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d003      	beq.n	800bc58 <TIM_Base_SetConfig+0x40>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4a3a      	ldr	r2, [pc, #232]	; (800bd3c <TIM_Base_SetConfig+0x124>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d108      	bne.n	800bc6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a2f      	ldr	r2, [pc, #188]	; (800bd2c <TIM_Base_SetConfig+0x114>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d02b      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc78:	d027      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a2c      	ldr	r2, [pc, #176]	; (800bd30 <TIM_Base_SetConfig+0x118>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d023      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a2b      	ldr	r2, [pc, #172]	; (800bd34 <TIM_Base_SetConfig+0x11c>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d01f      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a2a      	ldr	r2, [pc, #168]	; (800bd38 <TIM_Base_SetConfig+0x120>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d01b      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a29      	ldr	r2, [pc, #164]	; (800bd3c <TIM_Base_SetConfig+0x124>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d017      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a28      	ldr	r2, [pc, #160]	; (800bd40 <TIM_Base_SetConfig+0x128>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d013      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a27      	ldr	r2, [pc, #156]	; (800bd44 <TIM_Base_SetConfig+0x12c>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d00f      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a26      	ldr	r2, [pc, #152]	; (800bd48 <TIM_Base_SetConfig+0x130>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d00b      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	4a25      	ldr	r2, [pc, #148]	; (800bd4c <TIM_Base_SetConfig+0x134>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d007      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4a24      	ldr	r2, [pc, #144]	; (800bd50 <TIM_Base_SetConfig+0x138>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	d003      	beq.n	800bcca <TIM_Base_SetConfig+0xb2>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a23      	ldr	r2, [pc, #140]	; (800bd54 <TIM_Base_SetConfig+0x13c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d108      	bne.n	800bcdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	68db      	ldr	r3, [r3, #12]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	689a      	ldr	r2, [r3, #8]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a0a      	ldr	r2, [pc, #40]	; (800bd2c <TIM_Base_SetConfig+0x114>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d003      	beq.n	800bd10 <TIM_Base_SetConfig+0xf8>
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	4a0c      	ldr	r2, [pc, #48]	; (800bd3c <TIM_Base_SetConfig+0x124>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d103      	bne.n	800bd18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	691a      	ldr	r2, [r3, #16]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	615a      	str	r2, [r3, #20]
}
 800bd1e:	bf00      	nop
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	40010000 	.word	0x40010000
 800bd30:	40000400 	.word	0x40000400
 800bd34:	40000800 	.word	0x40000800
 800bd38:	40000c00 	.word	0x40000c00
 800bd3c:	40010400 	.word	0x40010400
 800bd40:	40014000 	.word	0x40014000
 800bd44:	40014400 	.word	0x40014400
 800bd48:	40014800 	.word	0x40014800
 800bd4c:	40001800 	.word	0x40001800
 800bd50:	40001c00 	.word	0x40001c00
 800bd54:	40002000 	.word	0x40002000

0800bd58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a1b      	ldr	r3, [r3, #32]
 800bd66:	f023 0201 	bic.w	r2, r3, #1
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a1b      	ldr	r3, [r3, #32]
 800bd72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f023 0303 	bic.w	r3, r3, #3
 800bd8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68fa      	ldr	r2, [r7, #12]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f023 0302 	bic.w	r3, r3, #2
 800bda0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	697a      	ldr	r2, [r7, #20]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a20      	ldr	r2, [pc, #128]	; (800be30 <TIM_OC1_SetConfig+0xd8>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d003      	beq.n	800bdbc <TIM_OC1_SetConfig+0x64>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a1f      	ldr	r2, [pc, #124]	; (800be34 <TIM_OC1_SetConfig+0xdc>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d10c      	bne.n	800bdd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	f023 0308 	bic.w	r3, r3, #8
 800bdc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f023 0304 	bic.w	r3, r3, #4
 800bdd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a15      	ldr	r2, [pc, #84]	; (800be30 <TIM_OC1_SetConfig+0xd8>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d003      	beq.n	800bde6 <TIM_OC1_SetConfig+0x8e>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a14      	ldr	r2, [pc, #80]	; (800be34 <TIM_OC1_SetConfig+0xdc>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d111      	bne.n	800be0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bdec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	695b      	ldr	r3, [r3, #20]
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	693a      	ldr	r2, [r7, #16]
 800be06:	4313      	orrs	r3, r2
 800be08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	697a      	ldr	r2, [r7, #20]
 800be22:	621a      	str	r2, [r3, #32]
}
 800be24:	bf00      	nop
 800be26:	371c      	adds	r7, #28
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	40010000 	.word	0x40010000
 800be34:	40010400 	.word	0x40010400

0800be38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be38:	b480      	push	{r7}
 800be3a:	b087      	sub	sp, #28
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6a1b      	ldr	r3, [r3, #32]
 800be46:	f023 0210 	bic.w	r2, r3, #16
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	021b      	lsls	r3, r3, #8
 800be76:	68fa      	ldr	r2, [r7, #12]
 800be78:	4313      	orrs	r3, r2
 800be7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f023 0320 	bic.w	r3, r3, #32
 800be82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	011b      	lsls	r3, r3, #4
 800be8a:	697a      	ldr	r2, [r7, #20]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4a22      	ldr	r2, [pc, #136]	; (800bf1c <TIM_OC2_SetConfig+0xe4>)
 800be94:	4293      	cmp	r3, r2
 800be96:	d003      	beq.n	800bea0 <TIM_OC2_SetConfig+0x68>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a21      	ldr	r2, [pc, #132]	; (800bf20 <TIM_OC2_SetConfig+0xe8>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d10d      	bne.n	800bebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	011b      	lsls	r3, r3, #4
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a17      	ldr	r2, [pc, #92]	; (800bf1c <TIM_OC2_SetConfig+0xe4>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_OC2_SetConfig+0x94>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a16      	ldr	r2, [pc, #88]	; (800bf20 <TIM_OC2_SetConfig+0xe8>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d113      	bne.n	800bef4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	693a      	ldr	r2, [r7, #16]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	693a      	ldr	r2, [r7, #16]
 800bef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	697a      	ldr	r2, [r7, #20]
 800bf0c:	621a      	str	r2, [r3, #32]
}
 800bf0e:	bf00      	nop
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	40010000 	.word	0x40010000
 800bf20:	40010400 	.word	0x40010400

0800bf24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b087      	sub	sp, #28
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a1b      	ldr	r3, [r3, #32]
 800bf32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 0303 	bic.w	r3, r3, #3
 800bf5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	68fa      	ldr	r2, [r7, #12]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	021b      	lsls	r3, r3, #8
 800bf74:	697a      	ldr	r2, [r7, #20]
 800bf76:	4313      	orrs	r3, r2
 800bf78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a21      	ldr	r2, [pc, #132]	; (800c004 <TIM_OC3_SetConfig+0xe0>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d003      	beq.n	800bf8a <TIM_OC3_SetConfig+0x66>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a20      	ldr	r2, [pc, #128]	; (800c008 <TIM_OC3_SetConfig+0xe4>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d10d      	bne.n	800bfa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	021b      	lsls	r3, r3, #8
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bfa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a16      	ldr	r2, [pc, #88]	; (800c004 <TIM_OC3_SetConfig+0xe0>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d003      	beq.n	800bfb6 <TIM_OC3_SetConfig+0x92>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a15      	ldr	r2, [pc, #84]	; (800c008 <TIM_OC3_SetConfig+0xe4>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d113      	bne.n	800bfde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	011b      	lsls	r3, r3, #4
 800bfcc:	693a      	ldr	r2, [r7, #16]
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	699b      	ldr	r3, [r3, #24]
 800bfd6:	011b      	lsls	r3, r3, #4
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	621a      	str	r2, [r3, #32]
}
 800bff8:	bf00      	nop
 800bffa:	371c      	adds	r7, #28
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr
 800c004:	40010000 	.word	0x40010000
 800c008:	40010400 	.word	0x40010400

0800c00c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b087      	sub	sp, #28
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6a1b      	ldr	r3, [r3, #32]
 800c01a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a1b      	ldr	r3, [r3, #32]
 800c026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	69db      	ldr	r3, [r3, #28]
 800c032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c03a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	021b      	lsls	r3, r3, #8
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	4313      	orrs	r3, r2
 800c04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	031b      	lsls	r3, r3, #12
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	4313      	orrs	r3, r2
 800c062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a12      	ldr	r2, [pc, #72]	; (800c0b0 <TIM_OC4_SetConfig+0xa4>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d003      	beq.n	800c074 <TIM_OC4_SetConfig+0x68>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a11      	ldr	r2, [pc, #68]	; (800c0b4 <TIM_OC4_SetConfig+0xa8>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d109      	bne.n	800c088 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c07a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	695b      	ldr	r3, [r3, #20]
 800c080:	019b      	lsls	r3, r3, #6
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	4313      	orrs	r3, r2
 800c086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68fa      	ldr	r2, [r7, #12]
 800c092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	621a      	str	r2, [r3, #32]
}
 800c0a2:	bf00      	nop
 800c0a4:	371c      	adds	r7, #28
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr
 800c0ae:	bf00      	nop
 800c0b0:	40010000 	.word	0x40010000
 800c0b4:	40010400 	.word	0x40010400

0800c0b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	f003 031f 	and.w	r3, r3, #31
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6a1a      	ldr	r2, [r3, #32]
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	43db      	mvns	r3, r3
 800c0da:	401a      	ands	r2, r3
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6a1a      	ldr	r2, [r3, #32]
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f003 031f 	and.w	r3, r3, #31
 800c0ea:	6879      	ldr	r1, [r7, #4]
 800c0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800c0f0:	431a      	orrs	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	621a      	str	r2, [r3, #32]
}
 800c0f6:	bf00      	nop
 800c0f8:	371c      	adds	r7, #28
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr
	...

0800c104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c104:	b480      	push	{r7}
 800c106:	b085      	sub	sp, #20
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c114:	2b01      	cmp	r3, #1
 800c116:	d101      	bne.n	800c11c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c118:	2302      	movs	r3, #2
 800c11a:	e05a      	b.n	800c1d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a21      	ldr	r2, [pc, #132]	; (800c1e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d022      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c168:	d01d      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a1d      	ldr	r2, [pc, #116]	; (800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d018      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a1b      	ldr	r2, [pc, #108]	; (800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d013      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4a1a      	ldr	r2, [pc, #104]	; (800c1ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d00e      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a18      	ldr	r2, [pc, #96]	; (800c1f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d009      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	4a17      	ldr	r2, [pc, #92]	; (800c1f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d004      	beq.n	800c1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4a15      	ldr	r2, [pc, #84]	; (800c1f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d10c      	bne.n	800c1c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3714      	adds	r7, #20
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	40010000 	.word	0x40010000
 800c1e4:	40000400 	.word	0x40000400
 800c1e8:	40000800 	.word	0x40000800
 800c1ec:	40000c00 	.word	0x40000c00
 800c1f0:	40010400 	.word	0x40010400
 800c1f4:	40014000 	.word	0x40014000
 800c1f8:	40001800 	.word	0x40001800

0800c1fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c206:	2300      	movs	r3, #0
 800c208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c210:	2b01      	cmp	r3, #1
 800c212:	d101      	bne.n	800c218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c214:	2302      	movs	r3, #2
 800c216:	e03d      	b.n	800c294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2201      	movs	r2, #1
 800c21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	4313      	orrs	r3, r2
 800c22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	685b      	ldr	r3, [r3, #4]
 800c246:	4313      	orrs	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4313      	orrs	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	691b      	ldr	r3, [r3, #16]
 800c262:	4313      	orrs	r3, r2
 800c264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	695b      	ldr	r3, [r3, #20]
 800c270:	4313      	orrs	r3, r2
 800c272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	4313      	orrs	r3, r2
 800c280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c2d6:	2301      	movs	r3, #1
 800c2d8:	e03f      	b.n	800c35a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d106      	bne.n	800c2f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7f9 f95a 	bl	80055a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2224      	movs	r2, #36	; 0x24
 800c2f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68da      	ldr	r2, [r3, #12]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c30a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f829 	bl	800c364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	691a      	ldr	r2, [r3, #16]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	695a      	ldr	r2, [r3, #20]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68da      	ldr	r2, [r3, #12]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2220      	movs	r2, #32
 800c34c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2220      	movs	r2, #32
 800c354:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c358:	2300      	movs	r3, #0
}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
	...

0800c364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c368:	b085      	sub	sp, #20
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	68da      	ldr	r2, [r3, #12]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	689a      	ldr	r2, [r3, #8]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	431a      	orrs	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	695b      	ldr	r3, [r3, #20]
 800c392:	431a      	orrs	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	4313      	orrs	r3, r2
 800c39a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c3a6:	f023 030c 	bic.w	r3, r3, #12
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	6812      	ldr	r2, [r2, #0]
 800c3ae:	68f9      	ldr	r1, [r7, #12]
 800c3b0:	430b      	orrs	r3, r1
 800c3b2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	699a      	ldr	r2, [r3, #24]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	430a      	orrs	r2, r1
 800c3c8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	69db      	ldr	r3, [r3, #28]
 800c3ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c3d2:	f040 818b 	bne.w	800c6ec <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4ac1      	ldr	r2, [pc, #772]	; (800c6e0 <UART_SetConfig+0x37c>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d005      	beq.n	800c3ec <UART_SetConfig+0x88>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4abf      	ldr	r2, [pc, #764]	; (800c6e4 <UART_SetConfig+0x380>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	f040 80bd 	bne.w	800c566 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c3ec:	f7fc fbcc 	bl	8008b88 <HAL_RCC_GetPCLK2Freq>
 800c3f0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c3f2:	68bb      	ldr	r3, [r7, #8]
 800c3f4:	461d      	mov	r5, r3
 800c3f6:	f04f 0600 	mov.w	r6, #0
 800c3fa:	46a8      	mov	r8, r5
 800c3fc:	46b1      	mov	r9, r6
 800c3fe:	eb18 0308 	adds.w	r3, r8, r8
 800c402:	eb49 0409 	adc.w	r4, r9, r9
 800c406:	4698      	mov	r8, r3
 800c408:	46a1      	mov	r9, r4
 800c40a:	eb18 0805 	adds.w	r8, r8, r5
 800c40e:	eb49 0906 	adc.w	r9, r9, r6
 800c412:	f04f 0100 	mov.w	r1, #0
 800c416:	f04f 0200 	mov.w	r2, #0
 800c41a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c41e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c422:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c426:	4688      	mov	r8, r1
 800c428:	4691      	mov	r9, r2
 800c42a:	eb18 0005 	adds.w	r0, r8, r5
 800c42e:	eb49 0106 	adc.w	r1, r9, r6
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	461d      	mov	r5, r3
 800c438:	f04f 0600 	mov.w	r6, #0
 800c43c:	196b      	adds	r3, r5, r5
 800c43e:	eb46 0406 	adc.w	r4, r6, r6
 800c442:	461a      	mov	r2, r3
 800c444:	4623      	mov	r3, r4
 800c446:	f7f4 fc37 	bl	8000cb8 <__aeabi_uldivmod>
 800c44a:	4603      	mov	r3, r0
 800c44c:	460c      	mov	r4, r1
 800c44e:	461a      	mov	r2, r3
 800c450:	4ba5      	ldr	r3, [pc, #660]	; (800c6e8 <UART_SetConfig+0x384>)
 800c452:	fba3 2302 	umull	r2, r3, r3, r2
 800c456:	095b      	lsrs	r3, r3, #5
 800c458:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	461d      	mov	r5, r3
 800c460:	f04f 0600 	mov.w	r6, #0
 800c464:	46a9      	mov	r9, r5
 800c466:	46b2      	mov	sl, r6
 800c468:	eb19 0309 	adds.w	r3, r9, r9
 800c46c:	eb4a 040a 	adc.w	r4, sl, sl
 800c470:	4699      	mov	r9, r3
 800c472:	46a2      	mov	sl, r4
 800c474:	eb19 0905 	adds.w	r9, r9, r5
 800c478:	eb4a 0a06 	adc.w	sl, sl, r6
 800c47c:	f04f 0100 	mov.w	r1, #0
 800c480:	f04f 0200 	mov.w	r2, #0
 800c484:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c488:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c48c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c490:	4689      	mov	r9, r1
 800c492:	4692      	mov	sl, r2
 800c494:	eb19 0005 	adds.w	r0, r9, r5
 800c498:	eb4a 0106 	adc.w	r1, sl, r6
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	461d      	mov	r5, r3
 800c4a2:	f04f 0600 	mov.w	r6, #0
 800c4a6:	196b      	adds	r3, r5, r5
 800c4a8:	eb46 0406 	adc.w	r4, r6, r6
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	4623      	mov	r3, r4
 800c4b0:	f7f4 fc02 	bl	8000cb8 <__aeabi_uldivmod>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	460c      	mov	r4, r1
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4b8b      	ldr	r3, [pc, #556]	; (800c6e8 <UART_SetConfig+0x384>)
 800c4bc:	fba3 1302 	umull	r1, r3, r3, r2
 800c4c0:	095b      	lsrs	r3, r3, #5
 800c4c2:	2164      	movs	r1, #100	; 0x64
 800c4c4:	fb01 f303 	mul.w	r3, r1, r3
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	3332      	adds	r3, #50	; 0x32
 800c4ce:	4a86      	ldr	r2, [pc, #536]	; (800c6e8 <UART_SetConfig+0x384>)
 800c4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4d4:	095b      	lsrs	r3, r3, #5
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c4dc:	4498      	add	r8, r3
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	461d      	mov	r5, r3
 800c4e2:	f04f 0600 	mov.w	r6, #0
 800c4e6:	46a9      	mov	r9, r5
 800c4e8:	46b2      	mov	sl, r6
 800c4ea:	eb19 0309 	adds.w	r3, r9, r9
 800c4ee:	eb4a 040a 	adc.w	r4, sl, sl
 800c4f2:	4699      	mov	r9, r3
 800c4f4:	46a2      	mov	sl, r4
 800c4f6:	eb19 0905 	adds.w	r9, r9, r5
 800c4fa:	eb4a 0a06 	adc.w	sl, sl, r6
 800c4fe:	f04f 0100 	mov.w	r1, #0
 800c502:	f04f 0200 	mov.w	r2, #0
 800c506:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c50a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c50e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c512:	4689      	mov	r9, r1
 800c514:	4692      	mov	sl, r2
 800c516:	eb19 0005 	adds.w	r0, r9, r5
 800c51a:	eb4a 0106 	adc.w	r1, sl, r6
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	461d      	mov	r5, r3
 800c524:	f04f 0600 	mov.w	r6, #0
 800c528:	196b      	adds	r3, r5, r5
 800c52a:	eb46 0406 	adc.w	r4, r6, r6
 800c52e:	461a      	mov	r2, r3
 800c530:	4623      	mov	r3, r4
 800c532:	f7f4 fbc1 	bl	8000cb8 <__aeabi_uldivmod>
 800c536:	4603      	mov	r3, r0
 800c538:	460c      	mov	r4, r1
 800c53a:	461a      	mov	r2, r3
 800c53c:	4b6a      	ldr	r3, [pc, #424]	; (800c6e8 <UART_SetConfig+0x384>)
 800c53e:	fba3 1302 	umull	r1, r3, r3, r2
 800c542:	095b      	lsrs	r3, r3, #5
 800c544:	2164      	movs	r1, #100	; 0x64
 800c546:	fb01 f303 	mul.w	r3, r1, r3
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	3332      	adds	r3, #50	; 0x32
 800c550:	4a65      	ldr	r2, [pc, #404]	; (800c6e8 <UART_SetConfig+0x384>)
 800c552:	fba2 2303 	umull	r2, r3, r2, r3
 800c556:	095b      	lsrs	r3, r3, #5
 800c558:	f003 0207 	and.w	r2, r3, #7
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4442      	add	r2, r8
 800c562:	609a      	str	r2, [r3, #8]
 800c564:	e26f      	b.n	800ca46 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c566:	f7fc fafb 	bl	8008b60 <HAL_RCC_GetPCLK1Freq>
 800c56a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	461d      	mov	r5, r3
 800c570:	f04f 0600 	mov.w	r6, #0
 800c574:	46a8      	mov	r8, r5
 800c576:	46b1      	mov	r9, r6
 800c578:	eb18 0308 	adds.w	r3, r8, r8
 800c57c:	eb49 0409 	adc.w	r4, r9, r9
 800c580:	4698      	mov	r8, r3
 800c582:	46a1      	mov	r9, r4
 800c584:	eb18 0805 	adds.w	r8, r8, r5
 800c588:	eb49 0906 	adc.w	r9, r9, r6
 800c58c:	f04f 0100 	mov.w	r1, #0
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c598:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c59c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c5a0:	4688      	mov	r8, r1
 800c5a2:	4691      	mov	r9, r2
 800c5a4:	eb18 0005 	adds.w	r0, r8, r5
 800c5a8:	eb49 0106 	adc.w	r1, r9, r6
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	461d      	mov	r5, r3
 800c5b2:	f04f 0600 	mov.w	r6, #0
 800c5b6:	196b      	adds	r3, r5, r5
 800c5b8:	eb46 0406 	adc.w	r4, r6, r6
 800c5bc:	461a      	mov	r2, r3
 800c5be:	4623      	mov	r3, r4
 800c5c0:	f7f4 fb7a 	bl	8000cb8 <__aeabi_uldivmod>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	4b47      	ldr	r3, [pc, #284]	; (800c6e8 <UART_SetConfig+0x384>)
 800c5cc:	fba3 2302 	umull	r2, r3, r3, r2
 800c5d0:	095b      	lsrs	r3, r3, #5
 800c5d2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	461d      	mov	r5, r3
 800c5da:	f04f 0600 	mov.w	r6, #0
 800c5de:	46a9      	mov	r9, r5
 800c5e0:	46b2      	mov	sl, r6
 800c5e2:	eb19 0309 	adds.w	r3, r9, r9
 800c5e6:	eb4a 040a 	adc.w	r4, sl, sl
 800c5ea:	4699      	mov	r9, r3
 800c5ec:	46a2      	mov	sl, r4
 800c5ee:	eb19 0905 	adds.w	r9, r9, r5
 800c5f2:	eb4a 0a06 	adc.w	sl, sl, r6
 800c5f6:	f04f 0100 	mov.w	r1, #0
 800c5fa:	f04f 0200 	mov.w	r2, #0
 800c5fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c602:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c606:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c60a:	4689      	mov	r9, r1
 800c60c:	4692      	mov	sl, r2
 800c60e:	eb19 0005 	adds.w	r0, r9, r5
 800c612:	eb4a 0106 	adc.w	r1, sl, r6
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	461d      	mov	r5, r3
 800c61c:	f04f 0600 	mov.w	r6, #0
 800c620:	196b      	adds	r3, r5, r5
 800c622:	eb46 0406 	adc.w	r4, r6, r6
 800c626:	461a      	mov	r2, r3
 800c628:	4623      	mov	r3, r4
 800c62a:	f7f4 fb45 	bl	8000cb8 <__aeabi_uldivmod>
 800c62e:	4603      	mov	r3, r0
 800c630:	460c      	mov	r4, r1
 800c632:	461a      	mov	r2, r3
 800c634:	4b2c      	ldr	r3, [pc, #176]	; (800c6e8 <UART_SetConfig+0x384>)
 800c636:	fba3 1302 	umull	r1, r3, r3, r2
 800c63a:	095b      	lsrs	r3, r3, #5
 800c63c:	2164      	movs	r1, #100	; 0x64
 800c63e:	fb01 f303 	mul.w	r3, r1, r3
 800c642:	1ad3      	subs	r3, r2, r3
 800c644:	00db      	lsls	r3, r3, #3
 800c646:	3332      	adds	r3, #50	; 0x32
 800c648:	4a27      	ldr	r2, [pc, #156]	; (800c6e8 <UART_SetConfig+0x384>)
 800c64a:	fba2 2303 	umull	r2, r3, r2, r3
 800c64e:	095b      	lsrs	r3, r3, #5
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c656:	4498      	add	r8, r3
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	461d      	mov	r5, r3
 800c65c:	f04f 0600 	mov.w	r6, #0
 800c660:	46a9      	mov	r9, r5
 800c662:	46b2      	mov	sl, r6
 800c664:	eb19 0309 	adds.w	r3, r9, r9
 800c668:	eb4a 040a 	adc.w	r4, sl, sl
 800c66c:	4699      	mov	r9, r3
 800c66e:	46a2      	mov	sl, r4
 800c670:	eb19 0905 	adds.w	r9, r9, r5
 800c674:	eb4a 0a06 	adc.w	sl, sl, r6
 800c678:	f04f 0100 	mov.w	r1, #0
 800c67c:	f04f 0200 	mov.w	r2, #0
 800c680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c684:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c688:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c68c:	4689      	mov	r9, r1
 800c68e:	4692      	mov	sl, r2
 800c690:	eb19 0005 	adds.w	r0, r9, r5
 800c694:	eb4a 0106 	adc.w	r1, sl, r6
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685b      	ldr	r3, [r3, #4]
 800c69c:	461d      	mov	r5, r3
 800c69e:	f04f 0600 	mov.w	r6, #0
 800c6a2:	196b      	adds	r3, r5, r5
 800c6a4:	eb46 0406 	adc.w	r4, r6, r6
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4623      	mov	r3, r4
 800c6ac:	f7f4 fb04 	bl	8000cb8 <__aeabi_uldivmod>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	460c      	mov	r4, r1
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	4b0c      	ldr	r3, [pc, #48]	; (800c6e8 <UART_SetConfig+0x384>)
 800c6b8:	fba3 1302 	umull	r1, r3, r3, r2
 800c6bc:	095b      	lsrs	r3, r3, #5
 800c6be:	2164      	movs	r1, #100	; 0x64
 800c6c0:	fb01 f303 	mul.w	r3, r1, r3
 800c6c4:	1ad3      	subs	r3, r2, r3
 800c6c6:	00db      	lsls	r3, r3, #3
 800c6c8:	3332      	adds	r3, #50	; 0x32
 800c6ca:	4a07      	ldr	r2, [pc, #28]	; (800c6e8 <UART_SetConfig+0x384>)
 800c6cc:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d0:	095b      	lsrs	r3, r3, #5
 800c6d2:	f003 0207 	and.w	r2, r3, #7
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4442      	add	r2, r8
 800c6dc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c6de:	e1b2      	b.n	800ca46 <UART_SetConfig+0x6e2>
 800c6e0:	40011000 	.word	0x40011000
 800c6e4:	40011400 	.word	0x40011400
 800c6e8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4ad7      	ldr	r2, [pc, #860]	; (800ca50 <UART_SetConfig+0x6ec>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d005      	beq.n	800c702 <UART_SetConfig+0x39e>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4ad6      	ldr	r2, [pc, #856]	; (800ca54 <UART_SetConfig+0x6f0>)
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	f040 80d1 	bne.w	800c8a4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c702:	f7fc fa41 	bl	8008b88 <HAL_RCC_GetPCLK2Freq>
 800c706:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	469a      	mov	sl, r3
 800c70c:	f04f 0b00 	mov.w	fp, #0
 800c710:	46d0      	mov	r8, sl
 800c712:	46d9      	mov	r9, fp
 800c714:	eb18 0308 	adds.w	r3, r8, r8
 800c718:	eb49 0409 	adc.w	r4, r9, r9
 800c71c:	4698      	mov	r8, r3
 800c71e:	46a1      	mov	r9, r4
 800c720:	eb18 080a 	adds.w	r8, r8, sl
 800c724:	eb49 090b 	adc.w	r9, r9, fp
 800c728:	f04f 0100 	mov.w	r1, #0
 800c72c:	f04f 0200 	mov.w	r2, #0
 800c730:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c734:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c738:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c73c:	4688      	mov	r8, r1
 800c73e:	4691      	mov	r9, r2
 800c740:	eb1a 0508 	adds.w	r5, sl, r8
 800c744:	eb4b 0609 	adc.w	r6, fp, r9
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4619      	mov	r1, r3
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	f04f 0400 	mov.w	r4, #0
 800c75a:	0094      	lsls	r4, r2, #2
 800c75c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c760:	008b      	lsls	r3, r1, #2
 800c762:	461a      	mov	r2, r3
 800c764:	4623      	mov	r3, r4
 800c766:	4628      	mov	r0, r5
 800c768:	4631      	mov	r1, r6
 800c76a:	f7f4 faa5 	bl	8000cb8 <__aeabi_uldivmod>
 800c76e:	4603      	mov	r3, r0
 800c770:	460c      	mov	r4, r1
 800c772:	461a      	mov	r2, r3
 800c774:	4bb8      	ldr	r3, [pc, #736]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c776:	fba3 2302 	umull	r2, r3, r3, r2
 800c77a:	095b      	lsrs	r3, r3, #5
 800c77c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	469b      	mov	fp, r3
 800c784:	f04f 0c00 	mov.w	ip, #0
 800c788:	46d9      	mov	r9, fp
 800c78a:	46e2      	mov	sl, ip
 800c78c:	eb19 0309 	adds.w	r3, r9, r9
 800c790:	eb4a 040a 	adc.w	r4, sl, sl
 800c794:	4699      	mov	r9, r3
 800c796:	46a2      	mov	sl, r4
 800c798:	eb19 090b 	adds.w	r9, r9, fp
 800c79c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c7a0:	f04f 0100 	mov.w	r1, #0
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7b4:	4689      	mov	r9, r1
 800c7b6:	4692      	mov	sl, r2
 800c7b8:	eb1b 0509 	adds.w	r5, fp, r9
 800c7bc:	eb4c 060a 	adc.w	r6, ip, sl
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	f04f 0200 	mov.w	r2, #0
 800c7ca:	f04f 0300 	mov.w	r3, #0
 800c7ce:	f04f 0400 	mov.w	r4, #0
 800c7d2:	0094      	lsls	r4, r2, #2
 800c7d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c7d8:	008b      	lsls	r3, r1, #2
 800c7da:	461a      	mov	r2, r3
 800c7dc:	4623      	mov	r3, r4
 800c7de:	4628      	mov	r0, r5
 800c7e0:	4631      	mov	r1, r6
 800c7e2:	f7f4 fa69 	bl	8000cb8 <__aeabi_uldivmod>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	460c      	mov	r4, r1
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	4b9a      	ldr	r3, [pc, #616]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c7ee:	fba3 1302 	umull	r1, r3, r3, r2
 800c7f2:	095b      	lsrs	r3, r3, #5
 800c7f4:	2164      	movs	r1, #100	; 0x64
 800c7f6:	fb01 f303 	mul.w	r3, r1, r3
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	011b      	lsls	r3, r3, #4
 800c7fe:	3332      	adds	r3, #50	; 0x32
 800c800:	4a95      	ldr	r2, [pc, #596]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c802:	fba2 2303 	umull	r2, r3, r2, r3
 800c806:	095b      	lsrs	r3, r3, #5
 800c808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c80c:	4498      	add	r8, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	469b      	mov	fp, r3
 800c812:	f04f 0c00 	mov.w	ip, #0
 800c816:	46d9      	mov	r9, fp
 800c818:	46e2      	mov	sl, ip
 800c81a:	eb19 0309 	adds.w	r3, r9, r9
 800c81e:	eb4a 040a 	adc.w	r4, sl, sl
 800c822:	4699      	mov	r9, r3
 800c824:	46a2      	mov	sl, r4
 800c826:	eb19 090b 	adds.w	r9, r9, fp
 800c82a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c82e:	f04f 0100 	mov.w	r1, #0
 800c832:	f04f 0200 	mov.w	r2, #0
 800c836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c83a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c83e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c842:	4689      	mov	r9, r1
 800c844:	4692      	mov	sl, r2
 800c846:	eb1b 0509 	adds.w	r5, fp, r9
 800c84a:	eb4c 060a 	adc.w	r6, ip, sl
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	4619      	mov	r1, r3
 800c854:	f04f 0200 	mov.w	r2, #0
 800c858:	f04f 0300 	mov.w	r3, #0
 800c85c:	f04f 0400 	mov.w	r4, #0
 800c860:	0094      	lsls	r4, r2, #2
 800c862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c866:	008b      	lsls	r3, r1, #2
 800c868:	461a      	mov	r2, r3
 800c86a:	4623      	mov	r3, r4
 800c86c:	4628      	mov	r0, r5
 800c86e:	4631      	mov	r1, r6
 800c870:	f7f4 fa22 	bl	8000cb8 <__aeabi_uldivmod>
 800c874:	4603      	mov	r3, r0
 800c876:	460c      	mov	r4, r1
 800c878:	461a      	mov	r2, r3
 800c87a:	4b77      	ldr	r3, [pc, #476]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c87c:	fba3 1302 	umull	r1, r3, r3, r2
 800c880:	095b      	lsrs	r3, r3, #5
 800c882:	2164      	movs	r1, #100	; 0x64
 800c884:	fb01 f303 	mul.w	r3, r1, r3
 800c888:	1ad3      	subs	r3, r2, r3
 800c88a:	011b      	lsls	r3, r3, #4
 800c88c:	3332      	adds	r3, #50	; 0x32
 800c88e:	4a72      	ldr	r2, [pc, #456]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c890:	fba2 2303 	umull	r2, r3, r2, r3
 800c894:	095b      	lsrs	r3, r3, #5
 800c896:	f003 020f 	and.w	r2, r3, #15
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4442      	add	r2, r8
 800c8a0:	609a      	str	r2, [r3, #8]
 800c8a2:	e0d0      	b.n	800ca46 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c8a4:	f7fc f95c 	bl	8008b60 <HAL_RCC_GetPCLK1Freq>
 800c8a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	469a      	mov	sl, r3
 800c8ae:	f04f 0b00 	mov.w	fp, #0
 800c8b2:	46d0      	mov	r8, sl
 800c8b4:	46d9      	mov	r9, fp
 800c8b6:	eb18 0308 	adds.w	r3, r8, r8
 800c8ba:	eb49 0409 	adc.w	r4, r9, r9
 800c8be:	4698      	mov	r8, r3
 800c8c0:	46a1      	mov	r9, r4
 800c8c2:	eb18 080a 	adds.w	r8, r8, sl
 800c8c6:	eb49 090b 	adc.w	r9, r9, fp
 800c8ca:	f04f 0100 	mov.w	r1, #0
 800c8ce:	f04f 0200 	mov.w	r2, #0
 800c8d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c8d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c8da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c8de:	4688      	mov	r8, r1
 800c8e0:	4691      	mov	r9, r2
 800c8e2:	eb1a 0508 	adds.w	r5, sl, r8
 800c8e6:	eb4b 0609 	adc.w	r6, fp, r9
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	f04f 0200 	mov.w	r2, #0
 800c8f4:	f04f 0300 	mov.w	r3, #0
 800c8f8:	f04f 0400 	mov.w	r4, #0
 800c8fc:	0094      	lsls	r4, r2, #2
 800c8fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c902:	008b      	lsls	r3, r1, #2
 800c904:	461a      	mov	r2, r3
 800c906:	4623      	mov	r3, r4
 800c908:	4628      	mov	r0, r5
 800c90a:	4631      	mov	r1, r6
 800c90c:	f7f4 f9d4 	bl	8000cb8 <__aeabi_uldivmod>
 800c910:	4603      	mov	r3, r0
 800c912:	460c      	mov	r4, r1
 800c914:	461a      	mov	r2, r3
 800c916:	4b50      	ldr	r3, [pc, #320]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c918:	fba3 2302 	umull	r2, r3, r3, r2
 800c91c:	095b      	lsrs	r3, r3, #5
 800c91e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	469b      	mov	fp, r3
 800c926:	f04f 0c00 	mov.w	ip, #0
 800c92a:	46d9      	mov	r9, fp
 800c92c:	46e2      	mov	sl, ip
 800c92e:	eb19 0309 	adds.w	r3, r9, r9
 800c932:	eb4a 040a 	adc.w	r4, sl, sl
 800c936:	4699      	mov	r9, r3
 800c938:	46a2      	mov	sl, r4
 800c93a:	eb19 090b 	adds.w	r9, r9, fp
 800c93e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c942:	f04f 0100 	mov.w	r1, #0
 800c946:	f04f 0200 	mov.w	r2, #0
 800c94a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c94e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c952:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c956:	4689      	mov	r9, r1
 800c958:	4692      	mov	sl, r2
 800c95a:	eb1b 0509 	adds.w	r5, fp, r9
 800c95e:	eb4c 060a 	adc.w	r6, ip, sl
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	4619      	mov	r1, r3
 800c968:	f04f 0200 	mov.w	r2, #0
 800c96c:	f04f 0300 	mov.w	r3, #0
 800c970:	f04f 0400 	mov.w	r4, #0
 800c974:	0094      	lsls	r4, r2, #2
 800c976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c97a:	008b      	lsls	r3, r1, #2
 800c97c:	461a      	mov	r2, r3
 800c97e:	4623      	mov	r3, r4
 800c980:	4628      	mov	r0, r5
 800c982:	4631      	mov	r1, r6
 800c984:	f7f4 f998 	bl	8000cb8 <__aeabi_uldivmod>
 800c988:	4603      	mov	r3, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	461a      	mov	r2, r3
 800c98e:	4b32      	ldr	r3, [pc, #200]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c990:	fba3 1302 	umull	r1, r3, r3, r2
 800c994:	095b      	lsrs	r3, r3, #5
 800c996:	2164      	movs	r1, #100	; 0x64
 800c998:	fb01 f303 	mul.w	r3, r1, r3
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	011b      	lsls	r3, r3, #4
 800c9a0:	3332      	adds	r3, #50	; 0x32
 800c9a2:	4a2d      	ldr	r2, [pc, #180]	; (800ca58 <UART_SetConfig+0x6f4>)
 800c9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a8:	095b      	lsrs	r3, r3, #5
 800c9aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9ae:	4498      	add	r8, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	469b      	mov	fp, r3
 800c9b4:	f04f 0c00 	mov.w	ip, #0
 800c9b8:	46d9      	mov	r9, fp
 800c9ba:	46e2      	mov	sl, ip
 800c9bc:	eb19 0309 	adds.w	r3, r9, r9
 800c9c0:	eb4a 040a 	adc.w	r4, sl, sl
 800c9c4:	4699      	mov	r9, r3
 800c9c6:	46a2      	mov	sl, r4
 800c9c8:	eb19 090b 	adds.w	r9, r9, fp
 800c9cc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c9d0:	f04f 0100 	mov.w	r1, #0
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c9e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c9e4:	4689      	mov	r9, r1
 800c9e6:	4692      	mov	sl, r2
 800c9e8:	eb1b 0509 	adds.w	r5, fp, r9
 800c9ec:	eb4c 060a 	adc.w	r6, ip, sl
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	f04f 0300 	mov.w	r3, #0
 800c9fe:	f04f 0400 	mov.w	r4, #0
 800ca02:	0094      	lsls	r4, r2, #2
 800ca04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ca08:	008b      	lsls	r3, r1, #2
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4623      	mov	r3, r4
 800ca0e:	4628      	mov	r0, r5
 800ca10:	4631      	mov	r1, r6
 800ca12:	f7f4 f951 	bl	8000cb8 <__aeabi_uldivmod>
 800ca16:	4603      	mov	r3, r0
 800ca18:	460c      	mov	r4, r1
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	4b0e      	ldr	r3, [pc, #56]	; (800ca58 <UART_SetConfig+0x6f4>)
 800ca1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ca22:	095b      	lsrs	r3, r3, #5
 800ca24:	2164      	movs	r1, #100	; 0x64
 800ca26:	fb01 f303 	mul.w	r3, r1, r3
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	011b      	lsls	r3, r3, #4
 800ca2e:	3332      	adds	r3, #50	; 0x32
 800ca30:	4a09      	ldr	r2, [pc, #36]	; (800ca58 <UART_SetConfig+0x6f4>)
 800ca32:	fba2 2303 	umull	r2, r3, r2, r3
 800ca36:	095b      	lsrs	r3, r3, #5
 800ca38:	f003 020f 	and.w	r2, r3, #15
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4442      	add	r2, r8
 800ca42:	609a      	str	r2, [r3, #8]
}
 800ca44:	e7ff      	b.n	800ca46 <UART_SetConfig+0x6e2>
 800ca46:	bf00      	nop
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca50:	40011000 	.word	0x40011000
 800ca54:	40011400 	.word	0x40011400
 800ca58:	51eb851f 	.word	0x51eb851f

0800ca5c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	b480      	push	{r7}
 800ca60:	b085      	sub	sp, #20
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
 800ca66:	f107 001c 	add.w	r0, r7, #28
 800ca6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ca72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ca74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ca76:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ca7a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ca7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ca7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ca80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ca82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ca84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ca86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ca96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	431a      	orrs	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800caa2:	2300      	movs	r3, #0
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	b004      	add	sp, #16
 800cab0:	4770      	bx	lr

0800cab2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cab2:	b480      	push	{r7}
 800cab4:	b083      	sub	sp, #12
 800cab6:	af00      	add	r7, sp, #0
 800cab8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	370c      	adds	r7, #12
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800caee:	b580      	push	{r7, lr}
 800caf0:	b082      	sub	sp, #8
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2203      	movs	r2, #3
 800cafa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cafc:	2002      	movs	r0, #2
 800cafe:	f7f9 fbc5 	bl	800628c <HAL_Delay>
  
  return HAL_OK;
 800cb02:	2300      	movs	r3, #0
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3708      	adds	r7, #8
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 0303 	and.w	r3, r3, #3
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cb4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cb52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cb62:	f023 030f 	bic.w	r3, r3, #15
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	431a      	orrs	r2, r3
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3714      	adds	r7, #20
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	b2db      	uxtb	r3, r3
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	370c      	adds	r7, #12
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cb96:	b480      	push	{r7}
 800cb98:	b085      	sub	sp, #20
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3314      	adds	r3, #20
 800cba4:	461a      	mov	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	4413      	add	r3, r2
 800cbaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
}  
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3714      	adds	r7, #20
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbe2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cbe8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cbee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbfa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	431a      	orrs	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cc06:	2300      	movs	r3, #0

}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b088      	sub	sp, #32
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cc22:	2310      	movs	r3, #16
 800cc24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc26:	2340      	movs	r3, #64	; 0x40
 800cc28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc34:	f107 0308 	add.w	r3, r7, #8
 800cc38:	4619      	mov	r1, r3
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7ff ff74 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cc40:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc44:	2110      	movs	r1, #16
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 fa40 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cc4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc4e:	69fb      	ldr	r3, [r7, #28]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3720      	adds	r7, #32
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b088      	sub	sp, #32
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cc66:	2311      	movs	r3, #17
 800cc68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc6a:	2340      	movs	r3, #64	; 0x40
 800cc6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc78:	f107 0308 	add.w	r3, r7, #8
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f7ff ff52 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cc84:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc88:	2111      	movs	r1, #17
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fa1e 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cc90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc92:	69fb      	ldr	r3, [r7, #28]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3720      	adds	r7, #32
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ccaa:	2312      	movs	r3, #18
 800ccac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccae:	2340      	movs	r3, #64	; 0x40
 800ccb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccbc:	f107 0308 	add.w	r3, r7, #8
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff ff30 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ccc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cccc:	2112      	movs	r1, #18
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f9fc 	bl	800d0cc <SDMMC_GetCmdResp1>
 800ccd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd6:	69fb      	ldr	r3, [r7, #28]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3720      	adds	r7, #32
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b088      	sub	sp, #32
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ccee:	2318      	movs	r3, #24
 800ccf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccf2:	2340      	movs	r3, #64	; 0x40
 800ccf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd00:	f107 0308 	add.w	r3, r7, #8
 800cd04:	4619      	mov	r1, r3
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7ff ff0e 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd10:	2118      	movs	r1, #24
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f9da 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cd18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd1a:	69fb      	ldr	r3, [r7, #28]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3720      	adds	r7, #32
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b088      	sub	sp, #32
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cd32:	2319      	movs	r3, #25
 800cd34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd36:	2340      	movs	r3, #64	; 0x40
 800cd38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd44:	f107 0308 	add.w	r3, r7, #8
 800cd48:	4619      	mov	r1, r3
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7ff feec 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd50:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd54:	2119      	movs	r1, #25
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 f9b8 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cd5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd5e:	69fb      	ldr	r3, [r7, #28]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b088      	sub	sp, #32
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cd70:	2300      	movs	r3, #0
 800cd72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cd74:	230c      	movs	r3, #12
 800cd76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd86:	f107 0308 	add.w	r3, r7, #8
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f7ff fecb 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cd92:	4a05      	ldr	r2, [pc, #20]	; (800cda8 <SDMMC_CmdStopTransfer+0x40>)
 800cd94:	210c      	movs	r1, #12
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f998 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cd9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	05f5e100 	.word	0x05f5e100

0800cdac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	; 0x28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cdbc:	2307      	movs	r3, #7
 800cdbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cdc0:	2340      	movs	r3, #64	; 0x40
 800cdc2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdcc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdce:	f107 0310 	add.w	r3, r7, #16
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7ff fea7 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cdda:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdde:	2107      	movs	r1, #7
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f000 f973 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cde6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3728      	adds	r7, #40	; 0x28
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b088      	sub	sp, #32
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ce02:	2300      	movs	r3, #0
 800ce04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce10:	f107 0308 	add.w	r3, r7, #8
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff fe86 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f000 f92d 	bl	800d07c <SDMMC_GetCmdError>
 800ce22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce24:	69fb      	ldr	r3, [r7, #28]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b088      	sub	sp, #32
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ce36:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ce3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ce3c:	2308      	movs	r3, #8
 800ce3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce44:	2300      	movs	r3, #0
 800ce46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce4e:	f107 0308 	add.w	r3, r7, #8
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff fe67 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fb16 	bl	800d48c <SDMMC_GetCmdResp7>
 800ce60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce62:	69fb      	ldr	r3, [r7, #28]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3720      	adds	r7, #32
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ce7a:	2337      	movs	r3, #55	; 0x37
 800ce7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce7e:	2340      	movs	r3, #64	; 0x40
 800ce80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce82:	2300      	movs	r3, #0
 800ce84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce8c:	f107 0308 	add.w	r3, r7, #8
 800ce90:	4619      	mov	r1, r3
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fe48 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ce98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce9c:	2137      	movs	r1, #55	; 0x37
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 f914 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cea6:	69fb      	ldr	r3, [r7, #28]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3720      	adds	r7, #32
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b088      	sub	sp, #32
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cec6:	2329      	movs	r3, #41	; 0x29
 800cec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ceca:	2340      	movs	r3, #64	; 0x40
 800cecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cece:	2300      	movs	r3, #0
 800ced0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ced2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ced6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ced8:	f107 0308 	add.w	r3, r7, #8
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f7ff fe22 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 fa23 	bl	800d330 <SDMMC_GetCmdResp3>
 800ceea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceec:	69fb      	ldr	r3, [r7, #28]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3720      	adds	r7, #32
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b088      	sub	sp, #32
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]
 800cefe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cf04:	2306      	movs	r3, #6
 800cf06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf08:	2340      	movs	r3, #64	; 0x40
 800cf0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf16:	f107 0308 	add.w	r3, r7, #8
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff fe03 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cf22:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf26:	2106      	movs	r1, #6
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f8cf 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cf2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf30:	69fb      	ldr	r3, [r7, #28]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3720      	adds	r7, #32
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b088      	sub	sp, #32
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cf42:	2300      	movs	r3, #0
 800cf44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cf46:	2333      	movs	r3, #51	; 0x33
 800cf48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf4a:	2340      	movs	r3, #64	; 0x40
 800cf4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf58:	f107 0308 	add.w	r3, r7, #8
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff fde2 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cf64:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf68:	2133      	movs	r1, #51	; 0x33
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f8ae 	bl	800d0cc <SDMMC_GetCmdResp1>
 800cf70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf72:	69fb      	ldr	r3, [r7, #28]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3720      	adds	r7, #32
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cf84:	2300      	movs	r3, #0
 800cf86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cf88:	2302      	movs	r3, #2
 800cf8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cf8c:	23c0      	movs	r3, #192	; 0xc0
 800cf8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf90:	2300      	movs	r3, #0
 800cf92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf9a:	f107 0308 	add.w	r3, r7, #8
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f7ff fdc1 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f000 f97c 	bl	800d2a4 <SDMMC_GetCmdResp2>
 800cfac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfae:	69fb      	ldr	r3, [r7, #28]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3720      	adds	r7, #32
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}

0800cfb8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cfc6:	2309      	movs	r3, #9
 800cfc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cfca:	23c0      	movs	r3, #192	; 0xc0
 800cfcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfd8:	f107 0308 	add.w	r3, r7, #8
 800cfdc:	4619      	mov	r1, r3
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f7ff fda2 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f000 f95d 	bl	800d2a4 <SDMMC_GetCmdResp2>
 800cfea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfec:	69fb      	ldr	r3, [r7, #28]
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3720      	adds	r7, #32
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}

0800cff6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cff6:	b580      	push	{r7, lr}
 800cff8:	b088      	sub	sp, #32
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6078      	str	r0, [r7, #4]
 800cffe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d000:	2300      	movs	r3, #0
 800d002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d004:	2303      	movs	r3, #3
 800d006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d008:	2340      	movs	r3, #64	; 0x40
 800d00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d00c:	2300      	movs	r3, #0
 800d00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d016:	f107 0308 	add.w	r3, r7, #8
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7ff fd83 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	2103      	movs	r1, #3
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f9bc 	bl	800d3a4 <SDMMC_GetCmdResp6>
 800d02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d02e:	69fb      	ldr	r3, [r7, #28]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3720      	adds	r7, #32
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d046:	230d      	movs	r3, #13
 800d048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d04a:	2340      	movs	r3, #64	; 0x40
 800d04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d04e:	2300      	movs	r3, #0
 800d050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d058:	f107 0308 	add.w	r3, r7, #8
 800d05c:	4619      	mov	r1, r3
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff fd62 	bl	800cb28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d064:	f241 3288 	movw	r2, #5000	; 0x1388
 800d068:	210d      	movs	r1, #13
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f82e 	bl	800d0cc <SDMMC_GetCmdResp1>
 800d070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d072:	69fb      	ldr	r3, [r7, #28]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3720      	adds	r7, #32
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d07c:	b490      	push	{r4, r7}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d084:	4b0f      	ldr	r3, [pc, #60]	; (800d0c4 <SDMMC_GetCmdError+0x48>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a0f      	ldr	r2, [pc, #60]	; (800d0c8 <SDMMC_GetCmdError+0x4c>)
 800d08a:	fba2 2303 	umull	r2, r3, r2, r3
 800d08e:	0a5b      	lsrs	r3, r3, #9
 800d090:	f241 3288 	movw	r2, #5000	; 0x1388
 800d094:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d098:	4623      	mov	r3, r4
 800d09a:	1e5c      	subs	r4, r3, #1
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d102      	bne.n	800d0a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0a4:	e009      	b.n	800d0ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0f2      	beq.n	800d098 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	22c5      	movs	r2, #197	; 0xc5
 800d0b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d0b8:	2300      	movs	r3, #0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bc90      	pop	{r4, r7}
 800d0c2:	4770      	bx	lr
 800d0c4:	20000000 	.word	0x20000000
 800d0c8:	10624dd3 	.word	0x10624dd3

0800d0cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d0cc:	b590      	push	{r4, r7, lr}
 800d0ce:	b087      	sub	sp, #28
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	460b      	mov	r3, r1
 800d0d6:	607a      	str	r2, [r7, #4]
 800d0d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d0da:	4b6f      	ldr	r3, [pc, #444]	; (800d298 <SDMMC_GetCmdResp1+0x1cc>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	4a6f      	ldr	r2, [pc, #444]	; (800d29c <SDMMC_GetCmdResp1+0x1d0>)
 800d0e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e4:	0a5b      	lsrs	r3, r3, #9
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d0ec:	4623      	mov	r3, r4
 800d0ee:	1e5c      	subs	r4, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0f8:	e0c9      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0f0      	beq.n	800d0ec <SDMMC_GetCmdResp1+0x20>
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1eb      	bne.n	800d0ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d004      	beq.n	800d12a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	2204      	movs	r2, #4
 800d124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d126:	2304      	movs	r3, #4
 800d128:	e0b1      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b00      	cmp	r3, #0
 800d134:	d004      	beq.n	800d140 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2201      	movs	r2, #1
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d13c:	2301      	movs	r3, #1
 800d13e:	e0a6      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	22c5      	movs	r2, #197	; 0xc5
 800d144:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f7ff fd18 	bl	800cb7c <SDIO_GetCommandResponse>
 800d14c:	4603      	mov	r3, r0
 800d14e:	461a      	mov	r2, r3
 800d150:	7afb      	ldrb	r3, [r7, #11]
 800d152:	4293      	cmp	r3, r2
 800d154:	d001      	beq.n	800d15a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d156:	2301      	movs	r3, #1
 800d158:	e099      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d15a:	2100      	movs	r1, #0
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff fd1a 	bl	800cb96 <SDIO_GetResponse>
 800d162:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d164:	693a      	ldr	r2, [r7, #16]
 800d166:	4b4e      	ldr	r3, [pc, #312]	; (800d2a0 <SDMMC_GetCmdResp1+0x1d4>)
 800d168:	4013      	ands	r3, r2
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d16e:	2300      	movs	r3, #0
 800d170:	e08d      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	2b00      	cmp	r3, #0
 800d176:	da02      	bge.n	800d17e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d17c:	e087      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d188:	2340      	movs	r3, #64	; 0x40
 800d18a:	e080      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d196:	2380      	movs	r3, #128	; 0x80
 800d198:	e079      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d002      	beq.n	800d1aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d1a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1a8:	e071      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d002      	beq.n	800d1ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d1b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1b8:	e069      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d1ba:	693b      	ldr	r3, [r7, #16]
 800d1bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d1c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1c8:	e061      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d002      	beq.n	800d1da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d1d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1d8:	e059      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d002      	beq.n	800d1ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1e8:	e051      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d1f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d1f8:	e049      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d1fa:	693b      	ldr	r3, [r7, #16]
 800d1fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d204:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d208:	e041      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d210:	2b00      	cmp	r3, #0
 800d212:	d002      	beq.n	800d21a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d218:	e039      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d228:	e031      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d002      	beq.n	800d23a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d238:	e029      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d244:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d248:	e021      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d254:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d258:	e019      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d264:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d268:	e011      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d274:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d278:	e009      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f003 0308 	and.w	r3, r3, #8
 800d280:	2b00      	cmp	r3, #0
 800d282:	d002      	beq.n	800d28a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d284:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d288:	e001      	b.n	800d28e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d28a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d28e:	4618      	mov	r0, r3
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	bd90      	pop	{r4, r7, pc}
 800d296:	bf00      	nop
 800d298:	20000000 	.word	0x20000000
 800d29c:	10624dd3 	.word	0x10624dd3
 800d2a0:	fdffe008 	.word	0xfdffe008

0800d2a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d2a4:	b490      	push	{r4, r7}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2ac:	4b1e      	ldr	r3, [pc, #120]	; (800d328 <SDMMC_GetCmdResp2+0x84>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a1e      	ldr	r2, [pc, #120]	; (800d32c <SDMMC_GetCmdResp2+0x88>)
 800d2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b6:	0a5b      	lsrs	r3, r3, #9
 800d2b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d2c0:	4623      	mov	r3, r4
 800d2c2:	1e5c      	subs	r4, r3, #1
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d102      	bne.n	800d2ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2cc:	e026      	b.n	800d31c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d0f0      	beq.n	800d2c0 <SDMMC_GetCmdResp2+0x1c>
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1eb      	bne.n	800d2c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ec:	f003 0304 	and.w	r3, r3, #4
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d004      	beq.n	800d2fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2204      	movs	r2, #4
 800d2f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d2fa:	2304      	movs	r3, #4
 800d2fc:	e00e      	b.n	800d31c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d302:	f003 0301 	and.w	r3, r3, #1
 800d306:	2b00      	cmp	r3, #0
 800d308:	d004      	beq.n	800d314 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2201      	movs	r2, #1
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d310:	2301      	movs	r3, #1
 800d312:	e003      	b.n	800d31c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	22c5      	movs	r2, #197	; 0xc5
 800d318:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bc90      	pop	{r4, r7}
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	20000000 	.word	0x20000000
 800d32c:	10624dd3 	.word	0x10624dd3

0800d330 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d330:	b490      	push	{r4, r7}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d338:	4b18      	ldr	r3, [pc, #96]	; (800d39c <SDMMC_GetCmdResp3+0x6c>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a18      	ldr	r2, [pc, #96]	; (800d3a0 <SDMMC_GetCmdResp3+0x70>)
 800d33e:	fba2 2303 	umull	r2, r3, r2, r3
 800d342:	0a5b      	lsrs	r3, r3, #9
 800d344:	f241 3288 	movw	r2, #5000	; 0x1388
 800d348:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d34c:	4623      	mov	r3, r4
 800d34e:	1e5c      	subs	r4, r3, #1
 800d350:	2b00      	cmp	r3, #0
 800d352:	d102      	bne.n	800d35a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d354:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d358:	e01b      	b.n	800d392 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0f0      	beq.n	800d34c <SDMMC_GetCmdResp3+0x1c>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1eb      	bne.n	800d34c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	f003 0304 	and.w	r3, r3, #4
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d004      	beq.n	800d38a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2204      	movs	r2, #4
 800d384:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d386:	2304      	movs	r3, #4
 800d388:	e003      	b.n	800d392 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	22c5      	movs	r2, #197	; 0xc5
 800d38e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bc90      	pop	{r4, r7}
 800d39a:	4770      	bx	lr
 800d39c:	20000000 	.word	0x20000000
 800d3a0:	10624dd3 	.word	0x10624dd3

0800d3a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d3a4:	b590      	push	{r4, r7, lr}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	607a      	str	r2, [r7, #4]
 800d3b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3b2:	4b34      	ldr	r3, [pc, #208]	; (800d484 <SDMMC_GetCmdResp6+0xe0>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a34      	ldr	r2, [pc, #208]	; (800d488 <SDMMC_GetCmdResp6+0xe4>)
 800d3b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3bc:	0a5b      	lsrs	r3, r3, #9
 800d3be:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3c2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d3c6:	4623      	mov	r3, r4
 800d3c8:	1e5c      	subs	r4, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d102      	bne.n	800d3d4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3d2:	e052      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d0f0      	beq.n	800d3c6 <SDMMC_GetCmdResp6+0x22>
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1eb      	bne.n	800d3c6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3f2:	f003 0304 	and.w	r3, r3, #4
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2204      	movs	r2, #4
 800d3fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d400:	2304      	movs	r3, #4
 800d402:	e03a      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d408:	f003 0301 	and.w	r3, r3, #1
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d004      	beq.n	800d41a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	2201      	movs	r2, #1
 800d414:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d416:	2301      	movs	r3, #1
 800d418:	e02f      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7ff fbae 	bl	800cb7c <SDIO_GetCommandResponse>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	7afb      	ldrb	r3, [r7, #11]
 800d426:	4293      	cmp	r3, r2
 800d428:	d001      	beq.n	800d42e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e025      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	22c5      	movs	r2, #197	; 0xc5
 800d432:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d434:	2100      	movs	r1, #0
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f7ff fbad 	bl	800cb96 <SDIO_GetResponse>
 800d43c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d444:	2b00      	cmp	r3, #0
 800d446:	d106      	bne.n	800d456 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	0c1b      	lsrs	r3, r3, #16
 800d44c:	b29a      	uxth	r2, r3
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d452:	2300      	movs	r3, #0
 800d454:	e011      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d460:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d464:	e009      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d474:	e001      	b.n	800d47a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	371c      	adds	r7, #28
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd90      	pop	{r4, r7, pc}
 800d482:	bf00      	nop
 800d484:	20000000 	.word	0x20000000
 800d488:	10624dd3 	.word	0x10624dd3

0800d48c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d48c:	b490      	push	{r4, r7}
 800d48e:	b084      	sub	sp, #16
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d494:	4b21      	ldr	r3, [pc, #132]	; (800d51c <SDMMC_GetCmdResp7+0x90>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a21      	ldr	r2, [pc, #132]	; (800d520 <SDMMC_GetCmdResp7+0x94>)
 800d49a:	fba2 2303 	umull	r2, r3, r2, r3
 800d49e:	0a5b      	lsrs	r3, r3, #9
 800d4a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d4a8:	4623      	mov	r3, r4
 800d4aa:	1e5c      	subs	r4, r3, #1
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d102      	bne.n	800d4b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4b4:	e02c      	b.n	800d510 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d0f0      	beq.n	800d4a8 <SDMMC_GetCmdResp7+0x1c>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d1eb      	bne.n	800d4a8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d4:	f003 0304 	and.w	r3, r3, #4
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d004      	beq.n	800d4e6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2204      	movs	r2, #4
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4e2:	2304      	movs	r3, #4
 800d4e4:	e014      	b.n	800d510 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ea:	f003 0301 	and.w	r3, r3, #1
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d004      	beq.n	800d4fc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e009      	b.n	800d510 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2240      	movs	r2, #64	; 0x40
 800d50c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d50e:	2300      	movs	r3, #0
  
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bc90      	pop	{r4, r7}
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	20000000 	.word	0x20000000
 800d520:	10624dd3 	.word	0x10624dd3

0800d524 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d528:	4904      	ldr	r1, [pc, #16]	; (800d53c <MX_FATFS_Init+0x18>)
 800d52a:	4805      	ldr	r0, [pc, #20]	; (800d540 <MX_FATFS_Init+0x1c>)
 800d52c:	f004 f874 	bl	8011618 <FATFS_LinkDriver>
 800d530:	4603      	mov	r3, r0
 800d532:	461a      	mov	r2, r3
 800d534:	4b03      	ldr	r3, [pc, #12]	; (800d544 <MX_FATFS_Init+0x20>)
 800d536:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d538:	bf00      	nop
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	20021e30 	.word	0x20021e30
 800d540:	08017b68 	.word	0x08017b68
 800d544:	20021e2c 	.word	0x20021e2c

0800d548 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d548:	b480      	push	{r7}
 800d54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d54c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d54e:	4618      	mov	r0, r3
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr

0800d558 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b082      	sub	sp, #8
 800d55c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d562:	f000 f896 	bl	800d692 <BSP_SD_IsDetected>
 800d566:	4603      	mov	r3, r0
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d001      	beq.n	800d570 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d56c:	2301      	movs	r3, #1
 800d56e:	e012      	b.n	800d596 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d570:	480b      	ldr	r0, [pc, #44]	; (800d5a0 <BSP_SD_Init+0x48>)
 800d572:	f7fb ff9d 	bl	80094b0 <HAL_SD_Init>
 800d576:	4603      	mov	r3, r0
 800d578:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d109      	bne.n	800d594 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d580:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d584:	4806      	ldr	r0, [pc, #24]	; (800d5a0 <BSP_SD_Init+0x48>)
 800d586:	f7fc fd47 	bl	800a018 <HAL_SD_ConfigWideBusOperation>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d590:	2301      	movs	r3, #1
 800d592:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d594:	79fb      	ldrb	r3, [r7, #7]
}
 800d596:	4618      	mov	r0, r3
 800d598:	3708      	adds	r7, #8
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	20021c3c 	.word	0x20021c3c

0800d5a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b086      	sub	sp, #24
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	68f9      	ldr	r1, [r7, #12]
 800d5ba:	4806      	ldr	r0, [pc, #24]	; (800d5d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d5bc:	f7fc f808 	bl	80095d0 <HAL_SD_ReadBlocks_DMA>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d001      	beq.n	800d5ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3718      	adds	r7, #24
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20021c3c 	.word	0x20021c3c

0800d5d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	68f9      	ldr	r1, [r7, #12]
 800d5ee:	4806      	ldr	r0, [pc, #24]	; (800d608 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d5f0:	f7fc f8d6 	bl	80097a0 <HAL_SD_WriteBlocks_DMA>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d001      	beq.n	800d5fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3718      	adds	r7, #24
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	20021c3c 	.word	0x20021c3c

0800d60c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d610:	4805      	ldr	r0, [pc, #20]	; (800d628 <BSP_SD_GetCardState+0x1c>)
 800d612:	f7fc fd7d 	bl	800a110 <HAL_SD_GetCardState>
 800d616:	4603      	mov	r3, r0
 800d618:	2b04      	cmp	r3, #4
 800d61a:	bf14      	ite	ne
 800d61c:	2301      	movne	r3, #1
 800d61e:	2300      	moveq	r3, #0
 800d620:	b2db      	uxtb	r3, r3
}
 800d622:	4618      	mov	r0, r3
 800d624:	bd80      	pop	{r7, pc}
 800d626:	bf00      	nop
 800d628:	20021c3c 	.word	0x20021c3c

0800d62c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d634:	6879      	ldr	r1, [r7, #4]
 800d636:	4803      	ldr	r0, [pc, #12]	; (800d644 <BSP_SD_GetCardInfo+0x18>)
 800d638:	f7fc fcc2 	bl	8009fc0 <HAL_SD_GetCardInfo>
}
 800d63c:	bf00      	nop
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	20021c3c 	.word	0x20021c3c

0800d648 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d650:	f000 f818 	bl	800d684 <BSP_SD_AbortCallback>
}
 800d654:	bf00      	nop
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d664:	f000 f9a8 	bl	800d9b8 <BSP_SD_WriteCpltCallback>
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d678:	f000 f9aa 	bl	800d9d0 <BSP_SD_ReadCpltCallback>
}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d684:	b480      	push	{r7}
 800d686:	af00      	add	r7, sp, #0

}
 800d688:	bf00      	nop
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b082      	sub	sp, #8
 800d696:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d698:	2301      	movs	r3, #1
 800d69a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d69c:	f000 f80c 	bl	800d6b8 <BSP_PlatformIsDetected>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	b2db      	uxtb	r3, r3
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d6c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d6c6:	4806      	ldr	r0, [pc, #24]	; (800d6e0 <BSP_PlatformIsDetected+0x28>)
 800d6c8:	f7fa f85e 	bl	8007788 <HAL_GPIO_ReadPin>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d6d6:	79fb      	ldrb	r3, [r7, #7]
}
 800d6d8:	4618      	mov	r0, r3
 800d6da:	3708      	adds	r7, #8
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	40020000 	.word	0x40020000

0800d6e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d6ec:	f7f8 fdc2 	bl	8006274 <HAL_GetTick>
 800d6f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d6f2:	e006      	b.n	800d702 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d6f4:	f7ff ff8a 	bl	800d60c <BSP_SD_GetCardState>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d6fe:	2300      	movs	r3, #0
 800d700:	e009      	b.n	800d716 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d702:	f7f8 fdb7 	bl	8006274 <HAL_GetTick>
 800d706:	4602      	mov	r2, r0
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	429a      	cmp	r2, r3
 800d710:	d8f0      	bhi.n	800d6f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d712:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
	...

0800d720 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	4603      	mov	r3, r0
 800d728:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d72a:	4b0b      	ldr	r3, [pc, #44]	; (800d758 <SD_CheckStatus+0x38>)
 800d72c:	2201      	movs	r2, #1
 800d72e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d730:	f7ff ff6c 	bl	800d60c <BSP_SD_GetCardState>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d107      	bne.n	800d74a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d73a:	4b07      	ldr	r3, [pc, #28]	; (800d758 <SD_CheckStatus+0x38>)
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	b2db      	uxtb	r3, r3
 800d740:	f023 0301 	bic.w	r3, r3, #1
 800d744:	b2da      	uxtb	r2, r3
 800d746:	4b04      	ldr	r3, [pc, #16]	; (800d758 <SD_CheckStatus+0x38>)
 800d748:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d74a:	4b03      	ldr	r3, [pc, #12]	; (800d758 <SD_CheckStatus+0x38>)
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	b2db      	uxtb	r3, r3
}
 800d750:	4618      	mov	r0, r3
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	20000009 	.word	0x20000009

0800d75c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	4603      	mov	r3, r0
 800d764:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d766:	f7ff fef7 	bl	800d558 <BSP_SD_Init>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d107      	bne.n	800d780 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff ffd4 	bl	800d720 <SD_CheckStatus>
 800d778:	4603      	mov	r3, r0
 800d77a:	461a      	mov	r2, r3
 800d77c:	4b04      	ldr	r3, [pc, #16]	; (800d790 <SD_initialize+0x34>)
 800d77e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d780:	4b03      	ldr	r3, [pc, #12]	; (800d790 <SD_initialize+0x34>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	b2db      	uxtb	r3, r3
}
 800d786:	4618      	mov	r0, r3
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	20000009 	.word	0x20000009

0800d794 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	4603      	mov	r3, r0
 800d79c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7ff ffbd 	bl	800d720 <SD_CheckStatus>
 800d7a6:	4603      	mov	r3, r0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	603b      	str	r3, [r7, #0]
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d7c4:	f247 5030 	movw	r0, #30000	; 0x7530
 800d7c8:	f7ff ff8c 	bl	800d6e4 <SD_CheckStatusWithTimeout>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da01      	bge.n	800d7d6 <SD_read+0x26>
  {
    return res;
 800d7d2:	7dfb      	ldrb	r3, [r7, #23]
 800d7d4:	e03b      	b.n	800d84e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d7d6:	683a      	ldr	r2, [r7, #0]
 800d7d8:	6879      	ldr	r1, [r7, #4]
 800d7da:	68b8      	ldr	r0, [r7, #8]
 800d7dc:	f7ff fee2 	bl	800d5a4 <BSP_SD_ReadBlocks_DMA>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d132      	bne.n	800d84c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d7e6:	4b1c      	ldr	r3, [pc, #112]	; (800d858 <SD_read+0xa8>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d7ec:	f7f8 fd42 	bl	8006274 <HAL_GetTick>
 800d7f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d7f2:	bf00      	nop
 800d7f4:	4b18      	ldr	r3, [pc, #96]	; (800d858 <SD_read+0xa8>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d108      	bne.n	800d80e <SD_read+0x5e>
 800d7fc:	f7f8 fd3a 	bl	8006274 <HAL_GetTick>
 800d800:	4602      	mov	r2, r0
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	1ad3      	subs	r3, r2, r3
 800d806:	f247 522f 	movw	r2, #29999	; 0x752f
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d9f2      	bls.n	800d7f4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d80e:	4b12      	ldr	r3, [pc, #72]	; (800d858 <SD_read+0xa8>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d102      	bne.n	800d81c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	75fb      	strb	r3, [r7, #23]
 800d81a:	e017      	b.n	800d84c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d81c:	4b0e      	ldr	r3, [pc, #56]	; (800d858 <SD_read+0xa8>)
 800d81e:	2200      	movs	r2, #0
 800d820:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d822:	f7f8 fd27 	bl	8006274 <HAL_GetTick>
 800d826:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d828:	e007      	b.n	800d83a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d82a:	f7ff feef 	bl	800d60c <BSP_SD_GetCardState>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d102      	bne.n	800d83a <SD_read+0x8a>
          {
            res = RES_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d838:	e008      	b.n	800d84c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d83a:	f7f8 fd1b 	bl	8006274 <HAL_GetTick>
 800d83e:	4602      	mov	r2, r0
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	1ad3      	subs	r3, r2, r3
 800d844:	f247 522f 	movw	r2, #29999	; 0x752f
 800d848:	4293      	cmp	r3, r2
 800d84a:	d9ee      	bls.n	800d82a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	2001f2d4 	.word	0x2001f2d4

0800d85c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
 800d866:	603b      	str	r3, [r7, #0]
 800d868:	4603      	mov	r3, r0
 800d86a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d870:	4b24      	ldr	r3, [pc, #144]	; (800d904 <SD_write+0xa8>)
 800d872:	2200      	movs	r2, #0
 800d874:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d876:	f247 5030 	movw	r0, #30000	; 0x7530
 800d87a:	f7ff ff33 	bl	800d6e4 <SD_CheckStatusWithTimeout>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	da01      	bge.n	800d888 <SD_write+0x2c>
  {
    return res;
 800d884:	7dfb      	ldrb	r3, [r7, #23]
 800d886:	e038      	b.n	800d8fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	6879      	ldr	r1, [r7, #4]
 800d88c:	68b8      	ldr	r0, [r7, #8]
 800d88e:	f7ff fea3 	bl	800d5d8 <BSP_SD_WriteBlocks_DMA>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d12f      	bne.n	800d8f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d898:	f7f8 fcec 	bl	8006274 <HAL_GetTick>
 800d89c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d89e:	bf00      	nop
 800d8a0:	4b18      	ldr	r3, [pc, #96]	; (800d904 <SD_write+0xa8>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d108      	bne.n	800d8ba <SD_write+0x5e>
 800d8a8:	f7f8 fce4 	bl	8006274 <HAL_GetTick>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	693b      	ldr	r3, [r7, #16]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d9f2      	bls.n	800d8a0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d8ba:	4b12      	ldr	r3, [pc, #72]	; (800d904 <SD_write+0xa8>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d102      	bne.n	800d8c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	75fb      	strb	r3, [r7, #23]
 800d8c6:	e017      	b.n	800d8f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d8c8:	4b0e      	ldr	r3, [pc, #56]	; (800d904 <SD_write+0xa8>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d8ce:	f7f8 fcd1 	bl	8006274 <HAL_GetTick>
 800d8d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d8d4:	e007      	b.n	800d8e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d8d6:	f7ff fe99 	bl	800d60c <BSP_SD_GetCardState>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d102      	bne.n	800d8e6 <SD_write+0x8a>
          {
            res = RES_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	75fb      	strb	r3, [r7, #23]
            break;
 800d8e4:	e008      	b.n	800d8f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d8e6:	f7f8 fcc5 	bl	8006274 <HAL_GetTick>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8f4:	4293      	cmp	r3, r2
 800d8f6:	d9ee      	bls.n	800d8d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	2001f2d0 	.word	0x2001f2d0

0800d908 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b08c      	sub	sp, #48	; 0x30
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	603a      	str	r2, [r7, #0]
 800d912:	71fb      	strb	r3, [r7, #7]
 800d914:	460b      	mov	r3, r1
 800d916:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d918:	2301      	movs	r3, #1
 800d91a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d91e:	4b25      	ldr	r3, [pc, #148]	; (800d9b4 <SD_ioctl+0xac>)
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <SD_ioctl+0x28>
 800d92c:	2303      	movs	r3, #3
 800d92e:	e03c      	b.n	800d9aa <SD_ioctl+0xa2>

  switch (cmd)
 800d930:	79bb      	ldrb	r3, [r7, #6]
 800d932:	2b03      	cmp	r3, #3
 800d934:	d834      	bhi.n	800d9a0 <SD_ioctl+0x98>
 800d936:	a201      	add	r2, pc, #4	; (adr r2, 800d93c <SD_ioctl+0x34>)
 800d938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d93c:	0800d94d 	.word	0x0800d94d
 800d940:	0800d955 	.word	0x0800d955
 800d944:	0800d96d 	.word	0x0800d96d
 800d948:	0800d987 	.word	0x0800d987
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d952:	e028      	b.n	800d9a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d954:	f107 030c 	add.w	r3, r7, #12
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fe67 	bl	800d62c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d96a:	e01c      	b.n	800d9a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d96c:	f107 030c 	add.w	r3, r7, #12
 800d970:	4618      	mov	r0, r3
 800d972:	f7ff fe5b 	bl	800d62c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	b29a      	uxth	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d97e:	2300      	movs	r3, #0
 800d980:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d984:	e00f      	b.n	800d9a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d986:	f107 030c 	add.w	r3, r7, #12
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7ff fe4e 	bl	800d62c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d992:	0a5a      	lsrs	r2, r3, #9
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d998:	2300      	movs	r3, #0
 800d99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d99e:	e002      	b.n	800d9a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d9a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3730      	adds	r7, #48	; 0x30
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	20000009 	.word	0x20000009

0800d9b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d9bc:	4b03      	ldr	r3, [pc, #12]	; (800d9cc <BSP_SD_WriteCpltCallback+0x14>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	601a      	str	r2, [r3, #0]
}
 800d9c2:	bf00      	nop
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr
 800d9cc:	2001f2d0 	.word	0x2001f2d0

0800d9d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d9d4:	4b03      	ldr	r3, [pc, #12]	; (800d9e4 <BSP_SD_ReadCpltCallback+0x14>)
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]
}
 800d9da:	bf00      	nop
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	2001f2d4 	.word	0x2001f2d4

0800d9e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d9f2:	79fb      	ldrb	r3, [r7, #7]
 800d9f4:	4a08      	ldr	r2, [pc, #32]	; (800da18 <disk_status+0x30>)
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	79fa      	ldrb	r2, [r7, #7]
 800da00:	4905      	ldr	r1, [pc, #20]	; (800da18 <disk_status+0x30>)
 800da02:	440a      	add	r2, r1
 800da04:	7a12      	ldrb	r2, [r2, #8]
 800da06:	4610      	mov	r0, r2
 800da08:	4798      	blx	r3
 800da0a:	4603      	mov	r3, r0
 800da0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	2001f500 	.word	0x2001f500

0800da1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800da2a:	79fb      	ldrb	r3, [r7, #7]
 800da2c:	4a0d      	ldr	r2, [pc, #52]	; (800da64 <disk_initialize+0x48>)
 800da2e:	5cd3      	ldrb	r3, [r2, r3]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d111      	bne.n	800da58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800da34:	79fb      	ldrb	r3, [r7, #7]
 800da36:	4a0b      	ldr	r2, [pc, #44]	; (800da64 <disk_initialize+0x48>)
 800da38:	2101      	movs	r1, #1
 800da3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800da3c:	79fb      	ldrb	r3, [r7, #7]
 800da3e:	4a09      	ldr	r2, [pc, #36]	; (800da64 <disk_initialize+0x48>)
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	4413      	add	r3, r2
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	79fa      	ldrb	r2, [r7, #7]
 800da4a:	4906      	ldr	r1, [pc, #24]	; (800da64 <disk_initialize+0x48>)
 800da4c:	440a      	add	r2, r1
 800da4e:	7a12      	ldrb	r2, [r2, #8]
 800da50:	4610      	mov	r0, r2
 800da52:	4798      	blx	r3
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800da58:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	2001f500 	.word	0x2001f500

0800da68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800da68:	b590      	push	{r4, r7, lr}
 800da6a:	b087      	sub	sp, #28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60b9      	str	r1, [r7, #8]
 800da70:	607a      	str	r2, [r7, #4]
 800da72:	603b      	str	r3, [r7, #0]
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	4a0a      	ldr	r2, [pc, #40]	; (800daa4 <disk_read+0x3c>)
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	689c      	ldr	r4, [r3, #8]
 800da84:	7bfb      	ldrb	r3, [r7, #15]
 800da86:	4a07      	ldr	r2, [pc, #28]	; (800daa4 <disk_read+0x3c>)
 800da88:	4413      	add	r3, r2
 800da8a:	7a18      	ldrb	r0, [r3, #8]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	47a0      	blx	r4
 800da94:	4603      	mov	r3, r0
 800da96:	75fb      	strb	r3, [r7, #23]
  return res;
 800da98:	7dfb      	ldrb	r3, [r7, #23]
}
 800da9a:	4618      	mov	r0, r3
 800da9c:	371c      	adds	r7, #28
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd90      	pop	{r4, r7, pc}
 800daa2:	bf00      	nop
 800daa4:	2001f500 	.word	0x2001f500

0800daa8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800daa8:	b590      	push	{r4, r7, lr}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	607a      	str	r2, [r7, #4]
 800dab2:	603b      	str	r3, [r7, #0]
 800dab4:	4603      	mov	r3, r0
 800dab6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dab8:	7bfb      	ldrb	r3, [r7, #15]
 800daba:	4a0a      	ldr	r2, [pc, #40]	; (800dae4 <disk_write+0x3c>)
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	68dc      	ldr	r4, [r3, #12]
 800dac4:	7bfb      	ldrb	r3, [r7, #15]
 800dac6:	4a07      	ldr	r2, [pc, #28]	; (800dae4 <disk_write+0x3c>)
 800dac8:	4413      	add	r3, r2
 800daca:	7a18      	ldrb	r0, [r3, #8]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	68b9      	ldr	r1, [r7, #8]
 800dad2:	47a0      	blx	r4
 800dad4:	4603      	mov	r3, r0
 800dad6:	75fb      	strb	r3, [r7, #23]
  return res;
 800dad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	371c      	adds	r7, #28
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd90      	pop	{r4, r7, pc}
 800dae2:	bf00      	nop
 800dae4:	2001f500 	.word	0x2001f500

0800dae8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	4603      	mov	r3, r0
 800daf0:	603a      	str	r2, [r7, #0]
 800daf2:	71fb      	strb	r3, [r7, #7]
 800daf4:	460b      	mov	r3, r1
 800daf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800daf8:	79fb      	ldrb	r3, [r7, #7]
 800dafa:	4a09      	ldr	r2, [pc, #36]	; (800db20 <disk_ioctl+0x38>)
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	4413      	add	r3, r2
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	691b      	ldr	r3, [r3, #16]
 800db04:	79fa      	ldrb	r2, [r7, #7]
 800db06:	4906      	ldr	r1, [pc, #24]	; (800db20 <disk_ioctl+0x38>)
 800db08:	440a      	add	r2, r1
 800db0a:	7a10      	ldrb	r0, [r2, #8]
 800db0c:	79b9      	ldrb	r1, [r7, #6]
 800db0e:	683a      	ldr	r2, [r7, #0]
 800db10:	4798      	blx	r3
 800db12:	4603      	mov	r3, r0
 800db14:	73fb      	strb	r3, [r7, #15]
  return res;
 800db16:	7bfb      	ldrb	r3, [r7, #15]
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3710      	adds	r7, #16
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	2001f500 	.word	0x2001f500

0800db24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	3301      	adds	r3, #1
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800db34:	89fb      	ldrh	r3, [r7, #14]
 800db36:	021b      	lsls	r3, r3, #8
 800db38:	b21a      	sxth	r2, r3
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	b21b      	sxth	r3, r3
 800db40:	4313      	orrs	r3, r2
 800db42:	b21b      	sxth	r3, r3
 800db44:	81fb      	strh	r3, [r7, #14]
	return rv;
 800db46:	89fb      	ldrh	r3, [r7, #14]
}
 800db48:	4618      	mov	r0, r3
 800db4a:	3714      	adds	r7, #20
 800db4c:	46bd      	mov	sp, r7
 800db4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db52:	4770      	bx	lr

0800db54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	3303      	adds	r3, #3
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	021b      	lsls	r3, r3, #8
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	3202      	adds	r2, #2
 800db6c:	7812      	ldrb	r2, [r2, #0]
 800db6e:	4313      	orrs	r3, r2
 800db70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	021b      	lsls	r3, r3, #8
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	3201      	adds	r2, #1
 800db7a:	7812      	ldrb	r2, [r2, #0]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	021b      	lsls	r3, r3, #8
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	7812      	ldrb	r2, [r2, #0]
 800db88:	4313      	orrs	r3, r2
 800db8a:	60fb      	str	r3, [r7, #12]
	return rv;
 800db8c:	68fb      	ldr	r3, [r7, #12]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr

0800db9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800db9a:	b480      	push	{r7}
 800db9c:	b083      	sub	sp, #12
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	460b      	mov	r3, r1
 800dba4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	1c5a      	adds	r2, r3, #1
 800dbaa:	607a      	str	r2, [r7, #4]
 800dbac:	887a      	ldrh	r2, [r7, #2]
 800dbae:	b2d2      	uxtb	r2, r2
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	887b      	ldrh	r3, [r7, #2]
 800dbb4:	0a1b      	lsrs	r3, r3, #8
 800dbb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	1c5a      	adds	r2, r3, #1
 800dbbc:	607a      	str	r2, [r7, #4]
 800dbbe:	887a      	ldrh	r2, [r7, #2]
 800dbc0:	b2d2      	uxtb	r2, r2
 800dbc2:	701a      	strb	r2, [r3, #0]
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	1c5a      	adds	r2, r3, #1
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	b2d2      	uxtb	r2, r2
 800dbe4:	701a      	strb	r2, [r3, #0]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	0a1b      	lsrs	r3, r3, #8
 800dbea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	1c5a      	adds	r2, r3, #1
 800dbf0:	607a      	str	r2, [r7, #4]
 800dbf2:	683a      	ldr	r2, [r7, #0]
 800dbf4:	b2d2      	uxtb	r2, r2
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	0a1b      	lsrs	r3, r3, #8
 800dbfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	683a      	ldr	r2, [r7, #0]
 800dc06:	b2d2      	uxtb	r2, r2
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	0a1b      	lsrs	r3, r3, #8
 800dc0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	1c5a      	adds	r2, r3, #1
 800dc14:	607a      	str	r2, [r7, #4]
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	b2d2      	uxtb	r2, r2
 800dc1a:	701a      	strb	r2, [r3, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dc28:	b480      	push	{r7}
 800dc2a:	b087      	sub	sp, #28
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00d      	beq.n	800dc5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	1c53      	adds	r3, r2, #1
 800dc46:	613b      	str	r3, [r7, #16]
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	1c59      	adds	r1, r3, #1
 800dc4c:	6179      	str	r1, [r7, #20]
 800dc4e:	7812      	ldrb	r2, [r2, #0]
 800dc50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3b01      	subs	r3, #1
 800dc56:	607b      	str	r3, [r7, #4]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1f1      	bne.n	800dc42 <mem_cpy+0x1a>
	}
}
 800dc5e:	bf00      	nop
 800dc60:	371c      	adds	r7, #28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dc6a:	b480      	push	{r7}
 800dc6c:	b087      	sub	sp, #28
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	60f8      	str	r0, [r7, #12]
 800dc72:	60b9      	str	r1, [r7, #8]
 800dc74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	1c5a      	adds	r2, r3, #1
 800dc7e:	617a      	str	r2, [r7, #20]
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	b2d2      	uxtb	r2, r2
 800dc84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	3b01      	subs	r3, #1
 800dc8a:	607b      	str	r3, [r7, #4]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d1f3      	bne.n	800dc7a <mem_set+0x10>
}
 800dc92:	bf00      	nop
 800dc94:	371c      	adds	r7, #28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr

0800dc9e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dc9e:	b480      	push	{r7}
 800dca0:	b089      	sub	sp, #36	; 0x24
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	61fb      	str	r3, [r7, #28]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	1c5a      	adds	r2, r3, #1
 800dcba:	61fa      	str	r2, [r7, #28]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	61ba      	str	r2, [r7, #24]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	1acb      	subs	r3, r1, r3
 800dcca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <mem_cmp+0x40>
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d0eb      	beq.n	800dcb6 <mem_cmp+0x18>

	return r;
 800dcde:	697b      	ldr	r3, [r7, #20]
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3724      	adds	r7, #36	; 0x24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr

0800dcec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dcf6:	e002      	b.n	800dcfe <chk_chr+0x12>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	607b      	str	r3, [r7, #4]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d005      	beq.n	800dd12 <chk_chr+0x26>
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d1f2      	bne.n	800dcf8 <chk_chr+0xc>
	return *str;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	781b      	ldrb	r3, [r3, #0]
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	370c      	adds	r7, #12
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
	...

0800dd24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b085      	sub	sp, #20
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd2e:	2300      	movs	r3, #0
 800dd30:	60bb      	str	r3, [r7, #8]
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	60fb      	str	r3, [r7, #12]
 800dd36:	e029      	b.n	800dd8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dd38:	4a27      	ldr	r2, [pc, #156]	; (800ddd8 <chk_lock+0xb4>)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	011b      	lsls	r3, r3, #4
 800dd3e:	4413      	add	r3, r2
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d01d      	beq.n	800dd82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd46:	4a24      	ldr	r2, [pc, #144]	; (800ddd8 <chk_lock+0xb4>)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	011b      	lsls	r3, r3, #4
 800dd4c:	4413      	add	r3, r2
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	429a      	cmp	r2, r3
 800dd56:	d116      	bne.n	800dd86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dd58:	4a1f      	ldr	r2, [pc, #124]	; (800ddd8 <chk_lock+0xb4>)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	011b      	lsls	r3, r3, #4
 800dd5e:	4413      	add	r3, r2
 800dd60:	3304      	adds	r3, #4
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d10c      	bne.n	800dd86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dd6c:	4a1a      	ldr	r2, [pc, #104]	; (800ddd8 <chk_lock+0xb4>)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	011b      	lsls	r3, r3, #4
 800dd72:	4413      	add	r3, r2
 800dd74:	3308      	adds	r3, #8
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d102      	bne.n	800dd86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dd80:	e007      	b.n	800dd92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dd82:	2301      	movs	r3, #1
 800dd84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	60fb      	str	r3, [r7, #12]
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d9d2      	bls.n	800dd38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d109      	bne.n	800ddac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d102      	bne.n	800dda4 <chk_lock+0x80>
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	2b02      	cmp	r3, #2
 800dda2:	d101      	bne.n	800dda8 <chk_lock+0x84>
 800dda4:	2300      	movs	r3, #0
 800dda6:	e010      	b.n	800ddca <chk_lock+0xa6>
 800dda8:	2312      	movs	r3, #18
 800ddaa:	e00e      	b.n	800ddca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d108      	bne.n	800ddc4 <chk_lock+0xa0>
 800ddb2:	4a09      	ldr	r2, [pc, #36]	; (800ddd8 <chk_lock+0xb4>)
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	011b      	lsls	r3, r3, #4
 800ddb8:	4413      	add	r3, r2
 800ddba:	330c      	adds	r3, #12
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddc2:	d101      	bne.n	800ddc8 <chk_lock+0xa4>
 800ddc4:	2310      	movs	r3, #16
 800ddc6:	e000      	b.n	800ddca <chk_lock+0xa6>
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3714      	adds	r7, #20
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	2001f2e0 	.word	0x2001f2e0

0800dddc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dddc:	b480      	push	{r7}
 800ddde:	b083      	sub	sp, #12
 800dde0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dde2:	2300      	movs	r3, #0
 800dde4:	607b      	str	r3, [r7, #4]
 800dde6:	e002      	b.n	800ddee <enq_lock+0x12>
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3301      	adds	r3, #1
 800ddec:	607b      	str	r3, [r7, #4]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d806      	bhi.n	800de02 <enq_lock+0x26>
 800ddf4:	4a09      	ldr	r2, [pc, #36]	; (800de1c <enq_lock+0x40>)
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	011b      	lsls	r3, r3, #4
 800ddfa:	4413      	add	r3, r2
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1f2      	bne.n	800dde8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2b02      	cmp	r3, #2
 800de06:	bf14      	ite	ne
 800de08:	2301      	movne	r3, #1
 800de0a:	2300      	moveq	r3, #0
 800de0c:	b2db      	uxtb	r3, r3
}
 800de0e:	4618      	mov	r0, r3
 800de10:	370c      	adds	r7, #12
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	2001f2e0 	.word	0x2001f2e0

0800de20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	e01f      	b.n	800de70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800de30:	4a41      	ldr	r2, [pc, #260]	; (800df38 <inc_lock+0x118>)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	011b      	lsls	r3, r3, #4
 800de36:	4413      	add	r3, r2
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d113      	bne.n	800de6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800de42:	4a3d      	ldr	r2, [pc, #244]	; (800df38 <inc_lock+0x118>)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	011b      	lsls	r3, r3, #4
 800de48:	4413      	add	r3, r2
 800de4a:	3304      	adds	r3, #4
 800de4c:	681a      	ldr	r2, [r3, #0]
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800de52:	429a      	cmp	r2, r3
 800de54:	d109      	bne.n	800de6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800de56:	4a38      	ldr	r2, [pc, #224]	; (800df38 <inc_lock+0x118>)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	011b      	lsls	r3, r3, #4
 800de5c:	4413      	add	r3, r2
 800de5e:	3308      	adds	r3, #8
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800de66:	429a      	cmp	r2, r3
 800de68:	d006      	beq.n	800de78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	3301      	adds	r3, #1
 800de6e:	60fb      	str	r3, [r7, #12]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b01      	cmp	r3, #1
 800de74:	d9dc      	bls.n	800de30 <inc_lock+0x10>
 800de76:	e000      	b.n	800de7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800de78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d132      	bne.n	800dee6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de80:	2300      	movs	r3, #0
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e002      	b.n	800de8c <inc_lock+0x6c>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	3301      	adds	r3, #1
 800de8a:	60fb      	str	r3, [r7, #12]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d806      	bhi.n	800dea0 <inc_lock+0x80>
 800de92:	4a29      	ldr	r2, [pc, #164]	; (800df38 <inc_lock+0x118>)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	011b      	lsls	r3, r3, #4
 800de98:	4413      	add	r3, r2
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1f2      	bne.n	800de86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d101      	bne.n	800deaa <inc_lock+0x8a>
 800dea6:	2300      	movs	r3, #0
 800dea8:	e040      	b.n	800df2c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	4922      	ldr	r1, [pc, #136]	; (800df38 <inc_lock+0x118>)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	011b      	lsls	r3, r3, #4
 800deb4:	440b      	add	r3, r1
 800deb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	689a      	ldr	r2, [r3, #8]
 800debc:	491e      	ldr	r1, [pc, #120]	; (800df38 <inc_lock+0x118>)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	011b      	lsls	r3, r3, #4
 800dec2:	440b      	add	r3, r1
 800dec4:	3304      	adds	r3, #4
 800dec6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	695a      	ldr	r2, [r3, #20]
 800decc:	491a      	ldr	r1, [pc, #104]	; (800df38 <inc_lock+0x118>)
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	011b      	lsls	r3, r3, #4
 800ded2:	440b      	add	r3, r1
 800ded4:	3308      	adds	r3, #8
 800ded6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ded8:	4a17      	ldr	r2, [pc, #92]	; (800df38 <inc_lock+0x118>)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	011b      	lsls	r3, r3, #4
 800dede:	4413      	add	r3, r2
 800dee0:	330c      	adds	r3, #12
 800dee2:	2200      	movs	r2, #0
 800dee4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d009      	beq.n	800df00 <inc_lock+0xe0>
 800deec:	4a12      	ldr	r2, [pc, #72]	; (800df38 <inc_lock+0x118>)
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	011b      	lsls	r3, r3, #4
 800def2:	4413      	add	r3, r2
 800def4:	330c      	adds	r3, #12
 800def6:	881b      	ldrh	r3, [r3, #0]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d001      	beq.n	800df00 <inc_lock+0xe0>
 800defc:	2300      	movs	r3, #0
 800defe:	e015      	b.n	800df2c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d108      	bne.n	800df18 <inc_lock+0xf8>
 800df06:	4a0c      	ldr	r2, [pc, #48]	; (800df38 <inc_lock+0x118>)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	011b      	lsls	r3, r3, #4
 800df0c:	4413      	add	r3, r2
 800df0e:	330c      	adds	r3, #12
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	3301      	adds	r3, #1
 800df14:	b29a      	uxth	r2, r3
 800df16:	e001      	b.n	800df1c <inc_lock+0xfc>
 800df18:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df1c:	4906      	ldr	r1, [pc, #24]	; (800df38 <inc_lock+0x118>)
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	011b      	lsls	r3, r3, #4
 800df22:	440b      	add	r3, r1
 800df24:	330c      	adds	r3, #12
 800df26:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	3301      	adds	r3, #1
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	2001f2e0 	.word	0x2001f2e0

0800df3c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	3b01      	subs	r3, #1
 800df48:	607b      	str	r3, [r7, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d825      	bhi.n	800df9c <dec_lock+0x60>
		n = Files[i].ctr;
 800df50:	4a17      	ldr	r2, [pc, #92]	; (800dfb0 <dec_lock+0x74>)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	011b      	lsls	r3, r3, #4
 800df56:	4413      	add	r3, r2
 800df58:	330c      	adds	r3, #12
 800df5a:	881b      	ldrh	r3, [r3, #0]
 800df5c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800df5e:	89fb      	ldrh	r3, [r7, #14]
 800df60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df64:	d101      	bne.n	800df6a <dec_lock+0x2e>
 800df66:	2300      	movs	r3, #0
 800df68:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800df6a:	89fb      	ldrh	r3, [r7, #14]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d002      	beq.n	800df76 <dec_lock+0x3a>
 800df70:	89fb      	ldrh	r3, [r7, #14]
 800df72:	3b01      	subs	r3, #1
 800df74:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800df76:	4a0e      	ldr	r2, [pc, #56]	; (800dfb0 <dec_lock+0x74>)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	011b      	lsls	r3, r3, #4
 800df7c:	4413      	add	r3, r2
 800df7e:	330c      	adds	r3, #12
 800df80:	89fa      	ldrh	r2, [r7, #14]
 800df82:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800df84:	89fb      	ldrh	r3, [r7, #14]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d105      	bne.n	800df96 <dec_lock+0x5a>
 800df8a:	4a09      	ldr	r2, [pc, #36]	; (800dfb0 <dec_lock+0x74>)
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	011b      	lsls	r3, r3, #4
 800df90:	4413      	add	r3, r2
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800df96:	2300      	movs	r3, #0
 800df98:	737b      	strb	r3, [r7, #13]
 800df9a:	e001      	b.n	800dfa0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800df9c:	2302      	movs	r3, #2
 800df9e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dfa0:	7b7b      	ldrb	r3, [r7, #13]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfac:	4770      	bx	lr
 800dfae:	bf00      	nop
 800dfb0:	2001f2e0 	.word	0x2001f2e0

0800dfb4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	60fb      	str	r3, [r7, #12]
 800dfc0:	e010      	b.n	800dfe4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dfc2:	4a0d      	ldr	r2, [pc, #52]	; (800dff8 <clear_lock+0x44>)
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	011b      	lsls	r3, r3, #4
 800dfc8:	4413      	add	r3, r2
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d105      	bne.n	800dfde <clear_lock+0x2a>
 800dfd2:	4a09      	ldr	r2, [pc, #36]	; (800dff8 <clear_lock+0x44>)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	011b      	lsls	r3, r3, #4
 800dfd8:	4413      	add	r3, r2
 800dfda:	2200      	movs	r2, #0
 800dfdc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	2b01      	cmp	r3, #1
 800dfe8:	d9eb      	bls.n	800dfc2 <clear_lock+0xe>
	}
}
 800dfea:	bf00      	nop
 800dfec:	3714      	adds	r7, #20
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	2001f2e0 	.word	0x2001f2e0

0800dffc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e004:	2300      	movs	r3, #0
 800e006:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	78db      	ldrb	r3, [r3, #3]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d034      	beq.n	800e07a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e014:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7858      	ldrb	r0, [r3, #1]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e020:	2301      	movs	r3, #1
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	f7ff fd40 	bl	800daa8 <disk_write>
 800e028:	4603      	mov	r3, r0
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e02e:	2301      	movs	r3, #1
 800e030:	73fb      	strb	r3, [r7, #15]
 800e032:	e022      	b.n	800e07a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	1ad2      	subs	r2, r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e046:	429a      	cmp	r2, r3
 800e048:	d217      	bcs.n	800e07a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	789b      	ldrb	r3, [r3, #2]
 800e04e:	613b      	str	r3, [r7, #16]
 800e050:	e010      	b.n	800e074 <sync_window+0x78>
					wsect += fs->fsize;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	4413      	add	r3, r2
 800e05a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7858      	ldrb	r0, [r3, #1]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e066:	2301      	movs	r3, #1
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	f7ff fd1d 	bl	800daa8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	3b01      	subs	r3, #1
 800e072:	613b      	str	r3, [r7, #16]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d8eb      	bhi.n	800e052 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3718      	adds	r7, #24
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e08e:	2300      	movs	r3, #0
 800e090:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e096:	683a      	ldr	r2, [r7, #0]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d01b      	beq.n	800e0d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7ff ffad 	bl	800dffc <sync_window>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e0a6:	7bfb      	ldrb	r3, [r7, #15]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d113      	bne.n	800e0d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	7858      	ldrb	r0, [r3, #1]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	683a      	ldr	r2, [r7, #0]
 800e0ba:	f7ff fcd5 	bl	800da68 <disk_read>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d004      	beq.n	800e0ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e0c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800e0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3710      	adds	r7, #16
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	bd80      	pop	{r7, pc}
	...

0800e0e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f7ff ff87 	bl	800dffc <sync_window>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e0f2:	7bfb      	ldrb	r3, [r7, #15]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d159      	bne.n	800e1ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	2b03      	cmp	r3, #3
 800e0fe:	d149      	bne.n	800e194 <sync_fs+0xb4>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	791b      	ldrb	r3, [r3, #4]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d145      	bne.n	800e194 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	899b      	ldrh	r3, [r3, #12]
 800e112:	461a      	mov	r2, r3
 800e114:	2100      	movs	r1, #0
 800e116:	f7ff fda8 	bl	800dc6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	333c      	adds	r3, #60	; 0x3c
 800e11e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e122:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff fd37 	bl	800db9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	333c      	adds	r3, #60	; 0x3c
 800e130:	4921      	ldr	r1, [pc, #132]	; (800e1b8 <sync_fs+0xd8>)
 800e132:	4618      	mov	r0, r3
 800e134:	f7ff fd4c 	bl	800dbd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	333c      	adds	r3, #60	; 0x3c
 800e13c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e140:	491e      	ldr	r1, [pc, #120]	; (800e1bc <sync_fs+0xdc>)
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff fd44 	bl	800dbd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	333c      	adds	r3, #60	; 0x3c
 800e14c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	699b      	ldr	r3, [r3, #24]
 800e154:	4619      	mov	r1, r3
 800e156:	4610      	mov	r0, r2
 800e158:	f7ff fd3a 	bl	800dbd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	333c      	adds	r3, #60	; 0x3c
 800e160:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	695b      	ldr	r3, [r3, #20]
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f7ff fd30 	bl	800dbd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	7858      	ldrb	r0, [r3, #1]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e188:	2301      	movs	r3, #1
 800e18a:	f7ff fc8d 	bl	800daa8 <disk_write>
			fs->fsi_flag = 0;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2200      	movs	r2, #0
 800e192:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	785b      	ldrb	r3, [r3, #1]
 800e198:	2200      	movs	r2, #0
 800e19a:	2100      	movs	r1, #0
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7ff fca3 	bl	800dae8 <disk_ioctl>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <sync_fs+0xcc>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	41615252 	.word	0x41615252
 800e1bc:	61417272 	.word	0x61417272

0800e1c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	3b02      	subs	r3, #2
 800e1ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6a1b      	ldr	r3, [r3, #32]
 800e1d4:	3b02      	subs	r3, #2
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d301      	bcc.n	800e1e0 <clust2sect+0x20>
 800e1dc:	2300      	movs	r3, #0
 800e1de:	e008      	b.n	800e1f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	895b      	ldrh	r3, [r3, #10]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	fb03 f202 	mul.w	r2, r3, r2
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f0:	4413      	add	r3, r2
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b086      	sub	sp, #24
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
 800e206:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d904      	bls.n	800e21e <get_fat+0x20>
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	6a1b      	ldr	r3, [r3, #32]
 800e218:	683a      	ldr	r2, [r7, #0]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d302      	bcc.n	800e224 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e21e:	2301      	movs	r3, #1
 800e220:	617b      	str	r3, [r7, #20]
 800e222:	e0b7      	b.n	800e394 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e224:	f04f 33ff 	mov.w	r3, #4294967295
 800e228:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e22a:	693b      	ldr	r3, [r7, #16]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d05a      	beq.n	800e2e8 <get_fat+0xea>
 800e232:	2b03      	cmp	r3, #3
 800e234:	d07d      	beq.n	800e332 <get_fat+0x134>
 800e236:	2b01      	cmp	r3, #1
 800e238:	f040 80a2 	bne.w	800e380 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	085b      	lsrs	r3, r3, #1
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	4413      	add	r3, r2
 800e248:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	899b      	ldrh	r3, [r3, #12]
 800e252:	4619      	mov	r1, r3
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	fbb3 f3f1 	udiv	r3, r3, r1
 800e25a:	4413      	add	r3, r2
 800e25c:	4619      	mov	r1, r3
 800e25e:	6938      	ldr	r0, [r7, #16]
 800e260:	f7ff ff10 	bl	800e084 <move_window>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	f040 808d 	bne.w	800e386 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	1c5a      	adds	r2, r3, #1
 800e270:	60fa      	str	r2, [r7, #12]
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	8992      	ldrh	r2, [r2, #12]
 800e276:	fbb3 f1f2 	udiv	r1, r3, r2
 800e27a:	fb02 f201 	mul.w	r2, r2, r1
 800e27e:	1a9b      	subs	r3, r3, r2
 800e280:	693a      	ldr	r2, [r7, #16]
 800e282:	4413      	add	r3, r2
 800e284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e288:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	899b      	ldrh	r3, [r3, #12]
 800e292:	4619      	mov	r1, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	fbb3 f3f1 	udiv	r3, r3, r1
 800e29a:	4413      	add	r3, r2
 800e29c:	4619      	mov	r1, r3
 800e29e:	6938      	ldr	r0, [r7, #16]
 800e2a0:	f7ff fef0 	bl	800e084 <move_window>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d16f      	bne.n	800e38a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	899b      	ldrh	r3, [r3, #12]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2b6:	fb02 f201 	mul.w	r2, r2, r1
 800e2ba:	1a9b      	subs	r3, r3, r2
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	4413      	add	r3, r2
 800e2c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2c4:	021b      	lsls	r3, r3, #8
 800e2c6:	461a      	mov	r2, r3
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d002      	beq.n	800e2de <get_fat+0xe0>
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	091b      	lsrs	r3, r3, #4
 800e2dc:	e002      	b.n	800e2e4 <get_fat+0xe6>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2e4:	617b      	str	r3, [r7, #20]
			break;
 800e2e6:	e055      	b.n	800e394 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	899b      	ldrh	r3, [r3, #12]
 800e2f0:	085b      	lsrs	r3, r3, #1
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e2fc:	4413      	add	r3, r2
 800e2fe:	4619      	mov	r1, r3
 800e300:	6938      	ldr	r0, [r7, #16]
 800e302:	f7ff febf 	bl	800e084 <move_window>
 800e306:	4603      	mov	r3, r0
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d140      	bne.n	800e38e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	693a      	ldr	r2, [r7, #16]
 800e318:	8992      	ldrh	r2, [r2, #12]
 800e31a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e31e:	fb02 f200 	mul.w	r2, r2, r0
 800e322:	1a9b      	subs	r3, r3, r2
 800e324:	440b      	add	r3, r1
 800e326:	4618      	mov	r0, r3
 800e328:	f7ff fbfc 	bl	800db24 <ld_word>
 800e32c:	4603      	mov	r3, r0
 800e32e:	617b      	str	r3, [r7, #20]
			break;
 800e330:	e030      	b.n	800e394 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	899b      	ldrh	r3, [r3, #12]
 800e33a:	089b      	lsrs	r3, r3, #2
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	4619      	mov	r1, r3
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	fbb3 f3f1 	udiv	r3, r3, r1
 800e346:	4413      	add	r3, r2
 800e348:	4619      	mov	r1, r3
 800e34a:	6938      	ldr	r0, [r7, #16]
 800e34c:	f7ff fe9a 	bl	800e084 <move_window>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d11d      	bne.n	800e392 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	009b      	lsls	r3, r3, #2
 800e360:	693a      	ldr	r2, [r7, #16]
 800e362:	8992      	ldrh	r2, [r2, #12]
 800e364:	fbb3 f0f2 	udiv	r0, r3, r2
 800e368:	fb02 f200 	mul.w	r2, r2, r0
 800e36c:	1a9b      	subs	r3, r3, r2
 800e36e:	440b      	add	r3, r1
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff fbef 	bl	800db54 <ld_dword>
 800e376:	4603      	mov	r3, r0
 800e378:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e37c:	617b      	str	r3, [r7, #20]
			break;
 800e37e:	e009      	b.n	800e394 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e380:	2301      	movs	r3, #1
 800e382:	617b      	str	r3, [r7, #20]
 800e384:	e006      	b.n	800e394 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e386:	bf00      	nop
 800e388:	e004      	b.n	800e394 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e38a:	bf00      	nop
 800e38c:	e002      	b.n	800e394 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e38e:	bf00      	nop
 800e390:	e000      	b.n	800e394 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e392:	bf00      	nop
		}
	}

	return val;
 800e394:	697b      	ldr	r3, [r7, #20]
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e39e:	b590      	push	{r4, r7, lr}
 800e3a0:	b089      	sub	sp, #36	; 0x24
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e3aa:	2302      	movs	r3, #2
 800e3ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e3ae:	68bb      	ldr	r3, [r7, #8]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	f240 8106 	bls.w	800e5c2 <put_fat+0x224>
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	6a1b      	ldr	r3, [r3, #32]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	429a      	cmp	r2, r3
 800e3be:	f080 8100 	bcs.w	800e5c2 <put_fat+0x224>
		switch (fs->fs_type) {
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b02      	cmp	r3, #2
 800e3c8:	f000 8088 	beq.w	800e4dc <put_fat+0x13e>
 800e3cc:	2b03      	cmp	r3, #3
 800e3ce:	f000 80b0 	beq.w	800e532 <put_fat+0x194>
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	f040 80f5 	bne.w	800e5c2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	61bb      	str	r3, [r7, #24]
 800e3dc:	69bb      	ldr	r3, [r7, #24]
 800e3de:	085b      	lsrs	r3, r3, #1
 800e3e0:	69ba      	ldr	r2, [r7, #24]
 800e3e2:	4413      	add	r3, r2
 800e3e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	899b      	ldrh	r3, [r3, #12]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3f6:	4413      	add	r3, r2
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f7ff fe42 	bl	800e084 <move_window>
 800e400:	4603      	mov	r3, r0
 800e402:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e404:	7ffb      	ldrb	r3, [r7, #31]
 800e406:	2b00      	cmp	r3, #0
 800e408:	f040 80d4 	bne.w	800e5b4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	1c5a      	adds	r2, r3, #1
 800e416:	61ba      	str	r2, [r7, #24]
 800e418:	68fa      	ldr	r2, [r7, #12]
 800e41a:	8992      	ldrh	r2, [r2, #12]
 800e41c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e420:	fb02 f200 	mul.w	r2, r2, r0
 800e424:	1a9b      	subs	r3, r3, r2
 800e426:	440b      	add	r3, r1
 800e428:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	f003 0301 	and.w	r3, r3, #1
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00d      	beq.n	800e450 <put_fat+0xb2>
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	b25b      	sxtb	r3, r3
 800e43a:	f003 030f 	and.w	r3, r3, #15
 800e43e:	b25a      	sxtb	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	b2db      	uxtb	r3, r3
 800e444:	011b      	lsls	r3, r3, #4
 800e446:	b25b      	sxtb	r3, r3
 800e448:	4313      	orrs	r3, r2
 800e44a:	b25b      	sxtb	r3, r3
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	e001      	b.n	800e454 <put_fat+0xb6>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	b2db      	uxtb	r3, r3
 800e454:	697a      	ldr	r2, [r7, #20]
 800e456:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2201      	movs	r2, #1
 800e45c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	899b      	ldrh	r3, [r3, #12]
 800e466:	4619      	mov	r1, r3
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e46e:	4413      	add	r3, r2
 800e470:	4619      	mov	r1, r3
 800e472:	68f8      	ldr	r0, [r7, #12]
 800e474:	f7ff fe06 	bl	800e084 <move_window>
 800e478:	4603      	mov	r3, r0
 800e47a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e47c:	7ffb      	ldrb	r3, [r7, #31]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	f040 809a 	bne.w	800e5b8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	899b      	ldrh	r3, [r3, #12]
 800e48e:	461a      	mov	r2, r3
 800e490:	69bb      	ldr	r3, [r7, #24]
 800e492:	fbb3 f0f2 	udiv	r0, r3, r2
 800e496:	fb02 f200 	mul.w	r2, r2, r0
 800e49a:	1a9b      	subs	r3, r3, r2
 800e49c:	440b      	add	r3, r1
 800e49e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d003      	beq.n	800e4b2 <put_fat+0x114>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	091b      	lsrs	r3, r3, #4
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	e00e      	b.n	800e4d0 <put_fat+0x132>
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	b25b      	sxtb	r3, r3
 800e4b8:	f023 030f 	bic.w	r3, r3, #15
 800e4bc:	b25a      	sxtb	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	0a1b      	lsrs	r3, r3, #8
 800e4c2:	b25b      	sxtb	r3, r3
 800e4c4:	f003 030f 	and.w	r3, r3, #15
 800e4c8:	b25b      	sxtb	r3, r3
 800e4ca:	4313      	orrs	r3, r2
 800e4cc:	b25b      	sxtb	r3, r3
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	697a      	ldr	r2, [r7, #20]
 800e4d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	70da      	strb	r2, [r3, #3]
			break;
 800e4da:	e072      	b.n	800e5c2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	899b      	ldrh	r3, [r3, #12]
 800e4e4:	085b      	lsrs	r3, r3, #1
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4f0:	4413      	add	r3, r2
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff fdc5 	bl	800e084 <move_window>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e4fe:	7ffb      	ldrb	r3, [r7, #31]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d15b      	bne.n	800e5bc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	005b      	lsls	r3, r3, #1
 800e50e:	68fa      	ldr	r2, [r7, #12]
 800e510:	8992      	ldrh	r2, [r2, #12]
 800e512:	fbb3 f0f2 	udiv	r0, r3, r2
 800e516:	fb02 f200 	mul.w	r2, r2, r0
 800e51a:	1a9b      	subs	r3, r3, r2
 800e51c:	440b      	add	r3, r1
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	b292      	uxth	r2, r2
 800e522:	4611      	mov	r1, r2
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff fb38 	bl	800db9a <st_word>
			fs->wflag = 1;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	2201      	movs	r2, #1
 800e52e:	70da      	strb	r2, [r3, #3]
			break;
 800e530:	e047      	b.n	800e5c2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	899b      	ldrh	r3, [r3, #12]
 800e53a:	089b      	lsrs	r3, r3, #2
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	4619      	mov	r1, r3
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	fbb3 f3f1 	udiv	r3, r3, r1
 800e546:	4413      	add	r3, r2
 800e548:	4619      	mov	r1, r3
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f7ff fd9a 	bl	800e084 <move_window>
 800e550:	4603      	mov	r3, r0
 800e552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e554:	7ffb      	ldrb	r3, [r7, #31]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d132      	bne.n	800e5c0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	68fa      	ldr	r2, [r7, #12]
 800e56c:	8992      	ldrh	r2, [r2, #12]
 800e56e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e572:	fb02 f200 	mul.w	r2, r2, r0
 800e576:	1a9b      	subs	r3, r3, r2
 800e578:	440b      	add	r3, r1
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7ff faea 	bl	800db54 <ld_dword>
 800e580:	4603      	mov	r3, r0
 800e582:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e586:	4323      	orrs	r3, r4
 800e588:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	8992      	ldrh	r2, [r2, #12]
 800e598:	fbb3 f0f2 	udiv	r0, r3, r2
 800e59c:	fb02 f200 	mul.w	r2, r2, r0
 800e5a0:	1a9b      	subs	r3, r3, r2
 800e5a2:	440b      	add	r3, r1
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7ff fb12 	bl	800dbd0 <st_dword>
			fs->wflag = 1;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	70da      	strb	r2, [r3, #3]
			break;
 800e5b2:	e006      	b.n	800e5c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e5b4:	bf00      	nop
 800e5b6:	e004      	b.n	800e5c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e5b8:	bf00      	nop
 800e5ba:	e002      	b.n	800e5c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e5bc:	bf00      	nop
 800e5be:	e000      	b.n	800e5c2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e5c0:	bf00      	nop
		}
	}
	return res;
 800e5c2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3724      	adds	r7, #36	; 0x24
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd90      	pop	{r4, r7, pc}

0800e5cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b088      	sub	sp, #32
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	60f8      	str	r0, [r7, #12]
 800e5d4:	60b9      	str	r1, [r7, #8]
 800e5d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	2b01      	cmp	r3, #1
 800e5e6:	d904      	bls.n	800e5f2 <remove_chain+0x26>
 800e5e8:	69bb      	ldr	r3, [r7, #24]
 800e5ea:	6a1b      	ldr	r3, [r3, #32]
 800e5ec:	68ba      	ldr	r2, [r7, #8]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d301      	bcc.n	800e5f6 <remove_chain+0x2a>
 800e5f2:	2302      	movs	r3, #2
 800e5f4:	e04b      	b.n	800e68e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00c      	beq.n	800e616 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e600:	6879      	ldr	r1, [r7, #4]
 800e602:	69b8      	ldr	r0, [r7, #24]
 800e604:	f7ff fecb 	bl	800e39e <put_fat>
 800e608:	4603      	mov	r3, r0
 800e60a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e60c:	7ffb      	ldrb	r3, [r7, #31]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d001      	beq.n	800e616 <remove_chain+0x4a>
 800e612:	7ffb      	ldrb	r3, [r7, #31]
 800e614:	e03b      	b.n	800e68e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f7ff fdf0 	bl	800e1fe <get_fat>
 800e61e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d031      	beq.n	800e68a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d101      	bne.n	800e630 <remove_chain+0x64>
 800e62c:	2302      	movs	r3, #2
 800e62e:	e02e      	b.n	800e68e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e630:	697b      	ldr	r3, [r7, #20]
 800e632:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e636:	d101      	bne.n	800e63c <remove_chain+0x70>
 800e638:	2301      	movs	r3, #1
 800e63a:	e028      	b.n	800e68e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e63c:	2200      	movs	r2, #0
 800e63e:	68b9      	ldr	r1, [r7, #8]
 800e640:	69b8      	ldr	r0, [r7, #24]
 800e642:	f7ff feac 	bl	800e39e <put_fat>
 800e646:	4603      	mov	r3, r0
 800e648:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e64a:	7ffb      	ldrb	r3, [r7, #31]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <remove_chain+0x88>
 800e650:	7ffb      	ldrb	r3, [r7, #31]
 800e652:	e01c      	b.n	800e68e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e654:	69bb      	ldr	r3, [r7, #24]
 800e656:	699a      	ldr	r2, [r3, #24]
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	6a1b      	ldr	r3, [r3, #32]
 800e65c:	3b02      	subs	r3, #2
 800e65e:	429a      	cmp	r2, r3
 800e660:	d20b      	bcs.n	800e67a <remove_chain+0xae>
			fs->free_clst++;
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	699b      	ldr	r3, [r3, #24]
 800e666:	1c5a      	adds	r2, r3, #1
 800e668:	69bb      	ldr	r3, [r7, #24]
 800e66a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	791b      	ldrb	r3, [r3, #4]
 800e670:	f043 0301 	orr.w	r3, r3, #1
 800e674:	b2da      	uxtb	r2, r3
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e67e:	69bb      	ldr	r3, [r7, #24]
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	68ba      	ldr	r2, [r7, #8]
 800e684:	429a      	cmp	r2, r3
 800e686:	d3c6      	bcc.n	800e616 <remove_chain+0x4a>
 800e688:	e000      	b.n	800e68c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e68a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e68c:	2300      	movs	r3, #0
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3720      	adds	r7, #32
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b088      	sub	sp, #32
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d10d      	bne.n	800e6c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	695b      	ldr	r3, [r3, #20]
 800e6b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d004      	beq.n	800e6c2 <create_chain+0x2c>
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	69ba      	ldr	r2, [r7, #24]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d31b      	bcc.n	800e6fa <create_chain+0x64>
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	61bb      	str	r3, [r7, #24]
 800e6c6:	e018      	b.n	800e6fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7ff fd97 	bl	800e1fe <get_fat>
 800e6d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d801      	bhi.n	800e6dc <create_chain+0x46>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e070      	b.n	800e7be <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e2:	d101      	bne.n	800e6e8 <create_chain+0x52>
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	e06a      	b.n	800e7be <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	6a1b      	ldr	r3, [r3, #32]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d201      	bcs.n	800e6f6 <create_chain+0x60>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	e063      	b.n	800e7be <create_chain+0x128>
		scl = clst;
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	3301      	adds	r3, #1
 800e702:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	6a1b      	ldr	r3, [r3, #32]
 800e708:	69fa      	ldr	r2, [r7, #28]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d307      	bcc.n	800e71e <create_chain+0x88>
				ncl = 2;
 800e70e:	2302      	movs	r3, #2
 800e710:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e712:	69fa      	ldr	r2, [r7, #28]
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	429a      	cmp	r2, r3
 800e718:	d901      	bls.n	800e71e <create_chain+0x88>
 800e71a:	2300      	movs	r3, #0
 800e71c:	e04f      	b.n	800e7be <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e71e:	69f9      	ldr	r1, [r7, #28]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f7ff fd6c 	bl	800e1fe <get_fat>
 800e726:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00e      	beq.n	800e74c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d003      	beq.n	800e73c <create_chain+0xa6>
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73a:	d101      	bne.n	800e740 <create_chain+0xaa>
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	e03e      	b.n	800e7be <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e740:	69fa      	ldr	r2, [r7, #28]
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	429a      	cmp	r2, r3
 800e746:	d1da      	bne.n	800e6fe <create_chain+0x68>
 800e748:	2300      	movs	r3, #0
 800e74a:	e038      	b.n	800e7be <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e74c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e74e:	f04f 32ff 	mov.w	r2, #4294967295
 800e752:	69f9      	ldr	r1, [r7, #28]
 800e754:	6938      	ldr	r0, [r7, #16]
 800e756:	f7ff fe22 	bl	800e39e <put_fat>
 800e75a:	4603      	mov	r3, r0
 800e75c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d109      	bne.n	800e778 <create_chain+0xe2>
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d006      	beq.n	800e778 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e76a:	69fa      	ldr	r2, [r7, #28]
 800e76c:	6839      	ldr	r1, [r7, #0]
 800e76e:	6938      	ldr	r0, [r7, #16]
 800e770:	f7ff fe15 	bl	800e39e <put_fat>
 800e774:	4603      	mov	r3, r0
 800e776:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e778:	7dfb      	ldrb	r3, [r7, #23]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d116      	bne.n	800e7ac <create_chain+0x116>
		fs->last_clst = ncl;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	69fa      	ldr	r2, [r7, #28]
 800e782:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	699a      	ldr	r2, [r3, #24]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	3b02      	subs	r3, #2
 800e78e:	429a      	cmp	r2, r3
 800e790:	d804      	bhi.n	800e79c <create_chain+0x106>
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	1e5a      	subs	r2, r3, #1
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	791b      	ldrb	r3, [r3, #4]
 800e7a0:	f043 0301 	orr.w	r3, r3, #1
 800e7a4:	b2da      	uxtb	r2, r3
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	711a      	strb	r2, [r3, #4]
 800e7aa:	e007      	b.n	800e7bc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e7ac:	7dfb      	ldrb	r3, [r7, #23]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d102      	bne.n	800e7b8 <create_chain+0x122>
 800e7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b6:	e000      	b.n	800e7ba <create_chain+0x124>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e7bc:	69fb      	ldr	r3, [r7, #28]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3720      	adds	r7, #32
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e7c6:	b480      	push	{r7}
 800e7c8:	b087      	sub	sp, #28
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
 800e7ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7da:	3304      	adds	r3, #4
 800e7dc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	899b      	ldrh	r3, [r3, #12]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7ea:	68fa      	ldr	r2, [r7, #12]
 800e7ec:	8952      	ldrh	r2, [r2, #10]
 800e7ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	1d1a      	adds	r2, r3, #4
 800e7f8:	613a      	str	r2, [r7, #16]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d101      	bne.n	800e808 <clmt_clust+0x42>
 800e804:	2300      	movs	r3, #0
 800e806:	e010      	b.n	800e82a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d307      	bcc.n	800e820 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e810:	697a      	ldr	r2, [r7, #20]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	1ad3      	subs	r3, r2, r3
 800e816:	617b      	str	r3, [r7, #20]
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	3304      	adds	r3, #4
 800e81c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e81e:	e7e9      	b.n	800e7f4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e820:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	4413      	add	r3, r2
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	371c      	adds	r7, #28
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b086      	sub	sp, #24
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e84c:	d204      	bcs.n	800e858 <dir_sdi+0x22>
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	f003 031f 	and.w	r3, r3, #31
 800e854:	2b00      	cmp	r3, #0
 800e856:	d001      	beq.n	800e85c <dir_sdi+0x26>
		return FR_INT_ERR;
 800e858:	2302      	movs	r3, #2
 800e85a:	e071      	b.n	800e940 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d106      	bne.n	800e87c <dir_sdi+0x46>
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	2b02      	cmp	r3, #2
 800e874:	d902      	bls.n	800e87c <dir_sdi+0x46>
		clst = fs->dirbase;
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10c      	bne.n	800e89c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	095b      	lsrs	r3, r3, #5
 800e886:	693a      	ldr	r2, [r7, #16]
 800e888:	8912      	ldrh	r2, [r2, #8]
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d301      	bcc.n	800e892 <dir_sdi+0x5c>
 800e88e:	2302      	movs	r3, #2
 800e890:	e056      	b.n	800e940 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	61da      	str	r2, [r3, #28]
 800e89a:	e02d      	b.n	800e8f8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	895b      	ldrh	r3, [r3, #10]
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	899b      	ldrh	r3, [r3, #12]
 800e8a6:	fb03 f302 	mul.w	r3, r3, r2
 800e8aa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e8ac:	e019      	b.n	800e8e2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6979      	ldr	r1, [r7, #20]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7ff fca3 	bl	800e1fe <get_fat>
 800e8b8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8c0:	d101      	bne.n	800e8c6 <dir_sdi+0x90>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e03c      	b.n	800e940 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	2b01      	cmp	r3, #1
 800e8ca:	d904      	bls.n	800e8d6 <dir_sdi+0xa0>
 800e8cc:	693b      	ldr	r3, [r7, #16]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	697a      	ldr	r2, [r7, #20]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d301      	bcc.n	800e8da <dir_sdi+0xa4>
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	e032      	b.n	800e940 <dir_sdi+0x10a>
			ofs -= csz;
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	1ad3      	subs	r3, r2, r3
 800e8e0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d2e1      	bcs.n	800e8ae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e8ea:	6979      	ldr	r1, [r7, #20]
 800e8ec:	6938      	ldr	r0, [r7, #16]
 800e8ee:	f7ff fc67 	bl	800e1c0 <clust2sect>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	697a      	ldr	r2, [r7, #20]
 800e8fc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	69db      	ldr	r3, [r3, #28]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <dir_sdi+0xd4>
 800e906:	2302      	movs	r3, #2
 800e908:	e01a      	b.n	800e940 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	69da      	ldr	r2, [r3, #28]
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	899b      	ldrh	r3, [r3, #12]
 800e912:	4619      	mov	r1, r3
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	fbb3 f3f1 	udiv	r3, r3, r1
 800e91a:	441a      	add	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e920:	693b      	ldr	r3, [r7, #16]
 800e922:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	899b      	ldrh	r3, [r3, #12]
 800e92a:	461a      	mov	r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e932:	fb02 f200 	mul.w	r2, r2, r0
 800e936:	1a9b      	subs	r3, r3, r2
 800e938:	18ca      	adds	r2, r1, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e93e:	2300      	movs	r3, #0
}
 800e940:	4618      	mov	r0, r3
 800e942:	3718      	adds	r7, #24
 800e944:	46bd      	mov	sp, r7
 800e946:	bd80      	pop	{r7, pc}

0800e948 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	695b      	ldr	r3, [r3, #20]
 800e95c:	3320      	adds	r3, #32
 800e95e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d003      	beq.n	800e970 <dir_next+0x28>
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e96e:	d301      	bcc.n	800e974 <dir_next+0x2c>
 800e970:	2304      	movs	r3, #4
 800e972:	e0bb      	b.n	800eaec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	899b      	ldrh	r3, [r3, #12]
 800e978:	461a      	mov	r2, r3
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e980:	fb02 f201 	mul.w	r2, r2, r1
 800e984:	1a9b      	subs	r3, r3, r2
 800e986:	2b00      	cmp	r3, #0
 800e988:	f040 809d 	bne.w	800eac6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	1c5a      	adds	r2, r3, #1
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	699b      	ldr	r3, [r3, #24]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d10b      	bne.n	800e9b6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	095b      	lsrs	r3, r3, #5
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	8912      	ldrh	r2, [r2, #8]
 800e9a6:	4293      	cmp	r3, r2
 800e9a8:	f0c0 808d 	bcc.w	800eac6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	61da      	str	r2, [r3, #28]
 800e9b2:	2304      	movs	r3, #4
 800e9b4:	e09a      	b.n	800eaec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	899b      	ldrh	r3, [r3, #12]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9c2:	68fa      	ldr	r2, [r7, #12]
 800e9c4:	8952      	ldrh	r2, [r2, #10]
 800e9c6:	3a01      	subs	r2, #1
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d17b      	bne.n	800eac6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	699b      	ldr	r3, [r3, #24]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	f7ff fc11 	bl	800e1fe <get_fat>
 800e9dc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d801      	bhi.n	800e9e8 <dir_next+0xa0>
 800e9e4:	2302      	movs	r3, #2
 800e9e6:	e081      	b.n	800eaec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ee:	d101      	bne.n	800e9f4 <dir_next+0xac>
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e07b      	b.n	800eaec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	6a1b      	ldr	r3, [r3, #32]
 800e9f8:	697a      	ldr	r2, [r7, #20]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d359      	bcc.n	800eab2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d104      	bne.n	800ea0e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	61da      	str	r2, [r3, #28]
 800ea0a:	2304      	movs	r3, #4
 800ea0c:	e06e      	b.n	800eaec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	699b      	ldr	r3, [r3, #24]
 800ea14:	4619      	mov	r1, r3
 800ea16:	4610      	mov	r0, r2
 800ea18:	f7ff fe3d 	bl	800e696 <create_chain>
 800ea1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d101      	bne.n	800ea28 <dir_next+0xe0>
 800ea24:	2307      	movs	r3, #7
 800ea26:	e061      	b.n	800eaec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d101      	bne.n	800ea32 <dir_next+0xea>
 800ea2e:	2302      	movs	r3, #2
 800ea30:	e05c      	b.n	800eaec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea38:	d101      	bne.n	800ea3e <dir_next+0xf6>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e056      	b.n	800eaec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f7ff fadc 	bl	800dffc <sync_window>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d001      	beq.n	800ea4e <dir_next+0x106>
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e04e      	b.n	800eaec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	899b      	ldrh	r3, [r3, #12]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	f7ff f905 	bl	800dc6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ea60:	2300      	movs	r3, #0
 800ea62:	613b      	str	r3, [r7, #16]
 800ea64:	6979      	ldr	r1, [r7, #20]
 800ea66:	68f8      	ldr	r0, [r7, #12]
 800ea68:	f7ff fbaa 	bl	800e1c0 <clust2sect>
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	639a      	str	r2, [r3, #56]	; 0x38
 800ea72:	e012      	b.n	800ea9a <dir_next+0x152>
						fs->wflag = 1;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2201      	movs	r2, #1
 800ea78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff fabe 	bl	800dffc <sync_window>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d001      	beq.n	800ea8a <dir_next+0x142>
 800ea86:	2301      	movs	r3, #1
 800ea88:	e030      	b.n	800eaec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	613b      	str	r3, [r7, #16]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea94:	1c5a      	adds	r2, r3, #1
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	639a      	str	r2, [r3, #56]	; 0x38
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	895b      	ldrh	r3, [r3, #10]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d3e6      	bcc.n	800ea74 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	1ad2      	subs	r2, r2, r3
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	697a      	ldr	r2, [r7, #20]
 800eab6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eab8:	6979      	ldr	r1, [r7, #20]
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f7ff fb80 	bl	800e1c0 <clust2sect>
 800eac0:	4602      	mov	r2, r0
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68ba      	ldr	r2, [r7, #8]
 800eaca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	899b      	ldrh	r3, [r3, #12]
 800ead6:	461a      	mov	r2, r3
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	fbb3 f0f2 	udiv	r0, r3, r2
 800eade:	fb02 f200 	mul.w	r2, r2, r0
 800eae2:	1a9b      	subs	r3, r3, r2
 800eae4:	18ca      	adds	r2, r1, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eaea:	2300      	movs	r3, #0
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3718      	adds	r7, #24
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}

0800eaf4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800eb04:	2100      	movs	r1, #0
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7ff fe95 	bl	800e836 <dir_sdi>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb10:	7dfb      	ldrb	r3, [r7, #23]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d12b      	bne.n	800eb6e <dir_alloc+0x7a>
		n = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	69db      	ldr	r3, [r3, #28]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f7ff faaf 	bl	800e084 <move_window>
 800eb26:	4603      	mov	r3, r0
 800eb28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d11d      	bne.n	800eb6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a1b      	ldr	r3, [r3, #32]
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	2be5      	cmp	r3, #229	; 0xe5
 800eb38:	d004      	beq.n	800eb44 <dir_alloc+0x50>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d107      	bne.n	800eb54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	3301      	adds	r3, #1
 800eb48:	613b      	str	r3, [r7, #16]
 800eb4a:	693a      	ldr	r2, [r7, #16]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d102      	bne.n	800eb58 <dir_alloc+0x64>
 800eb52:	e00c      	b.n	800eb6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800eb54:	2300      	movs	r3, #0
 800eb56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800eb58:	2101      	movs	r1, #1
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f7ff fef4 	bl	800e948 <dir_next>
 800eb60:	4603      	mov	r3, r0
 800eb62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eb64:	7dfb      	ldrb	r3, [r7, #23]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d0d7      	beq.n	800eb1a <dir_alloc+0x26>
 800eb6a:	e000      	b.n	800eb6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800eb6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	2b04      	cmp	r3, #4
 800eb72:	d101      	bne.n	800eb78 <dir_alloc+0x84>
 800eb74:	2307      	movs	r3, #7
 800eb76:	75fb      	strb	r3, [r7, #23]
	return res;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3718      	adds	r7, #24
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	331a      	adds	r3, #26
 800eb90:	4618      	mov	r0, r3
 800eb92:	f7fe ffc7 	bl	800db24 <ld_word>
 800eb96:	4603      	mov	r3, r0
 800eb98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	2b03      	cmp	r3, #3
 800eba0:	d109      	bne.n	800ebb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	3314      	adds	r3, #20
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7fe ffbc 	bl	800db24 <ld_word>
 800ebac:	4603      	mov	r3, r0
 800ebae:	041b      	lsls	r3, r3, #16
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	4313      	orrs	r3, r2
 800ebb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3710      	adds	r7, #16
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b084      	sub	sp, #16
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	331a      	adds	r3, #26
 800ebd0:	687a      	ldr	r2, [r7, #4]
 800ebd2:	b292      	uxth	r2, r2
 800ebd4:	4611      	mov	r1, r2
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7fe ffdf 	bl	800db9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	2b03      	cmp	r3, #3
 800ebe2:	d109      	bne.n	800ebf8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	f103 0214 	add.w	r2, r3, #20
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	0c1b      	lsrs	r3, r3, #16
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	f7fe ffd1 	bl	800db9a <st_word>
	}
}
 800ebf8:	bf00      	nop
 800ebfa:	3710      	adds	r7, #16
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ec00:	b590      	push	{r4, r7, lr}
 800ec02:	b087      	sub	sp, #28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	331a      	adds	r3, #26
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe ff88 	bl	800db24 <ld_word>
 800ec14:	4603      	mov	r3, r0
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d001      	beq.n	800ec1e <cmp_lfn+0x1e>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e059      	b.n	800ecd2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec26:	1e5a      	subs	r2, r3, #1
 800ec28:	4613      	mov	r3, r2
 800ec2a:	005b      	lsls	r3, r3, #1
 800ec2c:	4413      	add	r3, r2
 800ec2e:	009b      	lsls	r3, r3, #2
 800ec30:	4413      	add	r3, r2
 800ec32:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec34:	2301      	movs	r3, #1
 800ec36:	81fb      	strh	r3, [r7, #14]
 800ec38:	2300      	movs	r3, #0
 800ec3a:	613b      	str	r3, [r7, #16]
 800ec3c:	e033      	b.n	800eca6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ec3e:	4a27      	ldr	r2, [pc, #156]	; (800ecdc <cmp_lfn+0xdc>)
 800ec40:	693b      	ldr	r3, [r7, #16]
 800ec42:	4413      	add	r3, r2
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	461a      	mov	r2, r3
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe ff69 	bl	800db24 <ld_word>
 800ec52:	4603      	mov	r3, r0
 800ec54:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ec56:	89fb      	ldrh	r3, [r7, #14]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d01a      	beq.n	800ec92 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	2bfe      	cmp	r3, #254	; 0xfe
 800ec60:	d812      	bhi.n	800ec88 <cmp_lfn+0x88>
 800ec62:	89bb      	ldrh	r3, [r7, #12]
 800ec64:	4618      	mov	r0, r3
 800ec66:	f002 fd23 	bl	80116b0 <ff_wtoupper>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	461c      	mov	r4, r3
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	617a      	str	r2, [r7, #20]
 800ec74:	005b      	lsls	r3, r3, #1
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	4413      	add	r3, r2
 800ec7a:	881b      	ldrh	r3, [r3, #0]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f002 fd17 	bl	80116b0 <ff_wtoupper>
 800ec82:	4603      	mov	r3, r0
 800ec84:	429c      	cmp	r4, r3
 800ec86:	d001      	beq.n	800ec8c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ec88:	2300      	movs	r3, #0
 800ec8a:	e022      	b.n	800ecd2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ec8c:	89bb      	ldrh	r3, [r7, #12]
 800ec8e:	81fb      	strh	r3, [r7, #14]
 800ec90:	e006      	b.n	800eca0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ec92:	89bb      	ldrh	r3, [r7, #12]
 800ec94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec98:	4293      	cmp	r3, r2
 800ec9a:	d001      	beq.n	800eca0 <cmp_lfn+0xa0>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	e018      	b.n	800ecd2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	3301      	adds	r3, #1
 800eca4:	613b      	str	r3, [r7, #16]
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	2b0c      	cmp	r3, #12
 800ecaa:	d9c8      	bls.n	800ec3e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00b      	beq.n	800ecd0 <cmp_lfn+0xd0>
 800ecb8:	89fb      	ldrh	r3, [r7, #14]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d008      	beq.n	800ecd0 <cmp_lfn+0xd0>
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	005b      	lsls	r3, r3, #1
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	4413      	add	r3, r2
 800ecc6:	881b      	ldrh	r3, [r3, #0]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d001      	beq.n	800ecd0 <cmp_lfn+0xd0>
 800eccc:	2300      	movs	r3, #0
 800ecce:	e000      	b.n	800ecd2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ecd0:	2301      	movs	r3, #1
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	371c      	adds	r7, #28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd90      	pop	{r4, r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	08017bfc 	.word	0x08017bfc

0800ece0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b086      	sub	sp, #24
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
 800ece8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	331a      	adds	r3, #26
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fe ff18 	bl	800db24 <ld_word>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d001      	beq.n	800ecfe <pick_lfn+0x1e>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	e04d      	b.n	800ed9a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ecfe:	683b      	ldr	r3, [r7, #0]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed06:	1e5a      	subs	r2, r3, #1
 800ed08:	4613      	mov	r3, r2
 800ed0a:	005b      	lsls	r3, r3, #1
 800ed0c:	4413      	add	r3, r2
 800ed0e:	009b      	lsls	r3, r3, #2
 800ed10:	4413      	add	r3, r2
 800ed12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed14:	2301      	movs	r3, #1
 800ed16:	81fb      	strh	r3, [r7, #14]
 800ed18:	2300      	movs	r3, #0
 800ed1a:	613b      	str	r3, [r7, #16]
 800ed1c:	e028      	b.n	800ed70 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ed1e:	4a21      	ldr	r2, [pc, #132]	; (800eda4 <pick_lfn+0xc4>)
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	4413      	add	r3, r2
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	4413      	add	r3, r2
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fe fef9 	bl	800db24 <ld_word>
 800ed32:	4603      	mov	r3, r0
 800ed34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ed36:	89fb      	ldrh	r3, [r7, #14]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00f      	beq.n	800ed5c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2bfe      	cmp	r3, #254	; 0xfe
 800ed40:	d901      	bls.n	800ed46 <pick_lfn+0x66>
 800ed42:	2300      	movs	r3, #0
 800ed44:	e029      	b.n	800ed9a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ed46:	89bb      	ldrh	r3, [r7, #12]
 800ed48:	81fb      	strh	r3, [r7, #14]
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	617a      	str	r2, [r7, #20]
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	4413      	add	r3, r2
 800ed56:	89fa      	ldrh	r2, [r7, #14]
 800ed58:	801a      	strh	r2, [r3, #0]
 800ed5a:	e006      	b.n	800ed6a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ed5c:	89bb      	ldrh	r3, [r7, #12]
 800ed5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d001      	beq.n	800ed6a <pick_lfn+0x8a>
 800ed66:	2300      	movs	r3, #0
 800ed68:	e017      	b.n	800ed9a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	613b      	str	r3, [r7, #16]
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	2b0c      	cmp	r3, #12
 800ed74:	d9d3      	bls.n	800ed1e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d00a      	beq.n	800ed98 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	2bfe      	cmp	r3, #254	; 0xfe
 800ed86:	d901      	bls.n	800ed8c <pick_lfn+0xac>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	e006      	b.n	800ed9a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ed8c:	697b      	ldr	r3, [r7, #20]
 800ed8e:	005b      	lsls	r3, r3, #1
 800ed90:	687a      	ldr	r2, [r7, #4]
 800ed92:	4413      	add	r3, r2
 800ed94:	2200      	movs	r2, #0
 800ed96:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ed98:	2301      	movs	r3, #1
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3718      	adds	r7, #24
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	08017bfc 	.word	0x08017bfc

0800eda8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b088      	sub	sp, #32
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4611      	mov	r1, r2
 800edb4:	461a      	mov	r2, r3
 800edb6:	460b      	mov	r3, r1
 800edb8:	71fb      	strb	r3, [r7, #7]
 800edba:	4613      	mov	r3, r2
 800edbc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	330d      	adds	r3, #13
 800edc2:	79ba      	ldrb	r2, [r7, #6]
 800edc4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	330b      	adds	r3, #11
 800edca:	220f      	movs	r2, #15
 800edcc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	330c      	adds	r3, #12
 800edd2:	2200      	movs	r2, #0
 800edd4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	331a      	adds	r3, #26
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe fedc 	bl	800db9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	1e5a      	subs	r2, r3, #1
 800ede6:	4613      	mov	r3, r2
 800ede8:	005b      	lsls	r3, r3, #1
 800edea:	4413      	add	r3, r2
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	4413      	add	r3, r2
 800edf0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800edf2:	2300      	movs	r3, #0
 800edf4:	82fb      	strh	r3, [r7, #22]
 800edf6:	2300      	movs	r3, #0
 800edf8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800edfa:	8afb      	ldrh	r3, [r7, #22]
 800edfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d007      	beq.n	800ee14 <put_lfn+0x6c>
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	1c5a      	adds	r2, r3, #1
 800ee08:	61fa      	str	r2, [r7, #28]
 800ee0a:	005b      	lsls	r3, r3, #1
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	4413      	add	r3, r2
 800ee10:	881b      	ldrh	r3, [r3, #0]
 800ee12:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ee14:	4a17      	ldr	r2, [pc, #92]	; (800ee74 <put_lfn+0xcc>)
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	4413      	add	r3, r2
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	4413      	add	r3, r2
 800ee22:	8afa      	ldrh	r2, [r7, #22]
 800ee24:	4611      	mov	r1, r2
 800ee26:	4618      	mov	r0, r3
 800ee28:	f7fe feb7 	bl	800db9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ee2c:	8afb      	ldrh	r3, [r7, #22]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d102      	bne.n	800ee38 <put_lfn+0x90>
 800ee32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ee38:	69bb      	ldr	r3, [r7, #24]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	61bb      	str	r3, [r7, #24]
 800ee3e:	69bb      	ldr	r3, [r7, #24]
 800ee40:	2b0c      	cmp	r3, #12
 800ee42:	d9da      	bls.n	800edfa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ee44:	8afb      	ldrh	r3, [r7, #22]
 800ee46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee4a:	4293      	cmp	r3, r2
 800ee4c:	d006      	beq.n	800ee5c <put_lfn+0xb4>
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	68fa      	ldr	r2, [r7, #12]
 800ee54:	4413      	add	r3, r2
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d103      	bne.n	800ee64 <put_lfn+0xbc>
 800ee5c:	79fb      	ldrb	r3, [r7, #7]
 800ee5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	79fa      	ldrb	r2, [r7, #7]
 800ee68:	701a      	strb	r2, [r3, #0]
}
 800ee6a:	bf00      	nop
 800ee6c:	3720      	adds	r7, #32
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	08017bfc 	.word	0x08017bfc

0800ee78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b08c      	sub	sp, #48	; 0x30
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ee86:	220b      	movs	r2, #11
 800ee88:	68b9      	ldr	r1, [r7, #8]
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	f7fe fecc 	bl	800dc28 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2b05      	cmp	r3, #5
 800ee94:	d92b      	bls.n	800eeee <gen_numname+0x76>
		sr = seq;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ee9a:	e022      	b.n	800eee2 <gen_numname+0x6a>
			wc = *lfn++;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	1c9a      	adds	r2, r3, #2
 800eea0:	607a      	str	r2, [r7, #4]
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800eea6:	2300      	movs	r3, #0
 800eea8:	62bb      	str	r3, [r7, #40]	; 0x28
 800eeaa:	e017      	b.n	800eedc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	005a      	lsls	r2, r3, #1
 800eeb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eeb2:	f003 0301 	and.w	r3, r3, #1
 800eeb6:	4413      	add	r3, r2
 800eeb8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800eeba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eebc:	085b      	lsrs	r3, r3, #1
 800eebe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d005      	beq.n	800eed6 <gen_numname+0x5e>
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800eed0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800eed4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed8:	3301      	adds	r3, #1
 800eeda:	62bb      	str	r3, [r7, #40]	; 0x28
 800eedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eede:	2b0f      	cmp	r3, #15
 800eee0:	d9e4      	bls.n	800eeac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	881b      	ldrh	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d1d8      	bne.n	800ee9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800eeea:	69fb      	ldr	r3, [r7, #28]
 800eeec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800eeee:	2307      	movs	r3, #7
 800eef0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	f003 030f 	and.w	r3, r3, #15
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	3330      	adds	r3, #48	; 0x30
 800eefe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ef02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef06:	2b39      	cmp	r3, #57	; 0x39
 800ef08:	d904      	bls.n	800ef14 <gen_numname+0x9c>
 800ef0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ef0e:	3307      	adds	r3, #7
 800ef10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ef14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef16:	1e5a      	subs	r2, r3, #1
 800ef18:	62ba      	str	r2, [r7, #40]	; 0x28
 800ef1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ef1e:	4413      	add	r3, r2
 800ef20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ef24:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	091b      	lsrs	r3, r3, #4
 800ef2c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d1de      	bne.n	800eef2 <gen_numname+0x7a>
	ns[i] = '~';
 800ef34:	f107 0214 	add.w	r2, r7, #20
 800ef38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef3a:	4413      	add	r3, r2
 800ef3c:	227e      	movs	r2, #126	; 0x7e
 800ef3e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef40:	2300      	movs	r3, #0
 800ef42:	627b      	str	r3, [r7, #36]	; 0x24
 800ef44:	e002      	b.n	800ef4c <gen_numname+0xd4>
 800ef46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef48:	3301      	adds	r3, #1
 800ef4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ef4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef50:	429a      	cmp	r2, r3
 800ef52:	d205      	bcs.n	800ef60 <gen_numname+0xe8>
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	4413      	add	r3, r2
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	2b20      	cmp	r3, #32
 800ef5e:	d1f2      	bne.n	800ef46 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ef60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef62:	2b07      	cmp	r3, #7
 800ef64:	d808      	bhi.n	800ef78 <gen_numname+0x100>
 800ef66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef68:	1c5a      	adds	r2, r3, #1
 800ef6a:	62ba      	str	r2, [r7, #40]	; 0x28
 800ef6c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ef70:	4413      	add	r3, r2
 800ef72:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ef76:	e000      	b.n	800ef7a <gen_numname+0x102>
 800ef78:	2120      	movs	r1, #32
 800ef7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7c:	1c5a      	adds	r2, r3, #1
 800ef7e:	627a      	str	r2, [r7, #36]	; 0x24
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	4413      	add	r3, r2
 800ef84:	460a      	mov	r2, r1
 800ef86:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ef88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef8a:	2b07      	cmp	r3, #7
 800ef8c:	d9e8      	bls.n	800ef60 <gen_numname+0xe8>
}
 800ef8e:	bf00      	nop
 800ef90:	3730      	adds	r7, #48	; 0x30
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ef96:	b480      	push	{r7}
 800ef98:	b085      	sub	sp, #20
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800efa2:	230b      	movs	r3, #11
 800efa4:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800efa6:	7bfb      	ldrb	r3, [r7, #15]
 800efa8:	b2da      	uxtb	r2, r3
 800efaa:	0852      	lsrs	r2, r2, #1
 800efac:	01db      	lsls	r3, r3, #7
 800efae:	4313      	orrs	r3, r2
 800efb0:	b2da      	uxtb	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	1c59      	adds	r1, r3, #1
 800efb6:	6079      	str	r1, [r7, #4]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	4413      	add	r3, r2
 800efbc:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	60bb      	str	r3, [r7, #8]
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d1ed      	bne.n	800efa6 <sum_sfn+0x10>
	return sum;
 800efca:	7bfb      	ldrb	r3, [r7, #15]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3714      	adds	r7, #20
 800efd0:	46bd      	mov	sp, r7
 800efd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b086      	sub	sp, #24
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800efe2:	2304      	movs	r3, #4
 800efe4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800efec:	23ff      	movs	r3, #255	; 0xff
 800efee:	757b      	strb	r3, [r7, #21]
 800eff0:	23ff      	movs	r3, #255	; 0xff
 800eff2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800eff4:	e081      	b.n	800f0fa <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	69db      	ldr	r3, [r3, #28]
 800effa:	4619      	mov	r1, r3
 800effc:	6938      	ldr	r0, [r7, #16]
 800effe:	f7ff f841 	bl	800e084 <move_window>
 800f002:	4603      	mov	r3, r0
 800f004:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f006:	7dfb      	ldrb	r3, [r7, #23]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d17c      	bne.n	800f106 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	6a1b      	ldr	r3, [r3, #32]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f014:	7dbb      	ldrb	r3, [r7, #22]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d102      	bne.n	800f020 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f01a:	2304      	movs	r3, #4
 800f01c:	75fb      	strb	r3, [r7, #23]
 800f01e:	e077      	b.n	800f110 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a1b      	ldr	r3, [r3, #32]
 800f024:	330b      	adds	r3, #11
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f02c:	73fb      	strb	r3, [r7, #15]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	7bfa      	ldrb	r2, [r7, #15]
 800f032:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f034:	7dbb      	ldrb	r3, [r7, #22]
 800f036:	2be5      	cmp	r3, #229	; 0xe5
 800f038:	d00e      	beq.n	800f058 <dir_read+0x80>
 800f03a:	7dbb      	ldrb	r3, [r7, #22]
 800f03c:	2b2e      	cmp	r3, #46	; 0x2e
 800f03e:	d00b      	beq.n	800f058 <dir_read+0x80>
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	f023 0320 	bic.w	r3, r3, #32
 800f046:	2b08      	cmp	r3, #8
 800f048:	bf0c      	ite	eq
 800f04a:	2301      	moveq	r3, #1
 800f04c:	2300      	movne	r3, #0
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	461a      	mov	r2, r3
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	4293      	cmp	r3, r2
 800f056:	d002      	beq.n	800f05e <dir_read+0x86>
				ord = 0xFF;
 800f058:	23ff      	movs	r3, #255	; 0xff
 800f05a:	757b      	strb	r3, [r7, #21]
 800f05c:	e044      	b.n	800f0e8 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f05e:	7bfb      	ldrb	r3, [r7, #15]
 800f060:	2b0f      	cmp	r3, #15
 800f062:	d12f      	bne.n	800f0c4 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f064:	7dbb      	ldrb	r3, [r7, #22]
 800f066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00d      	beq.n	800f08a <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	7b5b      	ldrb	r3, [r3, #13]
 800f074:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f076:	7dbb      	ldrb	r3, [r7, #22]
 800f078:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f07c:	75bb      	strb	r3, [r7, #22]
 800f07e:	7dbb      	ldrb	r3, [r7, #22]
 800f080:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	695a      	ldr	r2, [r3, #20]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f08a:	7dba      	ldrb	r2, [r7, #22]
 800f08c:	7d7b      	ldrb	r3, [r7, #21]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d115      	bne.n	800f0be <dir_read+0xe6>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a1b      	ldr	r3, [r3, #32]
 800f096:	330d      	adds	r3, #13
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	7d3a      	ldrb	r2, [r7, #20]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d10e      	bne.n	800f0be <dir_read+0xe6>
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	691a      	ldr	r2, [r3, #16]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a1b      	ldr	r3, [r3, #32]
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	4610      	mov	r0, r2
 800f0ac:	f7ff fe18 	bl	800ece0 <pick_lfn>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <dir_read+0xe6>
 800f0b6:	7d7b      	ldrb	r3, [r7, #21]
 800f0b8:	3b01      	subs	r3, #1
 800f0ba:	b2db      	uxtb	r3, r3
 800f0bc:	e000      	b.n	800f0c0 <dir_read+0xe8>
 800f0be:	23ff      	movs	r3, #255	; 0xff
 800f0c0:	757b      	strb	r3, [r7, #21]
 800f0c2:	e011      	b.n	800f0e8 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f0c4:	7d7b      	ldrb	r3, [r7, #21]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d109      	bne.n	800f0de <dir_read+0x106>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff ff61 	bl	800ef96 <sum_sfn>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	7d3b      	ldrb	r3, [r7, #20]
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d015      	beq.n	800f10a <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e4:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f0e6:	e010      	b.n	800f10a <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff fc2c 	bl	800e948 <dir_next>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f0f4:	7dfb      	ldrb	r3, [r7, #23]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d109      	bne.n	800f10e <dir_read+0x136>
	while (dp->sect) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	69db      	ldr	r3, [r3, #28]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	f47f af79 	bne.w	800eff6 <dir_read+0x1e>
 800f104:	e004      	b.n	800f110 <dir_read+0x138>
		if (res != FR_OK) break;
 800f106:	bf00      	nop
 800f108:	e002      	b.n	800f110 <dir_read+0x138>
					break;
 800f10a:	bf00      	nop
 800f10c:	e000      	b.n	800f110 <dir_read+0x138>
		if (res != FR_OK) break;
 800f10e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f110:	7dfb      	ldrb	r3, [r7, #23]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d002      	beq.n	800f11c <dir_read+0x144>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	61da      	str	r2, [r3, #28]
	return res;
 800f11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3718      	adds	r7, #24
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f126:	b580      	push	{r7, lr}
 800f128:	b086      	sub	sp, #24
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f134:	2100      	movs	r1, #0
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f7ff fb7d 	bl	800e836 <dir_sdi>
 800f13c:	4603      	mov	r3, r0
 800f13e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f140:	7dfb      	ldrb	r3, [r7, #23]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <dir_find+0x24>
 800f146:	7dfb      	ldrb	r3, [r7, #23]
 800f148:	e0a9      	b.n	800f29e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f14a:	23ff      	movs	r3, #255	; 0xff
 800f14c:	753b      	strb	r3, [r7, #20]
 800f14e:	7d3b      	ldrb	r3, [r7, #20]
 800f150:	757b      	strb	r3, [r7, #21]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f04f 32ff 	mov.w	r2, #4294967295
 800f158:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	69db      	ldr	r3, [r3, #28]
 800f15e:	4619      	mov	r1, r3
 800f160:	6938      	ldr	r0, [r7, #16]
 800f162:	f7fe ff8f 	bl	800e084 <move_window>
 800f166:	4603      	mov	r3, r0
 800f168:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f16a:	7dfb      	ldrb	r3, [r7, #23]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f040 8090 	bne.w	800f292 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6a1b      	ldr	r3, [r3, #32]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f17a:	7dbb      	ldrb	r3, [r7, #22]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d102      	bne.n	800f186 <dir_find+0x60>
 800f180:	2304      	movs	r3, #4
 800f182:	75fb      	strb	r3, [r7, #23]
 800f184:	e08a      	b.n	800f29c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a1b      	ldr	r3, [r3, #32]
 800f18a:	330b      	adds	r3, #11
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f192:	73fb      	strb	r3, [r7, #15]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	7bfa      	ldrb	r2, [r7, #15]
 800f198:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f19a:	7dbb      	ldrb	r3, [r7, #22]
 800f19c:	2be5      	cmp	r3, #229	; 0xe5
 800f19e:	d007      	beq.n	800f1b0 <dir_find+0x8a>
 800f1a0:	7bfb      	ldrb	r3, [r7, #15]
 800f1a2:	f003 0308 	and.w	r3, r3, #8
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d009      	beq.n	800f1be <dir_find+0x98>
 800f1aa:	7bfb      	ldrb	r3, [r7, #15]
 800f1ac:	2b0f      	cmp	r3, #15
 800f1ae:	d006      	beq.n	800f1be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f1b0:	23ff      	movs	r3, #255	; 0xff
 800f1b2:	757b      	strb	r3, [r7, #21]
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ba:	631a      	str	r2, [r3, #48]	; 0x30
 800f1bc:	e05e      	b.n	800f27c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f1be:	7bfb      	ldrb	r3, [r7, #15]
 800f1c0:	2b0f      	cmp	r3, #15
 800f1c2:	d136      	bne.n	800f232 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d154      	bne.n	800f27c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f1d2:	7dbb      	ldrb	r3, [r7, #22]
 800f1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d00d      	beq.n	800f1f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	6a1b      	ldr	r3, [r3, #32]
 800f1e0:	7b5b      	ldrb	r3, [r3, #13]
 800f1e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f1e4:	7dbb      	ldrb	r3, [r7, #22]
 800f1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1ea:	75bb      	strb	r3, [r7, #22]
 800f1ec:	7dbb      	ldrb	r3, [r7, #22]
 800f1ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	695a      	ldr	r2, [r3, #20]
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f1f8:	7dba      	ldrb	r2, [r7, #22]
 800f1fa:	7d7b      	ldrb	r3, [r7, #21]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d115      	bne.n	800f22c <dir_find+0x106>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a1b      	ldr	r3, [r3, #32]
 800f204:	330d      	adds	r3, #13
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	7d3a      	ldrb	r2, [r7, #20]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d10e      	bne.n	800f22c <dir_find+0x106>
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	691a      	ldr	r2, [r3, #16]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	4619      	mov	r1, r3
 800f218:	4610      	mov	r0, r2
 800f21a:	f7ff fcf1 	bl	800ec00 <cmp_lfn>
 800f21e:	4603      	mov	r3, r0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d003      	beq.n	800f22c <dir_find+0x106>
 800f224:	7d7b      	ldrb	r3, [r7, #21]
 800f226:	3b01      	subs	r3, #1
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	e000      	b.n	800f22e <dir_find+0x108>
 800f22c:	23ff      	movs	r3, #255	; 0xff
 800f22e:	757b      	strb	r3, [r7, #21]
 800f230:	e024      	b.n	800f27c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f232:	7d7b      	ldrb	r3, [r7, #21]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d109      	bne.n	800f24c <dir_find+0x126>
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a1b      	ldr	r3, [r3, #32]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7ff feaa 	bl	800ef96 <sum_sfn>
 800f242:	4603      	mov	r3, r0
 800f244:	461a      	mov	r2, r3
 800f246:	7d3b      	ldrb	r3, [r7, #20]
 800f248:	4293      	cmp	r3, r2
 800f24a:	d024      	beq.n	800f296 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f252:	f003 0301 	and.w	r3, r3, #1
 800f256:	2b00      	cmp	r3, #0
 800f258:	d10a      	bne.n	800f270 <dir_find+0x14a>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6a18      	ldr	r0, [r3, #32]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	3324      	adds	r3, #36	; 0x24
 800f262:	220b      	movs	r2, #11
 800f264:	4619      	mov	r1, r3
 800f266:	f7fe fd1a 	bl	800dc9e <mem_cmp>
 800f26a:	4603      	mov	r3, r0
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d014      	beq.n	800f29a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f270:	23ff      	movs	r3, #255	; 0xff
 800f272:	757b      	strb	r3, [r7, #21]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f04f 32ff 	mov.w	r2, #4294967295
 800f27a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f27c:	2100      	movs	r1, #0
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f7ff fb62 	bl	800e948 <dir_next>
 800f284:	4603      	mov	r3, r0
 800f286:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f288:	7dfb      	ldrb	r3, [r7, #23]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f43f af65 	beq.w	800f15a <dir_find+0x34>
 800f290:	e004      	b.n	800f29c <dir_find+0x176>
		if (res != FR_OK) break;
 800f292:	bf00      	nop
 800f294:	e002      	b.n	800f29c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f296:	bf00      	nop
 800f298:	e000      	b.n	800f29c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f29a:	bf00      	nop

	return res;
 800f29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f29e:	4618      	mov	r0, r3
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
	...

0800f2a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08c      	sub	sp, #48	; 0x30
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d001      	beq.n	800f2c8 <dir_register+0x20>
 800f2c4:	2306      	movs	r3, #6
 800f2c6:	e0e0      	b.n	800f48a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	627b      	str	r3, [r7, #36]	; 0x24
 800f2cc:	e002      	b.n	800f2d4 <dir_register+0x2c>
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	691a      	ldr	r2, [r3, #16]
 800f2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2da:	005b      	lsls	r3, r3, #1
 800f2dc:	4413      	add	r3, r2
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d1f4      	bne.n	800f2ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f2ea:	f107 030c 	add.w	r3, r7, #12
 800f2ee:	220c      	movs	r2, #12
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe fc99 	bl	800dc28 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	f003 0301 	and.w	r3, r3, #1
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d032      	beq.n	800f366 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2240      	movs	r2, #64	; 0x40
 800f304:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f308:	2301      	movs	r3, #1
 800f30a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f30c:	e016      	b.n	800f33c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f314:	69fb      	ldr	r3, [r7, #28]
 800f316:	691a      	ldr	r2, [r3, #16]
 800f318:	f107 010c 	add.w	r1, r7, #12
 800f31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31e:	f7ff fdab 	bl	800ee78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7ff feff 	bl	800f126 <dir_find>
 800f328:	4603      	mov	r3, r0
 800f32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f32e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	3301      	adds	r3, #1
 800f33a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33e:	2b63      	cmp	r3, #99	; 0x63
 800f340:	d9e5      	bls.n	800f30e <dir_register+0x66>
 800f342:	e000      	b.n	800f346 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f344:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f348:	2b64      	cmp	r3, #100	; 0x64
 800f34a:	d101      	bne.n	800f350 <dir_register+0xa8>
 800f34c:	2307      	movs	r3, #7
 800f34e:	e09c      	b.n	800f48a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f354:	2b04      	cmp	r3, #4
 800f356:	d002      	beq.n	800f35e <dir_register+0xb6>
 800f358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f35c:	e095      	b.n	800f48a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f35e:	7dfa      	ldrb	r2, [r7, #23]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f366:	7dfb      	ldrb	r3, [r7, #23]
 800f368:	f003 0302 	and.w	r3, r3, #2
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d007      	beq.n	800f380 <dir_register+0xd8>
 800f370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f372:	330c      	adds	r3, #12
 800f374:	4a47      	ldr	r2, [pc, #284]	; (800f494 <dir_register+0x1ec>)
 800f376:	fba2 2303 	umull	r2, r3, r2, r3
 800f37a:	089b      	lsrs	r3, r3, #2
 800f37c:	3301      	adds	r3, #1
 800f37e:	e000      	b.n	800f382 <dir_register+0xda>
 800f380:	2301      	movs	r3, #1
 800f382:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f384:	6a39      	ldr	r1, [r7, #32]
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f7ff fbb4 	bl	800eaf4 <dir_alloc>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f396:	2b00      	cmp	r3, #0
 800f398:	d148      	bne.n	800f42c <dir_register+0x184>
 800f39a:	6a3b      	ldr	r3, [r7, #32]
 800f39c:	3b01      	subs	r3, #1
 800f39e:	623b      	str	r3, [r7, #32]
 800f3a0:	6a3b      	ldr	r3, [r7, #32]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d042      	beq.n	800f42c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	695a      	ldr	r2, [r3, #20]
 800f3aa:	6a3b      	ldr	r3, [r7, #32]
 800f3ac:	015b      	lsls	r3, r3, #5
 800f3ae:	1ad3      	subs	r3, r2, r3
 800f3b0:	4619      	mov	r1, r3
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff fa3f 	bl	800e836 <dir_sdi>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f3be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d132      	bne.n	800f42c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	3324      	adds	r3, #36	; 0x24
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fde3 	bl	800ef96 <sum_sfn>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	69db      	ldr	r3, [r3, #28]
 800f3d8:	4619      	mov	r1, r3
 800f3da:	69f8      	ldr	r0, [r7, #28]
 800f3dc:	f7fe fe52 	bl	800e084 <move_window>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f3e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d11d      	bne.n	800f42a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f3ee:	69fb      	ldr	r3, [r7, #28]
 800f3f0:	6918      	ldr	r0, [r3, #16]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6a19      	ldr	r1, [r3, #32]
 800f3f6:	6a3b      	ldr	r3, [r7, #32]
 800f3f8:	b2da      	uxtb	r2, r3
 800f3fa:	7efb      	ldrb	r3, [r7, #27]
 800f3fc:	f7ff fcd4 	bl	800eda8 <put_lfn>
				fs->wflag = 1;
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	2201      	movs	r2, #1
 800f404:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f406:	2100      	movs	r1, #0
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff fa9d 	bl	800e948 <dir_next>
 800f40e:	4603      	mov	r3, r0
 800f410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f414:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d107      	bne.n	800f42c <dir_register+0x184>
 800f41c:	6a3b      	ldr	r3, [r7, #32]
 800f41e:	3b01      	subs	r3, #1
 800f420:	623b      	str	r3, [r7, #32]
 800f422:	6a3b      	ldr	r3, [r7, #32]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1d5      	bne.n	800f3d4 <dir_register+0x12c>
 800f428:	e000      	b.n	800f42c <dir_register+0x184>
				if (res != FR_OK) break;
 800f42a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f42c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f430:	2b00      	cmp	r3, #0
 800f432:	d128      	bne.n	800f486 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	69db      	ldr	r3, [r3, #28]
 800f438:	4619      	mov	r1, r3
 800f43a:	69f8      	ldr	r0, [r7, #28]
 800f43c:	f7fe fe22 	bl	800e084 <move_window>
 800f440:	4603      	mov	r3, r0
 800f442:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f446:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d11b      	bne.n	800f486 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	2220      	movs	r2, #32
 800f454:	2100      	movs	r1, #0
 800f456:	4618      	mov	r0, r3
 800f458:	f7fe fc07 	bl	800dc6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a18      	ldr	r0, [r3, #32]
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3324      	adds	r3, #36	; 0x24
 800f464:	220b      	movs	r2, #11
 800f466:	4619      	mov	r1, r3
 800f468:	f7fe fbde 	bl	800dc28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	6a1b      	ldr	r3, [r3, #32]
 800f476:	330c      	adds	r3, #12
 800f478:	f002 0218 	and.w	r2, r2, #24
 800f47c:	b2d2      	uxtb	r2, r2
 800f47e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	2201      	movs	r2, #1
 800f484:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3730      	adds	r7, #48	; 0x30
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	4ec4ec4f 	.word	0x4ec4ec4f

0800f498 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b086      	sub	sp, #24
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	695b      	ldr	r3, [r3, #20]
 800f4aa:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b4:	d007      	beq.n	800f4c6 <dir_remove+0x2e>
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff f9ba 	bl	800e836 <dir_sdi>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	e000      	b.n	800f4c8 <dir_remove+0x30>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f4ca:	7dfb      	ldrb	r3, [r7, #23]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d128      	bne.n	800f522 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	69db      	ldr	r3, [r3, #28]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	6938      	ldr	r0, [r7, #16]
 800f4d8:	f7fe fdd4 	bl	800e084 <move_window>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f4e0:	7dfb      	ldrb	r3, [r7, #23]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d115      	bne.n	800f512 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	22e5      	movs	r2, #229	; 0xe5
 800f4ec:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	2201      	movs	r2, #1
 800f4f2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	695b      	ldr	r3, [r3, #20]
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	429a      	cmp	r2, r3
 800f4fc:	d90b      	bls.n	800f516 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800f4fe:	2100      	movs	r1, #0
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff fa21 	bl	800e948 <dir_next>
 800f506:	4603      	mov	r3, r0
 800f508:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800f50a:	7dfb      	ldrb	r3, [r7, #23]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d0df      	beq.n	800f4d0 <dir_remove+0x38>
 800f510:	e002      	b.n	800f518 <dir_remove+0x80>
			if (res != FR_OK) break;
 800f512:	bf00      	nop
 800f514:	e000      	b.n	800f518 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f516:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800f518:	7dfb      	ldrb	r3, [r7, #23]
 800f51a:	2b04      	cmp	r3, #4
 800f51c:	d101      	bne.n	800f522 <dir_remove+0x8a>
 800f51e:	2302      	movs	r3, #2
 800f520:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800f522:	7dfb      	ldrb	r3, [r7, #23]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3718      	adds	r7, #24
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b08a      	sub	sp, #40	; 0x28
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	613b      	str	r3, [r7, #16]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	60fb      	str	r3, [r7, #12]
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f54c:	69bb      	ldr	r3, [r7, #24]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	61ba      	str	r2, [r7, #24]
 800f552:	693a      	ldr	r2, [r7, #16]
 800f554:	4413      	add	r3, r2
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f55c:	2b1f      	cmp	r3, #31
 800f55e:	d940      	bls.n	800f5e2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f562:	2b2f      	cmp	r3, #47	; 0x2f
 800f564:	d006      	beq.n	800f574 <create_name+0x48>
 800f566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f568:	2b5c      	cmp	r3, #92	; 0x5c
 800f56a:	d110      	bne.n	800f58e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f56c:	e002      	b.n	800f574 <create_name+0x48>
 800f56e:	69bb      	ldr	r3, [r7, #24]
 800f570:	3301      	adds	r3, #1
 800f572:	61bb      	str	r3, [r7, #24]
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	4413      	add	r3, r2
 800f57a:	781b      	ldrb	r3, [r3, #0]
 800f57c:	2b2f      	cmp	r3, #47	; 0x2f
 800f57e:	d0f6      	beq.n	800f56e <create_name+0x42>
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	4413      	add	r3, r2
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	2b5c      	cmp	r3, #92	; 0x5c
 800f58a:	d0f0      	beq.n	800f56e <create_name+0x42>
			break;
 800f58c:	e02a      	b.n	800f5e4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	2bfe      	cmp	r3, #254	; 0xfe
 800f592:	d901      	bls.n	800f598 <create_name+0x6c>
 800f594:	2306      	movs	r3, #6
 800f596:	e1c9      	b.n	800f92c <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f59e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5a0:	2101      	movs	r1, #1
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f002 f848 	bl	8011638 <ff_convert>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f5ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d101      	bne.n	800f5b6 <create_name+0x8a>
 800f5b2:	2306      	movs	r3, #6
 800f5b4:	e1ba      	b.n	800f92c <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f5b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5b8:	2b7f      	cmp	r3, #127	; 0x7f
 800f5ba:	d809      	bhi.n	800f5d0 <create_name+0xa4>
 800f5bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5be:	4619      	mov	r1, r3
 800f5c0:	48a5      	ldr	r0, [pc, #660]	; (800f858 <create_name+0x32c>)
 800f5c2:	f7fe fb93 	bl	800dcec <chk_chr>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d001      	beq.n	800f5d0 <create_name+0xa4>
 800f5cc:	2306      	movs	r3, #6
 800f5ce:	e1ad      	b.n	800f92c <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	1c5a      	adds	r2, r3, #1
 800f5d4:	617a      	str	r2, [r7, #20]
 800f5d6:	005b      	lsls	r3, r3, #1
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	4413      	add	r3, r2
 800f5dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f5de:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f5e0:	e7b4      	b.n	800f54c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f5e2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f5e4:	693a      	ldr	r2, [r7, #16]
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	441a      	add	r2, r3
 800f5ea:	683b      	ldr	r3, [r7, #0]
 800f5ec:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5f0:	2b1f      	cmp	r3, #31
 800f5f2:	d801      	bhi.n	800f5f8 <create_name+0xcc>
 800f5f4:	2304      	movs	r3, #4
 800f5f6:	e000      	b.n	800f5fa <create_name+0xce>
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	2b01      	cmp	r3, #1
 800f602:	d109      	bne.n	800f618 <create_name+0xec>
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f60a:	3b01      	subs	r3, #1
 800f60c:	005b      	lsls	r3, r3, #1
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	4413      	add	r3, r2
 800f612:	881b      	ldrh	r3, [r3, #0]
 800f614:	2b2e      	cmp	r3, #46	; 0x2e
 800f616:	d016      	beq.n	800f646 <create_name+0x11a>
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2b02      	cmp	r3, #2
 800f61c:	d14e      	bne.n	800f6bc <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f624:	3b01      	subs	r3, #1
 800f626:	005b      	lsls	r3, r3, #1
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4413      	add	r3, r2
 800f62c:	881b      	ldrh	r3, [r3, #0]
 800f62e:	2b2e      	cmp	r3, #46	; 0x2e
 800f630:	d144      	bne.n	800f6bc <create_name+0x190>
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f638:	3b02      	subs	r3, #2
 800f63a:	005b      	lsls	r3, r3, #1
 800f63c:	68fa      	ldr	r2, [r7, #12]
 800f63e:	4413      	add	r3, r2
 800f640:	881b      	ldrh	r3, [r3, #0]
 800f642:	2b2e      	cmp	r3, #46	; 0x2e
 800f644:	d13a      	bne.n	800f6bc <create_name+0x190>
		lfn[di] = 0;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	68fa      	ldr	r2, [r7, #12]
 800f64c:	4413      	add	r3, r2
 800f64e:	2200      	movs	r2, #0
 800f650:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f652:	2300      	movs	r3, #0
 800f654:	623b      	str	r3, [r7, #32]
 800f656:	e00f      	b.n	800f678 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800f658:	6a3a      	ldr	r2, [r7, #32]
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d201      	bcs.n	800f664 <create_name+0x138>
 800f660:	212e      	movs	r1, #46	; 0x2e
 800f662:	e000      	b.n	800f666 <create_name+0x13a>
 800f664:	2120      	movs	r1, #32
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	6a3b      	ldr	r3, [r7, #32]
 800f66a:	4413      	add	r3, r2
 800f66c:	3324      	adds	r3, #36	; 0x24
 800f66e:	460a      	mov	r2, r1
 800f670:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f672:	6a3b      	ldr	r3, [r7, #32]
 800f674:	3301      	adds	r3, #1
 800f676:	623b      	str	r3, [r7, #32]
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	2b0a      	cmp	r3, #10
 800f67c:	d9ec      	bls.n	800f658 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800f67e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f682:	f043 0320 	orr.w	r3, r3, #32
 800f686:	b2d9      	uxtb	r1, r3
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	6a3b      	ldr	r3, [r7, #32]
 800f68c:	4413      	add	r3, r2
 800f68e:	3324      	adds	r3, #36	; 0x24
 800f690:	460a      	mov	r2, r1
 800f692:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f694:	2300      	movs	r3, #0
 800f696:	e149      	b.n	800f92c <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	005b      	lsls	r3, r3, #1
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	881b      	ldrh	r3, [r3, #0]
 800f6a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f6aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6ac:	2b20      	cmp	r3, #32
 800f6ae:	d002      	beq.n	800f6b6 <create_name+0x18a>
 800f6b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6b4:	d106      	bne.n	800f6c4 <create_name+0x198>
		di--;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	3b01      	subs	r3, #1
 800f6ba:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1ea      	bne.n	800f698 <create_name+0x16c>
 800f6c2:	e000      	b.n	800f6c6 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f6c4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d101      	bne.n	800f6dc <create_name+0x1b0>
 800f6d8:	2306      	movs	r3, #6
 800f6da:	e127      	b.n	800f92c <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	3324      	adds	r3, #36	; 0x24
 800f6e0:	220b      	movs	r2, #11
 800f6e2:	2120      	movs	r1, #32
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f7fe fac0 	bl	800dc6a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	61bb      	str	r3, [r7, #24]
 800f6ee:	e002      	b.n	800f6f6 <create_name+0x1ca>
 800f6f0:	69bb      	ldr	r3, [r7, #24]
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	61bb      	str	r3, [r7, #24]
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	2b20      	cmp	r3, #32
 800f702:	d0f5      	beq.n	800f6f0 <create_name+0x1c4>
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	005b      	lsls	r3, r3, #1
 800f708:	68fa      	ldr	r2, [r7, #12]
 800f70a:	4413      	add	r3, r2
 800f70c:	881b      	ldrh	r3, [r3, #0]
 800f70e:	2b2e      	cmp	r3, #46	; 0x2e
 800f710:	d0ee      	beq.n	800f6f0 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d009      	beq.n	800f72c <create_name+0x200>
 800f718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f71c:	f043 0303 	orr.w	r3, r3, #3
 800f720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f724:	e002      	b.n	800f72c <create_name+0x200>
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	3b01      	subs	r3, #1
 800f72a:	617b      	str	r3, [r7, #20]
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d009      	beq.n	800f746 <create_name+0x21a>
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f738:	3b01      	subs	r3, #1
 800f73a:	005b      	lsls	r3, r3, #1
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	4413      	add	r3, r2
 800f740:	881b      	ldrh	r3, [r3, #0]
 800f742:	2b2e      	cmp	r3, #46	; 0x2e
 800f744:	d1ef      	bne.n	800f726 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800f746:	2300      	movs	r3, #0
 800f748:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f74c:	2300      	movs	r3, #0
 800f74e:	623b      	str	r3, [r7, #32]
 800f750:	2308      	movs	r3, #8
 800f752:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	1c5a      	adds	r2, r3, #1
 800f758:	61ba      	str	r2, [r7, #24]
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	4413      	add	r3, r2
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f764:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f766:	2b00      	cmp	r3, #0
 800f768:	f000 8096 	beq.w	800f898 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f76e:	2b20      	cmp	r3, #32
 800f770:	d006      	beq.n	800f780 <create_name+0x254>
 800f772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f774:	2b2e      	cmp	r3, #46	; 0x2e
 800f776:	d10a      	bne.n	800f78e <create_name+0x262>
 800f778:	69ba      	ldr	r2, [r7, #24]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	429a      	cmp	r2, r3
 800f77e:	d006      	beq.n	800f78e <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800f780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f784:	f043 0303 	orr.w	r3, r3, #3
 800f788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f78c:	e083      	b.n	800f896 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f78e:	6a3a      	ldr	r2, [r7, #32]
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	429a      	cmp	r2, r3
 800f794:	d203      	bcs.n	800f79e <create_name+0x272>
 800f796:	69ba      	ldr	r2, [r7, #24]
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d123      	bne.n	800f7e6 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800f79e:	69fb      	ldr	r3, [r7, #28]
 800f7a0:	2b0b      	cmp	r3, #11
 800f7a2:	d106      	bne.n	800f7b2 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800f7a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7a8:	f043 0303 	orr.w	r3, r3, #3
 800f7ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7b0:	e075      	b.n	800f89e <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f7b2:	69ba      	ldr	r2, [r7, #24]
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d005      	beq.n	800f7c6 <create_name+0x29a>
 800f7ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7be:	f043 0303 	orr.w	r3, r3, #3
 800f7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f7c6:	69ba      	ldr	r2, [r7, #24]
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d866      	bhi.n	800f89c <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	61bb      	str	r3, [r7, #24]
 800f7d2:	2308      	movs	r3, #8
 800f7d4:	623b      	str	r3, [r7, #32]
 800f7d6:	230b      	movs	r3, #11
 800f7d8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f7da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7e4:	e057      	b.n	800f896 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7e8:	2b7f      	cmp	r3, #127	; 0x7f
 800f7ea:	d914      	bls.n	800f816 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7ee:	2100      	movs	r1, #0
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f001 ff21 	bl	8011638 <ff_convert>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f7fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d004      	beq.n	800f80a <create_name+0x2de>
 800f800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f802:	3b80      	subs	r3, #128	; 0x80
 800f804:	4a15      	ldr	r2, [pc, #84]	; (800f85c <create_name+0x330>)
 800f806:	5cd3      	ldrb	r3, [r2, r3]
 800f808:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f80a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f80e:	f043 0302 	orr.w	r3, r3, #2
 800f812:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d007      	beq.n	800f82c <create_name+0x300>
 800f81c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f81e:	4619      	mov	r1, r3
 800f820:	480f      	ldr	r0, [pc, #60]	; (800f860 <create_name+0x334>)
 800f822:	f7fe fa63 	bl	800dcec <chk_chr>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d008      	beq.n	800f83e <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f82c:	235f      	movs	r3, #95	; 0x5f
 800f82e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f834:	f043 0303 	orr.w	r3, r3, #3
 800f838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f83c:	e021      	b.n	800f882 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f840:	2b40      	cmp	r3, #64	; 0x40
 800f842:	d90f      	bls.n	800f864 <create_name+0x338>
 800f844:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f846:	2b5a      	cmp	r3, #90	; 0x5a
 800f848:	d80c      	bhi.n	800f864 <create_name+0x338>
					b |= 2;
 800f84a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f84e:	f043 0302 	orr.w	r3, r3, #2
 800f852:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f856:	e014      	b.n	800f882 <create_name+0x356>
 800f858:	08017af4 	.word	0x08017af4
 800f85c:	08017b7c 	.word	0x08017b7c
 800f860:	08017b00 	.word	0x08017b00
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f864:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f866:	2b60      	cmp	r3, #96	; 0x60
 800f868:	d90b      	bls.n	800f882 <create_name+0x356>
 800f86a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f86c:	2b7a      	cmp	r3, #122	; 0x7a
 800f86e:	d808      	bhi.n	800f882 <create_name+0x356>
						b |= 1; w -= 0x20;
 800f870:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f874:	f043 0301 	orr.w	r3, r3, #1
 800f878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f87c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f87e:	3b20      	subs	r3, #32
 800f880:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f882:	6a3b      	ldr	r3, [r7, #32]
 800f884:	1c5a      	adds	r2, r3, #1
 800f886:	623a      	str	r2, [r7, #32]
 800f888:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f88a:	b2d1      	uxtb	r1, r2
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	4413      	add	r3, r2
 800f890:	460a      	mov	r2, r1
 800f892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f896:	e75d      	b.n	800f754 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800f898:	bf00      	nop
 800f89a:	e000      	b.n	800f89e <create_name+0x372>
			if (si > di) break;			/* No extension */
 800f89c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f8a4:	2be5      	cmp	r3, #229	; 0xe5
 800f8a6:	d103      	bne.n	800f8b0 <create_name+0x384>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	2205      	movs	r2, #5
 800f8ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	2b08      	cmp	r3, #8
 800f8b4:	d104      	bne.n	800f8c0 <create_name+0x394>
 800f8b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f8c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8c4:	f003 030c 	and.w	r3, r3, #12
 800f8c8:	2b0c      	cmp	r3, #12
 800f8ca:	d005      	beq.n	800f8d8 <create_name+0x3ac>
 800f8cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8d0:	f003 0303 	and.w	r3, r3, #3
 800f8d4:	2b03      	cmp	r3, #3
 800f8d6:	d105      	bne.n	800f8e4 <create_name+0x3b8>
 800f8d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8dc:	f043 0302 	orr.w	r3, r3, #2
 800f8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f8e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8e8:	f003 0302 	and.w	r3, r3, #2
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d117      	bne.n	800f920 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f8f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8f4:	f003 0303 	and.w	r3, r3, #3
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	d105      	bne.n	800f908 <create_name+0x3dc>
 800f8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f900:	f043 0310 	orr.w	r3, r3, #16
 800f904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f908:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f90c:	f003 030c 	and.w	r3, r3, #12
 800f910:	2b04      	cmp	r3, #4
 800f912:	d105      	bne.n	800f920 <create_name+0x3f4>
 800f914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f918:	f043 0308 	orr.w	r3, r3, #8
 800f91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f926:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f92a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3728      	adds	r7, #40	; 0x28
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b086      	sub	sp, #24
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	2b2f      	cmp	r3, #47	; 0x2f
 800f94e:	d00b      	beq.n	800f968 <follow_path+0x34>
 800f950:	683b      	ldr	r3, [r7, #0]
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b5c      	cmp	r3, #92	; 0x5c
 800f956:	d007      	beq.n	800f968 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	69da      	ldr	r2, [r3, #28]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	609a      	str	r2, [r3, #8]
 800f960:	e00d      	b.n	800f97e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	3301      	adds	r3, #1
 800f966:	603b      	str	r3, [r7, #0]
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2b2f      	cmp	r3, #47	; 0x2f
 800f96e:	d0f8      	beq.n	800f962 <follow_path+0x2e>
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	2b5c      	cmp	r3, #92	; 0x5c
 800f976:	d0f4      	beq.n	800f962 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	2200      	movs	r2, #0
 800f97c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	2b1f      	cmp	r3, #31
 800f984:	d80a      	bhi.n	800f99c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2280      	movs	r2, #128	; 0x80
 800f98a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f98e:	2100      	movs	r1, #0
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7fe ff50 	bl	800e836 <dir_sdi>
 800f996:	4603      	mov	r3, r0
 800f998:	75fb      	strb	r3, [r7, #23]
 800f99a:	e05b      	b.n	800fa54 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f99c:	463b      	mov	r3, r7
 800f99e:	4619      	mov	r1, r3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff fdc3 	bl	800f52c <create_name>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d14c      	bne.n	800fa4a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f7ff fbb8 	bl	800f126 <dir_find>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f9c0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f9c2:	7dfb      	ldrb	r3, [r7, #23]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d01b      	beq.n	800fa00 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f9c8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ca:	2b04      	cmp	r3, #4
 800f9cc:	d13f      	bne.n	800fa4e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f9ce:	7afb      	ldrb	r3, [r7, #11]
 800f9d0:	f003 0320 	and.w	r3, r3, #32
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00b      	beq.n	800f9f0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f9d8:	7afb      	ldrb	r3, [r7, #11]
 800f9da:	f003 0304 	and.w	r3, r3, #4
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d031      	beq.n	800fa46 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2280      	movs	r2, #128	; 0x80
 800f9e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f9ee:	e02e      	b.n	800fa4e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f9f0:	7afb      	ldrb	r3, [r7, #11]
 800f9f2:	f003 0304 	and.w	r3, r3, #4
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d129      	bne.n	800fa4e <follow_path+0x11a>
 800f9fa:	2305      	movs	r3, #5
 800f9fc:	75fb      	strb	r3, [r7, #23]
				break;
 800f9fe:	e026      	b.n	800fa4e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa00:	7afb      	ldrb	r3, [r7, #11]
 800fa02:	f003 0304 	and.w	r3, r3, #4
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d123      	bne.n	800fa52 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fa0a:	693b      	ldr	r3, [r7, #16]
 800fa0c:	799b      	ldrb	r3, [r3, #6]
 800fa0e:	f003 0310 	and.w	r3, r3, #16
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d102      	bne.n	800fa1c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fa16:	2305      	movs	r3, #5
 800fa18:	75fb      	strb	r3, [r7, #23]
 800fa1a:	e01b      	b.n	800fa54 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	695b      	ldr	r3, [r3, #20]
 800fa26:	68fa      	ldr	r2, [r7, #12]
 800fa28:	8992      	ldrh	r2, [r2, #12]
 800fa2a:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa2e:	fb02 f200 	mul.w	r2, r2, r0
 800fa32:	1a9b      	subs	r3, r3, r2
 800fa34:	440b      	add	r3, r1
 800fa36:	4619      	mov	r1, r3
 800fa38:	68f8      	ldr	r0, [r7, #12]
 800fa3a:	f7ff f8a2 	bl	800eb82 <ld_clust>
 800fa3e:	4602      	mov	r2, r0
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	609a      	str	r2, [r3, #8]
 800fa44:	e7aa      	b.n	800f99c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fa46:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa48:	e7a8      	b.n	800f99c <follow_path+0x68>
			if (res != FR_OK) break;
 800fa4a:	bf00      	nop
 800fa4c:	e002      	b.n	800fa54 <follow_path+0x120>
				break;
 800fa4e:	bf00      	nop
 800fa50:	e000      	b.n	800fa54 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa52:	bf00      	nop
			}
		}
	}

	return res;
 800fa54:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3718      	adds	r7, #24
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b087      	sub	sp, #28
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa66:	f04f 33ff 	mov.w	r3, #4294967295
 800fa6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d031      	beq.n	800fad8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	617b      	str	r3, [r7, #20]
 800fa7a:	e002      	b.n	800fa82 <get_ldnumber+0x24>
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	617b      	str	r3, [r7, #20]
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	2b1f      	cmp	r3, #31
 800fa88:	d903      	bls.n	800fa92 <get_ldnumber+0x34>
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	2b3a      	cmp	r3, #58	; 0x3a
 800fa90:	d1f4      	bne.n	800fa7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	2b3a      	cmp	r3, #58	; 0x3a
 800fa98:	d11c      	bne.n	800fad4 <get_ldnumber+0x76>
			tp = *path;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	1c5a      	adds	r2, r3, #1
 800faa4:	60fa      	str	r2, [r7, #12]
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	3b30      	subs	r3, #48	; 0x30
 800faaa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800faac:	68bb      	ldr	r3, [r7, #8]
 800faae:	2b09      	cmp	r3, #9
 800fab0:	d80e      	bhi.n	800fad0 <get_ldnumber+0x72>
 800fab2:	68fa      	ldr	r2, [r7, #12]
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d10a      	bne.n	800fad0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d107      	bne.n	800fad0 <get_ldnumber+0x72>
					vol = (int)i;
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	3301      	adds	r3, #1
 800fac8:	617b      	str	r3, [r7, #20]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	697a      	ldr	r2, [r7, #20]
 800face:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	e002      	b.n	800fada <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fad8:	693b      	ldr	r3, [r7, #16]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	371c      	adds	r7, #28
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr
	...

0800fae8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b082      	sub	sp, #8
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
 800faf0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	70da      	strb	r2, [r3, #3]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f04f 32ff 	mov.w	r2, #4294967295
 800fafe:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f7fe fabe 	bl	800e084 <move_window>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d001      	beq.n	800fb12 <check_fs+0x2a>
 800fb0e:	2304      	movs	r3, #4
 800fb10:	e038      	b.n	800fb84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	333c      	adds	r3, #60	; 0x3c
 800fb16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe f802 	bl	800db24 <ld_word>
 800fb20:	4603      	mov	r3, r0
 800fb22:	461a      	mov	r2, r3
 800fb24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d001      	beq.n	800fb30 <check_fs+0x48>
 800fb2c:	2303      	movs	r3, #3
 800fb2e:	e029      	b.n	800fb84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb36:	2be9      	cmp	r3, #233	; 0xe9
 800fb38:	d009      	beq.n	800fb4e <check_fs+0x66>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb40:	2beb      	cmp	r3, #235	; 0xeb
 800fb42:	d11e      	bne.n	800fb82 <check_fs+0x9a>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb4a:	2b90      	cmp	r3, #144	; 0x90
 800fb4c:	d119      	bne.n	800fb82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	333c      	adds	r3, #60	; 0x3c
 800fb52:	3336      	adds	r3, #54	; 0x36
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fd fffd 	bl	800db54 <ld_dword>
 800fb5a:	4603      	mov	r3, r0
 800fb5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb60:	4a0a      	ldr	r2, [pc, #40]	; (800fb8c <check_fs+0xa4>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d101      	bne.n	800fb6a <check_fs+0x82>
 800fb66:	2300      	movs	r3, #0
 800fb68:	e00c      	b.n	800fb84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	333c      	adds	r3, #60	; 0x3c
 800fb6e:	3352      	adds	r3, #82	; 0x52
 800fb70:	4618      	mov	r0, r3
 800fb72:	f7fd ffef 	bl	800db54 <ld_dword>
 800fb76:	4602      	mov	r2, r0
 800fb78:	4b05      	ldr	r3, [pc, #20]	; (800fb90 <check_fs+0xa8>)
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d101      	bne.n	800fb82 <check_fs+0x9a>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e000      	b.n	800fb84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fb82:	2302      	movs	r3, #2
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3708      	adds	r7, #8
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}
 800fb8c:	00544146 	.word	0x00544146
 800fb90:	33544146 	.word	0x33544146

0800fb94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b096      	sub	sp, #88	; 0x58
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	2200      	movs	r2, #0
 800fba6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f7ff ff58 	bl	800fa5e <get_ldnumber>
 800fbae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	da01      	bge.n	800fbba <find_volume+0x26>
 800fbb6:	230b      	movs	r3, #11
 800fbb8:	e26b      	b.n	8010092 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fbba:	4ab0      	ldr	r2, [pc, #704]	; (800fe7c <find_volume+0x2e8>)
 800fbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d101      	bne.n	800fbce <find_volume+0x3a>
 800fbca:	230c      	movs	r3, #12
 800fbcc:	e261      	b.n	8010092 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fbd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fbd4:	79fb      	ldrb	r3, [r7, #7]
 800fbd6:	f023 0301 	bic.w	r3, r3, #1
 800fbda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d01a      	beq.n	800fc1a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	785b      	ldrb	r3, [r3, #1]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7fd fefd 	bl	800d9e8 <disk_status>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fbf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d10c      	bne.n	800fc1a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fc00:	79fb      	ldrb	r3, [r7, #7]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d007      	beq.n	800fc16 <find_volume+0x82>
 800fc06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc0a:	f003 0304 	and.w	r3, r3, #4
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d001      	beq.n	800fc16 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fc12:	230a      	movs	r3, #10
 800fc14:	e23d      	b.n	8010092 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800fc16:	2300      	movs	r3, #0
 800fc18:	e23b      	b.n	8010092 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fc20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc22:	b2da      	uxtb	r2, r3
 800fc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc26:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2a:	785b      	ldrb	r3, [r3, #1]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7fd fef5 	bl	800da1c <disk_initialize>
 800fc32:	4603      	mov	r3, r0
 800fc34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fc38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fc44:	2303      	movs	r3, #3
 800fc46:	e224      	b.n	8010092 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fc48:	79fb      	ldrb	r3, [r7, #7]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d007      	beq.n	800fc5e <find_volume+0xca>
 800fc4e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc52:	f003 0304 	and.w	r3, r3, #4
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d001      	beq.n	800fc5e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fc5a:	230a      	movs	r3, #10
 800fc5c:	e219      	b.n	8010092 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc60:	7858      	ldrb	r0, [r3, #1]
 800fc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc64:	330c      	adds	r3, #12
 800fc66:	461a      	mov	r2, r3
 800fc68:	2102      	movs	r1, #2
 800fc6a:	f7fd ff3d 	bl	800dae8 <disk_ioctl>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d001      	beq.n	800fc78 <find_volume+0xe4>
 800fc74:	2301      	movs	r3, #1
 800fc76:	e20c      	b.n	8010092 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7a:	899b      	ldrh	r3, [r3, #12]
 800fc7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc80:	d80d      	bhi.n	800fc9e <find_volume+0x10a>
 800fc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc84:	899b      	ldrh	r3, [r3, #12]
 800fc86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc8a:	d308      	bcc.n	800fc9e <find_volume+0x10a>
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	899b      	ldrh	r3, [r3, #12]
 800fc90:	461a      	mov	r2, r3
 800fc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc94:	899b      	ldrh	r3, [r3, #12]
 800fc96:	3b01      	subs	r3, #1
 800fc98:	4013      	ands	r3, r2
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d001      	beq.n	800fca2 <find_volume+0x10e>
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e1f7      	b.n	8010092 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fca2:	2300      	movs	r3, #0
 800fca4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fca6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcaa:	f7ff ff1d 	bl	800fae8 <check_fs>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fcb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fcb8:	2b02      	cmp	r3, #2
 800fcba:	d14b      	bne.n	800fd54 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	643b      	str	r3, [r7, #64]	; 0x40
 800fcc0:	e01f      	b.n	800fd02 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcca:	011b      	lsls	r3, r3, #4
 800fccc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fcd0:	4413      	add	r3, r2
 800fcd2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fcd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd6:	3304      	adds	r3, #4
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d006      	beq.n	800fcec <find_volume+0x158>
 800fcde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce0:	3308      	adds	r3, #8
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fd ff36 	bl	800db54 <ld_dword>
 800fce8:	4602      	mov	r2, r0
 800fcea:	e000      	b.n	800fcee <find_volume+0x15a>
 800fcec:	2200      	movs	r2, #0
 800fcee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fcf6:	440b      	add	r3, r1
 800fcf8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcfe:	3301      	adds	r3, #1
 800fd00:	643b      	str	r3, [r7, #64]	; 0x40
 800fd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd04:	2b03      	cmp	r3, #3
 800fd06:	d9dc      	bls.n	800fcc2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fd08:	2300      	movs	r3, #0
 800fd0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d002      	beq.n	800fd18 <find_volume+0x184>
 800fd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd14:	3b01      	subs	r3, #1
 800fd16:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fd20:	4413      	add	r3, r2
 800fd22:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fd26:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fd28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d005      	beq.n	800fd3a <find_volume+0x1a6>
 800fd2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd32:	f7ff fed9 	bl	800fae8 <check_fs>
 800fd36:	4603      	mov	r3, r0
 800fd38:	e000      	b.n	800fd3c <find_volume+0x1a8>
 800fd3a:	2303      	movs	r3, #3
 800fd3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fd40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d905      	bls.n	800fd54 <find_volume+0x1c0>
 800fd48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	643b      	str	r3, [r7, #64]	; 0x40
 800fd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d9e1      	bls.n	800fd18 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fd54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd58:	2b04      	cmp	r3, #4
 800fd5a:	d101      	bne.n	800fd60 <find_volume+0x1cc>
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	e198      	b.n	8010092 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fd60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d901      	bls.n	800fd6c <find_volume+0x1d8>
 800fd68:	230d      	movs	r3, #13
 800fd6a:	e192      	b.n	8010092 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd6e:	333c      	adds	r3, #60	; 0x3c
 800fd70:	330b      	adds	r3, #11
 800fd72:	4618      	mov	r0, r3
 800fd74:	f7fd fed6 	bl	800db24 <ld_word>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	461a      	mov	r2, r3
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7e:	899b      	ldrh	r3, [r3, #12]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d001      	beq.n	800fd88 <find_volume+0x1f4>
 800fd84:	230d      	movs	r3, #13
 800fd86:	e184      	b.n	8010092 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	333c      	adds	r3, #60	; 0x3c
 800fd8c:	3316      	adds	r3, #22
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fd fec8 	bl	800db24 <ld_word>
 800fd94:	4603      	mov	r3, r0
 800fd96:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fd98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d106      	bne.n	800fdac <find_volume+0x218>
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	333c      	adds	r3, #60	; 0x3c
 800fda2:	3324      	adds	r3, #36	; 0x24
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fd fed5 	bl	800db54 <ld_dword>
 800fdaa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fdac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fdb0:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fdb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	789b      	ldrb	r3, [r3, #2]
 800fdc0:	2b01      	cmp	r3, #1
 800fdc2:	d005      	beq.n	800fdd0 <find_volume+0x23c>
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	789b      	ldrb	r3, [r3, #2]
 800fdc8:	2b02      	cmp	r3, #2
 800fdca:	d001      	beq.n	800fdd0 <find_volume+0x23c>
 800fdcc:	230d      	movs	r3, #13
 800fdce:	e160      	b.n	8010092 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fdd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd2:	789b      	ldrb	r3, [r3, #2]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdd8:	fb02 f303 	mul.w	r3, r2, r3
 800fddc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800fde4:	b29a      	uxth	r2, r3
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	895b      	ldrh	r3, [r3, #10]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d008      	beq.n	800fe04 <find_volume+0x270>
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	895b      	ldrh	r3, [r3, #10]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfa:	895b      	ldrh	r3, [r3, #10]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	4013      	ands	r3, r2
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d001      	beq.n	800fe08 <find_volume+0x274>
 800fe04:	230d      	movs	r3, #13
 800fe06:	e144      	b.n	8010092 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	333c      	adds	r3, #60	; 0x3c
 800fe0c:	3311      	adds	r3, #17
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fd fe88 	bl	800db24 <ld_word>
 800fe14:	4603      	mov	r3, r0
 800fe16:	461a      	mov	r2, r3
 800fe18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	891b      	ldrh	r3, [r3, #8]
 800fe20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe22:	8992      	ldrh	r2, [r2, #12]
 800fe24:	0952      	lsrs	r2, r2, #5
 800fe26:	b292      	uxth	r2, r2
 800fe28:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe2c:	fb02 f201 	mul.w	r2, r2, r1
 800fe30:	1a9b      	subs	r3, r3, r2
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <find_volume+0x2a8>
 800fe38:	230d      	movs	r3, #13
 800fe3a:	e12a      	b.n	8010092 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	333c      	adds	r3, #60	; 0x3c
 800fe40:	3313      	adds	r3, #19
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fd fe6e 	bl	800db24 <ld_word>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fe4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d106      	bne.n	800fe60 <find_volume+0x2cc>
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	333c      	adds	r3, #60	; 0x3c
 800fe56:	3320      	adds	r3, #32
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fd fe7b 	bl	800db54 <ld_dword>
 800fe5e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe62:	333c      	adds	r3, #60	; 0x3c
 800fe64:	330e      	adds	r3, #14
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fd fe5c 	bl	800db24 <ld_word>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fe70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d104      	bne.n	800fe80 <find_volume+0x2ec>
 800fe76:	230d      	movs	r3, #13
 800fe78:	e10b      	b.n	8010092 <find_volume+0x4fe>
 800fe7a:	bf00      	nop
 800fe7c:	2001f2d8 	.word	0x2001f2d8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fe80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe84:	4413      	add	r3, r2
 800fe86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe88:	8911      	ldrh	r1, [r2, #8]
 800fe8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe8c:	8992      	ldrh	r2, [r2, #12]
 800fe8e:	0952      	lsrs	r2, r2, #5
 800fe90:	b292      	uxth	r2, r2
 800fe92:	fbb1 f2f2 	udiv	r2, r1, r2
 800fe96:	b292      	uxth	r2, r2
 800fe98:	4413      	add	r3, r2
 800fe9a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fe9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d201      	bcs.n	800fea8 <find_volume+0x314>
 800fea4:	230d      	movs	r3, #13
 800fea6:	e0f4      	b.n	8010092 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800feb0:	8952      	ldrh	r2, [r2, #10]
 800feb2:	fbb3 f3f2 	udiv	r3, r3, r2
 800feb6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	2b00      	cmp	r3, #0
 800febc:	d101      	bne.n	800fec2 <find_volume+0x32e>
 800febe:	230d      	movs	r3, #13
 800fec0:	e0e7      	b.n	8010092 <find_volume+0x4fe>
		fmt = FS_FAT32;
 800fec2:	2303      	movs	r3, #3
 800fec4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fece:	4293      	cmp	r3, r2
 800fed0:	d802      	bhi.n	800fed8 <find_volume+0x344>
 800fed2:	2302      	movs	r3, #2
 800fed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feda:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fede:	4293      	cmp	r3, r2
 800fee0:	d802      	bhi.n	800fee8 <find_volume+0x354>
 800fee2:	2301      	movs	r3, #1
 800fee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	1c9a      	adds	r2, r3, #2
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fef4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fef6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fefa:	441a      	add	r2, r3
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800ff00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff04:	441a      	add	r2, r3
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800ff0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff0e:	2b03      	cmp	r3, #3
 800ff10:	d11e      	bne.n	800ff50 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	333c      	adds	r3, #60	; 0x3c
 800ff16:	332a      	adds	r3, #42	; 0x2a
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fd fe03 	bl	800db24 <ld_word>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <find_volume+0x394>
 800ff24:	230d      	movs	r3, #13
 800ff26:	e0b4      	b.n	8010092 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	891b      	ldrh	r3, [r3, #8]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d001      	beq.n	800ff34 <find_volume+0x3a0>
 800ff30:	230d      	movs	r3, #13
 800ff32:	e0ae      	b.n	8010092 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ff34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff36:	333c      	adds	r3, #60	; 0x3c
 800ff38:	332c      	adds	r3, #44	; 0x2c
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fd fe0a 	bl	800db54 <ld_dword>
 800ff40:	4602      	mov	r2, r0
 800ff42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff44:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	6a1b      	ldr	r3, [r3, #32]
 800ff4a:	009b      	lsls	r3, r3, #2
 800ff4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ff4e:	e01f      	b.n	800ff90 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ff50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff52:	891b      	ldrh	r3, [r3, #8]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d101      	bne.n	800ff5c <find_volume+0x3c8>
 800ff58:	230d      	movs	r3, #13
 800ff5a:	e09a      	b.n	8010092 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ff5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff62:	441a      	add	r2, r3
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d103      	bne.n	800ff78 <find_volume+0x3e4>
 800ff70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff72:	6a1b      	ldr	r3, [r3, #32]
 800ff74:	005b      	lsls	r3, r3, #1
 800ff76:	e00a      	b.n	800ff8e <find_volume+0x3fa>
 800ff78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7a:	6a1a      	ldr	r2, [r3, #32]
 800ff7c:	4613      	mov	r3, r2
 800ff7e:	005b      	lsls	r3, r3, #1
 800ff80:	4413      	add	r3, r2
 800ff82:	085a      	lsrs	r2, r3, #1
 800ff84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff86:	6a1b      	ldr	r3, [r3, #32]
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ff8e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff96:	899b      	ldrh	r3, [r3, #12]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff9c:	440b      	add	r3, r1
 800ff9e:	3b01      	subs	r3, #1
 800ffa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffa2:	8989      	ldrh	r1, [r1, #12]
 800ffa4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d201      	bcs.n	800ffb0 <find_volume+0x41c>
 800ffac:	230d      	movs	r3, #13
 800ffae:	e070      	b.n	8010092 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ffb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb2:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb6:	619a      	str	r2, [r3, #24]
 800ffb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffba:	699a      	ldr	r2, [r3, #24]
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbe:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ffc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc2:	2280      	movs	r2, #128	; 0x80
 800ffc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ffc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	d149      	bne.n	8010062 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ffce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd0:	333c      	adds	r3, #60	; 0x3c
 800ffd2:	3330      	adds	r3, #48	; 0x30
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fd fda5 	bl	800db24 <ld_word>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d140      	bne.n	8010062 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ffe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffe2:	3301      	adds	r3, #1
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffe8:	f7fe f84c 	bl	800e084 <move_window>
 800ffec:	4603      	mov	r3, r0
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d137      	bne.n	8010062 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800fff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff4:	2200      	movs	r2, #0
 800fff6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	333c      	adds	r3, #60	; 0x3c
 800fffc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010000:	4618      	mov	r0, r3
 8010002:	f7fd fd8f 	bl	800db24 <ld_word>
 8010006:	4603      	mov	r3, r0
 8010008:	461a      	mov	r2, r3
 801000a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801000e:	429a      	cmp	r2, r3
 8010010:	d127      	bne.n	8010062 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010014:	333c      	adds	r3, #60	; 0x3c
 8010016:	4618      	mov	r0, r3
 8010018:	f7fd fd9c 	bl	800db54 <ld_dword>
 801001c:	4602      	mov	r2, r0
 801001e:	4b1f      	ldr	r3, [pc, #124]	; (801009c <find_volume+0x508>)
 8010020:	429a      	cmp	r2, r3
 8010022:	d11e      	bne.n	8010062 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	333c      	adds	r3, #60	; 0x3c
 8010028:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801002c:	4618      	mov	r0, r3
 801002e:	f7fd fd91 	bl	800db54 <ld_dword>
 8010032:	4602      	mov	r2, r0
 8010034:	4b1a      	ldr	r3, [pc, #104]	; (80100a0 <find_volume+0x50c>)
 8010036:	429a      	cmp	r2, r3
 8010038:	d113      	bne.n	8010062 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801003a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003c:	333c      	adds	r3, #60	; 0x3c
 801003e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010042:	4618      	mov	r0, r3
 8010044:	f7fd fd86 	bl	800db54 <ld_dword>
 8010048:	4602      	mov	r2, r0
 801004a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801004e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010050:	333c      	adds	r3, #60	; 0x3c
 8010052:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010056:	4618      	mov	r0, r3
 8010058:	f7fd fd7c 	bl	800db54 <ld_dword>
 801005c:	4602      	mov	r2, r0
 801005e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010060:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010064:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010068:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801006a:	4b0e      	ldr	r3, [pc, #56]	; (80100a4 <find_volume+0x510>)
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	3301      	adds	r3, #1
 8010070:	b29a      	uxth	r2, r3
 8010072:	4b0c      	ldr	r3, [pc, #48]	; (80100a4 <find_volume+0x510>)
 8010074:	801a      	strh	r2, [r3, #0]
 8010076:	4b0b      	ldr	r3, [pc, #44]	; (80100a4 <find_volume+0x510>)
 8010078:	881a      	ldrh	r2, [r3, #0]
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	4a09      	ldr	r2, [pc, #36]	; (80100a8 <find_volume+0x514>)
 8010082:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010086:	2200      	movs	r2, #0
 8010088:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801008a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801008c:	f7fd ff92 	bl	800dfb4 <clear_lock>
#endif
	return FR_OK;
 8010090:	2300      	movs	r3, #0
}
 8010092:	4618      	mov	r0, r3
 8010094:	3758      	adds	r7, #88	; 0x58
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	41615252 	.word	0x41615252
 80100a0:	61417272 	.word	0x61417272
 80100a4:	2001f2dc 	.word	0x2001f2dc
 80100a8:	2001f300 	.word	0x2001f300

080100ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b084      	sub	sp, #16
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
 80100b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80100b6:	2309      	movs	r3, #9
 80100b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d01c      	beq.n	80100fa <validate+0x4e>
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d018      	beq.n	80100fa <validate+0x4e>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d013      	beq.n	80100fa <validate+0x4e>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	889a      	ldrh	r2, [r3, #4]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	88db      	ldrh	r3, [r3, #6]
 80100dc:	429a      	cmp	r2, r3
 80100de:	d10c      	bne.n	80100fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	785b      	ldrb	r3, [r3, #1]
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fd fc7e 	bl	800d9e8 <disk_status>
 80100ec:	4603      	mov	r3, r0
 80100ee:	f003 0301 	and.w	r3, r3, #1
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <validate+0x4e>
			res = FR_OK;
 80100f6:	2300      	movs	r3, #0
 80100f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80100fa:	7bfb      	ldrb	r3, [r7, #15]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d102      	bne.n	8010106 <validate+0x5a>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	e000      	b.n	8010108 <validate+0x5c>
 8010106:	2300      	movs	r3, #0
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	6013      	str	r3, [r2, #0]
	return res;
 801010c:	7bfb      	ldrb	r3, [r7, #15]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3710      	adds	r7, #16
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
	...

08010118 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010118:	b580      	push	{r7, lr}
 801011a:	b088      	sub	sp, #32
 801011c:	af00      	add	r7, sp, #0
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	4613      	mov	r3, r2
 8010124:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801012a:	f107 0310 	add.w	r3, r7, #16
 801012e:	4618      	mov	r0, r3
 8010130:	f7ff fc95 	bl	800fa5e <get_ldnumber>
 8010134:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	2b00      	cmp	r3, #0
 801013a:	da01      	bge.n	8010140 <f_mount+0x28>
 801013c:	230b      	movs	r3, #11
 801013e:	e02b      	b.n	8010198 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010140:	4a17      	ldr	r2, [pc, #92]	; (80101a0 <f_mount+0x88>)
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010148:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d005      	beq.n	801015c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010150:	69b8      	ldr	r0, [r7, #24]
 8010152:	f7fd ff2f 	bl	800dfb4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010156:	69bb      	ldr	r3, [r7, #24]
 8010158:	2200      	movs	r2, #0
 801015a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2200      	movs	r2, #0
 8010166:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010168:	68fa      	ldr	r2, [r7, #12]
 801016a:	490d      	ldr	r1, [pc, #52]	; (80101a0 <f_mount+0x88>)
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d002      	beq.n	801017e <f_mount+0x66>
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	2b01      	cmp	r3, #1
 801017c:	d001      	beq.n	8010182 <f_mount+0x6a>
 801017e:	2300      	movs	r3, #0
 8010180:	e00a      	b.n	8010198 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010182:	f107 010c 	add.w	r1, r7, #12
 8010186:	f107 0308 	add.w	r3, r7, #8
 801018a:	2200      	movs	r2, #0
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff fd01 	bl	800fb94 <find_volume>
 8010192:	4603      	mov	r3, r0
 8010194:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010196:	7dfb      	ldrb	r3, [r7, #23]
}
 8010198:	4618      	mov	r0, r3
 801019a:	3720      	adds	r7, #32
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	2001f2d8 	.word	0x2001f2d8

080101a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b09a      	sub	sp, #104	; 0x68
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	60f8      	str	r0, [r7, #12]
 80101ac:	60b9      	str	r1, [r7, #8]
 80101ae:	4613      	mov	r3, r2
 80101b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <f_open+0x18>
 80101b8:	2309      	movs	r3, #9
 80101ba:	e1bb      	b.n	8010534 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80101bc:	79fb      	ldrb	r3, [r7, #7]
 80101be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80101c4:	79fa      	ldrb	r2, [r7, #7]
 80101c6:	f107 0114 	add.w	r1, r7, #20
 80101ca:	f107 0308 	add.w	r3, r7, #8
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff fce0 	bl	800fb94 <find_volume>
 80101d4:	4603      	mov	r3, r0
 80101d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80101da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101de:	2b00      	cmp	r3, #0
 80101e0:	f040 819f 	bne.w	8010522 <f_open+0x37e>
		dj.obj.fs = fs;
 80101e4:	697b      	ldr	r3, [r7, #20]
 80101e6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80101e8:	68ba      	ldr	r2, [r7, #8]
 80101ea:	f107 0318 	add.w	r3, r7, #24
 80101ee:	4611      	mov	r1, r2
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7ff fb9f 	bl	800f934 <follow_path>
 80101f6:	4603      	mov	r3, r0
 80101f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80101fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010200:	2b00      	cmp	r3, #0
 8010202:	d11a      	bne.n	801023a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010204:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010208:	b25b      	sxtb	r3, r3
 801020a:	2b00      	cmp	r3, #0
 801020c:	da03      	bge.n	8010216 <f_open+0x72>
				res = FR_INVALID_NAME;
 801020e:	2306      	movs	r3, #6
 8010210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010214:	e011      	b.n	801023a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010216:	79fb      	ldrb	r3, [r7, #7]
 8010218:	f023 0301 	bic.w	r3, r3, #1
 801021c:	2b00      	cmp	r3, #0
 801021e:	bf14      	ite	ne
 8010220:	2301      	movne	r3, #1
 8010222:	2300      	moveq	r3, #0
 8010224:	b2db      	uxtb	r3, r3
 8010226:	461a      	mov	r2, r3
 8010228:	f107 0318 	add.w	r3, r7, #24
 801022c:	4611      	mov	r1, r2
 801022e:	4618      	mov	r0, r3
 8010230:	f7fd fd78 	bl	800dd24 <chk_lock>
 8010234:	4603      	mov	r3, r0
 8010236:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801023a:	79fb      	ldrb	r3, [r7, #7]
 801023c:	f003 031c 	and.w	r3, r3, #28
 8010240:	2b00      	cmp	r3, #0
 8010242:	d07f      	beq.n	8010344 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010244:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010248:	2b00      	cmp	r3, #0
 801024a:	d017      	beq.n	801027c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801024c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010250:	2b04      	cmp	r3, #4
 8010252:	d10e      	bne.n	8010272 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010254:	f7fd fdc2 	bl	800dddc <enq_lock>
 8010258:	4603      	mov	r3, r0
 801025a:	2b00      	cmp	r3, #0
 801025c:	d006      	beq.n	801026c <f_open+0xc8>
 801025e:	f107 0318 	add.w	r3, r7, #24
 8010262:	4618      	mov	r0, r3
 8010264:	f7ff f820 	bl	800f2a8 <dir_register>
 8010268:	4603      	mov	r3, r0
 801026a:	e000      	b.n	801026e <f_open+0xca>
 801026c:	2312      	movs	r3, #18
 801026e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	f043 0308 	orr.w	r3, r3, #8
 8010278:	71fb      	strb	r3, [r7, #7]
 801027a:	e010      	b.n	801029e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801027c:	7fbb      	ldrb	r3, [r7, #30]
 801027e:	f003 0311 	and.w	r3, r3, #17
 8010282:	2b00      	cmp	r3, #0
 8010284:	d003      	beq.n	801028e <f_open+0xea>
					res = FR_DENIED;
 8010286:	2307      	movs	r3, #7
 8010288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801028c:	e007      	b.n	801029e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801028e:	79fb      	ldrb	r3, [r7, #7]
 8010290:	f003 0304 	and.w	r3, r3, #4
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <f_open+0xfa>
 8010298:	2308      	movs	r3, #8
 801029a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801029e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d168      	bne.n	8010378 <f_open+0x1d4>
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	f003 0308 	and.w	r3, r3, #8
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d063      	beq.n	8010378 <f_open+0x1d4>
				dw = GET_FATTIME();
 80102b0:	f7fd f94a 	bl	800d548 <get_fattime>
 80102b4:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80102b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b8:	330e      	adds	r3, #14
 80102ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fd fc87 	bl	800dbd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	3316      	adds	r3, #22
 80102c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7fd fc81 	bl	800dbd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80102ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d0:	330b      	adds	r3, #11
 80102d2:	2220      	movs	r2, #32
 80102d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102da:	4611      	mov	r1, r2
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe fc50 	bl	800eb82 <ld_clust>
 80102e2:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102e8:	2200      	movs	r2, #0
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fe fc68 	bl	800ebc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80102f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f2:	331c      	adds	r3, #28
 80102f4:	2100      	movs	r1, #0
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fd fc6a 	bl	800dbd0 <st_dword>
					fs->wflag = 1;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	2201      	movs	r2, #1
 8010300:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010304:	2b00      	cmp	r3, #0
 8010306:	d037      	beq.n	8010378 <f_open+0x1d4>
						dw = fs->winsect;
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801030e:	f107 0318 	add.w	r3, r7, #24
 8010312:	2200      	movs	r2, #0
 8010314:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010316:	4618      	mov	r0, r3
 8010318:	f7fe f958 	bl	800e5cc <remove_chain>
 801031c:	4603      	mov	r3, r0
 801031e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010326:	2b00      	cmp	r3, #0
 8010328:	d126      	bne.n	8010378 <f_open+0x1d4>
							res = move_window(fs, dw);
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801032e:	4618      	mov	r0, r3
 8010330:	f7fd fea8 	bl	800e084 <move_window>
 8010334:	4603      	mov	r3, r0
 8010336:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801033e:	3a01      	subs	r2, #1
 8010340:	615a      	str	r2, [r3, #20]
 8010342:	e019      	b.n	8010378 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010348:	2b00      	cmp	r3, #0
 801034a:	d115      	bne.n	8010378 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801034c:	7fbb      	ldrb	r3, [r7, #30]
 801034e:	f003 0310 	and.w	r3, r3, #16
 8010352:	2b00      	cmp	r3, #0
 8010354:	d003      	beq.n	801035e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010356:	2304      	movs	r3, #4
 8010358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801035c:	e00c      	b.n	8010378 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801035e:	79fb      	ldrb	r3, [r7, #7]
 8010360:	f003 0302 	and.w	r3, r3, #2
 8010364:	2b00      	cmp	r3, #0
 8010366:	d007      	beq.n	8010378 <f_open+0x1d4>
 8010368:	7fbb      	ldrb	r3, [r7, #30]
 801036a:	f003 0301 	and.w	r3, r3, #1
 801036e:	2b00      	cmp	r3, #0
 8010370:	d002      	beq.n	8010378 <f_open+0x1d4>
						res = FR_DENIED;
 8010372:	2307      	movs	r3, #7
 8010374:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010378:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801037c:	2b00      	cmp	r3, #0
 801037e:	d128      	bne.n	80103d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010380:	79fb      	ldrb	r3, [r7, #7]
 8010382:	f003 0308 	and.w	r3, r3, #8
 8010386:	2b00      	cmp	r3, #0
 8010388:	d003      	beq.n	8010392 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801038a:	79fb      	ldrb	r3, [r7, #7]
 801038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010390:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801039a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103a0:	79fb      	ldrb	r3, [r7, #7]
 80103a2:	f023 0301 	bic.w	r3, r3, #1
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	bf14      	ite	ne
 80103aa:	2301      	movne	r3, #1
 80103ac:	2300      	moveq	r3, #0
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	461a      	mov	r2, r3
 80103b2:	f107 0318 	add.w	r3, r7, #24
 80103b6:	4611      	mov	r1, r2
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fd fd31 	bl	800de20 <inc_lock>
 80103be:	4602      	mov	r2, r0
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d102      	bne.n	80103d2 <f_open+0x22e>
 80103cc:	2302      	movs	r3, #2
 80103ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80103d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f040 80a3 	bne.w	8010522 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103e0:	4611      	mov	r1, r2
 80103e2:	4618      	mov	r0, r3
 80103e4:	f7fe fbcd 	bl	800eb82 <ld_clust>
 80103e8:	4602      	mov	r2, r0
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80103ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f0:	331c      	adds	r3, #28
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7fd fbae 	bl	800db54 <ld_dword>
 80103f8:	4602      	mov	r2, r0
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	88da      	ldrh	r2, [r3, #6]
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	79fa      	ldrb	r2, [r7, #7]
 8010416:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2200      	movs	r2, #0
 801041c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	2200      	movs	r2, #0
 8010428:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	3330      	adds	r3, #48	; 0x30
 801042e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010432:	2100      	movs	r1, #0
 8010434:	4618      	mov	r0, r3
 8010436:	f7fd fc18 	bl	800dc6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801043a:	79fb      	ldrb	r3, [r7, #7]
 801043c:	f003 0320 	and.w	r3, r3, #32
 8010440:	2b00      	cmp	r3, #0
 8010442:	d06e      	beq.n	8010522 <f_open+0x37e>
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	68db      	ldr	r3, [r3, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d06a      	beq.n	8010522 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	68da      	ldr	r2, [r3, #12]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	895b      	ldrh	r3, [r3, #10]
 8010458:	461a      	mov	r2, r3
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	899b      	ldrh	r3, [r3, #12]
 801045e:	fb03 f302 	mul.w	r3, r3, r2
 8010462:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	68db      	ldr	r3, [r3, #12]
 801046e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010470:	e016      	b.n	80104a0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010476:	4618      	mov	r0, r3
 8010478:	f7fd fec1 	bl	800e1fe <get_fat>
 801047c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801047e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010480:	2b01      	cmp	r3, #1
 8010482:	d802      	bhi.n	801048a <f_open+0x2e6>
 8010484:	2302      	movs	r3, #2
 8010486:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801048a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010490:	d102      	bne.n	8010498 <f_open+0x2f4>
 8010492:	2301      	movs	r3, #1
 8010494:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801049a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801049c:	1ad3      	subs	r3, r2, r3
 801049e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80104a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d103      	bne.n	80104b0 <f_open+0x30c>
 80104a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80104aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d8e0      	bhi.n	8010472 <f_open+0x2ce>
				}
				fp->clust = clst;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104b4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80104b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d131      	bne.n	8010522 <f_open+0x37e>
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	899b      	ldrh	r3, [r3, #12]
 80104c2:	461a      	mov	r2, r3
 80104c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80104ca:	fb02 f201 	mul.w	r2, r2, r1
 80104ce:	1a9b      	subs	r3, r3, r2
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d026      	beq.n	8010522 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fd fe71 	bl	800e1c0 <clust2sect>
 80104de:	64f8      	str	r0, [r7, #76]	; 0x4c
 80104e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d103      	bne.n	80104ee <f_open+0x34a>
						res = FR_INT_ERR;
 80104e6:	2302      	movs	r3, #2
 80104e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80104ec:	e019      	b.n	8010522 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	899b      	ldrh	r3, [r3, #12]
 80104f2:	461a      	mov	r2, r3
 80104f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80104fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104fc:	441a      	add	r2, r3
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	7858      	ldrb	r0, [r3, #1]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6a1a      	ldr	r2, [r3, #32]
 8010510:	2301      	movs	r3, #1
 8010512:	f7fd faa9 	bl	800da68 <disk_read>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d002      	beq.n	8010522 <f_open+0x37e>
 801051c:	2301      	movs	r3, #1
 801051e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010522:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010526:	2b00      	cmp	r3, #0
 8010528:	d002      	beq.n	8010530 <f_open+0x38c>
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2200      	movs	r2, #0
 801052e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010530:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010534:	4618      	mov	r0, r3
 8010536:	3768      	adds	r7, #104	; 0x68
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b08e      	sub	sp, #56	; 0x38
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	2200      	movs	r2, #0
 8010552:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	f107 0214 	add.w	r2, r7, #20
 801055a:	4611      	mov	r1, r2
 801055c:	4618      	mov	r0, r3
 801055e:	f7ff fda5 	bl	80100ac <validate>
 8010562:	4603      	mov	r3, r0
 8010564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010568:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801056c:	2b00      	cmp	r3, #0
 801056e:	d107      	bne.n	8010580 <f_read+0x44>
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	7d5b      	ldrb	r3, [r3, #21]
 8010574:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801057c:	2b00      	cmp	r3, #0
 801057e:	d002      	beq.n	8010586 <f_read+0x4a>
 8010580:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010584:	e135      	b.n	80107f2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	7d1b      	ldrb	r3, [r3, #20]
 801058a:	f003 0301 	and.w	r3, r3, #1
 801058e:	2b00      	cmp	r3, #0
 8010590:	d101      	bne.n	8010596 <f_read+0x5a>
 8010592:	2307      	movs	r3, #7
 8010594:	e12d      	b.n	80107f2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	68da      	ldr	r2, [r3, #12]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	699b      	ldr	r3, [r3, #24]
 801059e:	1ad3      	subs	r3, r2, r3
 80105a0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	6a3b      	ldr	r3, [r7, #32]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	f240 811e 	bls.w	80107e8 <f_read+0x2ac>
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80105b0:	e11a      	b.n	80107e8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	699b      	ldr	r3, [r3, #24]
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	8992      	ldrh	r2, [r2, #12]
 80105ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80105be:	fb02 f201 	mul.w	r2, r2, r1
 80105c2:	1a9b      	subs	r3, r3, r2
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	f040 80d5 	bne.w	8010774 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	699b      	ldr	r3, [r3, #24]
 80105ce:	697a      	ldr	r2, [r7, #20]
 80105d0:	8992      	ldrh	r2, [r2, #12]
 80105d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80105d6:	697a      	ldr	r2, [r7, #20]
 80105d8:	8952      	ldrh	r2, [r2, #10]
 80105da:	3a01      	subs	r2, #1
 80105dc:	4013      	ands	r3, r2
 80105de:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d12f      	bne.n	8010646 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	699b      	ldr	r3, [r3, #24]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d103      	bne.n	80105f6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	633b      	str	r3, [r7, #48]	; 0x30
 80105f4:	e013      	b.n	801061e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d007      	beq.n	801060e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	699b      	ldr	r3, [r3, #24]
 8010602:	4619      	mov	r1, r3
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f7fe f8de 	bl	800e7c6 <clmt_clust>
 801060a:	6338      	str	r0, [r7, #48]	; 0x30
 801060c:	e007      	b.n	801061e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801060e:	68fa      	ldr	r2, [r7, #12]
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	69db      	ldr	r3, [r3, #28]
 8010614:	4619      	mov	r1, r3
 8010616:	4610      	mov	r0, r2
 8010618:	f7fd fdf1 	bl	800e1fe <get_fat>
 801061c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	2b01      	cmp	r3, #1
 8010622:	d804      	bhi.n	801062e <f_read+0xf2>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2202      	movs	r2, #2
 8010628:	755a      	strb	r2, [r3, #21]
 801062a:	2302      	movs	r3, #2
 801062c:	e0e1      	b.n	80107f2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801062e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010634:	d104      	bne.n	8010640 <f_read+0x104>
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2201      	movs	r2, #1
 801063a:	755a      	strb	r2, [r3, #21]
 801063c:	2301      	movs	r3, #1
 801063e:	e0d8      	b.n	80107f2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010644:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010646:	697a      	ldr	r2, [r7, #20]
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	69db      	ldr	r3, [r3, #28]
 801064c:	4619      	mov	r1, r3
 801064e:	4610      	mov	r0, r2
 8010650:	f7fd fdb6 	bl	800e1c0 <clust2sect>
 8010654:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010656:	69bb      	ldr	r3, [r7, #24]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d104      	bne.n	8010666 <f_read+0x12a>
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2202      	movs	r2, #2
 8010660:	755a      	strb	r2, [r3, #21]
 8010662:	2302      	movs	r3, #2
 8010664:	e0c5      	b.n	80107f2 <f_read+0x2b6>
			sect += csect;
 8010666:	69ba      	ldr	r2, [r7, #24]
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	4413      	add	r3, r2
 801066c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	899b      	ldrh	r3, [r3, #12]
 8010672:	461a      	mov	r2, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	fbb3 f3f2 	udiv	r3, r3, r2
 801067a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	2b00      	cmp	r3, #0
 8010680:	d041      	beq.n	8010706 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010682:	69fa      	ldr	r2, [r7, #28]
 8010684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010686:	4413      	add	r3, r2
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	8952      	ldrh	r2, [r2, #10]
 801068c:	4293      	cmp	r3, r2
 801068e:	d905      	bls.n	801069c <f_read+0x160>
					cc = fs->csize - csect;
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	895b      	ldrh	r3, [r3, #10]
 8010694:	461a      	mov	r2, r3
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	7858      	ldrb	r0, [r3, #1]
 80106a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a2:	69ba      	ldr	r2, [r7, #24]
 80106a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80106a6:	f7fd f9df 	bl	800da68 <disk_read>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d004      	beq.n	80106ba <f_read+0x17e>
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	2201      	movs	r2, #1
 80106b4:	755a      	strb	r2, [r3, #21]
 80106b6:	2301      	movs	r3, #1
 80106b8:	e09b      	b.n	80107f2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	7d1b      	ldrb	r3, [r3, #20]
 80106be:	b25b      	sxtb	r3, r3
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	da18      	bge.n	80106f6 <f_read+0x1ba>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6a1a      	ldr	r2, [r3, #32]
 80106c8:	69bb      	ldr	r3, [r7, #24]
 80106ca:	1ad3      	subs	r3, r2, r3
 80106cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d911      	bls.n	80106f6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6a1a      	ldr	r2, [r3, #32]
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	1ad3      	subs	r3, r2, r3
 80106da:	697a      	ldr	r2, [r7, #20]
 80106dc:	8992      	ldrh	r2, [r2, #12]
 80106de:	fb02 f303 	mul.w	r3, r2, r3
 80106e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106e4:	18d0      	adds	r0, r2, r3
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	899b      	ldrh	r3, [r3, #12]
 80106f0:	461a      	mov	r2, r3
 80106f2:	f7fd fa99 	bl	800dc28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	899b      	ldrh	r3, [r3, #12]
 80106fa:	461a      	mov	r2, r3
 80106fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106fe:	fb02 f303 	mul.w	r3, r2, r3
 8010702:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010704:	e05c      	b.n	80107c0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6a1b      	ldr	r3, [r3, #32]
 801070a:	69ba      	ldr	r2, [r7, #24]
 801070c:	429a      	cmp	r2, r3
 801070e:	d02e      	beq.n	801076e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	7d1b      	ldrb	r3, [r3, #20]
 8010714:	b25b      	sxtb	r3, r3
 8010716:	2b00      	cmp	r3, #0
 8010718:	da18      	bge.n	801074c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801071a:	697b      	ldr	r3, [r7, #20]
 801071c:	7858      	ldrb	r0, [r3, #1]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6a1a      	ldr	r2, [r3, #32]
 8010728:	2301      	movs	r3, #1
 801072a:	f7fd f9bd 	bl	800daa8 <disk_write>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d004      	beq.n	801073e <f_read+0x202>
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2201      	movs	r2, #1
 8010738:	755a      	strb	r2, [r3, #21]
 801073a:	2301      	movs	r3, #1
 801073c:	e059      	b.n	80107f2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	7d1b      	ldrb	r3, [r3, #20]
 8010742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010746:	b2da      	uxtb	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	7858      	ldrb	r0, [r3, #1]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010756:	2301      	movs	r3, #1
 8010758:	69ba      	ldr	r2, [r7, #24]
 801075a:	f7fd f985 	bl	800da68 <disk_read>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d004      	beq.n	801076e <f_read+0x232>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2201      	movs	r2, #1
 8010768:	755a      	strb	r2, [r3, #21]
 801076a:	2301      	movs	r3, #1
 801076c:	e041      	b.n	80107f2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	69ba      	ldr	r2, [r7, #24]
 8010772:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	899b      	ldrh	r3, [r3, #12]
 8010778:	4618      	mov	r0, r3
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	699b      	ldr	r3, [r3, #24]
 801077e:	697a      	ldr	r2, [r7, #20]
 8010780:	8992      	ldrh	r2, [r2, #12]
 8010782:	fbb3 f1f2 	udiv	r1, r3, r2
 8010786:	fb02 f201 	mul.w	r2, r2, r1
 801078a:	1a9b      	subs	r3, r3, r2
 801078c:	1ac3      	subs	r3, r0, r3
 801078e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	429a      	cmp	r2, r3
 8010796:	d901      	bls.n	801079c <f_read+0x260>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	699b      	ldr	r3, [r3, #24]
 80107a6:	697a      	ldr	r2, [r7, #20]
 80107a8:	8992      	ldrh	r2, [r2, #12]
 80107aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80107ae:	fb02 f200 	mul.w	r2, r2, r0
 80107b2:	1a9b      	subs	r3, r3, r2
 80107b4:	440b      	add	r3, r1
 80107b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b8:	4619      	mov	r1, r3
 80107ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107bc:	f7fd fa34 	bl	800dc28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80107c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c4:	4413      	add	r3, r2
 80107c6:	627b      	str	r3, [r7, #36]	; 0x24
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	699a      	ldr	r2, [r3, #24]
 80107cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ce:	441a      	add	r2, r3
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	619a      	str	r2, [r3, #24]
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107da:	441a      	add	r2, r3
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	687a      	ldr	r2, [r7, #4]
 80107e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107e4:	1ad3      	subs	r3, r2, r3
 80107e6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f47f aee1 	bne.w	80105b2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80107f0:	2300      	movs	r3, #0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3738      	adds	r7, #56	; 0x38
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b08c      	sub	sp, #48	; 0x30
 80107fe:	af00      	add	r7, sp, #0
 8010800:	60f8      	str	r0, [r7, #12]
 8010802:	60b9      	str	r1, [r7, #8]
 8010804:	607a      	str	r2, [r7, #4]
 8010806:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	2200      	movs	r2, #0
 8010810:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	f107 0210 	add.w	r2, r7, #16
 8010818:	4611      	mov	r1, r2
 801081a:	4618      	mov	r0, r3
 801081c:	f7ff fc46 	bl	80100ac <validate>
 8010820:	4603      	mov	r3, r0
 8010822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801082a:	2b00      	cmp	r3, #0
 801082c:	d107      	bne.n	801083e <f_write+0x44>
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	7d5b      	ldrb	r3, [r3, #21]
 8010832:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010836:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801083a:	2b00      	cmp	r3, #0
 801083c:	d002      	beq.n	8010844 <f_write+0x4a>
 801083e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010842:	e16a      	b.n	8010b1a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	7d1b      	ldrb	r3, [r3, #20]
 8010848:	f003 0302 	and.w	r3, r3, #2
 801084c:	2b00      	cmp	r3, #0
 801084e:	d101      	bne.n	8010854 <f_write+0x5a>
 8010850:	2307      	movs	r3, #7
 8010852:	e162      	b.n	8010b1a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	699a      	ldr	r2, [r3, #24]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	441a      	add	r2, r3
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	699b      	ldr	r3, [r3, #24]
 8010860:	429a      	cmp	r2, r3
 8010862:	f080 814c 	bcs.w	8010afe <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	699b      	ldr	r3, [r3, #24]
 801086a:	43db      	mvns	r3, r3
 801086c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801086e:	e146      	b.n	8010afe <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	699b      	ldr	r3, [r3, #24]
 8010874:	693a      	ldr	r2, [r7, #16]
 8010876:	8992      	ldrh	r2, [r2, #12]
 8010878:	fbb3 f1f2 	udiv	r1, r3, r2
 801087c:	fb02 f201 	mul.w	r2, r2, r1
 8010880:	1a9b      	subs	r3, r3, r2
 8010882:	2b00      	cmp	r3, #0
 8010884:	f040 80f1 	bne.w	8010a6a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	699b      	ldr	r3, [r3, #24]
 801088c:	693a      	ldr	r2, [r7, #16]
 801088e:	8992      	ldrh	r2, [r2, #12]
 8010890:	fbb3 f3f2 	udiv	r3, r3, r2
 8010894:	693a      	ldr	r2, [r7, #16]
 8010896:	8952      	ldrh	r2, [r2, #10]
 8010898:	3a01      	subs	r2, #1
 801089a:	4013      	ands	r3, r2
 801089c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d143      	bne.n	801092c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	699b      	ldr	r3, [r3, #24]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10c      	bne.n	80108c6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80108b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d11a      	bne.n	80108ee <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	2100      	movs	r1, #0
 80108bc:	4618      	mov	r0, r3
 80108be:	f7fd feea 	bl	800e696 <create_chain>
 80108c2:	62b8      	str	r0, [r7, #40]	; 0x28
 80108c4:	e013      	b.n	80108ee <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d007      	beq.n	80108de <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	699b      	ldr	r3, [r3, #24]
 80108d2:	4619      	mov	r1, r3
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f7fd ff76 	bl	800e7c6 <clmt_clust>
 80108da:	62b8      	str	r0, [r7, #40]	; 0x28
 80108dc:	e007      	b.n	80108ee <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80108de:	68fa      	ldr	r2, [r7, #12]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	69db      	ldr	r3, [r3, #28]
 80108e4:	4619      	mov	r1, r3
 80108e6:	4610      	mov	r0, r2
 80108e8:	f7fd fed5 	bl	800e696 <create_chain>
 80108ec:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80108ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f000 8109 	beq.w	8010b08 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80108f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d104      	bne.n	8010906 <f_write+0x10c>
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	2202      	movs	r2, #2
 8010900:	755a      	strb	r2, [r3, #21]
 8010902:	2302      	movs	r3, #2
 8010904:	e109      	b.n	8010b1a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801090c:	d104      	bne.n	8010918 <f_write+0x11e>
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2201      	movs	r2, #1
 8010912:	755a      	strb	r2, [r3, #21]
 8010914:	2301      	movs	r3, #1
 8010916:	e100      	b.n	8010b1a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801091c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	689b      	ldr	r3, [r3, #8]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d102      	bne.n	801092c <f_write+0x132>
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801092a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	7d1b      	ldrb	r3, [r3, #20]
 8010930:	b25b      	sxtb	r3, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	da18      	bge.n	8010968 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	7858      	ldrb	r0, [r3, #1]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	6a1a      	ldr	r2, [r3, #32]
 8010944:	2301      	movs	r3, #1
 8010946:	f7fd f8af 	bl	800daa8 <disk_write>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d004      	beq.n	801095a <f_write+0x160>
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2201      	movs	r2, #1
 8010954:	755a      	strb	r2, [r3, #21]
 8010956:	2301      	movs	r3, #1
 8010958:	e0df      	b.n	8010b1a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	7d1b      	ldrb	r3, [r3, #20]
 801095e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010962:	b2da      	uxtb	r2, r3
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010968:	693a      	ldr	r2, [r7, #16]
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	69db      	ldr	r3, [r3, #28]
 801096e:	4619      	mov	r1, r3
 8010970:	4610      	mov	r0, r2
 8010972:	f7fd fc25 	bl	800e1c0 <clust2sect>
 8010976:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d104      	bne.n	8010988 <f_write+0x18e>
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2202      	movs	r2, #2
 8010982:	755a      	strb	r2, [r3, #21]
 8010984:	2302      	movs	r3, #2
 8010986:	e0c8      	b.n	8010b1a <f_write+0x320>
			sect += csect;
 8010988:	697a      	ldr	r2, [r7, #20]
 801098a:	69bb      	ldr	r3, [r7, #24]
 801098c:	4413      	add	r3, r2
 801098e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	899b      	ldrh	r3, [r3, #12]
 8010994:	461a      	mov	r2, r3
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	fbb3 f3f2 	udiv	r3, r3, r2
 801099c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801099e:	6a3b      	ldr	r3, [r7, #32]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d043      	beq.n	8010a2c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80109a4:	69ba      	ldr	r2, [r7, #24]
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	4413      	add	r3, r2
 80109aa:	693a      	ldr	r2, [r7, #16]
 80109ac:	8952      	ldrh	r2, [r2, #10]
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d905      	bls.n	80109be <f_write+0x1c4>
					cc = fs->csize - csect;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	895b      	ldrh	r3, [r3, #10]
 80109b6:	461a      	mov	r2, r3
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	1ad3      	subs	r3, r2, r3
 80109bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	7858      	ldrb	r0, [r3, #1]
 80109c2:	6a3b      	ldr	r3, [r7, #32]
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	69f9      	ldr	r1, [r7, #28]
 80109c8:	f7fd f86e 	bl	800daa8 <disk_write>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d004      	beq.n	80109dc <f_write+0x1e2>
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	2201      	movs	r2, #1
 80109d6:	755a      	strb	r2, [r3, #21]
 80109d8:	2301      	movs	r3, #1
 80109da:	e09e      	b.n	8010b1a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	6a1a      	ldr	r2, [r3, #32]
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	6a3a      	ldr	r2, [r7, #32]
 80109e6:	429a      	cmp	r2, r3
 80109e8:	d918      	bls.n	8010a1c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6a1a      	ldr	r2, [r3, #32]
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	1ad3      	subs	r3, r2, r3
 80109f8:	693a      	ldr	r2, [r7, #16]
 80109fa:	8992      	ldrh	r2, [r2, #12]
 80109fc:	fb02 f303 	mul.w	r3, r2, r3
 8010a00:	69fa      	ldr	r2, [r7, #28]
 8010a02:	18d1      	adds	r1, r2, r3
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	899b      	ldrh	r3, [r3, #12]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	f7fd f90d 	bl	800dc28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	7d1b      	ldrb	r3, [r3, #20]
 8010a12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a16:	b2da      	uxtb	r2, r3
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	899b      	ldrh	r3, [r3, #12]
 8010a20:	461a      	mov	r2, r3
 8010a22:	6a3b      	ldr	r3, [r7, #32]
 8010a24:	fb02 f303 	mul.w	r3, r2, r3
 8010a28:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010a2a:	e04b      	b.n	8010ac4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6a1b      	ldr	r3, [r3, #32]
 8010a30:	697a      	ldr	r2, [r7, #20]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d016      	beq.n	8010a64 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	699a      	ldr	r2, [r3, #24]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d210      	bcs.n	8010a64 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	7858      	ldrb	r0, [r3, #1]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	697a      	ldr	r2, [r7, #20]
 8010a50:	f7fd f80a 	bl	800da68 <disk_read>
 8010a54:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d004      	beq.n	8010a64 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	755a      	strb	r2, [r3, #21]
 8010a60:	2301      	movs	r3, #1
 8010a62:	e05a      	b.n	8010b1a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	899b      	ldrh	r3, [r3, #12]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	699b      	ldr	r3, [r3, #24]
 8010a74:	693a      	ldr	r2, [r7, #16]
 8010a76:	8992      	ldrh	r2, [r2, #12]
 8010a78:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a7c:	fb02 f201 	mul.w	r2, r2, r1
 8010a80:	1a9b      	subs	r3, r3, r2
 8010a82:	1ac3      	subs	r3, r0, r3
 8010a84:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d901      	bls.n	8010a92 <f_write+0x298>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	699b      	ldr	r3, [r3, #24]
 8010a9c:	693a      	ldr	r2, [r7, #16]
 8010a9e:	8992      	ldrh	r2, [r2, #12]
 8010aa0:	fbb3 f0f2 	udiv	r0, r3, r2
 8010aa4:	fb02 f200 	mul.w	r2, r2, r0
 8010aa8:	1a9b      	subs	r3, r3, r2
 8010aaa:	440b      	add	r3, r1
 8010aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010aae:	69f9      	ldr	r1, [r7, #28]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fd f8b9 	bl	800dc28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	7d1b      	ldrb	r3, [r3, #20]
 8010aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010abe:	b2da      	uxtb	r2, r3
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010ac4:	69fa      	ldr	r2, [r7, #28]
 8010ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac8:	4413      	add	r3, r2
 8010aca:	61fb      	str	r3, [r7, #28]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	699a      	ldr	r2, [r3, #24]
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	441a      	add	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	619a      	str	r2, [r3, #24]
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	68da      	ldr	r2, [r3, #12]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	bf38      	it	cc
 8010ae4:	461a      	movcc	r2, r3
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	60da      	str	r2, [r3, #12]
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	681a      	ldr	r2, [r3, #0]
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	441a      	add	r2, r3
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	601a      	str	r2, [r3, #0]
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	1ad3      	subs	r3, r2, r3
 8010afc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f47f aeb5 	bne.w	8010870 <f_write+0x76>
 8010b06:	e000      	b.n	8010b0a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010b08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	7d1b      	ldrb	r3, [r3, #20]
 8010b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b12:	b2da      	uxtb	r2, r3
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010b18:	2300      	movs	r3, #0
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3730      	adds	r7, #48	; 0x30
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}

08010b22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010b22:	b580      	push	{r7, lr}
 8010b24:	b086      	sub	sp, #24
 8010b26:	af00      	add	r7, sp, #0
 8010b28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f107 0208 	add.w	r2, r7, #8
 8010b30:	4611      	mov	r1, r2
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ff faba 	bl	80100ac <validate>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b3c:	7dfb      	ldrb	r3, [r7, #23]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d168      	bne.n	8010c14 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	7d1b      	ldrb	r3, [r3, #20]
 8010b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d062      	beq.n	8010c14 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	7d1b      	ldrb	r3, [r3, #20]
 8010b52:	b25b      	sxtb	r3, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	da15      	bge.n	8010b84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	7858      	ldrb	r0, [r3, #1]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6a1a      	ldr	r2, [r3, #32]
 8010b66:	2301      	movs	r3, #1
 8010b68:	f7fc ff9e 	bl	800daa8 <disk_write>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d001      	beq.n	8010b76 <f_sync+0x54>
 8010b72:	2301      	movs	r3, #1
 8010b74:	e04f      	b.n	8010c16 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7d1b      	ldrb	r3, [r3, #20]
 8010b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b7e:	b2da      	uxtb	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010b84:	f7fc fce0 	bl	800d548 <get_fattime>
 8010b88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010b8a:	68ba      	ldr	r2, [r7, #8]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b90:	4619      	mov	r1, r3
 8010b92:	4610      	mov	r0, r2
 8010b94:	f7fd fa76 	bl	800e084 <move_window>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010b9c:	7dfb      	ldrb	r3, [r7, #23]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d138      	bne.n	8010c14 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ba6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	330b      	adds	r3, #11
 8010bac:	781a      	ldrb	r2, [r3, #0]
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	330b      	adds	r3, #11
 8010bb2:	f042 0220 	orr.w	r2, r2, #32
 8010bb6:	b2d2      	uxtb	r2, r2
 8010bb8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6818      	ldr	r0, [r3, #0]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	68f9      	ldr	r1, [r7, #12]
 8010bc6:	f7fd fffb 	bl	800ebc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f103 021c 	add.w	r2, r3, #28
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	68db      	ldr	r3, [r3, #12]
 8010bd4:	4619      	mov	r1, r3
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	f7fc fffa 	bl	800dbd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3316      	adds	r3, #22
 8010be0:	6939      	ldr	r1, [r7, #16]
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fc fff4 	bl	800dbd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	3312      	adds	r3, #18
 8010bec:	2100      	movs	r1, #0
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7fc ffd3 	bl	800db9a <st_word>
					fs->wflag = 1;
 8010bf4:	68bb      	ldr	r3, [r7, #8]
 8010bf6:	2201      	movs	r2, #1
 8010bf8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fd fa6f 	bl	800e0e0 <sync_fs>
 8010c02:	4603      	mov	r3, r0
 8010c04:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	7d1b      	ldrb	r3, [r3, #20]
 8010c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c0e:	b2da      	uxtb	r2, r3
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3718      	adds	r7, #24
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b084      	sub	sp, #16
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff ff7b 	bl	8010b22 <f_sync>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010c30:	7bfb      	ldrb	r3, [r7, #15]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d118      	bne.n	8010c68 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f107 0208 	add.w	r2, r7, #8
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7ff fa34 	bl	80100ac <validate>
 8010c44:	4603      	mov	r3, r0
 8010c46:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010c48:	7bfb      	ldrb	r3, [r7, #15]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10c      	bne.n	8010c68 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	691b      	ldr	r3, [r3, #16]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fd f972 	bl	800df3c <dec_lock>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010c5c:	7bfb      	ldrb	r3, [r7, #15]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d102      	bne.n	8010c68 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3710      	adds	r7, #16
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010c72:	b590      	push	{r4, r7, lr}
 8010c74:	b093      	sub	sp, #76	; 0x4c
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010c7a:	f107 010c 	add.w	r1, r7, #12
 8010c7e:	1d3b      	adds	r3, r7, #4
 8010c80:	2200      	movs	r2, #0
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fe ff86 	bl	800fb94 <find_volume>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010c8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d131      	bne.n	8010cfa <f_chdir+0x88>
		dj.obj.fs = fs;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	f107 0310 	add.w	r3, r7, #16
 8010ca0:	4611      	mov	r1, r2
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7fe fe46 	bl	800f934 <follow_path>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 8010cae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d11a      	bne.n	8010cec <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010cb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010cba:	b25b      	sxtb	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	da03      	bge.n	8010cc8 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	69ba      	ldr	r2, [r7, #24]
 8010cc4:	61da      	str	r2, [r3, #28]
 8010cc6:	e011      	b.n	8010cec <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010cc8:	7dbb      	ldrb	r3, [r7, #22]
 8010cca:	f003 0310 	and.w	r3, r3, #16
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cd6:	68fc      	ldr	r4, [r7, #12]
 8010cd8:	4611      	mov	r1, r2
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fd ff51 	bl	800eb82 <ld_clust>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	61e3      	str	r3, [r4, #28]
 8010ce4:	e002      	b.n	8010cec <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010ce6:	2305      	movs	r3, #5
 8010ce8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010cec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010cf0:	2b04      	cmp	r3, #4
 8010cf2:	d102      	bne.n	8010cfa <f_chdir+0x88>
 8010cf4:	2305      	movs	r3, #5
 8010cf6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8010cfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	374c      	adds	r7, #76	; 0x4c
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd90      	pop	{r4, r7, pc}

08010d06 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010d06:	b580      	push	{r7, lr}
 8010d08:	b090      	sub	sp, #64	; 0x40
 8010d0a:	af00      	add	r7, sp, #0
 8010d0c:	6078      	str	r0, [r7, #4]
 8010d0e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f107 0208 	add.w	r2, r7, #8
 8010d16:	4611      	mov	r1, r2
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff f9c7 	bl	80100ac <validate>
 8010d1e:	4603      	mov	r3, r0
 8010d20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010d24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d103      	bne.n	8010d34 <f_lseek+0x2e>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	7d5b      	ldrb	r3, [r3, #21]
 8010d30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010d34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d002      	beq.n	8010d42 <f_lseek+0x3c>
 8010d3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d40:	e201      	b.n	8011146 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f000 80d9 	beq.w	8010efe <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010d4c:	683b      	ldr	r3, [r7, #0]
 8010d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d52:	d15a      	bne.n	8010e0a <f_lseek+0x104>
			tbl = fp->cltbl;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d58:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d5c:	1d1a      	adds	r2, r3, #4
 8010d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	617b      	str	r3, [r7, #20]
 8010d64:	2302      	movs	r3, #2
 8010d66:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	689b      	ldr	r3, [r3, #8]
 8010d6c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d03a      	beq.n	8010dea <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d76:	613b      	str	r3, [r7, #16]
 8010d78:	2300      	movs	r3, #0
 8010d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7e:	3302      	adds	r3, #2
 8010d80:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d84:	60fb      	str	r3, [r7, #12]
 8010d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d88:	3301      	adds	r3, #1
 8010d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010d90:	4618      	mov	r0, r3
 8010d92:	f7fd fa34 	bl	800e1fe <get_fat>
 8010d96:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d804      	bhi.n	8010da8 <f_lseek+0xa2>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2202      	movs	r2, #2
 8010da2:	755a      	strb	r2, [r3, #21]
 8010da4:	2302      	movs	r3, #2
 8010da6:	e1ce      	b.n	8011146 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dae:	d104      	bne.n	8010dba <f_lseek+0xb4>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2201      	movs	r2, #1
 8010db4:	755a      	strb	r2, [r3, #21]
 8010db6:	2301      	movs	r3, #1
 8010db8:	e1c5      	b.n	8011146 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d0de      	beq.n	8010d82 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010dc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d809      	bhi.n	8010de0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	1d1a      	adds	r2, r3, #4
 8010dd0:	627a      	str	r2, [r7, #36]	; 0x24
 8010dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd8:	1d1a      	adds	r2, r3, #4
 8010dda:	627a      	str	r2, [r7, #36]	; 0x24
 8010ddc:	693a      	ldr	r2, [r7, #16]
 8010dde:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	6a1b      	ldr	r3, [r3, #32]
 8010de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d3c4      	bcc.n	8010d74 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010df0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d803      	bhi.n	8010e02 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	601a      	str	r2, [r3, #0]
 8010e00:	e19f      	b.n	8011142 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010e02:	2311      	movs	r3, #17
 8010e04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010e08:	e19b      	b.n	8011142 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	68db      	ldr	r3, [r3, #12]
 8010e0e:	683a      	ldr	r2, [r7, #0]
 8010e10:	429a      	cmp	r2, r3
 8010e12:	d902      	bls.n	8010e1a <f_lseek+0x114>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	683a      	ldr	r2, [r7, #0]
 8010e1e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f000 818d 	beq.w	8011142 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010e28:	683b      	ldr	r3, [r7, #0]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7fd fcc9 	bl	800e7c6 <clmt_clust>
 8010e34:	4602      	mov	r2, r0
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010e3a:	68ba      	ldr	r2, [r7, #8]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	69db      	ldr	r3, [r3, #28]
 8010e40:	4619      	mov	r1, r3
 8010e42:	4610      	mov	r0, r2
 8010e44:	f7fd f9bc 	bl	800e1c0 <clust2sect>
 8010e48:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010e4a:	69bb      	ldr	r3, [r7, #24]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d104      	bne.n	8010e5a <f_lseek+0x154>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2202      	movs	r2, #2
 8010e54:	755a      	strb	r2, [r3, #21]
 8010e56:	2302      	movs	r3, #2
 8010e58:	e175      	b.n	8011146 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	8992      	ldrh	r2, [r2, #12]
 8010e62:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e66:	68ba      	ldr	r2, [r7, #8]
 8010e68:	8952      	ldrh	r2, [r2, #10]
 8010e6a:	3a01      	subs	r2, #1
 8010e6c:	4013      	ands	r3, r2
 8010e6e:	69ba      	ldr	r2, [r7, #24]
 8010e70:	4413      	add	r3, r2
 8010e72:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	699b      	ldr	r3, [r3, #24]
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	8992      	ldrh	r2, [r2, #12]
 8010e7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010e80:	fb02 f201 	mul.w	r2, r2, r1
 8010e84:	1a9b      	subs	r3, r3, r2
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f000 815b 	beq.w	8011142 <f_lseek+0x43c>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6a1b      	ldr	r3, [r3, #32]
 8010e90:	69ba      	ldr	r2, [r7, #24]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	f000 8155 	beq.w	8011142 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	7d1b      	ldrb	r3, [r3, #20]
 8010e9c:	b25b      	sxtb	r3, r3
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	da18      	bge.n	8010ed4 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	7858      	ldrb	r0, [r3, #1]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6a1a      	ldr	r2, [r3, #32]
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	f7fc fdf9 	bl	800daa8 <disk_write>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d004      	beq.n	8010ec6 <f_lseek+0x1c0>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2201      	movs	r2, #1
 8010ec0:	755a      	strb	r2, [r3, #21]
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e13f      	b.n	8011146 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	7d1b      	ldrb	r3, [r3, #20]
 8010eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ece:	b2da      	uxtb	r2, r3
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	7858      	ldrb	r0, [r3, #1]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010ede:	2301      	movs	r3, #1
 8010ee0:	69ba      	ldr	r2, [r7, #24]
 8010ee2:	f7fc fdc1 	bl	800da68 <disk_read>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d004      	beq.n	8010ef6 <f_lseek+0x1f0>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	2201      	movs	r2, #1
 8010ef0:	755a      	strb	r2, [r3, #21]
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e127      	b.n	8011146 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	69ba      	ldr	r2, [r7, #24]
 8010efa:	621a      	str	r2, [r3, #32]
 8010efc:	e121      	b.n	8011142 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	68db      	ldr	r3, [r3, #12]
 8010f02:	683a      	ldr	r2, [r7, #0]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d908      	bls.n	8010f1a <f_lseek+0x214>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	7d1b      	ldrb	r3, [r3, #20]
 8010f0c:	f003 0302 	and.w	r3, r3, #2
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d102      	bne.n	8010f1a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	699b      	ldr	r3, [r3, #24]
 8010f1e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010f20:	2300      	movs	r3, #0
 8010f22:	637b      	str	r3, [r7, #52]	; 0x34
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f28:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	f000 80b5 	beq.w	801109c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	895b      	ldrh	r3, [r3, #10]
 8010f36:	461a      	mov	r2, r3
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	899b      	ldrh	r3, [r3, #12]
 8010f3c:	fb03 f302 	mul.w	r3, r3, r2
 8010f40:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010f42:	6a3b      	ldr	r3, [r7, #32]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d01b      	beq.n	8010f80 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	1e5a      	subs	r2, r3, #1
 8010f4c:	69fb      	ldr	r3, [r7, #28]
 8010f4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8010f52:	6a3b      	ldr	r3, [r7, #32]
 8010f54:	1e59      	subs	r1, r3, #1
 8010f56:	69fb      	ldr	r3, [r7, #28]
 8010f58:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d30f      	bcc.n	8010f80 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	1e5a      	subs	r2, r3, #1
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	425b      	negs	r3, r3
 8010f68:	401a      	ands	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	699b      	ldr	r3, [r3, #24]
 8010f72:	683a      	ldr	r2, [r7, #0]
 8010f74:	1ad3      	subs	r3, r2, r3
 8010f76:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010f7e:	e022      	b.n	8010fc6 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d119      	bne.n	8010fc0 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2100      	movs	r1, #0
 8010f90:	4618      	mov	r0, r3
 8010f92:	f7fd fb80 	bl	800e696 <create_chain>
 8010f96:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d104      	bne.n	8010fa8 <f_lseek+0x2a2>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2202      	movs	r2, #2
 8010fa2:	755a      	strb	r2, [r3, #21]
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	e0ce      	b.n	8011146 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fae:	d104      	bne.n	8010fba <f_lseek+0x2b4>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2201      	movs	r2, #1
 8010fb4:	755a      	strb	r2, [r3, #21]
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e0c5      	b.n	8011146 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fbe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010fc4:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d067      	beq.n	801109c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010fcc:	e03a      	b.n	8011044 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010fce:	683a      	ldr	r2, [r7, #0]
 8010fd0:	69fb      	ldr	r3, [r7, #28]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	603b      	str	r3, [r7, #0]
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	699a      	ldr	r2, [r3, #24]
 8010fda:	69fb      	ldr	r3, [r7, #28]
 8010fdc:	441a      	add	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	7d1b      	ldrb	r3, [r3, #20]
 8010fe6:	f003 0302 	and.w	r3, r3, #2
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00b      	beq.n	8011006 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fd fb4f 	bl	800e696 <create_chain>
 8010ff8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d108      	bne.n	8011012 <f_lseek+0x30c>
							ofs = 0; break;
 8011000:	2300      	movs	r3, #0
 8011002:	603b      	str	r3, [r7, #0]
 8011004:	e022      	b.n	801104c <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801100a:	4618      	mov	r0, r3
 801100c:	f7fd f8f7 	bl	800e1fe <get_fat>
 8011010:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011018:	d104      	bne.n	8011024 <f_lseek+0x31e>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2201      	movs	r2, #1
 801101e:	755a      	strb	r2, [r3, #21]
 8011020:	2301      	movs	r3, #1
 8011022:	e090      	b.n	8011146 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	2b01      	cmp	r3, #1
 8011028:	d904      	bls.n	8011034 <f_lseek+0x32e>
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	6a1b      	ldr	r3, [r3, #32]
 801102e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011030:	429a      	cmp	r2, r3
 8011032:	d304      	bcc.n	801103e <f_lseek+0x338>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2202      	movs	r2, #2
 8011038:	755a      	strb	r2, [r3, #21]
 801103a:	2302      	movs	r3, #2
 801103c:	e083      	b.n	8011146 <f_lseek+0x440>
					fp->clust = clst;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011042:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	429a      	cmp	r2, r3
 801104a:	d8c0      	bhi.n	8010fce <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	699a      	ldr	r2, [r3, #24]
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	441a      	add	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	899b      	ldrh	r3, [r3, #12]
 801105c:	461a      	mov	r2, r3
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	fbb3 f1f2 	udiv	r1, r3, r2
 8011064:	fb02 f201 	mul.w	r2, r2, r1
 8011068:	1a9b      	subs	r3, r3, r2
 801106a:	2b00      	cmp	r3, #0
 801106c:	d016      	beq.n	801109c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011072:	4618      	mov	r0, r3
 8011074:	f7fd f8a4 	bl	800e1c0 <clust2sect>
 8011078:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801107a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801107c:	2b00      	cmp	r3, #0
 801107e:	d104      	bne.n	801108a <f_lseek+0x384>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2202      	movs	r2, #2
 8011084:	755a      	strb	r2, [r3, #21]
 8011086:	2302      	movs	r3, #2
 8011088:	e05d      	b.n	8011146 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	899b      	ldrh	r3, [r3, #12]
 801108e:	461a      	mov	r2, r3
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	fbb3 f3f2 	udiv	r3, r3, r2
 8011096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011098:	4413      	add	r3, r2
 801109a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	699a      	ldr	r2, [r3, #24]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	68db      	ldr	r3, [r3, #12]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d90a      	bls.n	80110be <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	699a      	ldr	r2, [r3, #24]
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	7d1b      	ldrb	r3, [r3, #20]
 80110b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	699b      	ldr	r3, [r3, #24]
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	8992      	ldrh	r2, [r2, #12]
 80110c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80110ca:	fb02 f201 	mul.w	r2, r2, r1
 80110ce:	1a9b      	subs	r3, r3, r2
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d036      	beq.n	8011142 <f_lseek+0x43c>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a1b      	ldr	r3, [r3, #32]
 80110d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110da:	429a      	cmp	r2, r3
 80110dc:	d031      	beq.n	8011142 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7d1b      	ldrb	r3, [r3, #20]
 80110e2:	b25b      	sxtb	r3, r3
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	da18      	bge.n	801111a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	7858      	ldrb	r0, [r3, #1]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6a1a      	ldr	r2, [r3, #32]
 80110f6:	2301      	movs	r3, #1
 80110f8:	f7fc fcd6 	bl	800daa8 <disk_write>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d004      	beq.n	801110c <f_lseek+0x406>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2201      	movs	r2, #1
 8011106:	755a      	strb	r2, [r3, #21]
 8011108:	2301      	movs	r3, #1
 801110a:	e01c      	b.n	8011146 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	7d1b      	ldrb	r3, [r3, #20]
 8011110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011114:	b2da      	uxtb	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801111a:	68bb      	ldr	r3, [r7, #8]
 801111c:	7858      	ldrb	r0, [r3, #1]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011124:	2301      	movs	r3, #1
 8011126:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011128:	f7fc fc9e 	bl	800da68 <disk_read>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d004      	beq.n	801113c <f_lseek+0x436>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2201      	movs	r2, #1
 8011136:	755a      	strb	r2, [r3, #21]
 8011138:	2301      	movs	r3, #1
 801113a:	e004      	b.n	8011146 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011140:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011142:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011146:	4618      	mov	r0, r3
 8011148:	3740      	adds	r7, #64	; 0x40
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}

0801114e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801114e:	b580      	push	{r7, lr}
 8011150:	b0a0      	sub	sp, #128	; 0x80
 8011152:	af00      	add	r7, sp, #0
 8011154:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801115a:	f107 010c 	add.w	r1, r7, #12
 801115e:	1d3b      	adds	r3, r7, #4
 8011160:	2202      	movs	r2, #2
 8011162:	4618      	mov	r0, r3
 8011164:	f7fe fd16 	bl	800fb94 <find_volume>
 8011168:	4603      	mov	r3, r0
 801116a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8011172:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011176:	2b00      	cmp	r3, #0
 8011178:	f040 80a4 	bne.w	80112c4 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801117c:	687a      	ldr	r2, [r7, #4]
 801117e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011182:	4611      	mov	r1, r2
 8011184:	4618      	mov	r0, r3
 8011186:	f7fe fbd5 	bl	800f934 <follow_path>
 801118a:	4603      	mov	r3, r0
 801118c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011190:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011194:	2b00      	cmp	r3, #0
 8011196:	d108      	bne.n	80111aa <f_unlink+0x5c>
 8011198:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801119c:	f003 0320 	and.w	r3, r3, #32
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d002      	beq.n	80111aa <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80111a4:	2306      	movs	r3, #6
 80111a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80111aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d108      	bne.n	80111c4 <f_unlink+0x76>
 80111b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80111b6:	2102      	movs	r1, #2
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fc fdb3 	bl	800dd24 <chk_lock>
 80111be:	4603      	mov	r3, r0
 80111c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80111c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d17b      	bne.n	80112c4 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80111cc:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80111d0:	b25b      	sxtb	r3, r3
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	da03      	bge.n	80111de <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80111d6:	2306      	movs	r3, #6
 80111d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80111dc:	e008      	b.n	80111f0 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80111de:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80111e2:	f003 0301 	and.w	r3, r3, #1
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d002      	beq.n	80111f0 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80111ea:	2307      	movs	r3, #7
 80111ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80111f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d13d      	bne.n	8011274 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80111fc:	4611      	mov	r1, r2
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fd fcbf 	bl	800eb82 <ld_clust>
 8011204:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011206:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 801120a:	f003 0310 	and.w	r3, r3, #16
 801120e:	2b00      	cmp	r3, #0
 8011210:	d030      	beq.n	8011274 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	69db      	ldr	r3, [r3, #28]
 8011216:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011218:	429a      	cmp	r2, r3
 801121a:	d103      	bne.n	8011224 <f_unlink+0xd6>
						res = FR_DENIED;
 801121c:	2307      	movs	r3, #7
 801121e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8011222:	e027      	b.n	8011274 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801122a:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801122c:	f107 0310 	add.w	r3, r7, #16
 8011230:	2100      	movs	r1, #0
 8011232:	4618      	mov	r0, r3
 8011234:	f7fd faff 	bl	800e836 <dir_sdi>
 8011238:	4603      	mov	r3, r0
 801123a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 801123e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011242:	2b00      	cmp	r3, #0
 8011244:	d116      	bne.n	8011274 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011246:	f107 0310 	add.w	r3, r7, #16
 801124a:	2100      	movs	r1, #0
 801124c:	4618      	mov	r0, r3
 801124e:	f7fd fec3 	bl	800efd8 <dir_read>
 8011252:	4603      	mov	r3, r0
 8011254:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011258:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801125c:	2b00      	cmp	r3, #0
 801125e:	d102      	bne.n	8011266 <f_unlink+0x118>
 8011260:	2307      	movs	r3, #7
 8011262:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011266:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801126a:	2b04      	cmp	r3, #4
 801126c:	d102      	bne.n	8011274 <f_unlink+0x126>
 801126e:	2300      	movs	r3, #0
 8011270:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8011274:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011278:	2b00      	cmp	r3, #0
 801127a:	d123      	bne.n	80112c4 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801127c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011280:	4618      	mov	r0, r3
 8011282:	f7fe f909 	bl	800f498 <dir_remove>
 8011286:	4603      	mov	r3, r0
 8011288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801128c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011290:	2b00      	cmp	r3, #0
 8011292:	d10c      	bne.n	80112ae <f_unlink+0x160>
 8011294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011296:	2b00      	cmp	r3, #0
 8011298:	d009      	beq.n	80112ae <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801129a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801129e:	2200      	movs	r2, #0
 80112a0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fd f992 	bl	800e5cc <remove_chain>
 80112a8:	4603      	mov	r3, r0
 80112aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80112ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <f_unlink+0x176>
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f7fc ff11 	bl	800e0e0 <sync_fs>
 80112be:	4603      	mov	r3, r0
 80112c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80112c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3780      	adds	r7, #128	; 0x80
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bd80      	pop	{r7, pc}

080112d0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b098      	sub	sp, #96	; 0x60
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80112d8:	f107 010c 	add.w	r1, r7, #12
 80112dc:	1d3b      	adds	r3, r7, #4
 80112de:	2202      	movs	r2, #2
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fe fc57 	bl	800fb94 <find_volume>
 80112e6:	4603      	mov	r3, r0
 80112e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80112f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f040 80ff 	bne.w	80114f8 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	f107 0310 	add.w	r3, r7, #16
 8011300:	4611      	mov	r1, r2
 8011302:	4618      	mov	r0, r3
 8011304:	f7fe fb16 	bl	800f934 <follow_path>
 8011308:	4603      	mov	r3, r0
 801130a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801130e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011312:	2b00      	cmp	r3, #0
 8011314:	d102      	bne.n	801131c <f_mkdir+0x4c>
 8011316:	2308      	movs	r3, #8
 8011318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801131c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011320:	2b04      	cmp	r3, #4
 8011322:	d108      	bne.n	8011336 <f_mkdir+0x66>
 8011324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011328:	f003 0320 	and.w	r3, r3, #32
 801132c:	2b00      	cmp	r3, #0
 801132e:	d002      	beq.n	8011336 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011330:	2306      	movs	r3, #6
 8011332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011336:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801133a:	2b04      	cmp	r3, #4
 801133c:	f040 80dc 	bne.w	80114f8 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011340:	f107 0310 	add.w	r3, r7, #16
 8011344:	2100      	movs	r1, #0
 8011346:	4618      	mov	r0, r3
 8011348:	f7fd f9a5 	bl	800e696 <create_chain>
 801134c:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	895b      	ldrh	r3, [r3, #10]
 8011352:	461a      	mov	r2, r3
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	899b      	ldrh	r3, [r3, #12]
 8011358:	fb03 f302 	mul.w	r3, r3, r2
 801135c:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801135e:	2300      	movs	r3, #0
 8011360:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <f_mkdir+0xa0>
 801136a:	2307      	movs	r3, #7
 801136c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8011370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011372:	2b01      	cmp	r3, #1
 8011374:	d102      	bne.n	801137c <f_mkdir+0xac>
 8011376:	2302      	movs	r3, #2
 8011378:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801137e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011382:	d102      	bne.n	801138a <f_mkdir+0xba>
 8011384:	2301      	movs	r3, #1
 8011386:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801138a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801138e:	2b00      	cmp	r3, #0
 8011390:	d106      	bne.n	80113a0 <f_mkdir+0xd0>
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	4618      	mov	r0, r3
 8011396:	f7fc fe31 	bl	800dffc <sync_window>
 801139a:	4603      	mov	r3, r0
 801139c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 80113a0:	f7fc f8d2 	bl	800d548 <get_fattime>
 80113a4:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 80113a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d16c      	bne.n	8011488 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fc ff04 	bl	800e1c0 <clust2sect>
 80113b8:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	333c      	adds	r3, #60	; 0x3c
 80113be:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	899b      	ldrh	r3, [r3, #12]
 80113c4:	461a      	mov	r2, r3
 80113c6:	2100      	movs	r1, #0
 80113c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113ca:	f7fc fc4e 	bl	800dc6a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80113ce:	220b      	movs	r2, #11
 80113d0:	2120      	movs	r1, #32
 80113d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80113d4:	f7fc fc49 	bl	800dc6a <mem_set>
					dir[DIR_Name] = '.';
 80113d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113da:	222e      	movs	r2, #46	; 0x2e
 80113dc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80113de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113e0:	330b      	adds	r3, #11
 80113e2:	2210      	movs	r2, #16
 80113e4:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80113e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113e8:	3316      	adds	r3, #22
 80113ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7fc fbef 	bl	800dbd0 <st_dword>
					st_clust(fs, dir, dcl);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fd fbe1 	bl	800ebc0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80113fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011400:	3320      	adds	r3, #32
 8011402:	2220      	movs	r2, #32
 8011404:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011406:	4618      	mov	r0, r3
 8011408:	f7fc fc0e 	bl	800dc28 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801140c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801140e:	3321      	adds	r3, #33	; 0x21
 8011410:	222e      	movs	r2, #46	; 0x2e
 8011412:	701a      	strb	r2, [r3, #0]
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	2b03      	cmp	r3, #3
 801141e:	d106      	bne.n	801142e <f_mkdir+0x15e>
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011424:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011426:	429a      	cmp	r2, r3
 8011428:	d101      	bne.n	801142e <f_mkdir+0x15e>
 801142a:	2300      	movs	r3, #0
 801142c:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801142e:	68f8      	ldr	r0, [r7, #12]
 8011430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011432:	3320      	adds	r3, #32
 8011434:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011436:	4619      	mov	r1, r3
 8011438:	f7fd fbc2 	bl	800ebc0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	895b      	ldrh	r3, [r3, #10]
 8011440:	65bb      	str	r3, [r7, #88]	; 0x58
 8011442:	e01c      	b.n	801147e <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8011444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011446:	1c5a      	adds	r2, r3, #1
 8011448:	657a      	str	r2, [r7, #84]	; 0x54
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2201      	movs	r2, #1
 8011452:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	4618      	mov	r0, r3
 8011458:	f7fc fdd0 	bl	800dffc <sync_window>
 801145c:	4603      	mov	r3, r0
 801145e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8011462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011466:	2b00      	cmp	r3, #0
 8011468:	d10d      	bne.n	8011486 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	899b      	ldrh	r3, [r3, #12]
 801146e:	461a      	mov	r2, r3
 8011470:	2100      	movs	r1, #0
 8011472:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011474:	f7fc fbf9 	bl	800dc6a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011478:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801147a:	3b01      	subs	r3, #1
 801147c:	65bb      	str	r3, [r7, #88]	; 0x58
 801147e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011480:	2b00      	cmp	r3, #0
 8011482:	d1df      	bne.n	8011444 <f_mkdir+0x174>
 8011484:	e000      	b.n	8011488 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8011486:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011488:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801148c:	2b00      	cmp	r3, #0
 801148e:	d107      	bne.n	80114a0 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011490:	f107 0310 	add.w	r3, r7, #16
 8011494:	4618      	mov	r0, r3
 8011496:	f7fd ff07 	bl	800f2a8 <dir_register>
 801149a:	4603      	mov	r3, r0
 801149c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 80114a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d120      	bne.n	80114ea <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80114a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114aa:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80114ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ae:	3316      	adds	r3, #22
 80114b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fc fb8c 	bl	800dbd0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114be:	4618      	mov	r0, r3
 80114c0:	f7fd fb7e 	bl	800ebc0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80114c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114c6:	330b      	adds	r3, #11
 80114c8:	2210      	movs	r2, #16
 80114ca:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2201      	movs	r2, #1
 80114d0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80114d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d10e      	bne.n	80114f8 <f_mkdir+0x228>
					res = sync_fs(fs);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fc fdff 	bl	800e0e0 <sync_fs>
 80114e2:	4603      	mov	r3, r0
 80114e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80114e8:	e006      	b.n	80114f8 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80114ea:	f107 0310 	add.w	r3, r7, #16
 80114ee:	2200      	movs	r2, #0
 80114f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fd f86a 	bl	800e5cc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80114f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3760      	adds	r7, #96	; 0x60
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}

08011504 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b088      	sub	sp, #32
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011510:	2300      	movs	r3, #0
 8011512:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011518:	e01b      	b.n	8011552 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801151a:	f107 0310 	add.w	r3, r7, #16
 801151e:	f107 0114 	add.w	r1, r7, #20
 8011522:	2201      	movs	r2, #1
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f7ff f809 	bl	801053c <f_read>
		if (rc != 1) break;
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	2b01      	cmp	r3, #1
 801152e:	d116      	bne.n	801155e <f_gets+0x5a>
		c = s[0];
 8011530:	7d3b      	ldrb	r3, [r7, #20]
 8011532:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011534:	7dfb      	ldrb	r3, [r7, #23]
 8011536:	2b0d      	cmp	r3, #13
 8011538:	d100      	bne.n	801153c <f_gets+0x38>
 801153a:	e00a      	b.n	8011552 <f_gets+0x4e>
		*p++ = c;
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	1c5a      	adds	r2, r3, #1
 8011540:	61ba      	str	r2, [r7, #24]
 8011542:	7dfa      	ldrb	r2, [r7, #23]
 8011544:	701a      	strb	r2, [r3, #0]
		n++;
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	3301      	adds	r3, #1
 801154a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801154c:	7dfb      	ldrb	r3, [r7, #23]
 801154e:	2b0a      	cmp	r3, #10
 8011550:	d007      	beq.n	8011562 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	3b01      	subs	r3, #1
 8011556:	69fa      	ldr	r2, [r7, #28]
 8011558:	429a      	cmp	r2, r3
 801155a:	dbde      	blt.n	801151a <f_gets+0x16>
 801155c:	e002      	b.n	8011564 <f_gets+0x60>
		if (rc != 1) break;
 801155e:	bf00      	nop
 8011560:	e000      	b.n	8011564 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8011562:	bf00      	nop
	}
	*p = 0;
 8011564:	69bb      	ldr	r3, [r7, #24]
 8011566:	2200      	movs	r2, #0
 8011568:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <f_gets+0x70>
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	e000      	b.n	8011576 <f_gets+0x72>
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3720      	adds	r7, #32
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
	...

08011580 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011580:	b480      	push	{r7}
 8011582:	b087      	sub	sp, #28
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	4613      	mov	r3, r2
 801158c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801158e:	2301      	movs	r3, #1
 8011590:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011592:	2300      	movs	r3, #0
 8011594:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011596:	4b1f      	ldr	r3, [pc, #124]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 8011598:	7a5b      	ldrb	r3, [r3, #9]
 801159a:	b2db      	uxtb	r3, r3
 801159c:	2b00      	cmp	r3, #0
 801159e:	d131      	bne.n	8011604 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80115a0:	4b1c      	ldr	r3, [pc, #112]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115a2:	7a5b      	ldrb	r3, [r3, #9]
 80115a4:	b2db      	uxtb	r3, r3
 80115a6:	461a      	mov	r2, r3
 80115a8:	4b1a      	ldr	r3, [pc, #104]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115aa:	2100      	movs	r1, #0
 80115ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80115ae:	4b19      	ldr	r3, [pc, #100]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115b0:	7a5b      	ldrb	r3, [r3, #9]
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	4a17      	ldr	r2, [pc, #92]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	4413      	add	r3, r2
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80115be:	4b15      	ldr	r3, [pc, #84]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115c0:	7a5b      	ldrb	r3, [r3, #9]
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	461a      	mov	r2, r3
 80115c6:	4b13      	ldr	r3, [pc, #76]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115c8:	4413      	add	r3, r2
 80115ca:	79fa      	ldrb	r2, [r7, #7]
 80115cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80115ce:	4b11      	ldr	r3, [pc, #68]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115d0:	7a5b      	ldrb	r3, [r3, #9]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	1c5a      	adds	r2, r3, #1
 80115d6:	b2d1      	uxtb	r1, r2
 80115d8:	4a0e      	ldr	r2, [pc, #56]	; (8011614 <FATFS_LinkDriverEx+0x94>)
 80115da:	7251      	strb	r1, [r2, #9]
 80115dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80115de:	7dbb      	ldrb	r3, [r7, #22]
 80115e0:	3330      	adds	r3, #48	; 0x30
 80115e2:	b2da      	uxtb	r2, r3
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	3301      	adds	r3, #1
 80115ec:	223a      	movs	r2, #58	; 0x3a
 80115ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	3302      	adds	r3, #2
 80115f4:	222f      	movs	r2, #47	; 0x2f
 80115f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	3303      	adds	r3, #3
 80115fc:	2200      	movs	r2, #0
 80115fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011600:	2300      	movs	r3, #0
 8011602:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011604:	7dfb      	ldrb	r3, [r7, #23]
}
 8011606:	4618      	mov	r0, r3
 8011608:	371c      	adds	r7, #28
 801160a:	46bd      	mov	sp, r7
 801160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop
 8011614:	2001f500 	.word	0x2001f500

08011618 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011622:	2200      	movs	r2, #0
 8011624:	6839      	ldr	r1, [r7, #0]
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7ff ffaa 	bl	8011580 <FATFS_LinkDriverEx>
 801162c:	4603      	mov	r3, r0
}
 801162e:	4618      	mov	r0, r3
 8011630:	3708      	adds	r7, #8
 8011632:	46bd      	mov	sp, r7
 8011634:	bd80      	pop	{r7, pc}
	...

08011638 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011638:	b480      	push	{r7}
 801163a:	b085      	sub	sp, #20
 801163c:	af00      	add	r7, sp, #0
 801163e:	4603      	mov	r3, r0
 8011640:	6039      	str	r1, [r7, #0]
 8011642:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011644:	88fb      	ldrh	r3, [r7, #6]
 8011646:	2b7f      	cmp	r3, #127	; 0x7f
 8011648:	d802      	bhi.n	8011650 <ff_convert+0x18>
		c = chr;
 801164a:	88fb      	ldrh	r3, [r7, #6]
 801164c:	81fb      	strh	r3, [r7, #14]
 801164e:	e025      	b.n	801169c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011650:	683b      	ldr	r3, [r7, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d00b      	beq.n	801166e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011656:	88fb      	ldrh	r3, [r7, #6]
 8011658:	2bff      	cmp	r3, #255	; 0xff
 801165a:	d805      	bhi.n	8011668 <ff_convert+0x30>
 801165c:	88fb      	ldrh	r3, [r7, #6]
 801165e:	3b80      	subs	r3, #128	; 0x80
 8011660:	4a12      	ldr	r2, [pc, #72]	; (80116ac <ff_convert+0x74>)
 8011662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011666:	e000      	b.n	801166a <ff_convert+0x32>
 8011668:	2300      	movs	r3, #0
 801166a:	81fb      	strh	r3, [r7, #14]
 801166c:	e016      	b.n	801169c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801166e:	2300      	movs	r3, #0
 8011670:	81fb      	strh	r3, [r7, #14]
 8011672:	e009      	b.n	8011688 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011674:	89fb      	ldrh	r3, [r7, #14]
 8011676:	4a0d      	ldr	r2, [pc, #52]	; (80116ac <ff_convert+0x74>)
 8011678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801167c:	88fa      	ldrh	r2, [r7, #6]
 801167e:	429a      	cmp	r2, r3
 8011680:	d006      	beq.n	8011690 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011682:	89fb      	ldrh	r3, [r7, #14]
 8011684:	3301      	adds	r3, #1
 8011686:	81fb      	strh	r3, [r7, #14]
 8011688:	89fb      	ldrh	r3, [r7, #14]
 801168a:	2b7f      	cmp	r3, #127	; 0x7f
 801168c:	d9f2      	bls.n	8011674 <ff_convert+0x3c>
 801168e:	e000      	b.n	8011692 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011690:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011692:	89fb      	ldrh	r3, [r7, #14]
 8011694:	3380      	adds	r3, #128	; 0x80
 8011696:	b29b      	uxth	r3, r3
 8011698:	b2db      	uxtb	r3, r3
 801169a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801169c:	89fb      	ldrh	r3, [r7, #14]
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3714      	adds	r7, #20
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
 80116aa:	bf00      	nop
 80116ac:	08017c0c 	.word	0x08017c0c

080116b0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	4603      	mov	r3, r0
 80116b8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80116ba:	88fb      	ldrh	r3, [r7, #6]
 80116bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116c0:	d201      	bcs.n	80116c6 <ff_wtoupper+0x16>
 80116c2:	4b3e      	ldr	r3, [pc, #248]	; (80117bc <ff_wtoupper+0x10c>)
 80116c4:	e000      	b.n	80116c8 <ff_wtoupper+0x18>
 80116c6:	4b3e      	ldr	r3, [pc, #248]	; (80117c0 <ff_wtoupper+0x110>)
 80116c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	1c9a      	adds	r2, r3, #2
 80116ce:	617a      	str	r2, [r7, #20]
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80116d4:	8a7b      	ldrh	r3, [r7, #18]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d068      	beq.n	80117ac <ff_wtoupper+0xfc>
 80116da:	88fa      	ldrh	r2, [r7, #6]
 80116dc:	8a7b      	ldrh	r3, [r7, #18]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d364      	bcc.n	80117ac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	1c9a      	adds	r2, r3, #2
 80116e6:	617a      	str	r2, [r7, #20]
 80116e8:	881b      	ldrh	r3, [r3, #0]
 80116ea:	823b      	strh	r3, [r7, #16]
 80116ec:	8a3b      	ldrh	r3, [r7, #16]
 80116ee:	0a1b      	lsrs	r3, r3, #8
 80116f0:	81fb      	strh	r3, [r7, #14]
 80116f2:	8a3b      	ldrh	r3, [r7, #16]
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80116f8:	88fa      	ldrh	r2, [r7, #6]
 80116fa:	8a79      	ldrh	r1, [r7, #18]
 80116fc:	8a3b      	ldrh	r3, [r7, #16]
 80116fe:	440b      	add	r3, r1
 8011700:	429a      	cmp	r2, r3
 8011702:	da49      	bge.n	8011798 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011704:	89fb      	ldrh	r3, [r7, #14]
 8011706:	2b08      	cmp	r3, #8
 8011708:	d84f      	bhi.n	80117aa <ff_wtoupper+0xfa>
 801170a:	a201      	add	r2, pc, #4	; (adr r2, 8011710 <ff_wtoupper+0x60>)
 801170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011710:	08011735 	.word	0x08011735
 8011714:	08011747 	.word	0x08011747
 8011718:	0801175d 	.word	0x0801175d
 801171c:	08011765 	.word	0x08011765
 8011720:	0801176d 	.word	0x0801176d
 8011724:	08011775 	.word	0x08011775
 8011728:	0801177d 	.word	0x0801177d
 801172c:	08011785 	.word	0x08011785
 8011730:	0801178d 	.word	0x0801178d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011734:	88fa      	ldrh	r2, [r7, #6]
 8011736:	8a7b      	ldrh	r3, [r7, #18]
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	005b      	lsls	r3, r3, #1
 801173c:	697a      	ldr	r2, [r7, #20]
 801173e:	4413      	add	r3, r2
 8011740:	881b      	ldrh	r3, [r3, #0]
 8011742:	80fb      	strh	r3, [r7, #6]
 8011744:	e027      	b.n	8011796 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011746:	88fa      	ldrh	r2, [r7, #6]
 8011748:	8a7b      	ldrh	r3, [r7, #18]
 801174a:	1ad3      	subs	r3, r2, r3
 801174c:	b29b      	uxth	r3, r3
 801174e:	f003 0301 	and.w	r3, r3, #1
 8011752:	b29b      	uxth	r3, r3
 8011754:	88fa      	ldrh	r2, [r7, #6]
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	80fb      	strh	r3, [r7, #6]
 801175a:	e01c      	b.n	8011796 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801175c:	88fb      	ldrh	r3, [r7, #6]
 801175e:	3b10      	subs	r3, #16
 8011760:	80fb      	strh	r3, [r7, #6]
 8011762:	e018      	b.n	8011796 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011764:	88fb      	ldrh	r3, [r7, #6]
 8011766:	3b20      	subs	r3, #32
 8011768:	80fb      	strh	r3, [r7, #6]
 801176a:	e014      	b.n	8011796 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801176c:	88fb      	ldrh	r3, [r7, #6]
 801176e:	3b30      	subs	r3, #48	; 0x30
 8011770:	80fb      	strh	r3, [r7, #6]
 8011772:	e010      	b.n	8011796 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011774:	88fb      	ldrh	r3, [r7, #6]
 8011776:	3b1a      	subs	r3, #26
 8011778:	80fb      	strh	r3, [r7, #6]
 801177a:	e00c      	b.n	8011796 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801177c:	88fb      	ldrh	r3, [r7, #6]
 801177e:	3308      	adds	r3, #8
 8011780:	80fb      	strh	r3, [r7, #6]
 8011782:	e008      	b.n	8011796 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011784:	88fb      	ldrh	r3, [r7, #6]
 8011786:	3b50      	subs	r3, #80	; 0x50
 8011788:	80fb      	strh	r3, [r7, #6]
 801178a:	e004      	b.n	8011796 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801178c:	88fb      	ldrh	r3, [r7, #6]
 801178e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011792:	80fb      	strh	r3, [r7, #6]
 8011794:	bf00      	nop
			}
			break;
 8011796:	e008      	b.n	80117aa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011798:	89fb      	ldrh	r3, [r7, #14]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d195      	bne.n	80116ca <ff_wtoupper+0x1a>
 801179e:	8a3b      	ldrh	r3, [r7, #16]
 80117a0:	005b      	lsls	r3, r3, #1
 80117a2:	697a      	ldr	r2, [r7, #20]
 80117a4:	4413      	add	r3, r2
 80117a6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80117a8:	e78f      	b.n	80116ca <ff_wtoupper+0x1a>
			break;
 80117aa:	bf00      	nop
	}

	return chr;
 80117ac:	88fb      	ldrh	r3, [r7, #6]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	371c      	adds	r7, #28
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr
 80117ba:	bf00      	nop
 80117bc:	08017d0c 	.word	0x08017d0c
 80117c0:	08017f00 	.word	0x08017f00
 80117c4:	00000000 	.word	0x00000000

080117c8 <cos>:
 80117c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80117ca:	ec51 0b10 	vmov	r0, r1, d0
 80117ce:	4a1e      	ldr	r2, [pc, #120]	; (8011848 <cos+0x80>)
 80117d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80117d4:	4293      	cmp	r3, r2
 80117d6:	dc06      	bgt.n	80117e6 <cos+0x1e>
 80117d8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011840 <cos+0x78>
 80117dc:	f000 fb80 	bl	8011ee0 <__kernel_cos>
 80117e0:	ec51 0b10 	vmov	r0, r1, d0
 80117e4:	e007      	b.n	80117f6 <cos+0x2e>
 80117e6:	4a19      	ldr	r2, [pc, #100]	; (801184c <cos+0x84>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	dd09      	ble.n	8011800 <cos+0x38>
 80117ec:	ee10 2a10 	vmov	r2, s0
 80117f0:	460b      	mov	r3, r1
 80117f2:	f7ee fd61 	bl	80002b8 <__aeabi_dsub>
 80117f6:	ec41 0b10 	vmov	d0, r0, r1
 80117fa:	b005      	add	sp, #20
 80117fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011800:	4668      	mov	r0, sp
 8011802:	f000 f8c9 	bl	8011998 <__ieee754_rem_pio2>
 8011806:	f000 0003 	and.w	r0, r0, #3
 801180a:	2801      	cmp	r0, #1
 801180c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011810:	ed9d 0b00 	vldr	d0, [sp]
 8011814:	d007      	beq.n	8011826 <cos+0x5e>
 8011816:	2802      	cmp	r0, #2
 8011818:	d00e      	beq.n	8011838 <cos+0x70>
 801181a:	2800      	cmp	r0, #0
 801181c:	d0de      	beq.n	80117dc <cos+0x14>
 801181e:	2001      	movs	r0, #1
 8011820:	f000 ff66 	bl	80126f0 <__kernel_sin>
 8011824:	e7dc      	b.n	80117e0 <cos+0x18>
 8011826:	f000 ff63 	bl	80126f0 <__kernel_sin>
 801182a:	ec53 2b10 	vmov	r2, r3, d0
 801182e:	ee10 0a10 	vmov	r0, s0
 8011832:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011836:	e7de      	b.n	80117f6 <cos+0x2e>
 8011838:	f000 fb52 	bl	8011ee0 <__kernel_cos>
 801183c:	e7f5      	b.n	801182a <cos+0x62>
 801183e:	bf00      	nop
	...
 8011848:	3fe921fb 	.word	0x3fe921fb
 801184c:	7fefffff 	.word	0x7fefffff

08011850 <sin>:
 8011850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011852:	ec51 0b10 	vmov	r0, r1, d0
 8011856:	4a20      	ldr	r2, [pc, #128]	; (80118d8 <sin+0x88>)
 8011858:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801185c:	4293      	cmp	r3, r2
 801185e:	dc07      	bgt.n	8011870 <sin+0x20>
 8011860:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80118d0 <sin+0x80>
 8011864:	2000      	movs	r0, #0
 8011866:	f000 ff43 	bl	80126f0 <__kernel_sin>
 801186a:	ec51 0b10 	vmov	r0, r1, d0
 801186e:	e007      	b.n	8011880 <sin+0x30>
 8011870:	4a1a      	ldr	r2, [pc, #104]	; (80118dc <sin+0x8c>)
 8011872:	4293      	cmp	r3, r2
 8011874:	dd09      	ble.n	801188a <sin+0x3a>
 8011876:	ee10 2a10 	vmov	r2, s0
 801187a:	460b      	mov	r3, r1
 801187c:	f7ee fd1c 	bl	80002b8 <__aeabi_dsub>
 8011880:	ec41 0b10 	vmov	d0, r0, r1
 8011884:	b005      	add	sp, #20
 8011886:	f85d fb04 	ldr.w	pc, [sp], #4
 801188a:	4668      	mov	r0, sp
 801188c:	f000 f884 	bl	8011998 <__ieee754_rem_pio2>
 8011890:	f000 0003 	and.w	r0, r0, #3
 8011894:	2801      	cmp	r0, #1
 8011896:	ed9d 1b02 	vldr	d1, [sp, #8]
 801189a:	ed9d 0b00 	vldr	d0, [sp]
 801189e:	d004      	beq.n	80118aa <sin+0x5a>
 80118a0:	2802      	cmp	r0, #2
 80118a2:	d005      	beq.n	80118b0 <sin+0x60>
 80118a4:	b970      	cbnz	r0, 80118c4 <sin+0x74>
 80118a6:	2001      	movs	r0, #1
 80118a8:	e7dd      	b.n	8011866 <sin+0x16>
 80118aa:	f000 fb19 	bl	8011ee0 <__kernel_cos>
 80118ae:	e7dc      	b.n	801186a <sin+0x1a>
 80118b0:	2001      	movs	r0, #1
 80118b2:	f000 ff1d 	bl	80126f0 <__kernel_sin>
 80118b6:	ec53 2b10 	vmov	r2, r3, d0
 80118ba:	ee10 0a10 	vmov	r0, s0
 80118be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80118c2:	e7dd      	b.n	8011880 <sin+0x30>
 80118c4:	f000 fb0c 	bl	8011ee0 <__kernel_cos>
 80118c8:	e7f5      	b.n	80118b6 <sin+0x66>
 80118ca:	bf00      	nop
 80118cc:	f3af 8000 	nop.w
	...
 80118d8:	3fe921fb 	.word	0x3fe921fb
 80118dc:	7fefffff 	.word	0x7fefffff

080118e0 <sqrt>:
 80118e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118e4:	ed2d 8b02 	vpush	{d8}
 80118e8:	b08b      	sub	sp, #44	; 0x2c
 80118ea:	ec55 4b10 	vmov	r4, r5, d0
 80118ee:	f000 fa45 	bl	8011d7c <__ieee754_sqrt>
 80118f2:	4b26      	ldr	r3, [pc, #152]	; (801198c <sqrt+0xac>)
 80118f4:	eeb0 8a40 	vmov.f32	s16, s0
 80118f8:	eef0 8a60 	vmov.f32	s17, s1
 80118fc:	f993 6000 	ldrsb.w	r6, [r3]
 8011900:	1c73      	adds	r3, r6, #1
 8011902:	d02a      	beq.n	801195a <sqrt+0x7a>
 8011904:	4622      	mov	r2, r4
 8011906:	462b      	mov	r3, r5
 8011908:	4620      	mov	r0, r4
 801190a:	4629      	mov	r1, r5
 801190c:	f7ef f926 	bl	8000b5c <__aeabi_dcmpun>
 8011910:	4607      	mov	r7, r0
 8011912:	bb10      	cbnz	r0, 801195a <sqrt+0x7a>
 8011914:	f04f 0800 	mov.w	r8, #0
 8011918:	f04f 0900 	mov.w	r9, #0
 801191c:	4642      	mov	r2, r8
 801191e:	464b      	mov	r3, r9
 8011920:	4620      	mov	r0, r4
 8011922:	4629      	mov	r1, r5
 8011924:	f7ef f8f2 	bl	8000b0c <__aeabi_dcmplt>
 8011928:	b1b8      	cbz	r0, 801195a <sqrt+0x7a>
 801192a:	2301      	movs	r3, #1
 801192c:	9300      	str	r3, [sp, #0]
 801192e:	4b18      	ldr	r3, [pc, #96]	; (8011990 <sqrt+0xb0>)
 8011930:	9301      	str	r3, [sp, #4]
 8011932:	9708      	str	r7, [sp, #32]
 8011934:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011938:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801193c:	b9b6      	cbnz	r6, 801196c <sqrt+0x8c>
 801193e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011942:	4668      	mov	r0, sp
 8011944:	f001 f81c 	bl	8012980 <matherr>
 8011948:	b1d0      	cbz	r0, 8011980 <sqrt+0xa0>
 801194a:	9b08      	ldr	r3, [sp, #32]
 801194c:	b11b      	cbz	r3, 8011956 <sqrt+0x76>
 801194e:	f001 f8a1 	bl	8012a94 <__errno>
 8011952:	9b08      	ldr	r3, [sp, #32]
 8011954:	6003      	str	r3, [r0, #0]
 8011956:	ed9d 8b06 	vldr	d8, [sp, #24]
 801195a:	eeb0 0a48 	vmov.f32	s0, s16
 801195e:	eef0 0a68 	vmov.f32	s1, s17
 8011962:	b00b      	add	sp, #44	; 0x2c
 8011964:	ecbd 8b02 	vpop	{d8}
 8011968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801196c:	4642      	mov	r2, r8
 801196e:	464b      	mov	r3, r9
 8011970:	4640      	mov	r0, r8
 8011972:	4649      	mov	r1, r9
 8011974:	f7ee ff82 	bl	800087c <__aeabi_ddiv>
 8011978:	2e02      	cmp	r6, #2
 801197a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801197e:	d1e0      	bne.n	8011942 <sqrt+0x62>
 8011980:	f001 f888 	bl	8012a94 <__errno>
 8011984:	2321      	movs	r3, #33	; 0x21
 8011986:	6003      	str	r3, [r0, #0]
 8011988:	e7df      	b.n	801194a <sqrt+0x6a>
 801198a:	bf00      	nop
 801198c:	2000000a 	.word	0x2000000a
 8011990:	08017fbc 	.word	0x08017fbc
 8011994:	00000000 	.word	0x00000000

08011998 <__ieee754_rem_pio2>:
 8011998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801199c:	ec57 6b10 	vmov	r6, r7, d0
 80119a0:	4bc3      	ldr	r3, [pc, #780]	; (8011cb0 <__ieee754_rem_pio2+0x318>)
 80119a2:	b08d      	sub	sp, #52	; 0x34
 80119a4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80119a8:	4598      	cmp	r8, r3
 80119aa:	4604      	mov	r4, r0
 80119ac:	9704      	str	r7, [sp, #16]
 80119ae:	dc07      	bgt.n	80119c0 <__ieee754_rem_pio2+0x28>
 80119b0:	2200      	movs	r2, #0
 80119b2:	2300      	movs	r3, #0
 80119b4:	ed84 0b00 	vstr	d0, [r4]
 80119b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80119bc:	2500      	movs	r5, #0
 80119be:	e027      	b.n	8011a10 <__ieee754_rem_pio2+0x78>
 80119c0:	4bbc      	ldr	r3, [pc, #752]	; (8011cb4 <__ieee754_rem_pio2+0x31c>)
 80119c2:	4598      	cmp	r8, r3
 80119c4:	dc75      	bgt.n	8011ab2 <__ieee754_rem_pio2+0x11a>
 80119c6:	9b04      	ldr	r3, [sp, #16]
 80119c8:	4dbb      	ldr	r5, [pc, #748]	; (8011cb8 <__ieee754_rem_pio2+0x320>)
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	ee10 0a10 	vmov	r0, s0
 80119d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011c78 <__ieee754_rem_pio2+0x2e0>)
 80119d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d6:	4639      	mov	r1, r7
 80119d8:	dd36      	ble.n	8011a48 <__ieee754_rem_pio2+0xb0>
 80119da:	f7ee fc6d 	bl	80002b8 <__aeabi_dsub>
 80119de:	45a8      	cmp	r8, r5
 80119e0:	4606      	mov	r6, r0
 80119e2:	460f      	mov	r7, r1
 80119e4:	d018      	beq.n	8011a18 <__ieee754_rem_pio2+0x80>
 80119e6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011c80 <__ieee754_rem_pio2+0x2e8>)
 80119e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ec:	f7ee fc64 	bl	80002b8 <__aeabi_dsub>
 80119f0:	4602      	mov	r2, r0
 80119f2:	460b      	mov	r3, r1
 80119f4:	e9c4 2300 	strd	r2, r3, [r4]
 80119f8:	4630      	mov	r0, r6
 80119fa:	4639      	mov	r1, r7
 80119fc:	f7ee fc5c 	bl	80002b8 <__aeabi_dsub>
 8011a00:	a39f      	add	r3, pc, #636	; (adr r3, 8011c80 <__ieee754_rem_pio2+0x2e8>)
 8011a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a06:	f7ee fc57 	bl	80002b8 <__aeabi_dsub>
 8011a0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a0e:	2501      	movs	r5, #1
 8011a10:	4628      	mov	r0, r5
 8011a12:	b00d      	add	sp, #52	; 0x34
 8011a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a18:	a39b      	add	r3, pc, #620	; (adr r3, 8011c88 <__ieee754_rem_pio2+0x2f0>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	f7ee fc4b 	bl	80002b8 <__aeabi_dsub>
 8011a22:	a39b      	add	r3, pc, #620	; (adr r3, 8011c90 <__ieee754_rem_pio2+0x2f8>)
 8011a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a28:	4606      	mov	r6, r0
 8011a2a:	460f      	mov	r7, r1
 8011a2c:	f7ee fc44 	bl	80002b8 <__aeabi_dsub>
 8011a30:	4602      	mov	r2, r0
 8011a32:	460b      	mov	r3, r1
 8011a34:	e9c4 2300 	strd	r2, r3, [r4]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	4639      	mov	r1, r7
 8011a3c:	f7ee fc3c 	bl	80002b8 <__aeabi_dsub>
 8011a40:	a393      	add	r3, pc, #588	; (adr r3, 8011c90 <__ieee754_rem_pio2+0x2f8>)
 8011a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a46:	e7de      	b.n	8011a06 <__ieee754_rem_pio2+0x6e>
 8011a48:	f7ee fc38 	bl	80002bc <__adddf3>
 8011a4c:	45a8      	cmp	r8, r5
 8011a4e:	4606      	mov	r6, r0
 8011a50:	460f      	mov	r7, r1
 8011a52:	d016      	beq.n	8011a82 <__ieee754_rem_pio2+0xea>
 8011a54:	a38a      	add	r3, pc, #552	; (adr r3, 8011c80 <__ieee754_rem_pio2+0x2e8>)
 8011a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a5a:	f7ee fc2f 	bl	80002bc <__adddf3>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	460b      	mov	r3, r1
 8011a62:	e9c4 2300 	strd	r2, r3, [r4]
 8011a66:	4630      	mov	r0, r6
 8011a68:	4639      	mov	r1, r7
 8011a6a:	f7ee fc25 	bl	80002b8 <__aeabi_dsub>
 8011a6e:	a384      	add	r3, pc, #528	; (adr r3, 8011c80 <__ieee754_rem_pio2+0x2e8>)
 8011a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a74:	f7ee fc22 	bl	80002bc <__adddf3>
 8011a78:	f04f 35ff 	mov.w	r5, #4294967295
 8011a7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011a80:	e7c6      	b.n	8011a10 <__ieee754_rem_pio2+0x78>
 8011a82:	a381      	add	r3, pc, #516	; (adr r3, 8011c88 <__ieee754_rem_pio2+0x2f0>)
 8011a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a88:	f7ee fc18 	bl	80002bc <__adddf3>
 8011a8c:	a380      	add	r3, pc, #512	; (adr r3, 8011c90 <__ieee754_rem_pio2+0x2f8>)
 8011a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a92:	4606      	mov	r6, r0
 8011a94:	460f      	mov	r7, r1
 8011a96:	f7ee fc11 	bl	80002bc <__adddf3>
 8011a9a:	4602      	mov	r2, r0
 8011a9c:	460b      	mov	r3, r1
 8011a9e:	e9c4 2300 	strd	r2, r3, [r4]
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	f7ee fc07 	bl	80002b8 <__aeabi_dsub>
 8011aaa:	a379      	add	r3, pc, #484	; (adr r3, 8011c90 <__ieee754_rem_pio2+0x2f8>)
 8011aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab0:	e7e0      	b.n	8011a74 <__ieee754_rem_pio2+0xdc>
 8011ab2:	4b82      	ldr	r3, [pc, #520]	; (8011cbc <__ieee754_rem_pio2+0x324>)
 8011ab4:	4598      	cmp	r8, r3
 8011ab6:	f300 80d0 	bgt.w	8011c5a <__ieee754_rem_pio2+0x2c2>
 8011aba:	f000 fed3 	bl	8012864 <fabs>
 8011abe:	ec57 6b10 	vmov	r6, r7, d0
 8011ac2:	ee10 0a10 	vmov	r0, s0
 8011ac6:	a374      	add	r3, pc, #464	; (adr r3, 8011c98 <__ieee754_rem_pio2+0x300>)
 8011ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011acc:	4639      	mov	r1, r7
 8011ace:	f7ee fdab 	bl	8000628 <__aeabi_dmul>
 8011ad2:	2200      	movs	r2, #0
 8011ad4:	4b7a      	ldr	r3, [pc, #488]	; (8011cc0 <__ieee754_rem_pio2+0x328>)
 8011ad6:	f7ee fbf1 	bl	80002bc <__adddf3>
 8011ada:	f7ef f855 	bl	8000b88 <__aeabi_d2iz>
 8011ade:	4605      	mov	r5, r0
 8011ae0:	f7ee fd38 	bl	8000554 <__aeabi_i2d>
 8011ae4:	a364      	add	r3, pc, #400	; (adr r3, 8011c78 <__ieee754_rem_pio2+0x2e0>)
 8011ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011aee:	f7ee fd9b 	bl	8000628 <__aeabi_dmul>
 8011af2:	4602      	mov	r2, r0
 8011af4:	460b      	mov	r3, r1
 8011af6:	4630      	mov	r0, r6
 8011af8:	4639      	mov	r1, r7
 8011afa:	f7ee fbdd 	bl	80002b8 <__aeabi_dsub>
 8011afe:	a360      	add	r3, pc, #384	; (adr r3, 8011c80 <__ieee754_rem_pio2+0x2e8>)
 8011b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b04:	4682      	mov	sl, r0
 8011b06:	468b      	mov	fp, r1
 8011b08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b0c:	f7ee fd8c 	bl	8000628 <__aeabi_dmul>
 8011b10:	2d1f      	cmp	r5, #31
 8011b12:	4606      	mov	r6, r0
 8011b14:	460f      	mov	r7, r1
 8011b16:	dc0c      	bgt.n	8011b32 <__ieee754_rem_pio2+0x19a>
 8011b18:	1e6a      	subs	r2, r5, #1
 8011b1a:	4b6a      	ldr	r3, [pc, #424]	; (8011cc4 <__ieee754_rem_pio2+0x32c>)
 8011b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b20:	4543      	cmp	r3, r8
 8011b22:	d006      	beq.n	8011b32 <__ieee754_rem_pio2+0x19a>
 8011b24:	4632      	mov	r2, r6
 8011b26:	463b      	mov	r3, r7
 8011b28:	4650      	mov	r0, sl
 8011b2a:	4659      	mov	r1, fp
 8011b2c:	f7ee fbc4 	bl	80002b8 <__aeabi_dsub>
 8011b30:	e00e      	b.n	8011b50 <__ieee754_rem_pio2+0x1b8>
 8011b32:	4632      	mov	r2, r6
 8011b34:	463b      	mov	r3, r7
 8011b36:	4650      	mov	r0, sl
 8011b38:	4659      	mov	r1, fp
 8011b3a:	f7ee fbbd 	bl	80002b8 <__aeabi_dsub>
 8011b3e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011b42:	9305      	str	r3, [sp, #20]
 8011b44:	9a05      	ldr	r2, [sp, #20]
 8011b46:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011b4a:	1ad3      	subs	r3, r2, r3
 8011b4c:	2b10      	cmp	r3, #16
 8011b4e:	dc02      	bgt.n	8011b56 <__ieee754_rem_pio2+0x1be>
 8011b50:	e9c4 0100 	strd	r0, r1, [r4]
 8011b54:	e039      	b.n	8011bca <__ieee754_rem_pio2+0x232>
 8011b56:	a34c      	add	r3, pc, #304	; (adr r3, 8011c88 <__ieee754_rem_pio2+0x2f0>)
 8011b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b60:	f7ee fd62 	bl	8000628 <__aeabi_dmul>
 8011b64:	4606      	mov	r6, r0
 8011b66:	460f      	mov	r7, r1
 8011b68:	4602      	mov	r2, r0
 8011b6a:	460b      	mov	r3, r1
 8011b6c:	4650      	mov	r0, sl
 8011b6e:	4659      	mov	r1, fp
 8011b70:	f7ee fba2 	bl	80002b8 <__aeabi_dsub>
 8011b74:	4602      	mov	r2, r0
 8011b76:	460b      	mov	r3, r1
 8011b78:	4680      	mov	r8, r0
 8011b7a:	4689      	mov	r9, r1
 8011b7c:	4650      	mov	r0, sl
 8011b7e:	4659      	mov	r1, fp
 8011b80:	f7ee fb9a 	bl	80002b8 <__aeabi_dsub>
 8011b84:	4632      	mov	r2, r6
 8011b86:	463b      	mov	r3, r7
 8011b88:	f7ee fb96 	bl	80002b8 <__aeabi_dsub>
 8011b8c:	a340      	add	r3, pc, #256	; (adr r3, 8011c90 <__ieee754_rem_pio2+0x2f8>)
 8011b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b92:	4606      	mov	r6, r0
 8011b94:	460f      	mov	r7, r1
 8011b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b9a:	f7ee fd45 	bl	8000628 <__aeabi_dmul>
 8011b9e:	4632      	mov	r2, r6
 8011ba0:	463b      	mov	r3, r7
 8011ba2:	f7ee fb89 	bl	80002b8 <__aeabi_dsub>
 8011ba6:	4602      	mov	r2, r0
 8011ba8:	460b      	mov	r3, r1
 8011baa:	4606      	mov	r6, r0
 8011bac:	460f      	mov	r7, r1
 8011bae:	4640      	mov	r0, r8
 8011bb0:	4649      	mov	r1, r9
 8011bb2:	f7ee fb81 	bl	80002b8 <__aeabi_dsub>
 8011bb6:	9a05      	ldr	r2, [sp, #20]
 8011bb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011bbc:	1ad3      	subs	r3, r2, r3
 8011bbe:	2b31      	cmp	r3, #49	; 0x31
 8011bc0:	dc20      	bgt.n	8011c04 <__ieee754_rem_pio2+0x26c>
 8011bc2:	e9c4 0100 	strd	r0, r1, [r4]
 8011bc6:	46c2      	mov	sl, r8
 8011bc8:	46cb      	mov	fp, r9
 8011bca:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011bce:	4650      	mov	r0, sl
 8011bd0:	4642      	mov	r2, r8
 8011bd2:	464b      	mov	r3, r9
 8011bd4:	4659      	mov	r1, fp
 8011bd6:	f7ee fb6f 	bl	80002b8 <__aeabi_dsub>
 8011bda:	463b      	mov	r3, r7
 8011bdc:	4632      	mov	r2, r6
 8011bde:	f7ee fb6b 	bl	80002b8 <__aeabi_dsub>
 8011be2:	9b04      	ldr	r3, [sp, #16]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011bea:	f6bf af11 	bge.w	8011a10 <__ieee754_rem_pio2+0x78>
 8011bee:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011bf2:	6063      	str	r3, [r4, #4]
 8011bf4:	f8c4 8000 	str.w	r8, [r4]
 8011bf8:	60a0      	str	r0, [r4, #8]
 8011bfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bfe:	60e3      	str	r3, [r4, #12]
 8011c00:	426d      	negs	r5, r5
 8011c02:	e705      	b.n	8011a10 <__ieee754_rem_pio2+0x78>
 8011c04:	a326      	add	r3, pc, #152	; (adr r3, 8011ca0 <__ieee754_rem_pio2+0x308>)
 8011c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c0e:	f7ee fd0b 	bl	8000628 <__aeabi_dmul>
 8011c12:	4606      	mov	r6, r0
 8011c14:	460f      	mov	r7, r1
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	4640      	mov	r0, r8
 8011c1c:	4649      	mov	r1, r9
 8011c1e:	f7ee fb4b 	bl	80002b8 <__aeabi_dsub>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	4682      	mov	sl, r0
 8011c28:	468b      	mov	fp, r1
 8011c2a:	4640      	mov	r0, r8
 8011c2c:	4649      	mov	r1, r9
 8011c2e:	f7ee fb43 	bl	80002b8 <__aeabi_dsub>
 8011c32:	4632      	mov	r2, r6
 8011c34:	463b      	mov	r3, r7
 8011c36:	f7ee fb3f 	bl	80002b8 <__aeabi_dsub>
 8011c3a:	a31b      	add	r3, pc, #108	; (adr r3, 8011ca8 <__ieee754_rem_pio2+0x310>)
 8011c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c40:	4606      	mov	r6, r0
 8011c42:	460f      	mov	r7, r1
 8011c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c48:	f7ee fcee 	bl	8000628 <__aeabi_dmul>
 8011c4c:	4632      	mov	r2, r6
 8011c4e:	463b      	mov	r3, r7
 8011c50:	f7ee fb32 	bl	80002b8 <__aeabi_dsub>
 8011c54:	4606      	mov	r6, r0
 8011c56:	460f      	mov	r7, r1
 8011c58:	e764      	b.n	8011b24 <__ieee754_rem_pio2+0x18c>
 8011c5a:	4b1b      	ldr	r3, [pc, #108]	; (8011cc8 <__ieee754_rem_pio2+0x330>)
 8011c5c:	4598      	cmp	r8, r3
 8011c5e:	dd35      	ble.n	8011ccc <__ieee754_rem_pio2+0x334>
 8011c60:	ee10 2a10 	vmov	r2, s0
 8011c64:	463b      	mov	r3, r7
 8011c66:	4630      	mov	r0, r6
 8011c68:	4639      	mov	r1, r7
 8011c6a:	f7ee fb25 	bl	80002b8 <__aeabi_dsub>
 8011c6e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c72:	e9c4 0100 	strd	r0, r1, [r4]
 8011c76:	e6a1      	b.n	80119bc <__ieee754_rem_pio2+0x24>
 8011c78:	54400000 	.word	0x54400000
 8011c7c:	3ff921fb 	.word	0x3ff921fb
 8011c80:	1a626331 	.word	0x1a626331
 8011c84:	3dd0b461 	.word	0x3dd0b461
 8011c88:	1a600000 	.word	0x1a600000
 8011c8c:	3dd0b461 	.word	0x3dd0b461
 8011c90:	2e037073 	.word	0x2e037073
 8011c94:	3ba3198a 	.word	0x3ba3198a
 8011c98:	6dc9c883 	.word	0x6dc9c883
 8011c9c:	3fe45f30 	.word	0x3fe45f30
 8011ca0:	2e000000 	.word	0x2e000000
 8011ca4:	3ba3198a 	.word	0x3ba3198a
 8011ca8:	252049c1 	.word	0x252049c1
 8011cac:	397b839a 	.word	0x397b839a
 8011cb0:	3fe921fb 	.word	0x3fe921fb
 8011cb4:	4002d97b 	.word	0x4002d97b
 8011cb8:	3ff921fb 	.word	0x3ff921fb
 8011cbc:	413921fb 	.word	0x413921fb
 8011cc0:	3fe00000 	.word	0x3fe00000
 8011cc4:	08017fc4 	.word	0x08017fc4
 8011cc8:	7fefffff 	.word	0x7fefffff
 8011ccc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011cd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011cd4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011cd8:	4630      	mov	r0, r6
 8011cda:	460f      	mov	r7, r1
 8011cdc:	f7ee ff54 	bl	8000b88 <__aeabi_d2iz>
 8011ce0:	f7ee fc38 	bl	8000554 <__aeabi_i2d>
 8011ce4:	4602      	mov	r2, r0
 8011ce6:	460b      	mov	r3, r1
 8011ce8:	4630      	mov	r0, r6
 8011cea:	4639      	mov	r1, r7
 8011cec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011cf0:	f7ee fae2 	bl	80002b8 <__aeabi_dsub>
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	4b1f      	ldr	r3, [pc, #124]	; (8011d74 <__ieee754_rem_pio2+0x3dc>)
 8011cf8:	f7ee fc96 	bl	8000628 <__aeabi_dmul>
 8011cfc:	460f      	mov	r7, r1
 8011cfe:	4606      	mov	r6, r0
 8011d00:	f7ee ff42 	bl	8000b88 <__aeabi_d2iz>
 8011d04:	f7ee fc26 	bl	8000554 <__aeabi_i2d>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	4639      	mov	r1, r7
 8011d10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011d14:	f7ee fad0 	bl	80002b8 <__aeabi_dsub>
 8011d18:	2200      	movs	r2, #0
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <__ieee754_rem_pio2+0x3dc>)
 8011d1c:	f7ee fc84 	bl	8000628 <__aeabi_dmul>
 8011d20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011d24:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011d28:	f04f 0803 	mov.w	r8, #3
 8011d2c:	2600      	movs	r6, #0
 8011d2e:	2700      	movs	r7, #0
 8011d30:	4632      	mov	r2, r6
 8011d32:	463b      	mov	r3, r7
 8011d34:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011d38:	f108 3aff 	add.w	sl, r8, #4294967295
 8011d3c:	f7ee fedc 	bl	8000af8 <__aeabi_dcmpeq>
 8011d40:	b9b0      	cbnz	r0, 8011d70 <__ieee754_rem_pio2+0x3d8>
 8011d42:	4b0d      	ldr	r3, [pc, #52]	; (8011d78 <__ieee754_rem_pio2+0x3e0>)
 8011d44:	9301      	str	r3, [sp, #4]
 8011d46:	2302      	movs	r3, #2
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	462a      	mov	r2, r5
 8011d4c:	4643      	mov	r3, r8
 8011d4e:	4621      	mov	r1, r4
 8011d50:	a806      	add	r0, sp, #24
 8011d52:	f000 f98d 	bl	8012070 <__kernel_rem_pio2>
 8011d56:	9b04      	ldr	r3, [sp, #16]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	f6bf ae58 	bge.w	8011a10 <__ieee754_rem_pio2+0x78>
 8011d60:	6863      	ldr	r3, [r4, #4]
 8011d62:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d66:	6063      	str	r3, [r4, #4]
 8011d68:	68e3      	ldr	r3, [r4, #12]
 8011d6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d6e:	e746      	b.n	8011bfe <__ieee754_rem_pio2+0x266>
 8011d70:	46d0      	mov	r8, sl
 8011d72:	e7dd      	b.n	8011d30 <__ieee754_rem_pio2+0x398>
 8011d74:	41700000 	.word	0x41700000
 8011d78:	08018044 	.word	0x08018044

08011d7c <__ieee754_sqrt>:
 8011d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d80:	4955      	ldr	r1, [pc, #340]	; (8011ed8 <__ieee754_sqrt+0x15c>)
 8011d82:	ec55 4b10 	vmov	r4, r5, d0
 8011d86:	43a9      	bics	r1, r5
 8011d88:	462b      	mov	r3, r5
 8011d8a:	462a      	mov	r2, r5
 8011d8c:	d112      	bne.n	8011db4 <__ieee754_sqrt+0x38>
 8011d8e:	ee10 2a10 	vmov	r2, s0
 8011d92:	ee10 0a10 	vmov	r0, s0
 8011d96:	4629      	mov	r1, r5
 8011d98:	f7ee fc46 	bl	8000628 <__aeabi_dmul>
 8011d9c:	4602      	mov	r2, r0
 8011d9e:	460b      	mov	r3, r1
 8011da0:	4620      	mov	r0, r4
 8011da2:	4629      	mov	r1, r5
 8011da4:	f7ee fa8a 	bl	80002bc <__adddf3>
 8011da8:	4604      	mov	r4, r0
 8011daa:	460d      	mov	r5, r1
 8011dac:	ec45 4b10 	vmov	d0, r4, r5
 8011db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011db4:	2d00      	cmp	r5, #0
 8011db6:	ee10 0a10 	vmov	r0, s0
 8011dba:	4621      	mov	r1, r4
 8011dbc:	dc0f      	bgt.n	8011dde <__ieee754_sqrt+0x62>
 8011dbe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011dc2:	4330      	orrs	r0, r6
 8011dc4:	d0f2      	beq.n	8011dac <__ieee754_sqrt+0x30>
 8011dc6:	b155      	cbz	r5, 8011dde <__ieee754_sqrt+0x62>
 8011dc8:	ee10 2a10 	vmov	r2, s0
 8011dcc:	4620      	mov	r0, r4
 8011dce:	4629      	mov	r1, r5
 8011dd0:	f7ee fa72 	bl	80002b8 <__aeabi_dsub>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	460b      	mov	r3, r1
 8011dd8:	f7ee fd50 	bl	800087c <__aeabi_ddiv>
 8011ddc:	e7e4      	b.n	8011da8 <__ieee754_sqrt+0x2c>
 8011dde:	151b      	asrs	r3, r3, #20
 8011de0:	d073      	beq.n	8011eca <__ieee754_sqrt+0x14e>
 8011de2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011de6:	07dd      	lsls	r5, r3, #31
 8011de8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011dec:	bf48      	it	mi
 8011dee:	0fc8      	lsrmi	r0, r1, #31
 8011df0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011df4:	bf44      	itt	mi
 8011df6:	0049      	lslmi	r1, r1, #1
 8011df8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011dfc:	2500      	movs	r5, #0
 8011dfe:	1058      	asrs	r0, r3, #1
 8011e00:	0fcb      	lsrs	r3, r1, #31
 8011e02:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011e06:	0049      	lsls	r1, r1, #1
 8011e08:	2316      	movs	r3, #22
 8011e0a:	462c      	mov	r4, r5
 8011e0c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011e10:	19a7      	adds	r7, r4, r6
 8011e12:	4297      	cmp	r7, r2
 8011e14:	bfde      	ittt	le
 8011e16:	19bc      	addle	r4, r7, r6
 8011e18:	1bd2      	suble	r2, r2, r7
 8011e1a:	19ad      	addle	r5, r5, r6
 8011e1c:	0fcf      	lsrs	r7, r1, #31
 8011e1e:	3b01      	subs	r3, #1
 8011e20:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011e24:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011e28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011e2c:	d1f0      	bne.n	8011e10 <__ieee754_sqrt+0x94>
 8011e2e:	f04f 0c20 	mov.w	ip, #32
 8011e32:	469e      	mov	lr, r3
 8011e34:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011e38:	42a2      	cmp	r2, r4
 8011e3a:	eb06 070e 	add.w	r7, r6, lr
 8011e3e:	dc02      	bgt.n	8011e46 <__ieee754_sqrt+0xca>
 8011e40:	d112      	bne.n	8011e68 <__ieee754_sqrt+0xec>
 8011e42:	428f      	cmp	r7, r1
 8011e44:	d810      	bhi.n	8011e68 <__ieee754_sqrt+0xec>
 8011e46:	2f00      	cmp	r7, #0
 8011e48:	eb07 0e06 	add.w	lr, r7, r6
 8011e4c:	da42      	bge.n	8011ed4 <__ieee754_sqrt+0x158>
 8011e4e:	f1be 0f00 	cmp.w	lr, #0
 8011e52:	db3f      	blt.n	8011ed4 <__ieee754_sqrt+0x158>
 8011e54:	f104 0801 	add.w	r8, r4, #1
 8011e58:	1b12      	subs	r2, r2, r4
 8011e5a:	428f      	cmp	r7, r1
 8011e5c:	bf88      	it	hi
 8011e5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011e62:	1bc9      	subs	r1, r1, r7
 8011e64:	4433      	add	r3, r6
 8011e66:	4644      	mov	r4, r8
 8011e68:	0052      	lsls	r2, r2, #1
 8011e6a:	f1bc 0c01 	subs.w	ip, ip, #1
 8011e6e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011e72:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011e76:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011e7a:	d1dd      	bne.n	8011e38 <__ieee754_sqrt+0xbc>
 8011e7c:	430a      	orrs	r2, r1
 8011e7e:	d006      	beq.n	8011e8e <__ieee754_sqrt+0x112>
 8011e80:	1c5c      	adds	r4, r3, #1
 8011e82:	bf13      	iteet	ne
 8011e84:	3301      	addne	r3, #1
 8011e86:	3501      	addeq	r5, #1
 8011e88:	4663      	moveq	r3, ip
 8011e8a:	f023 0301 	bicne.w	r3, r3, #1
 8011e8e:	106a      	asrs	r2, r5, #1
 8011e90:	085b      	lsrs	r3, r3, #1
 8011e92:	07e9      	lsls	r1, r5, #31
 8011e94:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011e98:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011e9c:	bf48      	it	mi
 8011e9e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011ea2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011ea6:	461c      	mov	r4, r3
 8011ea8:	e780      	b.n	8011dac <__ieee754_sqrt+0x30>
 8011eaa:	0aca      	lsrs	r2, r1, #11
 8011eac:	3815      	subs	r0, #21
 8011eae:	0549      	lsls	r1, r1, #21
 8011eb0:	2a00      	cmp	r2, #0
 8011eb2:	d0fa      	beq.n	8011eaa <__ieee754_sqrt+0x12e>
 8011eb4:	02d6      	lsls	r6, r2, #11
 8011eb6:	d50a      	bpl.n	8011ece <__ieee754_sqrt+0x152>
 8011eb8:	f1c3 0420 	rsb	r4, r3, #32
 8011ebc:	fa21 f404 	lsr.w	r4, r1, r4
 8011ec0:	1e5d      	subs	r5, r3, #1
 8011ec2:	4099      	lsls	r1, r3
 8011ec4:	4322      	orrs	r2, r4
 8011ec6:	1b43      	subs	r3, r0, r5
 8011ec8:	e78b      	b.n	8011de2 <__ieee754_sqrt+0x66>
 8011eca:	4618      	mov	r0, r3
 8011ecc:	e7f0      	b.n	8011eb0 <__ieee754_sqrt+0x134>
 8011ece:	0052      	lsls	r2, r2, #1
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	e7ef      	b.n	8011eb4 <__ieee754_sqrt+0x138>
 8011ed4:	46a0      	mov	r8, r4
 8011ed6:	e7bf      	b.n	8011e58 <__ieee754_sqrt+0xdc>
 8011ed8:	7ff00000 	.word	0x7ff00000
 8011edc:	00000000 	.word	0x00000000

08011ee0 <__kernel_cos>:
 8011ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ec59 8b10 	vmov	r8, r9, d0
 8011ee8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011eec:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011ef0:	ed2d 8b02 	vpush	{d8}
 8011ef4:	eeb0 8a41 	vmov.f32	s16, s2
 8011ef8:	eef0 8a61 	vmov.f32	s17, s3
 8011efc:	da07      	bge.n	8011f0e <__kernel_cos+0x2e>
 8011efe:	ee10 0a10 	vmov	r0, s0
 8011f02:	4649      	mov	r1, r9
 8011f04:	f7ee fe40 	bl	8000b88 <__aeabi_d2iz>
 8011f08:	2800      	cmp	r0, #0
 8011f0a:	f000 8089 	beq.w	8012020 <__kernel_cos+0x140>
 8011f0e:	4642      	mov	r2, r8
 8011f10:	464b      	mov	r3, r9
 8011f12:	4640      	mov	r0, r8
 8011f14:	4649      	mov	r1, r9
 8011f16:	f7ee fb87 	bl	8000628 <__aeabi_dmul>
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	4b4e      	ldr	r3, [pc, #312]	; (8012058 <__kernel_cos+0x178>)
 8011f1e:	4604      	mov	r4, r0
 8011f20:	460d      	mov	r5, r1
 8011f22:	f7ee fb81 	bl	8000628 <__aeabi_dmul>
 8011f26:	a340      	add	r3, pc, #256	; (adr r3, 8012028 <__kernel_cos+0x148>)
 8011f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2c:	4682      	mov	sl, r0
 8011f2e:	468b      	mov	fp, r1
 8011f30:	4620      	mov	r0, r4
 8011f32:	4629      	mov	r1, r5
 8011f34:	f7ee fb78 	bl	8000628 <__aeabi_dmul>
 8011f38:	a33d      	add	r3, pc, #244	; (adr r3, 8012030 <__kernel_cos+0x150>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	f7ee f9bd 	bl	80002bc <__adddf3>
 8011f42:	4622      	mov	r2, r4
 8011f44:	462b      	mov	r3, r5
 8011f46:	f7ee fb6f 	bl	8000628 <__aeabi_dmul>
 8011f4a:	a33b      	add	r3, pc, #236	; (adr r3, 8012038 <__kernel_cos+0x158>)
 8011f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f50:	f7ee f9b2 	bl	80002b8 <__aeabi_dsub>
 8011f54:	4622      	mov	r2, r4
 8011f56:	462b      	mov	r3, r5
 8011f58:	f7ee fb66 	bl	8000628 <__aeabi_dmul>
 8011f5c:	a338      	add	r3, pc, #224	; (adr r3, 8012040 <__kernel_cos+0x160>)
 8011f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f62:	f7ee f9ab 	bl	80002bc <__adddf3>
 8011f66:	4622      	mov	r2, r4
 8011f68:	462b      	mov	r3, r5
 8011f6a:	f7ee fb5d 	bl	8000628 <__aeabi_dmul>
 8011f6e:	a336      	add	r3, pc, #216	; (adr r3, 8012048 <__kernel_cos+0x168>)
 8011f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f74:	f7ee f9a0 	bl	80002b8 <__aeabi_dsub>
 8011f78:	4622      	mov	r2, r4
 8011f7a:	462b      	mov	r3, r5
 8011f7c:	f7ee fb54 	bl	8000628 <__aeabi_dmul>
 8011f80:	a333      	add	r3, pc, #204	; (adr r3, 8012050 <__kernel_cos+0x170>)
 8011f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f86:	f7ee f999 	bl	80002bc <__adddf3>
 8011f8a:	4622      	mov	r2, r4
 8011f8c:	462b      	mov	r3, r5
 8011f8e:	f7ee fb4b 	bl	8000628 <__aeabi_dmul>
 8011f92:	4622      	mov	r2, r4
 8011f94:	462b      	mov	r3, r5
 8011f96:	f7ee fb47 	bl	8000628 <__aeabi_dmul>
 8011f9a:	ec53 2b18 	vmov	r2, r3, d8
 8011f9e:	4604      	mov	r4, r0
 8011fa0:	460d      	mov	r5, r1
 8011fa2:	4640      	mov	r0, r8
 8011fa4:	4649      	mov	r1, r9
 8011fa6:	f7ee fb3f 	bl	8000628 <__aeabi_dmul>
 8011faa:	460b      	mov	r3, r1
 8011fac:	4602      	mov	r2, r0
 8011fae:	4629      	mov	r1, r5
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f7ee f981 	bl	80002b8 <__aeabi_dsub>
 8011fb6:	4b29      	ldr	r3, [pc, #164]	; (801205c <__kernel_cos+0x17c>)
 8011fb8:	429e      	cmp	r6, r3
 8011fba:	4680      	mov	r8, r0
 8011fbc:	4689      	mov	r9, r1
 8011fbe:	dc11      	bgt.n	8011fe4 <__kernel_cos+0x104>
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	460b      	mov	r3, r1
 8011fc4:	4650      	mov	r0, sl
 8011fc6:	4659      	mov	r1, fp
 8011fc8:	f7ee f976 	bl	80002b8 <__aeabi_dsub>
 8011fcc:	460b      	mov	r3, r1
 8011fce:	4924      	ldr	r1, [pc, #144]	; (8012060 <__kernel_cos+0x180>)
 8011fd0:	4602      	mov	r2, r0
 8011fd2:	2000      	movs	r0, #0
 8011fd4:	f7ee f970 	bl	80002b8 <__aeabi_dsub>
 8011fd8:	ecbd 8b02 	vpop	{d8}
 8011fdc:	ec41 0b10 	vmov	d0, r0, r1
 8011fe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe4:	4b1f      	ldr	r3, [pc, #124]	; (8012064 <__kernel_cos+0x184>)
 8011fe6:	491e      	ldr	r1, [pc, #120]	; (8012060 <__kernel_cos+0x180>)
 8011fe8:	429e      	cmp	r6, r3
 8011fea:	bfcc      	ite	gt
 8011fec:	4d1e      	ldrgt	r5, [pc, #120]	; (8012068 <__kernel_cos+0x188>)
 8011fee:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011ff2:	2400      	movs	r4, #0
 8011ff4:	4622      	mov	r2, r4
 8011ff6:	462b      	mov	r3, r5
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	f7ee f95d 	bl	80002b8 <__aeabi_dsub>
 8011ffe:	4622      	mov	r2, r4
 8012000:	4606      	mov	r6, r0
 8012002:	460f      	mov	r7, r1
 8012004:	462b      	mov	r3, r5
 8012006:	4650      	mov	r0, sl
 8012008:	4659      	mov	r1, fp
 801200a:	f7ee f955 	bl	80002b8 <__aeabi_dsub>
 801200e:	4642      	mov	r2, r8
 8012010:	464b      	mov	r3, r9
 8012012:	f7ee f951 	bl	80002b8 <__aeabi_dsub>
 8012016:	4602      	mov	r2, r0
 8012018:	460b      	mov	r3, r1
 801201a:	4630      	mov	r0, r6
 801201c:	4639      	mov	r1, r7
 801201e:	e7d9      	b.n	8011fd4 <__kernel_cos+0xf4>
 8012020:	2000      	movs	r0, #0
 8012022:	490f      	ldr	r1, [pc, #60]	; (8012060 <__kernel_cos+0x180>)
 8012024:	e7d8      	b.n	8011fd8 <__kernel_cos+0xf8>
 8012026:	bf00      	nop
 8012028:	be8838d4 	.word	0xbe8838d4
 801202c:	bda8fae9 	.word	0xbda8fae9
 8012030:	bdb4b1c4 	.word	0xbdb4b1c4
 8012034:	3e21ee9e 	.word	0x3e21ee9e
 8012038:	809c52ad 	.word	0x809c52ad
 801203c:	3e927e4f 	.word	0x3e927e4f
 8012040:	19cb1590 	.word	0x19cb1590
 8012044:	3efa01a0 	.word	0x3efa01a0
 8012048:	16c15177 	.word	0x16c15177
 801204c:	3f56c16c 	.word	0x3f56c16c
 8012050:	5555554c 	.word	0x5555554c
 8012054:	3fa55555 	.word	0x3fa55555
 8012058:	3fe00000 	.word	0x3fe00000
 801205c:	3fd33332 	.word	0x3fd33332
 8012060:	3ff00000 	.word	0x3ff00000
 8012064:	3fe90000 	.word	0x3fe90000
 8012068:	3fd20000 	.word	0x3fd20000
 801206c:	00000000 	.word	0x00000000

08012070 <__kernel_rem_pio2>:
 8012070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012074:	ed2d 8b02 	vpush	{d8}
 8012078:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801207c:	1ed4      	subs	r4, r2, #3
 801207e:	9308      	str	r3, [sp, #32]
 8012080:	9101      	str	r1, [sp, #4]
 8012082:	4bc5      	ldr	r3, [pc, #788]	; (8012398 <__kernel_rem_pio2+0x328>)
 8012084:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012086:	9009      	str	r0, [sp, #36]	; 0x24
 8012088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801208c:	9304      	str	r3, [sp, #16]
 801208e:	9b08      	ldr	r3, [sp, #32]
 8012090:	3b01      	subs	r3, #1
 8012092:	9307      	str	r3, [sp, #28]
 8012094:	2318      	movs	r3, #24
 8012096:	fb94 f4f3 	sdiv	r4, r4, r3
 801209a:	f06f 0317 	mvn.w	r3, #23
 801209e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80120a2:	fb04 3303 	mla	r3, r4, r3, r3
 80120a6:	eb03 0a02 	add.w	sl, r3, r2
 80120aa:	9b04      	ldr	r3, [sp, #16]
 80120ac:	9a07      	ldr	r2, [sp, #28]
 80120ae:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012388 <__kernel_rem_pio2+0x318>
 80120b2:	eb03 0802 	add.w	r8, r3, r2
 80120b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80120b8:	1aa7      	subs	r7, r4, r2
 80120ba:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80120be:	ae22      	add	r6, sp, #136	; 0x88
 80120c0:	2500      	movs	r5, #0
 80120c2:	4545      	cmp	r5, r8
 80120c4:	dd13      	ble.n	80120ee <__kernel_rem_pio2+0x7e>
 80120c6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012388 <__kernel_rem_pio2+0x318>
 80120ca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80120ce:	2600      	movs	r6, #0
 80120d0:	9b04      	ldr	r3, [sp, #16]
 80120d2:	429e      	cmp	r6, r3
 80120d4:	dc32      	bgt.n	801213c <__kernel_rem_pio2+0xcc>
 80120d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120d8:	9302      	str	r3, [sp, #8]
 80120da:	9b08      	ldr	r3, [sp, #32]
 80120dc:	199d      	adds	r5, r3, r6
 80120de:	ab22      	add	r3, sp, #136	; 0x88
 80120e0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80120e4:	9306      	str	r3, [sp, #24]
 80120e6:	ec59 8b18 	vmov	r8, r9, d8
 80120ea:	2700      	movs	r7, #0
 80120ec:	e01f      	b.n	801212e <__kernel_rem_pio2+0xbe>
 80120ee:	42ef      	cmn	r7, r5
 80120f0:	d407      	bmi.n	8012102 <__kernel_rem_pio2+0x92>
 80120f2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80120f6:	f7ee fa2d 	bl	8000554 <__aeabi_i2d>
 80120fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80120fe:	3501      	adds	r5, #1
 8012100:	e7df      	b.n	80120c2 <__kernel_rem_pio2+0x52>
 8012102:	ec51 0b18 	vmov	r0, r1, d8
 8012106:	e7f8      	b.n	80120fa <__kernel_rem_pio2+0x8a>
 8012108:	9906      	ldr	r1, [sp, #24]
 801210a:	9d02      	ldr	r5, [sp, #8]
 801210c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012110:	9106      	str	r1, [sp, #24]
 8012112:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8012116:	9502      	str	r5, [sp, #8]
 8012118:	f7ee fa86 	bl	8000628 <__aeabi_dmul>
 801211c:	4602      	mov	r2, r0
 801211e:	460b      	mov	r3, r1
 8012120:	4640      	mov	r0, r8
 8012122:	4649      	mov	r1, r9
 8012124:	f7ee f8ca 	bl	80002bc <__adddf3>
 8012128:	3701      	adds	r7, #1
 801212a:	4680      	mov	r8, r0
 801212c:	4689      	mov	r9, r1
 801212e:	9b07      	ldr	r3, [sp, #28]
 8012130:	429f      	cmp	r7, r3
 8012132:	dde9      	ble.n	8012108 <__kernel_rem_pio2+0x98>
 8012134:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012138:	3601      	adds	r6, #1
 801213a:	e7c9      	b.n	80120d0 <__kernel_rem_pio2+0x60>
 801213c:	9b04      	ldr	r3, [sp, #16]
 801213e:	aa0e      	add	r2, sp, #56	; 0x38
 8012140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012144:	930c      	str	r3, [sp, #48]	; 0x30
 8012146:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012148:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801214c:	9c04      	ldr	r4, [sp, #16]
 801214e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012150:	ab9a      	add	r3, sp, #616	; 0x268
 8012152:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012156:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801215a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801215e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012162:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012166:	ab9a      	add	r3, sp, #616	; 0x268
 8012168:	445b      	add	r3, fp
 801216a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801216e:	2500      	movs	r5, #0
 8012170:	1b63      	subs	r3, r4, r5
 8012172:	2b00      	cmp	r3, #0
 8012174:	dc78      	bgt.n	8012268 <__kernel_rem_pio2+0x1f8>
 8012176:	4650      	mov	r0, sl
 8012178:	ec49 8b10 	vmov	d0, r8, r9
 801217c:	f000 fc04 	bl	8012988 <scalbn>
 8012180:	ec57 6b10 	vmov	r6, r7, d0
 8012184:	2200      	movs	r2, #0
 8012186:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801218a:	ee10 0a10 	vmov	r0, s0
 801218e:	4639      	mov	r1, r7
 8012190:	f7ee fa4a 	bl	8000628 <__aeabi_dmul>
 8012194:	ec41 0b10 	vmov	d0, r0, r1
 8012198:	f000 fb6e 	bl	8012878 <floor>
 801219c:	2200      	movs	r2, #0
 801219e:	ec51 0b10 	vmov	r0, r1, d0
 80121a2:	4b7e      	ldr	r3, [pc, #504]	; (801239c <__kernel_rem_pio2+0x32c>)
 80121a4:	f7ee fa40 	bl	8000628 <__aeabi_dmul>
 80121a8:	4602      	mov	r2, r0
 80121aa:	460b      	mov	r3, r1
 80121ac:	4630      	mov	r0, r6
 80121ae:	4639      	mov	r1, r7
 80121b0:	f7ee f882 	bl	80002b8 <__aeabi_dsub>
 80121b4:	460f      	mov	r7, r1
 80121b6:	4606      	mov	r6, r0
 80121b8:	f7ee fce6 	bl	8000b88 <__aeabi_d2iz>
 80121bc:	9006      	str	r0, [sp, #24]
 80121be:	f7ee f9c9 	bl	8000554 <__aeabi_i2d>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	4630      	mov	r0, r6
 80121c8:	4639      	mov	r1, r7
 80121ca:	f7ee f875 	bl	80002b8 <__aeabi_dsub>
 80121ce:	f1ba 0f00 	cmp.w	sl, #0
 80121d2:	4606      	mov	r6, r0
 80121d4:	460f      	mov	r7, r1
 80121d6:	dd6c      	ble.n	80122b2 <__kernel_rem_pio2+0x242>
 80121d8:	1e62      	subs	r2, r4, #1
 80121da:	ab0e      	add	r3, sp, #56	; 0x38
 80121dc:	f1ca 0118 	rsb	r1, sl, #24
 80121e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80121e4:	9d06      	ldr	r5, [sp, #24]
 80121e6:	fa40 f301 	asr.w	r3, r0, r1
 80121ea:	441d      	add	r5, r3
 80121ec:	408b      	lsls	r3, r1
 80121ee:	1ac0      	subs	r0, r0, r3
 80121f0:	ab0e      	add	r3, sp, #56	; 0x38
 80121f2:	9506      	str	r5, [sp, #24]
 80121f4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80121f8:	f1ca 0317 	rsb	r3, sl, #23
 80121fc:	fa40 f303 	asr.w	r3, r0, r3
 8012200:	9302      	str	r3, [sp, #8]
 8012202:	9b02      	ldr	r3, [sp, #8]
 8012204:	2b00      	cmp	r3, #0
 8012206:	dd62      	ble.n	80122ce <__kernel_rem_pio2+0x25e>
 8012208:	9b06      	ldr	r3, [sp, #24]
 801220a:	2200      	movs	r2, #0
 801220c:	3301      	adds	r3, #1
 801220e:	9306      	str	r3, [sp, #24]
 8012210:	4615      	mov	r5, r2
 8012212:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8012216:	4294      	cmp	r4, r2
 8012218:	f300 8095 	bgt.w	8012346 <__kernel_rem_pio2+0x2d6>
 801221c:	f1ba 0f00 	cmp.w	sl, #0
 8012220:	dd07      	ble.n	8012232 <__kernel_rem_pio2+0x1c2>
 8012222:	f1ba 0f01 	cmp.w	sl, #1
 8012226:	f000 80a2 	beq.w	801236e <__kernel_rem_pio2+0x2fe>
 801222a:	f1ba 0f02 	cmp.w	sl, #2
 801222e:	f000 80c1 	beq.w	80123b4 <__kernel_rem_pio2+0x344>
 8012232:	9b02      	ldr	r3, [sp, #8]
 8012234:	2b02      	cmp	r3, #2
 8012236:	d14a      	bne.n	80122ce <__kernel_rem_pio2+0x25e>
 8012238:	4632      	mov	r2, r6
 801223a:	463b      	mov	r3, r7
 801223c:	2000      	movs	r0, #0
 801223e:	4958      	ldr	r1, [pc, #352]	; (80123a0 <__kernel_rem_pio2+0x330>)
 8012240:	f7ee f83a 	bl	80002b8 <__aeabi_dsub>
 8012244:	4606      	mov	r6, r0
 8012246:	460f      	mov	r7, r1
 8012248:	2d00      	cmp	r5, #0
 801224a:	d040      	beq.n	80122ce <__kernel_rem_pio2+0x25e>
 801224c:	4650      	mov	r0, sl
 801224e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012390 <__kernel_rem_pio2+0x320>
 8012252:	f000 fb99 	bl	8012988 <scalbn>
 8012256:	4630      	mov	r0, r6
 8012258:	4639      	mov	r1, r7
 801225a:	ec53 2b10 	vmov	r2, r3, d0
 801225e:	f7ee f82b 	bl	80002b8 <__aeabi_dsub>
 8012262:	4606      	mov	r6, r0
 8012264:	460f      	mov	r7, r1
 8012266:	e032      	b.n	80122ce <__kernel_rem_pio2+0x25e>
 8012268:	2200      	movs	r2, #0
 801226a:	4b4e      	ldr	r3, [pc, #312]	; (80123a4 <__kernel_rem_pio2+0x334>)
 801226c:	4640      	mov	r0, r8
 801226e:	4649      	mov	r1, r9
 8012270:	f7ee f9da 	bl	8000628 <__aeabi_dmul>
 8012274:	f7ee fc88 	bl	8000b88 <__aeabi_d2iz>
 8012278:	f7ee f96c 	bl	8000554 <__aeabi_i2d>
 801227c:	2200      	movs	r2, #0
 801227e:	4b4a      	ldr	r3, [pc, #296]	; (80123a8 <__kernel_rem_pio2+0x338>)
 8012280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012284:	f7ee f9d0 	bl	8000628 <__aeabi_dmul>
 8012288:	4602      	mov	r2, r0
 801228a:	460b      	mov	r3, r1
 801228c:	4640      	mov	r0, r8
 801228e:	4649      	mov	r1, r9
 8012290:	f7ee f812 	bl	80002b8 <__aeabi_dsub>
 8012294:	f7ee fc78 	bl	8000b88 <__aeabi_d2iz>
 8012298:	ab0e      	add	r3, sp, #56	; 0x38
 801229a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801229e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80122a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122a6:	f7ee f809 	bl	80002bc <__adddf3>
 80122aa:	3501      	adds	r5, #1
 80122ac:	4680      	mov	r8, r0
 80122ae:	4689      	mov	r9, r1
 80122b0:	e75e      	b.n	8012170 <__kernel_rem_pio2+0x100>
 80122b2:	d105      	bne.n	80122c0 <__kernel_rem_pio2+0x250>
 80122b4:	1e63      	subs	r3, r4, #1
 80122b6:	aa0e      	add	r2, sp, #56	; 0x38
 80122b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80122bc:	15c3      	asrs	r3, r0, #23
 80122be:	e79f      	b.n	8012200 <__kernel_rem_pio2+0x190>
 80122c0:	2200      	movs	r2, #0
 80122c2:	4b3a      	ldr	r3, [pc, #232]	; (80123ac <__kernel_rem_pio2+0x33c>)
 80122c4:	f7ee fc36 	bl	8000b34 <__aeabi_dcmpge>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d139      	bne.n	8012340 <__kernel_rem_pio2+0x2d0>
 80122cc:	9002      	str	r0, [sp, #8]
 80122ce:	2200      	movs	r2, #0
 80122d0:	2300      	movs	r3, #0
 80122d2:	4630      	mov	r0, r6
 80122d4:	4639      	mov	r1, r7
 80122d6:	f7ee fc0f 	bl	8000af8 <__aeabi_dcmpeq>
 80122da:	2800      	cmp	r0, #0
 80122dc:	f000 80c7 	beq.w	801246e <__kernel_rem_pio2+0x3fe>
 80122e0:	1e65      	subs	r5, r4, #1
 80122e2:	462b      	mov	r3, r5
 80122e4:	2200      	movs	r2, #0
 80122e6:	9904      	ldr	r1, [sp, #16]
 80122e8:	428b      	cmp	r3, r1
 80122ea:	da6a      	bge.n	80123c2 <__kernel_rem_pio2+0x352>
 80122ec:	2a00      	cmp	r2, #0
 80122ee:	f000 8088 	beq.w	8012402 <__kernel_rem_pio2+0x392>
 80122f2:	ab0e      	add	r3, sp, #56	; 0x38
 80122f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80122f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 80b4 	beq.w	801246a <__kernel_rem_pio2+0x3fa>
 8012302:	4650      	mov	r0, sl
 8012304:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012390 <__kernel_rem_pio2+0x320>
 8012308:	f000 fb3e 	bl	8012988 <scalbn>
 801230c:	00ec      	lsls	r4, r5, #3
 801230e:	ab72      	add	r3, sp, #456	; 0x1c8
 8012310:	191e      	adds	r6, r3, r4
 8012312:	ec59 8b10 	vmov	r8, r9, d0
 8012316:	f106 0a08 	add.w	sl, r6, #8
 801231a:	462f      	mov	r7, r5
 801231c:	2f00      	cmp	r7, #0
 801231e:	f280 80df 	bge.w	80124e0 <__kernel_rem_pio2+0x470>
 8012322:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012388 <__kernel_rem_pio2+0x318>
 8012326:	f04f 0a00 	mov.w	sl, #0
 801232a:	eba5 030a 	sub.w	r3, r5, sl
 801232e:	2b00      	cmp	r3, #0
 8012330:	f2c0 810a 	blt.w	8012548 <__kernel_rem_pio2+0x4d8>
 8012334:	f8df b078 	ldr.w	fp, [pc, #120]	; 80123b0 <__kernel_rem_pio2+0x340>
 8012338:	ec59 8b18 	vmov	r8, r9, d8
 801233c:	2700      	movs	r7, #0
 801233e:	e0f5      	b.n	801252c <__kernel_rem_pio2+0x4bc>
 8012340:	2302      	movs	r3, #2
 8012342:	9302      	str	r3, [sp, #8]
 8012344:	e760      	b.n	8012208 <__kernel_rem_pio2+0x198>
 8012346:	ab0e      	add	r3, sp, #56	; 0x38
 8012348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801234c:	b94d      	cbnz	r5, 8012362 <__kernel_rem_pio2+0x2f2>
 801234e:	b12b      	cbz	r3, 801235c <__kernel_rem_pio2+0x2ec>
 8012350:	a80e      	add	r0, sp, #56	; 0x38
 8012352:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012356:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801235a:	2301      	movs	r3, #1
 801235c:	3201      	adds	r2, #1
 801235e:	461d      	mov	r5, r3
 8012360:	e759      	b.n	8012216 <__kernel_rem_pio2+0x1a6>
 8012362:	a80e      	add	r0, sp, #56	; 0x38
 8012364:	1acb      	subs	r3, r1, r3
 8012366:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801236a:	462b      	mov	r3, r5
 801236c:	e7f6      	b.n	801235c <__kernel_rem_pio2+0x2ec>
 801236e:	1e62      	subs	r2, r4, #1
 8012370:	ab0e      	add	r3, sp, #56	; 0x38
 8012372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012376:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801237a:	a90e      	add	r1, sp, #56	; 0x38
 801237c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012380:	e757      	b.n	8012232 <__kernel_rem_pio2+0x1c2>
 8012382:	bf00      	nop
 8012384:	f3af 8000 	nop.w
	...
 8012394:	3ff00000 	.word	0x3ff00000
 8012398:	08018190 	.word	0x08018190
 801239c:	40200000 	.word	0x40200000
 80123a0:	3ff00000 	.word	0x3ff00000
 80123a4:	3e700000 	.word	0x3e700000
 80123a8:	41700000 	.word	0x41700000
 80123ac:	3fe00000 	.word	0x3fe00000
 80123b0:	08018150 	.word	0x08018150
 80123b4:	1e62      	subs	r2, r4, #1
 80123b6:	ab0e      	add	r3, sp, #56	; 0x38
 80123b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123bc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80123c0:	e7db      	b.n	801237a <__kernel_rem_pio2+0x30a>
 80123c2:	a90e      	add	r1, sp, #56	; 0x38
 80123c4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80123c8:	3b01      	subs	r3, #1
 80123ca:	430a      	orrs	r2, r1
 80123cc:	e78b      	b.n	80122e6 <__kernel_rem_pio2+0x276>
 80123ce:	3301      	adds	r3, #1
 80123d0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80123d4:	2900      	cmp	r1, #0
 80123d6:	d0fa      	beq.n	80123ce <__kernel_rem_pio2+0x35e>
 80123d8:	9a08      	ldr	r2, [sp, #32]
 80123da:	4422      	add	r2, r4
 80123dc:	00d2      	lsls	r2, r2, #3
 80123de:	a922      	add	r1, sp, #136	; 0x88
 80123e0:	18e3      	adds	r3, r4, r3
 80123e2:	9206      	str	r2, [sp, #24]
 80123e4:	440a      	add	r2, r1
 80123e6:	9302      	str	r3, [sp, #8]
 80123e8:	f10b 0108 	add.w	r1, fp, #8
 80123ec:	f102 0308 	add.w	r3, r2, #8
 80123f0:	1c66      	adds	r6, r4, #1
 80123f2:	910a      	str	r1, [sp, #40]	; 0x28
 80123f4:	2500      	movs	r5, #0
 80123f6:	930d      	str	r3, [sp, #52]	; 0x34
 80123f8:	9b02      	ldr	r3, [sp, #8]
 80123fa:	42b3      	cmp	r3, r6
 80123fc:	da04      	bge.n	8012408 <__kernel_rem_pio2+0x398>
 80123fe:	461c      	mov	r4, r3
 8012400:	e6a6      	b.n	8012150 <__kernel_rem_pio2+0xe0>
 8012402:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012404:	2301      	movs	r3, #1
 8012406:	e7e3      	b.n	80123d0 <__kernel_rem_pio2+0x360>
 8012408:	9b06      	ldr	r3, [sp, #24]
 801240a:	18ef      	adds	r7, r5, r3
 801240c:	ab22      	add	r3, sp, #136	; 0x88
 801240e:	441f      	add	r7, r3
 8012410:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012412:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012416:	f7ee f89d 	bl	8000554 <__aeabi_i2d>
 801241a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801241c:	461c      	mov	r4, r3
 801241e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012420:	e9c7 0100 	strd	r0, r1, [r7]
 8012424:	eb03 0b05 	add.w	fp, r3, r5
 8012428:	2700      	movs	r7, #0
 801242a:	f04f 0800 	mov.w	r8, #0
 801242e:	f04f 0900 	mov.w	r9, #0
 8012432:	9b07      	ldr	r3, [sp, #28]
 8012434:	429f      	cmp	r7, r3
 8012436:	dd08      	ble.n	801244a <__kernel_rem_pio2+0x3da>
 8012438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801243a:	aa72      	add	r2, sp, #456	; 0x1c8
 801243c:	18eb      	adds	r3, r5, r3
 801243e:	4413      	add	r3, r2
 8012440:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012444:	3601      	adds	r6, #1
 8012446:	3508      	adds	r5, #8
 8012448:	e7d6      	b.n	80123f8 <__kernel_rem_pio2+0x388>
 801244a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801244e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012452:	f7ee f8e9 	bl	8000628 <__aeabi_dmul>
 8012456:	4602      	mov	r2, r0
 8012458:	460b      	mov	r3, r1
 801245a:	4640      	mov	r0, r8
 801245c:	4649      	mov	r1, r9
 801245e:	f7ed ff2d 	bl	80002bc <__adddf3>
 8012462:	3701      	adds	r7, #1
 8012464:	4680      	mov	r8, r0
 8012466:	4689      	mov	r9, r1
 8012468:	e7e3      	b.n	8012432 <__kernel_rem_pio2+0x3c2>
 801246a:	3d01      	subs	r5, #1
 801246c:	e741      	b.n	80122f2 <__kernel_rem_pio2+0x282>
 801246e:	f1ca 0000 	rsb	r0, sl, #0
 8012472:	ec47 6b10 	vmov	d0, r6, r7
 8012476:	f000 fa87 	bl	8012988 <scalbn>
 801247a:	ec57 6b10 	vmov	r6, r7, d0
 801247e:	2200      	movs	r2, #0
 8012480:	4b99      	ldr	r3, [pc, #612]	; (80126e8 <__kernel_rem_pio2+0x678>)
 8012482:	ee10 0a10 	vmov	r0, s0
 8012486:	4639      	mov	r1, r7
 8012488:	f7ee fb54 	bl	8000b34 <__aeabi_dcmpge>
 801248c:	b1f8      	cbz	r0, 80124ce <__kernel_rem_pio2+0x45e>
 801248e:	2200      	movs	r2, #0
 8012490:	4b96      	ldr	r3, [pc, #600]	; (80126ec <__kernel_rem_pio2+0x67c>)
 8012492:	4630      	mov	r0, r6
 8012494:	4639      	mov	r1, r7
 8012496:	f7ee f8c7 	bl	8000628 <__aeabi_dmul>
 801249a:	f7ee fb75 	bl	8000b88 <__aeabi_d2iz>
 801249e:	4680      	mov	r8, r0
 80124a0:	f7ee f858 	bl	8000554 <__aeabi_i2d>
 80124a4:	2200      	movs	r2, #0
 80124a6:	4b90      	ldr	r3, [pc, #576]	; (80126e8 <__kernel_rem_pio2+0x678>)
 80124a8:	f7ee f8be 	bl	8000628 <__aeabi_dmul>
 80124ac:	460b      	mov	r3, r1
 80124ae:	4602      	mov	r2, r0
 80124b0:	4639      	mov	r1, r7
 80124b2:	4630      	mov	r0, r6
 80124b4:	f7ed ff00 	bl	80002b8 <__aeabi_dsub>
 80124b8:	f7ee fb66 	bl	8000b88 <__aeabi_d2iz>
 80124bc:	1c65      	adds	r5, r4, #1
 80124be:	ab0e      	add	r3, sp, #56	; 0x38
 80124c0:	f10a 0a18 	add.w	sl, sl, #24
 80124c4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80124c8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80124cc:	e719      	b.n	8012302 <__kernel_rem_pio2+0x292>
 80124ce:	4630      	mov	r0, r6
 80124d0:	4639      	mov	r1, r7
 80124d2:	f7ee fb59 	bl	8000b88 <__aeabi_d2iz>
 80124d6:	ab0e      	add	r3, sp, #56	; 0x38
 80124d8:	4625      	mov	r5, r4
 80124da:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80124de:	e710      	b.n	8012302 <__kernel_rem_pio2+0x292>
 80124e0:	ab0e      	add	r3, sp, #56	; 0x38
 80124e2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80124e6:	f7ee f835 	bl	8000554 <__aeabi_i2d>
 80124ea:	4642      	mov	r2, r8
 80124ec:	464b      	mov	r3, r9
 80124ee:	f7ee f89b 	bl	8000628 <__aeabi_dmul>
 80124f2:	2200      	movs	r2, #0
 80124f4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80124f8:	4b7c      	ldr	r3, [pc, #496]	; (80126ec <__kernel_rem_pio2+0x67c>)
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	f7ee f893 	bl	8000628 <__aeabi_dmul>
 8012502:	3f01      	subs	r7, #1
 8012504:	4680      	mov	r8, r0
 8012506:	4689      	mov	r9, r1
 8012508:	e708      	b.n	801231c <__kernel_rem_pio2+0x2ac>
 801250a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012516:	f7ee f887 	bl	8000628 <__aeabi_dmul>
 801251a:	4602      	mov	r2, r0
 801251c:	460b      	mov	r3, r1
 801251e:	4640      	mov	r0, r8
 8012520:	4649      	mov	r1, r9
 8012522:	f7ed fecb 	bl	80002bc <__adddf3>
 8012526:	3701      	adds	r7, #1
 8012528:	4680      	mov	r8, r0
 801252a:	4689      	mov	r9, r1
 801252c:	9b04      	ldr	r3, [sp, #16]
 801252e:	429f      	cmp	r7, r3
 8012530:	dc01      	bgt.n	8012536 <__kernel_rem_pio2+0x4c6>
 8012532:	45ba      	cmp	sl, r7
 8012534:	dae9      	bge.n	801250a <__kernel_rem_pio2+0x49a>
 8012536:	ab4a      	add	r3, sp, #296	; 0x128
 8012538:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801253c:	e9c3 8900 	strd	r8, r9, [r3]
 8012540:	f10a 0a01 	add.w	sl, sl, #1
 8012544:	3e08      	subs	r6, #8
 8012546:	e6f0      	b.n	801232a <__kernel_rem_pio2+0x2ba>
 8012548:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801254a:	2b03      	cmp	r3, #3
 801254c:	d85b      	bhi.n	8012606 <__kernel_rem_pio2+0x596>
 801254e:	e8df f003 	tbb	[pc, r3]
 8012552:	264a      	.short	0x264a
 8012554:	0226      	.short	0x0226
 8012556:	ab9a      	add	r3, sp, #616	; 0x268
 8012558:	441c      	add	r4, r3
 801255a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801255e:	46a2      	mov	sl, r4
 8012560:	46ab      	mov	fp, r5
 8012562:	f1bb 0f00 	cmp.w	fp, #0
 8012566:	dc6c      	bgt.n	8012642 <__kernel_rem_pio2+0x5d2>
 8012568:	46a2      	mov	sl, r4
 801256a:	46ab      	mov	fp, r5
 801256c:	f1bb 0f01 	cmp.w	fp, #1
 8012570:	f300 8086 	bgt.w	8012680 <__kernel_rem_pio2+0x610>
 8012574:	2000      	movs	r0, #0
 8012576:	2100      	movs	r1, #0
 8012578:	2d01      	cmp	r5, #1
 801257a:	f300 80a0 	bgt.w	80126be <__kernel_rem_pio2+0x64e>
 801257e:	9b02      	ldr	r3, [sp, #8]
 8012580:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012584:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012588:	2b00      	cmp	r3, #0
 801258a:	f040 809e 	bne.w	80126ca <__kernel_rem_pio2+0x65a>
 801258e:	9b01      	ldr	r3, [sp, #4]
 8012590:	e9c3 7800 	strd	r7, r8, [r3]
 8012594:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012598:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801259c:	e033      	b.n	8012606 <__kernel_rem_pio2+0x596>
 801259e:	3408      	adds	r4, #8
 80125a0:	ab4a      	add	r3, sp, #296	; 0x128
 80125a2:	441c      	add	r4, r3
 80125a4:	462e      	mov	r6, r5
 80125a6:	2000      	movs	r0, #0
 80125a8:	2100      	movs	r1, #0
 80125aa:	2e00      	cmp	r6, #0
 80125ac:	da3a      	bge.n	8012624 <__kernel_rem_pio2+0x5b4>
 80125ae:	9b02      	ldr	r3, [sp, #8]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d03d      	beq.n	8012630 <__kernel_rem_pio2+0x5c0>
 80125b4:	4602      	mov	r2, r0
 80125b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125ba:	9c01      	ldr	r4, [sp, #4]
 80125bc:	e9c4 2300 	strd	r2, r3, [r4]
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80125c8:	f7ed fe76 	bl	80002b8 <__aeabi_dsub>
 80125cc:	ae4c      	add	r6, sp, #304	; 0x130
 80125ce:	2401      	movs	r4, #1
 80125d0:	42a5      	cmp	r5, r4
 80125d2:	da30      	bge.n	8012636 <__kernel_rem_pio2+0x5c6>
 80125d4:	9b02      	ldr	r3, [sp, #8]
 80125d6:	b113      	cbz	r3, 80125de <__kernel_rem_pio2+0x56e>
 80125d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125dc:	4619      	mov	r1, r3
 80125de:	9b01      	ldr	r3, [sp, #4]
 80125e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80125e4:	e00f      	b.n	8012606 <__kernel_rem_pio2+0x596>
 80125e6:	ab9a      	add	r3, sp, #616	; 0x268
 80125e8:	441c      	add	r4, r3
 80125ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80125ee:	2000      	movs	r0, #0
 80125f0:	2100      	movs	r1, #0
 80125f2:	2d00      	cmp	r5, #0
 80125f4:	da10      	bge.n	8012618 <__kernel_rem_pio2+0x5a8>
 80125f6:	9b02      	ldr	r3, [sp, #8]
 80125f8:	b113      	cbz	r3, 8012600 <__kernel_rem_pio2+0x590>
 80125fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125fe:	4619      	mov	r1, r3
 8012600:	9b01      	ldr	r3, [sp, #4]
 8012602:	e9c3 0100 	strd	r0, r1, [r3]
 8012606:	9b06      	ldr	r3, [sp, #24]
 8012608:	f003 0007 	and.w	r0, r3, #7
 801260c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012610:	ecbd 8b02 	vpop	{d8}
 8012614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012618:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801261c:	f7ed fe4e 	bl	80002bc <__adddf3>
 8012620:	3d01      	subs	r5, #1
 8012622:	e7e6      	b.n	80125f2 <__kernel_rem_pio2+0x582>
 8012624:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012628:	f7ed fe48 	bl	80002bc <__adddf3>
 801262c:	3e01      	subs	r6, #1
 801262e:	e7bc      	b.n	80125aa <__kernel_rem_pio2+0x53a>
 8012630:	4602      	mov	r2, r0
 8012632:	460b      	mov	r3, r1
 8012634:	e7c1      	b.n	80125ba <__kernel_rem_pio2+0x54a>
 8012636:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801263a:	f7ed fe3f 	bl	80002bc <__adddf3>
 801263e:	3401      	adds	r4, #1
 8012640:	e7c6      	b.n	80125d0 <__kernel_rem_pio2+0x560>
 8012642:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012646:	ed3a 7b02 	vldmdb	sl!, {d7}
 801264a:	4640      	mov	r0, r8
 801264c:	ec53 2b17 	vmov	r2, r3, d7
 8012650:	4649      	mov	r1, r9
 8012652:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012656:	f7ed fe31 	bl	80002bc <__adddf3>
 801265a:	4602      	mov	r2, r0
 801265c:	460b      	mov	r3, r1
 801265e:	4606      	mov	r6, r0
 8012660:	460f      	mov	r7, r1
 8012662:	4640      	mov	r0, r8
 8012664:	4649      	mov	r1, r9
 8012666:	f7ed fe27 	bl	80002b8 <__aeabi_dsub>
 801266a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801266e:	f7ed fe25 	bl	80002bc <__adddf3>
 8012672:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012676:	e9ca 0100 	strd	r0, r1, [sl]
 801267a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801267e:	e770      	b.n	8012562 <__kernel_rem_pio2+0x4f2>
 8012680:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012684:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012688:	4630      	mov	r0, r6
 801268a:	ec53 2b17 	vmov	r2, r3, d7
 801268e:	4639      	mov	r1, r7
 8012690:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012694:	f7ed fe12 	bl	80002bc <__adddf3>
 8012698:	4602      	mov	r2, r0
 801269a:	460b      	mov	r3, r1
 801269c:	4680      	mov	r8, r0
 801269e:	4689      	mov	r9, r1
 80126a0:	4630      	mov	r0, r6
 80126a2:	4639      	mov	r1, r7
 80126a4:	f7ed fe08 	bl	80002b8 <__aeabi_dsub>
 80126a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126ac:	f7ed fe06 	bl	80002bc <__adddf3>
 80126b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126b4:	e9ca 0100 	strd	r0, r1, [sl]
 80126b8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80126bc:	e756      	b.n	801256c <__kernel_rem_pio2+0x4fc>
 80126be:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126c2:	f7ed fdfb 	bl	80002bc <__adddf3>
 80126c6:	3d01      	subs	r5, #1
 80126c8:	e756      	b.n	8012578 <__kernel_rem_pio2+0x508>
 80126ca:	9b01      	ldr	r3, [sp, #4]
 80126cc:	9a01      	ldr	r2, [sp, #4]
 80126ce:	601f      	str	r7, [r3, #0]
 80126d0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80126d4:	605c      	str	r4, [r3, #4]
 80126d6:	609d      	str	r5, [r3, #8]
 80126d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80126dc:	60d3      	str	r3, [r2, #12]
 80126de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126e2:	6110      	str	r0, [r2, #16]
 80126e4:	6153      	str	r3, [r2, #20]
 80126e6:	e78e      	b.n	8012606 <__kernel_rem_pio2+0x596>
 80126e8:	41700000 	.word	0x41700000
 80126ec:	3e700000 	.word	0x3e700000

080126f0 <__kernel_sin>:
 80126f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f4:	ec55 4b10 	vmov	r4, r5, d0
 80126f8:	b085      	sub	sp, #20
 80126fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80126fe:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012702:	ed8d 1b00 	vstr	d1, [sp]
 8012706:	9002      	str	r0, [sp, #8]
 8012708:	da06      	bge.n	8012718 <__kernel_sin+0x28>
 801270a:	ee10 0a10 	vmov	r0, s0
 801270e:	4629      	mov	r1, r5
 8012710:	f7ee fa3a 	bl	8000b88 <__aeabi_d2iz>
 8012714:	2800      	cmp	r0, #0
 8012716:	d051      	beq.n	80127bc <__kernel_sin+0xcc>
 8012718:	4622      	mov	r2, r4
 801271a:	462b      	mov	r3, r5
 801271c:	4620      	mov	r0, r4
 801271e:	4629      	mov	r1, r5
 8012720:	f7ed ff82 	bl	8000628 <__aeabi_dmul>
 8012724:	4682      	mov	sl, r0
 8012726:	468b      	mov	fp, r1
 8012728:	4602      	mov	r2, r0
 801272a:	460b      	mov	r3, r1
 801272c:	4620      	mov	r0, r4
 801272e:	4629      	mov	r1, r5
 8012730:	f7ed ff7a 	bl	8000628 <__aeabi_dmul>
 8012734:	a341      	add	r3, pc, #260	; (adr r3, 801283c <__kernel_sin+0x14c>)
 8012736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273a:	4680      	mov	r8, r0
 801273c:	4689      	mov	r9, r1
 801273e:	4650      	mov	r0, sl
 8012740:	4659      	mov	r1, fp
 8012742:	f7ed ff71 	bl	8000628 <__aeabi_dmul>
 8012746:	a33f      	add	r3, pc, #252	; (adr r3, 8012844 <__kernel_sin+0x154>)
 8012748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274c:	f7ed fdb4 	bl	80002b8 <__aeabi_dsub>
 8012750:	4652      	mov	r2, sl
 8012752:	465b      	mov	r3, fp
 8012754:	f7ed ff68 	bl	8000628 <__aeabi_dmul>
 8012758:	a33c      	add	r3, pc, #240	; (adr r3, 801284c <__kernel_sin+0x15c>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	f7ed fdad 	bl	80002bc <__adddf3>
 8012762:	4652      	mov	r2, sl
 8012764:	465b      	mov	r3, fp
 8012766:	f7ed ff5f 	bl	8000628 <__aeabi_dmul>
 801276a:	a33a      	add	r3, pc, #232	; (adr r3, 8012854 <__kernel_sin+0x164>)
 801276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012770:	f7ed fda2 	bl	80002b8 <__aeabi_dsub>
 8012774:	4652      	mov	r2, sl
 8012776:	465b      	mov	r3, fp
 8012778:	f7ed ff56 	bl	8000628 <__aeabi_dmul>
 801277c:	a337      	add	r3, pc, #220	; (adr r3, 801285c <__kernel_sin+0x16c>)
 801277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012782:	f7ed fd9b 	bl	80002bc <__adddf3>
 8012786:	9b02      	ldr	r3, [sp, #8]
 8012788:	4606      	mov	r6, r0
 801278a:	460f      	mov	r7, r1
 801278c:	b9db      	cbnz	r3, 80127c6 <__kernel_sin+0xd6>
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	4650      	mov	r0, sl
 8012794:	4659      	mov	r1, fp
 8012796:	f7ed ff47 	bl	8000628 <__aeabi_dmul>
 801279a:	a325      	add	r3, pc, #148	; (adr r3, 8012830 <__kernel_sin+0x140>)
 801279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a0:	f7ed fd8a 	bl	80002b8 <__aeabi_dsub>
 80127a4:	4642      	mov	r2, r8
 80127a6:	464b      	mov	r3, r9
 80127a8:	f7ed ff3e 	bl	8000628 <__aeabi_dmul>
 80127ac:	4602      	mov	r2, r0
 80127ae:	460b      	mov	r3, r1
 80127b0:	4620      	mov	r0, r4
 80127b2:	4629      	mov	r1, r5
 80127b4:	f7ed fd82 	bl	80002bc <__adddf3>
 80127b8:	4604      	mov	r4, r0
 80127ba:	460d      	mov	r5, r1
 80127bc:	ec45 4b10 	vmov	d0, r4, r5
 80127c0:	b005      	add	sp, #20
 80127c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127c6:	2200      	movs	r2, #0
 80127c8:	4b1b      	ldr	r3, [pc, #108]	; (8012838 <__kernel_sin+0x148>)
 80127ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127ce:	f7ed ff2b 	bl	8000628 <__aeabi_dmul>
 80127d2:	4632      	mov	r2, r6
 80127d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127d8:	463b      	mov	r3, r7
 80127da:	4640      	mov	r0, r8
 80127dc:	4649      	mov	r1, r9
 80127de:	f7ed ff23 	bl	8000628 <__aeabi_dmul>
 80127e2:	4602      	mov	r2, r0
 80127e4:	460b      	mov	r3, r1
 80127e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ea:	f7ed fd65 	bl	80002b8 <__aeabi_dsub>
 80127ee:	4652      	mov	r2, sl
 80127f0:	465b      	mov	r3, fp
 80127f2:	f7ed ff19 	bl	8000628 <__aeabi_dmul>
 80127f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127fa:	f7ed fd5d 	bl	80002b8 <__aeabi_dsub>
 80127fe:	a30c      	add	r3, pc, #48	; (adr r3, 8012830 <__kernel_sin+0x140>)
 8012800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012804:	4606      	mov	r6, r0
 8012806:	460f      	mov	r7, r1
 8012808:	4640      	mov	r0, r8
 801280a:	4649      	mov	r1, r9
 801280c:	f7ed ff0c 	bl	8000628 <__aeabi_dmul>
 8012810:	4602      	mov	r2, r0
 8012812:	460b      	mov	r3, r1
 8012814:	4630      	mov	r0, r6
 8012816:	4639      	mov	r1, r7
 8012818:	f7ed fd50 	bl	80002bc <__adddf3>
 801281c:	4602      	mov	r2, r0
 801281e:	460b      	mov	r3, r1
 8012820:	4620      	mov	r0, r4
 8012822:	4629      	mov	r1, r5
 8012824:	f7ed fd48 	bl	80002b8 <__aeabi_dsub>
 8012828:	e7c6      	b.n	80127b8 <__kernel_sin+0xc8>
 801282a:	bf00      	nop
 801282c:	f3af 8000 	nop.w
 8012830:	55555549 	.word	0x55555549
 8012834:	3fc55555 	.word	0x3fc55555
 8012838:	3fe00000 	.word	0x3fe00000
 801283c:	5acfd57c 	.word	0x5acfd57c
 8012840:	3de5d93a 	.word	0x3de5d93a
 8012844:	8a2b9ceb 	.word	0x8a2b9ceb
 8012848:	3e5ae5e6 	.word	0x3e5ae5e6
 801284c:	57b1fe7d 	.word	0x57b1fe7d
 8012850:	3ec71de3 	.word	0x3ec71de3
 8012854:	19c161d5 	.word	0x19c161d5
 8012858:	3f2a01a0 	.word	0x3f2a01a0
 801285c:	1110f8a6 	.word	0x1110f8a6
 8012860:	3f811111 	.word	0x3f811111

08012864 <fabs>:
 8012864:	ec51 0b10 	vmov	r0, r1, d0
 8012868:	ee10 2a10 	vmov	r2, s0
 801286c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012870:	ec43 2b10 	vmov	d0, r2, r3
 8012874:	4770      	bx	lr
	...

08012878 <floor>:
 8012878:	ec51 0b10 	vmov	r0, r1, d0
 801287c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012880:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012884:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012888:	2e13      	cmp	r6, #19
 801288a:	460c      	mov	r4, r1
 801288c:	ee10 5a10 	vmov	r5, s0
 8012890:	4680      	mov	r8, r0
 8012892:	dc34      	bgt.n	80128fe <floor+0x86>
 8012894:	2e00      	cmp	r6, #0
 8012896:	da16      	bge.n	80128c6 <floor+0x4e>
 8012898:	a335      	add	r3, pc, #212	; (adr r3, 8012970 <floor+0xf8>)
 801289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801289e:	f7ed fd0d 	bl	80002bc <__adddf3>
 80128a2:	2200      	movs	r2, #0
 80128a4:	2300      	movs	r3, #0
 80128a6:	f7ee f94f 	bl	8000b48 <__aeabi_dcmpgt>
 80128aa:	b148      	cbz	r0, 80128c0 <floor+0x48>
 80128ac:	2c00      	cmp	r4, #0
 80128ae:	da59      	bge.n	8012964 <floor+0xec>
 80128b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80128b4:	4a30      	ldr	r2, [pc, #192]	; (8012978 <floor+0x100>)
 80128b6:	432b      	orrs	r3, r5
 80128b8:	2500      	movs	r5, #0
 80128ba:	42ab      	cmp	r3, r5
 80128bc:	bf18      	it	ne
 80128be:	4614      	movne	r4, r2
 80128c0:	4621      	mov	r1, r4
 80128c2:	4628      	mov	r0, r5
 80128c4:	e025      	b.n	8012912 <floor+0x9a>
 80128c6:	4f2d      	ldr	r7, [pc, #180]	; (801297c <floor+0x104>)
 80128c8:	4137      	asrs	r7, r6
 80128ca:	ea01 0307 	and.w	r3, r1, r7
 80128ce:	4303      	orrs	r3, r0
 80128d0:	d01f      	beq.n	8012912 <floor+0x9a>
 80128d2:	a327      	add	r3, pc, #156	; (adr r3, 8012970 <floor+0xf8>)
 80128d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d8:	f7ed fcf0 	bl	80002bc <__adddf3>
 80128dc:	2200      	movs	r2, #0
 80128de:	2300      	movs	r3, #0
 80128e0:	f7ee f932 	bl	8000b48 <__aeabi_dcmpgt>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	d0eb      	beq.n	80128c0 <floor+0x48>
 80128e8:	2c00      	cmp	r4, #0
 80128ea:	bfbe      	ittt	lt
 80128ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80128f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80128f4:	19a4      	addlt	r4, r4, r6
 80128f6:	ea24 0407 	bic.w	r4, r4, r7
 80128fa:	2500      	movs	r5, #0
 80128fc:	e7e0      	b.n	80128c0 <floor+0x48>
 80128fe:	2e33      	cmp	r6, #51	; 0x33
 8012900:	dd0b      	ble.n	801291a <floor+0xa2>
 8012902:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012906:	d104      	bne.n	8012912 <floor+0x9a>
 8012908:	ee10 2a10 	vmov	r2, s0
 801290c:	460b      	mov	r3, r1
 801290e:	f7ed fcd5 	bl	80002bc <__adddf3>
 8012912:	ec41 0b10 	vmov	d0, r0, r1
 8012916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801291a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801291e:	f04f 33ff 	mov.w	r3, #4294967295
 8012922:	fa23 f707 	lsr.w	r7, r3, r7
 8012926:	4207      	tst	r7, r0
 8012928:	d0f3      	beq.n	8012912 <floor+0x9a>
 801292a:	a311      	add	r3, pc, #68	; (adr r3, 8012970 <floor+0xf8>)
 801292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012930:	f7ed fcc4 	bl	80002bc <__adddf3>
 8012934:	2200      	movs	r2, #0
 8012936:	2300      	movs	r3, #0
 8012938:	f7ee f906 	bl	8000b48 <__aeabi_dcmpgt>
 801293c:	2800      	cmp	r0, #0
 801293e:	d0bf      	beq.n	80128c0 <floor+0x48>
 8012940:	2c00      	cmp	r4, #0
 8012942:	da02      	bge.n	801294a <floor+0xd2>
 8012944:	2e14      	cmp	r6, #20
 8012946:	d103      	bne.n	8012950 <floor+0xd8>
 8012948:	3401      	adds	r4, #1
 801294a:	ea25 0507 	bic.w	r5, r5, r7
 801294e:	e7b7      	b.n	80128c0 <floor+0x48>
 8012950:	2301      	movs	r3, #1
 8012952:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012956:	fa03 f606 	lsl.w	r6, r3, r6
 801295a:	4435      	add	r5, r6
 801295c:	4545      	cmp	r5, r8
 801295e:	bf38      	it	cc
 8012960:	18e4      	addcc	r4, r4, r3
 8012962:	e7f2      	b.n	801294a <floor+0xd2>
 8012964:	2500      	movs	r5, #0
 8012966:	462c      	mov	r4, r5
 8012968:	e7aa      	b.n	80128c0 <floor+0x48>
 801296a:	bf00      	nop
 801296c:	f3af 8000 	nop.w
 8012970:	8800759c 	.word	0x8800759c
 8012974:	7e37e43c 	.word	0x7e37e43c
 8012978:	bff00000 	.word	0xbff00000
 801297c:	000fffff 	.word	0x000fffff

08012980 <matherr>:
 8012980:	2000      	movs	r0, #0
 8012982:	4770      	bx	lr
 8012984:	0000      	movs	r0, r0
	...

08012988 <scalbn>:
 8012988:	b570      	push	{r4, r5, r6, lr}
 801298a:	ec55 4b10 	vmov	r4, r5, d0
 801298e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012992:	4606      	mov	r6, r0
 8012994:	462b      	mov	r3, r5
 8012996:	b9aa      	cbnz	r2, 80129c4 <scalbn+0x3c>
 8012998:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801299c:	4323      	orrs	r3, r4
 801299e:	d03b      	beq.n	8012a18 <scalbn+0x90>
 80129a0:	4b31      	ldr	r3, [pc, #196]	; (8012a68 <scalbn+0xe0>)
 80129a2:	4629      	mov	r1, r5
 80129a4:	2200      	movs	r2, #0
 80129a6:	ee10 0a10 	vmov	r0, s0
 80129aa:	f7ed fe3d 	bl	8000628 <__aeabi_dmul>
 80129ae:	4b2f      	ldr	r3, [pc, #188]	; (8012a6c <scalbn+0xe4>)
 80129b0:	429e      	cmp	r6, r3
 80129b2:	4604      	mov	r4, r0
 80129b4:	460d      	mov	r5, r1
 80129b6:	da12      	bge.n	80129de <scalbn+0x56>
 80129b8:	a327      	add	r3, pc, #156	; (adr r3, 8012a58 <scalbn+0xd0>)
 80129ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129be:	f7ed fe33 	bl	8000628 <__aeabi_dmul>
 80129c2:	e009      	b.n	80129d8 <scalbn+0x50>
 80129c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80129c8:	428a      	cmp	r2, r1
 80129ca:	d10c      	bne.n	80129e6 <scalbn+0x5e>
 80129cc:	ee10 2a10 	vmov	r2, s0
 80129d0:	4620      	mov	r0, r4
 80129d2:	4629      	mov	r1, r5
 80129d4:	f7ed fc72 	bl	80002bc <__adddf3>
 80129d8:	4604      	mov	r4, r0
 80129da:	460d      	mov	r5, r1
 80129dc:	e01c      	b.n	8012a18 <scalbn+0x90>
 80129de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80129e2:	460b      	mov	r3, r1
 80129e4:	3a36      	subs	r2, #54	; 0x36
 80129e6:	4432      	add	r2, r6
 80129e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80129ec:	428a      	cmp	r2, r1
 80129ee:	dd0b      	ble.n	8012a08 <scalbn+0x80>
 80129f0:	ec45 4b11 	vmov	d1, r4, r5
 80129f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012a60 <scalbn+0xd8>
 80129f8:	f000 f83c 	bl	8012a74 <copysign>
 80129fc:	a318      	add	r3, pc, #96	; (adr r3, 8012a60 <scalbn+0xd8>)
 80129fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a02:	ec51 0b10 	vmov	r0, r1, d0
 8012a06:	e7da      	b.n	80129be <scalbn+0x36>
 8012a08:	2a00      	cmp	r2, #0
 8012a0a:	dd08      	ble.n	8012a1e <scalbn+0x96>
 8012a0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012a18:	ec45 4b10 	vmov	d0, r4, r5
 8012a1c:	bd70      	pop	{r4, r5, r6, pc}
 8012a1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012a22:	da0d      	bge.n	8012a40 <scalbn+0xb8>
 8012a24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012a28:	429e      	cmp	r6, r3
 8012a2a:	ec45 4b11 	vmov	d1, r4, r5
 8012a2e:	dce1      	bgt.n	80129f4 <scalbn+0x6c>
 8012a30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012a58 <scalbn+0xd0>
 8012a34:	f000 f81e 	bl	8012a74 <copysign>
 8012a38:	a307      	add	r3, pc, #28	; (adr r3, 8012a58 <scalbn+0xd0>)
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	e7e0      	b.n	8012a02 <scalbn+0x7a>
 8012a40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012a44:	3236      	adds	r2, #54	; 0x36
 8012a46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012a4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012a4e:	4620      	mov	r0, r4
 8012a50:	4629      	mov	r1, r5
 8012a52:	2200      	movs	r2, #0
 8012a54:	4b06      	ldr	r3, [pc, #24]	; (8012a70 <scalbn+0xe8>)
 8012a56:	e7b2      	b.n	80129be <scalbn+0x36>
 8012a58:	c2f8f359 	.word	0xc2f8f359
 8012a5c:	01a56e1f 	.word	0x01a56e1f
 8012a60:	8800759c 	.word	0x8800759c
 8012a64:	7e37e43c 	.word	0x7e37e43c
 8012a68:	43500000 	.word	0x43500000
 8012a6c:	ffff3cb0 	.word	0xffff3cb0
 8012a70:	3c900000 	.word	0x3c900000

08012a74 <copysign>:
 8012a74:	ec51 0b10 	vmov	r0, r1, d0
 8012a78:	ee11 0a90 	vmov	r0, s3
 8012a7c:	ee10 2a10 	vmov	r2, s0
 8012a80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012a84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012a88:	ea41 0300 	orr.w	r3, r1, r0
 8012a8c:	ec43 2b10 	vmov	d0, r2, r3
 8012a90:	4770      	bx	lr
	...

08012a94 <__errno>:
 8012a94:	4b01      	ldr	r3, [pc, #4]	; (8012a9c <__errno+0x8>)
 8012a96:	6818      	ldr	r0, [r3, #0]
 8012a98:	4770      	bx	lr
 8012a9a:	bf00      	nop
 8012a9c:	2000000c 	.word	0x2000000c

08012aa0 <__libc_init_array>:
 8012aa0:	b570      	push	{r4, r5, r6, lr}
 8012aa2:	4e0d      	ldr	r6, [pc, #52]	; (8012ad8 <__libc_init_array+0x38>)
 8012aa4:	4c0d      	ldr	r4, [pc, #52]	; (8012adc <__libc_init_array+0x3c>)
 8012aa6:	1ba4      	subs	r4, r4, r6
 8012aa8:	10a4      	asrs	r4, r4, #2
 8012aaa:	2500      	movs	r5, #0
 8012aac:	42a5      	cmp	r5, r4
 8012aae:	d109      	bne.n	8012ac4 <__libc_init_array+0x24>
 8012ab0:	4e0b      	ldr	r6, [pc, #44]	; (8012ae0 <__libc_init_array+0x40>)
 8012ab2:	4c0c      	ldr	r4, [pc, #48]	; (8012ae4 <__libc_init_array+0x44>)
 8012ab4:	f004 ff36 	bl	8017924 <_init>
 8012ab8:	1ba4      	subs	r4, r4, r6
 8012aba:	10a4      	asrs	r4, r4, #2
 8012abc:	2500      	movs	r5, #0
 8012abe:	42a5      	cmp	r5, r4
 8012ac0:	d105      	bne.n	8012ace <__libc_init_array+0x2e>
 8012ac2:	bd70      	pop	{r4, r5, r6, pc}
 8012ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ac8:	4798      	blx	r3
 8012aca:	3501      	adds	r5, #1
 8012acc:	e7ee      	b.n	8012aac <__libc_init_array+0xc>
 8012ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ad2:	4798      	blx	r3
 8012ad4:	3501      	adds	r5, #1
 8012ad6:	e7f2      	b.n	8012abe <__libc_init_array+0x1e>
 8012ad8:	080184e4 	.word	0x080184e4
 8012adc:	080184e4 	.word	0x080184e4
 8012ae0:	080184e4 	.word	0x080184e4
 8012ae4:	080184ec 	.word	0x080184ec

08012ae8 <memset>:
 8012ae8:	4402      	add	r2, r0
 8012aea:	4603      	mov	r3, r0
 8012aec:	4293      	cmp	r3, r2
 8012aee:	d100      	bne.n	8012af2 <memset+0xa>
 8012af0:	4770      	bx	lr
 8012af2:	f803 1b01 	strb.w	r1, [r3], #1
 8012af6:	e7f9      	b.n	8012aec <memset+0x4>

08012af8 <__cvt>:
 8012af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012afc:	ec55 4b10 	vmov	r4, r5, d0
 8012b00:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012b02:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012b06:	2d00      	cmp	r5, #0
 8012b08:	460e      	mov	r6, r1
 8012b0a:	4691      	mov	r9, r2
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	bfb8      	it	lt
 8012b10:	4622      	movlt	r2, r4
 8012b12:	462b      	mov	r3, r5
 8012b14:	f027 0720 	bic.w	r7, r7, #32
 8012b18:	bfbb      	ittet	lt
 8012b1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012b1e:	461d      	movlt	r5, r3
 8012b20:	2300      	movge	r3, #0
 8012b22:	232d      	movlt	r3, #45	; 0x2d
 8012b24:	bfb8      	it	lt
 8012b26:	4614      	movlt	r4, r2
 8012b28:	2f46      	cmp	r7, #70	; 0x46
 8012b2a:	700b      	strb	r3, [r1, #0]
 8012b2c:	d004      	beq.n	8012b38 <__cvt+0x40>
 8012b2e:	2f45      	cmp	r7, #69	; 0x45
 8012b30:	d100      	bne.n	8012b34 <__cvt+0x3c>
 8012b32:	3601      	adds	r6, #1
 8012b34:	2102      	movs	r1, #2
 8012b36:	e000      	b.n	8012b3a <__cvt+0x42>
 8012b38:	2103      	movs	r1, #3
 8012b3a:	ab03      	add	r3, sp, #12
 8012b3c:	9301      	str	r3, [sp, #4]
 8012b3e:	ab02      	add	r3, sp, #8
 8012b40:	9300      	str	r3, [sp, #0]
 8012b42:	4632      	mov	r2, r6
 8012b44:	4653      	mov	r3, sl
 8012b46:	ec45 4b10 	vmov	d0, r4, r5
 8012b4a:	f001 ffb1 	bl	8014ab0 <_dtoa_r>
 8012b4e:	2f47      	cmp	r7, #71	; 0x47
 8012b50:	4680      	mov	r8, r0
 8012b52:	d102      	bne.n	8012b5a <__cvt+0x62>
 8012b54:	f019 0f01 	tst.w	r9, #1
 8012b58:	d026      	beq.n	8012ba8 <__cvt+0xb0>
 8012b5a:	2f46      	cmp	r7, #70	; 0x46
 8012b5c:	eb08 0906 	add.w	r9, r8, r6
 8012b60:	d111      	bne.n	8012b86 <__cvt+0x8e>
 8012b62:	f898 3000 	ldrb.w	r3, [r8]
 8012b66:	2b30      	cmp	r3, #48	; 0x30
 8012b68:	d10a      	bne.n	8012b80 <__cvt+0x88>
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	4620      	mov	r0, r4
 8012b70:	4629      	mov	r1, r5
 8012b72:	f7ed ffc1 	bl	8000af8 <__aeabi_dcmpeq>
 8012b76:	b918      	cbnz	r0, 8012b80 <__cvt+0x88>
 8012b78:	f1c6 0601 	rsb	r6, r6, #1
 8012b7c:	f8ca 6000 	str.w	r6, [sl]
 8012b80:	f8da 3000 	ldr.w	r3, [sl]
 8012b84:	4499      	add	r9, r3
 8012b86:	2200      	movs	r2, #0
 8012b88:	2300      	movs	r3, #0
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	4629      	mov	r1, r5
 8012b8e:	f7ed ffb3 	bl	8000af8 <__aeabi_dcmpeq>
 8012b92:	b938      	cbnz	r0, 8012ba4 <__cvt+0xac>
 8012b94:	2230      	movs	r2, #48	; 0x30
 8012b96:	9b03      	ldr	r3, [sp, #12]
 8012b98:	454b      	cmp	r3, r9
 8012b9a:	d205      	bcs.n	8012ba8 <__cvt+0xb0>
 8012b9c:	1c59      	adds	r1, r3, #1
 8012b9e:	9103      	str	r1, [sp, #12]
 8012ba0:	701a      	strb	r2, [r3, #0]
 8012ba2:	e7f8      	b.n	8012b96 <__cvt+0x9e>
 8012ba4:	f8cd 900c 	str.w	r9, [sp, #12]
 8012ba8:	9b03      	ldr	r3, [sp, #12]
 8012baa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012bac:	eba3 0308 	sub.w	r3, r3, r8
 8012bb0:	4640      	mov	r0, r8
 8012bb2:	6013      	str	r3, [r2, #0]
 8012bb4:	b004      	add	sp, #16
 8012bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012bba <__exponent>:
 8012bba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012bbc:	2900      	cmp	r1, #0
 8012bbe:	4604      	mov	r4, r0
 8012bc0:	bfba      	itte	lt
 8012bc2:	4249      	neglt	r1, r1
 8012bc4:	232d      	movlt	r3, #45	; 0x2d
 8012bc6:	232b      	movge	r3, #43	; 0x2b
 8012bc8:	2909      	cmp	r1, #9
 8012bca:	f804 2b02 	strb.w	r2, [r4], #2
 8012bce:	7043      	strb	r3, [r0, #1]
 8012bd0:	dd20      	ble.n	8012c14 <__exponent+0x5a>
 8012bd2:	f10d 0307 	add.w	r3, sp, #7
 8012bd6:	461f      	mov	r7, r3
 8012bd8:	260a      	movs	r6, #10
 8012bda:	fb91 f5f6 	sdiv	r5, r1, r6
 8012bde:	fb06 1115 	mls	r1, r6, r5, r1
 8012be2:	3130      	adds	r1, #48	; 0x30
 8012be4:	2d09      	cmp	r5, #9
 8012be6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012bea:	f103 32ff 	add.w	r2, r3, #4294967295
 8012bee:	4629      	mov	r1, r5
 8012bf0:	dc09      	bgt.n	8012c06 <__exponent+0x4c>
 8012bf2:	3130      	adds	r1, #48	; 0x30
 8012bf4:	3b02      	subs	r3, #2
 8012bf6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012bfa:	42bb      	cmp	r3, r7
 8012bfc:	4622      	mov	r2, r4
 8012bfe:	d304      	bcc.n	8012c0a <__exponent+0x50>
 8012c00:	1a10      	subs	r0, r2, r0
 8012c02:	b003      	add	sp, #12
 8012c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c06:	4613      	mov	r3, r2
 8012c08:	e7e7      	b.n	8012bda <__exponent+0x20>
 8012c0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c0e:	f804 2b01 	strb.w	r2, [r4], #1
 8012c12:	e7f2      	b.n	8012bfa <__exponent+0x40>
 8012c14:	2330      	movs	r3, #48	; 0x30
 8012c16:	4419      	add	r1, r3
 8012c18:	7083      	strb	r3, [r0, #2]
 8012c1a:	1d02      	adds	r2, r0, #4
 8012c1c:	70c1      	strb	r1, [r0, #3]
 8012c1e:	e7ef      	b.n	8012c00 <__exponent+0x46>

08012c20 <_printf_float>:
 8012c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	b08d      	sub	sp, #52	; 0x34
 8012c26:	460c      	mov	r4, r1
 8012c28:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012c2c:	4616      	mov	r6, r2
 8012c2e:	461f      	mov	r7, r3
 8012c30:	4605      	mov	r5, r0
 8012c32:	f003 f9a9 	bl	8015f88 <_localeconv_r>
 8012c36:	6803      	ldr	r3, [r0, #0]
 8012c38:	9304      	str	r3, [sp, #16]
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7ed fae0 	bl	8000200 <strlen>
 8012c40:	2300      	movs	r3, #0
 8012c42:	930a      	str	r3, [sp, #40]	; 0x28
 8012c44:	f8d8 3000 	ldr.w	r3, [r8]
 8012c48:	9005      	str	r0, [sp, #20]
 8012c4a:	3307      	adds	r3, #7
 8012c4c:	f023 0307 	bic.w	r3, r3, #7
 8012c50:	f103 0208 	add.w	r2, r3, #8
 8012c54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012c58:	f8d4 b000 	ldr.w	fp, [r4]
 8012c5c:	f8c8 2000 	str.w	r2, [r8]
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012c68:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012c6c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012c70:	9307      	str	r3, [sp, #28]
 8012c72:	f8cd 8018 	str.w	r8, [sp, #24]
 8012c76:	f04f 32ff 	mov.w	r2, #4294967295
 8012c7a:	4ba7      	ldr	r3, [pc, #668]	; (8012f18 <_printf_float+0x2f8>)
 8012c7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c80:	f7ed ff6c 	bl	8000b5c <__aeabi_dcmpun>
 8012c84:	bb70      	cbnz	r0, 8012ce4 <_printf_float+0xc4>
 8012c86:	f04f 32ff 	mov.w	r2, #4294967295
 8012c8a:	4ba3      	ldr	r3, [pc, #652]	; (8012f18 <_printf_float+0x2f8>)
 8012c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c90:	f7ed ff46 	bl	8000b20 <__aeabi_dcmple>
 8012c94:	bb30      	cbnz	r0, 8012ce4 <_printf_float+0xc4>
 8012c96:	2200      	movs	r2, #0
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4640      	mov	r0, r8
 8012c9c:	4649      	mov	r1, r9
 8012c9e:	f7ed ff35 	bl	8000b0c <__aeabi_dcmplt>
 8012ca2:	b110      	cbz	r0, 8012caa <_printf_float+0x8a>
 8012ca4:	232d      	movs	r3, #45	; 0x2d
 8012ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012caa:	4a9c      	ldr	r2, [pc, #624]	; (8012f1c <_printf_float+0x2fc>)
 8012cac:	4b9c      	ldr	r3, [pc, #624]	; (8012f20 <_printf_float+0x300>)
 8012cae:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012cb2:	bf8c      	ite	hi
 8012cb4:	4690      	movhi	r8, r2
 8012cb6:	4698      	movls	r8, r3
 8012cb8:	2303      	movs	r3, #3
 8012cba:	f02b 0204 	bic.w	r2, fp, #4
 8012cbe:	6123      	str	r3, [r4, #16]
 8012cc0:	6022      	str	r2, [r4, #0]
 8012cc2:	f04f 0900 	mov.w	r9, #0
 8012cc6:	9700      	str	r7, [sp, #0]
 8012cc8:	4633      	mov	r3, r6
 8012cca:	aa0b      	add	r2, sp, #44	; 0x2c
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4628      	mov	r0, r5
 8012cd0:	f000 f9e6 	bl	80130a0 <_printf_common>
 8012cd4:	3001      	adds	r0, #1
 8012cd6:	f040 808d 	bne.w	8012df4 <_printf_float+0x1d4>
 8012cda:	f04f 30ff 	mov.w	r0, #4294967295
 8012cde:	b00d      	add	sp, #52	; 0x34
 8012ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce4:	4642      	mov	r2, r8
 8012ce6:	464b      	mov	r3, r9
 8012ce8:	4640      	mov	r0, r8
 8012cea:	4649      	mov	r1, r9
 8012cec:	f7ed ff36 	bl	8000b5c <__aeabi_dcmpun>
 8012cf0:	b110      	cbz	r0, 8012cf8 <_printf_float+0xd8>
 8012cf2:	4a8c      	ldr	r2, [pc, #560]	; (8012f24 <_printf_float+0x304>)
 8012cf4:	4b8c      	ldr	r3, [pc, #560]	; (8012f28 <_printf_float+0x308>)
 8012cf6:	e7da      	b.n	8012cae <_printf_float+0x8e>
 8012cf8:	6861      	ldr	r1, [r4, #4]
 8012cfa:	1c4b      	adds	r3, r1, #1
 8012cfc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012d00:	a80a      	add	r0, sp, #40	; 0x28
 8012d02:	d13e      	bne.n	8012d82 <_printf_float+0x162>
 8012d04:	2306      	movs	r3, #6
 8012d06:	6063      	str	r3, [r4, #4]
 8012d08:	2300      	movs	r3, #0
 8012d0a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012d0e:	ab09      	add	r3, sp, #36	; 0x24
 8012d10:	9300      	str	r3, [sp, #0]
 8012d12:	ec49 8b10 	vmov	d0, r8, r9
 8012d16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012d1a:	6022      	str	r2, [r4, #0]
 8012d1c:	f8cd a004 	str.w	sl, [sp, #4]
 8012d20:	6861      	ldr	r1, [r4, #4]
 8012d22:	4628      	mov	r0, r5
 8012d24:	f7ff fee8 	bl	8012af8 <__cvt>
 8012d28:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012d2c:	2b47      	cmp	r3, #71	; 0x47
 8012d2e:	4680      	mov	r8, r0
 8012d30:	d109      	bne.n	8012d46 <_printf_float+0x126>
 8012d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d34:	1cd8      	adds	r0, r3, #3
 8012d36:	db02      	blt.n	8012d3e <_printf_float+0x11e>
 8012d38:	6862      	ldr	r2, [r4, #4]
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	dd47      	ble.n	8012dce <_printf_float+0x1ae>
 8012d3e:	f1aa 0a02 	sub.w	sl, sl, #2
 8012d42:	fa5f fa8a 	uxtb.w	sl, sl
 8012d46:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d4c:	d824      	bhi.n	8012d98 <_printf_float+0x178>
 8012d4e:	3901      	subs	r1, #1
 8012d50:	4652      	mov	r2, sl
 8012d52:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012d56:	9109      	str	r1, [sp, #36]	; 0x24
 8012d58:	f7ff ff2f 	bl	8012bba <__exponent>
 8012d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d5e:	1813      	adds	r3, r2, r0
 8012d60:	2a01      	cmp	r2, #1
 8012d62:	4681      	mov	r9, r0
 8012d64:	6123      	str	r3, [r4, #16]
 8012d66:	dc02      	bgt.n	8012d6e <_printf_float+0x14e>
 8012d68:	6822      	ldr	r2, [r4, #0]
 8012d6a:	07d1      	lsls	r1, r2, #31
 8012d6c:	d501      	bpl.n	8012d72 <_printf_float+0x152>
 8012d6e:	3301      	adds	r3, #1
 8012d70:	6123      	str	r3, [r4, #16]
 8012d72:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0a5      	beq.n	8012cc6 <_printf_float+0xa6>
 8012d7a:	232d      	movs	r3, #45	; 0x2d
 8012d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d80:	e7a1      	b.n	8012cc6 <_printf_float+0xa6>
 8012d82:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012d86:	f000 8177 	beq.w	8013078 <_printf_float+0x458>
 8012d8a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012d8e:	d1bb      	bne.n	8012d08 <_printf_float+0xe8>
 8012d90:	2900      	cmp	r1, #0
 8012d92:	d1b9      	bne.n	8012d08 <_printf_float+0xe8>
 8012d94:	2301      	movs	r3, #1
 8012d96:	e7b6      	b.n	8012d06 <_printf_float+0xe6>
 8012d98:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012d9c:	d119      	bne.n	8012dd2 <_printf_float+0x1b2>
 8012d9e:	2900      	cmp	r1, #0
 8012da0:	6863      	ldr	r3, [r4, #4]
 8012da2:	dd0c      	ble.n	8012dbe <_printf_float+0x19e>
 8012da4:	6121      	str	r1, [r4, #16]
 8012da6:	b913      	cbnz	r3, 8012dae <_printf_float+0x18e>
 8012da8:	6822      	ldr	r2, [r4, #0]
 8012daa:	07d2      	lsls	r2, r2, #31
 8012dac:	d502      	bpl.n	8012db4 <_printf_float+0x194>
 8012dae:	3301      	adds	r3, #1
 8012db0:	440b      	add	r3, r1
 8012db2:	6123      	str	r3, [r4, #16]
 8012db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012db6:	65a3      	str	r3, [r4, #88]	; 0x58
 8012db8:	f04f 0900 	mov.w	r9, #0
 8012dbc:	e7d9      	b.n	8012d72 <_printf_float+0x152>
 8012dbe:	b913      	cbnz	r3, 8012dc6 <_printf_float+0x1a6>
 8012dc0:	6822      	ldr	r2, [r4, #0]
 8012dc2:	07d0      	lsls	r0, r2, #31
 8012dc4:	d501      	bpl.n	8012dca <_printf_float+0x1aa>
 8012dc6:	3302      	adds	r3, #2
 8012dc8:	e7f3      	b.n	8012db2 <_printf_float+0x192>
 8012dca:	2301      	movs	r3, #1
 8012dcc:	e7f1      	b.n	8012db2 <_printf_float+0x192>
 8012dce:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012dd2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	db05      	blt.n	8012de6 <_printf_float+0x1c6>
 8012dda:	6822      	ldr	r2, [r4, #0]
 8012ddc:	6123      	str	r3, [r4, #16]
 8012dde:	07d1      	lsls	r1, r2, #31
 8012de0:	d5e8      	bpl.n	8012db4 <_printf_float+0x194>
 8012de2:	3301      	adds	r3, #1
 8012de4:	e7e5      	b.n	8012db2 <_printf_float+0x192>
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	bfd4      	ite	le
 8012dea:	f1c3 0302 	rsble	r3, r3, #2
 8012dee:	2301      	movgt	r3, #1
 8012df0:	4413      	add	r3, r2
 8012df2:	e7de      	b.n	8012db2 <_printf_float+0x192>
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	055a      	lsls	r2, r3, #21
 8012df8:	d407      	bmi.n	8012e0a <_printf_float+0x1ea>
 8012dfa:	6923      	ldr	r3, [r4, #16]
 8012dfc:	4642      	mov	r2, r8
 8012dfe:	4631      	mov	r1, r6
 8012e00:	4628      	mov	r0, r5
 8012e02:	47b8      	blx	r7
 8012e04:	3001      	adds	r0, #1
 8012e06:	d12b      	bne.n	8012e60 <_printf_float+0x240>
 8012e08:	e767      	b.n	8012cda <_printf_float+0xba>
 8012e0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012e0e:	f240 80dc 	bls.w	8012fca <_printf_float+0x3aa>
 8012e12:	2200      	movs	r2, #0
 8012e14:	2300      	movs	r3, #0
 8012e16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012e1a:	f7ed fe6d 	bl	8000af8 <__aeabi_dcmpeq>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d033      	beq.n	8012e8a <_printf_float+0x26a>
 8012e22:	2301      	movs	r3, #1
 8012e24:	4a41      	ldr	r2, [pc, #260]	; (8012f2c <_printf_float+0x30c>)
 8012e26:	4631      	mov	r1, r6
 8012e28:	4628      	mov	r0, r5
 8012e2a:	47b8      	blx	r7
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	f43f af54 	beq.w	8012cda <_printf_float+0xba>
 8012e32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e36:	429a      	cmp	r2, r3
 8012e38:	db02      	blt.n	8012e40 <_printf_float+0x220>
 8012e3a:	6823      	ldr	r3, [r4, #0]
 8012e3c:	07d8      	lsls	r0, r3, #31
 8012e3e:	d50f      	bpl.n	8012e60 <_printf_float+0x240>
 8012e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012e44:	4631      	mov	r1, r6
 8012e46:	4628      	mov	r0, r5
 8012e48:	47b8      	blx	r7
 8012e4a:	3001      	adds	r0, #1
 8012e4c:	f43f af45 	beq.w	8012cda <_printf_float+0xba>
 8012e50:	f04f 0800 	mov.w	r8, #0
 8012e54:	f104 091a 	add.w	r9, r4, #26
 8012e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e5a:	3b01      	subs	r3, #1
 8012e5c:	4543      	cmp	r3, r8
 8012e5e:	dc09      	bgt.n	8012e74 <_printf_float+0x254>
 8012e60:	6823      	ldr	r3, [r4, #0]
 8012e62:	079b      	lsls	r3, r3, #30
 8012e64:	f100 8103 	bmi.w	801306e <_printf_float+0x44e>
 8012e68:	68e0      	ldr	r0, [r4, #12]
 8012e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e6c:	4298      	cmp	r0, r3
 8012e6e:	bfb8      	it	lt
 8012e70:	4618      	movlt	r0, r3
 8012e72:	e734      	b.n	8012cde <_printf_float+0xbe>
 8012e74:	2301      	movs	r3, #1
 8012e76:	464a      	mov	r2, r9
 8012e78:	4631      	mov	r1, r6
 8012e7a:	4628      	mov	r0, r5
 8012e7c:	47b8      	blx	r7
 8012e7e:	3001      	adds	r0, #1
 8012e80:	f43f af2b 	beq.w	8012cda <_printf_float+0xba>
 8012e84:	f108 0801 	add.w	r8, r8, #1
 8012e88:	e7e6      	b.n	8012e58 <_printf_float+0x238>
 8012e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	dc2b      	bgt.n	8012ee8 <_printf_float+0x2c8>
 8012e90:	2301      	movs	r3, #1
 8012e92:	4a26      	ldr	r2, [pc, #152]	; (8012f2c <_printf_float+0x30c>)
 8012e94:	4631      	mov	r1, r6
 8012e96:	4628      	mov	r0, r5
 8012e98:	47b8      	blx	r7
 8012e9a:	3001      	adds	r0, #1
 8012e9c:	f43f af1d 	beq.w	8012cda <_printf_float+0xba>
 8012ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ea2:	b923      	cbnz	r3, 8012eae <_printf_float+0x28e>
 8012ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ea6:	b913      	cbnz	r3, 8012eae <_printf_float+0x28e>
 8012ea8:	6823      	ldr	r3, [r4, #0]
 8012eaa:	07d9      	lsls	r1, r3, #31
 8012eac:	d5d8      	bpl.n	8012e60 <_printf_float+0x240>
 8012eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012eb2:	4631      	mov	r1, r6
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	47b8      	blx	r7
 8012eb8:	3001      	adds	r0, #1
 8012eba:	f43f af0e 	beq.w	8012cda <_printf_float+0xba>
 8012ebe:	f04f 0900 	mov.w	r9, #0
 8012ec2:	f104 0a1a 	add.w	sl, r4, #26
 8012ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012ec8:	425b      	negs	r3, r3
 8012eca:	454b      	cmp	r3, r9
 8012ecc:	dc01      	bgt.n	8012ed2 <_printf_float+0x2b2>
 8012ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ed0:	e794      	b.n	8012dfc <_printf_float+0x1dc>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	4652      	mov	r2, sl
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	4628      	mov	r0, r5
 8012eda:	47b8      	blx	r7
 8012edc:	3001      	adds	r0, #1
 8012ede:	f43f aefc 	beq.w	8012cda <_printf_float+0xba>
 8012ee2:	f109 0901 	add.w	r9, r9, #1
 8012ee6:	e7ee      	b.n	8012ec6 <_printf_float+0x2a6>
 8012ee8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012eec:	429a      	cmp	r2, r3
 8012eee:	bfa8      	it	ge
 8012ef0:	461a      	movge	r2, r3
 8012ef2:	2a00      	cmp	r2, #0
 8012ef4:	4691      	mov	r9, r2
 8012ef6:	dd07      	ble.n	8012f08 <_printf_float+0x2e8>
 8012ef8:	4613      	mov	r3, r2
 8012efa:	4631      	mov	r1, r6
 8012efc:	4642      	mov	r2, r8
 8012efe:	4628      	mov	r0, r5
 8012f00:	47b8      	blx	r7
 8012f02:	3001      	adds	r0, #1
 8012f04:	f43f aee9 	beq.w	8012cda <_printf_float+0xba>
 8012f08:	f104 031a 	add.w	r3, r4, #26
 8012f0c:	f04f 0b00 	mov.w	fp, #0
 8012f10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f14:	9306      	str	r3, [sp, #24]
 8012f16:	e015      	b.n	8012f44 <_printf_float+0x324>
 8012f18:	7fefffff 	.word	0x7fefffff
 8012f1c:	080181a8 	.word	0x080181a8
 8012f20:	080181a4 	.word	0x080181a4
 8012f24:	080181b0 	.word	0x080181b0
 8012f28:	080181ac 	.word	0x080181ac
 8012f2c:	080183d3 	.word	0x080183d3
 8012f30:	2301      	movs	r3, #1
 8012f32:	9a06      	ldr	r2, [sp, #24]
 8012f34:	4631      	mov	r1, r6
 8012f36:	4628      	mov	r0, r5
 8012f38:	47b8      	blx	r7
 8012f3a:	3001      	adds	r0, #1
 8012f3c:	f43f aecd 	beq.w	8012cda <_printf_float+0xba>
 8012f40:	f10b 0b01 	add.w	fp, fp, #1
 8012f44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012f48:	ebaa 0309 	sub.w	r3, sl, r9
 8012f4c:	455b      	cmp	r3, fp
 8012f4e:	dcef      	bgt.n	8012f30 <_printf_float+0x310>
 8012f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f54:	429a      	cmp	r2, r3
 8012f56:	44d0      	add	r8, sl
 8012f58:	db15      	blt.n	8012f86 <_printf_float+0x366>
 8012f5a:	6823      	ldr	r3, [r4, #0]
 8012f5c:	07da      	lsls	r2, r3, #31
 8012f5e:	d412      	bmi.n	8012f86 <_printf_float+0x366>
 8012f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f64:	eba3 020a 	sub.w	r2, r3, sl
 8012f68:	eba3 0a01 	sub.w	sl, r3, r1
 8012f6c:	4592      	cmp	sl, r2
 8012f6e:	bfa8      	it	ge
 8012f70:	4692      	movge	sl, r2
 8012f72:	f1ba 0f00 	cmp.w	sl, #0
 8012f76:	dc0e      	bgt.n	8012f96 <_printf_float+0x376>
 8012f78:	f04f 0800 	mov.w	r8, #0
 8012f7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f80:	f104 091a 	add.w	r9, r4, #26
 8012f84:	e019      	b.n	8012fba <_printf_float+0x39a>
 8012f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f8a:	4631      	mov	r1, r6
 8012f8c:	4628      	mov	r0, r5
 8012f8e:	47b8      	blx	r7
 8012f90:	3001      	adds	r0, #1
 8012f92:	d1e5      	bne.n	8012f60 <_printf_float+0x340>
 8012f94:	e6a1      	b.n	8012cda <_printf_float+0xba>
 8012f96:	4653      	mov	r3, sl
 8012f98:	4642      	mov	r2, r8
 8012f9a:	4631      	mov	r1, r6
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	47b8      	blx	r7
 8012fa0:	3001      	adds	r0, #1
 8012fa2:	d1e9      	bne.n	8012f78 <_printf_float+0x358>
 8012fa4:	e699      	b.n	8012cda <_printf_float+0xba>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	464a      	mov	r2, r9
 8012faa:	4631      	mov	r1, r6
 8012fac:	4628      	mov	r0, r5
 8012fae:	47b8      	blx	r7
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	f43f ae92 	beq.w	8012cda <_printf_float+0xba>
 8012fb6:	f108 0801 	add.w	r8, r8, #1
 8012fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012fbe:	1a9b      	subs	r3, r3, r2
 8012fc0:	eba3 030a 	sub.w	r3, r3, sl
 8012fc4:	4543      	cmp	r3, r8
 8012fc6:	dcee      	bgt.n	8012fa6 <_printf_float+0x386>
 8012fc8:	e74a      	b.n	8012e60 <_printf_float+0x240>
 8012fca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fcc:	2a01      	cmp	r2, #1
 8012fce:	dc01      	bgt.n	8012fd4 <_printf_float+0x3b4>
 8012fd0:	07db      	lsls	r3, r3, #31
 8012fd2:	d53a      	bpl.n	801304a <_printf_float+0x42a>
 8012fd4:	2301      	movs	r3, #1
 8012fd6:	4642      	mov	r2, r8
 8012fd8:	4631      	mov	r1, r6
 8012fda:	4628      	mov	r0, r5
 8012fdc:	47b8      	blx	r7
 8012fde:	3001      	adds	r0, #1
 8012fe0:	f43f ae7b 	beq.w	8012cda <_printf_float+0xba>
 8012fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fe8:	4631      	mov	r1, r6
 8012fea:	4628      	mov	r0, r5
 8012fec:	47b8      	blx	r7
 8012fee:	3001      	adds	r0, #1
 8012ff0:	f108 0801 	add.w	r8, r8, #1
 8012ff4:	f43f ae71 	beq.w	8012cda <_printf_float+0xba>
 8012ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ffa:	2200      	movs	r2, #0
 8012ffc:	f103 3aff 	add.w	sl, r3, #4294967295
 8013000:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013004:	2300      	movs	r3, #0
 8013006:	f7ed fd77 	bl	8000af8 <__aeabi_dcmpeq>
 801300a:	b9c8      	cbnz	r0, 8013040 <_printf_float+0x420>
 801300c:	4653      	mov	r3, sl
 801300e:	4642      	mov	r2, r8
 8013010:	4631      	mov	r1, r6
 8013012:	4628      	mov	r0, r5
 8013014:	47b8      	blx	r7
 8013016:	3001      	adds	r0, #1
 8013018:	d10e      	bne.n	8013038 <_printf_float+0x418>
 801301a:	e65e      	b.n	8012cda <_printf_float+0xba>
 801301c:	2301      	movs	r3, #1
 801301e:	4652      	mov	r2, sl
 8013020:	4631      	mov	r1, r6
 8013022:	4628      	mov	r0, r5
 8013024:	47b8      	blx	r7
 8013026:	3001      	adds	r0, #1
 8013028:	f43f ae57 	beq.w	8012cda <_printf_float+0xba>
 801302c:	f108 0801 	add.w	r8, r8, #1
 8013030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013032:	3b01      	subs	r3, #1
 8013034:	4543      	cmp	r3, r8
 8013036:	dcf1      	bgt.n	801301c <_printf_float+0x3fc>
 8013038:	464b      	mov	r3, r9
 801303a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801303e:	e6de      	b.n	8012dfe <_printf_float+0x1de>
 8013040:	f04f 0800 	mov.w	r8, #0
 8013044:	f104 0a1a 	add.w	sl, r4, #26
 8013048:	e7f2      	b.n	8013030 <_printf_float+0x410>
 801304a:	2301      	movs	r3, #1
 801304c:	e7df      	b.n	801300e <_printf_float+0x3ee>
 801304e:	2301      	movs	r3, #1
 8013050:	464a      	mov	r2, r9
 8013052:	4631      	mov	r1, r6
 8013054:	4628      	mov	r0, r5
 8013056:	47b8      	blx	r7
 8013058:	3001      	adds	r0, #1
 801305a:	f43f ae3e 	beq.w	8012cda <_printf_float+0xba>
 801305e:	f108 0801 	add.w	r8, r8, #1
 8013062:	68e3      	ldr	r3, [r4, #12]
 8013064:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013066:	1a9b      	subs	r3, r3, r2
 8013068:	4543      	cmp	r3, r8
 801306a:	dcf0      	bgt.n	801304e <_printf_float+0x42e>
 801306c:	e6fc      	b.n	8012e68 <_printf_float+0x248>
 801306e:	f04f 0800 	mov.w	r8, #0
 8013072:	f104 0919 	add.w	r9, r4, #25
 8013076:	e7f4      	b.n	8013062 <_printf_float+0x442>
 8013078:	2900      	cmp	r1, #0
 801307a:	f43f ae8b 	beq.w	8012d94 <_printf_float+0x174>
 801307e:	2300      	movs	r3, #0
 8013080:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013084:	ab09      	add	r3, sp, #36	; 0x24
 8013086:	9300      	str	r3, [sp, #0]
 8013088:	ec49 8b10 	vmov	d0, r8, r9
 801308c:	6022      	str	r2, [r4, #0]
 801308e:	f8cd a004 	str.w	sl, [sp, #4]
 8013092:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013096:	4628      	mov	r0, r5
 8013098:	f7ff fd2e 	bl	8012af8 <__cvt>
 801309c:	4680      	mov	r8, r0
 801309e:	e648      	b.n	8012d32 <_printf_float+0x112>

080130a0 <_printf_common>:
 80130a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130a4:	4691      	mov	r9, r2
 80130a6:	461f      	mov	r7, r3
 80130a8:	688a      	ldr	r2, [r1, #8]
 80130aa:	690b      	ldr	r3, [r1, #16]
 80130ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80130b0:	4293      	cmp	r3, r2
 80130b2:	bfb8      	it	lt
 80130b4:	4613      	movlt	r3, r2
 80130b6:	f8c9 3000 	str.w	r3, [r9]
 80130ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80130be:	4606      	mov	r6, r0
 80130c0:	460c      	mov	r4, r1
 80130c2:	b112      	cbz	r2, 80130ca <_printf_common+0x2a>
 80130c4:	3301      	adds	r3, #1
 80130c6:	f8c9 3000 	str.w	r3, [r9]
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	0699      	lsls	r1, r3, #26
 80130ce:	bf42      	ittt	mi
 80130d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80130d4:	3302      	addmi	r3, #2
 80130d6:	f8c9 3000 	strmi.w	r3, [r9]
 80130da:	6825      	ldr	r5, [r4, #0]
 80130dc:	f015 0506 	ands.w	r5, r5, #6
 80130e0:	d107      	bne.n	80130f2 <_printf_common+0x52>
 80130e2:	f104 0a19 	add.w	sl, r4, #25
 80130e6:	68e3      	ldr	r3, [r4, #12]
 80130e8:	f8d9 2000 	ldr.w	r2, [r9]
 80130ec:	1a9b      	subs	r3, r3, r2
 80130ee:	42ab      	cmp	r3, r5
 80130f0:	dc28      	bgt.n	8013144 <_printf_common+0xa4>
 80130f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80130f6:	6822      	ldr	r2, [r4, #0]
 80130f8:	3300      	adds	r3, #0
 80130fa:	bf18      	it	ne
 80130fc:	2301      	movne	r3, #1
 80130fe:	0692      	lsls	r2, r2, #26
 8013100:	d42d      	bmi.n	801315e <_printf_common+0xbe>
 8013102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013106:	4639      	mov	r1, r7
 8013108:	4630      	mov	r0, r6
 801310a:	47c0      	blx	r8
 801310c:	3001      	adds	r0, #1
 801310e:	d020      	beq.n	8013152 <_printf_common+0xb2>
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	68e5      	ldr	r5, [r4, #12]
 8013114:	f8d9 2000 	ldr.w	r2, [r9]
 8013118:	f003 0306 	and.w	r3, r3, #6
 801311c:	2b04      	cmp	r3, #4
 801311e:	bf08      	it	eq
 8013120:	1aad      	subeq	r5, r5, r2
 8013122:	68a3      	ldr	r3, [r4, #8]
 8013124:	6922      	ldr	r2, [r4, #16]
 8013126:	bf0c      	ite	eq
 8013128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801312c:	2500      	movne	r5, #0
 801312e:	4293      	cmp	r3, r2
 8013130:	bfc4      	itt	gt
 8013132:	1a9b      	subgt	r3, r3, r2
 8013134:	18ed      	addgt	r5, r5, r3
 8013136:	f04f 0900 	mov.w	r9, #0
 801313a:	341a      	adds	r4, #26
 801313c:	454d      	cmp	r5, r9
 801313e:	d11a      	bne.n	8013176 <_printf_common+0xd6>
 8013140:	2000      	movs	r0, #0
 8013142:	e008      	b.n	8013156 <_printf_common+0xb6>
 8013144:	2301      	movs	r3, #1
 8013146:	4652      	mov	r2, sl
 8013148:	4639      	mov	r1, r7
 801314a:	4630      	mov	r0, r6
 801314c:	47c0      	blx	r8
 801314e:	3001      	adds	r0, #1
 8013150:	d103      	bne.n	801315a <_printf_common+0xba>
 8013152:	f04f 30ff 	mov.w	r0, #4294967295
 8013156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801315a:	3501      	adds	r5, #1
 801315c:	e7c3      	b.n	80130e6 <_printf_common+0x46>
 801315e:	18e1      	adds	r1, r4, r3
 8013160:	1c5a      	adds	r2, r3, #1
 8013162:	2030      	movs	r0, #48	; 0x30
 8013164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013168:	4422      	add	r2, r4
 801316a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801316e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013172:	3302      	adds	r3, #2
 8013174:	e7c5      	b.n	8013102 <_printf_common+0x62>
 8013176:	2301      	movs	r3, #1
 8013178:	4622      	mov	r2, r4
 801317a:	4639      	mov	r1, r7
 801317c:	4630      	mov	r0, r6
 801317e:	47c0      	blx	r8
 8013180:	3001      	adds	r0, #1
 8013182:	d0e6      	beq.n	8013152 <_printf_common+0xb2>
 8013184:	f109 0901 	add.w	r9, r9, #1
 8013188:	e7d8      	b.n	801313c <_printf_common+0x9c>
	...

0801318c <_printf_i>:
 801318c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013194:	460c      	mov	r4, r1
 8013196:	7e09      	ldrb	r1, [r1, #24]
 8013198:	b085      	sub	sp, #20
 801319a:	296e      	cmp	r1, #110	; 0x6e
 801319c:	4617      	mov	r7, r2
 801319e:	4606      	mov	r6, r0
 80131a0:	4698      	mov	r8, r3
 80131a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80131a4:	f000 80b3 	beq.w	801330e <_printf_i+0x182>
 80131a8:	d822      	bhi.n	80131f0 <_printf_i+0x64>
 80131aa:	2963      	cmp	r1, #99	; 0x63
 80131ac:	d036      	beq.n	801321c <_printf_i+0x90>
 80131ae:	d80a      	bhi.n	80131c6 <_printf_i+0x3a>
 80131b0:	2900      	cmp	r1, #0
 80131b2:	f000 80b9 	beq.w	8013328 <_printf_i+0x19c>
 80131b6:	2958      	cmp	r1, #88	; 0x58
 80131b8:	f000 8083 	beq.w	80132c2 <_printf_i+0x136>
 80131bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80131c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80131c4:	e032      	b.n	801322c <_printf_i+0xa0>
 80131c6:	2964      	cmp	r1, #100	; 0x64
 80131c8:	d001      	beq.n	80131ce <_printf_i+0x42>
 80131ca:	2969      	cmp	r1, #105	; 0x69
 80131cc:	d1f6      	bne.n	80131bc <_printf_i+0x30>
 80131ce:	6820      	ldr	r0, [r4, #0]
 80131d0:	6813      	ldr	r3, [r2, #0]
 80131d2:	0605      	lsls	r5, r0, #24
 80131d4:	f103 0104 	add.w	r1, r3, #4
 80131d8:	d52a      	bpl.n	8013230 <_printf_i+0xa4>
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	6011      	str	r1, [r2, #0]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	da03      	bge.n	80131ea <_printf_i+0x5e>
 80131e2:	222d      	movs	r2, #45	; 0x2d
 80131e4:	425b      	negs	r3, r3
 80131e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80131ea:	486f      	ldr	r0, [pc, #444]	; (80133a8 <_printf_i+0x21c>)
 80131ec:	220a      	movs	r2, #10
 80131ee:	e039      	b.n	8013264 <_printf_i+0xd8>
 80131f0:	2973      	cmp	r1, #115	; 0x73
 80131f2:	f000 809d 	beq.w	8013330 <_printf_i+0x1a4>
 80131f6:	d808      	bhi.n	801320a <_printf_i+0x7e>
 80131f8:	296f      	cmp	r1, #111	; 0x6f
 80131fa:	d020      	beq.n	801323e <_printf_i+0xb2>
 80131fc:	2970      	cmp	r1, #112	; 0x70
 80131fe:	d1dd      	bne.n	80131bc <_printf_i+0x30>
 8013200:	6823      	ldr	r3, [r4, #0]
 8013202:	f043 0320 	orr.w	r3, r3, #32
 8013206:	6023      	str	r3, [r4, #0]
 8013208:	e003      	b.n	8013212 <_printf_i+0x86>
 801320a:	2975      	cmp	r1, #117	; 0x75
 801320c:	d017      	beq.n	801323e <_printf_i+0xb2>
 801320e:	2978      	cmp	r1, #120	; 0x78
 8013210:	d1d4      	bne.n	80131bc <_printf_i+0x30>
 8013212:	2378      	movs	r3, #120	; 0x78
 8013214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013218:	4864      	ldr	r0, [pc, #400]	; (80133ac <_printf_i+0x220>)
 801321a:	e055      	b.n	80132c8 <_printf_i+0x13c>
 801321c:	6813      	ldr	r3, [r2, #0]
 801321e:	1d19      	adds	r1, r3, #4
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	6011      	str	r1, [r2, #0]
 8013224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801322c:	2301      	movs	r3, #1
 801322e:	e08c      	b.n	801334a <_printf_i+0x1be>
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	6011      	str	r1, [r2, #0]
 8013234:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013238:	bf18      	it	ne
 801323a:	b21b      	sxthne	r3, r3
 801323c:	e7cf      	b.n	80131de <_printf_i+0x52>
 801323e:	6813      	ldr	r3, [r2, #0]
 8013240:	6825      	ldr	r5, [r4, #0]
 8013242:	1d18      	adds	r0, r3, #4
 8013244:	6010      	str	r0, [r2, #0]
 8013246:	0628      	lsls	r0, r5, #24
 8013248:	d501      	bpl.n	801324e <_printf_i+0xc2>
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	e002      	b.n	8013254 <_printf_i+0xc8>
 801324e:	0668      	lsls	r0, r5, #25
 8013250:	d5fb      	bpl.n	801324a <_printf_i+0xbe>
 8013252:	881b      	ldrh	r3, [r3, #0]
 8013254:	4854      	ldr	r0, [pc, #336]	; (80133a8 <_printf_i+0x21c>)
 8013256:	296f      	cmp	r1, #111	; 0x6f
 8013258:	bf14      	ite	ne
 801325a:	220a      	movne	r2, #10
 801325c:	2208      	moveq	r2, #8
 801325e:	2100      	movs	r1, #0
 8013260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013264:	6865      	ldr	r5, [r4, #4]
 8013266:	60a5      	str	r5, [r4, #8]
 8013268:	2d00      	cmp	r5, #0
 801326a:	f2c0 8095 	blt.w	8013398 <_printf_i+0x20c>
 801326e:	6821      	ldr	r1, [r4, #0]
 8013270:	f021 0104 	bic.w	r1, r1, #4
 8013274:	6021      	str	r1, [r4, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d13d      	bne.n	80132f6 <_printf_i+0x16a>
 801327a:	2d00      	cmp	r5, #0
 801327c:	f040 808e 	bne.w	801339c <_printf_i+0x210>
 8013280:	4665      	mov	r5, ip
 8013282:	2a08      	cmp	r2, #8
 8013284:	d10b      	bne.n	801329e <_printf_i+0x112>
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	07db      	lsls	r3, r3, #31
 801328a:	d508      	bpl.n	801329e <_printf_i+0x112>
 801328c:	6923      	ldr	r3, [r4, #16]
 801328e:	6862      	ldr	r2, [r4, #4]
 8013290:	429a      	cmp	r2, r3
 8013292:	bfde      	ittt	le
 8013294:	2330      	movle	r3, #48	; 0x30
 8013296:	f805 3c01 	strble.w	r3, [r5, #-1]
 801329a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801329e:	ebac 0305 	sub.w	r3, ip, r5
 80132a2:	6123      	str	r3, [r4, #16]
 80132a4:	f8cd 8000 	str.w	r8, [sp]
 80132a8:	463b      	mov	r3, r7
 80132aa:	aa03      	add	r2, sp, #12
 80132ac:	4621      	mov	r1, r4
 80132ae:	4630      	mov	r0, r6
 80132b0:	f7ff fef6 	bl	80130a0 <_printf_common>
 80132b4:	3001      	adds	r0, #1
 80132b6:	d14d      	bne.n	8013354 <_printf_i+0x1c8>
 80132b8:	f04f 30ff 	mov.w	r0, #4294967295
 80132bc:	b005      	add	sp, #20
 80132be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132c2:	4839      	ldr	r0, [pc, #228]	; (80133a8 <_printf_i+0x21c>)
 80132c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80132c8:	6813      	ldr	r3, [r2, #0]
 80132ca:	6821      	ldr	r1, [r4, #0]
 80132cc:	1d1d      	adds	r5, r3, #4
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	6015      	str	r5, [r2, #0]
 80132d2:	060a      	lsls	r2, r1, #24
 80132d4:	d50b      	bpl.n	80132ee <_printf_i+0x162>
 80132d6:	07ca      	lsls	r2, r1, #31
 80132d8:	bf44      	itt	mi
 80132da:	f041 0120 	orrmi.w	r1, r1, #32
 80132de:	6021      	strmi	r1, [r4, #0]
 80132e0:	b91b      	cbnz	r3, 80132ea <_printf_i+0x15e>
 80132e2:	6822      	ldr	r2, [r4, #0]
 80132e4:	f022 0220 	bic.w	r2, r2, #32
 80132e8:	6022      	str	r2, [r4, #0]
 80132ea:	2210      	movs	r2, #16
 80132ec:	e7b7      	b.n	801325e <_printf_i+0xd2>
 80132ee:	064d      	lsls	r5, r1, #25
 80132f0:	bf48      	it	mi
 80132f2:	b29b      	uxthmi	r3, r3
 80132f4:	e7ef      	b.n	80132d6 <_printf_i+0x14a>
 80132f6:	4665      	mov	r5, ip
 80132f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80132fc:	fb02 3311 	mls	r3, r2, r1, r3
 8013300:	5cc3      	ldrb	r3, [r0, r3]
 8013302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013306:	460b      	mov	r3, r1
 8013308:	2900      	cmp	r1, #0
 801330a:	d1f5      	bne.n	80132f8 <_printf_i+0x16c>
 801330c:	e7b9      	b.n	8013282 <_printf_i+0xf6>
 801330e:	6813      	ldr	r3, [r2, #0]
 8013310:	6825      	ldr	r5, [r4, #0]
 8013312:	6961      	ldr	r1, [r4, #20]
 8013314:	1d18      	adds	r0, r3, #4
 8013316:	6010      	str	r0, [r2, #0]
 8013318:	0628      	lsls	r0, r5, #24
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	d501      	bpl.n	8013322 <_printf_i+0x196>
 801331e:	6019      	str	r1, [r3, #0]
 8013320:	e002      	b.n	8013328 <_printf_i+0x19c>
 8013322:	066a      	lsls	r2, r5, #25
 8013324:	d5fb      	bpl.n	801331e <_printf_i+0x192>
 8013326:	8019      	strh	r1, [r3, #0]
 8013328:	2300      	movs	r3, #0
 801332a:	6123      	str	r3, [r4, #16]
 801332c:	4665      	mov	r5, ip
 801332e:	e7b9      	b.n	80132a4 <_printf_i+0x118>
 8013330:	6813      	ldr	r3, [r2, #0]
 8013332:	1d19      	adds	r1, r3, #4
 8013334:	6011      	str	r1, [r2, #0]
 8013336:	681d      	ldr	r5, [r3, #0]
 8013338:	6862      	ldr	r2, [r4, #4]
 801333a:	2100      	movs	r1, #0
 801333c:	4628      	mov	r0, r5
 801333e:	f7ec ff67 	bl	8000210 <memchr>
 8013342:	b108      	cbz	r0, 8013348 <_printf_i+0x1bc>
 8013344:	1b40      	subs	r0, r0, r5
 8013346:	6060      	str	r0, [r4, #4]
 8013348:	6863      	ldr	r3, [r4, #4]
 801334a:	6123      	str	r3, [r4, #16]
 801334c:	2300      	movs	r3, #0
 801334e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013352:	e7a7      	b.n	80132a4 <_printf_i+0x118>
 8013354:	6923      	ldr	r3, [r4, #16]
 8013356:	462a      	mov	r2, r5
 8013358:	4639      	mov	r1, r7
 801335a:	4630      	mov	r0, r6
 801335c:	47c0      	blx	r8
 801335e:	3001      	adds	r0, #1
 8013360:	d0aa      	beq.n	80132b8 <_printf_i+0x12c>
 8013362:	6823      	ldr	r3, [r4, #0]
 8013364:	079b      	lsls	r3, r3, #30
 8013366:	d413      	bmi.n	8013390 <_printf_i+0x204>
 8013368:	68e0      	ldr	r0, [r4, #12]
 801336a:	9b03      	ldr	r3, [sp, #12]
 801336c:	4298      	cmp	r0, r3
 801336e:	bfb8      	it	lt
 8013370:	4618      	movlt	r0, r3
 8013372:	e7a3      	b.n	80132bc <_printf_i+0x130>
 8013374:	2301      	movs	r3, #1
 8013376:	464a      	mov	r2, r9
 8013378:	4639      	mov	r1, r7
 801337a:	4630      	mov	r0, r6
 801337c:	47c0      	blx	r8
 801337e:	3001      	adds	r0, #1
 8013380:	d09a      	beq.n	80132b8 <_printf_i+0x12c>
 8013382:	3501      	adds	r5, #1
 8013384:	68e3      	ldr	r3, [r4, #12]
 8013386:	9a03      	ldr	r2, [sp, #12]
 8013388:	1a9b      	subs	r3, r3, r2
 801338a:	42ab      	cmp	r3, r5
 801338c:	dcf2      	bgt.n	8013374 <_printf_i+0x1e8>
 801338e:	e7eb      	b.n	8013368 <_printf_i+0x1dc>
 8013390:	2500      	movs	r5, #0
 8013392:	f104 0919 	add.w	r9, r4, #25
 8013396:	e7f5      	b.n	8013384 <_printf_i+0x1f8>
 8013398:	2b00      	cmp	r3, #0
 801339a:	d1ac      	bne.n	80132f6 <_printf_i+0x16a>
 801339c:	7803      	ldrb	r3, [r0, #0]
 801339e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80133a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133a6:	e76c      	b.n	8013282 <_printf_i+0xf6>
 80133a8:	080181b4 	.word	0x080181b4
 80133ac:	080181c5 	.word	0x080181c5

080133b0 <_scanf_float>:
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	469a      	mov	sl, r3
 80133b6:	688b      	ldr	r3, [r1, #8]
 80133b8:	4616      	mov	r6, r2
 80133ba:	1e5a      	subs	r2, r3, #1
 80133bc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80133c0:	b087      	sub	sp, #28
 80133c2:	bf83      	ittte	hi
 80133c4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80133c8:	189b      	addhi	r3, r3, r2
 80133ca:	9301      	strhi	r3, [sp, #4]
 80133cc:	2300      	movls	r3, #0
 80133ce:	bf86      	itte	hi
 80133d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80133d4:	608b      	strhi	r3, [r1, #8]
 80133d6:	9301      	strls	r3, [sp, #4]
 80133d8:	680b      	ldr	r3, [r1, #0]
 80133da:	4688      	mov	r8, r1
 80133dc:	f04f 0b00 	mov.w	fp, #0
 80133e0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80133e4:	f848 3b1c 	str.w	r3, [r8], #28
 80133e8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80133ec:	4607      	mov	r7, r0
 80133ee:	460c      	mov	r4, r1
 80133f0:	4645      	mov	r5, r8
 80133f2:	465a      	mov	r2, fp
 80133f4:	46d9      	mov	r9, fp
 80133f6:	f8cd b008 	str.w	fp, [sp, #8]
 80133fa:	68a1      	ldr	r1, [r4, #8]
 80133fc:	b181      	cbz	r1, 8013420 <_scanf_float+0x70>
 80133fe:	6833      	ldr	r3, [r6, #0]
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	2b49      	cmp	r3, #73	; 0x49
 8013404:	d071      	beq.n	80134ea <_scanf_float+0x13a>
 8013406:	d84d      	bhi.n	80134a4 <_scanf_float+0xf4>
 8013408:	2b39      	cmp	r3, #57	; 0x39
 801340a:	d840      	bhi.n	801348e <_scanf_float+0xde>
 801340c:	2b31      	cmp	r3, #49	; 0x31
 801340e:	f080 8088 	bcs.w	8013522 <_scanf_float+0x172>
 8013412:	2b2d      	cmp	r3, #45	; 0x2d
 8013414:	f000 8090 	beq.w	8013538 <_scanf_float+0x188>
 8013418:	d815      	bhi.n	8013446 <_scanf_float+0x96>
 801341a:	2b2b      	cmp	r3, #43	; 0x2b
 801341c:	f000 808c 	beq.w	8013538 <_scanf_float+0x188>
 8013420:	f1b9 0f00 	cmp.w	r9, #0
 8013424:	d003      	beq.n	801342e <_scanf_float+0x7e>
 8013426:	6823      	ldr	r3, [r4, #0]
 8013428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801342c:	6023      	str	r3, [r4, #0]
 801342e:	3a01      	subs	r2, #1
 8013430:	2a01      	cmp	r2, #1
 8013432:	f200 80ea 	bhi.w	801360a <_scanf_float+0x25a>
 8013436:	4545      	cmp	r5, r8
 8013438:	f200 80dc 	bhi.w	80135f4 <_scanf_float+0x244>
 801343c:	2601      	movs	r6, #1
 801343e:	4630      	mov	r0, r6
 8013440:	b007      	add	sp, #28
 8013442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013446:	2b2e      	cmp	r3, #46	; 0x2e
 8013448:	f000 809f 	beq.w	801358a <_scanf_float+0x1da>
 801344c:	2b30      	cmp	r3, #48	; 0x30
 801344e:	d1e7      	bne.n	8013420 <_scanf_float+0x70>
 8013450:	6820      	ldr	r0, [r4, #0]
 8013452:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013456:	d064      	beq.n	8013522 <_scanf_float+0x172>
 8013458:	9b01      	ldr	r3, [sp, #4]
 801345a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801345e:	6020      	str	r0, [r4, #0]
 8013460:	f109 0901 	add.w	r9, r9, #1
 8013464:	b11b      	cbz	r3, 801346e <_scanf_float+0xbe>
 8013466:	3b01      	subs	r3, #1
 8013468:	3101      	adds	r1, #1
 801346a:	9301      	str	r3, [sp, #4]
 801346c:	60a1      	str	r1, [r4, #8]
 801346e:	68a3      	ldr	r3, [r4, #8]
 8013470:	3b01      	subs	r3, #1
 8013472:	60a3      	str	r3, [r4, #8]
 8013474:	6923      	ldr	r3, [r4, #16]
 8013476:	3301      	adds	r3, #1
 8013478:	6123      	str	r3, [r4, #16]
 801347a:	6873      	ldr	r3, [r6, #4]
 801347c:	3b01      	subs	r3, #1
 801347e:	2b00      	cmp	r3, #0
 8013480:	6073      	str	r3, [r6, #4]
 8013482:	f340 80ac 	ble.w	80135de <_scanf_float+0x22e>
 8013486:	6833      	ldr	r3, [r6, #0]
 8013488:	3301      	adds	r3, #1
 801348a:	6033      	str	r3, [r6, #0]
 801348c:	e7b5      	b.n	80133fa <_scanf_float+0x4a>
 801348e:	2b45      	cmp	r3, #69	; 0x45
 8013490:	f000 8085 	beq.w	801359e <_scanf_float+0x1ee>
 8013494:	2b46      	cmp	r3, #70	; 0x46
 8013496:	d06a      	beq.n	801356e <_scanf_float+0x1be>
 8013498:	2b41      	cmp	r3, #65	; 0x41
 801349a:	d1c1      	bne.n	8013420 <_scanf_float+0x70>
 801349c:	2a01      	cmp	r2, #1
 801349e:	d1bf      	bne.n	8013420 <_scanf_float+0x70>
 80134a0:	2202      	movs	r2, #2
 80134a2:	e046      	b.n	8013532 <_scanf_float+0x182>
 80134a4:	2b65      	cmp	r3, #101	; 0x65
 80134a6:	d07a      	beq.n	801359e <_scanf_float+0x1ee>
 80134a8:	d818      	bhi.n	80134dc <_scanf_float+0x12c>
 80134aa:	2b54      	cmp	r3, #84	; 0x54
 80134ac:	d066      	beq.n	801357c <_scanf_float+0x1cc>
 80134ae:	d811      	bhi.n	80134d4 <_scanf_float+0x124>
 80134b0:	2b4e      	cmp	r3, #78	; 0x4e
 80134b2:	d1b5      	bne.n	8013420 <_scanf_float+0x70>
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	d146      	bne.n	8013546 <_scanf_float+0x196>
 80134b8:	f1b9 0f00 	cmp.w	r9, #0
 80134bc:	d145      	bne.n	801354a <_scanf_float+0x19a>
 80134be:	6821      	ldr	r1, [r4, #0]
 80134c0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80134c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80134c8:	d13f      	bne.n	801354a <_scanf_float+0x19a>
 80134ca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80134ce:	6021      	str	r1, [r4, #0]
 80134d0:	2201      	movs	r2, #1
 80134d2:	e02e      	b.n	8013532 <_scanf_float+0x182>
 80134d4:	2b59      	cmp	r3, #89	; 0x59
 80134d6:	d01e      	beq.n	8013516 <_scanf_float+0x166>
 80134d8:	2b61      	cmp	r3, #97	; 0x61
 80134da:	e7de      	b.n	801349a <_scanf_float+0xea>
 80134dc:	2b6e      	cmp	r3, #110	; 0x6e
 80134de:	d0e9      	beq.n	80134b4 <_scanf_float+0x104>
 80134e0:	d815      	bhi.n	801350e <_scanf_float+0x15e>
 80134e2:	2b66      	cmp	r3, #102	; 0x66
 80134e4:	d043      	beq.n	801356e <_scanf_float+0x1be>
 80134e6:	2b69      	cmp	r3, #105	; 0x69
 80134e8:	d19a      	bne.n	8013420 <_scanf_float+0x70>
 80134ea:	f1bb 0f00 	cmp.w	fp, #0
 80134ee:	d138      	bne.n	8013562 <_scanf_float+0x1b2>
 80134f0:	f1b9 0f00 	cmp.w	r9, #0
 80134f4:	d197      	bne.n	8013426 <_scanf_float+0x76>
 80134f6:	6821      	ldr	r1, [r4, #0]
 80134f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80134fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013500:	d195      	bne.n	801342e <_scanf_float+0x7e>
 8013502:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013506:	6021      	str	r1, [r4, #0]
 8013508:	f04f 0b01 	mov.w	fp, #1
 801350c:	e011      	b.n	8013532 <_scanf_float+0x182>
 801350e:	2b74      	cmp	r3, #116	; 0x74
 8013510:	d034      	beq.n	801357c <_scanf_float+0x1cc>
 8013512:	2b79      	cmp	r3, #121	; 0x79
 8013514:	d184      	bne.n	8013420 <_scanf_float+0x70>
 8013516:	f1bb 0f07 	cmp.w	fp, #7
 801351a:	d181      	bne.n	8013420 <_scanf_float+0x70>
 801351c:	f04f 0b08 	mov.w	fp, #8
 8013520:	e007      	b.n	8013532 <_scanf_float+0x182>
 8013522:	eb12 0f0b 	cmn.w	r2, fp
 8013526:	f47f af7b 	bne.w	8013420 <_scanf_float+0x70>
 801352a:	6821      	ldr	r1, [r4, #0]
 801352c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013530:	6021      	str	r1, [r4, #0]
 8013532:	702b      	strb	r3, [r5, #0]
 8013534:	3501      	adds	r5, #1
 8013536:	e79a      	b.n	801346e <_scanf_float+0xbe>
 8013538:	6821      	ldr	r1, [r4, #0]
 801353a:	0608      	lsls	r0, r1, #24
 801353c:	f57f af70 	bpl.w	8013420 <_scanf_float+0x70>
 8013540:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013544:	e7f4      	b.n	8013530 <_scanf_float+0x180>
 8013546:	2a02      	cmp	r2, #2
 8013548:	d047      	beq.n	80135da <_scanf_float+0x22a>
 801354a:	f1bb 0f01 	cmp.w	fp, #1
 801354e:	d003      	beq.n	8013558 <_scanf_float+0x1a8>
 8013550:	f1bb 0f04 	cmp.w	fp, #4
 8013554:	f47f af64 	bne.w	8013420 <_scanf_float+0x70>
 8013558:	f10b 0b01 	add.w	fp, fp, #1
 801355c:	fa5f fb8b 	uxtb.w	fp, fp
 8013560:	e7e7      	b.n	8013532 <_scanf_float+0x182>
 8013562:	f1bb 0f03 	cmp.w	fp, #3
 8013566:	d0f7      	beq.n	8013558 <_scanf_float+0x1a8>
 8013568:	f1bb 0f05 	cmp.w	fp, #5
 801356c:	e7f2      	b.n	8013554 <_scanf_float+0x1a4>
 801356e:	f1bb 0f02 	cmp.w	fp, #2
 8013572:	f47f af55 	bne.w	8013420 <_scanf_float+0x70>
 8013576:	f04f 0b03 	mov.w	fp, #3
 801357a:	e7da      	b.n	8013532 <_scanf_float+0x182>
 801357c:	f1bb 0f06 	cmp.w	fp, #6
 8013580:	f47f af4e 	bne.w	8013420 <_scanf_float+0x70>
 8013584:	f04f 0b07 	mov.w	fp, #7
 8013588:	e7d3      	b.n	8013532 <_scanf_float+0x182>
 801358a:	6821      	ldr	r1, [r4, #0]
 801358c:	0588      	lsls	r0, r1, #22
 801358e:	f57f af47 	bpl.w	8013420 <_scanf_float+0x70>
 8013592:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013596:	6021      	str	r1, [r4, #0]
 8013598:	f8cd 9008 	str.w	r9, [sp, #8]
 801359c:	e7c9      	b.n	8013532 <_scanf_float+0x182>
 801359e:	6821      	ldr	r1, [r4, #0]
 80135a0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80135a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80135a8:	d006      	beq.n	80135b8 <_scanf_float+0x208>
 80135aa:	0548      	lsls	r0, r1, #21
 80135ac:	f57f af38 	bpl.w	8013420 <_scanf_float+0x70>
 80135b0:	f1b9 0f00 	cmp.w	r9, #0
 80135b4:	f43f af3b 	beq.w	801342e <_scanf_float+0x7e>
 80135b8:	0588      	lsls	r0, r1, #22
 80135ba:	bf58      	it	pl
 80135bc:	9802      	ldrpl	r0, [sp, #8]
 80135be:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80135c2:	bf58      	it	pl
 80135c4:	eba9 0000 	subpl.w	r0, r9, r0
 80135c8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80135cc:	bf58      	it	pl
 80135ce:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80135d2:	6021      	str	r1, [r4, #0]
 80135d4:	f04f 0900 	mov.w	r9, #0
 80135d8:	e7ab      	b.n	8013532 <_scanf_float+0x182>
 80135da:	2203      	movs	r2, #3
 80135dc:	e7a9      	b.n	8013532 <_scanf_float+0x182>
 80135de:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80135e2:	9205      	str	r2, [sp, #20]
 80135e4:	4631      	mov	r1, r6
 80135e6:	4638      	mov	r0, r7
 80135e8:	4798      	blx	r3
 80135ea:	9a05      	ldr	r2, [sp, #20]
 80135ec:	2800      	cmp	r0, #0
 80135ee:	f43f af04 	beq.w	80133fa <_scanf_float+0x4a>
 80135f2:	e715      	b.n	8013420 <_scanf_float+0x70>
 80135f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80135f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80135fc:	4632      	mov	r2, r6
 80135fe:	4638      	mov	r0, r7
 8013600:	4798      	blx	r3
 8013602:	6923      	ldr	r3, [r4, #16]
 8013604:	3b01      	subs	r3, #1
 8013606:	6123      	str	r3, [r4, #16]
 8013608:	e715      	b.n	8013436 <_scanf_float+0x86>
 801360a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801360e:	2b06      	cmp	r3, #6
 8013610:	d80a      	bhi.n	8013628 <_scanf_float+0x278>
 8013612:	f1bb 0f02 	cmp.w	fp, #2
 8013616:	d968      	bls.n	80136ea <_scanf_float+0x33a>
 8013618:	f1ab 0b03 	sub.w	fp, fp, #3
 801361c:	fa5f fb8b 	uxtb.w	fp, fp
 8013620:	eba5 0b0b 	sub.w	fp, r5, fp
 8013624:	455d      	cmp	r5, fp
 8013626:	d14b      	bne.n	80136c0 <_scanf_float+0x310>
 8013628:	6823      	ldr	r3, [r4, #0]
 801362a:	05da      	lsls	r2, r3, #23
 801362c:	d51f      	bpl.n	801366e <_scanf_float+0x2be>
 801362e:	055b      	lsls	r3, r3, #21
 8013630:	d468      	bmi.n	8013704 <_scanf_float+0x354>
 8013632:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013636:	6923      	ldr	r3, [r4, #16]
 8013638:	2965      	cmp	r1, #101	; 0x65
 801363a:	f103 33ff 	add.w	r3, r3, #4294967295
 801363e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013642:	6123      	str	r3, [r4, #16]
 8013644:	d00d      	beq.n	8013662 <_scanf_float+0x2b2>
 8013646:	2945      	cmp	r1, #69	; 0x45
 8013648:	d00b      	beq.n	8013662 <_scanf_float+0x2b2>
 801364a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801364e:	4632      	mov	r2, r6
 8013650:	4638      	mov	r0, r7
 8013652:	4798      	blx	r3
 8013654:	6923      	ldr	r3, [r4, #16]
 8013656:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801365a:	3b01      	subs	r3, #1
 801365c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013660:	6123      	str	r3, [r4, #16]
 8013662:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013666:	4632      	mov	r2, r6
 8013668:	4638      	mov	r0, r7
 801366a:	4798      	blx	r3
 801366c:	465d      	mov	r5, fp
 801366e:	6826      	ldr	r6, [r4, #0]
 8013670:	f016 0610 	ands.w	r6, r6, #16
 8013674:	d17a      	bne.n	801376c <_scanf_float+0x3bc>
 8013676:	702e      	strb	r6, [r5, #0]
 8013678:	6823      	ldr	r3, [r4, #0]
 801367a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801367e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013682:	d142      	bne.n	801370a <_scanf_float+0x35a>
 8013684:	9b02      	ldr	r3, [sp, #8]
 8013686:	eba9 0303 	sub.w	r3, r9, r3
 801368a:	425a      	negs	r2, r3
 801368c:	2b00      	cmp	r3, #0
 801368e:	d149      	bne.n	8013724 <_scanf_float+0x374>
 8013690:	2200      	movs	r2, #0
 8013692:	4641      	mov	r1, r8
 8013694:	4638      	mov	r0, r7
 8013696:	f000 ffdf 	bl	8014658 <_strtod_r>
 801369a:	6825      	ldr	r5, [r4, #0]
 801369c:	f8da 3000 	ldr.w	r3, [sl]
 80136a0:	f015 0f02 	tst.w	r5, #2
 80136a4:	f103 0204 	add.w	r2, r3, #4
 80136a8:	ec59 8b10 	vmov	r8, r9, d0
 80136ac:	f8ca 2000 	str.w	r2, [sl]
 80136b0:	d043      	beq.n	801373a <_scanf_float+0x38a>
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	e9c3 8900 	strd	r8, r9, [r3]
 80136b8:	68e3      	ldr	r3, [r4, #12]
 80136ba:	3301      	adds	r3, #1
 80136bc:	60e3      	str	r3, [r4, #12]
 80136be:	e6be      	b.n	801343e <_scanf_float+0x8e>
 80136c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80136c8:	4632      	mov	r2, r6
 80136ca:	4638      	mov	r0, r7
 80136cc:	4798      	blx	r3
 80136ce:	6923      	ldr	r3, [r4, #16]
 80136d0:	3b01      	subs	r3, #1
 80136d2:	6123      	str	r3, [r4, #16]
 80136d4:	e7a6      	b.n	8013624 <_scanf_float+0x274>
 80136d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80136de:	4632      	mov	r2, r6
 80136e0:	4638      	mov	r0, r7
 80136e2:	4798      	blx	r3
 80136e4:	6923      	ldr	r3, [r4, #16]
 80136e6:	3b01      	subs	r3, #1
 80136e8:	6123      	str	r3, [r4, #16]
 80136ea:	4545      	cmp	r5, r8
 80136ec:	d8f3      	bhi.n	80136d6 <_scanf_float+0x326>
 80136ee:	e6a5      	b.n	801343c <_scanf_float+0x8c>
 80136f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136f4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80136f8:	4632      	mov	r2, r6
 80136fa:	4638      	mov	r0, r7
 80136fc:	4798      	blx	r3
 80136fe:	6923      	ldr	r3, [r4, #16]
 8013700:	3b01      	subs	r3, #1
 8013702:	6123      	str	r3, [r4, #16]
 8013704:	4545      	cmp	r5, r8
 8013706:	d8f3      	bhi.n	80136f0 <_scanf_float+0x340>
 8013708:	e698      	b.n	801343c <_scanf_float+0x8c>
 801370a:	9b03      	ldr	r3, [sp, #12]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d0bf      	beq.n	8013690 <_scanf_float+0x2e0>
 8013710:	9904      	ldr	r1, [sp, #16]
 8013712:	230a      	movs	r3, #10
 8013714:	4632      	mov	r2, r6
 8013716:	3101      	adds	r1, #1
 8013718:	4638      	mov	r0, r7
 801371a:	f001 f829 	bl	8014770 <_strtol_r>
 801371e:	9b03      	ldr	r3, [sp, #12]
 8013720:	9d04      	ldr	r5, [sp, #16]
 8013722:	1ac2      	subs	r2, r0, r3
 8013724:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013728:	429d      	cmp	r5, r3
 801372a:	bf28      	it	cs
 801372c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013730:	490f      	ldr	r1, [pc, #60]	; (8013770 <_scanf_float+0x3c0>)
 8013732:	4628      	mov	r0, r5
 8013734:	f000 f8e8 	bl	8013908 <siprintf>
 8013738:	e7aa      	b.n	8013690 <_scanf_float+0x2e0>
 801373a:	f015 0504 	ands.w	r5, r5, #4
 801373e:	d1b8      	bne.n	80136b2 <_scanf_float+0x302>
 8013740:	681f      	ldr	r7, [r3, #0]
 8013742:	ee10 2a10 	vmov	r2, s0
 8013746:	464b      	mov	r3, r9
 8013748:	ee10 0a10 	vmov	r0, s0
 801374c:	4649      	mov	r1, r9
 801374e:	f7ed fa05 	bl	8000b5c <__aeabi_dcmpun>
 8013752:	b128      	cbz	r0, 8013760 <_scanf_float+0x3b0>
 8013754:	4628      	mov	r0, r5
 8013756:	f000 f89d 	bl	8013894 <nanf>
 801375a:	ed87 0a00 	vstr	s0, [r7]
 801375e:	e7ab      	b.n	80136b8 <_scanf_float+0x308>
 8013760:	4640      	mov	r0, r8
 8013762:	4649      	mov	r1, r9
 8013764:	f7ed fa58 	bl	8000c18 <__aeabi_d2f>
 8013768:	6038      	str	r0, [r7, #0]
 801376a:	e7a5      	b.n	80136b8 <_scanf_float+0x308>
 801376c:	2600      	movs	r6, #0
 801376e:	e666      	b.n	801343e <_scanf_float+0x8e>
 8013770:	080181d6 	.word	0x080181d6

08013774 <iprintf>:
 8013774:	b40f      	push	{r0, r1, r2, r3}
 8013776:	4b0a      	ldr	r3, [pc, #40]	; (80137a0 <iprintf+0x2c>)
 8013778:	b513      	push	{r0, r1, r4, lr}
 801377a:	681c      	ldr	r4, [r3, #0]
 801377c:	b124      	cbz	r4, 8013788 <iprintf+0x14>
 801377e:	69a3      	ldr	r3, [r4, #24]
 8013780:	b913      	cbnz	r3, 8013788 <iprintf+0x14>
 8013782:	4620      	mov	r0, r4
 8013784:	f002 f83c 	bl	8015800 <__sinit>
 8013788:	ab05      	add	r3, sp, #20
 801378a:	9a04      	ldr	r2, [sp, #16]
 801378c:	68a1      	ldr	r1, [r4, #8]
 801378e:	9301      	str	r3, [sp, #4]
 8013790:	4620      	mov	r0, r4
 8013792:	f003 fc7d 	bl	8017090 <_vfiprintf_r>
 8013796:	b002      	add	sp, #8
 8013798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801379c:	b004      	add	sp, #16
 801379e:	4770      	bx	lr
 80137a0:	2000000c 	.word	0x2000000c

080137a4 <putchar>:
 80137a4:	b538      	push	{r3, r4, r5, lr}
 80137a6:	4b08      	ldr	r3, [pc, #32]	; (80137c8 <putchar+0x24>)
 80137a8:	681c      	ldr	r4, [r3, #0]
 80137aa:	4605      	mov	r5, r0
 80137ac:	b124      	cbz	r4, 80137b8 <putchar+0x14>
 80137ae:	69a3      	ldr	r3, [r4, #24]
 80137b0:	b913      	cbnz	r3, 80137b8 <putchar+0x14>
 80137b2:	4620      	mov	r0, r4
 80137b4:	f002 f824 	bl	8015800 <__sinit>
 80137b8:	68a2      	ldr	r2, [r4, #8]
 80137ba:	4629      	mov	r1, r5
 80137bc:	4620      	mov	r0, r4
 80137be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137c2:	f003 bed3 	b.w	801756c <_putc_r>
 80137c6:	bf00      	nop
 80137c8:	2000000c 	.word	0x2000000c

080137cc <_puts_r>:
 80137cc:	b570      	push	{r4, r5, r6, lr}
 80137ce:	460e      	mov	r6, r1
 80137d0:	4605      	mov	r5, r0
 80137d2:	b118      	cbz	r0, 80137dc <_puts_r+0x10>
 80137d4:	6983      	ldr	r3, [r0, #24]
 80137d6:	b90b      	cbnz	r3, 80137dc <_puts_r+0x10>
 80137d8:	f002 f812 	bl	8015800 <__sinit>
 80137dc:	69ab      	ldr	r3, [r5, #24]
 80137de:	68ac      	ldr	r4, [r5, #8]
 80137e0:	b913      	cbnz	r3, 80137e8 <_puts_r+0x1c>
 80137e2:	4628      	mov	r0, r5
 80137e4:	f002 f80c 	bl	8015800 <__sinit>
 80137e8:	4b23      	ldr	r3, [pc, #140]	; (8013878 <_puts_r+0xac>)
 80137ea:	429c      	cmp	r4, r3
 80137ec:	d117      	bne.n	801381e <_puts_r+0x52>
 80137ee:	686c      	ldr	r4, [r5, #4]
 80137f0:	89a3      	ldrh	r3, [r4, #12]
 80137f2:	071b      	lsls	r3, r3, #28
 80137f4:	d51d      	bpl.n	8013832 <_puts_r+0x66>
 80137f6:	6923      	ldr	r3, [r4, #16]
 80137f8:	b1db      	cbz	r3, 8013832 <_puts_r+0x66>
 80137fa:	3e01      	subs	r6, #1
 80137fc:	68a3      	ldr	r3, [r4, #8]
 80137fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013802:	3b01      	subs	r3, #1
 8013804:	60a3      	str	r3, [r4, #8]
 8013806:	b9e9      	cbnz	r1, 8013844 <_puts_r+0x78>
 8013808:	2b00      	cmp	r3, #0
 801380a:	da2e      	bge.n	801386a <_puts_r+0x9e>
 801380c:	4622      	mov	r2, r4
 801380e:	210a      	movs	r1, #10
 8013810:	4628      	mov	r0, r5
 8013812:	f000 ffdf 	bl	80147d4 <__swbuf_r>
 8013816:	3001      	adds	r0, #1
 8013818:	d011      	beq.n	801383e <_puts_r+0x72>
 801381a:	200a      	movs	r0, #10
 801381c:	e011      	b.n	8013842 <_puts_r+0x76>
 801381e:	4b17      	ldr	r3, [pc, #92]	; (801387c <_puts_r+0xb0>)
 8013820:	429c      	cmp	r4, r3
 8013822:	d101      	bne.n	8013828 <_puts_r+0x5c>
 8013824:	68ac      	ldr	r4, [r5, #8]
 8013826:	e7e3      	b.n	80137f0 <_puts_r+0x24>
 8013828:	4b15      	ldr	r3, [pc, #84]	; (8013880 <_puts_r+0xb4>)
 801382a:	429c      	cmp	r4, r3
 801382c:	bf08      	it	eq
 801382e:	68ec      	ldreq	r4, [r5, #12]
 8013830:	e7de      	b.n	80137f0 <_puts_r+0x24>
 8013832:	4621      	mov	r1, r4
 8013834:	4628      	mov	r0, r5
 8013836:	f001 f831 	bl	801489c <__swsetup_r>
 801383a:	2800      	cmp	r0, #0
 801383c:	d0dd      	beq.n	80137fa <_puts_r+0x2e>
 801383e:	f04f 30ff 	mov.w	r0, #4294967295
 8013842:	bd70      	pop	{r4, r5, r6, pc}
 8013844:	2b00      	cmp	r3, #0
 8013846:	da04      	bge.n	8013852 <_puts_r+0x86>
 8013848:	69a2      	ldr	r2, [r4, #24]
 801384a:	429a      	cmp	r2, r3
 801384c:	dc06      	bgt.n	801385c <_puts_r+0x90>
 801384e:	290a      	cmp	r1, #10
 8013850:	d004      	beq.n	801385c <_puts_r+0x90>
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	1c5a      	adds	r2, r3, #1
 8013856:	6022      	str	r2, [r4, #0]
 8013858:	7019      	strb	r1, [r3, #0]
 801385a:	e7cf      	b.n	80137fc <_puts_r+0x30>
 801385c:	4622      	mov	r2, r4
 801385e:	4628      	mov	r0, r5
 8013860:	f000 ffb8 	bl	80147d4 <__swbuf_r>
 8013864:	3001      	adds	r0, #1
 8013866:	d1c9      	bne.n	80137fc <_puts_r+0x30>
 8013868:	e7e9      	b.n	801383e <_puts_r+0x72>
 801386a:	6823      	ldr	r3, [r4, #0]
 801386c:	200a      	movs	r0, #10
 801386e:	1c5a      	adds	r2, r3, #1
 8013870:	6022      	str	r2, [r4, #0]
 8013872:	7018      	strb	r0, [r3, #0]
 8013874:	e7e5      	b.n	8013842 <_puts_r+0x76>
 8013876:	bf00      	nop
 8013878:	08018260 	.word	0x08018260
 801387c:	08018280 	.word	0x08018280
 8013880:	08018240 	.word	0x08018240

08013884 <puts>:
 8013884:	4b02      	ldr	r3, [pc, #8]	; (8013890 <puts+0xc>)
 8013886:	4601      	mov	r1, r0
 8013888:	6818      	ldr	r0, [r3, #0]
 801388a:	f7ff bf9f 	b.w	80137cc <_puts_r>
 801388e:	bf00      	nop
 8013890:	2000000c 	.word	0x2000000c

08013894 <nanf>:
 8013894:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801389c <nanf+0x8>
 8013898:	4770      	bx	lr
 801389a:	bf00      	nop
 801389c:	7fc00000 	.word	0x7fc00000

080138a0 <sniprintf>:
 80138a0:	b40c      	push	{r2, r3}
 80138a2:	b530      	push	{r4, r5, lr}
 80138a4:	4b17      	ldr	r3, [pc, #92]	; (8013904 <sniprintf+0x64>)
 80138a6:	1e0c      	subs	r4, r1, #0
 80138a8:	b09d      	sub	sp, #116	; 0x74
 80138aa:	681d      	ldr	r5, [r3, #0]
 80138ac:	da08      	bge.n	80138c0 <sniprintf+0x20>
 80138ae:	238b      	movs	r3, #139	; 0x8b
 80138b0:	602b      	str	r3, [r5, #0]
 80138b2:	f04f 30ff 	mov.w	r0, #4294967295
 80138b6:	b01d      	add	sp, #116	; 0x74
 80138b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138bc:	b002      	add	sp, #8
 80138be:	4770      	bx	lr
 80138c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80138c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80138c8:	bf14      	ite	ne
 80138ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80138ce:	4623      	moveq	r3, r4
 80138d0:	9304      	str	r3, [sp, #16]
 80138d2:	9307      	str	r3, [sp, #28]
 80138d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80138d8:	9002      	str	r0, [sp, #8]
 80138da:	9006      	str	r0, [sp, #24]
 80138dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80138e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80138e2:	ab21      	add	r3, sp, #132	; 0x84
 80138e4:	a902      	add	r1, sp, #8
 80138e6:	4628      	mov	r0, r5
 80138e8:	9301      	str	r3, [sp, #4]
 80138ea:	f003 f905 	bl	8016af8 <_svfiprintf_r>
 80138ee:	1c43      	adds	r3, r0, #1
 80138f0:	bfbc      	itt	lt
 80138f2:	238b      	movlt	r3, #139	; 0x8b
 80138f4:	602b      	strlt	r3, [r5, #0]
 80138f6:	2c00      	cmp	r4, #0
 80138f8:	d0dd      	beq.n	80138b6 <sniprintf+0x16>
 80138fa:	9b02      	ldr	r3, [sp, #8]
 80138fc:	2200      	movs	r2, #0
 80138fe:	701a      	strb	r2, [r3, #0]
 8013900:	e7d9      	b.n	80138b6 <sniprintf+0x16>
 8013902:	bf00      	nop
 8013904:	2000000c 	.word	0x2000000c

08013908 <siprintf>:
 8013908:	b40e      	push	{r1, r2, r3}
 801390a:	b500      	push	{lr}
 801390c:	b09c      	sub	sp, #112	; 0x70
 801390e:	ab1d      	add	r3, sp, #116	; 0x74
 8013910:	9002      	str	r0, [sp, #8]
 8013912:	9006      	str	r0, [sp, #24]
 8013914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013918:	4809      	ldr	r0, [pc, #36]	; (8013940 <siprintf+0x38>)
 801391a:	9107      	str	r1, [sp, #28]
 801391c:	9104      	str	r1, [sp, #16]
 801391e:	4909      	ldr	r1, [pc, #36]	; (8013944 <siprintf+0x3c>)
 8013920:	f853 2b04 	ldr.w	r2, [r3], #4
 8013924:	9105      	str	r1, [sp, #20]
 8013926:	6800      	ldr	r0, [r0, #0]
 8013928:	9301      	str	r3, [sp, #4]
 801392a:	a902      	add	r1, sp, #8
 801392c:	f003 f8e4 	bl	8016af8 <_svfiprintf_r>
 8013930:	9b02      	ldr	r3, [sp, #8]
 8013932:	2200      	movs	r2, #0
 8013934:	701a      	strb	r2, [r3, #0]
 8013936:	b01c      	add	sp, #112	; 0x70
 8013938:	f85d eb04 	ldr.w	lr, [sp], #4
 801393c:	b003      	add	sp, #12
 801393e:	4770      	bx	lr
 8013940:	2000000c 	.word	0x2000000c
 8013944:	ffff0208 	.word	0xffff0208

08013948 <siscanf>:
 8013948:	b40e      	push	{r1, r2, r3}
 801394a:	b530      	push	{r4, r5, lr}
 801394c:	b09c      	sub	sp, #112	; 0x70
 801394e:	ac1f      	add	r4, sp, #124	; 0x7c
 8013950:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013954:	f854 5b04 	ldr.w	r5, [r4], #4
 8013958:	f8ad 2014 	strh.w	r2, [sp, #20]
 801395c:	9002      	str	r0, [sp, #8]
 801395e:	9006      	str	r0, [sp, #24]
 8013960:	f7ec fc4e 	bl	8000200 <strlen>
 8013964:	4b0b      	ldr	r3, [pc, #44]	; (8013994 <siscanf+0x4c>)
 8013966:	9003      	str	r0, [sp, #12]
 8013968:	9007      	str	r0, [sp, #28]
 801396a:	930b      	str	r3, [sp, #44]	; 0x2c
 801396c:	480a      	ldr	r0, [pc, #40]	; (8013998 <siscanf+0x50>)
 801396e:	9401      	str	r4, [sp, #4]
 8013970:	2300      	movs	r3, #0
 8013972:	930f      	str	r3, [sp, #60]	; 0x3c
 8013974:	9314      	str	r3, [sp, #80]	; 0x50
 8013976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801397a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801397e:	462a      	mov	r2, r5
 8013980:	4623      	mov	r3, r4
 8013982:	a902      	add	r1, sp, #8
 8013984:	6800      	ldr	r0, [r0, #0]
 8013986:	f003 fa09 	bl	8016d9c <__ssvfiscanf_r>
 801398a:	b01c      	add	sp, #112	; 0x70
 801398c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013990:	b003      	add	sp, #12
 8013992:	4770      	bx	lr
 8013994:	080139bf 	.word	0x080139bf
 8013998:	2000000c 	.word	0x2000000c

0801399c <__sread>:
 801399c:	b510      	push	{r4, lr}
 801399e:	460c      	mov	r4, r1
 80139a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139a4:	f003 fe18 	bl	80175d8 <_read_r>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	bfab      	itete	ge
 80139ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80139ae:	89a3      	ldrhlt	r3, [r4, #12]
 80139b0:	181b      	addge	r3, r3, r0
 80139b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80139b6:	bfac      	ite	ge
 80139b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80139ba:	81a3      	strhlt	r3, [r4, #12]
 80139bc:	bd10      	pop	{r4, pc}

080139be <__seofread>:
 80139be:	2000      	movs	r0, #0
 80139c0:	4770      	bx	lr

080139c2 <__swrite>:
 80139c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c6:	461f      	mov	r7, r3
 80139c8:	898b      	ldrh	r3, [r1, #12]
 80139ca:	05db      	lsls	r3, r3, #23
 80139cc:	4605      	mov	r5, r0
 80139ce:	460c      	mov	r4, r1
 80139d0:	4616      	mov	r6, r2
 80139d2:	d505      	bpl.n	80139e0 <__swrite+0x1e>
 80139d4:	2302      	movs	r3, #2
 80139d6:	2200      	movs	r2, #0
 80139d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139dc:	f002 fae2 	bl	8015fa4 <_lseek_r>
 80139e0:	89a3      	ldrh	r3, [r4, #12]
 80139e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80139ea:	81a3      	strh	r3, [r4, #12]
 80139ec:	4632      	mov	r2, r6
 80139ee:	463b      	mov	r3, r7
 80139f0:	4628      	mov	r0, r5
 80139f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139f6:	f000 bf3f 	b.w	8014878 <_write_r>

080139fa <__sseek>:
 80139fa:	b510      	push	{r4, lr}
 80139fc:	460c      	mov	r4, r1
 80139fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a02:	f002 facf 	bl	8015fa4 <_lseek_r>
 8013a06:	1c43      	adds	r3, r0, #1
 8013a08:	89a3      	ldrh	r3, [r4, #12]
 8013a0a:	bf15      	itete	ne
 8013a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a16:	81a3      	strheq	r3, [r4, #12]
 8013a18:	bf18      	it	ne
 8013a1a:	81a3      	strhne	r3, [r4, #12]
 8013a1c:	bd10      	pop	{r4, pc}

08013a1e <__sclose>:
 8013a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a22:	f000 bfa9 	b.w	8014978 <_close_r>

08013a26 <strcpy>:
 8013a26:	4603      	mov	r3, r0
 8013a28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a2c:	f803 2b01 	strb.w	r2, [r3], #1
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	d1f9      	bne.n	8013a28 <strcpy+0x2>
 8013a34:	4770      	bx	lr

08013a36 <sulp>:
 8013a36:	b570      	push	{r4, r5, r6, lr}
 8013a38:	4604      	mov	r4, r0
 8013a3a:	460d      	mov	r5, r1
 8013a3c:	ec45 4b10 	vmov	d0, r4, r5
 8013a40:	4616      	mov	r6, r2
 8013a42:	f002 fe15 	bl	8016670 <__ulp>
 8013a46:	ec51 0b10 	vmov	r0, r1, d0
 8013a4a:	b17e      	cbz	r6, 8013a6c <sulp+0x36>
 8013a4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013a50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	dd09      	ble.n	8013a6c <sulp+0x36>
 8013a58:	051b      	lsls	r3, r3, #20
 8013a5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013a5e:	2400      	movs	r4, #0
 8013a60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013a64:	4622      	mov	r2, r4
 8013a66:	462b      	mov	r3, r5
 8013a68:	f7ec fdde 	bl	8000628 <__aeabi_dmul>
 8013a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013a70 <_strtod_l>:
 8013a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a74:	461f      	mov	r7, r3
 8013a76:	b0a1      	sub	sp, #132	; 0x84
 8013a78:	2300      	movs	r3, #0
 8013a7a:	4681      	mov	r9, r0
 8013a7c:	4638      	mov	r0, r7
 8013a7e:	460e      	mov	r6, r1
 8013a80:	9217      	str	r2, [sp, #92]	; 0x5c
 8013a82:	931c      	str	r3, [sp, #112]	; 0x70
 8013a84:	f002 fa7e 	bl	8015f84 <__localeconv_l>
 8013a88:	4680      	mov	r8, r0
 8013a8a:	6800      	ldr	r0, [r0, #0]
 8013a8c:	f7ec fbb8 	bl	8000200 <strlen>
 8013a90:	f04f 0a00 	mov.w	sl, #0
 8013a94:	4604      	mov	r4, r0
 8013a96:	f04f 0b00 	mov.w	fp, #0
 8013a9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8013a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013a9e:	781a      	ldrb	r2, [r3, #0]
 8013aa0:	2a0d      	cmp	r2, #13
 8013aa2:	d832      	bhi.n	8013b0a <_strtod_l+0x9a>
 8013aa4:	2a09      	cmp	r2, #9
 8013aa6:	d236      	bcs.n	8013b16 <_strtod_l+0xa6>
 8013aa8:	2a00      	cmp	r2, #0
 8013aaa:	d03e      	beq.n	8013b2a <_strtod_l+0xba>
 8013aac:	2300      	movs	r3, #0
 8013aae:	930d      	str	r3, [sp, #52]	; 0x34
 8013ab0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013ab2:	782b      	ldrb	r3, [r5, #0]
 8013ab4:	2b30      	cmp	r3, #48	; 0x30
 8013ab6:	f040 80ac 	bne.w	8013c12 <_strtod_l+0x1a2>
 8013aba:	786b      	ldrb	r3, [r5, #1]
 8013abc:	2b58      	cmp	r3, #88	; 0x58
 8013abe:	d001      	beq.n	8013ac4 <_strtod_l+0x54>
 8013ac0:	2b78      	cmp	r3, #120	; 0x78
 8013ac2:	d167      	bne.n	8013b94 <_strtod_l+0x124>
 8013ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ac6:	9301      	str	r3, [sp, #4]
 8013ac8:	ab1c      	add	r3, sp, #112	; 0x70
 8013aca:	9300      	str	r3, [sp, #0]
 8013acc:	9702      	str	r7, [sp, #8]
 8013ace:	ab1d      	add	r3, sp, #116	; 0x74
 8013ad0:	4a88      	ldr	r2, [pc, #544]	; (8013cf4 <_strtod_l+0x284>)
 8013ad2:	a91b      	add	r1, sp, #108	; 0x6c
 8013ad4:	4648      	mov	r0, r9
 8013ad6:	f001 ff6c 	bl	80159b2 <__gethex>
 8013ada:	f010 0407 	ands.w	r4, r0, #7
 8013ade:	4606      	mov	r6, r0
 8013ae0:	d005      	beq.n	8013aee <_strtod_l+0x7e>
 8013ae2:	2c06      	cmp	r4, #6
 8013ae4:	d12b      	bne.n	8013b3e <_strtod_l+0xce>
 8013ae6:	3501      	adds	r5, #1
 8013ae8:	2300      	movs	r3, #0
 8013aea:	951b      	str	r5, [sp, #108]	; 0x6c
 8013aec:	930d      	str	r3, [sp, #52]	; 0x34
 8013aee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	f040 859a 	bne.w	801462a <_strtod_l+0xbba>
 8013af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013af8:	b1e3      	cbz	r3, 8013b34 <_strtod_l+0xc4>
 8013afa:	4652      	mov	r2, sl
 8013afc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013b00:	ec43 2b10 	vmov	d0, r2, r3
 8013b04:	b021      	add	sp, #132	; 0x84
 8013b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0a:	2a2b      	cmp	r2, #43	; 0x2b
 8013b0c:	d015      	beq.n	8013b3a <_strtod_l+0xca>
 8013b0e:	2a2d      	cmp	r2, #45	; 0x2d
 8013b10:	d004      	beq.n	8013b1c <_strtod_l+0xac>
 8013b12:	2a20      	cmp	r2, #32
 8013b14:	d1ca      	bne.n	8013aac <_strtod_l+0x3c>
 8013b16:	3301      	adds	r3, #1
 8013b18:	931b      	str	r3, [sp, #108]	; 0x6c
 8013b1a:	e7bf      	b.n	8013a9c <_strtod_l+0x2c>
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	920d      	str	r2, [sp, #52]	; 0x34
 8013b20:	1c5a      	adds	r2, r3, #1
 8013b22:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b24:	785b      	ldrb	r3, [r3, #1]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d1c2      	bne.n	8013ab0 <_strtod_l+0x40>
 8013b2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013b2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	f040 8579 	bne.w	8014626 <_strtod_l+0xbb6>
 8013b34:	4652      	mov	r2, sl
 8013b36:	465b      	mov	r3, fp
 8013b38:	e7e2      	b.n	8013b00 <_strtod_l+0x90>
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	e7ef      	b.n	8013b1e <_strtod_l+0xae>
 8013b3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013b40:	b13a      	cbz	r2, 8013b52 <_strtod_l+0xe2>
 8013b42:	2135      	movs	r1, #53	; 0x35
 8013b44:	a81e      	add	r0, sp, #120	; 0x78
 8013b46:	f002 fe8b 	bl	8016860 <__copybits>
 8013b4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013b4c:	4648      	mov	r0, r9
 8013b4e:	f002 faf8 	bl	8016142 <_Bfree>
 8013b52:	3c01      	subs	r4, #1
 8013b54:	2c04      	cmp	r4, #4
 8013b56:	d806      	bhi.n	8013b66 <_strtod_l+0xf6>
 8013b58:	e8df f004 	tbb	[pc, r4]
 8013b5c:	1714030a 	.word	0x1714030a
 8013b60:	0a          	.byte	0x0a
 8013b61:	00          	.byte	0x00
 8013b62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013b66:	0730      	lsls	r0, r6, #28
 8013b68:	d5c1      	bpl.n	8013aee <_strtod_l+0x7e>
 8013b6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013b6e:	e7be      	b.n	8013aee <_strtod_l+0x7e>
 8013b70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013b74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013b76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013b7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013b7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013b82:	e7f0      	b.n	8013b66 <_strtod_l+0xf6>
 8013b84:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013cf8 <_strtod_l+0x288>
 8013b88:	e7ed      	b.n	8013b66 <_strtod_l+0xf6>
 8013b8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013b8e:	f04f 3aff 	mov.w	sl, #4294967295
 8013b92:	e7e8      	b.n	8013b66 <_strtod_l+0xf6>
 8013b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b96:	1c5a      	adds	r2, r3, #1
 8013b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8013b9a:	785b      	ldrb	r3, [r3, #1]
 8013b9c:	2b30      	cmp	r3, #48	; 0x30
 8013b9e:	d0f9      	beq.n	8013b94 <_strtod_l+0x124>
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d0a4      	beq.n	8013aee <_strtod_l+0x7e>
 8013ba4:	2301      	movs	r3, #1
 8013ba6:	2500      	movs	r5, #0
 8013ba8:	9306      	str	r3, [sp, #24]
 8013baa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013bac:	9308      	str	r3, [sp, #32]
 8013bae:	9507      	str	r5, [sp, #28]
 8013bb0:	9505      	str	r5, [sp, #20]
 8013bb2:	220a      	movs	r2, #10
 8013bb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013bb6:	7807      	ldrb	r7, [r0, #0]
 8013bb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013bbc:	b2d9      	uxtb	r1, r3
 8013bbe:	2909      	cmp	r1, #9
 8013bc0:	d929      	bls.n	8013c16 <_strtod_l+0x1a6>
 8013bc2:	4622      	mov	r2, r4
 8013bc4:	f8d8 1000 	ldr.w	r1, [r8]
 8013bc8:	f003 fd5a 	bl	8017680 <strncmp>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	d031      	beq.n	8013c34 <_strtod_l+0x1c4>
 8013bd0:	2000      	movs	r0, #0
 8013bd2:	9c05      	ldr	r4, [sp, #20]
 8013bd4:	9004      	str	r0, [sp, #16]
 8013bd6:	463b      	mov	r3, r7
 8013bd8:	4602      	mov	r2, r0
 8013bda:	2b65      	cmp	r3, #101	; 0x65
 8013bdc:	d001      	beq.n	8013be2 <_strtod_l+0x172>
 8013bde:	2b45      	cmp	r3, #69	; 0x45
 8013be0:	d114      	bne.n	8013c0c <_strtod_l+0x19c>
 8013be2:	b924      	cbnz	r4, 8013bee <_strtod_l+0x17e>
 8013be4:	b910      	cbnz	r0, 8013bec <_strtod_l+0x17c>
 8013be6:	9b06      	ldr	r3, [sp, #24]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d09e      	beq.n	8013b2a <_strtod_l+0xba>
 8013bec:	2400      	movs	r4, #0
 8013bee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013bf0:	1c73      	adds	r3, r6, #1
 8013bf2:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bf4:	7873      	ldrb	r3, [r6, #1]
 8013bf6:	2b2b      	cmp	r3, #43	; 0x2b
 8013bf8:	d078      	beq.n	8013cec <_strtod_l+0x27c>
 8013bfa:	2b2d      	cmp	r3, #45	; 0x2d
 8013bfc:	d070      	beq.n	8013ce0 <_strtod_l+0x270>
 8013bfe:	f04f 0c00 	mov.w	ip, #0
 8013c02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013c06:	2f09      	cmp	r7, #9
 8013c08:	d97c      	bls.n	8013d04 <_strtod_l+0x294>
 8013c0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c0c:	f04f 0e00 	mov.w	lr, #0
 8013c10:	e09a      	b.n	8013d48 <_strtod_l+0x2d8>
 8013c12:	2300      	movs	r3, #0
 8013c14:	e7c7      	b.n	8013ba6 <_strtod_l+0x136>
 8013c16:	9905      	ldr	r1, [sp, #20]
 8013c18:	2908      	cmp	r1, #8
 8013c1a:	bfdd      	ittte	le
 8013c1c:	9907      	ldrle	r1, [sp, #28]
 8013c1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8013c22:	9307      	strle	r3, [sp, #28]
 8013c24:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013c28:	9b05      	ldr	r3, [sp, #20]
 8013c2a:	3001      	adds	r0, #1
 8013c2c:	3301      	adds	r3, #1
 8013c2e:	9305      	str	r3, [sp, #20]
 8013c30:	901b      	str	r0, [sp, #108]	; 0x6c
 8013c32:	e7bf      	b.n	8013bb4 <_strtod_l+0x144>
 8013c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c36:	191a      	adds	r2, r3, r4
 8013c38:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c3a:	9a05      	ldr	r2, [sp, #20]
 8013c3c:	5d1b      	ldrb	r3, [r3, r4]
 8013c3e:	2a00      	cmp	r2, #0
 8013c40:	d037      	beq.n	8013cb2 <_strtod_l+0x242>
 8013c42:	9c05      	ldr	r4, [sp, #20]
 8013c44:	4602      	mov	r2, r0
 8013c46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013c4a:	2909      	cmp	r1, #9
 8013c4c:	d913      	bls.n	8013c76 <_strtod_l+0x206>
 8013c4e:	2101      	movs	r1, #1
 8013c50:	9104      	str	r1, [sp, #16]
 8013c52:	e7c2      	b.n	8013bda <_strtod_l+0x16a>
 8013c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c56:	1c5a      	adds	r2, r3, #1
 8013c58:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c5a:	785b      	ldrb	r3, [r3, #1]
 8013c5c:	3001      	adds	r0, #1
 8013c5e:	2b30      	cmp	r3, #48	; 0x30
 8013c60:	d0f8      	beq.n	8013c54 <_strtod_l+0x1e4>
 8013c62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013c66:	2a08      	cmp	r2, #8
 8013c68:	f200 84e4 	bhi.w	8014634 <_strtod_l+0xbc4>
 8013c6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013c6e:	9208      	str	r2, [sp, #32]
 8013c70:	4602      	mov	r2, r0
 8013c72:	2000      	movs	r0, #0
 8013c74:	4604      	mov	r4, r0
 8013c76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013c7a:	f100 0101 	add.w	r1, r0, #1
 8013c7e:	d012      	beq.n	8013ca6 <_strtod_l+0x236>
 8013c80:	440a      	add	r2, r1
 8013c82:	eb00 0c04 	add.w	ip, r0, r4
 8013c86:	4621      	mov	r1, r4
 8013c88:	270a      	movs	r7, #10
 8013c8a:	458c      	cmp	ip, r1
 8013c8c:	d113      	bne.n	8013cb6 <_strtod_l+0x246>
 8013c8e:	1821      	adds	r1, r4, r0
 8013c90:	2908      	cmp	r1, #8
 8013c92:	f104 0401 	add.w	r4, r4, #1
 8013c96:	4404      	add	r4, r0
 8013c98:	dc19      	bgt.n	8013cce <_strtod_l+0x25e>
 8013c9a:	9b07      	ldr	r3, [sp, #28]
 8013c9c:	210a      	movs	r1, #10
 8013c9e:	fb01 e303 	mla	r3, r1, r3, lr
 8013ca2:	9307      	str	r3, [sp, #28]
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ca8:	1c58      	adds	r0, r3, #1
 8013caa:	901b      	str	r0, [sp, #108]	; 0x6c
 8013cac:	785b      	ldrb	r3, [r3, #1]
 8013cae:	4608      	mov	r0, r1
 8013cb0:	e7c9      	b.n	8013c46 <_strtod_l+0x1d6>
 8013cb2:	9805      	ldr	r0, [sp, #20]
 8013cb4:	e7d3      	b.n	8013c5e <_strtod_l+0x1ee>
 8013cb6:	2908      	cmp	r1, #8
 8013cb8:	f101 0101 	add.w	r1, r1, #1
 8013cbc:	dc03      	bgt.n	8013cc6 <_strtod_l+0x256>
 8013cbe:	9b07      	ldr	r3, [sp, #28]
 8013cc0:	437b      	muls	r3, r7
 8013cc2:	9307      	str	r3, [sp, #28]
 8013cc4:	e7e1      	b.n	8013c8a <_strtod_l+0x21a>
 8013cc6:	2910      	cmp	r1, #16
 8013cc8:	bfd8      	it	le
 8013cca:	437d      	mulle	r5, r7
 8013ccc:	e7dd      	b.n	8013c8a <_strtod_l+0x21a>
 8013cce:	2c10      	cmp	r4, #16
 8013cd0:	bfdc      	itt	le
 8013cd2:	210a      	movle	r1, #10
 8013cd4:	fb01 e505 	mlale	r5, r1, r5, lr
 8013cd8:	e7e4      	b.n	8013ca4 <_strtod_l+0x234>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	9304      	str	r3, [sp, #16]
 8013cde:	e781      	b.n	8013be4 <_strtod_l+0x174>
 8013ce0:	f04f 0c01 	mov.w	ip, #1
 8013ce4:	1cb3      	adds	r3, r6, #2
 8013ce6:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ce8:	78b3      	ldrb	r3, [r6, #2]
 8013cea:	e78a      	b.n	8013c02 <_strtod_l+0x192>
 8013cec:	f04f 0c00 	mov.w	ip, #0
 8013cf0:	e7f8      	b.n	8013ce4 <_strtod_l+0x274>
 8013cf2:	bf00      	nop
 8013cf4:	080181dc 	.word	0x080181dc
 8013cf8:	7ff00000 	.word	0x7ff00000
 8013cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013cfe:	1c5f      	adds	r7, r3, #1
 8013d00:	971b      	str	r7, [sp, #108]	; 0x6c
 8013d02:	785b      	ldrb	r3, [r3, #1]
 8013d04:	2b30      	cmp	r3, #48	; 0x30
 8013d06:	d0f9      	beq.n	8013cfc <_strtod_l+0x28c>
 8013d08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013d0c:	2f08      	cmp	r7, #8
 8013d0e:	f63f af7d 	bhi.w	8013c0c <_strtod_l+0x19c>
 8013d12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013d16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d18:	930a      	str	r3, [sp, #40]	; 0x28
 8013d1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d1c:	1c5f      	adds	r7, r3, #1
 8013d1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8013d20:	785b      	ldrb	r3, [r3, #1]
 8013d22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013d26:	f1b8 0f09 	cmp.w	r8, #9
 8013d2a:	d937      	bls.n	8013d9c <_strtod_l+0x32c>
 8013d2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013d2e:	1a7f      	subs	r7, r7, r1
 8013d30:	2f08      	cmp	r7, #8
 8013d32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013d36:	dc37      	bgt.n	8013da8 <_strtod_l+0x338>
 8013d38:	45be      	cmp	lr, r7
 8013d3a:	bfa8      	it	ge
 8013d3c:	46be      	movge	lr, r7
 8013d3e:	f1bc 0f00 	cmp.w	ip, #0
 8013d42:	d001      	beq.n	8013d48 <_strtod_l+0x2d8>
 8013d44:	f1ce 0e00 	rsb	lr, lr, #0
 8013d48:	2c00      	cmp	r4, #0
 8013d4a:	d151      	bne.n	8013df0 <_strtod_l+0x380>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	f47f aece 	bne.w	8013aee <_strtod_l+0x7e>
 8013d52:	9a06      	ldr	r2, [sp, #24]
 8013d54:	2a00      	cmp	r2, #0
 8013d56:	f47f aeca 	bne.w	8013aee <_strtod_l+0x7e>
 8013d5a:	9a04      	ldr	r2, [sp, #16]
 8013d5c:	2a00      	cmp	r2, #0
 8013d5e:	f47f aee4 	bne.w	8013b2a <_strtod_l+0xba>
 8013d62:	2b4e      	cmp	r3, #78	; 0x4e
 8013d64:	d027      	beq.n	8013db6 <_strtod_l+0x346>
 8013d66:	dc21      	bgt.n	8013dac <_strtod_l+0x33c>
 8013d68:	2b49      	cmp	r3, #73	; 0x49
 8013d6a:	f47f aede 	bne.w	8013b2a <_strtod_l+0xba>
 8013d6e:	49a0      	ldr	r1, [pc, #640]	; (8013ff0 <_strtod_l+0x580>)
 8013d70:	a81b      	add	r0, sp, #108	; 0x6c
 8013d72:	f002 f851 	bl	8015e18 <__match>
 8013d76:	2800      	cmp	r0, #0
 8013d78:	f43f aed7 	beq.w	8013b2a <_strtod_l+0xba>
 8013d7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d7e:	499d      	ldr	r1, [pc, #628]	; (8013ff4 <_strtod_l+0x584>)
 8013d80:	3b01      	subs	r3, #1
 8013d82:	a81b      	add	r0, sp, #108	; 0x6c
 8013d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d86:	f002 f847 	bl	8015e18 <__match>
 8013d8a:	b910      	cbnz	r0, 8013d92 <_strtod_l+0x322>
 8013d8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d8e:	3301      	adds	r3, #1
 8013d90:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d92:	f8df b274 	ldr.w	fp, [pc, #628]	; 8014008 <_strtod_l+0x598>
 8013d96:	f04f 0a00 	mov.w	sl, #0
 8013d9a:	e6a8      	b.n	8013aee <_strtod_l+0x7e>
 8013d9c:	210a      	movs	r1, #10
 8013d9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013da2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013da6:	e7b8      	b.n	8013d1a <_strtod_l+0x2aa>
 8013da8:	46be      	mov	lr, r7
 8013daa:	e7c8      	b.n	8013d3e <_strtod_l+0x2ce>
 8013dac:	2b69      	cmp	r3, #105	; 0x69
 8013dae:	d0de      	beq.n	8013d6e <_strtod_l+0x2fe>
 8013db0:	2b6e      	cmp	r3, #110	; 0x6e
 8013db2:	f47f aeba 	bne.w	8013b2a <_strtod_l+0xba>
 8013db6:	4990      	ldr	r1, [pc, #576]	; (8013ff8 <_strtod_l+0x588>)
 8013db8:	a81b      	add	r0, sp, #108	; 0x6c
 8013dba:	f002 f82d 	bl	8015e18 <__match>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	f43f aeb3 	beq.w	8013b2a <_strtod_l+0xba>
 8013dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	2b28      	cmp	r3, #40	; 0x28
 8013dca:	d10e      	bne.n	8013dea <_strtod_l+0x37a>
 8013dcc:	aa1e      	add	r2, sp, #120	; 0x78
 8013dce:	498b      	ldr	r1, [pc, #556]	; (8013ffc <_strtod_l+0x58c>)
 8013dd0:	a81b      	add	r0, sp, #108	; 0x6c
 8013dd2:	f002 f835 	bl	8015e40 <__hexnan>
 8013dd6:	2805      	cmp	r0, #5
 8013dd8:	d107      	bne.n	8013dea <_strtod_l+0x37a>
 8013dda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ddc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013de0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013de4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013de8:	e681      	b.n	8013aee <_strtod_l+0x7e>
 8013dea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8014010 <_strtod_l+0x5a0>
 8013dee:	e7d2      	b.n	8013d96 <_strtod_l+0x326>
 8013df0:	ebae 0302 	sub.w	r3, lr, r2
 8013df4:	9306      	str	r3, [sp, #24]
 8013df6:	9b05      	ldr	r3, [sp, #20]
 8013df8:	9807      	ldr	r0, [sp, #28]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	bf08      	it	eq
 8013dfe:	4623      	moveq	r3, r4
 8013e00:	2c10      	cmp	r4, #16
 8013e02:	9305      	str	r3, [sp, #20]
 8013e04:	46a0      	mov	r8, r4
 8013e06:	bfa8      	it	ge
 8013e08:	f04f 0810 	movge.w	r8, #16
 8013e0c:	f7ec fb92 	bl	8000534 <__aeabi_ui2d>
 8013e10:	2c09      	cmp	r4, #9
 8013e12:	4682      	mov	sl, r0
 8013e14:	468b      	mov	fp, r1
 8013e16:	dc13      	bgt.n	8013e40 <_strtod_l+0x3d0>
 8013e18:	9b06      	ldr	r3, [sp, #24]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f43f ae67 	beq.w	8013aee <_strtod_l+0x7e>
 8013e20:	9b06      	ldr	r3, [sp, #24]
 8013e22:	dd7a      	ble.n	8013f1a <_strtod_l+0x4aa>
 8013e24:	2b16      	cmp	r3, #22
 8013e26:	dc61      	bgt.n	8013eec <_strtod_l+0x47c>
 8013e28:	4a75      	ldr	r2, [pc, #468]	; (8014000 <_strtod_l+0x590>)
 8013e2a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013e2e:	e9de 0100 	ldrd	r0, r1, [lr]
 8013e32:	4652      	mov	r2, sl
 8013e34:	465b      	mov	r3, fp
 8013e36:	f7ec fbf7 	bl	8000628 <__aeabi_dmul>
 8013e3a:	4682      	mov	sl, r0
 8013e3c:	468b      	mov	fp, r1
 8013e3e:	e656      	b.n	8013aee <_strtod_l+0x7e>
 8013e40:	4b6f      	ldr	r3, [pc, #444]	; (8014000 <_strtod_l+0x590>)
 8013e42:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013e46:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013e4a:	f7ec fbed 	bl	8000628 <__aeabi_dmul>
 8013e4e:	4606      	mov	r6, r0
 8013e50:	4628      	mov	r0, r5
 8013e52:	460f      	mov	r7, r1
 8013e54:	f7ec fb6e 	bl	8000534 <__aeabi_ui2d>
 8013e58:	4602      	mov	r2, r0
 8013e5a:	460b      	mov	r3, r1
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	4639      	mov	r1, r7
 8013e60:	f7ec fa2c 	bl	80002bc <__adddf3>
 8013e64:	2c0f      	cmp	r4, #15
 8013e66:	4682      	mov	sl, r0
 8013e68:	468b      	mov	fp, r1
 8013e6a:	ddd5      	ble.n	8013e18 <_strtod_l+0x3a8>
 8013e6c:	9b06      	ldr	r3, [sp, #24]
 8013e6e:	eba4 0808 	sub.w	r8, r4, r8
 8013e72:	4498      	add	r8, r3
 8013e74:	f1b8 0f00 	cmp.w	r8, #0
 8013e78:	f340 8096 	ble.w	8013fa8 <_strtod_l+0x538>
 8013e7c:	f018 030f 	ands.w	r3, r8, #15
 8013e80:	d00a      	beq.n	8013e98 <_strtod_l+0x428>
 8013e82:	495f      	ldr	r1, [pc, #380]	; (8014000 <_strtod_l+0x590>)
 8013e84:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013e88:	4652      	mov	r2, sl
 8013e8a:	465b      	mov	r3, fp
 8013e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013e90:	f7ec fbca 	bl	8000628 <__aeabi_dmul>
 8013e94:	4682      	mov	sl, r0
 8013e96:	468b      	mov	fp, r1
 8013e98:	f038 080f 	bics.w	r8, r8, #15
 8013e9c:	d073      	beq.n	8013f86 <_strtod_l+0x516>
 8013e9e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013ea2:	dd47      	ble.n	8013f34 <_strtod_l+0x4c4>
 8013ea4:	2400      	movs	r4, #0
 8013ea6:	46a0      	mov	r8, r4
 8013ea8:	9407      	str	r4, [sp, #28]
 8013eaa:	9405      	str	r4, [sp, #20]
 8013eac:	2322      	movs	r3, #34	; 0x22
 8013eae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8014008 <_strtod_l+0x598>
 8013eb2:	f8c9 3000 	str.w	r3, [r9]
 8013eb6:	f04f 0a00 	mov.w	sl, #0
 8013eba:	9b07      	ldr	r3, [sp, #28]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	f43f ae16 	beq.w	8013aee <_strtod_l+0x7e>
 8013ec2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ec4:	4648      	mov	r0, r9
 8013ec6:	f002 f93c 	bl	8016142 <_Bfree>
 8013eca:	9905      	ldr	r1, [sp, #20]
 8013ecc:	4648      	mov	r0, r9
 8013ece:	f002 f938 	bl	8016142 <_Bfree>
 8013ed2:	4641      	mov	r1, r8
 8013ed4:	4648      	mov	r0, r9
 8013ed6:	f002 f934 	bl	8016142 <_Bfree>
 8013eda:	9907      	ldr	r1, [sp, #28]
 8013edc:	4648      	mov	r0, r9
 8013ede:	f002 f930 	bl	8016142 <_Bfree>
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	4648      	mov	r0, r9
 8013ee6:	f002 f92c 	bl	8016142 <_Bfree>
 8013eea:	e600      	b.n	8013aee <_strtod_l+0x7e>
 8013eec:	9a06      	ldr	r2, [sp, #24]
 8013eee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013ef2:	4293      	cmp	r3, r2
 8013ef4:	dbba      	blt.n	8013e6c <_strtod_l+0x3fc>
 8013ef6:	4d42      	ldr	r5, [pc, #264]	; (8014000 <_strtod_l+0x590>)
 8013ef8:	f1c4 040f 	rsb	r4, r4, #15
 8013efc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013f00:	4652      	mov	r2, sl
 8013f02:	465b      	mov	r3, fp
 8013f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f08:	f7ec fb8e 	bl	8000628 <__aeabi_dmul>
 8013f0c:	9b06      	ldr	r3, [sp, #24]
 8013f0e:	1b1c      	subs	r4, r3, r4
 8013f10:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013f14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013f18:	e78d      	b.n	8013e36 <_strtod_l+0x3c6>
 8013f1a:	f113 0f16 	cmn.w	r3, #22
 8013f1e:	dba5      	blt.n	8013e6c <_strtod_l+0x3fc>
 8013f20:	4a37      	ldr	r2, [pc, #220]	; (8014000 <_strtod_l+0x590>)
 8013f22:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013f26:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013f2a:	4650      	mov	r0, sl
 8013f2c:	4659      	mov	r1, fp
 8013f2e:	f7ec fca5 	bl	800087c <__aeabi_ddiv>
 8013f32:	e782      	b.n	8013e3a <_strtod_l+0x3ca>
 8013f34:	2300      	movs	r3, #0
 8013f36:	4e33      	ldr	r6, [pc, #204]	; (8014004 <_strtod_l+0x594>)
 8013f38:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013f3c:	4650      	mov	r0, sl
 8013f3e:	4659      	mov	r1, fp
 8013f40:	461d      	mov	r5, r3
 8013f42:	f1b8 0f01 	cmp.w	r8, #1
 8013f46:	dc21      	bgt.n	8013f8c <_strtod_l+0x51c>
 8013f48:	b10b      	cbz	r3, 8013f4e <_strtod_l+0x4de>
 8013f4a:	4682      	mov	sl, r0
 8013f4c:	468b      	mov	fp, r1
 8013f4e:	4b2d      	ldr	r3, [pc, #180]	; (8014004 <_strtod_l+0x594>)
 8013f50:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013f54:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013f58:	4652      	mov	r2, sl
 8013f5a:	465b      	mov	r3, fp
 8013f5c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013f60:	f7ec fb62 	bl	8000628 <__aeabi_dmul>
 8013f64:	4b28      	ldr	r3, [pc, #160]	; (8014008 <_strtod_l+0x598>)
 8013f66:	460a      	mov	r2, r1
 8013f68:	400b      	ands	r3, r1
 8013f6a:	4928      	ldr	r1, [pc, #160]	; (801400c <_strtod_l+0x59c>)
 8013f6c:	428b      	cmp	r3, r1
 8013f6e:	4682      	mov	sl, r0
 8013f70:	d898      	bhi.n	8013ea4 <_strtod_l+0x434>
 8013f72:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013f76:	428b      	cmp	r3, r1
 8013f78:	bf86      	itte	hi
 8013f7a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8014014 <_strtod_l+0x5a4>
 8013f7e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013f82:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013f86:	2300      	movs	r3, #0
 8013f88:	9304      	str	r3, [sp, #16]
 8013f8a:	e077      	b.n	801407c <_strtod_l+0x60c>
 8013f8c:	f018 0f01 	tst.w	r8, #1
 8013f90:	d006      	beq.n	8013fa0 <_strtod_l+0x530>
 8013f92:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f9a:	f7ec fb45 	bl	8000628 <__aeabi_dmul>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	3501      	adds	r5, #1
 8013fa2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013fa6:	e7cc      	b.n	8013f42 <_strtod_l+0x4d2>
 8013fa8:	d0ed      	beq.n	8013f86 <_strtod_l+0x516>
 8013faa:	f1c8 0800 	rsb	r8, r8, #0
 8013fae:	f018 020f 	ands.w	r2, r8, #15
 8013fb2:	d00a      	beq.n	8013fca <_strtod_l+0x55a>
 8013fb4:	4b12      	ldr	r3, [pc, #72]	; (8014000 <_strtod_l+0x590>)
 8013fb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013fba:	4650      	mov	r0, sl
 8013fbc:	4659      	mov	r1, fp
 8013fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc2:	f7ec fc5b 	bl	800087c <__aeabi_ddiv>
 8013fc6:	4682      	mov	sl, r0
 8013fc8:	468b      	mov	fp, r1
 8013fca:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013fce:	d0da      	beq.n	8013f86 <_strtod_l+0x516>
 8013fd0:	f1b8 0f1f 	cmp.w	r8, #31
 8013fd4:	dd20      	ble.n	8014018 <_strtod_l+0x5a8>
 8013fd6:	2400      	movs	r4, #0
 8013fd8:	46a0      	mov	r8, r4
 8013fda:	9407      	str	r4, [sp, #28]
 8013fdc:	9405      	str	r4, [sp, #20]
 8013fde:	2322      	movs	r3, #34	; 0x22
 8013fe0:	f04f 0a00 	mov.w	sl, #0
 8013fe4:	f04f 0b00 	mov.w	fp, #0
 8013fe8:	f8c9 3000 	str.w	r3, [r9]
 8013fec:	e765      	b.n	8013eba <_strtod_l+0x44a>
 8013fee:	bf00      	nop
 8013ff0:	080181a9 	.word	0x080181a9
 8013ff4:	08018233 	.word	0x08018233
 8013ff8:	080181b1 	.word	0x080181b1
 8013ffc:	080181f0 	.word	0x080181f0
 8014000:	080182d8 	.word	0x080182d8
 8014004:	080182b0 	.word	0x080182b0
 8014008:	7ff00000 	.word	0x7ff00000
 801400c:	7ca00000 	.word	0x7ca00000
 8014010:	fff80000 	.word	0xfff80000
 8014014:	7fefffff 	.word	0x7fefffff
 8014018:	f018 0310 	ands.w	r3, r8, #16
 801401c:	bf18      	it	ne
 801401e:	236a      	movne	r3, #106	; 0x6a
 8014020:	4da0      	ldr	r5, [pc, #640]	; (80142a4 <_strtod_l+0x834>)
 8014022:	9304      	str	r3, [sp, #16]
 8014024:	4650      	mov	r0, sl
 8014026:	4659      	mov	r1, fp
 8014028:	2300      	movs	r3, #0
 801402a:	f1b8 0f00 	cmp.w	r8, #0
 801402e:	f300 810a 	bgt.w	8014246 <_strtod_l+0x7d6>
 8014032:	b10b      	cbz	r3, 8014038 <_strtod_l+0x5c8>
 8014034:	4682      	mov	sl, r0
 8014036:	468b      	mov	fp, r1
 8014038:	9b04      	ldr	r3, [sp, #16]
 801403a:	b1bb      	cbz	r3, 801406c <_strtod_l+0x5fc>
 801403c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014040:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014044:	2b00      	cmp	r3, #0
 8014046:	4659      	mov	r1, fp
 8014048:	dd10      	ble.n	801406c <_strtod_l+0x5fc>
 801404a:	2b1f      	cmp	r3, #31
 801404c:	f340 8107 	ble.w	801425e <_strtod_l+0x7ee>
 8014050:	2b34      	cmp	r3, #52	; 0x34
 8014052:	bfde      	ittt	le
 8014054:	3b20      	suble	r3, #32
 8014056:	f04f 32ff 	movle.w	r2, #4294967295
 801405a:	fa02 f303 	lslle.w	r3, r2, r3
 801405e:	f04f 0a00 	mov.w	sl, #0
 8014062:	bfcc      	ite	gt
 8014064:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014068:	ea03 0b01 	andle.w	fp, r3, r1
 801406c:	2200      	movs	r2, #0
 801406e:	2300      	movs	r3, #0
 8014070:	4650      	mov	r0, sl
 8014072:	4659      	mov	r1, fp
 8014074:	f7ec fd40 	bl	8000af8 <__aeabi_dcmpeq>
 8014078:	2800      	cmp	r0, #0
 801407a:	d1ac      	bne.n	8013fd6 <_strtod_l+0x566>
 801407c:	9b07      	ldr	r3, [sp, #28]
 801407e:	9300      	str	r3, [sp, #0]
 8014080:	9a05      	ldr	r2, [sp, #20]
 8014082:	9908      	ldr	r1, [sp, #32]
 8014084:	4623      	mov	r3, r4
 8014086:	4648      	mov	r0, r9
 8014088:	f002 f8ad 	bl	80161e6 <__s2b>
 801408c:	9007      	str	r0, [sp, #28]
 801408e:	2800      	cmp	r0, #0
 8014090:	f43f af08 	beq.w	8013ea4 <_strtod_l+0x434>
 8014094:	9a06      	ldr	r2, [sp, #24]
 8014096:	9b06      	ldr	r3, [sp, #24]
 8014098:	2a00      	cmp	r2, #0
 801409a:	f1c3 0300 	rsb	r3, r3, #0
 801409e:	bfa8      	it	ge
 80140a0:	2300      	movge	r3, #0
 80140a2:	930e      	str	r3, [sp, #56]	; 0x38
 80140a4:	2400      	movs	r4, #0
 80140a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80140aa:	9316      	str	r3, [sp, #88]	; 0x58
 80140ac:	46a0      	mov	r8, r4
 80140ae:	9b07      	ldr	r3, [sp, #28]
 80140b0:	4648      	mov	r0, r9
 80140b2:	6859      	ldr	r1, [r3, #4]
 80140b4:	f002 f811 	bl	80160da <_Balloc>
 80140b8:	9005      	str	r0, [sp, #20]
 80140ba:	2800      	cmp	r0, #0
 80140bc:	f43f aef6 	beq.w	8013eac <_strtod_l+0x43c>
 80140c0:	9b07      	ldr	r3, [sp, #28]
 80140c2:	691a      	ldr	r2, [r3, #16]
 80140c4:	3202      	adds	r2, #2
 80140c6:	f103 010c 	add.w	r1, r3, #12
 80140ca:	0092      	lsls	r2, r2, #2
 80140cc:	300c      	adds	r0, #12
 80140ce:	f001 fff9 	bl	80160c4 <memcpy>
 80140d2:	aa1e      	add	r2, sp, #120	; 0x78
 80140d4:	a91d      	add	r1, sp, #116	; 0x74
 80140d6:	ec4b ab10 	vmov	d0, sl, fp
 80140da:	4648      	mov	r0, r9
 80140dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80140e0:	f002 fb3c 	bl	801675c <__d2b>
 80140e4:	901c      	str	r0, [sp, #112]	; 0x70
 80140e6:	2800      	cmp	r0, #0
 80140e8:	f43f aee0 	beq.w	8013eac <_strtod_l+0x43c>
 80140ec:	2101      	movs	r1, #1
 80140ee:	4648      	mov	r0, r9
 80140f0:	f002 f905 	bl	80162fe <__i2b>
 80140f4:	4680      	mov	r8, r0
 80140f6:	2800      	cmp	r0, #0
 80140f8:	f43f aed8 	beq.w	8013eac <_strtod_l+0x43c>
 80140fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80140fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014100:	2e00      	cmp	r6, #0
 8014102:	bfab      	itete	ge
 8014104:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8014106:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8014108:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801410a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801410c:	bfac      	ite	ge
 801410e:	18f7      	addge	r7, r6, r3
 8014110:	1b9d      	sublt	r5, r3, r6
 8014112:	9b04      	ldr	r3, [sp, #16]
 8014114:	1af6      	subs	r6, r6, r3
 8014116:	4416      	add	r6, r2
 8014118:	4b63      	ldr	r3, [pc, #396]	; (80142a8 <_strtod_l+0x838>)
 801411a:	3e01      	subs	r6, #1
 801411c:	429e      	cmp	r6, r3
 801411e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014122:	f280 80af 	bge.w	8014284 <_strtod_l+0x814>
 8014126:	1b9b      	subs	r3, r3, r6
 8014128:	2b1f      	cmp	r3, #31
 801412a:	eba2 0203 	sub.w	r2, r2, r3
 801412e:	f04f 0101 	mov.w	r1, #1
 8014132:	f300 809b 	bgt.w	801426c <_strtod_l+0x7fc>
 8014136:	fa01 f303 	lsl.w	r3, r1, r3
 801413a:	930f      	str	r3, [sp, #60]	; 0x3c
 801413c:	2300      	movs	r3, #0
 801413e:	930a      	str	r3, [sp, #40]	; 0x28
 8014140:	18be      	adds	r6, r7, r2
 8014142:	9b04      	ldr	r3, [sp, #16]
 8014144:	42b7      	cmp	r7, r6
 8014146:	4415      	add	r5, r2
 8014148:	441d      	add	r5, r3
 801414a:	463b      	mov	r3, r7
 801414c:	bfa8      	it	ge
 801414e:	4633      	movge	r3, r6
 8014150:	42ab      	cmp	r3, r5
 8014152:	bfa8      	it	ge
 8014154:	462b      	movge	r3, r5
 8014156:	2b00      	cmp	r3, #0
 8014158:	bfc2      	ittt	gt
 801415a:	1af6      	subgt	r6, r6, r3
 801415c:	1aed      	subgt	r5, r5, r3
 801415e:	1aff      	subgt	r7, r7, r3
 8014160:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014162:	b1bb      	cbz	r3, 8014194 <_strtod_l+0x724>
 8014164:	4641      	mov	r1, r8
 8014166:	461a      	mov	r2, r3
 8014168:	4648      	mov	r0, r9
 801416a:	f002 f967 	bl	801643c <__pow5mult>
 801416e:	4680      	mov	r8, r0
 8014170:	2800      	cmp	r0, #0
 8014172:	f43f ae9b 	beq.w	8013eac <_strtod_l+0x43c>
 8014176:	4601      	mov	r1, r0
 8014178:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801417a:	4648      	mov	r0, r9
 801417c:	f002 f8c8 	bl	8016310 <__multiply>
 8014180:	900c      	str	r0, [sp, #48]	; 0x30
 8014182:	2800      	cmp	r0, #0
 8014184:	f43f ae92 	beq.w	8013eac <_strtod_l+0x43c>
 8014188:	991c      	ldr	r1, [sp, #112]	; 0x70
 801418a:	4648      	mov	r0, r9
 801418c:	f001 ffd9 	bl	8016142 <_Bfree>
 8014190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014192:	931c      	str	r3, [sp, #112]	; 0x70
 8014194:	2e00      	cmp	r6, #0
 8014196:	dc7a      	bgt.n	801428e <_strtod_l+0x81e>
 8014198:	9b06      	ldr	r3, [sp, #24]
 801419a:	2b00      	cmp	r3, #0
 801419c:	dd08      	ble.n	80141b0 <_strtod_l+0x740>
 801419e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80141a0:	9905      	ldr	r1, [sp, #20]
 80141a2:	4648      	mov	r0, r9
 80141a4:	f002 f94a 	bl	801643c <__pow5mult>
 80141a8:	9005      	str	r0, [sp, #20]
 80141aa:	2800      	cmp	r0, #0
 80141ac:	f43f ae7e 	beq.w	8013eac <_strtod_l+0x43c>
 80141b0:	2d00      	cmp	r5, #0
 80141b2:	dd08      	ble.n	80141c6 <_strtod_l+0x756>
 80141b4:	462a      	mov	r2, r5
 80141b6:	9905      	ldr	r1, [sp, #20]
 80141b8:	4648      	mov	r0, r9
 80141ba:	f002 f98d 	bl	80164d8 <__lshift>
 80141be:	9005      	str	r0, [sp, #20]
 80141c0:	2800      	cmp	r0, #0
 80141c2:	f43f ae73 	beq.w	8013eac <_strtod_l+0x43c>
 80141c6:	2f00      	cmp	r7, #0
 80141c8:	dd08      	ble.n	80141dc <_strtod_l+0x76c>
 80141ca:	4641      	mov	r1, r8
 80141cc:	463a      	mov	r2, r7
 80141ce:	4648      	mov	r0, r9
 80141d0:	f002 f982 	bl	80164d8 <__lshift>
 80141d4:	4680      	mov	r8, r0
 80141d6:	2800      	cmp	r0, #0
 80141d8:	f43f ae68 	beq.w	8013eac <_strtod_l+0x43c>
 80141dc:	9a05      	ldr	r2, [sp, #20]
 80141de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80141e0:	4648      	mov	r0, r9
 80141e2:	f002 f9e7 	bl	80165b4 <__mdiff>
 80141e6:	4604      	mov	r4, r0
 80141e8:	2800      	cmp	r0, #0
 80141ea:	f43f ae5f 	beq.w	8013eac <_strtod_l+0x43c>
 80141ee:	68c3      	ldr	r3, [r0, #12]
 80141f0:	930c      	str	r3, [sp, #48]	; 0x30
 80141f2:	2300      	movs	r3, #0
 80141f4:	60c3      	str	r3, [r0, #12]
 80141f6:	4641      	mov	r1, r8
 80141f8:	f002 f9c2 	bl	8016580 <__mcmp>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	da55      	bge.n	80142ac <_strtod_l+0x83c>
 8014200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014202:	b9e3      	cbnz	r3, 801423e <_strtod_l+0x7ce>
 8014204:	f1ba 0f00 	cmp.w	sl, #0
 8014208:	d119      	bne.n	801423e <_strtod_l+0x7ce>
 801420a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801420e:	b9b3      	cbnz	r3, 801423e <_strtod_l+0x7ce>
 8014210:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014214:	0d1b      	lsrs	r3, r3, #20
 8014216:	051b      	lsls	r3, r3, #20
 8014218:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801421c:	d90f      	bls.n	801423e <_strtod_l+0x7ce>
 801421e:	6963      	ldr	r3, [r4, #20]
 8014220:	b913      	cbnz	r3, 8014228 <_strtod_l+0x7b8>
 8014222:	6923      	ldr	r3, [r4, #16]
 8014224:	2b01      	cmp	r3, #1
 8014226:	dd0a      	ble.n	801423e <_strtod_l+0x7ce>
 8014228:	4621      	mov	r1, r4
 801422a:	2201      	movs	r2, #1
 801422c:	4648      	mov	r0, r9
 801422e:	f002 f953 	bl	80164d8 <__lshift>
 8014232:	4641      	mov	r1, r8
 8014234:	4604      	mov	r4, r0
 8014236:	f002 f9a3 	bl	8016580 <__mcmp>
 801423a:	2800      	cmp	r0, #0
 801423c:	dc67      	bgt.n	801430e <_strtod_l+0x89e>
 801423e:	9b04      	ldr	r3, [sp, #16]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d171      	bne.n	8014328 <_strtod_l+0x8b8>
 8014244:	e63d      	b.n	8013ec2 <_strtod_l+0x452>
 8014246:	f018 0f01 	tst.w	r8, #1
 801424a:	d004      	beq.n	8014256 <_strtod_l+0x7e6>
 801424c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014250:	f7ec f9ea 	bl	8000628 <__aeabi_dmul>
 8014254:	2301      	movs	r3, #1
 8014256:	ea4f 0868 	mov.w	r8, r8, asr #1
 801425a:	3508      	adds	r5, #8
 801425c:	e6e5      	b.n	801402a <_strtod_l+0x5ba>
 801425e:	f04f 32ff 	mov.w	r2, #4294967295
 8014262:	fa02 f303 	lsl.w	r3, r2, r3
 8014266:	ea03 0a0a 	and.w	sl, r3, sl
 801426a:	e6ff      	b.n	801406c <_strtod_l+0x5fc>
 801426c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014270:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014274:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014278:	36e2      	adds	r6, #226	; 0xe2
 801427a:	fa01 f306 	lsl.w	r3, r1, r6
 801427e:	930a      	str	r3, [sp, #40]	; 0x28
 8014280:	910f      	str	r1, [sp, #60]	; 0x3c
 8014282:	e75d      	b.n	8014140 <_strtod_l+0x6d0>
 8014284:	2300      	movs	r3, #0
 8014286:	930a      	str	r3, [sp, #40]	; 0x28
 8014288:	2301      	movs	r3, #1
 801428a:	930f      	str	r3, [sp, #60]	; 0x3c
 801428c:	e758      	b.n	8014140 <_strtod_l+0x6d0>
 801428e:	4632      	mov	r2, r6
 8014290:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014292:	4648      	mov	r0, r9
 8014294:	f002 f920 	bl	80164d8 <__lshift>
 8014298:	901c      	str	r0, [sp, #112]	; 0x70
 801429a:	2800      	cmp	r0, #0
 801429c:	f47f af7c 	bne.w	8014198 <_strtod_l+0x728>
 80142a0:	e604      	b.n	8013eac <_strtod_l+0x43c>
 80142a2:	bf00      	nop
 80142a4:	08018208 	.word	0x08018208
 80142a8:	fffffc02 	.word	0xfffffc02
 80142ac:	465d      	mov	r5, fp
 80142ae:	f040 8086 	bne.w	80143be <_strtod_l+0x94e>
 80142b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80142b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142b8:	b32a      	cbz	r2, 8014306 <_strtod_l+0x896>
 80142ba:	4aaf      	ldr	r2, [pc, #700]	; (8014578 <_strtod_l+0xb08>)
 80142bc:	4293      	cmp	r3, r2
 80142be:	d153      	bne.n	8014368 <_strtod_l+0x8f8>
 80142c0:	9b04      	ldr	r3, [sp, #16]
 80142c2:	4650      	mov	r0, sl
 80142c4:	b1d3      	cbz	r3, 80142fc <_strtod_l+0x88c>
 80142c6:	4aad      	ldr	r2, [pc, #692]	; (801457c <_strtod_l+0xb0c>)
 80142c8:	402a      	ands	r2, r5
 80142ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80142ce:	f04f 31ff 	mov.w	r1, #4294967295
 80142d2:	d816      	bhi.n	8014302 <_strtod_l+0x892>
 80142d4:	0d12      	lsrs	r2, r2, #20
 80142d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80142da:	fa01 f303 	lsl.w	r3, r1, r3
 80142de:	4298      	cmp	r0, r3
 80142e0:	d142      	bne.n	8014368 <_strtod_l+0x8f8>
 80142e2:	4ba7      	ldr	r3, [pc, #668]	; (8014580 <_strtod_l+0xb10>)
 80142e4:	429d      	cmp	r5, r3
 80142e6:	d102      	bne.n	80142ee <_strtod_l+0x87e>
 80142e8:	3001      	adds	r0, #1
 80142ea:	f43f addf 	beq.w	8013eac <_strtod_l+0x43c>
 80142ee:	4ba3      	ldr	r3, [pc, #652]	; (801457c <_strtod_l+0xb0c>)
 80142f0:	402b      	ands	r3, r5
 80142f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80142f6:	f04f 0a00 	mov.w	sl, #0
 80142fa:	e7a0      	b.n	801423e <_strtod_l+0x7ce>
 80142fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014300:	e7ed      	b.n	80142de <_strtod_l+0x86e>
 8014302:	460b      	mov	r3, r1
 8014304:	e7eb      	b.n	80142de <_strtod_l+0x86e>
 8014306:	bb7b      	cbnz	r3, 8014368 <_strtod_l+0x8f8>
 8014308:	f1ba 0f00 	cmp.w	sl, #0
 801430c:	d12c      	bne.n	8014368 <_strtod_l+0x8f8>
 801430e:	9904      	ldr	r1, [sp, #16]
 8014310:	4a9a      	ldr	r2, [pc, #616]	; (801457c <_strtod_l+0xb0c>)
 8014312:	465b      	mov	r3, fp
 8014314:	b1f1      	cbz	r1, 8014354 <_strtod_l+0x8e4>
 8014316:	ea02 010b 	and.w	r1, r2, fp
 801431a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801431e:	dc19      	bgt.n	8014354 <_strtod_l+0x8e4>
 8014320:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8014324:	f77f ae5b 	ble.w	8013fde <_strtod_l+0x56e>
 8014328:	4a96      	ldr	r2, [pc, #600]	; (8014584 <_strtod_l+0xb14>)
 801432a:	2300      	movs	r3, #0
 801432c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014330:	4650      	mov	r0, sl
 8014332:	4659      	mov	r1, fp
 8014334:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014338:	f7ec f976 	bl	8000628 <__aeabi_dmul>
 801433c:	4682      	mov	sl, r0
 801433e:	468b      	mov	fp, r1
 8014340:	2900      	cmp	r1, #0
 8014342:	f47f adbe 	bne.w	8013ec2 <_strtod_l+0x452>
 8014346:	2800      	cmp	r0, #0
 8014348:	f47f adbb 	bne.w	8013ec2 <_strtod_l+0x452>
 801434c:	2322      	movs	r3, #34	; 0x22
 801434e:	f8c9 3000 	str.w	r3, [r9]
 8014352:	e5b6      	b.n	8013ec2 <_strtod_l+0x452>
 8014354:	4013      	ands	r3, r2
 8014356:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801435a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801435e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014362:	f04f 3aff 	mov.w	sl, #4294967295
 8014366:	e76a      	b.n	801423e <_strtod_l+0x7ce>
 8014368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801436a:	b193      	cbz	r3, 8014392 <_strtod_l+0x922>
 801436c:	422b      	tst	r3, r5
 801436e:	f43f af66 	beq.w	801423e <_strtod_l+0x7ce>
 8014372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014374:	9a04      	ldr	r2, [sp, #16]
 8014376:	4650      	mov	r0, sl
 8014378:	4659      	mov	r1, fp
 801437a:	b173      	cbz	r3, 801439a <_strtod_l+0x92a>
 801437c:	f7ff fb5b 	bl	8013a36 <sulp>
 8014380:	4602      	mov	r2, r0
 8014382:	460b      	mov	r3, r1
 8014384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014388:	f7eb ff98 	bl	80002bc <__adddf3>
 801438c:	4682      	mov	sl, r0
 801438e:	468b      	mov	fp, r1
 8014390:	e755      	b.n	801423e <_strtod_l+0x7ce>
 8014392:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014394:	ea13 0f0a 	tst.w	r3, sl
 8014398:	e7e9      	b.n	801436e <_strtod_l+0x8fe>
 801439a:	f7ff fb4c 	bl	8013a36 <sulp>
 801439e:	4602      	mov	r2, r0
 80143a0:	460b      	mov	r3, r1
 80143a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80143a6:	f7eb ff87 	bl	80002b8 <__aeabi_dsub>
 80143aa:	2200      	movs	r2, #0
 80143ac:	2300      	movs	r3, #0
 80143ae:	4682      	mov	sl, r0
 80143b0:	468b      	mov	fp, r1
 80143b2:	f7ec fba1 	bl	8000af8 <__aeabi_dcmpeq>
 80143b6:	2800      	cmp	r0, #0
 80143b8:	f47f ae11 	bne.w	8013fde <_strtod_l+0x56e>
 80143bc:	e73f      	b.n	801423e <_strtod_l+0x7ce>
 80143be:	4641      	mov	r1, r8
 80143c0:	4620      	mov	r0, r4
 80143c2:	f002 fa1a 	bl	80167fa <__ratio>
 80143c6:	ec57 6b10 	vmov	r6, r7, d0
 80143ca:	2200      	movs	r2, #0
 80143cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80143d0:	ee10 0a10 	vmov	r0, s0
 80143d4:	4639      	mov	r1, r7
 80143d6:	f7ec fba3 	bl	8000b20 <__aeabi_dcmple>
 80143da:	2800      	cmp	r0, #0
 80143dc:	d077      	beq.n	80144ce <_strtod_l+0xa5e>
 80143de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d04a      	beq.n	801447a <_strtod_l+0xa0a>
 80143e4:	4b68      	ldr	r3, [pc, #416]	; (8014588 <_strtod_l+0xb18>)
 80143e6:	2200      	movs	r2, #0
 80143e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80143ec:	4f66      	ldr	r7, [pc, #408]	; (8014588 <_strtod_l+0xb18>)
 80143ee:	2600      	movs	r6, #0
 80143f0:	4b62      	ldr	r3, [pc, #392]	; (801457c <_strtod_l+0xb0c>)
 80143f2:	402b      	ands	r3, r5
 80143f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80143f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143f8:	4b64      	ldr	r3, [pc, #400]	; (801458c <_strtod_l+0xb1c>)
 80143fa:	429a      	cmp	r2, r3
 80143fc:	f040 80ce 	bne.w	801459c <_strtod_l+0xb2c>
 8014400:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014404:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014408:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801440c:	ec4b ab10 	vmov	d0, sl, fp
 8014410:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014414:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014418:	f002 f92a 	bl	8016670 <__ulp>
 801441c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014420:	ec53 2b10 	vmov	r2, r3, d0
 8014424:	f7ec f900 	bl	8000628 <__aeabi_dmul>
 8014428:	4652      	mov	r2, sl
 801442a:	465b      	mov	r3, fp
 801442c:	f7eb ff46 	bl	80002bc <__adddf3>
 8014430:	460b      	mov	r3, r1
 8014432:	4952      	ldr	r1, [pc, #328]	; (801457c <_strtod_l+0xb0c>)
 8014434:	4a56      	ldr	r2, [pc, #344]	; (8014590 <_strtod_l+0xb20>)
 8014436:	4019      	ands	r1, r3
 8014438:	4291      	cmp	r1, r2
 801443a:	4682      	mov	sl, r0
 801443c:	d95b      	bls.n	80144f6 <_strtod_l+0xa86>
 801443e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014440:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014444:	4293      	cmp	r3, r2
 8014446:	d103      	bne.n	8014450 <_strtod_l+0x9e0>
 8014448:	9b08      	ldr	r3, [sp, #32]
 801444a:	3301      	adds	r3, #1
 801444c:	f43f ad2e 	beq.w	8013eac <_strtod_l+0x43c>
 8014450:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014580 <_strtod_l+0xb10>
 8014454:	f04f 3aff 	mov.w	sl, #4294967295
 8014458:	991c      	ldr	r1, [sp, #112]	; 0x70
 801445a:	4648      	mov	r0, r9
 801445c:	f001 fe71 	bl	8016142 <_Bfree>
 8014460:	9905      	ldr	r1, [sp, #20]
 8014462:	4648      	mov	r0, r9
 8014464:	f001 fe6d 	bl	8016142 <_Bfree>
 8014468:	4641      	mov	r1, r8
 801446a:	4648      	mov	r0, r9
 801446c:	f001 fe69 	bl	8016142 <_Bfree>
 8014470:	4621      	mov	r1, r4
 8014472:	4648      	mov	r0, r9
 8014474:	f001 fe65 	bl	8016142 <_Bfree>
 8014478:	e619      	b.n	80140ae <_strtod_l+0x63e>
 801447a:	f1ba 0f00 	cmp.w	sl, #0
 801447e:	d11a      	bne.n	80144b6 <_strtod_l+0xa46>
 8014480:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014484:	b9eb      	cbnz	r3, 80144c2 <_strtod_l+0xa52>
 8014486:	2200      	movs	r2, #0
 8014488:	4b3f      	ldr	r3, [pc, #252]	; (8014588 <_strtod_l+0xb18>)
 801448a:	4630      	mov	r0, r6
 801448c:	4639      	mov	r1, r7
 801448e:	f7ec fb3d 	bl	8000b0c <__aeabi_dcmplt>
 8014492:	b9c8      	cbnz	r0, 80144c8 <_strtod_l+0xa58>
 8014494:	4630      	mov	r0, r6
 8014496:	4639      	mov	r1, r7
 8014498:	2200      	movs	r2, #0
 801449a:	4b3e      	ldr	r3, [pc, #248]	; (8014594 <_strtod_l+0xb24>)
 801449c:	f7ec f8c4 	bl	8000628 <__aeabi_dmul>
 80144a0:	4606      	mov	r6, r0
 80144a2:	460f      	mov	r7, r1
 80144a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80144a8:	9618      	str	r6, [sp, #96]	; 0x60
 80144aa:	9319      	str	r3, [sp, #100]	; 0x64
 80144ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80144b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80144b4:	e79c      	b.n	80143f0 <_strtod_l+0x980>
 80144b6:	f1ba 0f01 	cmp.w	sl, #1
 80144ba:	d102      	bne.n	80144c2 <_strtod_l+0xa52>
 80144bc:	2d00      	cmp	r5, #0
 80144be:	f43f ad8e 	beq.w	8013fde <_strtod_l+0x56e>
 80144c2:	2200      	movs	r2, #0
 80144c4:	4b34      	ldr	r3, [pc, #208]	; (8014598 <_strtod_l+0xb28>)
 80144c6:	e78f      	b.n	80143e8 <_strtod_l+0x978>
 80144c8:	2600      	movs	r6, #0
 80144ca:	4f32      	ldr	r7, [pc, #200]	; (8014594 <_strtod_l+0xb24>)
 80144cc:	e7ea      	b.n	80144a4 <_strtod_l+0xa34>
 80144ce:	4b31      	ldr	r3, [pc, #196]	; (8014594 <_strtod_l+0xb24>)
 80144d0:	4630      	mov	r0, r6
 80144d2:	4639      	mov	r1, r7
 80144d4:	2200      	movs	r2, #0
 80144d6:	f7ec f8a7 	bl	8000628 <__aeabi_dmul>
 80144da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144dc:	4606      	mov	r6, r0
 80144de:	460f      	mov	r7, r1
 80144e0:	b933      	cbnz	r3, 80144f0 <_strtod_l+0xa80>
 80144e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144e6:	9010      	str	r0, [sp, #64]	; 0x40
 80144e8:	9311      	str	r3, [sp, #68]	; 0x44
 80144ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80144ee:	e7df      	b.n	80144b0 <_strtod_l+0xa40>
 80144f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80144f4:	e7f9      	b.n	80144ea <_strtod_l+0xa7a>
 80144f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80144fa:	9b04      	ldr	r3, [sp, #16]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d1ab      	bne.n	8014458 <_strtod_l+0x9e8>
 8014500:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014504:	0d1b      	lsrs	r3, r3, #20
 8014506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014508:	051b      	lsls	r3, r3, #20
 801450a:	429a      	cmp	r2, r3
 801450c:	465d      	mov	r5, fp
 801450e:	d1a3      	bne.n	8014458 <_strtod_l+0x9e8>
 8014510:	4639      	mov	r1, r7
 8014512:	4630      	mov	r0, r6
 8014514:	f7ec fb38 	bl	8000b88 <__aeabi_d2iz>
 8014518:	f7ec f81c 	bl	8000554 <__aeabi_i2d>
 801451c:	460b      	mov	r3, r1
 801451e:	4602      	mov	r2, r0
 8014520:	4639      	mov	r1, r7
 8014522:	4630      	mov	r0, r6
 8014524:	f7eb fec8 	bl	80002b8 <__aeabi_dsub>
 8014528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801452a:	4606      	mov	r6, r0
 801452c:	460f      	mov	r7, r1
 801452e:	b933      	cbnz	r3, 801453e <_strtod_l+0xace>
 8014530:	f1ba 0f00 	cmp.w	sl, #0
 8014534:	d103      	bne.n	801453e <_strtod_l+0xace>
 8014536:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801453a:	2d00      	cmp	r5, #0
 801453c:	d06d      	beq.n	801461a <_strtod_l+0xbaa>
 801453e:	a30a      	add	r3, pc, #40	; (adr r3, 8014568 <_strtod_l+0xaf8>)
 8014540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014544:	4630      	mov	r0, r6
 8014546:	4639      	mov	r1, r7
 8014548:	f7ec fae0 	bl	8000b0c <__aeabi_dcmplt>
 801454c:	2800      	cmp	r0, #0
 801454e:	f47f acb8 	bne.w	8013ec2 <_strtod_l+0x452>
 8014552:	a307      	add	r3, pc, #28	; (adr r3, 8014570 <_strtod_l+0xb00>)
 8014554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014558:	4630      	mov	r0, r6
 801455a:	4639      	mov	r1, r7
 801455c:	f7ec faf4 	bl	8000b48 <__aeabi_dcmpgt>
 8014560:	2800      	cmp	r0, #0
 8014562:	f43f af79 	beq.w	8014458 <_strtod_l+0x9e8>
 8014566:	e4ac      	b.n	8013ec2 <_strtod_l+0x452>
 8014568:	94a03595 	.word	0x94a03595
 801456c:	3fdfffff 	.word	0x3fdfffff
 8014570:	35afe535 	.word	0x35afe535
 8014574:	3fe00000 	.word	0x3fe00000
 8014578:	000fffff 	.word	0x000fffff
 801457c:	7ff00000 	.word	0x7ff00000
 8014580:	7fefffff 	.word	0x7fefffff
 8014584:	39500000 	.word	0x39500000
 8014588:	3ff00000 	.word	0x3ff00000
 801458c:	7fe00000 	.word	0x7fe00000
 8014590:	7c9fffff 	.word	0x7c9fffff
 8014594:	3fe00000 	.word	0x3fe00000
 8014598:	bff00000 	.word	0xbff00000
 801459c:	9b04      	ldr	r3, [sp, #16]
 801459e:	b333      	cbz	r3, 80145ee <_strtod_l+0xb7e>
 80145a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80145a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80145a6:	d822      	bhi.n	80145ee <_strtod_l+0xb7e>
 80145a8:	a327      	add	r3, pc, #156	; (adr r3, 8014648 <_strtod_l+0xbd8>)
 80145aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ae:	4630      	mov	r0, r6
 80145b0:	4639      	mov	r1, r7
 80145b2:	f7ec fab5 	bl	8000b20 <__aeabi_dcmple>
 80145b6:	b1a0      	cbz	r0, 80145e2 <_strtod_l+0xb72>
 80145b8:	4639      	mov	r1, r7
 80145ba:	4630      	mov	r0, r6
 80145bc:	f7ec fb0c 	bl	8000bd8 <__aeabi_d2uiz>
 80145c0:	2800      	cmp	r0, #0
 80145c2:	bf08      	it	eq
 80145c4:	2001      	moveq	r0, #1
 80145c6:	f7eb ffb5 	bl	8000534 <__aeabi_ui2d>
 80145ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145cc:	4606      	mov	r6, r0
 80145ce:	460f      	mov	r7, r1
 80145d0:	bb03      	cbnz	r3, 8014614 <_strtod_l+0xba4>
 80145d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145d6:	9012      	str	r0, [sp, #72]	; 0x48
 80145d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80145da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80145de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80145e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80145e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80145ea:	1a9b      	subs	r3, r3, r2
 80145ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80145ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 80145f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80145f6:	f002 f83b 	bl	8016670 <__ulp>
 80145fa:	4650      	mov	r0, sl
 80145fc:	ec53 2b10 	vmov	r2, r3, d0
 8014600:	4659      	mov	r1, fp
 8014602:	f7ec f811 	bl	8000628 <__aeabi_dmul>
 8014606:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801460a:	f7eb fe57 	bl	80002bc <__adddf3>
 801460e:	4682      	mov	sl, r0
 8014610:	468b      	mov	fp, r1
 8014612:	e772      	b.n	80144fa <_strtod_l+0xa8a>
 8014614:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014618:	e7df      	b.n	80145da <_strtod_l+0xb6a>
 801461a:	a30d      	add	r3, pc, #52	; (adr r3, 8014650 <_strtod_l+0xbe0>)
 801461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014620:	f7ec fa74 	bl	8000b0c <__aeabi_dcmplt>
 8014624:	e79c      	b.n	8014560 <_strtod_l+0xaf0>
 8014626:	2300      	movs	r3, #0
 8014628:	930d      	str	r3, [sp, #52]	; 0x34
 801462a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801462c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801462e:	6013      	str	r3, [r2, #0]
 8014630:	f7ff ba61 	b.w	8013af6 <_strtod_l+0x86>
 8014634:	2b65      	cmp	r3, #101	; 0x65
 8014636:	f04f 0200 	mov.w	r2, #0
 801463a:	f43f ab4e 	beq.w	8013cda <_strtod_l+0x26a>
 801463e:	2101      	movs	r1, #1
 8014640:	4614      	mov	r4, r2
 8014642:	9104      	str	r1, [sp, #16]
 8014644:	f7ff bacb 	b.w	8013bde <_strtod_l+0x16e>
 8014648:	ffc00000 	.word	0xffc00000
 801464c:	41dfffff 	.word	0x41dfffff
 8014650:	94a03595 	.word	0x94a03595
 8014654:	3fcfffff 	.word	0x3fcfffff

08014658 <_strtod_r>:
 8014658:	4b05      	ldr	r3, [pc, #20]	; (8014670 <_strtod_r+0x18>)
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	b410      	push	{r4}
 801465e:	6a1b      	ldr	r3, [r3, #32]
 8014660:	4c04      	ldr	r4, [pc, #16]	; (8014674 <_strtod_r+0x1c>)
 8014662:	2b00      	cmp	r3, #0
 8014664:	bf08      	it	eq
 8014666:	4623      	moveq	r3, r4
 8014668:	f85d 4b04 	ldr.w	r4, [sp], #4
 801466c:	f7ff ba00 	b.w	8013a70 <_strtod_l>
 8014670:	2000000c 	.word	0x2000000c
 8014674:	20000070 	.word	0x20000070

08014678 <_strtol_l.isra.0>:
 8014678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801467c:	4680      	mov	r8, r0
 801467e:	4689      	mov	r9, r1
 8014680:	4692      	mov	sl, r2
 8014682:	461e      	mov	r6, r3
 8014684:	460f      	mov	r7, r1
 8014686:	463d      	mov	r5, r7
 8014688:	9808      	ldr	r0, [sp, #32]
 801468a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801468e:	f001 fc67 	bl	8015f60 <__locale_ctype_ptr_l>
 8014692:	4420      	add	r0, r4
 8014694:	7843      	ldrb	r3, [r0, #1]
 8014696:	f013 0308 	ands.w	r3, r3, #8
 801469a:	d132      	bne.n	8014702 <_strtol_l.isra.0+0x8a>
 801469c:	2c2d      	cmp	r4, #45	; 0x2d
 801469e:	d132      	bne.n	8014706 <_strtol_l.isra.0+0x8e>
 80146a0:	787c      	ldrb	r4, [r7, #1]
 80146a2:	1cbd      	adds	r5, r7, #2
 80146a4:	2201      	movs	r2, #1
 80146a6:	2e00      	cmp	r6, #0
 80146a8:	d05d      	beq.n	8014766 <_strtol_l.isra.0+0xee>
 80146aa:	2e10      	cmp	r6, #16
 80146ac:	d109      	bne.n	80146c2 <_strtol_l.isra.0+0x4a>
 80146ae:	2c30      	cmp	r4, #48	; 0x30
 80146b0:	d107      	bne.n	80146c2 <_strtol_l.isra.0+0x4a>
 80146b2:	782b      	ldrb	r3, [r5, #0]
 80146b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80146b8:	2b58      	cmp	r3, #88	; 0x58
 80146ba:	d14f      	bne.n	801475c <_strtol_l.isra.0+0xe4>
 80146bc:	786c      	ldrb	r4, [r5, #1]
 80146be:	2610      	movs	r6, #16
 80146c0:	3502      	adds	r5, #2
 80146c2:	2a00      	cmp	r2, #0
 80146c4:	bf14      	ite	ne
 80146c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80146ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80146ce:	2700      	movs	r7, #0
 80146d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80146d4:	4638      	mov	r0, r7
 80146d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80146da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80146de:	2b09      	cmp	r3, #9
 80146e0:	d817      	bhi.n	8014712 <_strtol_l.isra.0+0x9a>
 80146e2:	461c      	mov	r4, r3
 80146e4:	42a6      	cmp	r6, r4
 80146e6:	dd23      	ble.n	8014730 <_strtol_l.isra.0+0xb8>
 80146e8:	1c7b      	adds	r3, r7, #1
 80146ea:	d007      	beq.n	80146fc <_strtol_l.isra.0+0x84>
 80146ec:	4584      	cmp	ip, r0
 80146ee:	d31c      	bcc.n	801472a <_strtol_l.isra.0+0xb2>
 80146f0:	d101      	bne.n	80146f6 <_strtol_l.isra.0+0x7e>
 80146f2:	45a6      	cmp	lr, r4
 80146f4:	db19      	blt.n	801472a <_strtol_l.isra.0+0xb2>
 80146f6:	fb00 4006 	mla	r0, r0, r6, r4
 80146fa:	2701      	movs	r7, #1
 80146fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014700:	e7eb      	b.n	80146da <_strtol_l.isra.0+0x62>
 8014702:	462f      	mov	r7, r5
 8014704:	e7bf      	b.n	8014686 <_strtol_l.isra.0+0xe>
 8014706:	2c2b      	cmp	r4, #43	; 0x2b
 8014708:	bf04      	itt	eq
 801470a:	1cbd      	addeq	r5, r7, #2
 801470c:	787c      	ldrbeq	r4, [r7, #1]
 801470e:	461a      	mov	r2, r3
 8014710:	e7c9      	b.n	80146a6 <_strtol_l.isra.0+0x2e>
 8014712:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014716:	2b19      	cmp	r3, #25
 8014718:	d801      	bhi.n	801471e <_strtol_l.isra.0+0xa6>
 801471a:	3c37      	subs	r4, #55	; 0x37
 801471c:	e7e2      	b.n	80146e4 <_strtol_l.isra.0+0x6c>
 801471e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014722:	2b19      	cmp	r3, #25
 8014724:	d804      	bhi.n	8014730 <_strtol_l.isra.0+0xb8>
 8014726:	3c57      	subs	r4, #87	; 0x57
 8014728:	e7dc      	b.n	80146e4 <_strtol_l.isra.0+0x6c>
 801472a:	f04f 37ff 	mov.w	r7, #4294967295
 801472e:	e7e5      	b.n	80146fc <_strtol_l.isra.0+0x84>
 8014730:	1c7b      	adds	r3, r7, #1
 8014732:	d108      	bne.n	8014746 <_strtol_l.isra.0+0xce>
 8014734:	2322      	movs	r3, #34	; 0x22
 8014736:	f8c8 3000 	str.w	r3, [r8]
 801473a:	4608      	mov	r0, r1
 801473c:	f1ba 0f00 	cmp.w	sl, #0
 8014740:	d107      	bne.n	8014752 <_strtol_l.isra.0+0xda>
 8014742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014746:	b102      	cbz	r2, 801474a <_strtol_l.isra.0+0xd2>
 8014748:	4240      	negs	r0, r0
 801474a:	f1ba 0f00 	cmp.w	sl, #0
 801474e:	d0f8      	beq.n	8014742 <_strtol_l.isra.0+0xca>
 8014750:	b10f      	cbz	r7, 8014756 <_strtol_l.isra.0+0xde>
 8014752:	f105 39ff 	add.w	r9, r5, #4294967295
 8014756:	f8ca 9000 	str.w	r9, [sl]
 801475a:	e7f2      	b.n	8014742 <_strtol_l.isra.0+0xca>
 801475c:	2430      	movs	r4, #48	; 0x30
 801475e:	2e00      	cmp	r6, #0
 8014760:	d1af      	bne.n	80146c2 <_strtol_l.isra.0+0x4a>
 8014762:	2608      	movs	r6, #8
 8014764:	e7ad      	b.n	80146c2 <_strtol_l.isra.0+0x4a>
 8014766:	2c30      	cmp	r4, #48	; 0x30
 8014768:	d0a3      	beq.n	80146b2 <_strtol_l.isra.0+0x3a>
 801476a:	260a      	movs	r6, #10
 801476c:	e7a9      	b.n	80146c2 <_strtol_l.isra.0+0x4a>
	...

08014770 <_strtol_r>:
 8014770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014772:	4c06      	ldr	r4, [pc, #24]	; (801478c <_strtol_r+0x1c>)
 8014774:	4d06      	ldr	r5, [pc, #24]	; (8014790 <_strtol_r+0x20>)
 8014776:	6824      	ldr	r4, [r4, #0]
 8014778:	6a24      	ldr	r4, [r4, #32]
 801477a:	2c00      	cmp	r4, #0
 801477c:	bf08      	it	eq
 801477e:	462c      	moveq	r4, r5
 8014780:	9400      	str	r4, [sp, #0]
 8014782:	f7ff ff79 	bl	8014678 <_strtol_l.isra.0>
 8014786:	b003      	add	sp, #12
 8014788:	bd30      	pop	{r4, r5, pc}
 801478a:	bf00      	nop
 801478c:	2000000c 	.word	0x2000000c
 8014790:	20000070 	.word	0x20000070

08014794 <_vsiprintf_r>:
 8014794:	b500      	push	{lr}
 8014796:	b09b      	sub	sp, #108	; 0x6c
 8014798:	9100      	str	r1, [sp, #0]
 801479a:	9104      	str	r1, [sp, #16]
 801479c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80147a0:	9105      	str	r1, [sp, #20]
 80147a2:	9102      	str	r1, [sp, #8]
 80147a4:	4905      	ldr	r1, [pc, #20]	; (80147bc <_vsiprintf_r+0x28>)
 80147a6:	9103      	str	r1, [sp, #12]
 80147a8:	4669      	mov	r1, sp
 80147aa:	f002 f9a5 	bl	8016af8 <_svfiprintf_r>
 80147ae:	9b00      	ldr	r3, [sp, #0]
 80147b0:	2200      	movs	r2, #0
 80147b2:	701a      	strb	r2, [r3, #0]
 80147b4:	b01b      	add	sp, #108	; 0x6c
 80147b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80147ba:	bf00      	nop
 80147bc:	ffff0208 	.word	0xffff0208

080147c0 <vsiprintf>:
 80147c0:	4613      	mov	r3, r2
 80147c2:	460a      	mov	r2, r1
 80147c4:	4601      	mov	r1, r0
 80147c6:	4802      	ldr	r0, [pc, #8]	; (80147d0 <vsiprintf+0x10>)
 80147c8:	6800      	ldr	r0, [r0, #0]
 80147ca:	f7ff bfe3 	b.w	8014794 <_vsiprintf_r>
 80147ce:	bf00      	nop
 80147d0:	2000000c 	.word	0x2000000c

080147d4 <__swbuf_r>:
 80147d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d6:	460e      	mov	r6, r1
 80147d8:	4614      	mov	r4, r2
 80147da:	4605      	mov	r5, r0
 80147dc:	b118      	cbz	r0, 80147e6 <__swbuf_r+0x12>
 80147de:	6983      	ldr	r3, [r0, #24]
 80147e0:	b90b      	cbnz	r3, 80147e6 <__swbuf_r+0x12>
 80147e2:	f001 f80d 	bl	8015800 <__sinit>
 80147e6:	4b21      	ldr	r3, [pc, #132]	; (801486c <__swbuf_r+0x98>)
 80147e8:	429c      	cmp	r4, r3
 80147ea:	d12a      	bne.n	8014842 <__swbuf_r+0x6e>
 80147ec:	686c      	ldr	r4, [r5, #4]
 80147ee:	69a3      	ldr	r3, [r4, #24]
 80147f0:	60a3      	str	r3, [r4, #8]
 80147f2:	89a3      	ldrh	r3, [r4, #12]
 80147f4:	071a      	lsls	r2, r3, #28
 80147f6:	d52e      	bpl.n	8014856 <__swbuf_r+0x82>
 80147f8:	6923      	ldr	r3, [r4, #16]
 80147fa:	b363      	cbz	r3, 8014856 <__swbuf_r+0x82>
 80147fc:	6923      	ldr	r3, [r4, #16]
 80147fe:	6820      	ldr	r0, [r4, #0]
 8014800:	1ac0      	subs	r0, r0, r3
 8014802:	6963      	ldr	r3, [r4, #20]
 8014804:	b2f6      	uxtb	r6, r6
 8014806:	4283      	cmp	r3, r0
 8014808:	4637      	mov	r7, r6
 801480a:	dc04      	bgt.n	8014816 <__swbuf_r+0x42>
 801480c:	4621      	mov	r1, r4
 801480e:	4628      	mov	r0, r5
 8014810:	f000 ff8c 	bl	801572c <_fflush_r>
 8014814:	bb28      	cbnz	r0, 8014862 <__swbuf_r+0x8e>
 8014816:	68a3      	ldr	r3, [r4, #8]
 8014818:	3b01      	subs	r3, #1
 801481a:	60a3      	str	r3, [r4, #8]
 801481c:	6823      	ldr	r3, [r4, #0]
 801481e:	1c5a      	adds	r2, r3, #1
 8014820:	6022      	str	r2, [r4, #0]
 8014822:	701e      	strb	r6, [r3, #0]
 8014824:	6963      	ldr	r3, [r4, #20]
 8014826:	3001      	adds	r0, #1
 8014828:	4283      	cmp	r3, r0
 801482a:	d004      	beq.n	8014836 <__swbuf_r+0x62>
 801482c:	89a3      	ldrh	r3, [r4, #12]
 801482e:	07db      	lsls	r3, r3, #31
 8014830:	d519      	bpl.n	8014866 <__swbuf_r+0x92>
 8014832:	2e0a      	cmp	r6, #10
 8014834:	d117      	bne.n	8014866 <__swbuf_r+0x92>
 8014836:	4621      	mov	r1, r4
 8014838:	4628      	mov	r0, r5
 801483a:	f000 ff77 	bl	801572c <_fflush_r>
 801483e:	b190      	cbz	r0, 8014866 <__swbuf_r+0x92>
 8014840:	e00f      	b.n	8014862 <__swbuf_r+0x8e>
 8014842:	4b0b      	ldr	r3, [pc, #44]	; (8014870 <__swbuf_r+0x9c>)
 8014844:	429c      	cmp	r4, r3
 8014846:	d101      	bne.n	801484c <__swbuf_r+0x78>
 8014848:	68ac      	ldr	r4, [r5, #8]
 801484a:	e7d0      	b.n	80147ee <__swbuf_r+0x1a>
 801484c:	4b09      	ldr	r3, [pc, #36]	; (8014874 <__swbuf_r+0xa0>)
 801484e:	429c      	cmp	r4, r3
 8014850:	bf08      	it	eq
 8014852:	68ec      	ldreq	r4, [r5, #12]
 8014854:	e7cb      	b.n	80147ee <__swbuf_r+0x1a>
 8014856:	4621      	mov	r1, r4
 8014858:	4628      	mov	r0, r5
 801485a:	f000 f81f 	bl	801489c <__swsetup_r>
 801485e:	2800      	cmp	r0, #0
 8014860:	d0cc      	beq.n	80147fc <__swbuf_r+0x28>
 8014862:	f04f 37ff 	mov.w	r7, #4294967295
 8014866:	4638      	mov	r0, r7
 8014868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801486a:	bf00      	nop
 801486c:	08018260 	.word	0x08018260
 8014870:	08018280 	.word	0x08018280
 8014874:	08018240 	.word	0x08018240

08014878 <_write_r>:
 8014878:	b538      	push	{r3, r4, r5, lr}
 801487a:	4c07      	ldr	r4, [pc, #28]	; (8014898 <_write_r+0x20>)
 801487c:	4605      	mov	r5, r0
 801487e:	4608      	mov	r0, r1
 8014880:	4611      	mov	r1, r2
 8014882:	2200      	movs	r2, #0
 8014884:	6022      	str	r2, [r4, #0]
 8014886:	461a      	mov	r2, r3
 8014888:	f7ef f895 	bl	80039b6 <_write>
 801488c:	1c43      	adds	r3, r0, #1
 801488e:	d102      	bne.n	8014896 <_write_r+0x1e>
 8014890:	6823      	ldr	r3, [r4, #0]
 8014892:	b103      	cbz	r3, 8014896 <_write_r+0x1e>
 8014894:	602b      	str	r3, [r5, #0]
 8014896:	bd38      	pop	{r3, r4, r5, pc}
 8014898:	20023ea0 	.word	0x20023ea0

0801489c <__swsetup_r>:
 801489c:	4b32      	ldr	r3, [pc, #200]	; (8014968 <__swsetup_r+0xcc>)
 801489e:	b570      	push	{r4, r5, r6, lr}
 80148a0:	681d      	ldr	r5, [r3, #0]
 80148a2:	4606      	mov	r6, r0
 80148a4:	460c      	mov	r4, r1
 80148a6:	b125      	cbz	r5, 80148b2 <__swsetup_r+0x16>
 80148a8:	69ab      	ldr	r3, [r5, #24]
 80148aa:	b913      	cbnz	r3, 80148b2 <__swsetup_r+0x16>
 80148ac:	4628      	mov	r0, r5
 80148ae:	f000 ffa7 	bl	8015800 <__sinit>
 80148b2:	4b2e      	ldr	r3, [pc, #184]	; (801496c <__swsetup_r+0xd0>)
 80148b4:	429c      	cmp	r4, r3
 80148b6:	d10f      	bne.n	80148d8 <__swsetup_r+0x3c>
 80148b8:	686c      	ldr	r4, [r5, #4]
 80148ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148be:	b29a      	uxth	r2, r3
 80148c0:	0715      	lsls	r5, r2, #28
 80148c2:	d42c      	bmi.n	801491e <__swsetup_r+0x82>
 80148c4:	06d0      	lsls	r0, r2, #27
 80148c6:	d411      	bmi.n	80148ec <__swsetup_r+0x50>
 80148c8:	2209      	movs	r2, #9
 80148ca:	6032      	str	r2, [r6, #0]
 80148cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148d0:	81a3      	strh	r3, [r4, #12]
 80148d2:	f04f 30ff 	mov.w	r0, #4294967295
 80148d6:	e03e      	b.n	8014956 <__swsetup_r+0xba>
 80148d8:	4b25      	ldr	r3, [pc, #148]	; (8014970 <__swsetup_r+0xd4>)
 80148da:	429c      	cmp	r4, r3
 80148dc:	d101      	bne.n	80148e2 <__swsetup_r+0x46>
 80148de:	68ac      	ldr	r4, [r5, #8]
 80148e0:	e7eb      	b.n	80148ba <__swsetup_r+0x1e>
 80148e2:	4b24      	ldr	r3, [pc, #144]	; (8014974 <__swsetup_r+0xd8>)
 80148e4:	429c      	cmp	r4, r3
 80148e6:	bf08      	it	eq
 80148e8:	68ec      	ldreq	r4, [r5, #12]
 80148ea:	e7e6      	b.n	80148ba <__swsetup_r+0x1e>
 80148ec:	0751      	lsls	r1, r2, #29
 80148ee:	d512      	bpl.n	8014916 <__swsetup_r+0x7a>
 80148f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148f2:	b141      	cbz	r1, 8014906 <__swsetup_r+0x6a>
 80148f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148f8:	4299      	cmp	r1, r3
 80148fa:	d002      	beq.n	8014902 <__swsetup_r+0x66>
 80148fc:	4630      	mov	r0, r6
 80148fe:	f001 fff9 	bl	80168f4 <_free_r>
 8014902:	2300      	movs	r3, #0
 8014904:	6363      	str	r3, [r4, #52]	; 0x34
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801490c:	81a3      	strh	r3, [r4, #12]
 801490e:	2300      	movs	r3, #0
 8014910:	6063      	str	r3, [r4, #4]
 8014912:	6923      	ldr	r3, [r4, #16]
 8014914:	6023      	str	r3, [r4, #0]
 8014916:	89a3      	ldrh	r3, [r4, #12]
 8014918:	f043 0308 	orr.w	r3, r3, #8
 801491c:	81a3      	strh	r3, [r4, #12]
 801491e:	6923      	ldr	r3, [r4, #16]
 8014920:	b94b      	cbnz	r3, 8014936 <__swsetup_r+0x9a>
 8014922:	89a3      	ldrh	r3, [r4, #12]
 8014924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801492c:	d003      	beq.n	8014936 <__swsetup_r+0x9a>
 801492e:	4621      	mov	r1, r4
 8014930:	4630      	mov	r0, r6
 8014932:	f001 fb6d 	bl	8016010 <__smakebuf_r>
 8014936:	89a2      	ldrh	r2, [r4, #12]
 8014938:	f012 0301 	ands.w	r3, r2, #1
 801493c:	d00c      	beq.n	8014958 <__swsetup_r+0xbc>
 801493e:	2300      	movs	r3, #0
 8014940:	60a3      	str	r3, [r4, #8]
 8014942:	6963      	ldr	r3, [r4, #20]
 8014944:	425b      	negs	r3, r3
 8014946:	61a3      	str	r3, [r4, #24]
 8014948:	6923      	ldr	r3, [r4, #16]
 801494a:	b953      	cbnz	r3, 8014962 <__swsetup_r+0xc6>
 801494c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014950:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014954:	d1ba      	bne.n	80148cc <__swsetup_r+0x30>
 8014956:	bd70      	pop	{r4, r5, r6, pc}
 8014958:	0792      	lsls	r2, r2, #30
 801495a:	bf58      	it	pl
 801495c:	6963      	ldrpl	r3, [r4, #20]
 801495e:	60a3      	str	r3, [r4, #8]
 8014960:	e7f2      	b.n	8014948 <__swsetup_r+0xac>
 8014962:	2000      	movs	r0, #0
 8014964:	e7f7      	b.n	8014956 <__swsetup_r+0xba>
 8014966:	bf00      	nop
 8014968:	2000000c 	.word	0x2000000c
 801496c:	08018260 	.word	0x08018260
 8014970:	08018280 	.word	0x08018280
 8014974:	08018240 	.word	0x08018240

08014978 <_close_r>:
 8014978:	b538      	push	{r3, r4, r5, lr}
 801497a:	4c06      	ldr	r4, [pc, #24]	; (8014994 <_close_r+0x1c>)
 801497c:	2300      	movs	r3, #0
 801497e:	4605      	mov	r5, r0
 8014980:	4608      	mov	r0, r1
 8014982:	6023      	str	r3, [r4, #0]
 8014984:	f7f0 fef9 	bl	800577a <_close>
 8014988:	1c43      	adds	r3, r0, #1
 801498a:	d102      	bne.n	8014992 <_close_r+0x1a>
 801498c:	6823      	ldr	r3, [r4, #0]
 801498e:	b103      	cbz	r3, 8014992 <_close_r+0x1a>
 8014990:	602b      	str	r3, [r5, #0]
 8014992:	bd38      	pop	{r3, r4, r5, pc}
 8014994:	20023ea0 	.word	0x20023ea0

08014998 <quorem>:
 8014998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801499c:	6903      	ldr	r3, [r0, #16]
 801499e:	690c      	ldr	r4, [r1, #16]
 80149a0:	42a3      	cmp	r3, r4
 80149a2:	4680      	mov	r8, r0
 80149a4:	f2c0 8082 	blt.w	8014aac <quorem+0x114>
 80149a8:	3c01      	subs	r4, #1
 80149aa:	f101 0714 	add.w	r7, r1, #20
 80149ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80149b2:	f100 0614 	add.w	r6, r0, #20
 80149b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80149ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80149be:	eb06 030c 	add.w	r3, r6, ip
 80149c2:	3501      	adds	r5, #1
 80149c4:	eb07 090c 	add.w	r9, r7, ip
 80149c8:	9301      	str	r3, [sp, #4]
 80149ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80149ce:	b395      	cbz	r5, 8014a36 <quorem+0x9e>
 80149d0:	f04f 0a00 	mov.w	sl, #0
 80149d4:	4638      	mov	r0, r7
 80149d6:	46b6      	mov	lr, r6
 80149d8:	46d3      	mov	fp, sl
 80149da:	f850 2b04 	ldr.w	r2, [r0], #4
 80149de:	b293      	uxth	r3, r2
 80149e0:	fb05 a303 	mla	r3, r5, r3, sl
 80149e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	ebab 0303 	sub.w	r3, fp, r3
 80149ee:	0c12      	lsrs	r2, r2, #16
 80149f0:	f8de b000 	ldr.w	fp, [lr]
 80149f4:	fb05 a202 	mla	r2, r5, r2, sl
 80149f8:	fa13 f38b 	uxtah	r3, r3, fp
 80149fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014a00:	fa1f fb82 	uxth.w	fp, r2
 8014a04:	f8de 2000 	ldr.w	r2, [lr]
 8014a08:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014a0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014a10:	b29b      	uxth	r3, r3
 8014a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a16:	4581      	cmp	r9, r0
 8014a18:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014a1c:	f84e 3b04 	str.w	r3, [lr], #4
 8014a20:	d2db      	bcs.n	80149da <quorem+0x42>
 8014a22:	f856 300c 	ldr.w	r3, [r6, ip]
 8014a26:	b933      	cbnz	r3, 8014a36 <quorem+0x9e>
 8014a28:	9b01      	ldr	r3, [sp, #4]
 8014a2a:	3b04      	subs	r3, #4
 8014a2c:	429e      	cmp	r6, r3
 8014a2e:	461a      	mov	r2, r3
 8014a30:	d330      	bcc.n	8014a94 <quorem+0xfc>
 8014a32:	f8c8 4010 	str.w	r4, [r8, #16]
 8014a36:	4640      	mov	r0, r8
 8014a38:	f001 fda2 	bl	8016580 <__mcmp>
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	db25      	blt.n	8014a8c <quorem+0xf4>
 8014a40:	3501      	adds	r5, #1
 8014a42:	4630      	mov	r0, r6
 8014a44:	f04f 0c00 	mov.w	ip, #0
 8014a48:	f857 2b04 	ldr.w	r2, [r7], #4
 8014a4c:	f8d0 e000 	ldr.w	lr, [r0]
 8014a50:	b293      	uxth	r3, r2
 8014a52:	ebac 0303 	sub.w	r3, ip, r3
 8014a56:	0c12      	lsrs	r2, r2, #16
 8014a58:	fa13 f38e 	uxtah	r3, r3, lr
 8014a5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014a64:	b29b      	uxth	r3, r3
 8014a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a6a:	45b9      	cmp	r9, r7
 8014a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014a70:	f840 3b04 	str.w	r3, [r0], #4
 8014a74:	d2e8      	bcs.n	8014a48 <quorem+0xb0>
 8014a76:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014a7a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014a7e:	b92a      	cbnz	r2, 8014a8c <quorem+0xf4>
 8014a80:	3b04      	subs	r3, #4
 8014a82:	429e      	cmp	r6, r3
 8014a84:	461a      	mov	r2, r3
 8014a86:	d30b      	bcc.n	8014aa0 <quorem+0x108>
 8014a88:	f8c8 4010 	str.w	r4, [r8, #16]
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	b003      	add	sp, #12
 8014a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a94:	6812      	ldr	r2, [r2, #0]
 8014a96:	3b04      	subs	r3, #4
 8014a98:	2a00      	cmp	r2, #0
 8014a9a:	d1ca      	bne.n	8014a32 <quorem+0x9a>
 8014a9c:	3c01      	subs	r4, #1
 8014a9e:	e7c5      	b.n	8014a2c <quorem+0x94>
 8014aa0:	6812      	ldr	r2, [r2, #0]
 8014aa2:	3b04      	subs	r3, #4
 8014aa4:	2a00      	cmp	r2, #0
 8014aa6:	d1ef      	bne.n	8014a88 <quorem+0xf0>
 8014aa8:	3c01      	subs	r4, #1
 8014aaa:	e7ea      	b.n	8014a82 <quorem+0xea>
 8014aac:	2000      	movs	r0, #0
 8014aae:	e7ee      	b.n	8014a8e <quorem+0xf6>

08014ab0 <_dtoa_r>:
 8014ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ab4:	ec57 6b10 	vmov	r6, r7, d0
 8014ab8:	b097      	sub	sp, #92	; 0x5c
 8014aba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014abc:	9106      	str	r1, [sp, #24]
 8014abe:	4604      	mov	r4, r0
 8014ac0:	920b      	str	r2, [sp, #44]	; 0x2c
 8014ac2:	9312      	str	r3, [sp, #72]	; 0x48
 8014ac4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014ac8:	e9cd 6700 	strd	r6, r7, [sp]
 8014acc:	b93d      	cbnz	r5, 8014ade <_dtoa_r+0x2e>
 8014ace:	2010      	movs	r0, #16
 8014ad0:	f001 fade 	bl	8016090 <malloc>
 8014ad4:	6260      	str	r0, [r4, #36]	; 0x24
 8014ad6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014ada:	6005      	str	r5, [r0, #0]
 8014adc:	60c5      	str	r5, [r0, #12]
 8014ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ae0:	6819      	ldr	r1, [r3, #0]
 8014ae2:	b151      	cbz	r1, 8014afa <_dtoa_r+0x4a>
 8014ae4:	685a      	ldr	r2, [r3, #4]
 8014ae6:	604a      	str	r2, [r1, #4]
 8014ae8:	2301      	movs	r3, #1
 8014aea:	4093      	lsls	r3, r2
 8014aec:	608b      	str	r3, [r1, #8]
 8014aee:	4620      	mov	r0, r4
 8014af0:	f001 fb27 	bl	8016142 <_Bfree>
 8014af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014af6:	2200      	movs	r2, #0
 8014af8:	601a      	str	r2, [r3, #0]
 8014afa:	1e3b      	subs	r3, r7, #0
 8014afc:	bfbb      	ittet	lt
 8014afe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014b02:	9301      	strlt	r3, [sp, #4]
 8014b04:	2300      	movge	r3, #0
 8014b06:	2201      	movlt	r2, #1
 8014b08:	bfac      	ite	ge
 8014b0a:	f8c8 3000 	strge.w	r3, [r8]
 8014b0e:	f8c8 2000 	strlt.w	r2, [r8]
 8014b12:	4baf      	ldr	r3, [pc, #700]	; (8014dd0 <_dtoa_r+0x320>)
 8014b14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b18:	ea33 0308 	bics.w	r3, r3, r8
 8014b1c:	d114      	bne.n	8014b48 <_dtoa_r+0x98>
 8014b1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8014b24:	6013      	str	r3, [r2, #0]
 8014b26:	9b00      	ldr	r3, [sp, #0]
 8014b28:	b923      	cbnz	r3, 8014b34 <_dtoa_r+0x84>
 8014b2a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014b2e:	2800      	cmp	r0, #0
 8014b30:	f000 8542 	beq.w	80155b8 <_dtoa_r+0xb08>
 8014b34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b36:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014de4 <_dtoa_r+0x334>
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	f000 8544 	beq.w	80155c8 <_dtoa_r+0xb18>
 8014b40:	f10b 0303 	add.w	r3, fp, #3
 8014b44:	f000 bd3e 	b.w	80155c4 <_dtoa_r+0xb14>
 8014b48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	2300      	movs	r3, #0
 8014b50:	4630      	mov	r0, r6
 8014b52:	4639      	mov	r1, r7
 8014b54:	f7eb ffd0 	bl	8000af8 <__aeabi_dcmpeq>
 8014b58:	4681      	mov	r9, r0
 8014b5a:	b168      	cbz	r0, 8014b78 <_dtoa_r+0xc8>
 8014b5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b5e:	2301      	movs	r3, #1
 8014b60:	6013      	str	r3, [r2, #0]
 8014b62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	f000 8524 	beq.w	80155b2 <_dtoa_r+0xb02>
 8014b6a:	4b9a      	ldr	r3, [pc, #616]	; (8014dd4 <_dtoa_r+0x324>)
 8014b6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014b6e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014b72:	6013      	str	r3, [r2, #0]
 8014b74:	f000 bd28 	b.w	80155c8 <_dtoa_r+0xb18>
 8014b78:	aa14      	add	r2, sp, #80	; 0x50
 8014b7a:	a915      	add	r1, sp, #84	; 0x54
 8014b7c:	ec47 6b10 	vmov	d0, r6, r7
 8014b80:	4620      	mov	r0, r4
 8014b82:	f001 fdeb 	bl	801675c <__d2b>
 8014b86:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014b8a:	9004      	str	r0, [sp, #16]
 8014b8c:	2d00      	cmp	r5, #0
 8014b8e:	d07c      	beq.n	8014c8a <_dtoa_r+0x1da>
 8014b90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014b94:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014b98:	46b2      	mov	sl, r6
 8014b9a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014b9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014ba2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	4b8b      	ldr	r3, [pc, #556]	; (8014dd8 <_dtoa_r+0x328>)
 8014baa:	4650      	mov	r0, sl
 8014bac:	4659      	mov	r1, fp
 8014bae:	f7eb fb83 	bl	80002b8 <__aeabi_dsub>
 8014bb2:	a381      	add	r3, pc, #516	; (adr r3, 8014db8 <_dtoa_r+0x308>)
 8014bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb8:	f7eb fd36 	bl	8000628 <__aeabi_dmul>
 8014bbc:	a380      	add	r3, pc, #512	; (adr r3, 8014dc0 <_dtoa_r+0x310>)
 8014bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc2:	f7eb fb7b 	bl	80002bc <__adddf3>
 8014bc6:	4606      	mov	r6, r0
 8014bc8:	4628      	mov	r0, r5
 8014bca:	460f      	mov	r7, r1
 8014bcc:	f7eb fcc2 	bl	8000554 <__aeabi_i2d>
 8014bd0:	a37d      	add	r3, pc, #500	; (adr r3, 8014dc8 <_dtoa_r+0x318>)
 8014bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd6:	f7eb fd27 	bl	8000628 <__aeabi_dmul>
 8014bda:	4602      	mov	r2, r0
 8014bdc:	460b      	mov	r3, r1
 8014bde:	4630      	mov	r0, r6
 8014be0:	4639      	mov	r1, r7
 8014be2:	f7eb fb6b 	bl	80002bc <__adddf3>
 8014be6:	4606      	mov	r6, r0
 8014be8:	460f      	mov	r7, r1
 8014bea:	f7eb ffcd 	bl	8000b88 <__aeabi_d2iz>
 8014bee:	2200      	movs	r2, #0
 8014bf0:	4682      	mov	sl, r0
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4639      	mov	r1, r7
 8014bf8:	f7eb ff88 	bl	8000b0c <__aeabi_dcmplt>
 8014bfc:	b148      	cbz	r0, 8014c12 <_dtoa_r+0x162>
 8014bfe:	4650      	mov	r0, sl
 8014c00:	f7eb fca8 	bl	8000554 <__aeabi_i2d>
 8014c04:	4632      	mov	r2, r6
 8014c06:	463b      	mov	r3, r7
 8014c08:	f7eb ff76 	bl	8000af8 <__aeabi_dcmpeq>
 8014c0c:	b908      	cbnz	r0, 8014c12 <_dtoa_r+0x162>
 8014c0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c12:	f1ba 0f16 	cmp.w	sl, #22
 8014c16:	d859      	bhi.n	8014ccc <_dtoa_r+0x21c>
 8014c18:	4970      	ldr	r1, [pc, #448]	; (8014ddc <_dtoa_r+0x32c>)
 8014c1a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c26:	f7eb ff8f 	bl	8000b48 <__aeabi_dcmpgt>
 8014c2a:	2800      	cmp	r0, #0
 8014c2c:	d050      	beq.n	8014cd0 <_dtoa_r+0x220>
 8014c2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c32:	2300      	movs	r3, #0
 8014c34:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c38:	1b5d      	subs	r5, r3, r5
 8014c3a:	f1b5 0801 	subs.w	r8, r5, #1
 8014c3e:	bf49      	itett	mi
 8014c40:	f1c5 0301 	rsbmi	r3, r5, #1
 8014c44:	2300      	movpl	r3, #0
 8014c46:	9305      	strmi	r3, [sp, #20]
 8014c48:	f04f 0800 	movmi.w	r8, #0
 8014c4c:	bf58      	it	pl
 8014c4e:	9305      	strpl	r3, [sp, #20]
 8014c50:	f1ba 0f00 	cmp.w	sl, #0
 8014c54:	db3e      	blt.n	8014cd4 <_dtoa_r+0x224>
 8014c56:	2300      	movs	r3, #0
 8014c58:	44d0      	add	r8, sl
 8014c5a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014c5e:	9307      	str	r3, [sp, #28]
 8014c60:	9b06      	ldr	r3, [sp, #24]
 8014c62:	2b09      	cmp	r3, #9
 8014c64:	f200 8090 	bhi.w	8014d88 <_dtoa_r+0x2d8>
 8014c68:	2b05      	cmp	r3, #5
 8014c6a:	bfc4      	itt	gt
 8014c6c:	3b04      	subgt	r3, #4
 8014c6e:	9306      	strgt	r3, [sp, #24]
 8014c70:	9b06      	ldr	r3, [sp, #24]
 8014c72:	f1a3 0302 	sub.w	r3, r3, #2
 8014c76:	bfcc      	ite	gt
 8014c78:	2500      	movgt	r5, #0
 8014c7a:	2501      	movle	r5, #1
 8014c7c:	2b03      	cmp	r3, #3
 8014c7e:	f200 808f 	bhi.w	8014da0 <_dtoa_r+0x2f0>
 8014c82:	e8df f003 	tbb	[pc, r3]
 8014c86:	7f7d      	.short	0x7f7d
 8014c88:	7131      	.short	0x7131
 8014c8a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014c8e:	441d      	add	r5, r3
 8014c90:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014c94:	2820      	cmp	r0, #32
 8014c96:	dd13      	ble.n	8014cc0 <_dtoa_r+0x210>
 8014c98:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014c9c:	9b00      	ldr	r3, [sp, #0]
 8014c9e:	fa08 f800 	lsl.w	r8, r8, r0
 8014ca2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014ca6:	fa23 f000 	lsr.w	r0, r3, r0
 8014caa:	ea48 0000 	orr.w	r0, r8, r0
 8014cae:	f7eb fc41 	bl	8000534 <__aeabi_ui2d>
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014cba:	3d01      	subs	r5, #1
 8014cbc:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cbe:	e772      	b.n	8014ba6 <_dtoa_r+0xf6>
 8014cc0:	9b00      	ldr	r3, [sp, #0]
 8014cc2:	f1c0 0020 	rsb	r0, r0, #32
 8014cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8014cca:	e7f0      	b.n	8014cae <_dtoa_r+0x1fe>
 8014ccc:	2301      	movs	r3, #1
 8014cce:	e7b1      	b.n	8014c34 <_dtoa_r+0x184>
 8014cd0:	900f      	str	r0, [sp, #60]	; 0x3c
 8014cd2:	e7b0      	b.n	8014c36 <_dtoa_r+0x186>
 8014cd4:	9b05      	ldr	r3, [sp, #20]
 8014cd6:	eba3 030a 	sub.w	r3, r3, sl
 8014cda:	9305      	str	r3, [sp, #20]
 8014cdc:	f1ca 0300 	rsb	r3, sl, #0
 8014ce0:	9307      	str	r3, [sp, #28]
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	930e      	str	r3, [sp, #56]	; 0x38
 8014ce6:	e7bb      	b.n	8014c60 <_dtoa_r+0x1b0>
 8014ce8:	2301      	movs	r3, #1
 8014cea:	930a      	str	r3, [sp, #40]	; 0x28
 8014cec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	dd59      	ble.n	8014da6 <_dtoa_r+0x2f6>
 8014cf2:	9302      	str	r3, [sp, #8]
 8014cf4:	4699      	mov	r9, r3
 8014cf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	6072      	str	r2, [r6, #4]
 8014cfc:	2204      	movs	r2, #4
 8014cfe:	f102 0014 	add.w	r0, r2, #20
 8014d02:	4298      	cmp	r0, r3
 8014d04:	6871      	ldr	r1, [r6, #4]
 8014d06:	d953      	bls.n	8014db0 <_dtoa_r+0x300>
 8014d08:	4620      	mov	r0, r4
 8014d0a:	f001 f9e6 	bl	80160da <_Balloc>
 8014d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d10:	6030      	str	r0, [r6, #0]
 8014d12:	f1b9 0f0e 	cmp.w	r9, #14
 8014d16:	f8d3 b000 	ldr.w	fp, [r3]
 8014d1a:	f200 80e6 	bhi.w	8014eea <_dtoa_r+0x43a>
 8014d1e:	2d00      	cmp	r5, #0
 8014d20:	f000 80e3 	beq.w	8014eea <_dtoa_r+0x43a>
 8014d24:	ed9d 7b00 	vldr	d7, [sp]
 8014d28:	f1ba 0f00 	cmp.w	sl, #0
 8014d2c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014d30:	dd74      	ble.n	8014e1c <_dtoa_r+0x36c>
 8014d32:	4a2a      	ldr	r2, [pc, #168]	; (8014ddc <_dtoa_r+0x32c>)
 8014d34:	f00a 030f 	and.w	r3, sl, #15
 8014d38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014d3c:	ed93 7b00 	vldr	d7, [r3]
 8014d40:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014d44:	06f0      	lsls	r0, r6, #27
 8014d46:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014d4a:	d565      	bpl.n	8014e18 <_dtoa_r+0x368>
 8014d4c:	4b24      	ldr	r3, [pc, #144]	; (8014de0 <_dtoa_r+0x330>)
 8014d4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014d52:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014d56:	f7eb fd91 	bl	800087c <__aeabi_ddiv>
 8014d5a:	e9cd 0100 	strd	r0, r1, [sp]
 8014d5e:	f006 060f 	and.w	r6, r6, #15
 8014d62:	2503      	movs	r5, #3
 8014d64:	4f1e      	ldr	r7, [pc, #120]	; (8014de0 <_dtoa_r+0x330>)
 8014d66:	e04c      	b.n	8014e02 <_dtoa_r+0x352>
 8014d68:	2301      	movs	r3, #1
 8014d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d6e:	4453      	add	r3, sl
 8014d70:	f103 0901 	add.w	r9, r3, #1
 8014d74:	9302      	str	r3, [sp, #8]
 8014d76:	464b      	mov	r3, r9
 8014d78:	2b01      	cmp	r3, #1
 8014d7a:	bfb8      	it	lt
 8014d7c:	2301      	movlt	r3, #1
 8014d7e:	e7ba      	b.n	8014cf6 <_dtoa_r+0x246>
 8014d80:	2300      	movs	r3, #0
 8014d82:	e7b2      	b.n	8014cea <_dtoa_r+0x23a>
 8014d84:	2300      	movs	r3, #0
 8014d86:	e7f0      	b.n	8014d6a <_dtoa_r+0x2ba>
 8014d88:	2501      	movs	r5, #1
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	9306      	str	r3, [sp, #24]
 8014d8e:	950a      	str	r5, [sp, #40]	; 0x28
 8014d90:	f04f 33ff 	mov.w	r3, #4294967295
 8014d94:	9302      	str	r3, [sp, #8]
 8014d96:	4699      	mov	r9, r3
 8014d98:	2200      	movs	r2, #0
 8014d9a:	2312      	movs	r3, #18
 8014d9c:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d9e:	e7aa      	b.n	8014cf6 <_dtoa_r+0x246>
 8014da0:	2301      	movs	r3, #1
 8014da2:	930a      	str	r3, [sp, #40]	; 0x28
 8014da4:	e7f4      	b.n	8014d90 <_dtoa_r+0x2e0>
 8014da6:	2301      	movs	r3, #1
 8014da8:	9302      	str	r3, [sp, #8]
 8014daa:	4699      	mov	r9, r3
 8014dac:	461a      	mov	r2, r3
 8014dae:	e7f5      	b.n	8014d9c <_dtoa_r+0x2ec>
 8014db0:	3101      	adds	r1, #1
 8014db2:	6071      	str	r1, [r6, #4]
 8014db4:	0052      	lsls	r2, r2, #1
 8014db6:	e7a2      	b.n	8014cfe <_dtoa_r+0x24e>
 8014db8:	636f4361 	.word	0x636f4361
 8014dbc:	3fd287a7 	.word	0x3fd287a7
 8014dc0:	8b60c8b3 	.word	0x8b60c8b3
 8014dc4:	3fc68a28 	.word	0x3fc68a28
 8014dc8:	509f79fb 	.word	0x509f79fb
 8014dcc:	3fd34413 	.word	0x3fd34413
 8014dd0:	7ff00000 	.word	0x7ff00000
 8014dd4:	080183d4 	.word	0x080183d4
 8014dd8:	3ff80000 	.word	0x3ff80000
 8014ddc:	080182d8 	.word	0x080182d8
 8014de0:	080182b0 	.word	0x080182b0
 8014de4:	08018239 	.word	0x08018239
 8014de8:	07f1      	lsls	r1, r6, #31
 8014dea:	d508      	bpl.n	8014dfe <_dtoa_r+0x34e>
 8014dec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014df4:	f7eb fc18 	bl	8000628 <__aeabi_dmul>
 8014df8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014dfc:	3501      	adds	r5, #1
 8014dfe:	1076      	asrs	r6, r6, #1
 8014e00:	3708      	adds	r7, #8
 8014e02:	2e00      	cmp	r6, #0
 8014e04:	d1f0      	bne.n	8014de8 <_dtoa_r+0x338>
 8014e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e0e:	f7eb fd35 	bl	800087c <__aeabi_ddiv>
 8014e12:	e9cd 0100 	strd	r0, r1, [sp]
 8014e16:	e01a      	b.n	8014e4e <_dtoa_r+0x39e>
 8014e18:	2502      	movs	r5, #2
 8014e1a:	e7a3      	b.n	8014d64 <_dtoa_r+0x2b4>
 8014e1c:	f000 80a0 	beq.w	8014f60 <_dtoa_r+0x4b0>
 8014e20:	f1ca 0600 	rsb	r6, sl, #0
 8014e24:	4b9f      	ldr	r3, [pc, #636]	; (80150a4 <_dtoa_r+0x5f4>)
 8014e26:	4fa0      	ldr	r7, [pc, #640]	; (80150a8 <_dtoa_r+0x5f8>)
 8014e28:	f006 020f 	and.w	r2, r6, #15
 8014e2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e38:	f7eb fbf6 	bl	8000628 <__aeabi_dmul>
 8014e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8014e40:	1136      	asrs	r6, r6, #4
 8014e42:	2300      	movs	r3, #0
 8014e44:	2502      	movs	r5, #2
 8014e46:	2e00      	cmp	r6, #0
 8014e48:	d17f      	bne.n	8014f4a <_dtoa_r+0x49a>
 8014e4a:	2b00      	cmp	r3, #0
 8014e4c:	d1e1      	bne.n	8014e12 <_dtoa_r+0x362>
 8014e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	f000 8087 	beq.w	8014f64 <_dtoa_r+0x4b4>
 8014e56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	4b93      	ldr	r3, [pc, #588]	; (80150ac <_dtoa_r+0x5fc>)
 8014e5e:	4630      	mov	r0, r6
 8014e60:	4639      	mov	r1, r7
 8014e62:	f7eb fe53 	bl	8000b0c <__aeabi_dcmplt>
 8014e66:	2800      	cmp	r0, #0
 8014e68:	d07c      	beq.n	8014f64 <_dtoa_r+0x4b4>
 8014e6a:	f1b9 0f00 	cmp.w	r9, #0
 8014e6e:	d079      	beq.n	8014f64 <_dtoa_r+0x4b4>
 8014e70:	9b02      	ldr	r3, [sp, #8]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	dd35      	ble.n	8014ee2 <_dtoa_r+0x432>
 8014e76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014e7a:	9308      	str	r3, [sp, #32]
 8014e7c:	4639      	mov	r1, r7
 8014e7e:	2200      	movs	r2, #0
 8014e80:	4b8b      	ldr	r3, [pc, #556]	; (80150b0 <_dtoa_r+0x600>)
 8014e82:	4630      	mov	r0, r6
 8014e84:	f7eb fbd0 	bl	8000628 <__aeabi_dmul>
 8014e88:	e9cd 0100 	strd	r0, r1, [sp]
 8014e8c:	9f02      	ldr	r7, [sp, #8]
 8014e8e:	3501      	adds	r5, #1
 8014e90:	4628      	mov	r0, r5
 8014e92:	f7eb fb5f 	bl	8000554 <__aeabi_i2d>
 8014e96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e9a:	f7eb fbc5 	bl	8000628 <__aeabi_dmul>
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	4b84      	ldr	r3, [pc, #528]	; (80150b4 <_dtoa_r+0x604>)
 8014ea2:	f7eb fa0b 	bl	80002bc <__adddf3>
 8014ea6:	4605      	mov	r5, r0
 8014ea8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014eac:	2f00      	cmp	r7, #0
 8014eae:	d15d      	bne.n	8014f6c <_dtoa_r+0x4bc>
 8014eb0:	2200      	movs	r2, #0
 8014eb2:	4b81      	ldr	r3, [pc, #516]	; (80150b8 <_dtoa_r+0x608>)
 8014eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014eb8:	f7eb f9fe 	bl	80002b8 <__aeabi_dsub>
 8014ebc:	462a      	mov	r2, r5
 8014ebe:	4633      	mov	r3, r6
 8014ec0:	e9cd 0100 	strd	r0, r1, [sp]
 8014ec4:	f7eb fe40 	bl	8000b48 <__aeabi_dcmpgt>
 8014ec8:	2800      	cmp	r0, #0
 8014eca:	f040 8288 	bne.w	80153de <_dtoa_r+0x92e>
 8014ece:	462a      	mov	r2, r5
 8014ed0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014ed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ed8:	f7eb fe18 	bl	8000b0c <__aeabi_dcmplt>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	f040 827c 	bne.w	80153da <_dtoa_r+0x92a>
 8014ee2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014ee6:	e9cd 2300 	strd	r2, r3, [sp]
 8014eea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	f2c0 8150 	blt.w	8015192 <_dtoa_r+0x6e2>
 8014ef2:	f1ba 0f0e 	cmp.w	sl, #14
 8014ef6:	f300 814c 	bgt.w	8015192 <_dtoa_r+0x6e2>
 8014efa:	4b6a      	ldr	r3, [pc, #424]	; (80150a4 <_dtoa_r+0x5f4>)
 8014efc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014f00:	ed93 7b00 	vldr	d7, [r3]
 8014f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f0c:	f280 80d8 	bge.w	80150c0 <_dtoa_r+0x610>
 8014f10:	f1b9 0f00 	cmp.w	r9, #0
 8014f14:	f300 80d4 	bgt.w	80150c0 <_dtoa_r+0x610>
 8014f18:	f040 825e 	bne.w	80153d8 <_dtoa_r+0x928>
 8014f1c:	2200      	movs	r2, #0
 8014f1e:	4b66      	ldr	r3, [pc, #408]	; (80150b8 <_dtoa_r+0x608>)
 8014f20:	ec51 0b17 	vmov	r0, r1, d7
 8014f24:	f7eb fb80 	bl	8000628 <__aeabi_dmul>
 8014f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f2c:	f7eb fe02 	bl	8000b34 <__aeabi_dcmpge>
 8014f30:	464f      	mov	r7, r9
 8014f32:	464e      	mov	r6, r9
 8014f34:	2800      	cmp	r0, #0
 8014f36:	f040 8234 	bne.w	80153a2 <_dtoa_r+0x8f2>
 8014f3a:	2331      	movs	r3, #49	; 0x31
 8014f3c:	f10b 0501 	add.w	r5, fp, #1
 8014f40:	f88b 3000 	strb.w	r3, [fp]
 8014f44:	f10a 0a01 	add.w	sl, sl, #1
 8014f48:	e22f      	b.n	80153aa <_dtoa_r+0x8fa>
 8014f4a:	07f2      	lsls	r2, r6, #31
 8014f4c:	d505      	bpl.n	8014f5a <_dtoa_r+0x4aa>
 8014f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014f52:	f7eb fb69 	bl	8000628 <__aeabi_dmul>
 8014f56:	3501      	adds	r5, #1
 8014f58:	2301      	movs	r3, #1
 8014f5a:	1076      	asrs	r6, r6, #1
 8014f5c:	3708      	adds	r7, #8
 8014f5e:	e772      	b.n	8014e46 <_dtoa_r+0x396>
 8014f60:	2502      	movs	r5, #2
 8014f62:	e774      	b.n	8014e4e <_dtoa_r+0x39e>
 8014f64:	f8cd a020 	str.w	sl, [sp, #32]
 8014f68:	464f      	mov	r7, r9
 8014f6a:	e791      	b.n	8014e90 <_dtoa_r+0x3e0>
 8014f6c:	4b4d      	ldr	r3, [pc, #308]	; (80150a4 <_dtoa_r+0x5f4>)
 8014f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014f72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d047      	beq.n	801500c <_dtoa_r+0x55c>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	460b      	mov	r3, r1
 8014f80:	2000      	movs	r0, #0
 8014f82:	494e      	ldr	r1, [pc, #312]	; (80150bc <_dtoa_r+0x60c>)
 8014f84:	f7eb fc7a 	bl	800087c <__aeabi_ddiv>
 8014f88:	462a      	mov	r2, r5
 8014f8a:	4633      	mov	r3, r6
 8014f8c:	f7eb f994 	bl	80002b8 <__aeabi_dsub>
 8014f90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014f94:	465d      	mov	r5, fp
 8014f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f9a:	f7eb fdf5 	bl	8000b88 <__aeabi_d2iz>
 8014f9e:	4606      	mov	r6, r0
 8014fa0:	f7eb fad8 	bl	8000554 <__aeabi_i2d>
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	460b      	mov	r3, r1
 8014fa8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fac:	f7eb f984 	bl	80002b8 <__aeabi_dsub>
 8014fb0:	3630      	adds	r6, #48	; 0x30
 8014fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8014fb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014fba:	e9cd 0100 	strd	r0, r1, [sp]
 8014fbe:	f7eb fda5 	bl	8000b0c <__aeabi_dcmplt>
 8014fc2:	2800      	cmp	r0, #0
 8014fc4:	d163      	bne.n	801508e <_dtoa_r+0x5de>
 8014fc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fca:	2000      	movs	r0, #0
 8014fcc:	4937      	ldr	r1, [pc, #220]	; (80150ac <_dtoa_r+0x5fc>)
 8014fce:	f7eb f973 	bl	80002b8 <__aeabi_dsub>
 8014fd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014fd6:	f7eb fd99 	bl	8000b0c <__aeabi_dcmplt>
 8014fda:	2800      	cmp	r0, #0
 8014fdc:	f040 80b7 	bne.w	801514e <_dtoa_r+0x69e>
 8014fe0:	eba5 030b 	sub.w	r3, r5, fp
 8014fe4:	429f      	cmp	r7, r3
 8014fe6:	f77f af7c 	ble.w	8014ee2 <_dtoa_r+0x432>
 8014fea:	2200      	movs	r2, #0
 8014fec:	4b30      	ldr	r3, [pc, #192]	; (80150b0 <_dtoa_r+0x600>)
 8014fee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014ff2:	f7eb fb19 	bl	8000628 <__aeabi_dmul>
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014ffc:	4b2c      	ldr	r3, [pc, #176]	; (80150b0 <_dtoa_r+0x600>)
 8014ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015002:	f7eb fb11 	bl	8000628 <__aeabi_dmul>
 8015006:	e9cd 0100 	strd	r0, r1, [sp]
 801500a:	e7c4      	b.n	8014f96 <_dtoa_r+0x4e6>
 801500c:	462a      	mov	r2, r5
 801500e:	4633      	mov	r3, r6
 8015010:	f7eb fb0a 	bl	8000628 <__aeabi_dmul>
 8015014:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015018:	eb0b 0507 	add.w	r5, fp, r7
 801501c:	465e      	mov	r6, fp
 801501e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015022:	f7eb fdb1 	bl	8000b88 <__aeabi_d2iz>
 8015026:	4607      	mov	r7, r0
 8015028:	f7eb fa94 	bl	8000554 <__aeabi_i2d>
 801502c:	3730      	adds	r7, #48	; 0x30
 801502e:	4602      	mov	r2, r0
 8015030:	460b      	mov	r3, r1
 8015032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015036:	f7eb f93f 	bl	80002b8 <__aeabi_dsub>
 801503a:	f806 7b01 	strb.w	r7, [r6], #1
 801503e:	42ae      	cmp	r6, r5
 8015040:	e9cd 0100 	strd	r0, r1, [sp]
 8015044:	f04f 0200 	mov.w	r2, #0
 8015048:	d126      	bne.n	8015098 <_dtoa_r+0x5e8>
 801504a:	4b1c      	ldr	r3, [pc, #112]	; (80150bc <_dtoa_r+0x60c>)
 801504c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015050:	f7eb f934 	bl	80002bc <__adddf3>
 8015054:	4602      	mov	r2, r0
 8015056:	460b      	mov	r3, r1
 8015058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801505c:	f7eb fd74 	bl	8000b48 <__aeabi_dcmpgt>
 8015060:	2800      	cmp	r0, #0
 8015062:	d174      	bne.n	801514e <_dtoa_r+0x69e>
 8015064:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015068:	2000      	movs	r0, #0
 801506a:	4914      	ldr	r1, [pc, #80]	; (80150bc <_dtoa_r+0x60c>)
 801506c:	f7eb f924 	bl	80002b8 <__aeabi_dsub>
 8015070:	4602      	mov	r2, r0
 8015072:	460b      	mov	r3, r1
 8015074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015078:	f7eb fd48 	bl	8000b0c <__aeabi_dcmplt>
 801507c:	2800      	cmp	r0, #0
 801507e:	f43f af30 	beq.w	8014ee2 <_dtoa_r+0x432>
 8015082:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015086:	2b30      	cmp	r3, #48	; 0x30
 8015088:	f105 32ff 	add.w	r2, r5, #4294967295
 801508c:	d002      	beq.n	8015094 <_dtoa_r+0x5e4>
 801508e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015092:	e04a      	b.n	801512a <_dtoa_r+0x67a>
 8015094:	4615      	mov	r5, r2
 8015096:	e7f4      	b.n	8015082 <_dtoa_r+0x5d2>
 8015098:	4b05      	ldr	r3, [pc, #20]	; (80150b0 <_dtoa_r+0x600>)
 801509a:	f7eb fac5 	bl	8000628 <__aeabi_dmul>
 801509e:	e9cd 0100 	strd	r0, r1, [sp]
 80150a2:	e7bc      	b.n	801501e <_dtoa_r+0x56e>
 80150a4:	080182d8 	.word	0x080182d8
 80150a8:	080182b0 	.word	0x080182b0
 80150ac:	3ff00000 	.word	0x3ff00000
 80150b0:	40240000 	.word	0x40240000
 80150b4:	401c0000 	.word	0x401c0000
 80150b8:	40140000 	.word	0x40140000
 80150bc:	3fe00000 	.word	0x3fe00000
 80150c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80150c4:	465d      	mov	r5, fp
 80150c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150ca:	4630      	mov	r0, r6
 80150cc:	4639      	mov	r1, r7
 80150ce:	f7eb fbd5 	bl	800087c <__aeabi_ddiv>
 80150d2:	f7eb fd59 	bl	8000b88 <__aeabi_d2iz>
 80150d6:	4680      	mov	r8, r0
 80150d8:	f7eb fa3c 	bl	8000554 <__aeabi_i2d>
 80150dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80150e0:	f7eb faa2 	bl	8000628 <__aeabi_dmul>
 80150e4:	4602      	mov	r2, r0
 80150e6:	460b      	mov	r3, r1
 80150e8:	4630      	mov	r0, r6
 80150ea:	4639      	mov	r1, r7
 80150ec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80150f0:	f7eb f8e2 	bl	80002b8 <__aeabi_dsub>
 80150f4:	f805 6b01 	strb.w	r6, [r5], #1
 80150f8:	eba5 060b 	sub.w	r6, r5, fp
 80150fc:	45b1      	cmp	r9, r6
 80150fe:	4602      	mov	r2, r0
 8015100:	460b      	mov	r3, r1
 8015102:	d139      	bne.n	8015178 <_dtoa_r+0x6c8>
 8015104:	f7eb f8da 	bl	80002bc <__adddf3>
 8015108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801510c:	4606      	mov	r6, r0
 801510e:	460f      	mov	r7, r1
 8015110:	f7eb fd1a 	bl	8000b48 <__aeabi_dcmpgt>
 8015114:	b9c8      	cbnz	r0, 801514a <_dtoa_r+0x69a>
 8015116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801511a:	4630      	mov	r0, r6
 801511c:	4639      	mov	r1, r7
 801511e:	f7eb fceb 	bl	8000af8 <__aeabi_dcmpeq>
 8015122:	b110      	cbz	r0, 801512a <_dtoa_r+0x67a>
 8015124:	f018 0f01 	tst.w	r8, #1
 8015128:	d10f      	bne.n	801514a <_dtoa_r+0x69a>
 801512a:	9904      	ldr	r1, [sp, #16]
 801512c:	4620      	mov	r0, r4
 801512e:	f001 f808 	bl	8016142 <_Bfree>
 8015132:	2300      	movs	r3, #0
 8015134:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015136:	702b      	strb	r3, [r5, #0]
 8015138:	f10a 0301 	add.w	r3, sl, #1
 801513c:	6013      	str	r3, [r2, #0]
 801513e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 8241 	beq.w	80155c8 <_dtoa_r+0xb18>
 8015146:	601d      	str	r5, [r3, #0]
 8015148:	e23e      	b.n	80155c8 <_dtoa_r+0xb18>
 801514a:	f8cd a020 	str.w	sl, [sp, #32]
 801514e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015152:	2a39      	cmp	r2, #57	; 0x39
 8015154:	f105 33ff 	add.w	r3, r5, #4294967295
 8015158:	d108      	bne.n	801516c <_dtoa_r+0x6bc>
 801515a:	459b      	cmp	fp, r3
 801515c:	d10a      	bne.n	8015174 <_dtoa_r+0x6c4>
 801515e:	9b08      	ldr	r3, [sp, #32]
 8015160:	3301      	adds	r3, #1
 8015162:	9308      	str	r3, [sp, #32]
 8015164:	2330      	movs	r3, #48	; 0x30
 8015166:	f88b 3000 	strb.w	r3, [fp]
 801516a:	465b      	mov	r3, fp
 801516c:	781a      	ldrb	r2, [r3, #0]
 801516e:	3201      	adds	r2, #1
 8015170:	701a      	strb	r2, [r3, #0]
 8015172:	e78c      	b.n	801508e <_dtoa_r+0x5de>
 8015174:	461d      	mov	r5, r3
 8015176:	e7ea      	b.n	801514e <_dtoa_r+0x69e>
 8015178:	2200      	movs	r2, #0
 801517a:	4b9b      	ldr	r3, [pc, #620]	; (80153e8 <_dtoa_r+0x938>)
 801517c:	f7eb fa54 	bl	8000628 <__aeabi_dmul>
 8015180:	2200      	movs	r2, #0
 8015182:	2300      	movs	r3, #0
 8015184:	4606      	mov	r6, r0
 8015186:	460f      	mov	r7, r1
 8015188:	f7eb fcb6 	bl	8000af8 <__aeabi_dcmpeq>
 801518c:	2800      	cmp	r0, #0
 801518e:	d09a      	beq.n	80150c6 <_dtoa_r+0x616>
 8015190:	e7cb      	b.n	801512a <_dtoa_r+0x67a>
 8015192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015194:	2a00      	cmp	r2, #0
 8015196:	f000 808b 	beq.w	80152b0 <_dtoa_r+0x800>
 801519a:	9a06      	ldr	r2, [sp, #24]
 801519c:	2a01      	cmp	r2, #1
 801519e:	dc6e      	bgt.n	801527e <_dtoa_r+0x7ce>
 80151a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80151a2:	2a00      	cmp	r2, #0
 80151a4:	d067      	beq.n	8015276 <_dtoa_r+0x7c6>
 80151a6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80151aa:	9f07      	ldr	r7, [sp, #28]
 80151ac:	9d05      	ldr	r5, [sp, #20]
 80151ae:	9a05      	ldr	r2, [sp, #20]
 80151b0:	2101      	movs	r1, #1
 80151b2:	441a      	add	r2, r3
 80151b4:	4620      	mov	r0, r4
 80151b6:	9205      	str	r2, [sp, #20]
 80151b8:	4498      	add	r8, r3
 80151ba:	f001 f8a0 	bl	80162fe <__i2b>
 80151be:	4606      	mov	r6, r0
 80151c0:	2d00      	cmp	r5, #0
 80151c2:	dd0c      	ble.n	80151de <_dtoa_r+0x72e>
 80151c4:	f1b8 0f00 	cmp.w	r8, #0
 80151c8:	dd09      	ble.n	80151de <_dtoa_r+0x72e>
 80151ca:	4545      	cmp	r5, r8
 80151cc:	9a05      	ldr	r2, [sp, #20]
 80151ce:	462b      	mov	r3, r5
 80151d0:	bfa8      	it	ge
 80151d2:	4643      	movge	r3, r8
 80151d4:	1ad2      	subs	r2, r2, r3
 80151d6:	9205      	str	r2, [sp, #20]
 80151d8:	1aed      	subs	r5, r5, r3
 80151da:	eba8 0803 	sub.w	r8, r8, r3
 80151de:	9b07      	ldr	r3, [sp, #28]
 80151e0:	b1eb      	cbz	r3, 801521e <_dtoa_r+0x76e>
 80151e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d067      	beq.n	80152b8 <_dtoa_r+0x808>
 80151e8:	b18f      	cbz	r7, 801520e <_dtoa_r+0x75e>
 80151ea:	4631      	mov	r1, r6
 80151ec:	463a      	mov	r2, r7
 80151ee:	4620      	mov	r0, r4
 80151f0:	f001 f924 	bl	801643c <__pow5mult>
 80151f4:	9a04      	ldr	r2, [sp, #16]
 80151f6:	4601      	mov	r1, r0
 80151f8:	4606      	mov	r6, r0
 80151fa:	4620      	mov	r0, r4
 80151fc:	f001 f888 	bl	8016310 <__multiply>
 8015200:	9904      	ldr	r1, [sp, #16]
 8015202:	9008      	str	r0, [sp, #32]
 8015204:	4620      	mov	r0, r4
 8015206:	f000 ff9c 	bl	8016142 <_Bfree>
 801520a:	9b08      	ldr	r3, [sp, #32]
 801520c:	9304      	str	r3, [sp, #16]
 801520e:	9b07      	ldr	r3, [sp, #28]
 8015210:	1bda      	subs	r2, r3, r7
 8015212:	d004      	beq.n	801521e <_dtoa_r+0x76e>
 8015214:	9904      	ldr	r1, [sp, #16]
 8015216:	4620      	mov	r0, r4
 8015218:	f001 f910 	bl	801643c <__pow5mult>
 801521c:	9004      	str	r0, [sp, #16]
 801521e:	2101      	movs	r1, #1
 8015220:	4620      	mov	r0, r4
 8015222:	f001 f86c 	bl	80162fe <__i2b>
 8015226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015228:	4607      	mov	r7, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	f000 81d0 	beq.w	80155d0 <_dtoa_r+0xb20>
 8015230:	461a      	mov	r2, r3
 8015232:	4601      	mov	r1, r0
 8015234:	4620      	mov	r0, r4
 8015236:	f001 f901 	bl	801643c <__pow5mult>
 801523a:	9b06      	ldr	r3, [sp, #24]
 801523c:	2b01      	cmp	r3, #1
 801523e:	4607      	mov	r7, r0
 8015240:	dc40      	bgt.n	80152c4 <_dtoa_r+0x814>
 8015242:	9b00      	ldr	r3, [sp, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d139      	bne.n	80152bc <_dtoa_r+0x80c>
 8015248:	9b01      	ldr	r3, [sp, #4]
 801524a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801524e:	2b00      	cmp	r3, #0
 8015250:	d136      	bne.n	80152c0 <_dtoa_r+0x810>
 8015252:	9b01      	ldr	r3, [sp, #4]
 8015254:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015258:	0d1b      	lsrs	r3, r3, #20
 801525a:	051b      	lsls	r3, r3, #20
 801525c:	b12b      	cbz	r3, 801526a <_dtoa_r+0x7ba>
 801525e:	9b05      	ldr	r3, [sp, #20]
 8015260:	3301      	adds	r3, #1
 8015262:	9305      	str	r3, [sp, #20]
 8015264:	f108 0801 	add.w	r8, r8, #1
 8015268:	2301      	movs	r3, #1
 801526a:	9307      	str	r3, [sp, #28]
 801526c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801526e:	2b00      	cmp	r3, #0
 8015270:	d12a      	bne.n	80152c8 <_dtoa_r+0x818>
 8015272:	2001      	movs	r0, #1
 8015274:	e030      	b.n	80152d8 <_dtoa_r+0x828>
 8015276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015278:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801527c:	e795      	b.n	80151aa <_dtoa_r+0x6fa>
 801527e:	9b07      	ldr	r3, [sp, #28]
 8015280:	f109 37ff 	add.w	r7, r9, #4294967295
 8015284:	42bb      	cmp	r3, r7
 8015286:	bfbf      	itttt	lt
 8015288:	9b07      	ldrlt	r3, [sp, #28]
 801528a:	9707      	strlt	r7, [sp, #28]
 801528c:	1afa      	sublt	r2, r7, r3
 801528e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015290:	bfbb      	ittet	lt
 8015292:	189b      	addlt	r3, r3, r2
 8015294:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015296:	1bdf      	subge	r7, r3, r7
 8015298:	2700      	movlt	r7, #0
 801529a:	f1b9 0f00 	cmp.w	r9, #0
 801529e:	bfb5      	itete	lt
 80152a0:	9b05      	ldrlt	r3, [sp, #20]
 80152a2:	9d05      	ldrge	r5, [sp, #20]
 80152a4:	eba3 0509 	sublt.w	r5, r3, r9
 80152a8:	464b      	movge	r3, r9
 80152aa:	bfb8      	it	lt
 80152ac:	2300      	movlt	r3, #0
 80152ae:	e77e      	b.n	80151ae <_dtoa_r+0x6fe>
 80152b0:	9f07      	ldr	r7, [sp, #28]
 80152b2:	9d05      	ldr	r5, [sp, #20]
 80152b4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80152b6:	e783      	b.n	80151c0 <_dtoa_r+0x710>
 80152b8:	9a07      	ldr	r2, [sp, #28]
 80152ba:	e7ab      	b.n	8015214 <_dtoa_r+0x764>
 80152bc:	2300      	movs	r3, #0
 80152be:	e7d4      	b.n	801526a <_dtoa_r+0x7ba>
 80152c0:	9b00      	ldr	r3, [sp, #0]
 80152c2:	e7d2      	b.n	801526a <_dtoa_r+0x7ba>
 80152c4:	2300      	movs	r3, #0
 80152c6:	9307      	str	r3, [sp, #28]
 80152c8:	693b      	ldr	r3, [r7, #16]
 80152ca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80152ce:	6918      	ldr	r0, [r3, #16]
 80152d0:	f000 ffc7 	bl	8016262 <__hi0bits>
 80152d4:	f1c0 0020 	rsb	r0, r0, #32
 80152d8:	4440      	add	r0, r8
 80152da:	f010 001f 	ands.w	r0, r0, #31
 80152de:	d047      	beq.n	8015370 <_dtoa_r+0x8c0>
 80152e0:	f1c0 0320 	rsb	r3, r0, #32
 80152e4:	2b04      	cmp	r3, #4
 80152e6:	dd3b      	ble.n	8015360 <_dtoa_r+0x8b0>
 80152e8:	9b05      	ldr	r3, [sp, #20]
 80152ea:	f1c0 001c 	rsb	r0, r0, #28
 80152ee:	4403      	add	r3, r0
 80152f0:	9305      	str	r3, [sp, #20]
 80152f2:	4405      	add	r5, r0
 80152f4:	4480      	add	r8, r0
 80152f6:	9b05      	ldr	r3, [sp, #20]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	dd05      	ble.n	8015308 <_dtoa_r+0x858>
 80152fc:	461a      	mov	r2, r3
 80152fe:	9904      	ldr	r1, [sp, #16]
 8015300:	4620      	mov	r0, r4
 8015302:	f001 f8e9 	bl	80164d8 <__lshift>
 8015306:	9004      	str	r0, [sp, #16]
 8015308:	f1b8 0f00 	cmp.w	r8, #0
 801530c:	dd05      	ble.n	801531a <_dtoa_r+0x86a>
 801530e:	4639      	mov	r1, r7
 8015310:	4642      	mov	r2, r8
 8015312:	4620      	mov	r0, r4
 8015314:	f001 f8e0 	bl	80164d8 <__lshift>
 8015318:	4607      	mov	r7, r0
 801531a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801531c:	b353      	cbz	r3, 8015374 <_dtoa_r+0x8c4>
 801531e:	4639      	mov	r1, r7
 8015320:	9804      	ldr	r0, [sp, #16]
 8015322:	f001 f92d 	bl	8016580 <__mcmp>
 8015326:	2800      	cmp	r0, #0
 8015328:	da24      	bge.n	8015374 <_dtoa_r+0x8c4>
 801532a:	2300      	movs	r3, #0
 801532c:	220a      	movs	r2, #10
 801532e:	9904      	ldr	r1, [sp, #16]
 8015330:	4620      	mov	r0, r4
 8015332:	f000 ff1d 	bl	8016170 <__multadd>
 8015336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015338:	9004      	str	r0, [sp, #16]
 801533a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801533e:	2b00      	cmp	r3, #0
 8015340:	f000 814d 	beq.w	80155de <_dtoa_r+0xb2e>
 8015344:	2300      	movs	r3, #0
 8015346:	4631      	mov	r1, r6
 8015348:	220a      	movs	r2, #10
 801534a:	4620      	mov	r0, r4
 801534c:	f000 ff10 	bl	8016170 <__multadd>
 8015350:	9b02      	ldr	r3, [sp, #8]
 8015352:	2b00      	cmp	r3, #0
 8015354:	4606      	mov	r6, r0
 8015356:	dc4f      	bgt.n	80153f8 <_dtoa_r+0x948>
 8015358:	9b06      	ldr	r3, [sp, #24]
 801535a:	2b02      	cmp	r3, #2
 801535c:	dd4c      	ble.n	80153f8 <_dtoa_r+0x948>
 801535e:	e011      	b.n	8015384 <_dtoa_r+0x8d4>
 8015360:	d0c9      	beq.n	80152f6 <_dtoa_r+0x846>
 8015362:	9a05      	ldr	r2, [sp, #20]
 8015364:	331c      	adds	r3, #28
 8015366:	441a      	add	r2, r3
 8015368:	9205      	str	r2, [sp, #20]
 801536a:	441d      	add	r5, r3
 801536c:	4498      	add	r8, r3
 801536e:	e7c2      	b.n	80152f6 <_dtoa_r+0x846>
 8015370:	4603      	mov	r3, r0
 8015372:	e7f6      	b.n	8015362 <_dtoa_r+0x8b2>
 8015374:	f1b9 0f00 	cmp.w	r9, #0
 8015378:	dc38      	bgt.n	80153ec <_dtoa_r+0x93c>
 801537a:	9b06      	ldr	r3, [sp, #24]
 801537c:	2b02      	cmp	r3, #2
 801537e:	dd35      	ble.n	80153ec <_dtoa_r+0x93c>
 8015380:	f8cd 9008 	str.w	r9, [sp, #8]
 8015384:	9b02      	ldr	r3, [sp, #8]
 8015386:	b963      	cbnz	r3, 80153a2 <_dtoa_r+0x8f2>
 8015388:	4639      	mov	r1, r7
 801538a:	2205      	movs	r2, #5
 801538c:	4620      	mov	r0, r4
 801538e:	f000 feef 	bl	8016170 <__multadd>
 8015392:	4601      	mov	r1, r0
 8015394:	4607      	mov	r7, r0
 8015396:	9804      	ldr	r0, [sp, #16]
 8015398:	f001 f8f2 	bl	8016580 <__mcmp>
 801539c:	2800      	cmp	r0, #0
 801539e:	f73f adcc 	bgt.w	8014f3a <_dtoa_r+0x48a>
 80153a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153a4:	465d      	mov	r5, fp
 80153a6:	ea6f 0a03 	mvn.w	sl, r3
 80153aa:	f04f 0900 	mov.w	r9, #0
 80153ae:	4639      	mov	r1, r7
 80153b0:	4620      	mov	r0, r4
 80153b2:	f000 fec6 	bl	8016142 <_Bfree>
 80153b6:	2e00      	cmp	r6, #0
 80153b8:	f43f aeb7 	beq.w	801512a <_dtoa_r+0x67a>
 80153bc:	f1b9 0f00 	cmp.w	r9, #0
 80153c0:	d005      	beq.n	80153ce <_dtoa_r+0x91e>
 80153c2:	45b1      	cmp	r9, r6
 80153c4:	d003      	beq.n	80153ce <_dtoa_r+0x91e>
 80153c6:	4649      	mov	r1, r9
 80153c8:	4620      	mov	r0, r4
 80153ca:	f000 feba 	bl	8016142 <_Bfree>
 80153ce:	4631      	mov	r1, r6
 80153d0:	4620      	mov	r0, r4
 80153d2:	f000 feb6 	bl	8016142 <_Bfree>
 80153d6:	e6a8      	b.n	801512a <_dtoa_r+0x67a>
 80153d8:	2700      	movs	r7, #0
 80153da:	463e      	mov	r6, r7
 80153dc:	e7e1      	b.n	80153a2 <_dtoa_r+0x8f2>
 80153de:	f8dd a020 	ldr.w	sl, [sp, #32]
 80153e2:	463e      	mov	r6, r7
 80153e4:	e5a9      	b.n	8014f3a <_dtoa_r+0x48a>
 80153e6:	bf00      	nop
 80153e8:	40240000 	.word	0x40240000
 80153ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153ee:	f8cd 9008 	str.w	r9, [sp, #8]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f000 80fa 	beq.w	80155ec <_dtoa_r+0xb3c>
 80153f8:	2d00      	cmp	r5, #0
 80153fa:	dd05      	ble.n	8015408 <_dtoa_r+0x958>
 80153fc:	4631      	mov	r1, r6
 80153fe:	462a      	mov	r2, r5
 8015400:	4620      	mov	r0, r4
 8015402:	f001 f869 	bl	80164d8 <__lshift>
 8015406:	4606      	mov	r6, r0
 8015408:	9b07      	ldr	r3, [sp, #28]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d04c      	beq.n	80154a8 <_dtoa_r+0x9f8>
 801540e:	6871      	ldr	r1, [r6, #4]
 8015410:	4620      	mov	r0, r4
 8015412:	f000 fe62 	bl	80160da <_Balloc>
 8015416:	6932      	ldr	r2, [r6, #16]
 8015418:	3202      	adds	r2, #2
 801541a:	4605      	mov	r5, r0
 801541c:	0092      	lsls	r2, r2, #2
 801541e:	f106 010c 	add.w	r1, r6, #12
 8015422:	300c      	adds	r0, #12
 8015424:	f000 fe4e 	bl	80160c4 <memcpy>
 8015428:	2201      	movs	r2, #1
 801542a:	4629      	mov	r1, r5
 801542c:	4620      	mov	r0, r4
 801542e:	f001 f853 	bl	80164d8 <__lshift>
 8015432:	9b00      	ldr	r3, [sp, #0]
 8015434:	f8cd b014 	str.w	fp, [sp, #20]
 8015438:	f003 0301 	and.w	r3, r3, #1
 801543c:	46b1      	mov	r9, r6
 801543e:	9307      	str	r3, [sp, #28]
 8015440:	4606      	mov	r6, r0
 8015442:	4639      	mov	r1, r7
 8015444:	9804      	ldr	r0, [sp, #16]
 8015446:	f7ff faa7 	bl	8014998 <quorem>
 801544a:	4649      	mov	r1, r9
 801544c:	4605      	mov	r5, r0
 801544e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015452:	9804      	ldr	r0, [sp, #16]
 8015454:	f001 f894 	bl	8016580 <__mcmp>
 8015458:	4632      	mov	r2, r6
 801545a:	9000      	str	r0, [sp, #0]
 801545c:	4639      	mov	r1, r7
 801545e:	4620      	mov	r0, r4
 8015460:	f001 f8a8 	bl	80165b4 <__mdiff>
 8015464:	68c3      	ldr	r3, [r0, #12]
 8015466:	4602      	mov	r2, r0
 8015468:	bb03      	cbnz	r3, 80154ac <_dtoa_r+0x9fc>
 801546a:	4601      	mov	r1, r0
 801546c:	9008      	str	r0, [sp, #32]
 801546e:	9804      	ldr	r0, [sp, #16]
 8015470:	f001 f886 	bl	8016580 <__mcmp>
 8015474:	9a08      	ldr	r2, [sp, #32]
 8015476:	4603      	mov	r3, r0
 8015478:	4611      	mov	r1, r2
 801547a:	4620      	mov	r0, r4
 801547c:	9308      	str	r3, [sp, #32]
 801547e:	f000 fe60 	bl	8016142 <_Bfree>
 8015482:	9b08      	ldr	r3, [sp, #32]
 8015484:	b9a3      	cbnz	r3, 80154b0 <_dtoa_r+0xa00>
 8015486:	9a06      	ldr	r2, [sp, #24]
 8015488:	b992      	cbnz	r2, 80154b0 <_dtoa_r+0xa00>
 801548a:	9a07      	ldr	r2, [sp, #28]
 801548c:	b982      	cbnz	r2, 80154b0 <_dtoa_r+0xa00>
 801548e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015492:	d029      	beq.n	80154e8 <_dtoa_r+0xa38>
 8015494:	9b00      	ldr	r3, [sp, #0]
 8015496:	2b00      	cmp	r3, #0
 8015498:	dd01      	ble.n	801549e <_dtoa_r+0x9ee>
 801549a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801549e:	9b05      	ldr	r3, [sp, #20]
 80154a0:	1c5d      	adds	r5, r3, #1
 80154a2:	f883 8000 	strb.w	r8, [r3]
 80154a6:	e782      	b.n	80153ae <_dtoa_r+0x8fe>
 80154a8:	4630      	mov	r0, r6
 80154aa:	e7c2      	b.n	8015432 <_dtoa_r+0x982>
 80154ac:	2301      	movs	r3, #1
 80154ae:	e7e3      	b.n	8015478 <_dtoa_r+0x9c8>
 80154b0:	9a00      	ldr	r2, [sp, #0]
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	db04      	blt.n	80154c0 <_dtoa_r+0xa10>
 80154b6:	d125      	bne.n	8015504 <_dtoa_r+0xa54>
 80154b8:	9a06      	ldr	r2, [sp, #24]
 80154ba:	bb1a      	cbnz	r2, 8015504 <_dtoa_r+0xa54>
 80154bc:	9a07      	ldr	r2, [sp, #28]
 80154be:	bb0a      	cbnz	r2, 8015504 <_dtoa_r+0xa54>
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	ddec      	ble.n	801549e <_dtoa_r+0x9ee>
 80154c4:	2201      	movs	r2, #1
 80154c6:	9904      	ldr	r1, [sp, #16]
 80154c8:	4620      	mov	r0, r4
 80154ca:	f001 f805 	bl	80164d8 <__lshift>
 80154ce:	4639      	mov	r1, r7
 80154d0:	9004      	str	r0, [sp, #16]
 80154d2:	f001 f855 	bl	8016580 <__mcmp>
 80154d6:	2800      	cmp	r0, #0
 80154d8:	dc03      	bgt.n	80154e2 <_dtoa_r+0xa32>
 80154da:	d1e0      	bne.n	801549e <_dtoa_r+0x9ee>
 80154dc:	f018 0f01 	tst.w	r8, #1
 80154e0:	d0dd      	beq.n	801549e <_dtoa_r+0x9ee>
 80154e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80154e6:	d1d8      	bne.n	801549a <_dtoa_r+0x9ea>
 80154e8:	9b05      	ldr	r3, [sp, #20]
 80154ea:	9a05      	ldr	r2, [sp, #20]
 80154ec:	1c5d      	adds	r5, r3, #1
 80154ee:	2339      	movs	r3, #57	; 0x39
 80154f0:	7013      	strb	r3, [r2, #0]
 80154f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80154f6:	2b39      	cmp	r3, #57	; 0x39
 80154f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80154fc:	d04f      	beq.n	801559e <_dtoa_r+0xaee>
 80154fe:	3301      	adds	r3, #1
 8015500:	7013      	strb	r3, [r2, #0]
 8015502:	e754      	b.n	80153ae <_dtoa_r+0x8fe>
 8015504:	9a05      	ldr	r2, [sp, #20]
 8015506:	2b00      	cmp	r3, #0
 8015508:	f102 0501 	add.w	r5, r2, #1
 801550c:	dd06      	ble.n	801551c <_dtoa_r+0xa6c>
 801550e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015512:	d0e9      	beq.n	80154e8 <_dtoa_r+0xa38>
 8015514:	f108 0801 	add.w	r8, r8, #1
 8015518:	9b05      	ldr	r3, [sp, #20]
 801551a:	e7c2      	b.n	80154a2 <_dtoa_r+0x9f2>
 801551c:	9a02      	ldr	r2, [sp, #8]
 801551e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015522:	eba5 030b 	sub.w	r3, r5, fp
 8015526:	4293      	cmp	r3, r2
 8015528:	d021      	beq.n	801556e <_dtoa_r+0xabe>
 801552a:	2300      	movs	r3, #0
 801552c:	220a      	movs	r2, #10
 801552e:	9904      	ldr	r1, [sp, #16]
 8015530:	4620      	mov	r0, r4
 8015532:	f000 fe1d 	bl	8016170 <__multadd>
 8015536:	45b1      	cmp	r9, r6
 8015538:	9004      	str	r0, [sp, #16]
 801553a:	f04f 0300 	mov.w	r3, #0
 801553e:	f04f 020a 	mov.w	r2, #10
 8015542:	4649      	mov	r1, r9
 8015544:	4620      	mov	r0, r4
 8015546:	d105      	bne.n	8015554 <_dtoa_r+0xaa4>
 8015548:	f000 fe12 	bl	8016170 <__multadd>
 801554c:	4681      	mov	r9, r0
 801554e:	4606      	mov	r6, r0
 8015550:	9505      	str	r5, [sp, #20]
 8015552:	e776      	b.n	8015442 <_dtoa_r+0x992>
 8015554:	f000 fe0c 	bl	8016170 <__multadd>
 8015558:	4631      	mov	r1, r6
 801555a:	4681      	mov	r9, r0
 801555c:	2300      	movs	r3, #0
 801555e:	220a      	movs	r2, #10
 8015560:	4620      	mov	r0, r4
 8015562:	f000 fe05 	bl	8016170 <__multadd>
 8015566:	4606      	mov	r6, r0
 8015568:	e7f2      	b.n	8015550 <_dtoa_r+0xaa0>
 801556a:	f04f 0900 	mov.w	r9, #0
 801556e:	2201      	movs	r2, #1
 8015570:	9904      	ldr	r1, [sp, #16]
 8015572:	4620      	mov	r0, r4
 8015574:	f000 ffb0 	bl	80164d8 <__lshift>
 8015578:	4639      	mov	r1, r7
 801557a:	9004      	str	r0, [sp, #16]
 801557c:	f001 f800 	bl	8016580 <__mcmp>
 8015580:	2800      	cmp	r0, #0
 8015582:	dcb6      	bgt.n	80154f2 <_dtoa_r+0xa42>
 8015584:	d102      	bne.n	801558c <_dtoa_r+0xadc>
 8015586:	f018 0f01 	tst.w	r8, #1
 801558a:	d1b2      	bne.n	80154f2 <_dtoa_r+0xa42>
 801558c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015590:	2b30      	cmp	r3, #48	; 0x30
 8015592:	f105 32ff 	add.w	r2, r5, #4294967295
 8015596:	f47f af0a 	bne.w	80153ae <_dtoa_r+0x8fe>
 801559a:	4615      	mov	r5, r2
 801559c:	e7f6      	b.n	801558c <_dtoa_r+0xadc>
 801559e:	4593      	cmp	fp, r2
 80155a0:	d105      	bne.n	80155ae <_dtoa_r+0xafe>
 80155a2:	2331      	movs	r3, #49	; 0x31
 80155a4:	f10a 0a01 	add.w	sl, sl, #1
 80155a8:	f88b 3000 	strb.w	r3, [fp]
 80155ac:	e6ff      	b.n	80153ae <_dtoa_r+0x8fe>
 80155ae:	4615      	mov	r5, r2
 80155b0:	e79f      	b.n	80154f2 <_dtoa_r+0xa42>
 80155b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015618 <_dtoa_r+0xb68>
 80155b6:	e007      	b.n	80155c8 <_dtoa_r+0xb18>
 80155b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80155ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 801561c <_dtoa_r+0xb6c>
 80155be:	b11b      	cbz	r3, 80155c8 <_dtoa_r+0xb18>
 80155c0:	f10b 0308 	add.w	r3, fp, #8
 80155c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80155c6:	6013      	str	r3, [r2, #0]
 80155c8:	4658      	mov	r0, fp
 80155ca:	b017      	add	sp, #92	; 0x5c
 80155cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155d0:	9b06      	ldr	r3, [sp, #24]
 80155d2:	2b01      	cmp	r3, #1
 80155d4:	f77f ae35 	ble.w	8015242 <_dtoa_r+0x792>
 80155d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155da:	9307      	str	r3, [sp, #28]
 80155dc:	e649      	b.n	8015272 <_dtoa_r+0x7c2>
 80155de:	9b02      	ldr	r3, [sp, #8]
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	dc03      	bgt.n	80155ec <_dtoa_r+0xb3c>
 80155e4:	9b06      	ldr	r3, [sp, #24]
 80155e6:	2b02      	cmp	r3, #2
 80155e8:	f73f aecc 	bgt.w	8015384 <_dtoa_r+0x8d4>
 80155ec:	465d      	mov	r5, fp
 80155ee:	4639      	mov	r1, r7
 80155f0:	9804      	ldr	r0, [sp, #16]
 80155f2:	f7ff f9d1 	bl	8014998 <quorem>
 80155f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80155fa:	f805 8b01 	strb.w	r8, [r5], #1
 80155fe:	9a02      	ldr	r2, [sp, #8]
 8015600:	eba5 030b 	sub.w	r3, r5, fp
 8015604:	429a      	cmp	r2, r3
 8015606:	ddb0      	ble.n	801556a <_dtoa_r+0xaba>
 8015608:	2300      	movs	r3, #0
 801560a:	220a      	movs	r2, #10
 801560c:	9904      	ldr	r1, [sp, #16]
 801560e:	4620      	mov	r0, r4
 8015610:	f000 fdae 	bl	8016170 <__multadd>
 8015614:	9004      	str	r0, [sp, #16]
 8015616:	e7ea      	b.n	80155ee <_dtoa_r+0xb3e>
 8015618:	080183d3 	.word	0x080183d3
 801561c:	08018230 	.word	0x08018230

08015620 <__sflush_r>:
 8015620:	898a      	ldrh	r2, [r1, #12]
 8015622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015626:	4605      	mov	r5, r0
 8015628:	0710      	lsls	r0, r2, #28
 801562a:	460c      	mov	r4, r1
 801562c:	d458      	bmi.n	80156e0 <__sflush_r+0xc0>
 801562e:	684b      	ldr	r3, [r1, #4]
 8015630:	2b00      	cmp	r3, #0
 8015632:	dc05      	bgt.n	8015640 <__sflush_r+0x20>
 8015634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015636:	2b00      	cmp	r3, #0
 8015638:	dc02      	bgt.n	8015640 <__sflush_r+0x20>
 801563a:	2000      	movs	r0, #0
 801563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015642:	2e00      	cmp	r6, #0
 8015644:	d0f9      	beq.n	801563a <__sflush_r+0x1a>
 8015646:	2300      	movs	r3, #0
 8015648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801564c:	682f      	ldr	r7, [r5, #0]
 801564e:	6a21      	ldr	r1, [r4, #32]
 8015650:	602b      	str	r3, [r5, #0]
 8015652:	d032      	beq.n	80156ba <__sflush_r+0x9a>
 8015654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015656:	89a3      	ldrh	r3, [r4, #12]
 8015658:	075a      	lsls	r2, r3, #29
 801565a:	d505      	bpl.n	8015668 <__sflush_r+0x48>
 801565c:	6863      	ldr	r3, [r4, #4]
 801565e:	1ac0      	subs	r0, r0, r3
 8015660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015662:	b10b      	cbz	r3, 8015668 <__sflush_r+0x48>
 8015664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015666:	1ac0      	subs	r0, r0, r3
 8015668:	2300      	movs	r3, #0
 801566a:	4602      	mov	r2, r0
 801566c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801566e:	6a21      	ldr	r1, [r4, #32]
 8015670:	4628      	mov	r0, r5
 8015672:	47b0      	blx	r6
 8015674:	1c43      	adds	r3, r0, #1
 8015676:	89a3      	ldrh	r3, [r4, #12]
 8015678:	d106      	bne.n	8015688 <__sflush_r+0x68>
 801567a:	6829      	ldr	r1, [r5, #0]
 801567c:	291d      	cmp	r1, #29
 801567e:	d848      	bhi.n	8015712 <__sflush_r+0xf2>
 8015680:	4a29      	ldr	r2, [pc, #164]	; (8015728 <__sflush_r+0x108>)
 8015682:	40ca      	lsrs	r2, r1
 8015684:	07d6      	lsls	r6, r2, #31
 8015686:	d544      	bpl.n	8015712 <__sflush_r+0xf2>
 8015688:	2200      	movs	r2, #0
 801568a:	6062      	str	r2, [r4, #4]
 801568c:	04d9      	lsls	r1, r3, #19
 801568e:	6922      	ldr	r2, [r4, #16]
 8015690:	6022      	str	r2, [r4, #0]
 8015692:	d504      	bpl.n	801569e <__sflush_r+0x7e>
 8015694:	1c42      	adds	r2, r0, #1
 8015696:	d101      	bne.n	801569c <__sflush_r+0x7c>
 8015698:	682b      	ldr	r3, [r5, #0]
 801569a:	b903      	cbnz	r3, 801569e <__sflush_r+0x7e>
 801569c:	6560      	str	r0, [r4, #84]	; 0x54
 801569e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156a0:	602f      	str	r7, [r5, #0]
 80156a2:	2900      	cmp	r1, #0
 80156a4:	d0c9      	beq.n	801563a <__sflush_r+0x1a>
 80156a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80156aa:	4299      	cmp	r1, r3
 80156ac:	d002      	beq.n	80156b4 <__sflush_r+0x94>
 80156ae:	4628      	mov	r0, r5
 80156b0:	f001 f920 	bl	80168f4 <_free_r>
 80156b4:	2000      	movs	r0, #0
 80156b6:	6360      	str	r0, [r4, #52]	; 0x34
 80156b8:	e7c0      	b.n	801563c <__sflush_r+0x1c>
 80156ba:	2301      	movs	r3, #1
 80156bc:	4628      	mov	r0, r5
 80156be:	47b0      	blx	r6
 80156c0:	1c41      	adds	r1, r0, #1
 80156c2:	d1c8      	bne.n	8015656 <__sflush_r+0x36>
 80156c4:	682b      	ldr	r3, [r5, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d0c5      	beq.n	8015656 <__sflush_r+0x36>
 80156ca:	2b1d      	cmp	r3, #29
 80156cc:	d001      	beq.n	80156d2 <__sflush_r+0xb2>
 80156ce:	2b16      	cmp	r3, #22
 80156d0:	d101      	bne.n	80156d6 <__sflush_r+0xb6>
 80156d2:	602f      	str	r7, [r5, #0]
 80156d4:	e7b1      	b.n	801563a <__sflush_r+0x1a>
 80156d6:	89a3      	ldrh	r3, [r4, #12]
 80156d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156dc:	81a3      	strh	r3, [r4, #12]
 80156de:	e7ad      	b.n	801563c <__sflush_r+0x1c>
 80156e0:	690f      	ldr	r7, [r1, #16]
 80156e2:	2f00      	cmp	r7, #0
 80156e4:	d0a9      	beq.n	801563a <__sflush_r+0x1a>
 80156e6:	0793      	lsls	r3, r2, #30
 80156e8:	680e      	ldr	r6, [r1, #0]
 80156ea:	bf08      	it	eq
 80156ec:	694b      	ldreq	r3, [r1, #20]
 80156ee:	600f      	str	r7, [r1, #0]
 80156f0:	bf18      	it	ne
 80156f2:	2300      	movne	r3, #0
 80156f4:	eba6 0807 	sub.w	r8, r6, r7
 80156f8:	608b      	str	r3, [r1, #8]
 80156fa:	f1b8 0f00 	cmp.w	r8, #0
 80156fe:	dd9c      	ble.n	801563a <__sflush_r+0x1a>
 8015700:	4643      	mov	r3, r8
 8015702:	463a      	mov	r2, r7
 8015704:	6a21      	ldr	r1, [r4, #32]
 8015706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015708:	4628      	mov	r0, r5
 801570a:	47b0      	blx	r6
 801570c:	2800      	cmp	r0, #0
 801570e:	dc06      	bgt.n	801571e <__sflush_r+0xfe>
 8015710:	89a3      	ldrh	r3, [r4, #12]
 8015712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015716:	81a3      	strh	r3, [r4, #12]
 8015718:	f04f 30ff 	mov.w	r0, #4294967295
 801571c:	e78e      	b.n	801563c <__sflush_r+0x1c>
 801571e:	4407      	add	r7, r0
 8015720:	eba8 0800 	sub.w	r8, r8, r0
 8015724:	e7e9      	b.n	80156fa <__sflush_r+0xda>
 8015726:	bf00      	nop
 8015728:	20400001 	.word	0x20400001

0801572c <_fflush_r>:
 801572c:	b538      	push	{r3, r4, r5, lr}
 801572e:	690b      	ldr	r3, [r1, #16]
 8015730:	4605      	mov	r5, r0
 8015732:	460c      	mov	r4, r1
 8015734:	b1db      	cbz	r3, 801576e <_fflush_r+0x42>
 8015736:	b118      	cbz	r0, 8015740 <_fflush_r+0x14>
 8015738:	6983      	ldr	r3, [r0, #24]
 801573a:	b90b      	cbnz	r3, 8015740 <_fflush_r+0x14>
 801573c:	f000 f860 	bl	8015800 <__sinit>
 8015740:	4b0c      	ldr	r3, [pc, #48]	; (8015774 <_fflush_r+0x48>)
 8015742:	429c      	cmp	r4, r3
 8015744:	d109      	bne.n	801575a <_fflush_r+0x2e>
 8015746:	686c      	ldr	r4, [r5, #4]
 8015748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801574c:	b17b      	cbz	r3, 801576e <_fflush_r+0x42>
 801574e:	4621      	mov	r1, r4
 8015750:	4628      	mov	r0, r5
 8015752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015756:	f7ff bf63 	b.w	8015620 <__sflush_r>
 801575a:	4b07      	ldr	r3, [pc, #28]	; (8015778 <_fflush_r+0x4c>)
 801575c:	429c      	cmp	r4, r3
 801575e:	d101      	bne.n	8015764 <_fflush_r+0x38>
 8015760:	68ac      	ldr	r4, [r5, #8]
 8015762:	e7f1      	b.n	8015748 <_fflush_r+0x1c>
 8015764:	4b05      	ldr	r3, [pc, #20]	; (801577c <_fflush_r+0x50>)
 8015766:	429c      	cmp	r4, r3
 8015768:	bf08      	it	eq
 801576a:	68ec      	ldreq	r4, [r5, #12]
 801576c:	e7ec      	b.n	8015748 <_fflush_r+0x1c>
 801576e:	2000      	movs	r0, #0
 8015770:	bd38      	pop	{r3, r4, r5, pc}
 8015772:	bf00      	nop
 8015774:	08018260 	.word	0x08018260
 8015778:	08018280 	.word	0x08018280
 801577c:	08018240 	.word	0x08018240

08015780 <std>:
 8015780:	2300      	movs	r3, #0
 8015782:	b510      	push	{r4, lr}
 8015784:	4604      	mov	r4, r0
 8015786:	e9c0 3300 	strd	r3, r3, [r0]
 801578a:	6083      	str	r3, [r0, #8]
 801578c:	8181      	strh	r1, [r0, #12]
 801578e:	6643      	str	r3, [r0, #100]	; 0x64
 8015790:	81c2      	strh	r2, [r0, #14]
 8015792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015796:	6183      	str	r3, [r0, #24]
 8015798:	4619      	mov	r1, r3
 801579a:	2208      	movs	r2, #8
 801579c:	305c      	adds	r0, #92	; 0x5c
 801579e:	f7fd f9a3 	bl	8012ae8 <memset>
 80157a2:	4b05      	ldr	r3, [pc, #20]	; (80157b8 <std+0x38>)
 80157a4:	6263      	str	r3, [r4, #36]	; 0x24
 80157a6:	4b05      	ldr	r3, [pc, #20]	; (80157bc <std+0x3c>)
 80157a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80157aa:	4b05      	ldr	r3, [pc, #20]	; (80157c0 <std+0x40>)
 80157ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80157ae:	4b05      	ldr	r3, [pc, #20]	; (80157c4 <std+0x44>)
 80157b0:	6224      	str	r4, [r4, #32]
 80157b2:	6323      	str	r3, [r4, #48]	; 0x30
 80157b4:	bd10      	pop	{r4, pc}
 80157b6:	bf00      	nop
 80157b8:	0801399d 	.word	0x0801399d
 80157bc:	080139c3 	.word	0x080139c3
 80157c0:	080139fb 	.word	0x080139fb
 80157c4:	08013a1f 	.word	0x08013a1f

080157c8 <_cleanup_r>:
 80157c8:	4901      	ldr	r1, [pc, #4]	; (80157d0 <_cleanup_r+0x8>)
 80157ca:	f000 b885 	b.w	80158d8 <_fwalk_reent>
 80157ce:	bf00      	nop
 80157d0:	0801572d 	.word	0x0801572d

080157d4 <__sfmoreglue>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	1e4a      	subs	r2, r1, #1
 80157d8:	2568      	movs	r5, #104	; 0x68
 80157da:	4355      	muls	r5, r2
 80157dc:	460e      	mov	r6, r1
 80157de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80157e2:	f001 f8d5 	bl	8016990 <_malloc_r>
 80157e6:	4604      	mov	r4, r0
 80157e8:	b140      	cbz	r0, 80157fc <__sfmoreglue+0x28>
 80157ea:	2100      	movs	r1, #0
 80157ec:	e9c0 1600 	strd	r1, r6, [r0]
 80157f0:	300c      	adds	r0, #12
 80157f2:	60a0      	str	r0, [r4, #8]
 80157f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80157f8:	f7fd f976 	bl	8012ae8 <memset>
 80157fc:	4620      	mov	r0, r4
 80157fe:	bd70      	pop	{r4, r5, r6, pc}

08015800 <__sinit>:
 8015800:	6983      	ldr	r3, [r0, #24]
 8015802:	b510      	push	{r4, lr}
 8015804:	4604      	mov	r4, r0
 8015806:	bb33      	cbnz	r3, 8015856 <__sinit+0x56>
 8015808:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801580c:	6503      	str	r3, [r0, #80]	; 0x50
 801580e:	4b12      	ldr	r3, [pc, #72]	; (8015858 <__sinit+0x58>)
 8015810:	4a12      	ldr	r2, [pc, #72]	; (801585c <__sinit+0x5c>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	6282      	str	r2, [r0, #40]	; 0x28
 8015816:	4298      	cmp	r0, r3
 8015818:	bf04      	itt	eq
 801581a:	2301      	moveq	r3, #1
 801581c:	6183      	streq	r3, [r0, #24]
 801581e:	f000 f81f 	bl	8015860 <__sfp>
 8015822:	6060      	str	r0, [r4, #4]
 8015824:	4620      	mov	r0, r4
 8015826:	f000 f81b 	bl	8015860 <__sfp>
 801582a:	60a0      	str	r0, [r4, #8]
 801582c:	4620      	mov	r0, r4
 801582e:	f000 f817 	bl	8015860 <__sfp>
 8015832:	2200      	movs	r2, #0
 8015834:	60e0      	str	r0, [r4, #12]
 8015836:	2104      	movs	r1, #4
 8015838:	6860      	ldr	r0, [r4, #4]
 801583a:	f7ff ffa1 	bl	8015780 <std>
 801583e:	2201      	movs	r2, #1
 8015840:	2109      	movs	r1, #9
 8015842:	68a0      	ldr	r0, [r4, #8]
 8015844:	f7ff ff9c 	bl	8015780 <std>
 8015848:	2202      	movs	r2, #2
 801584a:	2112      	movs	r1, #18
 801584c:	68e0      	ldr	r0, [r4, #12]
 801584e:	f7ff ff97 	bl	8015780 <std>
 8015852:	2301      	movs	r3, #1
 8015854:	61a3      	str	r3, [r4, #24]
 8015856:	bd10      	pop	{r4, pc}
 8015858:	080181a0 	.word	0x080181a0
 801585c:	080157c9 	.word	0x080157c9

08015860 <__sfp>:
 8015860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015862:	4b1b      	ldr	r3, [pc, #108]	; (80158d0 <__sfp+0x70>)
 8015864:	681e      	ldr	r6, [r3, #0]
 8015866:	69b3      	ldr	r3, [r6, #24]
 8015868:	4607      	mov	r7, r0
 801586a:	b913      	cbnz	r3, 8015872 <__sfp+0x12>
 801586c:	4630      	mov	r0, r6
 801586e:	f7ff ffc7 	bl	8015800 <__sinit>
 8015872:	3648      	adds	r6, #72	; 0x48
 8015874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015878:	3b01      	subs	r3, #1
 801587a:	d503      	bpl.n	8015884 <__sfp+0x24>
 801587c:	6833      	ldr	r3, [r6, #0]
 801587e:	b133      	cbz	r3, 801588e <__sfp+0x2e>
 8015880:	6836      	ldr	r6, [r6, #0]
 8015882:	e7f7      	b.n	8015874 <__sfp+0x14>
 8015884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015888:	b16d      	cbz	r5, 80158a6 <__sfp+0x46>
 801588a:	3468      	adds	r4, #104	; 0x68
 801588c:	e7f4      	b.n	8015878 <__sfp+0x18>
 801588e:	2104      	movs	r1, #4
 8015890:	4638      	mov	r0, r7
 8015892:	f7ff ff9f 	bl	80157d4 <__sfmoreglue>
 8015896:	6030      	str	r0, [r6, #0]
 8015898:	2800      	cmp	r0, #0
 801589a:	d1f1      	bne.n	8015880 <__sfp+0x20>
 801589c:	230c      	movs	r3, #12
 801589e:	603b      	str	r3, [r7, #0]
 80158a0:	4604      	mov	r4, r0
 80158a2:	4620      	mov	r0, r4
 80158a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158a6:	4b0b      	ldr	r3, [pc, #44]	; (80158d4 <__sfp+0x74>)
 80158a8:	6665      	str	r5, [r4, #100]	; 0x64
 80158aa:	e9c4 5500 	strd	r5, r5, [r4]
 80158ae:	60a5      	str	r5, [r4, #8]
 80158b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80158b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80158b8:	2208      	movs	r2, #8
 80158ba:	4629      	mov	r1, r5
 80158bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80158c0:	f7fd f912 	bl	8012ae8 <memset>
 80158c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80158c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80158cc:	e7e9      	b.n	80158a2 <__sfp+0x42>
 80158ce:	bf00      	nop
 80158d0:	080181a0 	.word	0x080181a0
 80158d4:	ffff0001 	.word	0xffff0001

080158d8 <_fwalk_reent>:
 80158d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80158dc:	4680      	mov	r8, r0
 80158de:	4689      	mov	r9, r1
 80158e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80158e4:	2600      	movs	r6, #0
 80158e6:	b914      	cbnz	r4, 80158ee <_fwalk_reent+0x16>
 80158e8:	4630      	mov	r0, r6
 80158ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80158ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80158f2:	3f01      	subs	r7, #1
 80158f4:	d501      	bpl.n	80158fa <_fwalk_reent+0x22>
 80158f6:	6824      	ldr	r4, [r4, #0]
 80158f8:	e7f5      	b.n	80158e6 <_fwalk_reent+0xe>
 80158fa:	89ab      	ldrh	r3, [r5, #12]
 80158fc:	2b01      	cmp	r3, #1
 80158fe:	d907      	bls.n	8015910 <_fwalk_reent+0x38>
 8015900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015904:	3301      	adds	r3, #1
 8015906:	d003      	beq.n	8015910 <_fwalk_reent+0x38>
 8015908:	4629      	mov	r1, r5
 801590a:	4640      	mov	r0, r8
 801590c:	47c8      	blx	r9
 801590e:	4306      	orrs	r6, r0
 8015910:	3568      	adds	r5, #104	; 0x68
 8015912:	e7ee      	b.n	80158f2 <_fwalk_reent+0x1a>

08015914 <rshift>:
 8015914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015916:	6906      	ldr	r6, [r0, #16]
 8015918:	114b      	asrs	r3, r1, #5
 801591a:	429e      	cmp	r6, r3
 801591c:	f100 0414 	add.w	r4, r0, #20
 8015920:	dd30      	ble.n	8015984 <rshift+0x70>
 8015922:	f011 011f 	ands.w	r1, r1, #31
 8015926:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801592a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801592e:	d108      	bne.n	8015942 <rshift+0x2e>
 8015930:	4621      	mov	r1, r4
 8015932:	42b2      	cmp	r2, r6
 8015934:	460b      	mov	r3, r1
 8015936:	d211      	bcs.n	801595c <rshift+0x48>
 8015938:	f852 3b04 	ldr.w	r3, [r2], #4
 801593c:	f841 3b04 	str.w	r3, [r1], #4
 8015940:	e7f7      	b.n	8015932 <rshift+0x1e>
 8015942:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015946:	f1c1 0c20 	rsb	ip, r1, #32
 801594a:	40cd      	lsrs	r5, r1
 801594c:	3204      	adds	r2, #4
 801594e:	4623      	mov	r3, r4
 8015950:	42b2      	cmp	r2, r6
 8015952:	4617      	mov	r7, r2
 8015954:	d30c      	bcc.n	8015970 <rshift+0x5c>
 8015956:	601d      	str	r5, [r3, #0]
 8015958:	b105      	cbz	r5, 801595c <rshift+0x48>
 801595a:	3304      	adds	r3, #4
 801595c:	1b1a      	subs	r2, r3, r4
 801595e:	42a3      	cmp	r3, r4
 8015960:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015964:	bf08      	it	eq
 8015966:	2300      	moveq	r3, #0
 8015968:	6102      	str	r2, [r0, #16]
 801596a:	bf08      	it	eq
 801596c:	6143      	streq	r3, [r0, #20]
 801596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015970:	683f      	ldr	r7, [r7, #0]
 8015972:	fa07 f70c 	lsl.w	r7, r7, ip
 8015976:	433d      	orrs	r5, r7
 8015978:	f843 5b04 	str.w	r5, [r3], #4
 801597c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015980:	40cd      	lsrs	r5, r1
 8015982:	e7e5      	b.n	8015950 <rshift+0x3c>
 8015984:	4623      	mov	r3, r4
 8015986:	e7e9      	b.n	801595c <rshift+0x48>

08015988 <__hexdig_fun>:
 8015988:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801598c:	2b09      	cmp	r3, #9
 801598e:	d802      	bhi.n	8015996 <__hexdig_fun+0xe>
 8015990:	3820      	subs	r0, #32
 8015992:	b2c0      	uxtb	r0, r0
 8015994:	4770      	bx	lr
 8015996:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801599a:	2b05      	cmp	r3, #5
 801599c:	d801      	bhi.n	80159a2 <__hexdig_fun+0x1a>
 801599e:	3847      	subs	r0, #71	; 0x47
 80159a0:	e7f7      	b.n	8015992 <__hexdig_fun+0xa>
 80159a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80159a6:	2b05      	cmp	r3, #5
 80159a8:	d801      	bhi.n	80159ae <__hexdig_fun+0x26>
 80159aa:	3827      	subs	r0, #39	; 0x27
 80159ac:	e7f1      	b.n	8015992 <__hexdig_fun+0xa>
 80159ae:	2000      	movs	r0, #0
 80159b0:	4770      	bx	lr

080159b2 <__gethex>:
 80159b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159b6:	b08b      	sub	sp, #44	; 0x2c
 80159b8:	468a      	mov	sl, r1
 80159ba:	9002      	str	r0, [sp, #8]
 80159bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80159be:	9306      	str	r3, [sp, #24]
 80159c0:	4690      	mov	r8, r2
 80159c2:	f000 fadf 	bl	8015f84 <__localeconv_l>
 80159c6:	6803      	ldr	r3, [r0, #0]
 80159c8:	9303      	str	r3, [sp, #12]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7ea fc18 	bl	8000200 <strlen>
 80159d0:	9b03      	ldr	r3, [sp, #12]
 80159d2:	9001      	str	r0, [sp, #4]
 80159d4:	4403      	add	r3, r0
 80159d6:	f04f 0b00 	mov.w	fp, #0
 80159da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80159de:	9307      	str	r3, [sp, #28]
 80159e0:	f8da 3000 	ldr.w	r3, [sl]
 80159e4:	3302      	adds	r3, #2
 80159e6:	461f      	mov	r7, r3
 80159e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80159ec:	2830      	cmp	r0, #48	; 0x30
 80159ee:	d06c      	beq.n	8015aca <__gethex+0x118>
 80159f0:	f7ff ffca 	bl	8015988 <__hexdig_fun>
 80159f4:	4604      	mov	r4, r0
 80159f6:	2800      	cmp	r0, #0
 80159f8:	d16a      	bne.n	8015ad0 <__gethex+0x11e>
 80159fa:	9a01      	ldr	r2, [sp, #4]
 80159fc:	9903      	ldr	r1, [sp, #12]
 80159fe:	4638      	mov	r0, r7
 8015a00:	f001 fe3e 	bl	8017680 <strncmp>
 8015a04:	2800      	cmp	r0, #0
 8015a06:	d166      	bne.n	8015ad6 <__gethex+0x124>
 8015a08:	9b01      	ldr	r3, [sp, #4]
 8015a0a:	5cf8      	ldrb	r0, [r7, r3]
 8015a0c:	18fe      	adds	r6, r7, r3
 8015a0e:	f7ff ffbb 	bl	8015988 <__hexdig_fun>
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d062      	beq.n	8015adc <__gethex+0x12a>
 8015a16:	4633      	mov	r3, r6
 8015a18:	7818      	ldrb	r0, [r3, #0]
 8015a1a:	2830      	cmp	r0, #48	; 0x30
 8015a1c:	461f      	mov	r7, r3
 8015a1e:	f103 0301 	add.w	r3, r3, #1
 8015a22:	d0f9      	beq.n	8015a18 <__gethex+0x66>
 8015a24:	f7ff ffb0 	bl	8015988 <__hexdig_fun>
 8015a28:	fab0 f580 	clz	r5, r0
 8015a2c:	096d      	lsrs	r5, r5, #5
 8015a2e:	4634      	mov	r4, r6
 8015a30:	f04f 0b01 	mov.w	fp, #1
 8015a34:	463a      	mov	r2, r7
 8015a36:	4616      	mov	r6, r2
 8015a38:	3201      	adds	r2, #1
 8015a3a:	7830      	ldrb	r0, [r6, #0]
 8015a3c:	f7ff ffa4 	bl	8015988 <__hexdig_fun>
 8015a40:	2800      	cmp	r0, #0
 8015a42:	d1f8      	bne.n	8015a36 <__gethex+0x84>
 8015a44:	9a01      	ldr	r2, [sp, #4]
 8015a46:	9903      	ldr	r1, [sp, #12]
 8015a48:	4630      	mov	r0, r6
 8015a4a:	f001 fe19 	bl	8017680 <strncmp>
 8015a4e:	b950      	cbnz	r0, 8015a66 <__gethex+0xb4>
 8015a50:	b954      	cbnz	r4, 8015a68 <__gethex+0xb6>
 8015a52:	9b01      	ldr	r3, [sp, #4]
 8015a54:	18f4      	adds	r4, r6, r3
 8015a56:	4622      	mov	r2, r4
 8015a58:	4616      	mov	r6, r2
 8015a5a:	3201      	adds	r2, #1
 8015a5c:	7830      	ldrb	r0, [r6, #0]
 8015a5e:	f7ff ff93 	bl	8015988 <__hexdig_fun>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d1f8      	bne.n	8015a58 <__gethex+0xa6>
 8015a66:	b10c      	cbz	r4, 8015a6c <__gethex+0xba>
 8015a68:	1ba4      	subs	r4, r4, r6
 8015a6a:	00a4      	lsls	r4, r4, #2
 8015a6c:	7833      	ldrb	r3, [r6, #0]
 8015a6e:	2b50      	cmp	r3, #80	; 0x50
 8015a70:	d001      	beq.n	8015a76 <__gethex+0xc4>
 8015a72:	2b70      	cmp	r3, #112	; 0x70
 8015a74:	d140      	bne.n	8015af8 <__gethex+0x146>
 8015a76:	7873      	ldrb	r3, [r6, #1]
 8015a78:	2b2b      	cmp	r3, #43	; 0x2b
 8015a7a:	d031      	beq.n	8015ae0 <__gethex+0x12e>
 8015a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8015a7e:	d033      	beq.n	8015ae8 <__gethex+0x136>
 8015a80:	1c71      	adds	r1, r6, #1
 8015a82:	f04f 0900 	mov.w	r9, #0
 8015a86:	7808      	ldrb	r0, [r1, #0]
 8015a88:	f7ff ff7e 	bl	8015988 <__hexdig_fun>
 8015a8c:	1e43      	subs	r3, r0, #1
 8015a8e:	b2db      	uxtb	r3, r3
 8015a90:	2b18      	cmp	r3, #24
 8015a92:	d831      	bhi.n	8015af8 <__gethex+0x146>
 8015a94:	f1a0 0210 	sub.w	r2, r0, #16
 8015a98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015a9c:	f7ff ff74 	bl	8015988 <__hexdig_fun>
 8015aa0:	1e43      	subs	r3, r0, #1
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	2b18      	cmp	r3, #24
 8015aa6:	d922      	bls.n	8015aee <__gethex+0x13c>
 8015aa8:	f1b9 0f00 	cmp.w	r9, #0
 8015aac:	d000      	beq.n	8015ab0 <__gethex+0xfe>
 8015aae:	4252      	negs	r2, r2
 8015ab0:	4414      	add	r4, r2
 8015ab2:	f8ca 1000 	str.w	r1, [sl]
 8015ab6:	b30d      	cbz	r5, 8015afc <__gethex+0x14a>
 8015ab8:	f1bb 0f00 	cmp.w	fp, #0
 8015abc:	bf0c      	ite	eq
 8015abe:	2706      	moveq	r7, #6
 8015ac0:	2700      	movne	r7, #0
 8015ac2:	4638      	mov	r0, r7
 8015ac4:	b00b      	add	sp, #44	; 0x2c
 8015ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aca:	f10b 0b01 	add.w	fp, fp, #1
 8015ace:	e78a      	b.n	80159e6 <__gethex+0x34>
 8015ad0:	2500      	movs	r5, #0
 8015ad2:	462c      	mov	r4, r5
 8015ad4:	e7ae      	b.n	8015a34 <__gethex+0x82>
 8015ad6:	463e      	mov	r6, r7
 8015ad8:	2501      	movs	r5, #1
 8015ada:	e7c7      	b.n	8015a6c <__gethex+0xba>
 8015adc:	4604      	mov	r4, r0
 8015ade:	e7fb      	b.n	8015ad8 <__gethex+0x126>
 8015ae0:	f04f 0900 	mov.w	r9, #0
 8015ae4:	1cb1      	adds	r1, r6, #2
 8015ae6:	e7ce      	b.n	8015a86 <__gethex+0xd4>
 8015ae8:	f04f 0901 	mov.w	r9, #1
 8015aec:	e7fa      	b.n	8015ae4 <__gethex+0x132>
 8015aee:	230a      	movs	r3, #10
 8015af0:	fb03 0202 	mla	r2, r3, r2, r0
 8015af4:	3a10      	subs	r2, #16
 8015af6:	e7cf      	b.n	8015a98 <__gethex+0xe6>
 8015af8:	4631      	mov	r1, r6
 8015afa:	e7da      	b.n	8015ab2 <__gethex+0x100>
 8015afc:	1bf3      	subs	r3, r6, r7
 8015afe:	3b01      	subs	r3, #1
 8015b00:	4629      	mov	r1, r5
 8015b02:	2b07      	cmp	r3, #7
 8015b04:	dc49      	bgt.n	8015b9a <__gethex+0x1e8>
 8015b06:	9802      	ldr	r0, [sp, #8]
 8015b08:	f000 fae7 	bl	80160da <_Balloc>
 8015b0c:	9b01      	ldr	r3, [sp, #4]
 8015b0e:	f100 0914 	add.w	r9, r0, #20
 8015b12:	f04f 0b00 	mov.w	fp, #0
 8015b16:	f1c3 0301 	rsb	r3, r3, #1
 8015b1a:	4605      	mov	r5, r0
 8015b1c:	f8cd 9010 	str.w	r9, [sp, #16]
 8015b20:	46da      	mov	sl, fp
 8015b22:	9308      	str	r3, [sp, #32]
 8015b24:	42b7      	cmp	r7, r6
 8015b26:	d33b      	bcc.n	8015ba0 <__gethex+0x1ee>
 8015b28:	9804      	ldr	r0, [sp, #16]
 8015b2a:	f840 ab04 	str.w	sl, [r0], #4
 8015b2e:	eba0 0009 	sub.w	r0, r0, r9
 8015b32:	1080      	asrs	r0, r0, #2
 8015b34:	6128      	str	r0, [r5, #16]
 8015b36:	0147      	lsls	r7, r0, #5
 8015b38:	4650      	mov	r0, sl
 8015b3a:	f000 fb92 	bl	8016262 <__hi0bits>
 8015b3e:	f8d8 6000 	ldr.w	r6, [r8]
 8015b42:	1a3f      	subs	r7, r7, r0
 8015b44:	42b7      	cmp	r7, r6
 8015b46:	dd64      	ble.n	8015c12 <__gethex+0x260>
 8015b48:	1bbf      	subs	r7, r7, r6
 8015b4a:	4639      	mov	r1, r7
 8015b4c:	4628      	mov	r0, r5
 8015b4e:	f000 fea1 	bl	8016894 <__any_on>
 8015b52:	4682      	mov	sl, r0
 8015b54:	b178      	cbz	r0, 8015b76 <__gethex+0x1c4>
 8015b56:	1e7b      	subs	r3, r7, #1
 8015b58:	1159      	asrs	r1, r3, #5
 8015b5a:	f003 021f 	and.w	r2, r3, #31
 8015b5e:	f04f 0a01 	mov.w	sl, #1
 8015b62:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015b66:	fa0a f202 	lsl.w	r2, sl, r2
 8015b6a:	420a      	tst	r2, r1
 8015b6c:	d003      	beq.n	8015b76 <__gethex+0x1c4>
 8015b6e:	4553      	cmp	r3, sl
 8015b70:	dc46      	bgt.n	8015c00 <__gethex+0x24e>
 8015b72:	f04f 0a02 	mov.w	sl, #2
 8015b76:	4639      	mov	r1, r7
 8015b78:	4628      	mov	r0, r5
 8015b7a:	f7ff fecb 	bl	8015914 <rshift>
 8015b7e:	443c      	add	r4, r7
 8015b80:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015b84:	42a3      	cmp	r3, r4
 8015b86:	da52      	bge.n	8015c2e <__gethex+0x27c>
 8015b88:	4629      	mov	r1, r5
 8015b8a:	9802      	ldr	r0, [sp, #8]
 8015b8c:	f000 fad9 	bl	8016142 <_Bfree>
 8015b90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015b92:	2300      	movs	r3, #0
 8015b94:	6013      	str	r3, [r2, #0]
 8015b96:	27a3      	movs	r7, #163	; 0xa3
 8015b98:	e793      	b.n	8015ac2 <__gethex+0x110>
 8015b9a:	3101      	adds	r1, #1
 8015b9c:	105b      	asrs	r3, r3, #1
 8015b9e:	e7b0      	b.n	8015b02 <__gethex+0x150>
 8015ba0:	1e73      	subs	r3, r6, #1
 8015ba2:	9305      	str	r3, [sp, #20]
 8015ba4:	9a07      	ldr	r2, [sp, #28]
 8015ba6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015baa:	4293      	cmp	r3, r2
 8015bac:	d018      	beq.n	8015be0 <__gethex+0x22e>
 8015bae:	f1bb 0f20 	cmp.w	fp, #32
 8015bb2:	d107      	bne.n	8015bc4 <__gethex+0x212>
 8015bb4:	9b04      	ldr	r3, [sp, #16]
 8015bb6:	f8c3 a000 	str.w	sl, [r3]
 8015bba:	3304      	adds	r3, #4
 8015bbc:	f04f 0a00 	mov.w	sl, #0
 8015bc0:	9304      	str	r3, [sp, #16]
 8015bc2:	46d3      	mov	fp, sl
 8015bc4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015bc8:	f7ff fede 	bl	8015988 <__hexdig_fun>
 8015bcc:	f000 000f 	and.w	r0, r0, #15
 8015bd0:	fa00 f00b 	lsl.w	r0, r0, fp
 8015bd4:	ea4a 0a00 	orr.w	sl, sl, r0
 8015bd8:	f10b 0b04 	add.w	fp, fp, #4
 8015bdc:	9b05      	ldr	r3, [sp, #20]
 8015bde:	e00d      	b.n	8015bfc <__gethex+0x24a>
 8015be0:	9b05      	ldr	r3, [sp, #20]
 8015be2:	9a08      	ldr	r2, [sp, #32]
 8015be4:	4413      	add	r3, r2
 8015be6:	42bb      	cmp	r3, r7
 8015be8:	d3e1      	bcc.n	8015bae <__gethex+0x1fc>
 8015bea:	4618      	mov	r0, r3
 8015bec:	9a01      	ldr	r2, [sp, #4]
 8015bee:	9903      	ldr	r1, [sp, #12]
 8015bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8015bf2:	f001 fd45 	bl	8017680 <strncmp>
 8015bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bf8:	2800      	cmp	r0, #0
 8015bfa:	d1d8      	bne.n	8015bae <__gethex+0x1fc>
 8015bfc:	461e      	mov	r6, r3
 8015bfe:	e791      	b.n	8015b24 <__gethex+0x172>
 8015c00:	1eb9      	subs	r1, r7, #2
 8015c02:	4628      	mov	r0, r5
 8015c04:	f000 fe46 	bl	8016894 <__any_on>
 8015c08:	2800      	cmp	r0, #0
 8015c0a:	d0b2      	beq.n	8015b72 <__gethex+0x1c0>
 8015c0c:	f04f 0a03 	mov.w	sl, #3
 8015c10:	e7b1      	b.n	8015b76 <__gethex+0x1c4>
 8015c12:	da09      	bge.n	8015c28 <__gethex+0x276>
 8015c14:	1bf7      	subs	r7, r6, r7
 8015c16:	4629      	mov	r1, r5
 8015c18:	463a      	mov	r2, r7
 8015c1a:	9802      	ldr	r0, [sp, #8]
 8015c1c:	f000 fc5c 	bl	80164d8 <__lshift>
 8015c20:	1be4      	subs	r4, r4, r7
 8015c22:	4605      	mov	r5, r0
 8015c24:	f100 0914 	add.w	r9, r0, #20
 8015c28:	f04f 0a00 	mov.w	sl, #0
 8015c2c:	e7a8      	b.n	8015b80 <__gethex+0x1ce>
 8015c2e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015c32:	42a0      	cmp	r0, r4
 8015c34:	dd6a      	ble.n	8015d0c <__gethex+0x35a>
 8015c36:	1b04      	subs	r4, r0, r4
 8015c38:	42a6      	cmp	r6, r4
 8015c3a:	dc2e      	bgt.n	8015c9a <__gethex+0x2e8>
 8015c3c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015c40:	2b02      	cmp	r3, #2
 8015c42:	d022      	beq.n	8015c8a <__gethex+0x2d8>
 8015c44:	2b03      	cmp	r3, #3
 8015c46:	d024      	beq.n	8015c92 <__gethex+0x2e0>
 8015c48:	2b01      	cmp	r3, #1
 8015c4a:	d115      	bne.n	8015c78 <__gethex+0x2c6>
 8015c4c:	42a6      	cmp	r6, r4
 8015c4e:	d113      	bne.n	8015c78 <__gethex+0x2c6>
 8015c50:	2e01      	cmp	r6, #1
 8015c52:	dc0b      	bgt.n	8015c6c <__gethex+0x2ba>
 8015c54:	9a06      	ldr	r2, [sp, #24]
 8015c56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c5a:	6013      	str	r3, [r2, #0]
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	612b      	str	r3, [r5, #16]
 8015c60:	f8c9 3000 	str.w	r3, [r9]
 8015c64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c66:	2762      	movs	r7, #98	; 0x62
 8015c68:	601d      	str	r5, [r3, #0]
 8015c6a:	e72a      	b.n	8015ac2 <__gethex+0x110>
 8015c6c:	1e71      	subs	r1, r6, #1
 8015c6e:	4628      	mov	r0, r5
 8015c70:	f000 fe10 	bl	8016894 <__any_on>
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d1ed      	bne.n	8015c54 <__gethex+0x2a2>
 8015c78:	4629      	mov	r1, r5
 8015c7a:	9802      	ldr	r0, [sp, #8]
 8015c7c:	f000 fa61 	bl	8016142 <_Bfree>
 8015c80:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c82:	2300      	movs	r3, #0
 8015c84:	6013      	str	r3, [r2, #0]
 8015c86:	2750      	movs	r7, #80	; 0x50
 8015c88:	e71b      	b.n	8015ac2 <__gethex+0x110>
 8015c8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d0e1      	beq.n	8015c54 <__gethex+0x2a2>
 8015c90:	e7f2      	b.n	8015c78 <__gethex+0x2c6>
 8015c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d1dd      	bne.n	8015c54 <__gethex+0x2a2>
 8015c98:	e7ee      	b.n	8015c78 <__gethex+0x2c6>
 8015c9a:	1e67      	subs	r7, r4, #1
 8015c9c:	f1ba 0f00 	cmp.w	sl, #0
 8015ca0:	d131      	bne.n	8015d06 <__gethex+0x354>
 8015ca2:	b127      	cbz	r7, 8015cae <__gethex+0x2fc>
 8015ca4:	4639      	mov	r1, r7
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	f000 fdf4 	bl	8016894 <__any_on>
 8015cac:	4682      	mov	sl, r0
 8015cae:	117a      	asrs	r2, r7, #5
 8015cb0:	2301      	movs	r3, #1
 8015cb2:	f007 071f 	and.w	r7, r7, #31
 8015cb6:	fa03 f707 	lsl.w	r7, r3, r7
 8015cba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015cbe:	4621      	mov	r1, r4
 8015cc0:	421f      	tst	r7, r3
 8015cc2:	4628      	mov	r0, r5
 8015cc4:	bf18      	it	ne
 8015cc6:	f04a 0a02 	orrne.w	sl, sl, #2
 8015cca:	1b36      	subs	r6, r6, r4
 8015ccc:	f7ff fe22 	bl	8015914 <rshift>
 8015cd0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015cd4:	2702      	movs	r7, #2
 8015cd6:	f1ba 0f00 	cmp.w	sl, #0
 8015cda:	d048      	beq.n	8015d6e <__gethex+0x3bc>
 8015cdc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ce0:	2b02      	cmp	r3, #2
 8015ce2:	d015      	beq.n	8015d10 <__gethex+0x35e>
 8015ce4:	2b03      	cmp	r3, #3
 8015ce6:	d017      	beq.n	8015d18 <__gethex+0x366>
 8015ce8:	2b01      	cmp	r3, #1
 8015cea:	d109      	bne.n	8015d00 <__gethex+0x34e>
 8015cec:	f01a 0f02 	tst.w	sl, #2
 8015cf0:	d006      	beq.n	8015d00 <__gethex+0x34e>
 8015cf2:	f8d9 3000 	ldr.w	r3, [r9]
 8015cf6:	ea4a 0a03 	orr.w	sl, sl, r3
 8015cfa:	f01a 0f01 	tst.w	sl, #1
 8015cfe:	d10e      	bne.n	8015d1e <__gethex+0x36c>
 8015d00:	f047 0710 	orr.w	r7, r7, #16
 8015d04:	e033      	b.n	8015d6e <__gethex+0x3bc>
 8015d06:	f04f 0a01 	mov.w	sl, #1
 8015d0a:	e7d0      	b.n	8015cae <__gethex+0x2fc>
 8015d0c:	2701      	movs	r7, #1
 8015d0e:	e7e2      	b.n	8015cd6 <__gethex+0x324>
 8015d10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d12:	f1c3 0301 	rsb	r3, r3, #1
 8015d16:	9315      	str	r3, [sp, #84]	; 0x54
 8015d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d0f0      	beq.n	8015d00 <__gethex+0x34e>
 8015d1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015d22:	f105 0314 	add.w	r3, r5, #20
 8015d26:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015d2a:	eb03 010a 	add.w	r1, r3, sl
 8015d2e:	f04f 0c00 	mov.w	ip, #0
 8015d32:	4618      	mov	r0, r3
 8015d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d38:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015d3c:	d01c      	beq.n	8015d78 <__gethex+0x3c6>
 8015d3e:	3201      	adds	r2, #1
 8015d40:	6002      	str	r2, [r0, #0]
 8015d42:	2f02      	cmp	r7, #2
 8015d44:	f105 0314 	add.w	r3, r5, #20
 8015d48:	d138      	bne.n	8015dbc <__gethex+0x40a>
 8015d4a:	f8d8 2000 	ldr.w	r2, [r8]
 8015d4e:	3a01      	subs	r2, #1
 8015d50:	42b2      	cmp	r2, r6
 8015d52:	d10a      	bne.n	8015d6a <__gethex+0x3b8>
 8015d54:	1171      	asrs	r1, r6, #5
 8015d56:	2201      	movs	r2, #1
 8015d58:	f006 061f 	and.w	r6, r6, #31
 8015d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d60:	fa02 f606 	lsl.w	r6, r2, r6
 8015d64:	421e      	tst	r6, r3
 8015d66:	bf18      	it	ne
 8015d68:	4617      	movne	r7, r2
 8015d6a:	f047 0720 	orr.w	r7, r7, #32
 8015d6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d70:	601d      	str	r5, [r3, #0]
 8015d72:	9b06      	ldr	r3, [sp, #24]
 8015d74:	601c      	str	r4, [r3, #0]
 8015d76:	e6a4      	b.n	8015ac2 <__gethex+0x110>
 8015d78:	4299      	cmp	r1, r3
 8015d7a:	f843 cc04 	str.w	ip, [r3, #-4]
 8015d7e:	d8d8      	bhi.n	8015d32 <__gethex+0x380>
 8015d80:	68ab      	ldr	r3, [r5, #8]
 8015d82:	4599      	cmp	r9, r3
 8015d84:	db12      	blt.n	8015dac <__gethex+0x3fa>
 8015d86:	6869      	ldr	r1, [r5, #4]
 8015d88:	9802      	ldr	r0, [sp, #8]
 8015d8a:	3101      	adds	r1, #1
 8015d8c:	f000 f9a5 	bl	80160da <_Balloc>
 8015d90:	692a      	ldr	r2, [r5, #16]
 8015d92:	3202      	adds	r2, #2
 8015d94:	f105 010c 	add.w	r1, r5, #12
 8015d98:	4683      	mov	fp, r0
 8015d9a:	0092      	lsls	r2, r2, #2
 8015d9c:	300c      	adds	r0, #12
 8015d9e:	f000 f991 	bl	80160c4 <memcpy>
 8015da2:	4629      	mov	r1, r5
 8015da4:	9802      	ldr	r0, [sp, #8]
 8015da6:	f000 f9cc 	bl	8016142 <_Bfree>
 8015daa:	465d      	mov	r5, fp
 8015dac:	692b      	ldr	r3, [r5, #16]
 8015dae:	1c5a      	adds	r2, r3, #1
 8015db0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015db4:	612a      	str	r2, [r5, #16]
 8015db6:	2201      	movs	r2, #1
 8015db8:	615a      	str	r2, [r3, #20]
 8015dba:	e7c2      	b.n	8015d42 <__gethex+0x390>
 8015dbc:	692a      	ldr	r2, [r5, #16]
 8015dbe:	454a      	cmp	r2, r9
 8015dc0:	dd0b      	ble.n	8015dda <__gethex+0x428>
 8015dc2:	2101      	movs	r1, #1
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	f7ff fda5 	bl	8015914 <rshift>
 8015dca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015dce:	3401      	adds	r4, #1
 8015dd0:	42a3      	cmp	r3, r4
 8015dd2:	f6ff aed9 	blt.w	8015b88 <__gethex+0x1d6>
 8015dd6:	2701      	movs	r7, #1
 8015dd8:	e7c7      	b.n	8015d6a <__gethex+0x3b8>
 8015dda:	f016 061f 	ands.w	r6, r6, #31
 8015dde:	d0fa      	beq.n	8015dd6 <__gethex+0x424>
 8015de0:	449a      	add	sl, r3
 8015de2:	f1c6 0620 	rsb	r6, r6, #32
 8015de6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015dea:	f000 fa3a 	bl	8016262 <__hi0bits>
 8015dee:	42b0      	cmp	r0, r6
 8015df0:	dbe7      	blt.n	8015dc2 <__gethex+0x410>
 8015df2:	e7f0      	b.n	8015dd6 <__gethex+0x424>

08015df4 <L_shift>:
 8015df4:	f1c2 0208 	rsb	r2, r2, #8
 8015df8:	0092      	lsls	r2, r2, #2
 8015dfa:	b570      	push	{r4, r5, r6, lr}
 8015dfc:	f1c2 0620 	rsb	r6, r2, #32
 8015e00:	6843      	ldr	r3, [r0, #4]
 8015e02:	6804      	ldr	r4, [r0, #0]
 8015e04:	fa03 f506 	lsl.w	r5, r3, r6
 8015e08:	432c      	orrs	r4, r5
 8015e0a:	40d3      	lsrs	r3, r2
 8015e0c:	6004      	str	r4, [r0, #0]
 8015e0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015e12:	4288      	cmp	r0, r1
 8015e14:	d3f4      	bcc.n	8015e00 <L_shift+0xc>
 8015e16:	bd70      	pop	{r4, r5, r6, pc}

08015e18 <__match>:
 8015e18:	b530      	push	{r4, r5, lr}
 8015e1a:	6803      	ldr	r3, [r0, #0]
 8015e1c:	3301      	adds	r3, #1
 8015e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e22:	b914      	cbnz	r4, 8015e2a <__match+0x12>
 8015e24:	6003      	str	r3, [r0, #0]
 8015e26:	2001      	movs	r0, #1
 8015e28:	bd30      	pop	{r4, r5, pc}
 8015e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015e2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015e32:	2d19      	cmp	r5, #25
 8015e34:	bf98      	it	ls
 8015e36:	3220      	addls	r2, #32
 8015e38:	42a2      	cmp	r2, r4
 8015e3a:	d0f0      	beq.n	8015e1e <__match+0x6>
 8015e3c:	2000      	movs	r0, #0
 8015e3e:	e7f3      	b.n	8015e28 <__match+0x10>

08015e40 <__hexnan>:
 8015e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e44:	680b      	ldr	r3, [r1, #0]
 8015e46:	6801      	ldr	r1, [r0, #0]
 8015e48:	115f      	asrs	r7, r3, #5
 8015e4a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015e4e:	f013 031f 	ands.w	r3, r3, #31
 8015e52:	b087      	sub	sp, #28
 8015e54:	bf18      	it	ne
 8015e56:	3704      	addne	r7, #4
 8015e58:	2500      	movs	r5, #0
 8015e5a:	1f3e      	subs	r6, r7, #4
 8015e5c:	4682      	mov	sl, r0
 8015e5e:	4690      	mov	r8, r2
 8015e60:	9301      	str	r3, [sp, #4]
 8015e62:	f847 5c04 	str.w	r5, [r7, #-4]
 8015e66:	46b1      	mov	r9, r6
 8015e68:	4634      	mov	r4, r6
 8015e6a:	9502      	str	r5, [sp, #8]
 8015e6c:	46ab      	mov	fp, r5
 8015e6e:	784a      	ldrb	r2, [r1, #1]
 8015e70:	1c4b      	adds	r3, r1, #1
 8015e72:	9303      	str	r3, [sp, #12]
 8015e74:	b342      	cbz	r2, 8015ec8 <__hexnan+0x88>
 8015e76:	4610      	mov	r0, r2
 8015e78:	9105      	str	r1, [sp, #20]
 8015e7a:	9204      	str	r2, [sp, #16]
 8015e7c:	f7ff fd84 	bl	8015988 <__hexdig_fun>
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d143      	bne.n	8015f0c <__hexnan+0xcc>
 8015e84:	9a04      	ldr	r2, [sp, #16]
 8015e86:	9905      	ldr	r1, [sp, #20]
 8015e88:	2a20      	cmp	r2, #32
 8015e8a:	d818      	bhi.n	8015ebe <__hexnan+0x7e>
 8015e8c:	9b02      	ldr	r3, [sp, #8]
 8015e8e:	459b      	cmp	fp, r3
 8015e90:	dd13      	ble.n	8015eba <__hexnan+0x7a>
 8015e92:	454c      	cmp	r4, r9
 8015e94:	d206      	bcs.n	8015ea4 <__hexnan+0x64>
 8015e96:	2d07      	cmp	r5, #7
 8015e98:	dc04      	bgt.n	8015ea4 <__hexnan+0x64>
 8015e9a:	462a      	mov	r2, r5
 8015e9c:	4649      	mov	r1, r9
 8015e9e:	4620      	mov	r0, r4
 8015ea0:	f7ff ffa8 	bl	8015df4 <L_shift>
 8015ea4:	4544      	cmp	r4, r8
 8015ea6:	d944      	bls.n	8015f32 <__hexnan+0xf2>
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	f1a4 0904 	sub.w	r9, r4, #4
 8015eae:	f844 3c04 	str.w	r3, [r4, #-4]
 8015eb2:	f8cd b008 	str.w	fp, [sp, #8]
 8015eb6:	464c      	mov	r4, r9
 8015eb8:	461d      	mov	r5, r3
 8015eba:	9903      	ldr	r1, [sp, #12]
 8015ebc:	e7d7      	b.n	8015e6e <__hexnan+0x2e>
 8015ebe:	2a29      	cmp	r2, #41	; 0x29
 8015ec0:	d14a      	bne.n	8015f58 <__hexnan+0x118>
 8015ec2:	3102      	adds	r1, #2
 8015ec4:	f8ca 1000 	str.w	r1, [sl]
 8015ec8:	f1bb 0f00 	cmp.w	fp, #0
 8015ecc:	d044      	beq.n	8015f58 <__hexnan+0x118>
 8015ece:	454c      	cmp	r4, r9
 8015ed0:	d206      	bcs.n	8015ee0 <__hexnan+0xa0>
 8015ed2:	2d07      	cmp	r5, #7
 8015ed4:	dc04      	bgt.n	8015ee0 <__hexnan+0xa0>
 8015ed6:	462a      	mov	r2, r5
 8015ed8:	4649      	mov	r1, r9
 8015eda:	4620      	mov	r0, r4
 8015edc:	f7ff ff8a 	bl	8015df4 <L_shift>
 8015ee0:	4544      	cmp	r4, r8
 8015ee2:	d928      	bls.n	8015f36 <__hexnan+0xf6>
 8015ee4:	4643      	mov	r3, r8
 8015ee6:	f854 2b04 	ldr.w	r2, [r4], #4
 8015eea:	f843 2b04 	str.w	r2, [r3], #4
 8015eee:	42a6      	cmp	r6, r4
 8015ef0:	d2f9      	bcs.n	8015ee6 <__hexnan+0xa6>
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	f843 2b04 	str.w	r2, [r3], #4
 8015ef8:	429e      	cmp	r6, r3
 8015efa:	d2fb      	bcs.n	8015ef4 <__hexnan+0xb4>
 8015efc:	6833      	ldr	r3, [r6, #0]
 8015efe:	b91b      	cbnz	r3, 8015f08 <__hexnan+0xc8>
 8015f00:	4546      	cmp	r6, r8
 8015f02:	d127      	bne.n	8015f54 <__hexnan+0x114>
 8015f04:	2301      	movs	r3, #1
 8015f06:	6033      	str	r3, [r6, #0]
 8015f08:	2005      	movs	r0, #5
 8015f0a:	e026      	b.n	8015f5a <__hexnan+0x11a>
 8015f0c:	3501      	adds	r5, #1
 8015f0e:	2d08      	cmp	r5, #8
 8015f10:	f10b 0b01 	add.w	fp, fp, #1
 8015f14:	dd06      	ble.n	8015f24 <__hexnan+0xe4>
 8015f16:	4544      	cmp	r4, r8
 8015f18:	d9cf      	bls.n	8015eba <__hexnan+0x7a>
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f20:	2501      	movs	r5, #1
 8015f22:	3c04      	subs	r4, #4
 8015f24:	6822      	ldr	r2, [r4, #0]
 8015f26:	f000 000f 	and.w	r0, r0, #15
 8015f2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015f2e:	6020      	str	r0, [r4, #0]
 8015f30:	e7c3      	b.n	8015eba <__hexnan+0x7a>
 8015f32:	2508      	movs	r5, #8
 8015f34:	e7c1      	b.n	8015eba <__hexnan+0x7a>
 8015f36:	9b01      	ldr	r3, [sp, #4]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d0df      	beq.n	8015efc <__hexnan+0xbc>
 8015f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8015f40:	f1c3 0320 	rsb	r3, r3, #32
 8015f44:	fa22 f303 	lsr.w	r3, r2, r3
 8015f48:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015f4c:	401a      	ands	r2, r3
 8015f4e:	f847 2c04 	str.w	r2, [r7, #-4]
 8015f52:	e7d3      	b.n	8015efc <__hexnan+0xbc>
 8015f54:	3e04      	subs	r6, #4
 8015f56:	e7d1      	b.n	8015efc <__hexnan+0xbc>
 8015f58:	2004      	movs	r0, #4
 8015f5a:	b007      	add	sp, #28
 8015f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f60 <__locale_ctype_ptr_l>:
 8015f60:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015f64:	4770      	bx	lr
	...

08015f68 <__locale_ctype_ptr>:
 8015f68:	4b04      	ldr	r3, [pc, #16]	; (8015f7c <__locale_ctype_ptr+0x14>)
 8015f6a:	4a05      	ldr	r2, [pc, #20]	; (8015f80 <__locale_ctype_ptr+0x18>)
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	6a1b      	ldr	r3, [r3, #32]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	bf08      	it	eq
 8015f74:	4613      	moveq	r3, r2
 8015f76:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015f7a:	4770      	bx	lr
 8015f7c:	2000000c 	.word	0x2000000c
 8015f80:	20000070 	.word	0x20000070

08015f84 <__localeconv_l>:
 8015f84:	30f0      	adds	r0, #240	; 0xf0
 8015f86:	4770      	bx	lr

08015f88 <_localeconv_r>:
 8015f88:	4b04      	ldr	r3, [pc, #16]	; (8015f9c <_localeconv_r+0x14>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	6a18      	ldr	r0, [r3, #32]
 8015f8e:	4b04      	ldr	r3, [pc, #16]	; (8015fa0 <_localeconv_r+0x18>)
 8015f90:	2800      	cmp	r0, #0
 8015f92:	bf08      	it	eq
 8015f94:	4618      	moveq	r0, r3
 8015f96:	30f0      	adds	r0, #240	; 0xf0
 8015f98:	4770      	bx	lr
 8015f9a:	bf00      	nop
 8015f9c:	2000000c 	.word	0x2000000c
 8015fa0:	20000070 	.word	0x20000070

08015fa4 <_lseek_r>:
 8015fa4:	b538      	push	{r3, r4, r5, lr}
 8015fa6:	4c07      	ldr	r4, [pc, #28]	; (8015fc4 <_lseek_r+0x20>)
 8015fa8:	4605      	mov	r5, r0
 8015faa:	4608      	mov	r0, r1
 8015fac:	4611      	mov	r1, r2
 8015fae:	2200      	movs	r2, #0
 8015fb0:	6022      	str	r2, [r4, #0]
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	f7ef fc08 	bl	80057c8 <_lseek>
 8015fb8:	1c43      	adds	r3, r0, #1
 8015fba:	d102      	bne.n	8015fc2 <_lseek_r+0x1e>
 8015fbc:	6823      	ldr	r3, [r4, #0]
 8015fbe:	b103      	cbz	r3, 8015fc2 <_lseek_r+0x1e>
 8015fc0:	602b      	str	r3, [r5, #0]
 8015fc2:	bd38      	pop	{r3, r4, r5, pc}
 8015fc4:	20023ea0 	.word	0x20023ea0

08015fc8 <__swhatbuf_r>:
 8015fc8:	b570      	push	{r4, r5, r6, lr}
 8015fca:	460e      	mov	r6, r1
 8015fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015fd0:	2900      	cmp	r1, #0
 8015fd2:	b096      	sub	sp, #88	; 0x58
 8015fd4:	4614      	mov	r4, r2
 8015fd6:	461d      	mov	r5, r3
 8015fd8:	da07      	bge.n	8015fea <__swhatbuf_r+0x22>
 8015fda:	2300      	movs	r3, #0
 8015fdc:	602b      	str	r3, [r5, #0]
 8015fde:	89b3      	ldrh	r3, [r6, #12]
 8015fe0:	061a      	lsls	r2, r3, #24
 8015fe2:	d410      	bmi.n	8016006 <__swhatbuf_r+0x3e>
 8015fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015fe8:	e00e      	b.n	8016008 <__swhatbuf_r+0x40>
 8015fea:	466a      	mov	r2, sp
 8015fec:	f001 fc2e 	bl	801784c <_fstat_r>
 8015ff0:	2800      	cmp	r0, #0
 8015ff2:	dbf2      	blt.n	8015fda <__swhatbuf_r+0x12>
 8015ff4:	9a01      	ldr	r2, [sp, #4]
 8015ff6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015ffa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ffe:	425a      	negs	r2, r3
 8016000:	415a      	adcs	r2, r3
 8016002:	602a      	str	r2, [r5, #0]
 8016004:	e7ee      	b.n	8015fe4 <__swhatbuf_r+0x1c>
 8016006:	2340      	movs	r3, #64	; 0x40
 8016008:	2000      	movs	r0, #0
 801600a:	6023      	str	r3, [r4, #0]
 801600c:	b016      	add	sp, #88	; 0x58
 801600e:	bd70      	pop	{r4, r5, r6, pc}

08016010 <__smakebuf_r>:
 8016010:	898b      	ldrh	r3, [r1, #12]
 8016012:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016014:	079d      	lsls	r5, r3, #30
 8016016:	4606      	mov	r6, r0
 8016018:	460c      	mov	r4, r1
 801601a:	d507      	bpl.n	801602c <__smakebuf_r+0x1c>
 801601c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016020:	6023      	str	r3, [r4, #0]
 8016022:	6123      	str	r3, [r4, #16]
 8016024:	2301      	movs	r3, #1
 8016026:	6163      	str	r3, [r4, #20]
 8016028:	b002      	add	sp, #8
 801602a:	bd70      	pop	{r4, r5, r6, pc}
 801602c:	ab01      	add	r3, sp, #4
 801602e:	466a      	mov	r2, sp
 8016030:	f7ff ffca 	bl	8015fc8 <__swhatbuf_r>
 8016034:	9900      	ldr	r1, [sp, #0]
 8016036:	4605      	mov	r5, r0
 8016038:	4630      	mov	r0, r6
 801603a:	f000 fca9 	bl	8016990 <_malloc_r>
 801603e:	b948      	cbnz	r0, 8016054 <__smakebuf_r+0x44>
 8016040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016044:	059a      	lsls	r2, r3, #22
 8016046:	d4ef      	bmi.n	8016028 <__smakebuf_r+0x18>
 8016048:	f023 0303 	bic.w	r3, r3, #3
 801604c:	f043 0302 	orr.w	r3, r3, #2
 8016050:	81a3      	strh	r3, [r4, #12]
 8016052:	e7e3      	b.n	801601c <__smakebuf_r+0xc>
 8016054:	4b0d      	ldr	r3, [pc, #52]	; (801608c <__smakebuf_r+0x7c>)
 8016056:	62b3      	str	r3, [r6, #40]	; 0x28
 8016058:	89a3      	ldrh	r3, [r4, #12]
 801605a:	6020      	str	r0, [r4, #0]
 801605c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016060:	81a3      	strh	r3, [r4, #12]
 8016062:	9b00      	ldr	r3, [sp, #0]
 8016064:	6163      	str	r3, [r4, #20]
 8016066:	9b01      	ldr	r3, [sp, #4]
 8016068:	6120      	str	r0, [r4, #16]
 801606a:	b15b      	cbz	r3, 8016084 <__smakebuf_r+0x74>
 801606c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016070:	4630      	mov	r0, r6
 8016072:	f001 fbfd 	bl	8017870 <_isatty_r>
 8016076:	b128      	cbz	r0, 8016084 <__smakebuf_r+0x74>
 8016078:	89a3      	ldrh	r3, [r4, #12]
 801607a:	f023 0303 	bic.w	r3, r3, #3
 801607e:	f043 0301 	orr.w	r3, r3, #1
 8016082:	81a3      	strh	r3, [r4, #12]
 8016084:	89a3      	ldrh	r3, [r4, #12]
 8016086:	431d      	orrs	r5, r3
 8016088:	81a5      	strh	r5, [r4, #12]
 801608a:	e7cd      	b.n	8016028 <__smakebuf_r+0x18>
 801608c:	080157c9 	.word	0x080157c9

08016090 <malloc>:
 8016090:	4b02      	ldr	r3, [pc, #8]	; (801609c <malloc+0xc>)
 8016092:	4601      	mov	r1, r0
 8016094:	6818      	ldr	r0, [r3, #0]
 8016096:	f000 bc7b 	b.w	8016990 <_malloc_r>
 801609a:	bf00      	nop
 801609c:	2000000c 	.word	0x2000000c

080160a0 <__ascii_mbtowc>:
 80160a0:	b082      	sub	sp, #8
 80160a2:	b901      	cbnz	r1, 80160a6 <__ascii_mbtowc+0x6>
 80160a4:	a901      	add	r1, sp, #4
 80160a6:	b142      	cbz	r2, 80160ba <__ascii_mbtowc+0x1a>
 80160a8:	b14b      	cbz	r3, 80160be <__ascii_mbtowc+0x1e>
 80160aa:	7813      	ldrb	r3, [r2, #0]
 80160ac:	600b      	str	r3, [r1, #0]
 80160ae:	7812      	ldrb	r2, [r2, #0]
 80160b0:	1c10      	adds	r0, r2, #0
 80160b2:	bf18      	it	ne
 80160b4:	2001      	movne	r0, #1
 80160b6:	b002      	add	sp, #8
 80160b8:	4770      	bx	lr
 80160ba:	4610      	mov	r0, r2
 80160bc:	e7fb      	b.n	80160b6 <__ascii_mbtowc+0x16>
 80160be:	f06f 0001 	mvn.w	r0, #1
 80160c2:	e7f8      	b.n	80160b6 <__ascii_mbtowc+0x16>

080160c4 <memcpy>:
 80160c4:	b510      	push	{r4, lr}
 80160c6:	1e43      	subs	r3, r0, #1
 80160c8:	440a      	add	r2, r1
 80160ca:	4291      	cmp	r1, r2
 80160cc:	d100      	bne.n	80160d0 <memcpy+0xc>
 80160ce:	bd10      	pop	{r4, pc}
 80160d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160d8:	e7f7      	b.n	80160ca <memcpy+0x6>

080160da <_Balloc>:
 80160da:	b570      	push	{r4, r5, r6, lr}
 80160dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80160de:	4604      	mov	r4, r0
 80160e0:	460e      	mov	r6, r1
 80160e2:	b93d      	cbnz	r5, 80160f4 <_Balloc+0x1a>
 80160e4:	2010      	movs	r0, #16
 80160e6:	f7ff ffd3 	bl	8016090 <malloc>
 80160ea:	6260      	str	r0, [r4, #36]	; 0x24
 80160ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80160f0:	6005      	str	r5, [r0, #0]
 80160f2:	60c5      	str	r5, [r0, #12]
 80160f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80160f6:	68eb      	ldr	r3, [r5, #12]
 80160f8:	b183      	cbz	r3, 801611c <_Balloc+0x42>
 80160fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80160fc:	68db      	ldr	r3, [r3, #12]
 80160fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016102:	b9b8      	cbnz	r0, 8016134 <_Balloc+0x5a>
 8016104:	2101      	movs	r1, #1
 8016106:	fa01 f506 	lsl.w	r5, r1, r6
 801610a:	1d6a      	adds	r2, r5, #5
 801610c:	0092      	lsls	r2, r2, #2
 801610e:	4620      	mov	r0, r4
 8016110:	f000 fbe1 	bl	80168d6 <_calloc_r>
 8016114:	b160      	cbz	r0, 8016130 <_Balloc+0x56>
 8016116:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801611a:	e00e      	b.n	801613a <_Balloc+0x60>
 801611c:	2221      	movs	r2, #33	; 0x21
 801611e:	2104      	movs	r1, #4
 8016120:	4620      	mov	r0, r4
 8016122:	f000 fbd8 	bl	80168d6 <_calloc_r>
 8016126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016128:	60e8      	str	r0, [r5, #12]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d1e4      	bne.n	80160fa <_Balloc+0x20>
 8016130:	2000      	movs	r0, #0
 8016132:	bd70      	pop	{r4, r5, r6, pc}
 8016134:	6802      	ldr	r2, [r0, #0]
 8016136:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801613a:	2300      	movs	r3, #0
 801613c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016140:	e7f7      	b.n	8016132 <_Balloc+0x58>

08016142 <_Bfree>:
 8016142:	b570      	push	{r4, r5, r6, lr}
 8016144:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016146:	4606      	mov	r6, r0
 8016148:	460d      	mov	r5, r1
 801614a:	b93c      	cbnz	r4, 801615c <_Bfree+0x1a>
 801614c:	2010      	movs	r0, #16
 801614e:	f7ff ff9f 	bl	8016090 <malloc>
 8016152:	6270      	str	r0, [r6, #36]	; 0x24
 8016154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016158:	6004      	str	r4, [r0, #0]
 801615a:	60c4      	str	r4, [r0, #12]
 801615c:	b13d      	cbz	r5, 801616e <_Bfree+0x2c>
 801615e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016160:	686a      	ldr	r2, [r5, #4]
 8016162:	68db      	ldr	r3, [r3, #12]
 8016164:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016168:	6029      	str	r1, [r5, #0]
 801616a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801616e:	bd70      	pop	{r4, r5, r6, pc}

08016170 <__multadd>:
 8016170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016174:	690d      	ldr	r5, [r1, #16]
 8016176:	461f      	mov	r7, r3
 8016178:	4606      	mov	r6, r0
 801617a:	460c      	mov	r4, r1
 801617c:	f101 0c14 	add.w	ip, r1, #20
 8016180:	2300      	movs	r3, #0
 8016182:	f8dc 0000 	ldr.w	r0, [ip]
 8016186:	b281      	uxth	r1, r0
 8016188:	fb02 7101 	mla	r1, r2, r1, r7
 801618c:	0c0f      	lsrs	r7, r1, #16
 801618e:	0c00      	lsrs	r0, r0, #16
 8016190:	fb02 7000 	mla	r0, r2, r0, r7
 8016194:	b289      	uxth	r1, r1
 8016196:	3301      	adds	r3, #1
 8016198:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801619c:	429d      	cmp	r5, r3
 801619e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80161a2:	f84c 1b04 	str.w	r1, [ip], #4
 80161a6:	dcec      	bgt.n	8016182 <__multadd+0x12>
 80161a8:	b1d7      	cbz	r7, 80161e0 <__multadd+0x70>
 80161aa:	68a3      	ldr	r3, [r4, #8]
 80161ac:	42ab      	cmp	r3, r5
 80161ae:	dc12      	bgt.n	80161d6 <__multadd+0x66>
 80161b0:	6861      	ldr	r1, [r4, #4]
 80161b2:	4630      	mov	r0, r6
 80161b4:	3101      	adds	r1, #1
 80161b6:	f7ff ff90 	bl	80160da <_Balloc>
 80161ba:	6922      	ldr	r2, [r4, #16]
 80161bc:	3202      	adds	r2, #2
 80161be:	f104 010c 	add.w	r1, r4, #12
 80161c2:	4680      	mov	r8, r0
 80161c4:	0092      	lsls	r2, r2, #2
 80161c6:	300c      	adds	r0, #12
 80161c8:	f7ff ff7c 	bl	80160c4 <memcpy>
 80161cc:	4621      	mov	r1, r4
 80161ce:	4630      	mov	r0, r6
 80161d0:	f7ff ffb7 	bl	8016142 <_Bfree>
 80161d4:	4644      	mov	r4, r8
 80161d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80161da:	3501      	adds	r5, #1
 80161dc:	615f      	str	r7, [r3, #20]
 80161de:	6125      	str	r5, [r4, #16]
 80161e0:	4620      	mov	r0, r4
 80161e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080161e6 <__s2b>:
 80161e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80161ea:	460c      	mov	r4, r1
 80161ec:	4615      	mov	r5, r2
 80161ee:	461f      	mov	r7, r3
 80161f0:	2209      	movs	r2, #9
 80161f2:	3308      	adds	r3, #8
 80161f4:	4606      	mov	r6, r0
 80161f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80161fa:	2100      	movs	r1, #0
 80161fc:	2201      	movs	r2, #1
 80161fe:	429a      	cmp	r2, r3
 8016200:	db20      	blt.n	8016244 <__s2b+0x5e>
 8016202:	4630      	mov	r0, r6
 8016204:	f7ff ff69 	bl	80160da <_Balloc>
 8016208:	9b08      	ldr	r3, [sp, #32]
 801620a:	6143      	str	r3, [r0, #20]
 801620c:	2d09      	cmp	r5, #9
 801620e:	f04f 0301 	mov.w	r3, #1
 8016212:	6103      	str	r3, [r0, #16]
 8016214:	dd19      	ble.n	801624a <__s2b+0x64>
 8016216:	f104 0809 	add.w	r8, r4, #9
 801621a:	46c1      	mov	r9, r8
 801621c:	442c      	add	r4, r5
 801621e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016222:	4601      	mov	r1, r0
 8016224:	3b30      	subs	r3, #48	; 0x30
 8016226:	220a      	movs	r2, #10
 8016228:	4630      	mov	r0, r6
 801622a:	f7ff ffa1 	bl	8016170 <__multadd>
 801622e:	45a1      	cmp	r9, r4
 8016230:	d1f5      	bne.n	801621e <__s2b+0x38>
 8016232:	eb08 0405 	add.w	r4, r8, r5
 8016236:	3c08      	subs	r4, #8
 8016238:	1b2d      	subs	r5, r5, r4
 801623a:	1963      	adds	r3, r4, r5
 801623c:	42bb      	cmp	r3, r7
 801623e:	db07      	blt.n	8016250 <__s2b+0x6a>
 8016240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016244:	0052      	lsls	r2, r2, #1
 8016246:	3101      	adds	r1, #1
 8016248:	e7d9      	b.n	80161fe <__s2b+0x18>
 801624a:	340a      	adds	r4, #10
 801624c:	2509      	movs	r5, #9
 801624e:	e7f3      	b.n	8016238 <__s2b+0x52>
 8016250:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016254:	4601      	mov	r1, r0
 8016256:	3b30      	subs	r3, #48	; 0x30
 8016258:	220a      	movs	r2, #10
 801625a:	4630      	mov	r0, r6
 801625c:	f7ff ff88 	bl	8016170 <__multadd>
 8016260:	e7eb      	b.n	801623a <__s2b+0x54>

08016262 <__hi0bits>:
 8016262:	0c02      	lsrs	r2, r0, #16
 8016264:	0412      	lsls	r2, r2, #16
 8016266:	4603      	mov	r3, r0
 8016268:	b9b2      	cbnz	r2, 8016298 <__hi0bits+0x36>
 801626a:	0403      	lsls	r3, r0, #16
 801626c:	2010      	movs	r0, #16
 801626e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016272:	bf04      	itt	eq
 8016274:	021b      	lsleq	r3, r3, #8
 8016276:	3008      	addeq	r0, #8
 8016278:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801627c:	bf04      	itt	eq
 801627e:	011b      	lsleq	r3, r3, #4
 8016280:	3004      	addeq	r0, #4
 8016282:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016286:	bf04      	itt	eq
 8016288:	009b      	lsleq	r3, r3, #2
 801628a:	3002      	addeq	r0, #2
 801628c:	2b00      	cmp	r3, #0
 801628e:	db06      	blt.n	801629e <__hi0bits+0x3c>
 8016290:	005b      	lsls	r3, r3, #1
 8016292:	d503      	bpl.n	801629c <__hi0bits+0x3a>
 8016294:	3001      	adds	r0, #1
 8016296:	4770      	bx	lr
 8016298:	2000      	movs	r0, #0
 801629a:	e7e8      	b.n	801626e <__hi0bits+0xc>
 801629c:	2020      	movs	r0, #32
 801629e:	4770      	bx	lr

080162a0 <__lo0bits>:
 80162a0:	6803      	ldr	r3, [r0, #0]
 80162a2:	f013 0207 	ands.w	r2, r3, #7
 80162a6:	4601      	mov	r1, r0
 80162a8:	d00b      	beq.n	80162c2 <__lo0bits+0x22>
 80162aa:	07da      	lsls	r2, r3, #31
 80162ac:	d423      	bmi.n	80162f6 <__lo0bits+0x56>
 80162ae:	0798      	lsls	r0, r3, #30
 80162b0:	bf49      	itett	mi
 80162b2:	085b      	lsrmi	r3, r3, #1
 80162b4:	089b      	lsrpl	r3, r3, #2
 80162b6:	2001      	movmi	r0, #1
 80162b8:	600b      	strmi	r3, [r1, #0]
 80162ba:	bf5c      	itt	pl
 80162bc:	600b      	strpl	r3, [r1, #0]
 80162be:	2002      	movpl	r0, #2
 80162c0:	4770      	bx	lr
 80162c2:	b298      	uxth	r0, r3
 80162c4:	b9a8      	cbnz	r0, 80162f2 <__lo0bits+0x52>
 80162c6:	0c1b      	lsrs	r3, r3, #16
 80162c8:	2010      	movs	r0, #16
 80162ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80162ce:	bf04      	itt	eq
 80162d0:	0a1b      	lsreq	r3, r3, #8
 80162d2:	3008      	addeq	r0, #8
 80162d4:	071a      	lsls	r2, r3, #28
 80162d6:	bf04      	itt	eq
 80162d8:	091b      	lsreq	r3, r3, #4
 80162da:	3004      	addeq	r0, #4
 80162dc:	079a      	lsls	r2, r3, #30
 80162de:	bf04      	itt	eq
 80162e0:	089b      	lsreq	r3, r3, #2
 80162e2:	3002      	addeq	r0, #2
 80162e4:	07da      	lsls	r2, r3, #31
 80162e6:	d402      	bmi.n	80162ee <__lo0bits+0x4e>
 80162e8:	085b      	lsrs	r3, r3, #1
 80162ea:	d006      	beq.n	80162fa <__lo0bits+0x5a>
 80162ec:	3001      	adds	r0, #1
 80162ee:	600b      	str	r3, [r1, #0]
 80162f0:	4770      	bx	lr
 80162f2:	4610      	mov	r0, r2
 80162f4:	e7e9      	b.n	80162ca <__lo0bits+0x2a>
 80162f6:	2000      	movs	r0, #0
 80162f8:	4770      	bx	lr
 80162fa:	2020      	movs	r0, #32
 80162fc:	4770      	bx	lr

080162fe <__i2b>:
 80162fe:	b510      	push	{r4, lr}
 8016300:	460c      	mov	r4, r1
 8016302:	2101      	movs	r1, #1
 8016304:	f7ff fee9 	bl	80160da <_Balloc>
 8016308:	2201      	movs	r2, #1
 801630a:	6144      	str	r4, [r0, #20]
 801630c:	6102      	str	r2, [r0, #16]
 801630e:	bd10      	pop	{r4, pc}

08016310 <__multiply>:
 8016310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016314:	4614      	mov	r4, r2
 8016316:	690a      	ldr	r2, [r1, #16]
 8016318:	6923      	ldr	r3, [r4, #16]
 801631a:	429a      	cmp	r2, r3
 801631c:	bfb8      	it	lt
 801631e:	460b      	movlt	r3, r1
 8016320:	4688      	mov	r8, r1
 8016322:	bfbc      	itt	lt
 8016324:	46a0      	movlt	r8, r4
 8016326:	461c      	movlt	r4, r3
 8016328:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801632c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016330:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016334:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016338:	eb07 0609 	add.w	r6, r7, r9
 801633c:	42b3      	cmp	r3, r6
 801633e:	bfb8      	it	lt
 8016340:	3101      	addlt	r1, #1
 8016342:	f7ff feca 	bl	80160da <_Balloc>
 8016346:	f100 0514 	add.w	r5, r0, #20
 801634a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801634e:	462b      	mov	r3, r5
 8016350:	2200      	movs	r2, #0
 8016352:	4573      	cmp	r3, lr
 8016354:	d316      	bcc.n	8016384 <__multiply+0x74>
 8016356:	f104 0214 	add.w	r2, r4, #20
 801635a:	f108 0114 	add.w	r1, r8, #20
 801635e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016362:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016366:	9300      	str	r3, [sp, #0]
 8016368:	9b00      	ldr	r3, [sp, #0]
 801636a:	9201      	str	r2, [sp, #4]
 801636c:	4293      	cmp	r3, r2
 801636e:	d80c      	bhi.n	801638a <__multiply+0x7a>
 8016370:	2e00      	cmp	r6, #0
 8016372:	dd03      	ble.n	801637c <__multiply+0x6c>
 8016374:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016378:	2b00      	cmp	r3, #0
 801637a:	d05d      	beq.n	8016438 <__multiply+0x128>
 801637c:	6106      	str	r6, [r0, #16]
 801637e:	b003      	add	sp, #12
 8016380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016384:	f843 2b04 	str.w	r2, [r3], #4
 8016388:	e7e3      	b.n	8016352 <__multiply+0x42>
 801638a:	f8b2 b000 	ldrh.w	fp, [r2]
 801638e:	f1bb 0f00 	cmp.w	fp, #0
 8016392:	d023      	beq.n	80163dc <__multiply+0xcc>
 8016394:	4689      	mov	r9, r1
 8016396:	46ac      	mov	ip, r5
 8016398:	f04f 0800 	mov.w	r8, #0
 801639c:	f859 4b04 	ldr.w	r4, [r9], #4
 80163a0:	f8dc a000 	ldr.w	sl, [ip]
 80163a4:	b2a3      	uxth	r3, r4
 80163a6:	fa1f fa8a 	uxth.w	sl, sl
 80163aa:	fb0b a303 	mla	r3, fp, r3, sl
 80163ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80163b2:	f8dc 4000 	ldr.w	r4, [ip]
 80163b6:	4443      	add	r3, r8
 80163b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80163bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80163c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80163c4:	46e2      	mov	sl, ip
 80163c6:	b29b      	uxth	r3, r3
 80163c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80163cc:	454f      	cmp	r7, r9
 80163ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80163d2:	f84a 3b04 	str.w	r3, [sl], #4
 80163d6:	d82b      	bhi.n	8016430 <__multiply+0x120>
 80163d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80163dc:	9b01      	ldr	r3, [sp, #4]
 80163de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80163e2:	3204      	adds	r2, #4
 80163e4:	f1ba 0f00 	cmp.w	sl, #0
 80163e8:	d020      	beq.n	801642c <__multiply+0x11c>
 80163ea:	682b      	ldr	r3, [r5, #0]
 80163ec:	4689      	mov	r9, r1
 80163ee:	46a8      	mov	r8, r5
 80163f0:	f04f 0b00 	mov.w	fp, #0
 80163f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80163f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80163fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8016400:	445c      	add	r4, fp
 8016402:	46c4      	mov	ip, r8
 8016404:	b29b      	uxth	r3, r3
 8016406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801640a:	f84c 3b04 	str.w	r3, [ip], #4
 801640e:	f859 3b04 	ldr.w	r3, [r9], #4
 8016412:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016416:	0c1b      	lsrs	r3, r3, #16
 8016418:	fb0a b303 	mla	r3, sl, r3, fp
 801641c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016420:	454f      	cmp	r7, r9
 8016422:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016426:	d805      	bhi.n	8016434 <__multiply+0x124>
 8016428:	f8c8 3004 	str.w	r3, [r8, #4]
 801642c:	3504      	adds	r5, #4
 801642e:	e79b      	b.n	8016368 <__multiply+0x58>
 8016430:	46d4      	mov	ip, sl
 8016432:	e7b3      	b.n	801639c <__multiply+0x8c>
 8016434:	46e0      	mov	r8, ip
 8016436:	e7dd      	b.n	80163f4 <__multiply+0xe4>
 8016438:	3e01      	subs	r6, #1
 801643a:	e799      	b.n	8016370 <__multiply+0x60>

0801643c <__pow5mult>:
 801643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016440:	4615      	mov	r5, r2
 8016442:	f012 0203 	ands.w	r2, r2, #3
 8016446:	4606      	mov	r6, r0
 8016448:	460f      	mov	r7, r1
 801644a:	d007      	beq.n	801645c <__pow5mult+0x20>
 801644c:	3a01      	subs	r2, #1
 801644e:	4c21      	ldr	r4, [pc, #132]	; (80164d4 <__pow5mult+0x98>)
 8016450:	2300      	movs	r3, #0
 8016452:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016456:	f7ff fe8b 	bl	8016170 <__multadd>
 801645a:	4607      	mov	r7, r0
 801645c:	10ad      	asrs	r5, r5, #2
 801645e:	d035      	beq.n	80164cc <__pow5mult+0x90>
 8016460:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016462:	b93c      	cbnz	r4, 8016474 <__pow5mult+0x38>
 8016464:	2010      	movs	r0, #16
 8016466:	f7ff fe13 	bl	8016090 <malloc>
 801646a:	6270      	str	r0, [r6, #36]	; 0x24
 801646c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016470:	6004      	str	r4, [r0, #0]
 8016472:	60c4      	str	r4, [r0, #12]
 8016474:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016478:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801647c:	b94c      	cbnz	r4, 8016492 <__pow5mult+0x56>
 801647e:	f240 2171 	movw	r1, #625	; 0x271
 8016482:	4630      	mov	r0, r6
 8016484:	f7ff ff3b 	bl	80162fe <__i2b>
 8016488:	2300      	movs	r3, #0
 801648a:	f8c8 0008 	str.w	r0, [r8, #8]
 801648e:	4604      	mov	r4, r0
 8016490:	6003      	str	r3, [r0, #0]
 8016492:	f04f 0800 	mov.w	r8, #0
 8016496:	07eb      	lsls	r3, r5, #31
 8016498:	d50a      	bpl.n	80164b0 <__pow5mult+0x74>
 801649a:	4639      	mov	r1, r7
 801649c:	4622      	mov	r2, r4
 801649e:	4630      	mov	r0, r6
 80164a0:	f7ff ff36 	bl	8016310 <__multiply>
 80164a4:	4639      	mov	r1, r7
 80164a6:	4681      	mov	r9, r0
 80164a8:	4630      	mov	r0, r6
 80164aa:	f7ff fe4a 	bl	8016142 <_Bfree>
 80164ae:	464f      	mov	r7, r9
 80164b0:	106d      	asrs	r5, r5, #1
 80164b2:	d00b      	beq.n	80164cc <__pow5mult+0x90>
 80164b4:	6820      	ldr	r0, [r4, #0]
 80164b6:	b938      	cbnz	r0, 80164c8 <__pow5mult+0x8c>
 80164b8:	4622      	mov	r2, r4
 80164ba:	4621      	mov	r1, r4
 80164bc:	4630      	mov	r0, r6
 80164be:	f7ff ff27 	bl	8016310 <__multiply>
 80164c2:	6020      	str	r0, [r4, #0]
 80164c4:	f8c0 8000 	str.w	r8, [r0]
 80164c8:	4604      	mov	r4, r0
 80164ca:	e7e4      	b.n	8016496 <__pow5mult+0x5a>
 80164cc:	4638      	mov	r0, r7
 80164ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164d2:	bf00      	nop
 80164d4:	080183a0 	.word	0x080183a0

080164d8 <__lshift>:
 80164d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164dc:	460c      	mov	r4, r1
 80164de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80164e2:	6923      	ldr	r3, [r4, #16]
 80164e4:	6849      	ldr	r1, [r1, #4]
 80164e6:	eb0a 0903 	add.w	r9, sl, r3
 80164ea:	68a3      	ldr	r3, [r4, #8]
 80164ec:	4607      	mov	r7, r0
 80164ee:	4616      	mov	r6, r2
 80164f0:	f109 0501 	add.w	r5, r9, #1
 80164f4:	42ab      	cmp	r3, r5
 80164f6:	db32      	blt.n	801655e <__lshift+0x86>
 80164f8:	4638      	mov	r0, r7
 80164fa:	f7ff fdee 	bl	80160da <_Balloc>
 80164fe:	2300      	movs	r3, #0
 8016500:	4680      	mov	r8, r0
 8016502:	f100 0114 	add.w	r1, r0, #20
 8016506:	461a      	mov	r2, r3
 8016508:	4553      	cmp	r3, sl
 801650a:	db2b      	blt.n	8016564 <__lshift+0x8c>
 801650c:	6920      	ldr	r0, [r4, #16]
 801650e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016512:	f104 0314 	add.w	r3, r4, #20
 8016516:	f016 021f 	ands.w	r2, r6, #31
 801651a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801651e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016522:	d025      	beq.n	8016570 <__lshift+0x98>
 8016524:	f1c2 0e20 	rsb	lr, r2, #32
 8016528:	2000      	movs	r0, #0
 801652a:	681e      	ldr	r6, [r3, #0]
 801652c:	468a      	mov	sl, r1
 801652e:	4096      	lsls	r6, r2
 8016530:	4330      	orrs	r0, r6
 8016532:	f84a 0b04 	str.w	r0, [sl], #4
 8016536:	f853 0b04 	ldr.w	r0, [r3], #4
 801653a:	459c      	cmp	ip, r3
 801653c:	fa20 f00e 	lsr.w	r0, r0, lr
 8016540:	d814      	bhi.n	801656c <__lshift+0x94>
 8016542:	6048      	str	r0, [r1, #4]
 8016544:	b108      	cbz	r0, 801654a <__lshift+0x72>
 8016546:	f109 0502 	add.w	r5, r9, #2
 801654a:	3d01      	subs	r5, #1
 801654c:	4638      	mov	r0, r7
 801654e:	f8c8 5010 	str.w	r5, [r8, #16]
 8016552:	4621      	mov	r1, r4
 8016554:	f7ff fdf5 	bl	8016142 <_Bfree>
 8016558:	4640      	mov	r0, r8
 801655a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801655e:	3101      	adds	r1, #1
 8016560:	005b      	lsls	r3, r3, #1
 8016562:	e7c7      	b.n	80164f4 <__lshift+0x1c>
 8016564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016568:	3301      	adds	r3, #1
 801656a:	e7cd      	b.n	8016508 <__lshift+0x30>
 801656c:	4651      	mov	r1, sl
 801656e:	e7dc      	b.n	801652a <__lshift+0x52>
 8016570:	3904      	subs	r1, #4
 8016572:	f853 2b04 	ldr.w	r2, [r3], #4
 8016576:	f841 2f04 	str.w	r2, [r1, #4]!
 801657a:	459c      	cmp	ip, r3
 801657c:	d8f9      	bhi.n	8016572 <__lshift+0x9a>
 801657e:	e7e4      	b.n	801654a <__lshift+0x72>

08016580 <__mcmp>:
 8016580:	6903      	ldr	r3, [r0, #16]
 8016582:	690a      	ldr	r2, [r1, #16]
 8016584:	1a9b      	subs	r3, r3, r2
 8016586:	b530      	push	{r4, r5, lr}
 8016588:	d10c      	bne.n	80165a4 <__mcmp+0x24>
 801658a:	0092      	lsls	r2, r2, #2
 801658c:	3014      	adds	r0, #20
 801658e:	3114      	adds	r1, #20
 8016590:	1884      	adds	r4, r0, r2
 8016592:	4411      	add	r1, r2
 8016594:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016598:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801659c:	4295      	cmp	r5, r2
 801659e:	d003      	beq.n	80165a8 <__mcmp+0x28>
 80165a0:	d305      	bcc.n	80165ae <__mcmp+0x2e>
 80165a2:	2301      	movs	r3, #1
 80165a4:	4618      	mov	r0, r3
 80165a6:	bd30      	pop	{r4, r5, pc}
 80165a8:	42a0      	cmp	r0, r4
 80165aa:	d3f3      	bcc.n	8016594 <__mcmp+0x14>
 80165ac:	e7fa      	b.n	80165a4 <__mcmp+0x24>
 80165ae:	f04f 33ff 	mov.w	r3, #4294967295
 80165b2:	e7f7      	b.n	80165a4 <__mcmp+0x24>

080165b4 <__mdiff>:
 80165b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165b8:	460d      	mov	r5, r1
 80165ba:	4607      	mov	r7, r0
 80165bc:	4611      	mov	r1, r2
 80165be:	4628      	mov	r0, r5
 80165c0:	4614      	mov	r4, r2
 80165c2:	f7ff ffdd 	bl	8016580 <__mcmp>
 80165c6:	1e06      	subs	r6, r0, #0
 80165c8:	d108      	bne.n	80165dc <__mdiff+0x28>
 80165ca:	4631      	mov	r1, r6
 80165cc:	4638      	mov	r0, r7
 80165ce:	f7ff fd84 	bl	80160da <_Balloc>
 80165d2:	2301      	movs	r3, #1
 80165d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80165d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165dc:	bfa4      	itt	ge
 80165de:	4623      	movge	r3, r4
 80165e0:	462c      	movge	r4, r5
 80165e2:	4638      	mov	r0, r7
 80165e4:	6861      	ldr	r1, [r4, #4]
 80165e6:	bfa6      	itte	ge
 80165e8:	461d      	movge	r5, r3
 80165ea:	2600      	movge	r6, #0
 80165ec:	2601      	movlt	r6, #1
 80165ee:	f7ff fd74 	bl	80160da <_Balloc>
 80165f2:	692b      	ldr	r3, [r5, #16]
 80165f4:	60c6      	str	r6, [r0, #12]
 80165f6:	6926      	ldr	r6, [r4, #16]
 80165f8:	f105 0914 	add.w	r9, r5, #20
 80165fc:	f104 0214 	add.w	r2, r4, #20
 8016600:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016604:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016608:	f100 0514 	add.w	r5, r0, #20
 801660c:	f04f 0e00 	mov.w	lr, #0
 8016610:	f852 ab04 	ldr.w	sl, [r2], #4
 8016614:	f859 4b04 	ldr.w	r4, [r9], #4
 8016618:	fa1e f18a 	uxtah	r1, lr, sl
 801661c:	b2a3      	uxth	r3, r4
 801661e:	1ac9      	subs	r1, r1, r3
 8016620:	0c23      	lsrs	r3, r4, #16
 8016622:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016626:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801662a:	b289      	uxth	r1, r1
 801662c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016630:	45c8      	cmp	r8, r9
 8016632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016636:	4694      	mov	ip, r2
 8016638:	f845 3b04 	str.w	r3, [r5], #4
 801663c:	d8e8      	bhi.n	8016610 <__mdiff+0x5c>
 801663e:	45bc      	cmp	ip, r7
 8016640:	d304      	bcc.n	801664c <__mdiff+0x98>
 8016642:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016646:	b183      	cbz	r3, 801666a <__mdiff+0xb6>
 8016648:	6106      	str	r6, [r0, #16]
 801664a:	e7c5      	b.n	80165d8 <__mdiff+0x24>
 801664c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016650:	fa1e f381 	uxtah	r3, lr, r1
 8016654:	141a      	asrs	r2, r3, #16
 8016656:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801665a:	b29b      	uxth	r3, r3
 801665c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016660:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016664:	f845 3b04 	str.w	r3, [r5], #4
 8016668:	e7e9      	b.n	801663e <__mdiff+0x8a>
 801666a:	3e01      	subs	r6, #1
 801666c:	e7e9      	b.n	8016642 <__mdiff+0x8e>
	...

08016670 <__ulp>:
 8016670:	4b12      	ldr	r3, [pc, #72]	; (80166bc <__ulp+0x4c>)
 8016672:	ee10 2a90 	vmov	r2, s1
 8016676:	401a      	ands	r2, r3
 8016678:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801667c:	2b00      	cmp	r3, #0
 801667e:	dd04      	ble.n	801668a <__ulp+0x1a>
 8016680:	2000      	movs	r0, #0
 8016682:	4619      	mov	r1, r3
 8016684:	ec41 0b10 	vmov	d0, r0, r1
 8016688:	4770      	bx	lr
 801668a:	425b      	negs	r3, r3
 801668c:	151b      	asrs	r3, r3, #20
 801668e:	2b13      	cmp	r3, #19
 8016690:	f04f 0000 	mov.w	r0, #0
 8016694:	f04f 0100 	mov.w	r1, #0
 8016698:	dc04      	bgt.n	80166a4 <__ulp+0x34>
 801669a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801669e:	fa42 f103 	asr.w	r1, r2, r3
 80166a2:	e7ef      	b.n	8016684 <__ulp+0x14>
 80166a4:	3b14      	subs	r3, #20
 80166a6:	2b1e      	cmp	r3, #30
 80166a8:	f04f 0201 	mov.w	r2, #1
 80166ac:	bfda      	itte	le
 80166ae:	f1c3 031f 	rsble	r3, r3, #31
 80166b2:	fa02 f303 	lslle.w	r3, r2, r3
 80166b6:	4613      	movgt	r3, r2
 80166b8:	4618      	mov	r0, r3
 80166ba:	e7e3      	b.n	8016684 <__ulp+0x14>
 80166bc:	7ff00000 	.word	0x7ff00000

080166c0 <__b2d>:
 80166c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166c2:	6905      	ldr	r5, [r0, #16]
 80166c4:	f100 0714 	add.w	r7, r0, #20
 80166c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80166cc:	1f2e      	subs	r6, r5, #4
 80166ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80166d2:	4620      	mov	r0, r4
 80166d4:	f7ff fdc5 	bl	8016262 <__hi0bits>
 80166d8:	f1c0 0320 	rsb	r3, r0, #32
 80166dc:	280a      	cmp	r0, #10
 80166de:	600b      	str	r3, [r1, #0]
 80166e0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016758 <__b2d+0x98>
 80166e4:	dc14      	bgt.n	8016710 <__b2d+0x50>
 80166e6:	f1c0 0e0b 	rsb	lr, r0, #11
 80166ea:	fa24 f10e 	lsr.w	r1, r4, lr
 80166ee:	42b7      	cmp	r7, r6
 80166f0:	ea41 030c 	orr.w	r3, r1, ip
 80166f4:	bf34      	ite	cc
 80166f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80166fa:	2100      	movcs	r1, #0
 80166fc:	3015      	adds	r0, #21
 80166fe:	fa04 f000 	lsl.w	r0, r4, r0
 8016702:	fa21 f10e 	lsr.w	r1, r1, lr
 8016706:	ea40 0201 	orr.w	r2, r0, r1
 801670a:	ec43 2b10 	vmov	d0, r2, r3
 801670e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016710:	42b7      	cmp	r7, r6
 8016712:	bf3a      	itte	cc
 8016714:	f1a5 0608 	subcc.w	r6, r5, #8
 8016718:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801671c:	2100      	movcs	r1, #0
 801671e:	380b      	subs	r0, #11
 8016720:	d015      	beq.n	801674e <__b2d+0x8e>
 8016722:	4084      	lsls	r4, r0
 8016724:	f1c0 0520 	rsb	r5, r0, #32
 8016728:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801672c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016730:	42be      	cmp	r6, r7
 8016732:	fa21 fc05 	lsr.w	ip, r1, r5
 8016736:	ea44 030c 	orr.w	r3, r4, ip
 801673a:	bf8c      	ite	hi
 801673c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016740:	2400      	movls	r4, #0
 8016742:	fa01 f000 	lsl.w	r0, r1, r0
 8016746:	40ec      	lsrs	r4, r5
 8016748:	ea40 0204 	orr.w	r2, r0, r4
 801674c:	e7dd      	b.n	801670a <__b2d+0x4a>
 801674e:	ea44 030c 	orr.w	r3, r4, ip
 8016752:	460a      	mov	r2, r1
 8016754:	e7d9      	b.n	801670a <__b2d+0x4a>
 8016756:	bf00      	nop
 8016758:	3ff00000 	.word	0x3ff00000

0801675c <__d2b>:
 801675c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016760:	460e      	mov	r6, r1
 8016762:	2101      	movs	r1, #1
 8016764:	ec59 8b10 	vmov	r8, r9, d0
 8016768:	4615      	mov	r5, r2
 801676a:	f7ff fcb6 	bl	80160da <_Balloc>
 801676e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016772:	4607      	mov	r7, r0
 8016774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016778:	bb34      	cbnz	r4, 80167c8 <__d2b+0x6c>
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	f1b8 0300 	subs.w	r3, r8, #0
 8016780:	d027      	beq.n	80167d2 <__d2b+0x76>
 8016782:	a802      	add	r0, sp, #8
 8016784:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016788:	f7ff fd8a 	bl	80162a0 <__lo0bits>
 801678c:	9900      	ldr	r1, [sp, #0]
 801678e:	b1f0      	cbz	r0, 80167ce <__d2b+0x72>
 8016790:	9a01      	ldr	r2, [sp, #4]
 8016792:	f1c0 0320 	rsb	r3, r0, #32
 8016796:	fa02 f303 	lsl.w	r3, r2, r3
 801679a:	430b      	orrs	r3, r1
 801679c:	40c2      	lsrs	r2, r0
 801679e:	617b      	str	r3, [r7, #20]
 80167a0:	9201      	str	r2, [sp, #4]
 80167a2:	9b01      	ldr	r3, [sp, #4]
 80167a4:	61bb      	str	r3, [r7, #24]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	bf14      	ite	ne
 80167aa:	2102      	movne	r1, #2
 80167ac:	2101      	moveq	r1, #1
 80167ae:	6139      	str	r1, [r7, #16]
 80167b0:	b1c4      	cbz	r4, 80167e4 <__d2b+0x88>
 80167b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80167b6:	4404      	add	r4, r0
 80167b8:	6034      	str	r4, [r6, #0]
 80167ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80167be:	6028      	str	r0, [r5, #0]
 80167c0:	4638      	mov	r0, r7
 80167c2:	b003      	add	sp, #12
 80167c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80167cc:	e7d5      	b.n	801677a <__d2b+0x1e>
 80167ce:	6179      	str	r1, [r7, #20]
 80167d0:	e7e7      	b.n	80167a2 <__d2b+0x46>
 80167d2:	a801      	add	r0, sp, #4
 80167d4:	f7ff fd64 	bl	80162a0 <__lo0bits>
 80167d8:	9b01      	ldr	r3, [sp, #4]
 80167da:	617b      	str	r3, [r7, #20]
 80167dc:	2101      	movs	r1, #1
 80167de:	6139      	str	r1, [r7, #16]
 80167e0:	3020      	adds	r0, #32
 80167e2:	e7e5      	b.n	80167b0 <__d2b+0x54>
 80167e4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80167e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80167ec:	6030      	str	r0, [r6, #0]
 80167ee:	6918      	ldr	r0, [r3, #16]
 80167f0:	f7ff fd37 	bl	8016262 <__hi0bits>
 80167f4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80167f8:	e7e1      	b.n	80167be <__d2b+0x62>

080167fa <__ratio>:
 80167fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167fe:	4688      	mov	r8, r1
 8016800:	4669      	mov	r1, sp
 8016802:	4681      	mov	r9, r0
 8016804:	f7ff ff5c 	bl	80166c0 <__b2d>
 8016808:	a901      	add	r1, sp, #4
 801680a:	4640      	mov	r0, r8
 801680c:	ec57 6b10 	vmov	r6, r7, d0
 8016810:	f7ff ff56 	bl	80166c0 <__b2d>
 8016814:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016818:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801681c:	eba3 0c02 	sub.w	ip, r3, r2
 8016820:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016824:	1a9b      	subs	r3, r3, r2
 8016826:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801682a:	ec5b ab10 	vmov	sl, fp, d0
 801682e:	2b00      	cmp	r3, #0
 8016830:	bfce      	itee	gt
 8016832:	463a      	movgt	r2, r7
 8016834:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016838:	465a      	movle	r2, fp
 801683a:	4659      	mov	r1, fp
 801683c:	463d      	mov	r5, r7
 801683e:	bfd4      	ite	le
 8016840:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016844:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016848:	4630      	mov	r0, r6
 801684a:	ee10 2a10 	vmov	r2, s0
 801684e:	460b      	mov	r3, r1
 8016850:	4629      	mov	r1, r5
 8016852:	f7ea f813 	bl	800087c <__aeabi_ddiv>
 8016856:	ec41 0b10 	vmov	d0, r0, r1
 801685a:	b003      	add	sp, #12
 801685c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016860 <__copybits>:
 8016860:	3901      	subs	r1, #1
 8016862:	b510      	push	{r4, lr}
 8016864:	1149      	asrs	r1, r1, #5
 8016866:	6914      	ldr	r4, [r2, #16]
 8016868:	3101      	adds	r1, #1
 801686a:	f102 0314 	add.w	r3, r2, #20
 801686e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016872:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016876:	42a3      	cmp	r3, r4
 8016878:	4602      	mov	r2, r0
 801687a:	d303      	bcc.n	8016884 <__copybits+0x24>
 801687c:	2300      	movs	r3, #0
 801687e:	428a      	cmp	r2, r1
 8016880:	d305      	bcc.n	801688e <__copybits+0x2e>
 8016882:	bd10      	pop	{r4, pc}
 8016884:	f853 2b04 	ldr.w	r2, [r3], #4
 8016888:	f840 2b04 	str.w	r2, [r0], #4
 801688c:	e7f3      	b.n	8016876 <__copybits+0x16>
 801688e:	f842 3b04 	str.w	r3, [r2], #4
 8016892:	e7f4      	b.n	801687e <__copybits+0x1e>

08016894 <__any_on>:
 8016894:	f100 0214 	add.w	r2, r0, #20
 8016898:	6900      	ldr	r0, [r0, #16]
 801689a:	114b      	asrs	r3, r1, #5
 801689c:	4298      	cmp	r0, r3
 801689e:	b510      	push	{r4, lr}
 80168a0:	db11      	blt.n	80168c6 <__any_on+0x32>
 80168a2:	dd0a      	ble.n	80168ba <__any_on+0x26>
 80168a4:	f011 011f 	ands.w	r1, r1, #31
 80168a8:	d007      	beq.n	80168ba <__any_on+0x26>
 80168aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80168ae:	fa24 f001 	lsr.w	r0, r4, r1
 80168b2:	fa00 f101 	lsl.w	r1, r0, r1
 80168b6:	428c      	cmp	r4, r1
 80168b8:	d10b      	bne.n	80168d2 <__any_on+0x3e>
 80168ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80168be:	4293      	cmp	r3, r2
 80168c0:	d803      	bhi.n	80168ca <__any_on+0x36>
 80168c2:	2000      	movs	r0, #0
 80168c4:	bd10      	pop	{r4, pc}
 80168c6:	4603      	mov	r3, r0
 80168c8:	e7f7      	b.n	80168ba <__any_on+0x26>
 80168ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80168ce:	2900      	cmp	r1, #0
 80168d0:	d0f5      	beq.n	80168be <__any_on+0x2a>
 80168d2:	2001      	movs	r0, #1
 80168d4:	e7f6      	b.n	80168c4 <__any_on+0x30>

080168d6 <_calloc_r>:
 80168d6:	b538      	push	{r3, r4, r5, lr}
 80168d8:	fb02 f401 	mul.w	r4, r2, r1
 80168dc:	4621      	mov	r1, r4
 80168de:	f000 f857 	bl	8016990 <_malloc_r>
 80168e2:	4605      	mov	r5, r0
 80168e4:	b118      	cbz	r0, 80168ee <_calloc_r+0x18>
 80168e6:	4622      	mov	r2, r4
 80168e8:	2100      	movs	r1, #0
 80168ea:	f7fc f8fd 	bl	8012ae8 <memset>
 80168ee:	4628      	mov	r0, r5
 80168f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080168f4 <_free_r>:
 80168f4:	b538      	push	{r3, r4, r5, lr}
 80168f6:	4605      	mov	r5, r0
 80168f8:	2900      	cmp	r1, #0
 80168fa:	d045      	beq.n	8016988 <_free_r+0x94>
 80168fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016900:	1f0c      	subs	r4, r1, #4
 8016902:	2b00      	cmp	r3, #0
 8016904:	bfb8      	it	lt
 8016906:	18e4      	addlt	r4, r4, r3
 8016908:	f000 ffdb 	bl	80178c2 <__malloc_lock>
 801690c:	4a1f      	ldr	r2, [pc, #124]	; (801698c <_free_r+0x98>)
 801690e:	6813      	ldr	r3, [r2, #0]
 8016910:	4610      	mov	r0, r2
 8016912:	b933      	cbnz	r3, 8016922 <_free_r+0x2e>
 8016914:	6063      	str	r3, [r4, #4]
 8016916:	6014      	str	r4, [r2, #0]
 8016918:	4628      	mov	r0, r5
 801691a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801691e:	f000 bfd1 	b.w	80178c4 <__malloc_unlock>
 8016922:	42a3      	cmp	r3, r4
 8016924:	d90c      	bls.n	8016940 <_free_r+0x4c>
 8016926:	6821      	ldr	r1, [r4, #0]
 8016928:	1862      	adds	r2, r4, r1
 801692a:	4293      	cmp	r3, r2
 801692c:	bf04      	itt	eq
 801692e:	681a      	ldreq	r2, [r3, #0]
 8016930:	685b      	ldreq	r3, [r3, #4]
 8016932:	6063      	str	r3, [r4, #4]
 8016934:	bf04      	itt	eq
 8016936:	1852      	addeq	r2, r2, r1
 8016938:	6022      	streq	r2, [r4, #0]
 801693a:	6004      	str	r4, [r0, #0]
 801693c:	e7ec      	b.n	8016918 <_free_r+0x24>
 801693e:	4613      	mov	r3, r2
 8016940:	685a      	ldr	r2, [r3, #4]
 8016942:	b10a      	cbz	r2, 8016948 <_free_r+0x54>
 8016944:	42a2      	cmp	r2, r4
 8016946:	d9fa      	bls.n	801693e <_free_r+0x4a>
 8016948:	6819      	ldr	r1, [r3, #0]
 801694a:	1858      	adds	r0, r3, r1
 801694c:	42a0      	cmp	r0, r4
 801694e:	d10b      	bne.n	8016968 <_free_r+0x74>
 8016950:	6820      	ldr	r0, [r4, #0]
 8016952:	4401      	add	r1, r0
 8016954:	1858      	adds	r0, r3, r1
 8016956:	4282      	cmp	r2, r0
 8016958:	6019      	str	r1, [r3, #0]
 801695a:	d1dd      	bne.n	8016918 <_free_r+0x24>
 801695c:	6810      	ldr	r0, [r2, #0]
 801695e:	6852      	ldr	r2, [r2, #4]
 8016960:	605a      	str	r2, [r3, #4]
 8016962:	4401      	add	r1, r0
 8016964:	6019      	str	r1, [r3, #0]
 8016966:	e7d7      	b.n	8016918 <_free_r+0x24>
 8016968:	d902      	bls.n	8016970 <_free_r+0x7c>
 801696a:	230c      	movs	r3, #12
 801696c:	602b      	str	r3, [r5, #0]
 801696e:	e7d3      	b.n	8016918 <_free_r+0x24>
 8016970:	6820      	ldr	r0, [r4, #0]
 8016972:	1821      	adds	r1, r4, r0
 8016974:	428a      	cmp	r2, r1
 8016976:	bf04      	itt	eq
 8016978:	6811      	ldreq	r1, [r2, #0]
 801697a:	6852      	ldreq	r2, [r2, #4]
 801697c:	6062      	str	r2, [r4, #4]
 801697e:	bf04      	itt	eq
 8016980:	1809      	addeq	r1, r1, r0
 8016982:	6021      	streq	r1, [r4, #0]
 8016984:	605c      	str	r4, [r3, #4]
 8016986:	e7c7      	b.n	8016918 <_free_r+0x24>
 8016988:	bd38      	pop	{r3, r4, r5, pc}
 801698a:	bf00      	nop
 801698c:	2001f50c 	.word	0x2001f50c

08016990 <_malloc_r>:
 8016990:	b570      	push	{r4, r5, r6, lr}
 8016992:	1ccd      	adds	r5, r1, #3
 8016994:	f025 0503 	bic.w	r5, r5, #3
 8016998:	3508      	adds	r5, #8
 801699a:	2d0c      	cmp	r5, #12
 801699c:	bf38      	it	cc
 801699e:	250c      	movcc	r5, #12
 80169a0:	2d00      	cmp	r5, #0
 80169a2:	4606      	mov	r6, r0
 80169a4:	db01      	blt.n	80169aa <_malloc_r+0x1a>
 80169a6:	42a9      	cmp	r1, r5
 80169a8:	d903      	bls.n	80169b2 <_malloc_r+0x22>
 80169aa:	230c      	movs	r3, #12
 80169ac:	6033      	str	r3, [r6, #0]
 80169ae:	2000      	movs	r0, #0
 80169b0:	bd70      	pop	{r4, r5, r6, pc}
 80169b2:	f000 ff86 	bl	80178c2 <__malloc_lock>
 80169b6:	4a21      	ldr	r2, [pc, #132]	; (8016a3c <_malloc_r+0xac>)
 80169b8:	6814      	ldr	r4, [r2, #0]
 80169ba:	4621      	mov	r1, r4
 80169bc:	b991      	cbnz	r1, 80169e4 <_malloc_r+0x54>
 80169be:	4c20      	ldr	r4, [pc, #128]	; (8016a40 <_malloc_r+0xb0>)
 80169c0:	6823      	ldr	r3, [r4, #0]
 80169c2:	b91b      	cbnz	r3, 80169cc <_malloc_r+0x3c>
 80169c4:	4630      	mov	r0, r6
 80169c6:	f000 fe19 	bl	80175fc <_sbrk_r>
 80169ca:	6020      	str	r0, [r4, #0]
 80169cc:	4629      	mov	r1, r5
 80169ce:	4630      	mov	r0, r6
 80169d0:	f000 fe14 	bl	80175fc <_sbrk_r>
 80169d4:	1c43      	adds	r3, r0, #1
 80169d6:	d124      	bne.n	8016a22 <_malloc_r+0x92>
 80169d8:	230c      	movs	r3, #12
 80169da:	6033      	str	r3, [r6, #0]
 80169dc:	4630      	mov	r0, r6
 80169de:	f000 ff71 	bl	80178c4 <__malloc_unlock>
 80169e2:	e7e4      	b.n	80169ae <_malloc_r+0x1e>
 80169e4:	680b      	ldr	r3, [r1, #0]
 80169e6:	1b5b      	subs	r3, r3, r5
 80169e8:	d418      	bmi.n	8016a1c <_malloc_r+0x8c>
 80169ea:	2b0b      	cmp	r3, #11
 80169ec:	d90f      	bls.n	8016a0e <_malloc_r+0x7e>
 80169ee:	600b      	str	r3, [r1, #0]
 80169f0:	50cd      	str	r5, [r1, r3]
 80169f2:	18cc      	adds	r4, r1, r3
 80169f4:	4630      	mov	r0, r6
 80169f6:	f000 ff65 	bl	80178c4 <__malloc_unlock>
 80169fa:	f104 000b 	add.w	r0, r4, #11
 80169fe:	1d23      	adds	r3, r4, #4
 8016a00:	f020 0007 	bic.w	r0, r0, #7
 8016a04:	1ac3      	subs	r3, r0, r3
 8016a06:	d0d3      	beq.n	80169b0 <_malloc_r+0x20>
 8016a08:	425a      	negs	r2, r3
 8016a0a:	50e2      	str	r2, [r4, r3]
 8016a0c:	e7d0      	b.n	80169b0 <_malloc_r+0x20>
 8016a0e:	428c      	cmp	r4, r1
 8016a10:	684b      	ldr	r3, [r1, #4]
 8016a12:	bf16      	itet	ne
 8016a14:	6063      	strne	r3, [r4, #4]
 8016a16:	6013      	streq	r3, [r2, #0]
 8016a18:	460c      	movne	r4, r1
 8016a1a:	e7eb      	b.n	80169f4 <_malloc_r+0x64>
 8016a1c:	460c      	mov	r4, r1
 8016a1e:	6849      	ldr	r1, [r1, #4]
 8016a20:	e7cc      	b.n	80169bc <_malloc_r+0x2c>
 8016a22:	1cc4      	adds	r4, r0, #3
 8016a24:	f024 0403 	bic.w	r4, r4, #3
 8016a28:	42a0      	cmp	r0, r4
 8016a2a:	d005      	beq.n	8016a38 <_malloc_r+0xa8>
 8016a2c:	1a21      	subs	r1, r4, r0
 8016a2e:	4630      	mov	r0, r6
 8016a30:	f000 fde4 	bl	80175fc <_sbrk_r>
 8016a34:	3001      	adds	r0, #1
 8016a36:	d0cf      	beq.n	80169d8 <_malloc_r+0x48>
 8016a38:	6025      	str	r5, [r4, #0]
 8016a3a:	e7db      	b.n	80169f4 <_malloc_r+0x64>
 8016a3c:	2001f50c 	.word	0x2001f50c
 8016a40:	2001f510 	.word	0x2001f510

08016a44 <__ssputs_r>:
 8016a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a48:	688e      	ldr	r6, [r1, #8]
 8016a4a:	429e      	cmp	r6, r3
 8016a4c:	4682      	mov	sl, r0
 8016a4e:	460c      	mov	r4, r1
 8016a50:	4690      	mov	r8, r2
 8016a52:	4699      	mov	r9, r3
 8016a54:	d837      	bhi.n	8016ac6 <__ssputs_r+0x82>
 8016a56:	898a      	ldrh	r2, [r1, #12]
 8016a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016a5c:	d031      	beq.n	8016ac2 <__ssputs_r+0x7e>
 8016a5e:	6825      	ldr	r5, [r4, #0]
 8016a60:	6909      	ldr	r1, [r1, #16]
 8016a62:	1a6f      	subs	r7, r5, r1
 8016a64:	6965      	ldr	r5, [r4, #20]
 8016a66:	2302      	movs	r3, #2
 8016a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016a6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016a70:	f109 0301 	add.w	r3, r9, #1
 8016a74:	443b      	add	r3, r7
 8016a76:	429d      	cmp	r5, r3
 8016a78:	bf38      	it	cc
 8016a7a:	461d      	movcc	r5, r3
 8016a7c:	0553      	lsls	r3, r2, #21
 8016a7e:	d530      	bpl.n	8016ae2 <__ssputs_r+0x9e>
 8016a80:	4629      	mov	r1, r5
 8016a82:	f7ff ff85 	bl	8016990 <_malloc_r>
 8016a86:	4606      	mov	r6, r0
 8016a88:	b950      	cbnz	r0, 8016aa0 <__ssputs_r+0x5c>
 8016a8a:	230c      	movs	r3, #12
 8016a8c:	f8ca 3000 	str.w	r3, [sl]
 8016a90:	89a3      	ldrh	r3, [r4, #12]
 8016a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a96:	81a3      	strh	r3, [r4, #12]
 8016a98:	f04f 30ff 	mov.w	r0, #4294967295
 8016a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aa0:	463a      	mov	r2, r7
 8016aa2:	6921      	ldr	r1, [r4, #16]
 8016aa4:	f7ff fb0e 	bl	80160c4 <memcpy>
 8016aa8:	89a3      	ldrh	r3, [r4, #12]
 8016aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ab2:	81a3      	strh	r3, [r4, #12]
 8016ab4:	6126      	str	r6, [r4, #16]
 8016ab6:	6165      	str	r5, [r4, #20]
 8016ab8:	443e      	add	r6, r7
 8016aba:	1bed      	subs	r5, r5, r7
 8016abc:	6026      	str	r6, [r4, #0]
 8016abe:	60a5      	str	r5, [r4, #8]
 8016ac0:	464e      	mov	r6, r9
 8016ac2:	454e      	cmp	r6, r9
 8016ac4:	d900      	bls.n	8016ac8 <__ssputs_r+0x84>
 8016ac6:	464e      	mov	r6, r9
 8016ac8:	4632      	mov	r2, r6
 8016aca:	4641      	mov	r1, r8
 8016acc:	6820      	ldr	r0, [r4, #0]
 8016ace:	f000 fedf 	bl	8017890 <memmove>
 8016ad2:	68a3      	ldr	r3, [r4, #8]
 8016ad4:	1b9b      	subs	r3, r3, r6
 8016ad6:	60a3      	str	r3, [r4, #8]
 8016ad8:	6823      	ldr	r3, [r4, #0]
 8016ada:	441e      	add	r6, r3
 8016adc:	6026      	str	r6, [r4, #0]
 8016ade:	2000      	movs	r0, #0
 8016ae0:	e7dc      	b.n	8016a9c <__ssputs_r+0x58>
 8016ae2:	462a      	mov	r2, r5
 8016ae4:	f000 feef 	bl	80178c6 <_realloc_r>
 8016ae8:	4606      	mov	r6, r0
 8016aea:	2800      	cmp	r0, #0
 8016aec:	d1e2      	bne.n	8016ab4 <__ssputs_r+0x70>
 8016aee:	6921      	ldr	r1, [r4, #16]
 8016af0:	4650      	mov	r0, sl
 8016af2:	f7ff feff 	bl	80168f4 <_free_r>
 8016af6:	e7c8      	b.n	8016a8a <__ssputs_r+0x46>

08016af8 <_svfiprintf_r>:
 8016af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016afc:	461d      	mov	r5, r3
 8016afe:	898b      	ldrh	r3, [r1, #12]
 8016b00:	061f      	lsls	r7, r3, #24
 8016b02:	b09d      	sub	sp, #116	; 0x74
 8016b04:	4680      	mov	r8, r0
 8016b06:	460c      	mov	r4, r1
 8016b08:	4616      	mov	r6, r2
 8016b0a:	d50f      	bpl.n	8016b2c <_svfiprintf_r+0x34>
 8016b0c:	690b      	ldr	r3, [r1, #16]
 8016b0e:	b96b      	cbnz	r3, 8016b2c <_svfiprintf_r+0x34>
 8016b10:	2140      	movs	r1, #64	; 0x40
 8016b12:	f7ff ff3d 	bl	8016990 <_malloc_r>
 8016b16:	6020      	str	r0, [r4, #0]
 8016b18:	6120      	str	r0, [r4, #16]
 8016b1a:	b928      	cbnz	r0, 8016b28 <_svfiprintf_r+0x30>
 8016b1c:	230c      	movs	r3, #12
 8016b1e:	f8c8 3000 	str.w	r3, [r8]
 8016b22:	f04f 30ff 	mov.w	r0, #4294967295
 8016b26:	e0c8      	b.n	8016cba <_svfiprintf_r+0x1c2>
 8016b28:	2340      	movs	r3, #64	; 0x40
 8016b2a:	6163      	str	r3, [r4, #20]
 8016b2c:	2300      	movs	r3, #0
 8016b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b30:	2320      	movs	r3, #32
 8016b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016b36:	2330      	movs	r3, #48	; 0x30
 8016b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016b3c:	9503      	str	r5, [sp, #12]
 8016b3e:	f04f 0b01 	mov.w	fp, #1
 8016b42:	4637      	mov	r7, r6
 8016b44:	463d      	mov	r5, r7
 8016b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016b4a:	b10b      	cbz	r3, 8016b50 <_svfiprintf_r+0x58>
 8016b4c:	2b25      	cmp	r3, #37	; 0x25
 8016b4e:	d13e      	bne.n	8016bce <_svfiprintf_r+0xd6>
 8016b50:	ebb7 0a06 	subs.w	sl, r7, r6
 8016b54:	d00b      	beq.n	8016b6e <_svfiprintf_r+0x76>
 8016b56:	4653      	mov	r3, sl
 8016b58:	4632      	mov	r2, r6
 8016b5a:	4621      	mov	r1, r4
 8016b5c:	4640      	mov	r0, r8
 8016b5e:	f7ff ff71 	bl	8016a44 <__ssputs_r>
 8016b62:	3001      	adds	r0, #1
 8016b64:	f000 80a4 	beq.w	8016cb0 <_svfiprintf_r+0x1b8>
 8016b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b6a:	4453      	add	r3, sl
 8016b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b6e:	783b      	ldrb	r3, [r7, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	f000 809d 	beq.w	8016cb0 <_svfiprintf_r+0x1b8>
 8016b76:	2300      	movs	r3, #0
 8016b78:	f04f 32ff 	mov.w	r2, #4294967295
 8016b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016b80:	9304      	str	r3, [sp, #16]
 8016b82:	9307      	str	r3, [sp, #28]
 8016b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016b88:	931a      	str	r3, [sp, #104]	; 0x68
 8016b8a:	462f      	mov	r7, r5
 8016b8c:	2205      	movs	r2, #5
 8016b8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016b92:	4850      	ldr	r0, [pc, #320]	; (8016cd4 <_svfiprintf_r+0x1dc>)
 8016b94:	f7e9 fb3c 	bl	8000210 <memchr>
 8016b98:	9b04      	ldr	r3, [sp, #16]
 8016b9a:	b9d0      	cbnz	r0, 8016bd2 <_svfiprintf_r+0xda>
 8016b9c:	06d9      	lsls	r1, r3, #27
 8016b9e:	bf44      	itt	mi
 8016ba0:	2220      	movmi	r2, #32
 8016ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016ba6:	071a      	lsls	r2, r3, #28
 8016ba8:	bf44      	itt	mi
 8016baa:	222b      	movmi	r2, #43	; 0x2b
 8016bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016bb0:	782a      	ldrb	r2, [r5, #0]
 8016bb2:	2a2a      	cmp	r2, #42	; 0x2a
 8016bb4:	d015      	beq.n	8016be2 <_svfiprintf_r+0xea>
 8016bb6:	9a07      	ldr	r2, [sp, #28]
 8016bb8:	462f      	mov	r7, r5
 8016bba:	2000      	movs	r0, #0
 8016bbc:	250a      	movs	r5, #10
 8016bbe:	4639      	mov	r1, r7
 8016bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016bc4:	3b30      	subs	r3, #48	; 0x30
 8016bc6:	2b09      	cmp	r3, #9
 8016bc8:	d94d      	bls.n	8016c66 <_svfiprintf_r+0x16e>
 8016bca:	b1b8      	cbz	r0, 8016bfc <_svfiprintf_r+0x104>
 8016bcc:	e00f      	b.n	8016bee <_svfiprintf_r+0xf6>
 8016bce:	462f      	mov	r7, r5
 8016bd0:	e7b8      	b.n	8016b44 <_svfiprintf_r+0x4c>
 8016bd2:	4a40      	ldr	r2, [pc, #256]	; (8016cd4 <_svfiprintf_r+0x1dc>)
 8016bd4:	1a80      	subs	r0, r0, r2
 8016bd6:	fa0b f000 	lsl.w	r0, fp, r0
 8016bda:	4318      	orrs	r0, r3
 8016bdc:	9004      	str	r0, [sp, #16]
 8016bde:	463d      	mov	r5, r7
 8016be0:	e7d3      	b.n	8016b8a <_svfiprintf_r+0x92>
 8016be2:	9a03      	ldr	r2, [sp, #12]
 8016be4:	1d11      	adds	r1, r2, #4
 8016be6:	6812      	ldr	r2, [r2, #0]
 8016be8:	9103      	str	r1, [sp, #12]
 8016bea:	2a00      	cmp	r2, #0
 8016bec:	db01      	blt.n	8016bf2 <_svfiprintf_r+0xfa>
 8016bee:	9207      	str	r2, [sp, #28]
 8016bf0:	e004      	b.n	8016bfc <_svfiprintf_r+0x104>
 8016bf2:	4252      	negs	r2, r2
 8016bf4:	f043 0302 	orr.w	r3, r3, #2
 8016bf8:	9207      	str	r2, [sp, #28]
 8016bfa:	9304      	str	r3, [sp, #16]
 8016bfc:	783b      	ldrb	r3, [r7, #0]
 8016bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8016c00:	d10c      	bne.n	8016c1c <_svfiprintf_r+0x124>
 8016c02:	787b      	ldrb	r3, [r7, #1]
 8016c04:	2b2a      	cmp	r3, #42	; 0x2a
 8016c06:	d133      	bne.n	8016c70 <_svfiprintf_r+0x178>
 8016c08:	9b03      	ldr	r3, [sp, #12]
 8016c0a:	1d1a      	adds	r2, r3, #4
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	9203      	str	r2, [sp, #12]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	bfb8      	it	lt
 8016c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8016c18:	3702      	adds	r7, #2
 8016c1a:	9305      	str	r3, [sp, #20]
 8016c1c:	4d2e      	ldr	r5, [pc, #184]	; (8016cd8 <_svfiprintf_r+0x1e0>)
 8016c1e:	7839      	ldrb	r1, [r7, #0]
 8016c20:	2203      	movs	r2, #3
 8016c22:	4628      	mov	r0, r5
 8016c24:	f7e9 faf4 	bl	8000210 <memchr>
 8016c28:	b138      	cbz	r0, 8016c3a <_svfiprintf_r+0x142>
 8016c2a:	2340      	movs	r3, #64	; 0x40
 8016c2c:	1b40      	subs	r0, r0, r5
 8016c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8016c32:	9b04      	ldr	r3, [sp, #16]
 8016c34:	4303      	orrs	r3, r0
 8016c36:	3701      	adds	r7, #1
 8016c38:	9304      	str	r3, [sp, #16]
 8016c3a:	7839      	ldrb	r1, [r7, #0]
 8016c3c:	4827      	ldr	r0, [pc, #156]	; (8016cdc <_svfiprintf_r+0x1e4>)
 8016c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016c42:	2206      	movs	r2, #6
 8016c44:	1c7e      	adds	r6, r7, #1
 8016c46:	f7e9 fae3 	bl	8000210 <memchr>
 8016c4a:	2800      	cmp	r0, #0
 8016c4c:	d038      	beq.n	8016cc0 <_svfiprintf_r+0x1c8>
 8016c4e:	4b24      	ldr	r3, [pc, #144]	; (8016ce0 <_svfiprintf_r+0x1e8>)
 8016c50:	bb13      	cbnz	r3, 8016c98 <_svfiprintf_r+0x1a0>
 8016c52:	9b03      	ldr	r3, [sp, #12]
 8016c54:	3307      	adds	r3, #7
 8016c56:	f023 0307 	bic.w	r3, r3, #7
 8016c5a:	3308      	adds	r3, #8
 8016c5c:	9303      	str	r3, [sp, #12]
 8016c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c60:	444b      	add	r3, r9
 8016c62:	9309      	str	r3, [sp, #36]	; 0x24
 8016c64:	e76d      	b.n	8016b42 <_svfiprintf_r+0x4a>
 8016c66:	fb05 3202 	mla	r2, r5, r2, r3
 8016c6a:	2001      	movs	r0, #1
 8016c6c:	460f      	mov	r7, r1
 8016c6e:	e7a6      	b.n	8016bbe <_svfiprintf_r+0xc6>
 8016c70:	2300      	movs	r3, #0
 8016c72:	3701      	adds	r7, #1
 8016c74:	9305      	str	r3, [sp, #20]
 8016c76:	4619      	mov	r1, r3
 8016c78:	250a      	movs	r5, #10
 8016c7a:	4638      	mov	r0, r7
 8016c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c80:	3a30      	subs	r2, #48	; 0x30
 8016c82:	2a09      	cmp	r2, #9
 8016c84:	d903      	bls.n	8016c8e <_svfiprintf_r+0x196>
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d0c8      	beq.n	8016c1c <_svfiprintf_r+0x124>
 8016c8a:	9105      	str	r1, [sp, #20]
 8016c8c:	e7c6      	b.n	8016c1c <_svfiprintf_r+0x124>
 8016c8e:	fb05 2101 	mla	r1, r5, r1, r2
 8016c92:	2301      	movs	r3, #1
 8016c94:	4607      	mov	r7, r0
 8016c96:	e7f0      	b.n	8016c7a <_svfiprintf_r+0x182>
 8016c98:	ab03      	add	r3, sp, #12
 8016c9a:	9300      	str	r3, [sp, #0]
 8016c9c:	4622      	mov	r2, r4
 8016c9e:	4b11      	ldr	r3, [pc, #68]	; (8016ce4 <_svfiprintf_r+0x1ec>)
 8016ca0:	a904      	add	r1, sp, #16
 8016ca2:	4640      	mov	r0, r8
 8016ca4:	f7fb ffbc 	bl	8012c20 <_printf_float>
 8016ca8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016cac:	4681      	mov	r9, r0
 8016cae:	d1d6      	bne.n	8016c5e <_svfiprintf_r+0x166>
 8016cb0:	89a3      	ldrh	r3, [r4, #12]
 8016cb2:	065b      	lsls	r3, r3, #25
 8016cb4:	f53f af35 	bmi.w	8016b22 <_svfiprintf_r+0x2a>
 8016cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016cba:	b01d      	add	sp, #116	; 0x74
 8016cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc0:	ab03      	add	r3, sp, #12
 8016cc2:	9300      	str	r3, [sp, #0]
 8016cc4:	4622      	mov	r2, r4
 8016cc6:	4b07      	ldr	r3, [pc, #28]	; (8016ce4 <_svfiprintf_r+0x1ec>)
 8016cc8:	a904      	add	r1, sp, #16
 8016cca:	4640      	mov	r0, r8
 8016ccc:	f7fc fa5e 	bl	801318c <_printf_i>
 8016cd0:	e7ea      	b.n	8016ca8 <_svfiprintf_r+0x1b0>
 8016cd2:	bf00      	nop
 8016cd4:	080183ac 	.word	0x080183ac
 8016cd8:	080183b2 	.word	0x080183b2
 8016cdc:	080183b6 	.word	0x080183b6
 8016ce0:	08012c21 	.word	0x08012c21
 8016ce4:	08016a45 	.word	0x08016a45

08016ce8 <_sungetc_r>:
 8016ce8:	b538      	push	{r3, r4, r5, lr}
 8016cea:	1c4b      	adds	r3, r1, #1
 8016cec:	4614      	mov	r4, r2
 8016cee:	d103      	bne.n	8016cf8 <_sungetc_r+0x10>
 8016cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8016cf4:	4628      	mov	r0, r5
 8016cf6:	bd38      	pop	{r3, r4, r5, pc}
 8016cf8:	8993      	ldrh	r3, [r2, #12]
 8016cfa:	f023 0320 	bic.w	r3, r3, #32
 8016cfe:	8193      	strh	r3, [r2, #12]
 8016d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016d02:	6852      	ldr	r2, [r2, #4]
 8016d04:	b2cd      	uxtb	r5, r1
 8016d06:	b18b      	cbz	r3, 8016d2c <_sungetc_r+0x44>
 8016d08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016d0a:	4293      	cmp	r3, r2
 8016d0c:	dd08      	ble.n	8016d20 <_sungetc_r+0x38>
 8016d0e:	6823      	ldr	r3, [r4, #0]
 8016d10:	1e5a      	subs	r2, r3, #1
 8016d12:	6022      	str	r2, [r4, #0]
 8016d14:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016d18:	6863      	ldr	r3, [r4, #4]
 8016d1a:	3301      	adds	r3, #1
 8016d1c:	6063      	str	r3, [r4, #4]
 8016d1e:	e7e9      	b.n	8016cf4 <_sungetc_r+0xc>
 8016d20:	4621      	mov	r1, r4
 8016d22:	f000 fd4b 	bl	80177bc <__submore>
 8016d26:	2800      	cmp	r0, #0
 8016d28:	d0f1      	beq.n	8016d0e <_sungetc_r+0x26>
 8016d2a:	e7e1      	b.n	8016cf0 <_sungetc_r+0x8>
 8016d2c:	6921      	ldr	r1, [r4, #16]
 8016d2e:	6823      	ldr	r3, [r4, #0]
 8016d30:	b151      	cbz	r1, 8016d48 <_sungetc_r+0x60>
 8016d32:	4299      	cmp	r1, r3
 8016d34:	d208      	bcs.n	8016d48 <_sungetc_r+0x60>
 8016d36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016d3a:	42a9      	cmp	r1, r5
 8016d3c:	d104      	bne.n	8016d48 <_sungetc_r+0x60>
 8016d3e:	3b01      	subs	r3, #1
 8016d40:	3201      	adds	r2, #1
 8016d42:	6023      	str	r3, [r4, #0]
 8016d44:	6062      	str	r2, [r4, #4]
 8016d46:	e7d5      	b.n	8016cf4 <_sungetc_r+0xc>
 8016d48:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d50:	6363      	str	r3, [r4, #52]	; 0x34
 8016d52:	2303      	movs	r3, #3
 8016d54:	63a3      	str	r3, [r4, #56]	; 0x38
 8016d56:	4623      	mov	r3, r4
 8016d58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016d5c:	6023      	str	r3, [r4, #0]
 8016d5e:	2301      	movs	r3, #1
 8016d60:	e7dc      	b.n	8016d1c <_sungetc_r+0x34>

08016d62 <__ssrefill_r>:
 8016d62:	b510      	push	{r4, lr}
 8016d64:	460c      	mov	r4, r1
 8016d66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016d68:	b169      	cbz	r1, 8016d86 <__ssrefill_r+0x24>
 8016d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d6e:	4299      	cmp	r1, r3
 8016d70:	d001      	beq.n	8016d76 <__ssrefill_r+0x14>
 8016d72:	f7ff fdbf 	bl	80168f4 <_free_r>
 8016d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016d78:	6063      	str	r3, [r4, #4]
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8016d7e:	b113      	cbz	r3, 8016d86 <__ssrefill_r+0x24>
 8016d80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016d82:	6023      	str	r3, [r4, #0]
 8016d84:	bd10      	pop	{r4, pc}
 8016d86:	6923      	ldr	r3, [r4, #16]
 8016d88:	6023      	str	r3, [r4, #0]
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	6063      	str	r3, [r4, #4]
 8016d8e:	89a3      	ldrh	r3, [r4, #12]
 8016d90:	f043 0320 	orr.w	r3, r3, #32
 8016d94:	81a3      	strh	r3, [r4, #12]
 8016d96:	f04f 30ff 	mov.w	r0, #4294967295
 8016d9a:	e7f3      	b.n	8016d84 <__ssrefill_r+0x22>

08016d9c <__ssvfiscanf_r>:
 8016d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da0:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016da4:	460c      	mov	r4, r1
 8016da6:	2100      	movs	r1, #0
 8016da8:	9144      	str	r1, [sp, #272]	; 0x110
 8016daa:	9145      	str	r1, [sp, #276]	; 0x114
 8016dac:	499f      	ldr	r1, [pc, #636]	; (801702c <__ssvfiscanf_r+0x290>)
 8016dae:	91a0      	str	r1, [sp, #640]	; 0x280
 8016db0:	f10d 0804 	add.w	r8, sp, #4
 8016db4:	499e      	ldr	r1, [pc, #632]	; (8017030 <__ssvfiscanf_r+0x294>)
 8016db6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017034 <__ssvfiscanf_r+0x298>
 8016dba:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016dbe:	4606      	mov	r6, r0
 8016dc0:	4692      	mov	sl, r2
 8016dc2:	91a1      	str	r1, [sp, #644]	; 0x284
 8016dc4:	9300      	str	r3, [sp, #0]
 8016dc6:	270a      	movs	r7, #10
 8016dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 812a 	beq.w	8017026 <__ssvfiscanf_r+0x28a>
 8016dd2:	4655      	mov	r5, sl
 8016dd4:	f7ff f8c8 	bl	8015f68 <__locale_ctype_ptr>
 8016dd8:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016ddc:	4458      	add	r0, fp
 8016dde:	7843      	ldrb	r3, [r0, #1]
 8016de0:	f013 0308 	ands.w	r3, r3, #8
 8016de4:	d01c      	beq.n	8016e20 <__ssvfiscanf_r+0x84>
 8016de6:	6863      	ldr	r3, [r4, #4]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	dd12      	ble.n	8016e12 <__ssvfiscanf_r+0x76>
 8016dec:	f7ff f8bc 	bl	8015f68 <__locale_ctype_ptr>
 8016df0:	6823      	ldr	r3, [r4, #0]
 8016df2:	781a      	ldrb	r2, [r3, #0]
 8016df4:	4410      	add	r0, r2
 8016df6:	7842      	ldrb	r2, [r0, #1]
 8016df8:	0712      	lsls	r2, r2, #28
 8016dfa:	d401      	bmi.n	8016e00 <__ssvfiscanf_r+0x64>
 8016dfc:	46aa      	mov	sl, r5
 8016dfe:	e7e3      	b.n	8016dc8 <__ssvfiscanf_r+0x2c>
 8016e00:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016e02:	3201      	adds	r2, #1
 8016e04:	9245      	str	r2, [sp, #276]	; 0x114
 8016e06:	6862      	ldr	r2, [r4, #4]
 8016e08:	3301      	adds	r3, #1
 8016e0a:	3a01      	subs	r2, #1
 8016e0c:	6062      	str	r2, [r4, #4]
 8016e0e:	6023      	str	r3, [r4, #0]
 8016e10:	e7e9      	b.n	8016de6 <__ssvfiscanf_r+0x4a>
 8016e12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016e14:	4621      	mov	r1, r4
 8016e16:	4630      	mov	r0, r6
 8016e18:	4798      	blx	r3
 8016e1a:	2800      	cmp	r0, #0
 8016e1c:	d0e6      	beq.n	8016dec <__ssvfiscanf_r+0x50>
 8016e1e:	e7ed      	b.n	8016dfc <__ssvfiscanf_r+0x60>
 8016e20:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016e24:	f040 8082 	bne.w	8016f2c <__ssvfiscanf_r+0x190>
 8016e28:	9343      	str	r3, [sp, #268]	; 0x10c
 8016e2a:	9341      	str	r3, [sp, #260]	; 0x104
 8016e2c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016e30:	2b2a      	cmp	r3, #42	; 0x2a
 8016e32:	d103      	bne.n	8016e3c <__ssvfiscanf_r+0xa0>
 8016e34:	2310      	movs	r3, #16
 8016e36:	9341      	str	r3, [sp, #260]	; 0x104
 8016e38:	f10a 0502 	add.w	r5, sl, #2
 8016e3c:	46aa      	mov	sl, r5
 8016e3e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016e42:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016e46:	2a09      	cmp	r2, #9
 8016e48:	d922      	bls.n	8016e90 <__ssvfiscanf_r+0xf4>
 8016e4a:	2203      	movs	r2, #3
 8016e4c:	4879      	ldr	r0, [pc, #484]	; (8017034 <__ssvfiscanf_r+0x298>)
 8016e4e:	f7e9 f9df 	bl	8000210 <memchr>
 8016e52:	b138      	cbz	r0, 8016e64 <__ssvfiscanf_r+0xc8>
 8016e54:	eba0 0309 	sub.w	r3, r0, r9
 8016e58:	2001      	movs	r0, #1
 8016e5a:	4098      	lsls	r0, r3
 8016e5c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016e5e:	4318      	orrs	r0, r3
 8016e60:	9041      	str	r0, [sp, #260]	; 0x104
 8016e62:	46aa      	mov	sl, r5
 8016e64:	f89a 3000 	ldrb.w	r3, [sl]
 8016e68:	2b67      	cmp	r3, #103	; 0x67
 8016e6a:	f10a 0501 	add.w	r5, sl, #1
 8016e6e:	d82b      	bhi.n	8016ec8 <__ssvfiscanf_r+0x12c>
 8016e70:	2b65      	cmp	r3, #101	; 0x65
 8016e72:	f080 809f 	bcs.w	8016fb4 <__ssvfiscanf_r+0x218>
 8016e76:	2b47      	cmp	r3, #71	; 0x47
 8016e78:	d810      	bhi.n	8016e9c <__ssvfiscanf_r+0x100>
 8016e7a:	2b45      	cmp	r3, #69	; 0x45
 8016e7c:	f080 809a 	bcs.w	8016fb4 <__ssvfiscanf_r+0x218>
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d06c      	beq.n	8016f5e <__ssvfiscanf_r+0x1c2>
 8016e84:	2b25      	cmp	r3, #37	; 0x25
 8016e86:	d051      	beq.n	8016f2c <__ssvfiscanf_r+0x190>
 8016e88:	2303      	movs	r3, #3
 8016e8a:	9347      	str	r3, [sp, #284]	; 0x11c
 8016e8c:	9742      	str	r7, [sp, #264]	; 0x108
 8016e8e:	e027      	b.n	8016ee0 <__ssvfiscanf_r+0x144>
 8016e90:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016e92:	fb07 1303 	mla	r3, r7, r3, r1
 8016e96:	3b30      	subs	r3, #48	; 0x30
 8016e98:	9343      	str	r3, [sp, #268]	; 0x10c
 8016e9a:	e7cf      	b.n	8016e3c <__ssvfiscanf_r+0xa0>
 8016e9c:	2b5b      	cmp	r3, #91	; 0x5b
 8016e9e:	d06a      	beq.n	8016f76 <__ssvfiscanf_r+0x1da>
 8016ea0:	d80c      	bhi.n	8016ebc <__ssvfiscanf_r+0x120>
 8016ea2:	2b58      	cmp	r3, #88	; 0x58
 8016ea4:	d1f0      	bne.n	8016e88 <__ssvfiscanf_r+0xec>
 8016ea6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016eac:	9241      	str	r2, [sp, #260]	; 0x104
 8016eae:	2210      	movs	r2, #16
 8016eb0:	9242      	str	r2, [sp, #264]	; 0x108
 8016eb2:	2b6e      	cmp	r3, #110	; 0x6e
 8016eb4:	bf8c      	ite	hi
 8016eb6:	2304      	movhi	r3, #4
 8016eb8:	2303      	movls	r3, #3
 8016eba:	e010      	b.n	8016ede <__ssvfiscanf_r+0x142>
 8016ebc:	2b63      	cmp	r3, #99	; 0x63
 8016ebe:	d065      	beq.n	8016f8c <__ssvfiscanf_r+0x1f0>
 8016ec0:	2b64      	cmp	r3, #100	; 0x64
 8016ec2:	d1e1      	bne.n	8016e88 <__ssvfiscanf_r+0xec>
 8016ec4:	9742      	str	r7, [sp, #264]	; 0x108
 8016ec6:	e7f4      	b.n	8016eb2 <__ssvfiscanf_r+0x116>
 8016ec8:	2b70      	cmp	r3, #112	; 0x70
 8016eca:	d04b      	beq.n	8016f64 <__ssvfiscanf_r+0x1c8>
 8016ecc:	d826      	bhi.n	8016f1c <__ssvfiscanf_r+0x180>
 8016ece:	2b6e      	cmp	r3, #110	; 0x6e
 8016ed0:	d062      	beq.n	8016f98 <__ssvfiscanf_r+0x1fc>
 8016ed2:	d84c      	bhi.n	8016f6e <__ssvfiscanf_r+0x1d2>
 8016ed4:	2b69      	cmp	r3, #105	; 0x69
 8016ed6:	d1d7      	bne.n	8016e88 <__ssvfiscanf_r+0xec>
 8016ed8:	2300      	movs	r3, #0
 8016eda:	9342      	str	r3, [sp, #264]	; 0x108
 8016edc:	2303      	movs	r3, #3
 8016ede:	9347      	str	r3, [sp, #284]	; 0x11c
 8016ee0:	6863      	ldr	r3, [r4, #4]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	dd68      	ble.n	8016fb8 <__ssvfiscanf_r+0x21c>
 8016ee6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016ee8:	0659      	lsls	r1, r3, #25
 8016eea:	d407      	bmi.n	8016efc <__ssvfiscanf_r+0x160>
 8016eec:	f7ff f83c 	bl	8015f68 <__locale_ctype_ptr>
 8016ef0:	6823      	ldr	r3, [r4, #0]
 8016ef2:	781a      	ldrb	r2, [r3, #0]
 8016ef4:	4410      	add	r0, r2
 8016ef6:	7842      	ldrb	r2, [r0, #1]
 8016ef8:	0712      	lsls	r2, r2, #28
 8016efa:	d464      	bmi.n	8016fc6 <__ssvfiscanf_r+0x22a>
 8016efc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016efe:	2b02      	cmp	r3, #2
 8016f00:	dc73      	bgt.n	8016fea <__ssvfiscanf_r+0x24e>
 8016f02:	466b      	mov	r3, sp
 8016f04:	4622      	mov	r2, r4
 8016f06:	a941      	add	r1, sp, #260	; 0x104
 8016f08:	4630      	mov	r0, r6
 8016f0a:	f000 f9d7 	bl	80172bc <_scanf_chars>
 8016f0e:	2801      	cmp	r0, #1
 8016f10:	f000 8089 	beq.w	8017026 <__ssvfiscanf_r+0x28a>
 8016f14:	2802      	cmp	r0, #2
 8016f16:	f47f af71 	bne.w	8016dfc <__ssvfiscanf_r+0x60>
 8016f1a:	e01d      	b.n	8016f58 <__ssvfiscanf_r+0x1bc>
 8016f1c:	2b75      	cmp	r3, #117	; 0x75
 8016f1e:	d0d1      	beq.n	8016ec4 <__ssvfiscanf_r+0x128>
 8016f20:	2b78      	cmp	r3, #120	; 0x78
 8016f22:	d0c0      	beq.n	8016ea6 <__ssvfiscanf_r+0x10a>
 8016f24:	2b73      	cmp	r3, #115	; 0x73
 8016f26:	d1af      	bne.n	8016e88 <__ssvfiscanf_r+0xec>
 8016f28:	2302      	movs	r3, #2
 8016f2a:	e7d8      	b.n	8016ede <__ssvfiscanf_r+0x142>
 8016f2c:	6863      	ldr	r3, [r4, #4]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	dd0c      	ble.n	8016f4c <__ssvfiscanf_r+0x1b0>
 8016f32:	6823      	ldr	r3, [r4, #0]
 8016f34:	781a      	ldrb	r2, [r3, #0]
 8016f36:	455a      	cmp	r2, fp
 8016f38:	d175      	bne.n	8017026 <__ssvfiscanf_r+0x28a>
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	6862      	ldr	r2, [r4, #4]
 8016f3e:	6023      	str	r3, [r4, #0]
 8016f40:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016f42:	3a01      	subs	r2, #1
 8016f44:	3301      	adds	r3, #1
 8016f46:	6062      	str	r2, [r4, #4]
 8016f48:	9345      	str	r3, [sp, #276]	; 0x114
 8016f4a:	e757      	b.n	8016dfc <__ssvfiscanf_r+0x60>
 8016f4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016f4e:	4621      	mov	r1, r4
 8016f50:	4630      	mov	r0, r6
 8016f52:	4798      	blx	r3
 8016f54:	2800      	cmp	r0, #0
 8016f56:	d0ec      	beq.n	8016f32 <__ssvfiscanf_r+0x196>
 8016f58:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016f5a:	2800      	cmp	r0, #0
 8016f5c:	d159      	bne.n	8017012 <__ssvfiscanf_r+0x276>
 8016f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f62:	e05c      	b.n	801701e <__ssvfiscanf_r+0x282>
 8016f64:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016f66:	f042 0220 	orr.w	r2, r2, #32
 8016f6a:	9241      	str	r2, [sp, #260]	; 0x104
 8016f6c:	e79b      	b.n	8016ea6 <__ssvfiscanf_r+0x10a>
 8016f6e:	2308      	movs	r3, #8
 8016f70:	9342      	str	r3, [sp, #264]	; 0x108
 8016f72:	2304      	movs	r3, #4
 8016f74:	e7b3      	b.n	8016ede <__ssvfiscanf_r+0x142>
 8016f76:	4629      	mov	r1, r5
 8016f78:	4640      	mov	r0, r8
 8016f7a:	f000 fb4f 	bl	801761c <__sccl>
 8016f7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f84:	9341      	str	r3, [sp, #260]	; 0x104
 8016f86:	4605      	mov	r5, r0
 8016f88:	2301      	movs	r3, #1
 8016f8a:	e7a8      	b.n	8016ede <__ssvfiscanf_r+0x142>
 8016f8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f92:	9341      	str	r3, [sp, #260]	; 0x104
 8016f94:	2300      	movs	r3, #0
 8016f96:	e7a2      	b.n	8016ede <__ssvfiscanf_r+0x142>
 8016f98:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016f9a:	06c3      	lsls	r3, r0, #27
 8016f9c:	f53f af2e 	bmi.w	8016dfc <__ssvfiscanf_r+0x60>
 8016fa0:	9b00      	ldr	r3, [sp, #0]
 8016fa2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016fa4:	1d19      	adds	r1, r3, #4
 8016fa6:	9100      	str	r1, [sp, #0]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	07c0      	lsls	r0, r0, #31
 8016fac:	bf4c      	ite	mi
 8016fae:	801a      	strhmi	r2, [r3, #0]
 8016fb0:	601a      	strpl	r2, [r3, #0]
 8016fb2:	e723      	b.n	8016dfc <__ssvfiscanf_r+0x60>
 8016fb4:	2305      	movs	r3, #5
 8016fb6:	e792      	b.n	8016ede <__ssvfiscanf_r+0x142>
 8016fb8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016fba:	4621      	mov	r1, r4
 8016fbc:	4630      	mov	r0, r6
 8016fbe:	4798      	blx	r3
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	d090      	beq.n	8016ee6 <__ssvfiscanf_r+0x14a>
 8016fc4:	e7c8      	b.n	8016f58 <__ssvfiscanf_r+0x1bc>
 8016fc6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016fc8:	3201      	adds	r2, #1
 8016fca:	9245      	str	r2, [sp, #276]	; 0x114
 8016fcc:	6862      	ldr	r2, [r4, #4]
 8016fce:	3a01      	subs	r2, #1
 8016fd0:	2a00      	cmp	r2, #0
 8016fd2:	6062      	str	r2, [r4, #4]
 8016fd4:	dd02      	ble.n	8016fdc <__ssvfiscanf_r+0x240>
 8016fd6:	3301      	adds	r3, #1
 8016fd8:	6023      	str	r3, [r4, #0]
 8016fda:	e787      	b.n	8016eec <__ssvfiscanf_r+0x150>
 8016fdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016fde:	4621      	mov	r1, r4
 8016fe0:	4630      	mov	r0, r6
 8016fe2:	4798      	blx	r3
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	d081      	beq.n	8016eec <__ssvfiscanf_r+0x150>
 8016fe8:	e7b6      	b.n	8016f58 <__ssvfiscanf_r+0x1bc>
 8016fea:	2b04      	cmp	r3, #4
 8016fec:	dc06      	bgt.n	8016ffc <__ssvfiscanf_r+0x260>
 8016fee:	466b      	mov	r3, sp
 8016ff0:	4622      	mov	r2, r4
 8016ff2:	a941      	add	r1, sp, #260	; 0x104
 8016ff4:	4630      	mov	r0, r6
 8016ff6:	f000 f9c5 	bl	8017384 <_scanf_i>
 8016ffa:	e788      	b.n	8016f0e <__ssvfiscanf_r+0x172>
 8016ffc:	4b0e      	ldr	r3, [pc, #56]	; (8017038 <__ssvfiscanf_r+0x29c>)
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	f43f aefc 	beq.w	8016dfc <__ssvfiscanf_r+0x60>
 8017004:	466b      	mov	r3, sp
 8017006:	4622      	mov	r2, r4
 8017008:	a941      	add	r1, sp, #260	; 0x104
 801700a:	4630      	mov	r0, r6
 801700c:	f7fc f9d0 	bl	80133b0 <_scanf_float>
 8017010:	e77d      	b.n	8016f0e <__ssvfiscanf_r+0x172>
 8017012:	89a3      	ldrh	r3, [r4, #12]
 8017014:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017018:	bf18      	it	ne
 801701a:	f04f 30ff 	movne.w	r0, #4294967295
 801701e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017026:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017028:	e7f9      	b.n	801701e <__ssvfiscanf_r+0x282>
 801702a:	bf00      	nop
 801702c:	08016ce9 	.word	0x08016ce9
 8017030:	08016d63 	.word	0x08016d63
 8017034:	080183b2 	.word	0x080183b2
 8017038:	080133b1 	.word	0x080133b1

0801703c <__sfputc_r>:
 801703c:	6893      	ldr	r3, [r2, #8]
 801703e:	3b01      	subs	r3, #1
 8017040:	2b00      	cmp	r3, #0
 8017042:	b410      	push	{r4}
 8017044:	6093      	str	r3, [r2, #8]
 8017046:	da08      	bge.n	801705a <__sfputc_r+0x1e>
 8017048:	6994      	ldr	r4, [r2, #24]
 801704a:	42a3      	cmp	r3, r4
 801704c:	db01      	blt.n	8017052 <__sfputc_r+0x16>
 801704e:	290a      	cmp	r1, #10
 8017050:	d103      	bne.n	801705a <__sfputc_r+0x1e>
 8017052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017056:	f7fd bbbd 	b.w	80147d4 <__swbuf_r>
 801705a:	6813      	ldr	r3, [r2, #0]
 801705c:	1c58      	adds	r0, r3, #1
 801705e:	6010      	str	r0, [r2, #0]
 8017060:	7019      	strb	r1, [r3, #0]
 8017062:	4608      	mov	r0, r1
 8017064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017068:	4770      	bx	lr

0801706a <__sfputs_r>:
 801706a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801706c:	4606      	mov	r6, r0
 801706e:	460f      	mov	r7, r1
 8017070:	4614      	mov	r4, r2
 8017072:	18d5      	adds	r5, r2, r3
 8017074:	42ac      	cmp	r4, r5
 8017076:	d101      	bne.n	801707c <__sfputs_r+0x12>
 8017078:	2000      	movs	r0, #0
 801707a:	e007      	b.n	801708c <__sfputs_r+0x22>
 801707c:	463a      	mov	r2, r7
 801707e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017082:	4630      	mov	r0, r6
 8017084:	f7ff ffda 	bl	801703c <__sfputc_r>
 8017088:	1c43      	adds	r3, r0, #1
 801708a:	d1f3      	bne.n	8017074 <__sfputs_r+0xa>
 801708c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017090 <_vfiprintf_r>:
 8017090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017094:	460c      	mov	r4, r1
 8017096:	b09d      	sub	sp, #116	; 0x74
 8017098:	4617      	mov	r7, r2
 801709a:	461d      	mov	r5, r3
 801709c:	4606      	mov	r6, r0
 801709e:	b118      	cbz	r0, 80170a8 <_vfiprintf_r+0x18>
 80170a0:	6983      	ldr	r3, [r0, #24]
 80170a2:	b90b      	cbnz	r3, 80170a8 <_vfiprintf_r+0x18>
 80170a4:	f7fe fbac 	bl	8015800 <__sinit>
 80170a8:	4b7c      	ldr	r3, [pc, #496]	; (801729c <_vfiprintf_r+0x20c>)
 80170aa:	429c      	cmp	r4, r3
 80170ac:	d158      	bne.n	8017160 <_vfiprintf_r+0xd0>
 80170ae:	6874      	ldr	r4, [r6, #4]
 80170b0:	89a3      	ldrh	r3, [r4, #12]
 80170b2:	0718      	lsls	r0, r3, #28
 80170b4:	d55e      	bpl.n	8017174 <_vfiprintf_r+0xe4>
 80170b6:	6923      	ldr	r3, [r4, #16]
 80170b8:	2b00      	cmp	r3, #0
 80170ba:	d05b      	beq.n	8017174 <_vfiprintf_r+0xe4>
 80170bc:	2300      	movs	r3, #0
 80170be:	9309      	str	r3, [sp, #36]	; 0x24
 80170c0:	2320      	movs	r3, #32
 80170c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170c6:	2330      	movs	r3, #48	; 0x30
 80170c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170cc:	9503      	str	r5, [sp, #12]
 80170ce:	f04f 0b01 	mov.w	fp, #1
 80170d2:	46b8      	mov	r8, r7
 80170d4:	4645      	mov	r5, r8
 80170d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170da:	b10b      	cbz	r3, 80170e0 <_vfiprintf_r+0x50>
 80170dc:	2b25      	cmp	r3, #37	; 0x25
 80170de:	d154      	bne.n	801718a <_vfiprintf_r+0xfa>
 80170e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80170e4:	d00b      	beq.n	80170fe <_vfiprintf_r+0x6e>
 80170e6:	4653      	mov	r3, sl
 80170e8:	463a      	mov	r2, r7
 80170ea:	4621      	mov	r1, r4
 80170ec:	4630      	mov	r0, r6
 80170ee:	f7ff ffbc 	bl	801706a <__sfputs_r>
 80170f2:	3001      	adds	r0, #1
 80170f4:	f000 80c2 	beq.w	801727c <_vfiprintf_r+0x1ec>
 80170f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170fa:	4453      	add	r3, sl
 80170fc:	9309      	str	r3, [sp, #36]	; 0x24
 80170fe:	f898 3000 	ldrb.w	r3, [r8]
 8017102:	2b00      	cmp	r3, #0
 8017104:	f000 80ba 	beq.w	801727c <_vfiprintf_r+0x1ec>
 8017108:	2300      	movs	r3, #0
 801710a:	f04f 32ff 	mov.w	r2, #4294967295
 801710e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017112:	9304      	str	r3, [sp, #16]
 8017114:	9307      	str	r3, [sp, #28]
 8017116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801711a:	931a      	str	r3, [sp, #104]	; 0x68
 801711c:	46a8      	mov	r8, r5
 801711e:	2205      	movs	r2, #5
 8017120:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017124:	485e      	ldr	r0, [pc, #376]	; (80172a0 <_vfiprintf_r+0x210>)
 8017126:	f7e9 f873 	bl	8000210 <memchr>
 801712a:	9b04      	ldr	r3, [sp, #16]
 801712c:	bb78      	cbnz	r0, 801718e <_vfiprintf_r+0xfe>
 801712e:	06d9      	lsls	r1, r3, #27
 8017130:	bf44      	itt	mi
 8017132:	2220      	movmi	r2, #32
 8017134:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017138:	071a      	lsls	r2, r3, #28
 801713a:	bf44      	itt	mi
 801713c:	222b      	movmi	r2, #43	; 0x2b
 801713e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017142:	782a      	ldrb	r2, [r5, #0]
 8017144:	2a2a      	cmp	r2, #42	; 0x2a
 8017146:	d02a      	beq.n	801719e <_vfiprintf_r+0x10e>
 8017148:	9a07      	ldr	r2, [sp, #28]
 801714a:	46a8      	mov	r8, r5
 801714c:	2000      	movs	r0, #0
 801714e:	250a      	movs	r5, #10
 8017150:	4641      	mov	r1, r8
 8017152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017156:	3b30      	subs	r3, #48	; 0x30
 8017158:	2b09      	cmp	r3, #9
 801715a:	d969      	bls.n	8017230 <_vfiprintf_r+0x1a0>
 801715c:	b360      	cbz	r0, 80171b8 <_vfiprintf_r+0x128>
 801715e:	e024      	b.n	80171aa <_vfiprintf_r+0x11a>
 8017160:	4b50      	ldr	r3, [pc, #320]	; (80172a4 <_vfiprintf_r+0x214>)
 8017162:	429c      	cmp	r4, r3
 8017164:	d101      	bne.n	801716a <_vfiprintf_r+0xda>
 8017166:	68b4      	ldr	r4, [r6, #8]
 8017168:	e7a2      	b.n	80170b0 <_vfiprintf_r+0x20>
 801716a:	4b4f      	ldr	r3, [pc, #316]	; (80172a8 <_vfiprintf_r+0x218>)
 801716c:	429c      	cmp	r4, r3
 801716e:	bf08      	it	eq
 8017170:	68f4      	ldreq	r4, [r6, #12]
 8017172:	e79d      	b.n	80170b0 <_vfiprintf_r+0x20>
 8017174:	4621      	mov	r1, r4
 8017176:	4630      	mov	r0, r6
 8017178:	f7fd fb90 	bl	801489c <__swsetup_r>
 801717c:	2800      	cmp	r0, #0
 801717e:	d09d      	beq.n	80170bc <_vfiprintf_r+0x2c>
 8017180:	f04f 30ff 	mov.w	r0, #4294967295
 8017184:	b01d      	add	sp, #116	; 0x74
 8017186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801718a:	46a8      	mov	r8, r5
 801718c:	e7a2      	b.n	80170d4 <_vfiprintf_r+0x44>
 801718e:	4a44      	ldr	r2, [pc, #272]	; (80172a0 <_vfiprintf_r+0x210>)
 8017190:	1a80      	subs	r0, r0, r2
 8017192:	fa0b f000 	lsl.w	r0, fp, r0
 8017196:	4318      	orrs	r0, r3
 8017198:	9004      	str	r0, [sp, #16]
 801719a:	4645      	mov	r5, r8
 801719c:	e7be      	b.n	801711c <_vfiprintf_r+0x8c>
 801719e:	9a03      	ldr	r2, [sp, #12]
 80171a0:	1d11      	adds	r1, r2, #4
 80171a2:	6812      	ldr	r2, [r2, #0]
 80171a4:	9103      	str	r1, [sp, #12]
 80171a6:	2a00      	cmp	r2, #0
 80171a8:	db01      	blt.n	80171ae <_vfiprintf_r+0x11e>
 80171aa:	9207      	str	r2, [sp, #28]
 80171ac:	e004      	b.n	80171b8 <_vfiprintf_r+0x128>
 80171ae:	4252      	negs	r2, r2
 80171b0:	f043 0302 	orr.w	r3, r3, #2
 80171b4:	9207      	str	r2, [sp, #28]
 80171b6:	9304      	str	r3, [sp, #16]
 80171b8:	f898 3000 	ldrb.w	r3, [r8]
 80171bc:	2b2e      	cmp	r3, #46	; 0x2e
 80171be:	d10e      	bne.n	80171de <_vfiprintf_r+0x14e>
 80171c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80171c4:	2b2a      	cmp	r3, #42	; 0x2a
 80171c6:	d138      	bne.n	801723a <_vfiprintf_r+0x1aa>
 80171c8:	9b03      	ldr	r3, [sp, #12]
 80171ca:	1d1a      	adds	r2, r3, #4
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	9203      	str	r2, [sp, #12]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	bfb8      	it	lt
 80171d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80171d8:	f108 0802 	add.w	r8, r8, #2
 80171dc:	9305      	str	r3, [sp, #20]
 80171de:	4d33      	ldr	r5, [pc, #204]	; (80172ac <_vfiprintf_r+0x21c>)
 80171e0:	f898 1000 	ldrb.w	r1, [r8]
 80171e4:	2203      	movs	r2, #3
 80171e6:	4628      	mov	r0, r5
 80171e8:	f7e9 f812 	bl	8000210 <memchr>
 80171ec:	b140      	cbz	r0, 8017200 <_vfiprintf_r+0x170>
 80171ee:	2340      	movs	r3, #64	; 0x40
 80171f0:	1b40      	subs	r0, r0, r5
 80171f2:	fa03 f000 	lsl.w	r0, r3, r0
 80171f6:	9b04      	ldr	r3, [sp, #16]
 80171f8:	4303      	orrs	r3, r0
 80171fa:	f108 0801 	add.w	r8, r8, #1
 80171fe:	9304      	str	r3, [sp, #16]
 8017200:	f898 1000 	ldrb.w	r1, [r8]
 8017204:	482a      	ldr	r0, [pc, #168]	; (80172b0 <_vfiprintf_r+0x220>)
 8017206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801720a:	2206      	movs	r2, #6
 801720c:	f108 0701 	add.w	r7, r8, #1
 8017210:	f7e8 fffe 	bl	8000210 <memchr>
 8017214:	2800      	cmp	r0, #0
 8017216:	d037      	beq.n	8017288 <_vfiprintf_r+0x1f8>
 8017218:	4b26      	ldr	r3, [pc, #152]	; (80172b4 <_vfiprintf_r+0x224>)
 801721a:	bb1b      	cbnz	r3, 8017264 <_vfiprintf_r+0x1d4>
 801721c:	9b03      	ldr	r3, [sp, #12]
 801721e:	3307      	adds	r3, #7
 8017220:	f023 0307 	bic.w	r3, r3, #7
 8017224:	3308      	adds	r3, #8
 8017226:	9303      	str	r3, [sp, #12]
 8017228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801722a:	444b      	add	r3, r9
 801722c:	9309      	str	r3, [sp, #36]	; 0x24
 801722e:	e750      	b.n	80170d2 <_vfiprintf_r+0x42>
 8017230:	fb05 3202 	mla	r2, r5, r2, r3
 8017234:	2001      	movs	r0, #1
 8017236:	4688      	mov	r8, r1
 8017238:	e78a      	b.n	8017150 <_vfiprintf_r+0xc0>
 801723a:	2300      	movs	r3, #0
 801723c:	f108 0801 	add.w	r8, r8, #1
 8017240:	9305      	str	r3, [sp, #20]
 8017242:	4619      	mov	r1, r3
 8017244:	250a      	movs	r5, #10
 8017246:	4640      	mov	r0, r8
 8017248:	f810 2b01 	ldrb.w	r2, [r0], #1
 801724c:	3a30      	subs	r2, #48	; 0x30
 801724e:	2a09      	cmp	r2, #9
 8017250:	d903      	bls.n	801725a <_vfiprintf_r+0x1ca>
 8017252:	2b00      	cmp	r3, #0
 8017254:	d0c3      	beq.n	80171de <_vfiprintf_r+0x14e>
 8017256:	9105      	str	r1, [sp, #20]
 8017258:	e7c1      	b.n	80171de <_vfiprintf_r+0x14e>
 801725a:	fb05 2101 	mla	r1, r5, r1, r2
 801725e:	2301      	movs	r3, #1
 8017260:	4680      	mov	r8, r0
 8017262:	e7f0      	b.n	8017246 <_vfiprintf_r+0x1b6>
 8017264:	ab03      	add	r3, sp, #12
 8017266:	9300      	str	r3, [sp, #0]
 8017268:	4622      	mov	r2, r4
 801726a:	4b13      	ldr	r3, [pc, #76]	; (80172b8 <_vfiprintf_r+0x228>)
 801726c:	a904      	add	r1, sp, #16
 801726e:	4630      	mov	r0, r6
 8017270:	f7fb fcd6 	bl	8012c20 <_printf_float>
 8017274:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017278:	4681      	mov	r9, r0
 801727a:	d1d5      	bne.n	8017228 <_vfiprintf_r+0x198>
 801727c:	89a3      	ldrh	r3, [r4, #12]
 801727e:	065b      	lsls	r3, r3, #25
 8017280:	f53f af7e 	bmi.w	8017180 <_vfiprintf_r+0xf0>
 8017284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017286:	e77d      	b.n	8017184 <_vfiprintf_r+0xf4>
 8017288:	ab03      	add	r3, sp, #12
 801728a:	9300      	str	r3, [sp, #0]
 801728c:	4622      	mov	r2, r4
 801728e:	4b0a      	ldr	r3, [pc, #40]	; (80172b8 <_vfiprintf_r+0x228>)
 8017290:	a904      	add	r1, sp, #16
 8017292:	4630      	mov	r0, r6
 8017294:	f7fb ff7a 	bl	801318c <_printf_i>
 8017298:	e7ec      	b.n	8017274 <_vfiprintf_r+0x1e4>
 801729a:	bf00      	nop
 801729c:	08018260 	.word	0x08018260
 80172a0:	080183ac 	.word	0x080183ac
 80172a4:	08018280 	.word	0x08018280
 80172a8:	08018240 	.word	0x08018240
 80172ac:	080183b2 	.word	0x080183b2
 80172b0:	080183b6 	.word	0x080183b6
 80172b4:	08012c21 	.word	0x08012c21
 80172b8:	0801706b 	.word	0x0801706b

080172bc <_scanf_chars>:
 80172bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c0:	4615      	mov	r5, r2
 80172c2:	688a      	ldr	r2, [r1, #8]
 80172c4:	4680      	mov	r8, r0
 80172c6:	460c      	mov	r4, r1
 80172c8:	b932      	cbnz	r2, 80172d8 <_scanf_chars+0x1c>
 80172ca:	698a      	ldr	r2, [r1, #24]
 80172cc:	2a00      	cmp	r2, #0
 80172ce:	bf14      	ite	ne
 80172d0:	f04f 32ff 	movne.w	r2, #4294967295
 80172d4:	2201      	moveq	r2, #1
 80172d6:	608a      	str	r2, [r1, #8]
 80172d8:	6822      	ldr	r2, [r4, #0]
 80172da:	06d1      	lsls	r1, r2, #27
 80172dc:	bf5f      	itttt	pl
 80172de:	681a      	ldrpl	r2, [r3, #0]
 80172e0:	1d11      	addpl	r1, r2, #4
 80172e2:	6019      	strpl	r1, [r3, #0]
 80172e4:	6817      	ldrpl	r7, [r2, #0]
 80172e6:	2600      	movs	r6, #0
 80172e8:	69a3      	ldr	r3, [r4, #24]
 80172ea:	b1db      	cbz	r3, 8017324 <_scanf_chars+0x68>
 80172ec:	2b01      	cmp	r3, #1
 80172ee:	d107      	bne.n	8017300 <_scanf_chars+0x44>
 80172f0:	682b      	ldr	r3, [r5, #0]
 80172f2:	6962      	ldr	r2, [r4, #20]
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	5cd3      	ldrb	r3, [r2, r3]
 80172f8:	b9a3      	cbnz	r3, 8017324 <_scanf_chars+0x68>
 80172fa:	2e00      	cmp	r6, #0
 80172fc:	d132      	bne.n	8017364 <_scanf_chars+0xa8>
 80172fe:	e006      	b.n	801730e <_scanf_chars+0x52>
 8017300:	2b02      	cmp	r3, #2
 8017302:	d007      	beq.n	8017314 <_scanf_chars+0x58>
 8017304:	2e00      	cmp	r6, #0
 8017306:	d12d      	bne.n	8017364 <_scanf_chars+0xa8>
 8017308:	69a3      	ldr	r3, [r4, #24]
 801730a:	2b01      	cmp	r3, #1
 801730c:	d12a      	bne.n	8017364 <_scanf_chars+0xa8>
 801730e:	2001      	movs	r0, #1
 8017310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017314:	f7fe fe28 	bl	8015f68 <__locale_ctype_ptr>
 8017318:	682b      	ldr	r3, [r5, #0]
 801731a:	781b      	ldrb	r3, [r3, #0]
 801731c:	4418      	add	r0, r3
 801731e:	7843      	ldrb	r3, [r0, #1]
 8017320:	071b      	lsls	r3, r3, #28
 8017322:	d4ef      	bmi.n	8017304 <_scanf_chars+0x48>
 8017324:	6823      	ldr	r3, [r4, #0]
 8017326:	06da      	lsls	r2, r3, #27
 8017328:	bf5e      	ittt	pl
 801732a:	682b      	ldrpl	r3, [r5, #0]
 801732c:	781b      	ldrbpl	r3, [r3, #0]
 801732e:	703b      	strbpl	r3, [r7, #0]
 8017330:	682a      	ldr	r2, [r5, #0]
 8017332:	686b      	ldr	r3, [r5, #4]
 8017334:	f102 0201 	add.w	r2, r2, #1
 8017338:	602a      	str	r2, [r5, #0]
 801733a:	68a2      	ldr	r2, [r4, #8]
 801733c:	f103 33ff 	add.w	r3, r3, #4294967295
 8017340:	f102 32ff 	add.w	r2, r2, #4294967295
 8017344:	606b      	str	r3, [r5, #4]
 8017346:	f106 0601 	add.w	r6, r6, #1
 801734a:	bf58      	it	pl
 801734c:	3701      	addpl	r7, #1
 801734e:	60a2      	str	r2, [r4, #8]
 8017350:	b142      	cbz	r2, 8017364 <_scanf_chars+0xa8>
 8017352:	2b00      	cmp	r3, #0
 8017354:	dcc8      	bgt.n	80172e8 <_scanf_chars+0x2c>
 8017356:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801735a:	4629      	mov	r1, r5
 801735c:	4640      	mov	r0, r8
 801735e:	4798      	blx	r3
 8017360:	2800      	cmp	r0, #0
 8017362:	d0c1      	beq.n	80172e8 <_scanf_chars+0x2c>
 8017364:	6823      	ldr	r3, [r4, #0]
 8017366:	f013 0310 	ands.w	r3, r3, #16
 801736a:	d105      	bne.n	8017378 <_scanf_chars+0xbc>
 801736c:	68e2      	ldr	r2, [r4, #12]
 801736e:	3201      	adds	r2, #1
 8017370:	60e2      	str	r2, [r4, #12]
 8017372:	69a2      	ldr	r2, [r4, #24]
 8017374:	b102      	cbz	r2, 8017378 <_scanf_chars+0xbc>
 8017376:	703b      	strb	r3, [r7, #0]
 8017378:	6923      	ldr	r3, [r4, #16]
 801737a:	441e      	add	r6, r3
 801737c:	6126      	str	r6, [r4, #16]
 801737e:	2000      	movs	r0, #0
 8017380:	e7c6      	b.n	8017310 <_scanf_chars+0x54>
	...

08017384 <_scanf_i>:
 8017384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017388:	469a      	mov	sl, r3
 801738a:	4b74      	ldr	r3, [pc, #464]	; (801755c <_scanf_i+0x1d8>)
 801738c:	460c      	mov	r4, r1
 801738e:	4683      	mov	fp, r0
 8017390:	4616      	mov	r6, r2
 8017392:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017396:	b087      	sub	sp, #28
 8017398:	ab03      	add	r3, sp, #12
 801739a:	68a7      	ldr	r7, [r4, #8]
 801739c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80173a0:	4b6f      	ldr	r3, [pc, #444]	; (8017560 <_scanf_i+0x1dc>)
 80173a2:	69a1      	ldr	r1, [r4, #24]
 80173a4:	4a6f      	ldr	r2, [pc, #444]	; (8017564 <_scanf_i+0x1e0>)
 80173a6:	2903      	cmp	r1, #3
 80173a8:	bf08      	it	eq
 80173aa:	461a      	moveq	r2, r3
 80173ac:	1e7b      	subs	r3, r7, #1
 80173ae:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80173b2:	bf84      	itt	hi
 80173b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80173b8:	60a3      	strhi	r3, [r4, #8]
 80173ba:	6823      	ldr	r3, [r4, #0]
 80173bc:	9200      	str	r2, [sp, #0]
 80173be:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80173c2:	bf88      	it	hi
 80173c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80173c8:	f104 091c 	add.w	r9, r4, #28
 80173cc:	6023      	str	r3, [r4, #0]
 80173ce:	bf8c      	ite	hi
 80173d0:	197f      	addhi	r7, r7, r5
 80173d2:	2700      	movls	r7, #0
 80173d4:	464b      	mov	r3, r9
 80173d6:	f04f 0800 	mov.w	r8, #0
 80173da:	9301      	str	r3, [sp, #4]
 80173dc:	6831      	ldr	r1, [r6, #0]
 80173de:	ab03      	add	r3, sp, #12
 80173e0:	2202      	movs	r2, #2
 80173e2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80173e6:	7809      	ldrb	r1, [r1, #0]
 80173e8:	f7e8 ff12 	bl	8000210 <memchr>
 80173ec:	9b01      	ldr	r3, [sp, #4]
 80173ee:	b330      	cbz	r0, 801743e <_scanf_i+0xba>
 80173f0:	f1b8 0f01 	cmp.w	r8, #1
 80173f4:	d15a      	bne.n	80174ac <_scanf_i+0x128>
 80173f6:	6862      	ldr	r2, [r4, #4]
 80173f8:	b92a      	cbnz	r2, 8017406 <_scanf_i+0x82>
 80173fa:	6822      	ldr	r2, [r4, #0]
 80173fc:	2108      	movs	r1, #8
 80173fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017402:	6061      	str	r1, [r4, #4]
 8017404:	6022      	str	r2, [r4, #0]
 8017406:	6822      	ldr	r2, [r4, #0]
 8017408:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801740c:	6022      	str	r2, [r4, #0]
 801740e:	68a2      	ldr	r2, [r4, #8]
 8017410:	1e51      	subs	r1, r2, #1
 8017412:	60a1      	str	r1, [r4, #8]
 8017414:	b19a      	cbz	r2, 801743e <_scanf_i+0xba>
 8017416:	6832      	ldr	r2, [r6, #0]
 8017418:	1c51      	adds	r1, r2, #1
 801741a:	6031      	str	r1, [r6, #0]
 801741c:	7812      	ldrb	r2, [r2, #0]
 801741e:	701a      	strb	r2, [r3, #0]
 8017420:	1c5d      	adds	r5, r3, #1
 8017422:	6873      	ldr	r3, [r6, #4]
 8017424:	3b01      	subs	r3, #1
 8017426:	2b00      	cmp	r3, #0
 8017428:	6073      	str	r3, [r6, #4]
 801742a:	dc07      	bgt.n	801743c <_scanf_i+0xb8>
 801742c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017430:	4631      	mov	r1, r6
 8017432:	4658      	mov	r0, fp
 8017434:	4798      	blx	r3
 8017436:	2800      	cmp	r0, #0
 8017438:	f040 8086 	bne.w	8017548 <_scanf_i+0x1c4>
 801743c:	462b      	mov	r3, r5
 801743e:	f108 0801 	add.w	r8, r8, #1
 8017442:	f1b8 0f03 	cmp.w	r8, #3
 8017446:	d1c8      	bne.n	80173da <_scanf_i+0x56>
 8017448:	6862      	ldr	r2, [r4, #4]
 801744a:	b90a      	cbnz	r2, 8017450 <_scanf_i+0xcc>
 801744c:	220a      	movs	r2, #10
 801744e:	6062      	str	r2, [r4, #4]
 8017450:	6862      	ldr	r2, [r4, #4]
 8017452:	4945      	ldr	r1, [pc, #276]	; (8017568 <_scanf_i+0x1e4>)
 8017454:	6960      	ldr	r0, [r4, #20]
 8017456:	9301      	str	r3, [sp, #4]
 8017458:	1a89      	subs	r1, r1, r2
 801745a:	f000 f8df 	bl	801761c <__sccl>
 801745e:	9b01      	ldr	r3, [sp, #4]
 8017460:	f04f 0800 	mov.w	r8, #0
 8017464:	461d      	mov	r5, r3
 8017466:	68a3      	ldr	r3, [r4, #8]
 8017468:	6822      	ldr	r2, [r4, #0]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d03a      	beq.n	80174e4 <_scanf_i+0x160>
 801746e:	6831      	ldr	r1, [r6, #0]
 8017470:	6960      	ldr	r0, [r4, #20]
 8017472:	f891 c000 	ldrb.w	ip, [r1]
 8017476:	f810 000c 	ldrb.w	r0, [r0, ip]
 801747a:	2800      	cmp	r0, #0
 801747c:	d032      	beq.n	80174e4 <_scanf_i+0x160>
 801747e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017482:	d121      	bne.n	80174c8 <_scanf_i+0x144>
 8017484:	0510      	lsls	r0, r2, #20
 8017486:	d51f      	bpl.n	80174c8 <_scanf_i+0x144>
 8017488:	f108 0801 	add.w	r8, r8, #1
 801748c:	b117      	cbz	r7, 8017494 <_scanf_i+0x110>
 801748e:	3301      	adds	r3, #1
 8017490:	3f01      	subs	r7, #1
 8017492:	60a3      	str	r3, [r4, #8]
 8017494:	6873      	ldr	r3, [r6, #4]
 8017496:	3b01      	subs	r3, #1
 8017498:	2b00      	cmp	r3, #0
 801749a:	6073      	str	r3, [r6, #4]
 801749c:	dd1b      	ble.n	80174d6 <_scanf_i+0x152>
 801749e:	6833      	ldr	r3, [r6, #0]
 80174a0:	3301      	adds	r3, #1
 80174a2:	6033      	str	r3, [r6, #0]
 80174a4:	68a3      	ldr	r3, [r4, #8]
 80174a6:	3b01      	subs	r3, #1
 80174a8:	60a3      	str	r3, [r4, #8]
 80174aa:	e7dc      	b.n	8017466 <_scanf_i+0xe2>
 80174ac:	f1b8 0f02 	cmp.w	r8, #2
 80174b0:	d1ad      	bne.n	801740e <_scanf_i+0x8a>
 80174b2:	6822      	ldr	r2, [r4, #0]
 80174b4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80174b8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80174bc:	d1bf      	bne.n	801743e <_scanf_i+0xba>
 80174be:	2110      	movs	r1, #16
 80174c0:	6061      	str	r1, [r4, #4]
 80174c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80174c6:	e7a1      	b.n	801740c <_scanf_i+0x88>
 80174c8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80174cc:	6022      	str	r2, [r4, #0]
 80174ce:	780b      	ldrb	r3, [r1, #0]
 80174d0:	702b      	strb	r3, [r5, #0]
 80174d2:	3501      	adds	r5, #1
 80174d4:	e7de      	b.n	8017494 <_scanf_i+0x110>
 80174d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80174da:	4631      	mov	r1, r6
 80174dc:	4658      	mov	r0, fp
 80174de:	4798      	blx	r3
 80174e0:	2800      	cmp	r0, #0
 80174e2:	d0df      	beq.n	80174a4 <_scanf_i+0x120>
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	05d9      	lsls	r1, r3, #23
 80174e8:	d50c      	bpl.n	8017504 <_scanf_i+0x180>
 80174ea:	454d      	cmp	r5, r9
 80174ec:	d908      	bls.n	8017500 <_scanf_i+0x17c>
 80174ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80174f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80174f6:	4632      	mov	r2, r6
 80174f8:	4658      	mov	r0, fp
 80174fa:	4798      	blx	r3
 80174fc:	1e6f      	subs	r7, r5, #1
 80174fe:	463d      	mov	r5, r7
 8017500:	454d      	cmp	r5, r9
 8017502:	d029      	beq.n	8017558 <_scanf_i+0x1d4>
 8017504:	6822      	ldr	r2, [r4, #0]
 8017506:	f012 0210 	ands.w	r2, r2, #16
 801750a:	d113      	bne.n	8017534 <_scanf_i+0x1b0>
 801750c:	702a      	strb	r2, [r5, #0]
 801750e:	6863      	ldr	r3, [r4, #4]
 8017510:	9e00      	ldr	r6, [sp, #0]
 8017512:	4649      	mov	r1, r9
 8017514:	4658      	mov	r0, fp
 8017516:	47b0      	blx	r6
 8017518:	f8da 3000 	ldr.w	r3, [sl]
 801751c:	6821      	ldr	r1, [r4, #0]
 801751e:	1d1a      	adds	r2, r3, #4
 8017520:	f8ca 2000 	str.w	r2, [sl]
 8017524:	f011 0f20 	tst.w	r1, #32
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	d010      	beq.n	801754e <_scanf_i+0x1ca>
 801752c:	6018      	str	r0, [r3, #0]
 801752e:	68e3      	ldr	r3, [r4, #12]
 8017530:	3301      	adds	r3, #1
 8017532:	60e3      	str	r3, [r4, #12]
 8017534:	eba5 0509 	sub.w	r5, r5, r9
 8017538:	44a8      	add	r8, r5
 801753a:	6925      	ldr	r5, [r4, #16]
 801753c:	4445      	add	r5, r8
 801753e:	6125      	str	r5, [r4, #16]
 8017540:	2000      	movs	r0, #0
 8017542:	b007      	add	sp, #28
 8017544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017548:	f04f 0800 	mov.w	r8, #0
 801754c:	e7ca      	b.n	80174e4 <_scanf_i+0x160>
 801754e:	07ca      	lsls	r2, r1, #31
 8017550:	bf4c      	ite	mi
 8017552:	8018      	strhmi	r0, [r3, #0]
 8017554:	6018      	strpl	r0, [r3, #0]
 8017556:	e7ea      	b.n	801752e <_scanf_i+0x1aa>
 8017558:	2001      	movs	r0, #1
 801755a:	e7f2      	b.n	8017542 <_scanf_i+0x1be>
 801755c:	08017b3c 	.word	0x08017b3c
 8017560:	08014771 	.word	0x08014771
 8017564:	08017799 	.word	0x08017799
 8017568:	080183cd 	.word	0x080183cd

0801756c <_putc_r>:
 801756c:	b570      	push	{r4, r5, r6, lr}
 801756e:	460d      	mov	r5, r1
 8017570:	4614      	mov	r4, r2
 8017572:	4606      	mov	r6, r0
 8017574:	b118      	cbz	r0, 801757e <_putc_r+0x12>
 8017576:	6983      	ldr	r3, [r0, #24]
 8017578:	b90b      	cbnz	r3, 801757e <_putc_r+0x12>
 801757a:	f7fe f941 	bl	8015800 <__sinit>
 801757e:	4b13      	ldr	r3, [pc, #76]	; (80175cc <_putc_r+0x60>)
 8017580:	429c      	cmp	r4, r3
 8017582:	d112      	bne.n	80175aa <_putc_r+0x3e>
 8017584:	6874      	ldr	r4, [r6, #4]
 8017586:	68a3      	ldr	r3, [r4, #8]
 8017588:	3b01      	subs	r3, #1
 801758a:	2b00      	cmp	r3, #0
 801758c:	60a3      	str	r3, [r4, #8]
 801758e:	da16      	bge.n	80175be <_putc_r+0x52>
 8017590:	69a2      	ldr	r2, [r4, #24]
 8017592:	4293      	cmp	r3, r2
 8017594:	db02      	blt.n	801759c <_putc_r+0x30>
 8017596:	b2eb      	uxtb	r3, r5
 8017598:	2b0a      	cmp	r3, #10
 801759a:	d110      	bne.n	80175be <_putc_r+0x52>
 801759c:	4622      	mov	r2, r4
 801759e:	4629      	mov	r1, r5
 80175a0:	4630      	mov	r0, r6
 80175a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80175a6:	f7fd b915 	b.w	80147d4 <__swbuf_r>
 80175aa:	4b09      	ldr	r3, [pc, #36]	; (80175d0 <_putc_r+0x64>)
 80175ac:	429c      	cmp	r4, r3
 80175ae:	d101      	bne.n	80175b4 <_putc_r+0x48>
 80175b0:	68b4      	ldr	r4, [r6, #8]
 80175b2:	e7e8      	b.n	8017586 <_putc_r+0x1a>
 80175b4:	4b07      	ldr	r3, [pc, #28]	; (80175d4 <_putc_r+0x68>)
 80175b6:	429c      	cmp	r4, r3
 80175b8:	bf08      	it	eq
 80175ba:	68f4      	ldreq	r4, [r6, #12]
 80175bc:	e7e3      	b.n	8017586 <_putc_r+0x1a>
 80175be:	6823      	ldr	r3, [r4, #0]
 80175c0:	1c5a      	adds	r2, r3, #1
 80175c2:	6022      	str	r2, [r4, #0]
 80175c4:	701d      	strb	r5, [r3, #0]
 80175c6:	b2e8      	uxtb	r0, r5
 80175c8:	bd70      	pop	{r4, r5, r6, pc}
 80175ca:	bf00      	nop
 80175cc:	08018260 	.word	0x08018260
 80175d0:	08018280 	.word	0x08018280
 80175d4:	08018240 	.word	0x08018240

080175d8 <_read_r>:
 80175d8:	b538      	push	{r3, r4, r5, lr}
 80175da:	4c07      	ldr	r4, [pc, #28]	; (80175f8 <_read_r+0x20>)
 80175dc:	4605      	mov	r5, r0
 80175de:	4608      	mov	r0, r1
 80175e0:	4611      	mov	r1, r2
 80175e2:	2200      	movs	r2, #0
 80175e4:	6022      	str	r2, [r4, #0]
 80175e6:	461a      	mov	r2, r3
 80175e8:	f7ee f8aa 	bl	8005740 <_read>
 80175ec:	1c43      	adds	r3, r0, #1
 80175ee:	d102      	bne.n	80175f6 <_read_r+0x1e>
 80175f0:	6823      	ldr	r3, [r4, #0]
 80175f2:	b103      	cbz	r3, 80175f6 <_read_r+0x1e>
 80175f4:	602b      	str	r3, [r5, #0]
 80175f6:	bd38      	pop	{r3, r4, r5, pc}
 80175f8:	20023ea0 	.word	0x20023ea0

080175fc <_sbrk_r>:
 80175fc:	b538      	push	{r3, r4, r5, lr}
 80175fe:	4c06      	ldr	r4, [pc, #24]	; (8017618 <_sbrk_r+0x1c>)
 8017600:	2300      	movs	r3, #0
 8017602:	4605      	mov	r5, r0
 8017604:	4608      	mov	r0, r1
 8017606:	6023      	str	r3, [r4, #0]
 8017608:	f7ee f8ec 	bl	80057e4 <_sbrk>
 801760c:	1c43      	adds	r3, r0, #1
 801760e:	d102      	bne.n	8017616 <_sbrk_r+0x1a>
 8017610:	6823      	ldr	r3, [r4, #0]
 8017612:	b103      	cbz	r3, 8017616 <_sbrk_r+0x1a>
 8017614:	602b      	str	r3, [r5, #0]
 8017616:	bd38      	pop	{r3, r4, r5, pc}
 8017618:	20023ea0 	.word	0x20023ea0

0801761c <__sccl>:
 801761c:	b570      	push	{r4, r5, r6, lr}
 801761e:	780b      	ldrb	r3, [r1, #0]
 8017620:	2b5e      	cmp	r3, #94	; 0x5e
 8017622:	bf13      	iteet	ne
 8017624:	1c4a      	addne	r2, r1, #1
 8017626:	1c8a      	addeq	r2, r1, #2
 8017628:	784b      	ldrbeq	r3, [r1, #1]
 801762a:	2100      	movne	r1, #0
 801762c:	bf08      	it	eq
 801762e:	2101      	moveq	r1, #1
 8017630:	1e44      	subs	r4, r0, #1
 8017632:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017636:	f804 1f01 	strb.w	r1, [r4, #1]!
 801763a:	42ac      	cmp	r4, r5
 801763c:	d1fb      	bne.n	8017636 <__sccl+0x1a>
 801763e:	b913      	cbnz	r3, 8017646 <__sccl+0x2a>
 8017640:	3a01      	subs	r2, #1
 8017642:	4610      	mov	r0, r2
 8017644:	bd70      	pop	{r4, r5, r6, pc}
 8017646:	f081 0401 	eor.w	r4, r1, #1
 801764a:	54c4      	strb	r4, [r0, r3]
 801764c:	1c51      	adds	r1, r2, #1
 801764e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017652:	2d2d      	cmp	r5, #45	; 0x2d
 8017654:	f101 36ff 	add.w	r6, r1, #4294967295
 8017658:	460a      	mov	r2, r1
 801765a:	d006      	beq.n	801766a <__sccl+0x4e>
 801765c:	2d5d      	cmp	r5, #93	; 0x5d
 801765e:	d0f0      	beq.n	8017642 <__sccl+0x26>
 8017660:	b90d      	cbnz	r5, 8017666 <__sccl+0x4a>
 8017662:	4632      	mov	r2, r6
 8017664:	e7ed      	b.n	8017642 <__sccl+0x26>
 8017666:	462b      	mov	r3, r5
 8017668:	e7ef      	b.n	801764a <__sccl+0x2e>
 801766a:	780e      	ldrb	r6, [r1, #0]
 801766c:	2e5d      	cmp	r6, #93	; 0x5d
 801766e:	d0fa      	beq.n	8017666 <__sccl+0x4a>
 8017670:	42b3      	cmp	r3, r6
 8017672:	dcf8      	bgt.n	8017666 <__sccl+0x4a>
 8017674:	3301      	adds	r3, #1
 8017676:	429e      	cmp	r6, r3
 8017678:	54c4      	strb	r4, [r0, r3]
 801767a:	dcfb      	bgt.n	8017674 <__sccl+0x58>
 801767c:	3102      	adds	r1, #2
 801767e:	e7e6      	b.n	801764e <__sccl+0x32>

08017680 <strncmp>:
 8017680:	b510      	push	{r4, lr}
 8017682:	b16a      	cbz	r2, 80176a0 <strncmp+0x20>
 8017684:	3901      	subs	r1, #1
 8017686:	1884      	adds	r4, r0, r2
 8017688:	f810 3b01 	ldrb.w	r3, [r0], #1
 801768c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017690:	4293      	cmp	r3, r2
 8017692:	d103      	bne.n	801769c <strncmp+0x1c>
 8017694:	42a0      	cmp	r0, r4
 8017696:	d001      	beq.n	801769c <strncmp+0x1c>
 8017698:	2b00      	cmp	r3, #0
 801769a:	d1f5      	bne.n	8017688 <strncmp+0x8>
 801769c:	1a98      	subs	r0, r3, r2
 801769e:	bd10      	pop	{r4, pc}
 80176a0:	4610      	mov	r0, r2
 80176a2:	e7fc      	b.n	801769e <strncmp+0x1e>

080176a4 <_strtoul_l.isra.0>:
 80176a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176a8:	4680      	mov	r8, r0
 80176aa:	4689      	mov	r9, r1
 80176ac:	4692      	mov	sl, r2
 80176ae:	461e      	mov	r6, r3
 80176b0:	460f      	mov	r7, r1
 80176b2:	463d      	mov	r5, r7
 80176b4:	9808      	ldr	r0, [sp, #32]
 80176b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80176ba:	f7fe fc51 	bl	8015f60 <__locale_ctype_ptr_l>
 80176be:	4420      	add	r0, r4
 80176c0:	7843      	ldrb	r3, [r0, #1]
 80176c2:	f013 0308 	ands.w	r3, r3, #8
 80176c6:	d130      	bne.n	801772a <_strtoul_l.isra.0+0x86>
 80176c8:	2c2d      	cmp	r4, #45	; 0x2d
 80176ca:	d130      	bne.n	801772e <_strtoul_l.isra.0+0x8a>
 80176cc:	787c      	ldrb	r4, [r7, #1]
 80176ce:	1cbd      	adds	r5, r7, #2
 80176d0:	2101      	movs	r1, #1
 80176d2:	2e00      	cmp	r6, #0
 80176d4:	d05c      	beq.n	8017790 <_strtoul_l.isra.0+0xec>
 80176d6:	2e10      	cmp	r6, #16
 80176d8:	d109      	bne.n	80176ee <_strtoul_l.isra.0+0x4a>
 80176da:	2c30      	cmp	r4, #48	; 0x30
 80176dc:	d107      	bne.n	80176ee <_strtoul_l.isra.0+0x4a>
 80176de:	782b      	ldrb	r3, [r5, #0]
 80176e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80176e4:	2b58      	cmp	r3, #88	; 0x58
 80176e6:	d14e      	bne.n	8017786 <_strtoul_l.isra.0+0xe2>
 80176e8:	786c      	ldrb	r4, [r5, #1]
 80176ea:	2610      	movs	r6, #16
 80176ec:	3502      	adds	r5, #2
 80176ee:	f04f 32ff 	mov.w	r2, #4294967295
 80176f2:	2300      	movs	r3, #0
 80176f4:	fbb2 f2f6 	udiv	r2, r2, r6
 80176f8:	fb06 fc02 	mul.w	ip, r6, r2
 80176fc:	ea6f 0c0c 	mvn.w	ip, ip
 8017700:	4618      	mov	r0, r3
 8017702:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017706:	2f09      	cmp	r7, #9
 8017708:	d817      	bhi.n	801773a <_strtoul_l.isra.0+0x96>
 801770a:	463c      	mov	r4, r7
 801770c:	42a6      	cmp	r6, r4
 801770e:	dd23      	ble.n	8017758 <_strtoul_l.isra.0+0xb4>
 8017710:	2b00      	cmp	r3, #0
 8017712:	db1e      	blt.n	8017752 <_strtoul_l.isra.0+0xae>
 8017714:	4282      	cmp	r2, r0
 8017716:	d31c      	bcc.n	8017752 <_strtoul_l.isra.0+0xae>
 8017718:	d101      	bne.n	801771e <_strtoul_l.isra.0+0x7a>
 801771a:	45a4      	cmp	ip, r4
 801771c:	db19      	blt.n	8017752 <_strtoul_l.isra.0+0xae>
 801771e:	fb00 4006 	mla	r0, r0, r6, r4
 8017722:	2301      	movs	r3, #1
 8017724:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017728:	e7eb      	b.n	8017702 <_strtoul_l.isra.0+0x5e>
 801772a:	462f      	mov	r7, r5
 801772c:	e7c1      	b.n	80176b2 <_strtoul_l.isra.0+0xe>
 801772e:	2c2b      	cmp	r4, #43	; 0x2b
 8017730:	bf04      	itt	eq
 8017732:	1cbd      	addeq	r5, r7, #2
 8017734:	787c      	ldrbeq	r4, [r7, #1]
 8017736:	4619      	mov	r1, r3
 8017738:	e7cb      	b.n	80176d2 <_strtoul_l.isra.0+0x2e>
 801773a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801773e:	2f19      	cmp	r7, #25
 8017740:	d801      	bhi.n	8017746 <_strtoul_l.isra.0+0xa2>
 8017742:	3c37      	subs	r4, #55	; 0x37
 8017744:	e7e2      	b.n	801770c <_strtoul_l.isra.0+0x68>
 8017746:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801774a:	2f19      	cmp	r7, #25
 801774c:	d804      	bhi.n	8017758 <_strtoul_l.isra.0+0xb4>
 801774e:	3c57      	subs	r4, #87	; 0x57
 8017750:	e7dc      	b.n	801770c <_strtoul_l.isra.0+0x68>
 8017752:	f04f 33ff 	mov.w	r3, #4294967295
 8017756:	e7e5      	b.n	8017724 <_strtoul_l.isra.0+0x80>
 8017758:	2b00      	cmp	r3, #0
 801775a:	da09      	bge.n	8017770 <_strtoul_l.isra.0+0xcc>
 801775c:	2322      	movs	r3, #34	; 0x22
 801775e:	f8c8 3000 	str.w	r3, [r8]
 8017762:	f04f 30ff 	mov.w	r0, #4294967295
 8017766:	f1ba 0f00 	cmp.w	sl, #0
 801776a:	d107      	bne.n	801777c <_strtoul_l.isra.0+0xd8>
 801776c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017770:	b101      	cbz	r1, 8017774 <_strtoul_l.isra.0+0xd0>
 8017772:	4240      	negs	r0, r0
 8017774:	f1ba 0f00 	cmp.w	sl, #0
 8017778:	d0f8      	beq.n	801776c <_strtoul_l.isra.0+0xc8>
 801777a:	b10b      	cbz	r3, 8017780 <_strtoul_l.isra.0+0xdc>
 801777c:	f105 39ff 	add.w	r9, r5, #4294967295
 8017780:	f8ca 9000 	str.w	r9, [sl]
 8017784:	e7f2      	b.n	801776c <_strtoul_l.isra.0+0xc8>
 8017786:	2430      	movs	r4, #48	; 0x30
 8017788:	2e00      	cmp	r6, #0
 801778a:	d1b0      	bne.n	80176ee <_strtoul_l.isra.0+0x4a>
 801778c:	2608      	movs	r6, #8
 801778e:	e7ae      	b.n	80176ee <_strtoul_l.isra.0+0x4a>
 8017790:	2c30      	cmp	r4, #48	; 0x30
 8017792:	d0a4      	beq.n	80176de <_strtoul_l.isra.0+0x3a>
 8017794:	260a      	movs	r6, #10
 8017796:	e7aa      	b.n	80176ee <_strtoul_l.isra.0+0x4a>

08017798 <_strtoul_r>:
 8017798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801779a:	4c06      	ldr	r4, [pc, #24]	; (80177b4 <_strtoul_r+0x1c>)
 801779c:	4d06      	ldr	r5, [pc, #24]	; (80177b8 <_strtoul_r+0x20>)
 801779e:	6824      	ldr	r4, [r4, #0]
 80177a0:	6a24      	ldr	r4, [r4, #32]
 80177a2:	2c00      	cmp	r4, #0
 80177a4:	bf08      	it	eq
 80177a6:	462c      	moveq	r4, r5
 80177a8:	9400      	str	r4, [sp, #0]
 80177aa:	f7ff ff7b 	bl	80176a4 <_strtoul_l.isra.0>
 80177ae:	b003      	add	sp, #12
 80177b0:	bd30      	pop	{r4, r5, pc}
 80177b2:	bf00      	nop
 80177b4:	2000000c 	.word	0x2000000c
 80177b8:	20000070 	.word	0x20000070

080177bc <__submore>:
 80177bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177c0:	460c      	mov	r4, r1
 80177c2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80177c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80177c8:	4299      	cmp	r1, r3
 80177ca:	d11d      	bne.n	8017808 <__submore+0x4c>
 80177cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80177d0:	f7ff f8de 	bl	8016990 <_malloc_r>
 80177d4:	b918      	cbnz	r0, 80177de <__submore+0x22>
 80177d6:	f04f 30ff 	mov.w	r0, #4294967295
 80177da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80177e2:	63a3      	str	r3, [r4, #56]	; 0x38
 80177e4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80177e8:	6360      	str	r0, [r4, #52]	; 0x34
 80177ea:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80177ee:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80177f2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80177f6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80177fa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80177fe:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017802:	6020      	str	r0, [r4, #0]
 8017804:	2000      	movs	r0, #0
 8017806:	e7e8      	b.n	80177da <__submore+0x1e>
 8017808:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801780a:	0077      	lsls	r7, r6, #1
 801780c:	463a      	mov	r2, r7
 801780e:	f000 f85a 	bl	80178c6 <_realloc_r>
 8017812:	4605      	mov	r5, r0
 8017814:	2800      	cmp	r0, #0
 8017816:	d0de      	beq.n	80177d6 <__submore+0x1a>
 8017818:	eb00 0806 	add.w	r8, r0, r6
 801781c:	4601      	mov	r1, r0
 801781e:	4632      	mov	r2, r6
 8017820:	4640      	mov	r0, r8
 8017822:	f7fe fc4f 	bl	80160c4 <memcpy>
 8017826:	f8c4 8000 	str.w	r8, [r4]
 801782a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801782e:	e7e9      	b.n	8017804 <__submore+0x48>

08017830 <__ascii_wctomb>:
 8017830:	b149      	cbz	r1, 8017846 <__ascii_wctomb+0x16>
 8017832:	2aff      	cmp	r2, #255	; 0xff
 8017834:	bf85      	ittet	hi
 8017836:	238a      	movhi	r3, #138	; 0x8a
 8017838:	6003      	strhi	r3, [r0, #0]
 801783a:	700a      	strbls	r2, [r1, #0]
 801783c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017840:	bf98      	it	ls
 8017842:	2001      	movls	r0, #1
 8017844:	4770      	bx	lr
 8017846:	4608      	mov	r0, r1
 8017848:	4770      	bx	lr
	...

0801784c <_fstat_r>:
 801784c:	b538      	push	{r3, r4, r5, lr}
 801784e:	4c07      	ldr	r4, [pc, #28]	; (801786c <_fstat_r+0x20>)
 8017850:	2300      	movs	r3, #0
 8017852:	4605      	mov	r5, r0
 8017854:	4608      	mov	r0, r1
 8017856:	4611      	mov	r1, r2
 8017858:	6023      	str	r3, [r4, #0]
 801785a:	f7ed ff9a 	bl	8005792 <_fstat>
 801785e:	1c43      	adds	r3, r0, #1
 8017860:	d102      	bne.n	8017868 <_fstat_r+0x1c>
 8017862:	6823      	ldr	r3, [r4, #0]
 8017864:	b103      	cbz	r3, 8017868 <_fstat_r+0x1c>
 8017866:	602b      	str	r3, [r5, #0]
 8017868:	bd38      	pop	{r3, r4, r5, pc}
 801786a:	bf00      	nop
 801786c:	20023ea0 	.word	0x20023ea0

08017870 <_isatty_r>:
 8017870:	b538      	push	{r3, r4, r5, lr}
 8017872:	4c06      	ldr	r4, [pc, #24]	; (801788c <_isatty_r+0x1c>)
 8017874:	2300      	movs	r3, #0
 8017876:	4605      	mov	r5, r0
 8017878:	4608      	mov	r0, r1
 801787a:	6023      	str	r3, [r4, #0]
 801787c:	f7ed ff99 	bl	80057b2 <_isatty>
 8017880:	1c43      	adds	r3, r0, #1
 8017882:	d102      	bne.n	801788a <_isatty_r+0x1a>
 8017884:	6823      	ldr	r3, [r4, #0]
 8017886:	b103      	cbz	r3, 801788a <_isatty_r+0x1a>
 8017888:	602b      	str	r3, [r5, #0]
 801788a:	bd38      	pop	{r3, r4, r5, pc}
 801788c:	20023ea0 	.word	0x20023ea0

08017890 <memmove>:
 8017890:	4288      	cmp	r0, r1
 8017892:	b510      	push	{r4, lr}
 8017894:	eb01 0302 	add.w	r3, r1, r2
 8017898:	d807      	bhi.n	80178aa <memmove+0x1a>
 801789a:	1e42      	subs	r2, r0, #1
 801789c:	4299      	cmp	r1, r3
 801789e:	d00a      	beq.n	80178b6 <memmove+0x26>
 80178a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80178a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80178a8:	e7f8      	b.n	801789c <memmove+0xc>
 80178aa:	4283      	cmp	r3, r0
 80178ac:	d9f5      	bls.n	801789a <memmove+0xa>
 80178ae:	1881      	adds	r1, r0, r2
 80178b0:	1ad2      	subs	r2, r2, r3
 80178b2:	42d3      	cmn	r3, r2
 80178b4:	d100      	bne.n	80178b8 <memmove+0x28>
 80178b6:	bd10      	pop	{r4, pc}
 80178b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80178bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80178c0:	e7f7      	b.n	80178b2 <memmove+0x22>

080178c2 <__malloc_lock>:
 80178c2:	4770      	bx	lr

080178c4 <__malloc_unlock>:
 80178c4:	4770      	bx	lr

080178c6 <_realloc_r>:
 80178c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178c8:	4607      	mov	r7, r0
 80178ca:	4614      	mov	r4, r2
 80178cc:	460e      	mov	r6, r1
 80178ce:	b921      	cbnz	r1, 80178da <_realloc_r+0x14>
 80178d0:	4611      	mov	r1, r2
 80178d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80178d6:	f7ff b85b 	b.w	8016990 <_malloc_r>
 80178da:	b922      	cbnz	r2, 80178e6 <_realloc_r+0x20>
 80178dc:	f7ff f80a 	bl	80168f4 <_free_r>
 80178e0:	4625      	mov	r5, r4
 80178e2:	4628      	mov	r0, r5
 80178e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80178e6:	f000 f814 	bl	8017912 <_malloc_usable_size_r>
 80178ea:	42a0      	cmp	r0, r4
 80178ec:	d20f      	bcs.n	801790e <_realloc_r+0x48>
 80178ee:	4621      	mov	r1, r4
 80178f0:	4638      	mov	r0, r7
 80178f2:	f7ff f84d 	bl	8016990 <_malloc_r>
 80178f6:	4605      	mov	r5, r0
 80178f8:	2800      	cmp	r0, #0
 80178fa:	d0f2      	beq.n	80178e2 <_realloc_r+0x1c>
 80178fc:	4631      	mov	r1, r6
 80178fe:	4622      	mov	r2, r4
 8017900:	f7fe fbe0 	bl	80160c4 <memcpy>
 8017904:	4631      	mov	r1, r6
 8017906:	4638      	mov	r0, r7
 8017908:	f7fe fff4 	bl	80168f4 <_free_r>
 801790c:	e7e9      	b.n	80178e2 <_realloc_r+0x1c>
 801790e:	4635      	mov	r5, r6
 8017910:	e7e7      	b.n	80178e2 <_realloc_r+0x1c>

08017912 <_malloc_usable_size_r>:
 8017912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017916:	1f18      	subs	r0, r3, #4
 8017918:	2b00      	cmp	r3, #0
 801791a:	bfbc      	itt	lt
 801791c:	580b      	ldrlt	r3, [r1, r0]
 801791e:	18c0      	addlt	r0, r0, r3
 8017920:	4770      	bx	lr
	...

08017924 <_init>:
 8017924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017926:	bf00      	nop
 8017928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801792a:	bc08      	pop	{r3}
 801792c:	469e      	mov	lr, r3
 801792e:	4770      	bx	lr

08017930 <_fini>:
 8017930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017932:	bf00      	nop
 8017934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017936:	bc08      	pop	{r3}
 8017938:	469e      	mov	lr, r3
 801793a:	4770      	bx	lr
